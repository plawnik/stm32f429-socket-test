
socket_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017910  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00023378  08017ac0  08017ac0  00027ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803ae38  0803ae38  00050084  2**0
                  CONTENTS
  4 .ARM          00000008  0803ae38  0803ae38  0004ae38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803ae40  0803ae40  00050084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803ae40  0803ae40  0004ae40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803ae44  0803ae44  0004ae44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0803ae48  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016ddc  20000084  0803aecc  00050084  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20016e60  0803aecc  00056e60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000449b3  00000000  00000000  000500b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007a9e  00000000  00000000  00094a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022b0  00000000  00000000  0009c508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020e8  00000000  00000000  0009e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034c01  00000000  00000000  000a08a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c013  00000000  00000000  000d54a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001007fd  00000000  00000000  001014b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00201cb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095d8  00000000  00000000  00201d2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08017aa8 	.word	0x08017aa8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08017aa8 	.word	0x08017aa8

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
	return 0;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005e4:	f000 fce0 	bl	8000fa8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e8:	f000 f818 	bl	800061c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ec:	f000 f8aa 	bl	8000744 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80005f0:	f000 f87e 	bl	80006f0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80005f4:	f004 f9a6 	bl	8004944 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80005f8:	4a05      	ldr	r2, [pc, #20]	; (8000610 <main+0x30>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <main+0x34>)
 80005fe:	f004 fa33 	bl	8004a68 <osThreadNew>
 8000602:	4602      	mov	r2, r0
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <main+0x38>)
 8000606:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000608:	f004 f9d0 	bl	80049ac <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800060c:	e7fe      	b.n	800060c <main+0x2c>
 800060e:	bf00      	nop
 8000610:	0801aca8 	.word	0x0801aca8
 8000614:	080008a1 	.word	0x080008a1
 8000618:	200103a8 	.word	0x200103a8

0800061c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f016 f953 	bl	80168d6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000690:	23a8      	movs	r3, #168	; 0xa8
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 f931 	bl	8002908 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
		Error_Handler();
 80006ac:	f000 f926 	bl	80008fc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2105      	movs	r1, #5
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fb8a 	bl	8002de8 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
		Error_Handler();
 80006da:	f000 f90f 	bl	80008fc <Error_Handler>
	}
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART3_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART3_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART3_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART3_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART3_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000728:	f002 ffc0 	bl	80036ac <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000732:	f000 f8e3 	bl	80008fc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200103ac 	.word	0x200103ac
 8000740:	40004800 	.word	0x40004800

08000744 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4b4b      	ldr	r3, [pc, #300]	; (800088c <MX_GPIO_Init+0x148>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a4a      	ldr	r2, [pc, #296]	; (800088c <MX_GPIO_Init+0x148>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b48      	ldr	r3, [pc, #288]	; (800088c <MX_GPIO_Init+0x148>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b44      	ldr	r3, [pc, #272]	; (800088c <MX_GPIO_Init+0x148>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a43      	ldr	r2, [pc, #268]	; (800088c <MX_GPIO_Init+0x148>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <MX_GPIO_Init+0x148>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b3d      	ldr	r3, [pc, #244]	; (800088c <MX_GPIO_Init+0x148>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a3c      	ldr	r2, [pc, #240]	; (800088c <MX_GPIO_Init+0x148>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b3a      	ldr	r3, [pc, #232]	; (800088c <MX_GPIO_Init+0x148>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b36      	ldr	r3, [pc, #216]	; (800088c <MX_GPIO_Init+0x148>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a35      	ldr	r2, [pc, #212]	; (800088c <MX_GPIO_Init+0x148>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <MX_GPIO_Init+0x148>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_GPIO_Init+0x148>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2e      	ldr	r2, [pc, #184]	; (800088c <MX_GPIO_Init+0x148>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_GPIO_Init+0x148>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <MX_GPIO_Init+0x148>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a27      	ldr	r2, [pc, #156]	; (800088c <MX_GPIO_Init+0x148>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_GPIO_Init+0x148>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f244 0181 	movw	r1, #16513	; 0x4081
 8000808:	4821      	ldr	r0, [pc, #132]	; (8000890 <MX_GPIO_Init+0x14c>)
 800080a:	f002 f863 	bl	80028d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 800080e:	2200      	movs	r2, #0
 8000810:	2140      	movs	r1, #64	; 0x40
 8000812:	4820      	ldr	r0, [pc, #128]	; (8000894 <MX_GPIO_Init+0x150>)
 8000814:	f002 f85e 	bl	80028d4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_GPIO_Init+0x154>)
 8000820:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	481b      	ldr	r0, [pc, #108]	; (800089c <MX_GPIO_Init+0x158>)
 800082e:	f001 fea7 	bl	8002580 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000832:	f244 0381 	movw	r3, #16513	; 0x4081
 8000836:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_GPIO_Init+0x14c>)
 800084c:	f001 fe98 	bl	8002580 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000850:	2340      	movs	r3, #64	; 0x40
 8000852:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <MX_GPIO_Init+0x150>)
 8000868:	f001 fe8a 	bl	8002580 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_GPIO_Init+0x150>)
 8000880:	f001 fe7e 	bl	8002580 <HAL_GPIO_Init>

}
 8000884:	bf00      	nop
 8000886:	3730      	adds	r7, #48	; 0x30
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400
 8000894:	40021800 	.word	0x40021800
 8000898:	10110000 	.word	0x10110000
 800089c:	40020800 	.word	0x40020800

080008a0 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 80008a8:	f003 fbac 	bl	8004004 <MX_LWIP_Init>
	/* USER CODE BEGIN 5 */

	UartTaskInit(&huart3);
 80008ac:	4809      	ldr	r0, [pc, #36]	; (80008d4 <StartDefaultTask+0x34>)
 80008ae:	f000 fabb 	bl	8000e28 <UartTaskInit>
	StartDhcpTask();
 80008b2:	f000 f9f5 	bl	8000ca0 <StartDhcpTask>
	while (GetDhcpState() != DHCP_ADDRESS_ASSIGNED )
 80008b6:	e002      	b.n	80008be <StartDefaultTask+0x1e>
		osDelay(100);
 80008b8:	2064      	movs	r0, #100	; 0x64
 80008ba:	f004 f97b 	bl	8004bb4 <osDelay>
	while (GetDhcpState() != DHCP_ADDRESS_ASSIGNED )
 80008be:	f000 faa7 	bl	8000e10 <GetDhcpState>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b03      	cmp	r3, #3
 80008c6:	d1f7      	bne.n	80008b8 <StartDefaultTask+0x18>
	httpd_init();
 80008c8:	f008 fff0 	bl	80098ac <httpd_init>

	while(1){
		osDelay(100);
 80008cc:	2064      	movs	r0, #100	; 0x64
 80008ce:	f004 f971 	bl	8004bb4 <osDelay>
 80008d2:	e7fb      	b.n	80008cc <StartDefaultTask+0x2c>
 80008d4:	200103ac 	.word	0x200103ac

080008d8 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM10) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d101      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80008ea:	f000 fb7f 	bl	8000fec <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40014400 	.word	0x40014400

080008fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
	...

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <HAL_MspInit+0x78>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	4a1a      	ldr	r2, [pc, #104]	; (8000984 <HAL_MspInit+0x78>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6453      	str	r3, [r2, #68]	; 0x44
 8000922:	4b18      	ldr	r3, [pc, #96]	; (8000984 <HAL_MspInit+0x78>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HAL_MspInit+0x78>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a13      	ldr	r2, [pc, #76]	; (8000984 <HAL_MspInit+0x78>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_MspInit+0x78>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 10, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	210a      	movs	r1, #10
 800094e:	f06f 000b 	mvn.w	r0, #11
 8000952:	f000 fc45 	bl	80011e0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 10, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	210a      	movs	r1, #10
 800095a:	f06f 000a 	mvn.w	r0, #10
 800095e:	f000 fc3f 	bl	80011e0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 10, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	210a      	movs	r1, #10
 8000966:	f06f 0009 	mvn.w	r0, #9
 800096a:	f000 fc39 	bl	80011e0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 10, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	210a      	movs	r1, #10
 8000972:	f06f 0003 	mvn.w	r0, #3
 8000976:	f000 fc33 	bl	80011e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a19      	ldr	r2, [pc, #100]	; (8000a0c <HAL_UART_MspInit+0x84>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d12c      	bne.n	8000a04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	4a17      	ldr	r2, [pc, #92]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_UART_MspInit+0x88>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0308 	and.w	r3, r3, #8
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009f4:	2307      	movs	r3, #7
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	4619      	mov	r1, r3
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <HAL_UART_MspInit+0x8c>)
 8000a00:	f001 fdbe 	bl	8002580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	; 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40004800 	.word	0x40004800
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020c00 	.word	0x40020c00

08000a18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	2019      	movs	r0, #25
 8000a2e:	f000 fbd7 	bl	80011e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a32:	2019      	movs	r0, #25
 8000a34:	f000 fbf0 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <HAL_InitTick+0xa4>)
 8000a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a40:	4a1e      	ldr	r2, [pc, #120]	; (8000abc <HAL_InitTick+0xa4>)
 8000a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a46:	6453      	str	r3, [r2, #68]	; 0x44
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <HAL_InitTick+0xa4>)
 8000a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a54:	f107 0210 	add.w	r2, r7, #16
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f002 fbb4 	bl	80031cc <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a64:	f002 fb9e 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a70:	4a13      	ldr	r2, [pc, #76]	; (8000ac0 <HAL_InitTick+0xa8>)
 8000a72:	fba2 2303 	umull	r2, r3, r2, r3
 8000a76:	0c9b      	lsrs	r3, r3, #18
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_InitTick+0xac>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	; (8000ac8 <HAL_InitTick+0xb0>)
 8000a80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_InitTick+0xac>)
 8000a84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a88:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000a8a:	4a0e      	ldr	r2, [pc, #56]	; (8000ac4 <HAL_InitTick+0xac>)
 8000a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_InitTick+0xac>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <HAL_InitTick+0xac>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <HAL_InitTick+0xac>)
 8000a9e:	f002 fbc7 	bl	8003230 <HAL_TIM_Base_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d104      	bne.n	8000ab2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000aa8:	4806      	ldr	r0, [pc, #24]	; (8000ac4 <HAL_InitTick+0xac>)
 8000aaa:	f002 fbf6 	bl	800329a <HAL_TIM_Base_Start_IT>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3730      	adds	r7, #48	; 0x30
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	431bde83 	.word	0x431bde83
 8000ac4:	200104ec 	.word	0x200104ec
 8000ac8:	40014400 	.word	0x40014400

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b06:	f002 fbec 	bl	80032e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200104ec 	.word	0x200104ec

08000b14 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <ETH_IRQHandler+0x10>)
 8000b1a:	f000 ff71 	bl	8001a00 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20011e84 	.word	0x20011e84

08000b28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e00a      	b.n	8000b50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b3a:	f3af 8000 	nop.w
 8000b3e:	4601      	mov	r1, r0
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	b2ca      	uxtb	r2, r1
 8000b48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf0      	blt.n	8000b3a <_read+0x12>
	}

return len;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e009      	b.n	8000b88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dbf1      	blt.n	8000b74 <_write+0x12>
	}
	return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_close>:

int _close(int file)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
 8000bba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bc2:	605a      	str	r2, [r3, #4]
	return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <_isatty>:

int _isatty(int file)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
	return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	return 0;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
	...

08000c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c0c:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <_sbrk+0x5c>)
 8000c0e:	4b15      	ldr	r3, [pc, #84]	; (8000c64 <_sbrk+0x60>)
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c18:	4b13      	ldr	r3, [pc, #76]	; (8000c68 <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d102      	bne.n	8000c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <_sbrk+0x64>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <_sbrk+0x68>)
 8000c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d205      	bcs.n	8000c40 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <_sbrk+0x6c>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	371c      	adds	r7, #28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	20030000 	.word	0x20030000
 8000c64:	00004000 	.word	0x00004000
 8000c68:	200000a0 	.word	0x200000a0
 8000c6c:	20016e60 	.word	0x20016e60
 8000c70:	20016e58 	.word	0x20016e58

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <SystemInit+0x28>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <SystemInit+0x28>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SystemInit+0x28>)
 8000c8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <StartDhcpTask>:
		(osPriority_t) osPriorityNormal, .stack_size = 1024 * 4 };

void Dhcp_thread(void *argument);
void Dhcp_process(void const *argument);

void StartDhcpTask() {
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	dhcpTaskHandle = osThreadNew(Dhcp_thread, NULL, &dhcpTask_attributes);
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <StartDhcpTask+0x18>)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <StartDhcpTask+0x1c>)
 8000caa:	f003 fedd 	bl	8004a68 <osThreadNew>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	4b03      	ldr	r3, [pc, #12]	; (8000cc0 <StartDhcpTask+0x20>)
 8000cb2:	601a      	str	r2, [r3, #0]
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	0801ace4 	.word	0x0801ace4
 8000cbc:	08000cc5 	.word	0x08000cc5
 8000cc0:	2001052c 	.word	0x2001052c

08000cc4 <Dhcp_thread>:

void Dhcp_thread(void *argument) {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	while (1) {
		Dhcp_process(&gnetif);
 8000ccc:	4801      	ldr	r0, [pc, #4]	; (8000cd4 <Dhcp_thread+0x10>)
 8000cce:	f000 f803 	bl	8000cd8 <Dhcp_process>
 8000cd2:	e7fb      	b.n	8000ccc <Dhcp_thread+0x8>
 8000cd4:	20010570 	.word	0x20010570

08000cd8 <Dhcp_process>:

	}
}

void Dhcp_process(void const *argument) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af02      	add	r7, sp, #8
 8000cde:	6078      	str	r0, [r7, #4]
	struct netif *netif = (struct netif*) argument;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	61bb      	str	r3, [r7, #24]
	ip_addr_t ipaddr;
	ip_addr_t netmask;
	ip_addr_t gw;
	struct dhcp *dhcp;

	UartDbg("Starting DHCP...\n\r");
 8000ce4:	4841      	ldr	r0, [pc, #260]	; (8000dec <Dhcp_process+0x114>)
 8000ce6:	f000 f8e7 	bl	8000eb8 <UartDbg>
	if (netif_is_up(netif)){
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000cf0:	f003 0301 	and.w	r3, r3, #1
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d006      	beq.n	8000d08 <Dhcp_process+0x30>
	    DHCP_state = DHCP_START;
 8000cfa:	4b3d      	ldr	r3, [pc, #244]	; (8000df0 <Dhcp_process+0x118>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	701a      	strb	r2, [r3, #0]
		UartDbg("Ethernet link up!\n\r");
 8000d00:	483c      	ldr	r0, [pc, #240]	; (8000df4 <Dhcp_process+0x11c>)
 8000d02:	f000 f8d9 	bl	8000eb8 <UartDbg>
 8000d06:	e005      	b.n	8000d14 <Dhcp_process+0x3c>
	}
	else {
	    DHCP_state = DHCP_LINK_DOWN;
 8000d08:	4b39      	ldr	r3, [pc, #228]	; (8000df0 <Dhcp_process+0x118>)
 8000d0a:	2205      	movs	r2, #5
 8000d0c:	701a      	strb	r2, [r3, #0]
		UartDbg("Ethernet link down!\n\r");
 8000d0e:	483a      	ldr	r0, [pc, #232]	; (8000df8 <Dhcp_process+0x120>)
 8000d10:	f000 f8d2 	bl	8000eb8 <UartDbg>
	}

	for (;;) {
		switch (DHCP_state) {
 8000d14:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <Dhcp_process+0x118>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d017      	beq.n	8000d4e <Dhcp_process+0x76>
 8000d1e:	2b05      	cmp	r3, #5
 8000d20:	d057      	beq.n	8000dd2 <Dhcp_process+0xfa>
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d000      	beq.n	8000d28 <Dhcp_process+0x50>
			dhcp_stop(netif);
			DHCP_state = DHCP_OFF;
		}
			break;
		default:
			break;
 8000d26:	e05c      	b.n	8000de2 <Dhcp_process+0x10a>
			UartDbg("Waiting for IP address...\n\r");
 8000d28:	4834      	ldr	r0, [pc, #208]	; (8000dfc <Dhcp_process+0x124>)
 8000d2a:	f000 f8c5 	bl	8000eb8 <UartDbg>
			ip_addr_set_zero_ip4(&netif->ip_addr);
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
			ip_addr_set_zero_ip4(&netif->netmask);
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
			ip_addr_set_zero_ip4(&netif->gw);
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
			dhcp_start(netif);
 8000d40:	69b8      	ldr	r0, [r7, #24]
 8000d42:	f011 fe71 	bl	8012a28 <dhcp_start>
			DHCP_state = DHCP_WAIT_ADDRESS;
 8000d46:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <Dhcp_process+0x118>)
 8000d48:	2202      	movs	r2, #2
 8000d4a:	701a      	strb	r2, [r3, #0]
			break;
 8000d4c:	e049      	b.n	8000de2 <Dhcp_process+0x10a>
			if (dhcp_supplied_address(netif)) {
 8000d4e:	69b8      	ldr	r0, [r7, #24]
 8000d50:	f013 f976 	bl	8014040 <dhcp_supplied_address>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d015      	beq.n	8000d86 <Dhcp_process+0xae>
				DHCP_state = DHCP_ADDRESS_ASSIGNED;
 8000d5a:	4b25      	ldr	r3, [pc, #148]	; (8000df0 <Dhcp_process+0x118>)
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	701a      	strb	r2, [r3, #0]
				uint32_t temp_ip = dhcp->offered_ip_addr.addr;
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	617b      	str	r3, [r7, #20]
				UartDbg("IP address assigned by a DHCP server: [%03d.%03d.%03d.%03d]\n\r",
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	b2d9      	uxtb	r1, r3
					temp_ip&0xFF, (temp_ip>>8)&0xFF, (temp_ip>>16)&0xFF, (temp_ip>>24)&0xFF);
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
				UartDbg("IP address assigned by a DHCP server: [%03d.%03d.%03d.%03d]\n\r",
 8000d6e:	b2da      	uxtb	r2, r3
					temp_ip&0xFF, (temp_ip>>8)&0xFF, (temp_ip>>16)&0xFF, (temp_ip>>24)&0xFF);
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	0c1b      	lsrs	r3, r3, #16
				UartDbg("IP address assigned by a DHCP server: [%03d.%03d.%03d.%03d]\n\r",
 8000d74:	b2d8      	uxtb	r0, r3
					temp_ip&0xFF, (temp_ip>>8)&0xFF, (temp_ip>>16)&0xFF, (temp_ip>>24)&0xFF);
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	0e1b      	lsrs	r3, r3, #24
				UartDbg("IP address assigned by a DHCP server: [%03d.%03d.%03d.%03d]\n\r",
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4820      	ldr	r0, [pc, #128]	; (8000e00 <Dhcp_process+0x128>)
 8000d80:	f000 f89a 	bl	8000eb8 <UartDbg>
			break;
 8000d84:	e02c      	b.n	8000de0 <Dhcp_process+0x108>
				dhcp = (struct dhcp*) netif_get_client_data(netif,
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8a:	61fb      	str	r3, [r7, #28]
				if (dhcp->tries > MAX_DHCP_TRIES) {
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	799b      	ldrb	r3, [r3, #6]
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d925      	bls.n	8000de0 <Dhcp_process+0x108>
					DHCP_state = DHCP_TIMEOUT;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <Dhcp_process+0x118>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	701a      	strb	r2, [r3, #0]
					dhcp_stop(netif);
 8000d9a:	69b8      	ldr	r0, [r7, #24]
 8000d9c:	f012 fbb6 	bl	801350c <dhcp_stop>
					IP_ADDR4(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <Dhcp_process+0x12c>)
 8000da2:	613b      	str	r3, [r7, #16]
					IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1,
 8000da4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000da8:	60fb      	str	r3, [r7, #12]
					IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8000daa:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <Dhcp_process+0x130>)
 8000dac:	60bb      	str	r3, [r7, #8]
					netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask),
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	f107 020c 	add.w	r2, r7, #12
 8000db6:	f107 0110 	add.w	r1, r7, #16
 8000dba:	69b8      	ldr	r0, [r7, #24]
 8000dbc:	f009 fc76 	bl	800a6ac <netif_set_addr>
					UartDbg("Timeout, set to static IP address [%03d.%03d.%03d.%03d]\n\r",IP_ADDR0,
 8000dc0:	230a      	movs	r3, #10
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	22a8      	movs	r2, #168	; 0xa8
 8000dc8:	21c0      	movs	r1, #192	; 0xc0
 8000dca:	4810      	ldr	r0, [pc, #64]	; (8000e0c <Dhcp_process+0x134>)
 8000dcc:	f000 f874 	bl	8000eb8 <UartDbg>
			break;
 8000dd0:	e006      	b.n	8000de0 <Dhcp_process+0x108>
			dhcp_stop(netif);
 8000dd2:	69b8      	ldr	r0, [r7, #24]
 8000dd4:	f012 fb9a 	bl	801350c <dhcp_stop>
			DHCP_state = DHCP_OFF;
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <Dhcp_process+0x118>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
			break;
 8000dde:	e000      	b.n	8000de2 <Dhcp_process+0x10a>
			break;
 8000de0:	bf00      	nop
		}
		/* wait 250 ms */
		osDelay(250);
 8000de2:	20fa      	movs	r0, #250	; 0xfa
 8000de4:	f003 fee6 	bl	8004bb4 <osDelay>
		switch (DHCP_state) {
 8000de8:	e794      	b.n	8000d14 <Dhcp_process+0x3c>
 8000dea:	bf00      	nop
 8000dec:	08017ad8 	.word	0x08017ad8
 8000df0:	20010530 	.word	0x20010530
 8000df4:	08017aec 	.word	0x08017aec
 8000df8:	08017b00 	.word	0x08017b00
 8000dfc:	08017b18 	.word	0x08017b18
 8000e00:	08017b34 	.word	0x08017b34
 8000e04:	0a08a8c0 	.word	0x0a08a8c0
 8000e08:	0108a8c0 	.word	0x0108a8c0
 8000e0c:	08017b74 	.word	0x08017b74

08000e10 <GetDhcpState>:
	}
}


int GetDhcpState(void){
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
	return DHCP_state;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <GetDhcpState+0x14>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	b2db      	uxtb	r3, r3
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	20010530 	.word	0x20010530

08000e28 <UartTaskInit>:
//osThreadId uartTaskHandle;



// init uart send task
void UartTaskInit(UART_HandleTypeDef *uart_handle) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  dbg_uart = uart_handle;
 8000e30:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <UartTaskInit+0x38>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  uart_messages = xQueueCreate(32, sizeof(uint8_t*));
 8000e36:	2200      	movs	r2, #0
 8000e38:	2104      	movs	r1, #4
 8000e3a:	2020      	movs	r0, #32
 8000e3c:	f004 fcbb 	bl	80057b6 <xQueueGenericCreate>
 8000e40:	4602      	mov	r2, r0
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <UartTaskInit+0x3c>)
 8000e44:	601a      	str	r2, [r3, #0]
  // fix to use with freertoss V2 api
  uartTaskHandle = osThreadNew(StartUartTask, NULL, &uartTask_attributes);
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <UartTaskInit+0x40>)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4808      	ldr	r0, [pc, #32]	; (8000e6c <UartTaskInit+0x44>)
 8000e4c:	f003 fe0c 	bl	8004a68 <osThreadNew>
 8000e50:	4602      	mov	r2, r0
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <UartTaskInit+0x48>)
 8000e54:	601a      	str	r2, [r3, #0]
  //osThreadDef(uartTask, StartUartTask, UART_TASK_PRIORITY, 0, 1024);
  //uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20010534 	.word	0x20010534
 8000e64:	2001053c 	.word	0x2001053c
 8000e68:	0801ad08 	.word	0x0801ad08
 8000e6c:	08000ef5 	.word	0x08000ef5
 8000e70:	20010538 	.word	0x20010538

08000e74 <vprint>:

// sprintf implementation to easy use
void vprint(const char *fmt, va_list argp) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
  char *txt;
  txt = pvPortMalloc(100);
 8000e7e:	2064      	movs	r0, #100	; 0x64
 8000e80:	f007 fba6 	bl	80085d0 <pvPortMalloc>
 8000e84:	4603      	mov	r3, r0
 8000e86:	60fb      	str	r3, [r7, #12]
  if (0 < vsprintf(txt, fmt, argp)) // build string
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	683a      	ldr	r2, [r7, #0]
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f015 fdac 	bl	80169ec <vsiprintf>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	dd07      	ble.n	8000eaa <vprint+0x36>
  {
    xQueueSend(uart_messages,&txt,0);
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <vprint+0x40>)
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	f107 010c 	add.w	r1, r7, #12
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f004 fe03 	bl	8005ab0 <xQueueGenericSend>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2001053c 	.word	0x2001053c

08000eb8 <UartDbg>:

// caller to send data funtion
void UartDbg(const char *fmt, ...) // custom printf() function
{
 8000eb8:	b40f      	push	{r0, r1, r2, r3}
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
  vTaskSuspendAll();
 8000ec0:	f006 f818 	bl	8006ef4 <vTaskSuspendAll>
  va_list argp;
  va_start(argp, fmt);
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	607b      	str	r3, [r7, #4]
  vprint(fmt, argp);
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	6938      	ldr	r0, [r7, #16]
 8000ece:	f7ff ffd1 	bl	8000e74 <vprint>
  va_end(argp);
  vTaskResume(uartTaskHandle);// resume main sending task
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <UartDbg+0x38>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f005 ff48 	bl	8006d6c <vTaskResume>
  xTaskResumeAll();
 8000edc:	f006 f818 	bl	8006f10 <xTaskResumeAll>

}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000eea:	b004      	add	sp, #16
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20010538 	.word	0x20010538

08000ef4 <StartUartTask>:

// main sending task
void StartUartTask(void *argument) {
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  // set priority to lower value, when task init finished
  vTaskPrioritySet(NULL,UART_TASK_PRIORITY);
 8000efc:	2119      	movs	r1, #25
 8000efe:	2000      	movs	r0, #0
 8000f00:	f005 fdf4 	bl	8006aec <vTaskPrioritySet>
  uint8_t *mes=NULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
  while (1) {
    while (xQueueReceive(uart_messages, &mes, 0) == pdTRUE) {
 8000f08:	e011      	b.n	8000f2e <StartUartTask+0x3a>
      // DMA version not working when LWIP init func is called,
      // probably problem with static allocation for lwip task
      // or disabling DMA module for ETH interface init
      //while(!(dbg_uart->gState == HAL_UART_STATE_READY)) { }
      //HAL_UART_Transmit_DMA(dbg_uart, (uint8_t*)mes, strlen((char*)mes));
      HAL_UART_Transmit(dbg_uart, (uint8_t*)mes, strlen((char*)mes), 10);
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <StartUartTask+0x58>)
 8000f0c:	681c      	ldr	r4, [r3, #0]
 8000f0e:	68fd      	ldr	r5, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff f976 	bl	8000204 <strlen>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b29a      	uxth	r2, r3
 8000f1c:	230a      	movs	r3, #10
 8000f1e:	4629      	mov	r1, r5
 8000f20:	4620      	mov	r0, r4
 8000f22:	f002 fc10 	bl	8003746 <HAL_UART_Transmit>
      vPortFree(mes);
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 fc13 	bl	8008754 <vPortFree>
    while (xQueueReceive(uart_messages, &mes, 0) == pdTRUE) {
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <StartUartTask+0x5c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f107 010c 	add.w	r1, r7, #12
 8000f36:	2200      	movs	r2, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f004 ffd1 	bl	8005ee0 <xQueueReceive>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d0e2      	beq.n	8000f0a <StartUartTask+0x16>
    }
    vTaskSuspend(NULL); // sleep this task
 8000f44:	2000      	movs	r0, #0
 8000f46:	f005 fe6d 	bl	8006c24 <vTaskSuspend>
    while (xQueueReceive(uart_messages, &mes, 0) == pdTRUE) {
 8000f4a:	e7f0      	b.n	8000f2e <StartUartTask+0x3a>
 8000f4c:	20010534 	.word	0x20010534
 8000f50:	2001053c 	.word	0x2001053c

08000f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f8c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f5a:	e003      	b.n	8000f64 <LoopCopyDataInit>

08000f5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f62:	3104      	adds	r1, #4

08000f64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f6c:	d3f6      	bcc.n	8000f5c <CopyDataInit>
  ldr  r2, =_sbss
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f70:	e002      	b.n	8000f78 <LoopFillZerobss>

08000f72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f74:	f842 3b04 	str.w	r3, [r2], #4

08000f78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f7c:	d3f9      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f7e:	f7ff fe79 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f82:	f015 fc51 	bl	8016828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f86:	f7ff fb2b 	bl	80005e0 <main>
  bx  lr    
 8000f8a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f8c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000f90:	0803ae48 	.word	0x0803ae48
  ldr  r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f98:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8000f9c:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8000fa0:	20016e60 	.word	0x20016e60

08000fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f8fa 	bl	80011ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fd1e 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fc96 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000008 	.word	0x20000008
 8001010:	20010540 	.word	0x20010540

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20010540 	.word	0x20010540

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_Delay+0x40>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000008 	.word	0x20000008

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff4c 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f2:	f7ff ff61 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 80011f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff ffb1 	bl	8001164 <NVIC_EncodePriority>
 8001202:	4602      	mov	r2, r0
 8001204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff80 	bl	8001110 <__NVIC_SetPriority>
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff54 	bl	80010d4 <__NVIC_EnableIRQ>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001244:	4baa      	ldr	r3, [pc, #680]	; (80014f0 <HAL_ETH_Init+0x2bc>)
 8001246:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e185      	b.n	8001566 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d106      	bne.n	8001274 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f002 ff3c 	bl	80040ec <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b9e      	ldr	r3, [pc, #632]	; (80014f4 <HAL_ETH_Init+0x2c0>)
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	4a9d      	ldr	r2, [pc, #628]	; (80014f4 <HAL_ETH_Init+0x2c0>)
 800127e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001282:	6453      	str	r3, [r2, #68]	; 0x44
 8001284:	4b9b      	ldr	r3, [pc, #620]	; (80014f4 <HAL_ETH_Init+0x2c0>)
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001290:	4b99      	ldr	r3, [pc, #612]	; (80014f8 <HAL_ETH_Init+0x2c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a98      	ldr	r2, [pc, #608]	; (80014f8 <HAL_ETH_Init+0x2c4>)
 8001296:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800129a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800129c:	4b96      	ldr	r3, [pc, #600]	; (80014f8 <HAL_ETH_Init+0x2c4>)
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4994      	ldr	r1, [pc, #592]	; (80014f8 <HAL_ETH_Init+0x2c4>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0201 	orr.w	r2, r2, #1
 80012bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80012c2:	f7ff fea7 	bl	8001014 <HAL_GetTick>
 80012c6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80012c8:	e011      	b.n	80012ee <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80012ca:	f7ff fea3 	bl	8001014 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012d8:	d909      	bls.n	80012ee <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2203      	movs	r2, #3
 80012de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e13b      	b.n	8001566 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1e4      	bne.n	80012ca <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f023 031c 	bic.w	r3, r3, #28
 800130e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001310:	f001 ff28 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 8001314:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4a78      	ldr	r2, [pc, #480]	; (80014fc <HAL_ETH_Init+0x2c8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d908      	bls.n	8001330 <HAL_ETH_Init+0xfc>
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4a77      	ldr	r2, [pc, #476]	; (8001500 <HAL_ETH_Init+0x2cc>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d804      	bhi.n	8001330 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	e027      	b.n	8001380 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	4a73      	ldr	r2, [pc, #460]	; (8001500 <HAL_ETH_Init+0x2cc>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d908      	bls.n	800134a <HAL_ETH_Init+0x116>
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	4a72      	ldr	r2, [pc, #456]	; (8001504 <HAL_ETH_Init+0x2d0>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d804      	bhi.n	800134a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f043 030c 	orr.w	r3, r3, #12
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	e01a      	b.n	8001380 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	4a6d      	ldr	r2, [pc, #436]	; (8001504 <HAL_ETH_Init+0x2d0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d903      	bls.n	800135a <HAL_ETH_Init+0x126>
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4a6c      	ldr	r2, [pc, #432]	; (8001508 <HAL_ETH_Init+0x2d4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d911      	bls.n	800137e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4a6a      	ldr	r2, [pc, #424]	; (8001508 <HAL_ETH_Init+0x2d4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d908      	bls.n	8001374 <HAL_ETH_Init+0x140>
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4a69      	ldr	r2, [pc, #420]	; (800150c <HAL_ETH_Init+0x2d8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d804      	bhi.n	8001374 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e005      	b.n	8001380 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	e000      	b.n	8001380 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800137e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001388:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800138c:	2100      	movs	r1, #0
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fc19 	bl	8001bc6 <HAL_ETH_WritePHYRegister>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00b      	beq.n	80013b2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800139e:	6939      	ldr	r1, [r7, #16]
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 fdcf 	bl	8001f44 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e0d9      	b.n	8001566 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80013b2:	20ff      	movs	r0, #255	; 0xff
 80013b4:	f7ff fe3a 	bl	800102c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80a7 	beq.w	8001510 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80013c2:	f7ff fe27 	bl	8001014 <HAL_GetTick>
 80013c6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	461a      	mov	r2, r3
 80013ce:	2101      	movs	r1, #1
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 fb90 	bl	8001af6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80013d6:	f7ff fe1d 	bl	8001014 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d90f      	bls.n	8001408 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013ec:	6939      	ldr	r1, [r7, #16]
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 fda8 	bl	8001f44 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e0ae      	b.n	8001566 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0da      	beq.n	80013c8 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001412:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001416:	2100      	movs	r1, #0
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fbd4 	bl	8001bc6 <HAL_ETH_WritePHYRegister>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00b      	beq.n	800143c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001428:	6939      	ldr	r1, [r7, #16]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fd8a 	bl	8001f44 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001438:	2301      	movs	r3, #1
 800143a:	e094      	b.n	8001566 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800143c:	f7ff fdea 	bl	8001014 <HAL_GetTick>
 8001440:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	461a      	mov	r2, r3
 8001448:	2101      	movs	r1, #1
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fb53 	bl	8001af6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001450:	f7ff fde0 	bl	8001014 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	; 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d90f      	bls.n	8001482 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001466:	6939      	ldr	r1, [r7, #16]
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fd6b 	bl	8001f44 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e071      	b.n	8001566 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0da      	beq.n	8001442 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	461a      	mov	r2, r3
 8001492:	211f      	movs	r1, #31
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 fb2e 	bl	8001af6 <HAL_ETH_ReadPHYRegister>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00b      	beq.n	80014b8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014a4:	6939      	ldr	r1, [r7, #16]
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fd4c 	bl	8001f44 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014b4:	2301      	movs	r3, #1
 80014b6:	e056      	b.n	8001566 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	e002      	b.n	80014d2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	e037      	b.n	8001554 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	e032      	b.n	8001554 <HAL_ETH_Init+0x320>
 80014ee:	bf00      	nop
 80014f0:	03938700 	.word	0x03938700
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40013800 	.word	0x40013800
 80014fc:	01312cff 	.word	0x01312cff
 8001500:	02160ebf 	.word	0x02160ebf
 8001504:	039386ff 	.word	0x039386ff
 8001508:	05f5e0ff 	.word	0x05f5e0ff
 800150c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	08db      	lsrs	r3, r3, #3
 8001516:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	085b      	lsrs	r3, r3, #1
 800151e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001520:	4313      	orrs	r3, r2
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	2100      	movs	r1, #0
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 fb4c 	bl	8001bc6 <HAL_ETH_WritePHYRegister>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00b      	beq.n	800154c <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001538:	6939      	ldr	r1, [r7, #16]
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fd02 	bl	8001f44 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e00c      	b.n	8001566 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800154c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001550:	f7ff fd6c 	bl	800102c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001554:	6939      	ldr	r1, [r7, #16]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 fcf4 	bl	8001f44 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop

08001570 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001588:	2b01      	cmp	r3, #1
 800158a:	d101      	bne.n	8001590 <HAL_ETH_DMATxDescListInit+0x20>
 800158c:	2302      	movs	r3, #2
 800158e:	e052      	b.n	8001636 <HAL_ETH_DMATxDescListInit+0xc6>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	e030      	b.n	800160e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	015b      	lsls	r3, r3, #5
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	4413      	add	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80015bc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015c4:	fb02 f303 	mul.w	r3, r2, r3
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d105      	bne.n	80015e6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d208      	bcs.n	8001602 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3301      	adds	r3, #1
 80015f4:	015b      	lsls	r3, r3, #5
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	4413      	add	r3, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	e002      	b.n	8001608 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001602:	68ba      	ldr	r2, [r7, #8]
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d3ca      	bcc.n	80015ac <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001620:	3310      	adds	r3, #16
 8001622:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	371c      	adds	r7, #28
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001642:	b480      	push	{r7}
 8001644:	b087      	sub	sp, #28
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800165a:	2b01      	cmp	r3, #1
 800165c:	d101      	bne.n	8001662 <HAL_ETH_DMARxDescListInit+0x20>
 800165e:	2302      	movs	r3, #2
 8001660:	e056      	b.n	8001710 <HAL_ETH_DMARxDescListInit+0xce>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2202      	movs	r2, #2
 800166e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e034      	b.n	80016e8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	015b      	lsls	r3, r3, #5
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	4413      	add	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800168e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001696:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800169e:	fb02 f303 	mul.w	r3, r2, r3
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	461a      	mov	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d208      	bcs.n	80016dc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3301      	adds	r3, #1
 80016ce:	015b      	lsls	r3, r3, #5
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	4413      	add	r3, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	e002      	b.n	80016e2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80016dc:	68ba      	ldr	r2, [r7, #8]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3301      	adds	r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697a      	ldr	r2, [r7, #20]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d3c6      	bcc.n	800167e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016fa:	330c      	adds	r3, #12
 80016fc:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_ETH_TransmitFrame+0x24>
 800173c:	2302      	movs	r3, #2
 800173e:	e0cd      	b.n	80018dc <HAL_ETH_TransmitFrame+0x1c0>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001766:	2301      	movs	r3, #1
 8001768:	e0b8      	b.n	80018dc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	da09      	bge.n	8001788 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2212      	movs	r2, #18
 8001778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0a9      	b.n	80018dc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800178e:	4293      	cmp	r3, r2
 8001790:	d915      	bls.n	80017be <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	4a54      	ldr	r2, [pc, #336]	; (80018e8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0a9b      	lsrs	r3, r3, #10
 800179c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	4b51      	ldr	r3, [pc, #324]	; (80018e8 <HAL_ETH_TransmitFrame+0x1cc>)
 80017a2:	fba3 1302 	umull	r1, r3, r3, r2
 80017a6:	0a9b      	lsrs	r3, r3, #10
 80017a8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3301      	adds	r3, #1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e001      	b.n	80017c2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80017be:	2301      	movs	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d11c      	bne.n	8001802 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80017d6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80017e2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017f2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
 8001800:	e04b      	b.n	800189a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	e044      	b.n	8001892 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001816:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d107      	bne.n	800182e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001828:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800182c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001836:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	3b01      	subs	r3, #1
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	429a      	cmp	r2, r3
 8001840:	d116      	bne.n	8001870 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001850:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	4a25      	ldr	r2, [pc, #148]	; (80018ec <HAL_ETH_TransmitFrame+0x1d0>)
 8001856:	fb02 f203 	mul.w	r2, r2, r3
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	4413      	add	r3, r2
 800185e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001862:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800186e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800187e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	461a      	mov	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	3301      	adds	r3, #1
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	429a      	cmp	r2, r3
 8001898:	d3b6      	bcc.n	8001808 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a2:	3314      	adds	r3, #20
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00d      	beq.n	80018ca <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b6:	3314      	adds	r3, #20
 80018b8:	2204      	movs	r2, #4
 80018ba:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c4:	3304      	adds	r3, #4
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	ac02b00b 	.word	0xac02b00b
 80018ec:	fffffa0c 	.word	0xfffffa0c

080018f0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001906:	2302      	movs	r3, #2
 8001908:	e074      	b.n	80019f4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2202      	movs	r2, #2
 8001916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800191a:	e05a      	b.n	80019d2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3301      	adds	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800192c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001930:	d10d      	bne.n	800194e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	461a      	mov	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
 800194c:	e041      	b.n	80019d2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10b      	bne.n	8001974 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	461a      	mov	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
 8001972:	e02e      	b.n	80019d2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198a:	2b01      	cmp	r3, #1
 800198c:	d103      	bne.n	8001996 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	0c1b      	lsrs	r3, r3, #16
 800199e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80019a2:	1f1a      	subs	r2, r3, #4
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	461a      	mov	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e010      	b.n	80019f4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db02      	blt.n	80019e2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d99c      	bls.n	800191c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a10:	3314      	adds	r3, #20
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a18:	2b40      	cmp	r3, #64	; 0x40
 8001a1a:	d112      	bne.n	8001a42 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f002 fc33 	bl	8004288 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a2a:	3314      	adds	r3, #20
 8001a2c:	2240      	movs	r2, #64	; 0x40
 8001a2e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a40:	e01b      	b.n	8001a7a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4a:	3314      	adds	r3, #20
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d111      	bne.n	8001a7a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f839 	bl	8001ace <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a64:	3314      	adds	r3, #20
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a82:	3314      	adds	r3, #20
 8001a84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a88:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a92:	3314      	adds	r3, #20
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a9e:	d112      	bne.n	8001ac6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f81e 	bl	8001ae2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aae:	3314      	adds	r3, #20
 8001ab0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ab4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	460b      	mov	r3, r1
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b82      	cmp	r3, #130	; 0x82
 8001b16:	d101      	bne.n	8001b1c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e050      	b.n	8001bbe <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2282      	movs	r2, #130	; 0x82
 8001b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 031c 	and.w	r3, r3, #28
 8001b32:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8a1b      	ldrh	r3, [r3, #16]
 8001b38:	02db      	lsls	r3, r3, #11
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001b42:	897b      	ldrh	r3, [r7, #10]
 8001b44:	019b      	lsls	r3, r3, #6
 8001b46:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f023 0302 	bic.w	r3, r3, #2
 8001b56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001b68:	f7ff fa54 	bl	8001014 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b6e:	e015      	b.n	8001b9c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001b70:	f7ff fa50 	bl	8001014 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b7e:	d309      	bcc.n	8001b94 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e014      	b.n	8001bbe <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1e4      	bne.n	8001b70 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b42      	cmp	r3, #66	; 0x42
 8001be6:	d101      	bne.n	8001bec <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001be8:	2302      	movs	r3, #2
 8001bea:	e04e      	b.n	8001c8a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2242      	movs	r2, #66	; 0x42
 8001bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f003 031c 	and.w	r3, r3, #28
 8001c02:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8a1b      	ldrh	r3, [r3, #16]
 8001c08:	02db      	lsls	r3, r3, #11
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	697a      	ldr	r2, [r7, #20]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001c12:	897b      	ldrh	r3, [r7, #10]
 8001c14:	019b      	lsls	r3, r3, #6
 8001c16:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c42:	f7ff f9e7 	bl	8001014 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c48:	e015      	b.n	8001c76 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001c4a:	f7ff f9e3 	bl	8001014 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c58:	d309      	bcc.n	8001c6e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e00d      	b.n	8001c8a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e4      	bne.n	8001c4a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ETH_Start+0x16>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e01f      	b.n	8001ce8 <HAL_ETH_Start+0x56>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 fb45 	bl	8002348 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fb7c 	bl	80023bc <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 fc13 	bl	80024f0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fbb0 	bl	8002430 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fbdd 	bl	8002490 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_ETH_Stop+0x16>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e01f      	b.n	8001d46 <HAL_ETH_Stop+0x56>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2202      	movs	r2, #2
 8001d12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fba2 	bl	8002460 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 fbcf 	bl	80024c0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 fb67 	bl	80023f6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 fbe1 	bl	80024f0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 fb27 	bl	8002382 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_ETH_ConfigMAC+0x1c>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e0e4      	b.n	8001f36 <HAL_ETH_ConfigMAC+0x1e6>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f000 80b1 	beq.w	8001ee6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4b6c      	ldr	r3, [pc, #432]	; (8001f40 <HAL_ETH_ConfigMAC+0x1f0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001d9c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001da2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001da8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001dae:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001db4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001dba:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001dc0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001dc6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001dcc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001dd2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001dd8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001dde:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f7ff f918 	bl	800102c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e0c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001e12:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001e18:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001e1e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001e24:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001e2a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001e36:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001e38:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e42:	2001      	movs	r0, #1
 8001e44:	f7ff f8f2 	bl	800102c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e58:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e62:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e72:	4013      	ands	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e80:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001e86:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001e8c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001e92:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001e98:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f7ff f8bb 	bl	800102c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff f8a8 	bl	800102c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	61da      	str	r2, [r3, #28]
 8001ee4:	e01e      	b.n	8001f24 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ef4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f16:	2001      	movs	r0, #1
 8001f18:	f7ff f888 	bl	800102c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	ff20810f 	.word	0xff20810f

08001f44 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0b0      	sub	sp, #192	; 0xc0
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d007      	beq.n	8001f6a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f60:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f68:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001f72:	2300      	movs	r3, #0
 8001f74:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d103      	bne.n	8001f92 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001f8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f90:	e001      	b.n	8001f96 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001fb0:	2340      	movs	r3, #64	; 0x40
 8001fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002018:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800201c:	4bac      	ldr	r3, [pc, #688]	; (80022d0 <ETH_MACDMAConfig+0x38c>)
 800201e:	4013      	ands	r3, r2
 8002020:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002024:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002028:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800202a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800202c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800202e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002030:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002036:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002038:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800203a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800203c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800203e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002044:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002048:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800204a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800204c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800204e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002050:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002054:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002058:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800205a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800206c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002078:	2001      	movs	r0, #1
 800207a:	f7fe ffd7 	bl	800102c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002086:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002088:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800208a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800208c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800208e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002090:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002092:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002096:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002098:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800209c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800209e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80020a2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80020a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80020a8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80020ac:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80020b4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80020b6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80020c2:	2001      	movs	r0, #1
 80020c4:	f7fe ffb2 	bl	800102c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020d0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020da:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80020e4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80020f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020f4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80020f8:	4013      	ands	r3, r2
 80020fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80020fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002102:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002104:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002108:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800210a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800210e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002114:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800211a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800211c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002120:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002122:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002134:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002140:	2001      	movs	r0, #1
 8002142:	f7fe ff73 	bl	800102c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800214e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002150:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002154:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800216a:	2001      	movs	r0, #1
 800216c:	f7fe ff5e 	bl	800102c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002178:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800217e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002182:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002188:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800218c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800218e:	2300      	movs	r3, #0
 8002190:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800219e:	2304      	movs	r3, #4
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80021a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80021a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021ac:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021b2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021b8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021c2:	2300      	movs	r3, #0
 80021c4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ce:	3318      	adds	r3, #24
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80021d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021da:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <ETH_MACDMAConfig+0x390>)
 80021dc:	4013      	ands	r3, r2
 80021de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021e2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80021e4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80021e6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80021e8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80021ea:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80021ec:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80021ee:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80021f0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80021f2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80021f4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80021f6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80021f8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80021fa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80021fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80021fe:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002200:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002202:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002204:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002216:	3318      	adds	r3, #24
 8002218:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800221c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002226:	3318      	adds	r3, #24
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800222e:	2001      	movs	r0, #1
 8002230:	f7fe fefc 	bl	800102c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800223c:	3318      	adds	r3, #24
 800223e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002242:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002248:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800224c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002250:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002254:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002258:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800225a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800225c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800225e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800227c:	2001      	movs	r0, #1
 800227e:	f7fe fed5 	bl	800102c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800228e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d10f      	bne.n	80022b8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a0:	331c      	adds	r3, #28
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80022ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b4:	331c      	adds	r3, #28
 80022b6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	461a      	mov	r2, r3
 80022be:	2100      	movs	r1, #0
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f809 	bl	80022d8 <ETH_MACAddressConfig>
}
 80022c6:	bf00      	nop
 80022c8:	37c0      	adds	r7, #192	; 0xc0
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	ff20810f 	.word	0xff20810f
 80022d4:	f8de3f23 	.word	0xf8de3f23

080022d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3305      	adds	r3, #5
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	3204      	adds	r2, #4
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <ETH_MACAddressConfig+0x68>)
 80022fa:	4413      	add	r3, r2
 80022fc:	461a      	mov	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3303      	adds	r3, #3
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	061a      	lsls	r2, r3, #24
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3302      	adds	r3, #2
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	041b      	lsls	r3, r3, #16
 8002312:	431a      	orrs	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3301      	adds	r3, #1
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	4313      	orrs	r3, r2
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	7812      	ldrb	r2, [r2, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <ETH_MACAddressConfig+0x6c>)
 800232a:	4413      	add	r3, r2
 800232c:	461a      	mov	r2, r3
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	6013      	str	r3, [r2, #0]
}
 8002332:	bf00      	nop
 8002334:	371c      	adds	r7, #28
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40028040 	.word	0x40028040
 8002344:	40028044 	.word	0x40028044

08002348 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0208 	orr.w	r2, r2, #8
 8002362:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800236c:	2001      	movs	r0, #1
 800236e:	f000 f8e9 	bl	8002544 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	601a      	str	r2, [r3, #0]
}
 800237a:	bf00      	nop
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0208 	bic.w	r2, r2, #8
 800239c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f000 f8cc 	bl	8002544 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	601a      	str	r2, [r3, #0]
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f042 0204 	orr.w	r2, r2, #4
 80023d6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80023e0:	2001      	movs	r0, #1
 80023e2:	f000 f8af 	bl	8002544 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	601a      	str	r2, [r3, #0]
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0204 	bic.w	r2, r2, #4
 8002410:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800241a:	2001      	movs	r0, #1
 800241c:	f000 f892 	bl	8002544 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	601a      	str	r2, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002440:	3318      	adds	r3, #24
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800244c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002450:	3318      	adds	r3, #24
 8002452:	601a      	str	r2, [r3, #0]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002470:	3318      	adds	r3, #24
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800247c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002480:	3318      	adds	r3, #24
 8002482:	601a      	str	r2, [r3, #0]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a0:	3318      	adds	r3, #24
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0202 	orr.w	r2, r2, #2
 80024ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024b0:	3318      	adds	r3, #24
 80024b2:	601a      	str	r2, [r3, #0]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d0:	3318      	adds	r3, #24
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0202 	bic.w	r2, r2, #2
 80024dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e0:	3318      	adds	r3, #24
 80024e2:	601a      	str	r2, [r3, #0]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002504:	3318      	adds	r3, #24
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002514:	3318      	adds	r3, #24
 8002516:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002520:	3318      	adds	r3, #24
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002526:	2001      	movs	r0, #1
 8002528:	f000 f80c 	bl	8002544 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002536:	3318      	adds	r3, #24
 8002538:	601a      	str	r2, [r3, #0]
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <ETH_Delay+0x34>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0a      	ldr	r2, [pc, #40]	; (800257c <ETH_Delay+0x38>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	0a5b      	lsrs	r3, r3, #9
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002560:	bf00      	nop
  } 
  while (Delay --);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1e5a      	subs	r2, r3, #1
 8002566:	60fa      	str	r2, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f9      	bne.n	8002560 <ETH_Delay+0x1c>
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	20000000 	.word	0x20000000
 800257c:	10624dd3 	.word	0x10624dd3

08002580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	; 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	e177      	b.n	800288c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800259c:	2201      	movs	r2, #1
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	f040 8166 	bne.w	8002886 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d00b      	beq.n	80025da <HAL_GPIO_Init+0x5a>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d007      	beq.n	80025da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025ce:	2b11      	cmp	r3, #17
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b12      	cmp	r3, #18
 80025d8:	d130      	bne.n	800263c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002610:	2201      	movs	r2, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	091b      	lsrs	r3, r3, #4
 8002626:	f003 0201 	and.w	r2, r3, #1
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0xfc>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b12      	cmp	r3, #18
 800267a:	d123      	bne.n	80026c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	08da      	lsrs	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3208      	adds	r2, #8
 8002684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	220f      	movs	r2, #15
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3208      	adds	r2, #8
 80026be:	69b9      	ldr	r1, [r7, #24]
 80026c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0203 	and.w	r2, r3, #3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80c0 	beq.w	8002886 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b65      	ldr	r3, [pc, #404]	; (80028a0 <HAL_GPIO_Init+0x320>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a64      	ldr	r2, [pc, #400]	; (80028a0 <HAL_GPIO_Init+0x320>)
 8002710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b62      	ldr	r3, [pc, #392]	; (80028a0 <HAL_GPIO_Init+0x320>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002722:	4a60      	ldr	r2, [pc, #384]	; (80028a4 <HAL_GPIO_Init+0x324>)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	3302      	adds	r3, #2
 800272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	220f      	movs	r2, #15
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a57      	ldr	r2, [pc, #348]	; (80028a8 <HAL_GPIO_Init+0x328>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d037      	beq.n	80027be <HAL_GPIO_Init+0x23e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a56      	ldr	r2, [pc, #344]	; (80028ac <HAL_GPIO_Init+0x32c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d031      	beq.n	80027ba <HAL_GPIO_Init+0x23a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a55      	ldr	r2, [pc, #340]	; (80028b0 <HAL_GPIO_Init+0x330>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d02b      	beq.n	80027b6 <HAL_GPIO_Init+0x236>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a54      	ldr	r2, [pc, #336]	; (80028b4 <HAL_GPIO_Init+0x334>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d025      	beq.n	80027b2 <HAL_GPIO_Init+0x232>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a53      	ldr	r2, [pc, #332]	; (80028b8 <HAL_GPIO_Init+0x338>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d01f      	beq.n	80027ae <HAL_GPIO_Init+0x22e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a52      	ldr	r2, [pc, #328]	; (80028bc <HAL_GPIO_Init+0x33c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d019      	beq.n	80027aa <HAL_GPIO_Init+0x22a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a51      	ldr	r2, [pc, #324]	; (80028c0 <HAL_GPIO_Init+0x340>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d013      	beq.n	80027a6 <HAL_GPIO_Init+0x226>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <HAL_GPIO_Init+0x344>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00d      	beq.n	80027a2 <HAL_GPIO_Init+0x222>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4f      	ldr	r2, [pc, #316]	; (80028c8 <HAL_GPIO_Init+0x348>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d007      	beq.n	800279e <HAL_GPIO_Init+0x21e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4e      	ldr	r2, [pc, #312]	; (80028cc <HAL_GPIO_Init+0x34c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d101      	bne.n	800279a <HAL_GPIO_Init+0x21a>
 8002796:	2309      	movs	r3, #9
 8002798:	e012      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 800279a:	230a      	movs	r3, #10
 800279c:	e010      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 800279e:	2308      	movs	r3, #8
 80027a0:	e00e      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027a2:	2307      	movs	r3, #7
 80027a4:	e00c      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027a6:	2306      	movs	r3, #6
 80027a8:	e00a      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027aa:	2305      	movs	r3, #5
 80027ac:	e008      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027ae:	2304      	movs	r3, #4
 80027b0:	e006      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027b2:	2303      	movs	r3, #3
 80027b4:	e004      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e002      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x240>
 80027be:	2300      	movs	r3, #0
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	f002 0203 	and.w	r2, r2, #3
 80027c6:	0092      	lsls	r2, r2, #2
 80027c8:	4093      	lsls	r3, r2
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027d0:	4934      	ldr	r1, [pc, #208]	; (80028a4 <HAL_GPIO_Init+0x324>)
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	089b      	lsrs	r3, r3, #2
 80027d6:	3302      	adds	r3, #2
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027de:	4b3c      	ldr	r3, [pc, #240]	; (80028d0 <HAL_GPIO_Init+0x350>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4313      	orrs	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002802:	4a33      	ldr	r2, [pc, #204]	; (80028d0 <HAL_GPIO_Init+0x350>)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002808:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_GPIO_Init+0x350>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	43db      	mvns	r3, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4313      	orrs	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800282c:	4a28      	ldr	r2, [pc, #160]	; (80028d0 <HAL_GPIO_Init+0x350>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002832:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <HAL_GPIO_Init+0x350>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002856:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <HAL_GPIO_Init+0x350>)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800285c:	4b1c      	ldr	r3, [pc, #112]	; (80028d0 <HAL_GPIO_Init+0x350>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002880:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <HAL_GPIO_Init+0x350>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3301      	adds	r3, #1
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b0f      	cmp	r3, #15
 8002890:	f67f ae84 	bls.w	800259c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002894:	bf00      	nop
 8002896:	3724      	adds	r7, #36	; 0x24
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40013800 	.word	0x40013800
 80028a8:	40020000 	.word	0x40020000
 80028ac:	40020400 	.word	0x40020400
 80028b0:	40020800 	.word	0x40020800
 80028b4:	40020c00 	.word	0x40020c00
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40021400 	.word	0x40021400
 80028c0:	40021800 	.word	0x40021800
 80028c4:	40021c00 	.word	0x40021c00
 80028c8:	40022000 	.word	0x40022000
 80028cc:	40022400 	.word	0x40022400
 80028d0:	40013c00 	.word	0x40013c00

080028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028e4:	787b      	ldrb	r3, [r7, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028f0:	e003      	b.n	80028fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	041a      	lsls	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	619a      	str	r2, [r3, #24]
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
	...

08002908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e25b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d075      	beq.n	8002a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002926:	4ba3      	ldr	r3, [pc, #652]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d00c      	beq.n	800294c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4ba0      	ldr	r3, [pc, #640]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800293a:	2b08      	cmp	r3, #8
 800293c:	d112      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b9d      	ldr	r3, [pc, #628]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b99      	ldr	r3, [pc, #612]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e236      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x74>
 800296e:	4b91      	ldr	r3, [pc, #580]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a90      	ldr	r2, [pc, #576]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b8b      	ldr	r3, [pc, #556]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a8a      	ldr	r2, [pc, #552]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b88      	ldr	r3, [pc, #544]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a87      	ldr	r2, [pc, #540]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 80029a0:	4b84      	ldr	r3, [pc, #528]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a83      	ldr	r2, [pc, #524]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b81      	ldr	r3, [pc, #516]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a80      	ldr	r2, [pc, #512]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe fb28 	bl	8001014 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe fb24 	bl	8001014 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e1fb      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b76      	ldr	r3, [pc, #472]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fb14 	bl	8001014 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fb10 	bl	8001014 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1e7      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b6c      	ldr	r3, [pc, #432]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a1e:	4b65      	ldr	r3, [pc, #404]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2a:	4b62      	ldr	r3, [pc, #392]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b5f      	ldr	r3, [pc, #380]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	4b5c      	ldr	r3, [pc, #368]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1bb      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b56      	ldr	r3, [pc, #344]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4952      	ldr	r1, [pc, #328]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a78:	4b4f      	ldr	r3, [pc, #316]	; (8002bb8 <HAL_RCC_OscConfig+0x2b0>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fac9 	bl	8001014 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fe fac5 	bl	8001014 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e19c      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4940      	ldr	r1, [pc, #256]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_RCC_OscConfig+0x2b0>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe faa8 	bl	8001014 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7fe faa4 	bl	8001014 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e17b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b36      	ldr	r3, [pc, #216]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d030      	beq.n	8002b54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d016      	beq.n	8002b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b30      	ldr	r3, [pc, #192]	; (8002bbc <HAL_RCC_OscConfig+0x2b4>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe fa88 	bl	8001014 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b08:	f7fe fa84 	bl	8001014 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e15b      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x200>
 8002b26:	e015      	b.n	8002b54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b28:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <HAL_RCC_OscConfig+0x2b4>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fa71 	bl	8001014 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b36:	f7fe fa6d 	bl	8001014 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e144      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b48:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80a0 	beq.w	8002ca2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b62:	2300      	movs	r3, #0
 8002b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10f      	bne.n	8002b92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	4a0e      	ldr	r2, [pc, #56]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b80:	6413      	str	r3, [r2, #64]	; 0x40
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b92:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_RCC_OscConfig+0x2b8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d121      	bne.n	8002be2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_RCC_OscConfig+0x2b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_RCC_OscConfig+0x2b8>)
 8002ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002baa:	f7fe fa33 	bl	8001014 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb0:	e011      	b.n	8002bd6 <HAL_RCC_OscConfig+0x2ce>
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	42470000 	.word	0x42470000
 8002bbc:	42470e80 	.word	0x42470e80
 8002bc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc4:	f7fe fa26 	bl	8001014 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e0fd      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd6:	4b81      	ldr	r3, [pc, #516]	; (8002ddc <HAL_RCC_OscConfig+0x4d4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f0      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d106      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x2f0>
 8002bea:	4b7d      	ldr	r3, [pc, #500]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a7c      	ldr	r2, [pc, #496]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf6:	e01c      	b.n	8002c32 <HAL_RCC_OscConfig+0x32a>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	d10c      	bne.n	8002c1a <HAL_RCC_OscConfig+0x312>
 8002c00:	4b77      	ldr	r3, [pc, #476]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c04:	4a76      	ldr	r2, [pc, #472]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c06:	f043 0304 	orr.w	r3, r3, #4
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0c:	4b74      	ldr	r3, [pc, #464]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	4a73      	ldr	r2, [pc, #460]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6713      	str	r3, [r2, #112]	; 0x70
 8002c18:	e00b      	b.n	8002c32 <HAL_RCC_OscConfig+0x32a>
 8002c1a:	4b71      	ldr	r3, [pc, #452]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1e:	4a70      	ldr	r2, [pc, #448]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	6713      	str	r3, [r2, #112]	; 0x70
 8002c26:	4b6e      	ldr	r3, [pc, #440]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2a:	4a6d      	ldr	r2, [pc, #436]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c2c:	f023 0304 	bic.w	r3, r3, #4
 8002c30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d015      	beq.n	8002c66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7fe f9eb 	bl	8001014 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe f9e7 	bl	8001014 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0bc      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c58:	4b61      	ldr	r3, [pc, #388]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ee      	beq.n	8002c42 <HAL_RCC_OscConfig+0x33a>
 8002c64:	e014      	b.n	8002c90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c66:	f7fe f9d5 	bl	8001014 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6c:	e00a      	b.n	8002c84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6e:	f7fe f9d1 	bl	8001014 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e0a6      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c84:	4b56      	ldr	r3, [pc, #344]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1ee      	bne.n	8002c6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d105      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c96:	4b52      	ldr	r3, [pc, #328]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a51      	ldr	r2, [pc, #324]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 8092 	beq.w	8002dd0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cac:	4b4c      	ldr	r3, [pc, #304]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d05c      	beq.n	8002d72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d141      	bne.n	8002d44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc0:	4b48      	ldr	r3, [pc, #288]	; (8002de4 <HAL_RCC_OscConfig+0x4dc>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc6:	f7fe f9a5 	bl	8001014 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cce:	f7fe f9a1 	bl	8001014 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e078      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce0:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	019b      	lsls	r3, r3, #6
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	3b01      	subs	r3, #1
 8002d06:	041b      	lsls	r3, r3, #16
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	061b      	lsls	r3, r3, #24
 8002d10:	4933      	ldr	r1, [pc, #204]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d16:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <HAL_RCC_OscConfig+0x4dc>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe f97a 	bl	8001014 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe f976 	bl	8001014 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e04d      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d36:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x41c>
 8002d42:	e045      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d44:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <HAL_RCC_OscConfig+0x4dc>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4a:	f7fe f963 	bl	8001014 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d52:	f7fe f95f 	bl	8001014 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e036      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d64:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0x44a>
 8002d70:	e02e      	b.n	8002dd0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e029      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d7e:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_RCC_OscConfig+0x4d8>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69db      	ldr	r3, [r3, #28]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d11c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d115      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002da6:	4013      	ands	r3, r2
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d10d      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d106      	bne.n	8002dcc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d001      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e000      	b.n	8002dd2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40007000 	.word	0x40007000
 8002de0:	40023800 	.word	0x40023800
 8002de4:	42470060 	.word	0x42470060

08002de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e0cc      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b68      	ldr	r3, [pc, #416]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d90c      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0a:	4b65      	ldr	r3, [pc, #404]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b63      	ldr	r3, [pc, #396]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0b8      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e3c:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a58      	ldr	r2, [pc, #352]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e54:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e60:	4b50      	ldr	r3, [pc, #320]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	494d      	ldr	r1, [pc, #308]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d044      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d119      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e07f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d003      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	d107      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea6:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e06f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb6:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e067      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ec6:	4b37      	ldr	r3, [pc, #220]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f023 0203 	bic.w	r2, r3, #3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4934      	ldr	r1, [pc, #208]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed8:	f7fe f89c 	bl	8001014 <HAL_GetTick>
 8002edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee0:	f7fe f898 	bl	8001014 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e04f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef6:	4b2b      	ldr	r3, [pc, #172]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 020c 	and.w	r2, r3, #12
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1eb      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d20c      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f16:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e032      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4916      	ldr	r1, [pc, #88]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f6e:	f000 f821 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f72:	4601      	mov	r1, r0
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	4a0a      	ldr	r2, [pc, #40]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f80:	5cd3      	ldrb	r3, [r2, r3]
 8002f82:	fa21 f303 	lsr.w	r3, r1, r3
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1c4>)
 8002f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fd fd42 	bl	8000a18 <HAL_InitTick>

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023c00 	.word	0x40023c00
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	0801accc 	.word	0x0801accc
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	20000004 	.word	0x20000004

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fca:	4b63      	ldr	r3, [pc, #396]	; (8003158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d007      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0x32>
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d008      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0x38>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 80b4 	bne.w	8003148 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fe0:	4b5e      	ldr	r3, [pc, #376]	; (800315c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002fe2:	60bb      	str	r3, [r7, #8]
       break;
 8002fe4:	e0b3      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fe6:	4b5e      	ldr	r3, [pc, #376]	; (8003160 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002fe8:	60bb      	str	r3, [r7, #8]
      break;
 8002fea:	e0b0      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fec:	4b5a      	ldr	r3, [pc, #360]	; (8003158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ff4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ff6:	4b58      	ldr	r3, [pc, #352]	; (8003158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d04a      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003002:	4b55      	ldr	r3, [pc, #340]	; (8003158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	099b      	lsrs	r3, r3, #6
 8003008:	f04f 0400 	mov.w	r4, #0
 800300c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	ea03 0501 	and.w	r5, r3, r1
 8003018:	ea04 0602 	and.w	r6, r4, r2
 800301c:	4629      	mov	r1, r5
 800301e:	4632      	mov	r2, r6
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	f04f 0400 	mov.w	r4, #0
 8003028:	0154      	lsls	r4, r2, #5
 800302a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800302e:	014b      	lsls	r3, r1, #5
 8003030:	4619      	mov	r1, r3
 8003032:	4622      	mov	r2, r4
 8003034:	1b49      	subs	r1, r1, r5
 8003036:	eb62 0206 	sbc.w	r2, r2, r6
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	f04f 0400 	mov.w	r4, #0
 8003042:	0194      	lsls	r4, r2, #6
 8003044:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003048:	018b      	lsls	r3, r1, #6
 800304a:	1a5b      	subs	r3, r3, r1
 800304c:	eb64 0402 	sbc.w	r4, r4, r2
 8003050:	f04f 0100 	mov.w	r1, #0
 8003054:	f04f 0200 	mov.w	r2, #0
 8003058:	00e2      	lsls	r2, r4, #3
 800305a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800305e:	00d9      	lsls	r1, r3, #3
 8003060:	460b      	mov	r3, r1
 8003062:	4614      	mov	r4, r2
 8003064:	195b      	adds	r3, r3, r5
 8003066:	eb44 0406 	adc.w	r4, r4, r6
 800306a:	f04f 0100 	mov.w	r1, #0
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	0262      	lsls	r2, r4, #9
 8003074:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003078:	0259      	lsls	r1, r3, #9
 800307a:	460b      	mov	r3, r1
 800307c:	4614      	mov	r4, r2
 800307e:	4618      	mov	r0, r3
 8003080:	4621      	mov	r1, r4
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f04f 0400 	mov.w	r4, #0
 8003088:	461a      	mov	r2, r3
 800308a:	4623      	mov	r3, r4
 800308c:	f7fd f918 	bl	80002c0 <__aeabi_uldivmod>
 8003090:	4603      	mov	r3, r0
 8003092:	460c      	mov	r4, r1
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e049      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003098:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	f04f 0400 	mov.w	r4, #0
 80030a2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	ea03 0501 	and.w	r5, r3, r1
 80030ae:	ea04 0602 	and.w	r6, r4, r2
 80030b2:	4629      	mov	r1, r5
 80030b4:	4632      	mov	r2, r6
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f04f 0400 	mov.w	r4, #0
 80030be:	0154      	lsls	r4, r2, #5
 80030c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030c4:	014b      	lsls	r3, r1, #5
 80030c6:	4619      	mov	r1, r3
 80030c8:	4622      	mov	r2, r4
 80030ca:	1b49      	subs	r1, r1, r5
 80030cc:	eb62 0206 	sbc.w	r2, r2, r6
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	f04f 0400 	mov.w	r4, #0
 80030d8:	0194      	lsls	r4, r2, #6
 80030da:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030de:	018b      	lsls	r3, r1, #6
 80030e0:	1a5b      	subs	r3, r3, r1
 80030e2:	eb64 0402 	sbc.w	r4, r4, r2
 80030e6:	f04f 0100 	mov.w	r1, #0
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	00e2      	lsls	r2, r4, #3
 80030f0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030f4:	00d9      	lsls	r1, r3, #3
 80030f6:	460b      	mov	r3, r1
 80030f8:	4614      	mov	r4, r2
 80030fa:	195b      	adds	r3, r3, r5
 80030fc:	eb44 0406 	adc.w	r4, r4, r6
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	02a2      	lsls	r2, r4, #10
 800310a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800310e:	0299      	lsls	r1, r3, #10
 8003110:	460b      	mov	r3, r1
 8003112:	4614      	mov	r4, r2
 8003114:	4618      	mov	r0, r3
 8003116:	4621      	mov	r1, r4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f04f 0400 	mov.w	r4, #0
 800311e:	461a      	mov	r2, r3
 8003120:	4623      	mov	r3, r4
 8003122:	f7fd f8cd 	bl	80002c0 <__aeabi_uldivmod>
 8003126:	4603      	mov	r3, r0
 8003128:	460c      	mov	r4, r1
 800312a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	60bb      	str	r3, [r7, #8]
      break;
 8003146:	e002      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800314a:	60bb      	str	r3, [r7, #8]
      break;
 800314c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314e:	68bb      	ldr	r3, [r7, #8]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003158:	40023800 	.word	0x40023800
 800315c:	00f42400 	.word	0x00f42400
 8003160:	007a1200 	.word	0x007a1200

08003164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003168:	4b03      	ldr	r3, [pc, #12]	; (8003178 <HAL_RCC_GetHCLKFreq+0x14>)
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000000 	.word	0x20000000

0800317c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003180:	f7ff fff0 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 8003184:	4601      	mov	r1, r0
 8003186:	4b05      	ldr	r3, [pc, #20]	; (800319c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	0a9b      	lsrs	r3, r3, #10
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	4a03      	ldr	r2, [pc, #12]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003192:	5cd3      	ldrb	r3, [r2, r3]
 8003194:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40023800 	.word	0x40023800
 80031a0:	0801acdc 	.word	0x0801acdc

080031a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031a8:	f7ff ffdc 	bl	8003164 <HAL_RCC_GetHCLKFreq>
 80031ac:	4601      	mov	r1, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	0b5b      	lsrs	r3, r3, #13
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4a03      	ldr	r2, [pc, #12]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	0801acdc 	.word	0x0801acdc

080031cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	220f      	movs	r2, #15
 80031da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031dc:	4b12      	ldr	r3, [pc, #72]	; (8003228 <HAL_RCC_GetClockConfig+0x5c>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0203 	and.w	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031e8:	4b0f      	ldr	r3, [pc, #60]	; (8003228 <HAL_RCC_GetClockConfig+0x5c>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80031f4:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <HAL_RCC_GetClockConfig+0x5c>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <HAL_RCC_GetClockConfig+0x5c>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	08db      	lsrs	r3, r3, #3
 8003206:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800320e:	4b07      	ldr	r3, [pc, #28]	; (800322c <HAL_RCC_GetClockConfig+0x60>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 020f 	and.w	r2, r3, #15
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	601a      	str	r2, [r3, #0]
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	40023c00 	.word	0x40023c00

08003230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e01d      	b.n	800327e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f815 	bl	8003286 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3304      	adds	r3, #4
 800326c:	4619      	mov	r1, r3
 800326e:	4610      	mov	r0, r2
 8003270:	f000 f968 	bl	8003544 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003286:	b480      	push	{r7}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800328e:	bf00      	nop
 8003290:	370c      	adds	r7, #12
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800329a:	b480      	push	{r7}
 800329c:	b085      	sub	sp, #20
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b06      	cmp	r3, #6
 80032c2:	d007      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d122      	bne.n	800333e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b02      	cmp	r3, #2
 8003304:	d11b      	bne.n	800333e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f06f 0202 	mvn.w	r2, #2
 800330e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f8ee 	bl	8003506 <HAL_TIM_IC_CaptureCallback>
 800332a:	e005      	b.n	8003338 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f8e0 	bl	80034f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f8f1 	bl	800351a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b04      	cmp	r3, #4
 800334a:	d122      	bne.n	8003392 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b04      	cmp	r3, #4
 8003358:	d11b      	bne.n	8003392 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f06f 0204 	mvn.w	r2, #4
 8003362:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f8c4 	bl	8003506 <HAL_TIM_IC_CaptureCallback>
 800337e:	e005      	b.n	800338c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f8b6 	bl	80034f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8c7 	bl	800351a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f003 0308 	and.w	r3, r3, #8
 800339c:	2b08      	cmp	r3, #8
 800339e:	d122      	bne.n	80033e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d11b      	bne.n	80033e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f06f 0208 	mvn.w	r2, #8
 80033b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2204      	movs	r2, #4
 80033bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f89a 	bl	8003506 <HAL_TIM_IC_CaptureCallback>
 80033d2:	e005      	b.n	80033e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f88c 	bl	80034f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 f89d 	bl	800351a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	d122      	bne.n	800343a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f003 0310 	and.w	r3, r3, #16
 80033fe:	2b10      	cmp	r3, #16
 8003400:	d11b      	bne.n	800343a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f06f 0210 	mvn.w	r2, #16
 800340a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2208      	movs	r2, #8
 8003410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 f870 	bl	8003506 <HAL_TIM_IC_CaptureCallback>
 8003426:	e005      	b.n	8003434 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f862 	bl	80034f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f873 	bl	800351a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d10e      	bne.n	8003466 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b01      	cmp	r3, #1
 8003454:	d107      	bne.n	8003466 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f06f 0201 	mvn.w	r2, #1
 800345e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7fd fa39 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b80      	cmp	r3, #128	; 0x80
 8003472:	d10e      	bne.n	8003492 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347e:	2b80      	cmp	r3, #128	; 0x80
 8003480:	d107      	bne.n	8003492 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800348a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f903 	bl	8003698 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349c:	2b40      	cmp	r3, #64	; 0x40
 800349e:	d10e      	bne.n	80034be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b40      	cmp	r3, #64	; 0x40
 80034ac:	d107      	bne.n	80034be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f838 	bl	800352e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d10e      	bne.n	80034ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f003 0320 	and.w	r3, r3, #32
 80034d6:	2b20      	cmp	r3, #32
 80034d8:	d107      	bne.n	80034ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f06f 0220 	mvn.w	r2, #32
 80034e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f8cd 	bl	8003684 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003506:	b480      	push	{r7}
 8003508:	b083      	sub	sp, #12
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a40      	ldr	r2, [pc, #256]	; (8003658 <TIM_Base_SetConfig+0x114>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d013      	beq.n	8003584 <TIM_Base_SetConfig+0x40>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003562:	d00f      	beq.n	8003584 <TIM_Base_SetConfig+0x40>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a3d      	ldr	r2, [pc, #244]	; (800365c <TIM_Base_SetConfig+0x118>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00b      	beq.n	8003584 <TIM_Base_SetConfig+0x40>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a3c      	ldr	r2, [pc, #240]	; (8003660 <TIM_Base_SetConfig+0x11c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d007      	beq.n	8003584 <TIM_Base_SetConfig+0x40>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a3b      	ldr	r2, [pc, #236]	; (8003664 <TIM_Base_SetConfig+0x120>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d003      	beq.n	8003584 <TIM_Base_SetConfig+0x40>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a3a      	ldr	r2, [pc, #232]	; (8003668 <TIM_Base_SetConfig+0x124>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d108      	bne.n	8003596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2f      	ldr	r2, [pc, #188]	; (8003658 <TIM_Base_SetConfig+0x114>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d02b      	beq.n	80035f6 <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a4:	d027      	beq.n	80035f6 <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2c      	ldr	r2, [pc, #176]	; (800365c <TIM_Base_SetConfig+0x118>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d023      	beq.n	80035f6 <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a2b      	ldr	r2, [pc, #172]	; (8003660 <TIM_Base_SetConfig+0x11c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d01f      	beq.n	80035f6 <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a2a      	ldr	r2, [pc, #168]	; (8003664 <TIM_Base_SetConfig+0x120>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d01b      	beq.n	80035f6 <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a29      	ldr	r2, [pc, #164]	; (8003668 <TIM_Base_SetConfig+0x124>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d017      	beq.n	80035f6 <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a28      	ldr	r2, [pc, #160]	; (800366c <TIM_Base_SetConfig+0x128>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <TIM_Base_SetConfig+0xb2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a27      	ldr	r2, [pc, #156]	; (8003670 <TIM_Base_SetConfig+0x12c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00f      	beq.n	80035f6 <TIM_Base_SetConfig+0xb2>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a26      	ldr	r2, [pc, #152]	; (8003674 <TIM_Base_SetConfig+0x130>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d00b      	beq.n	80035f6 <TIM_Base_SetConfig+0xb2>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a25      	ldr	r2, [pc, #148]	; (8003678 <TIM_Base_SetConfig+0x134>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d007      	beq.n	80035f6 <TIM_Base_SetConfig+0xb2>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a24      	ldr	r2, [pc, #144]	; (800367c <TIM_Base_SetConfig+0x138>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d003      	beq.n	80035f6 <TIM_Base_SetConfig+0xb2>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a23      	ldr	r2, [pc, #140]	; (8003680 <TIM_Base_SetConfig+0x13c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d108      	bne.n	8003608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	695b      	ldr	r3, [r3, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <TIM_Base_SetConfig+0x114>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <TIM_Base_SetConfig+0xf8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a0c      	ldr	r2, [pc, #48]	; (8003668 <TIM_Base_SetConfig+0x124>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d103      	bne.n	8003644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	615a      	str	r2, [r3, #20]
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40010000 	.word	0x40010000
 800365c:	40000400 	.word	0x40000400
 8003660:	40000800 	.word	0x40000800
 8003664:	40000c00 	.word	0x40000c00
 8003668:	40010400 	.word	0x40010400
 800366c:	40014000 	.word	0x40014000
 8003670:	40014400 	.word	0x40014400
 8003674:	40014800 	.word	0x40014800
 8003678:	40001800 	.word	0x40001800
 800367c:	40001c00 	.word	0x40001c00
 8003680:	40002000 	.word	0x40002000

08003684 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e03f      	b.n	800373e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd f958 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2224      	movs	r2, #36	; 0x24
 80036dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f90b 	bl	800390c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b088      	sub	sp, #32
 800374a:	af02      	add	r7, sp, #8
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b20      	cmp	r3, #32
 8003764:	f040 8083 	bne.w	800386e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_UART_Transmit+0x2e>
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e07b      	b.n	8003870 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_UART_Transmit+0x40>
 8003782:	2302      	movs	r3, #2
 8003784:	e074      	b.n	8003870 <HAL_UART_Transmit+0x12a>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2221      	movs	r2, #33	; 0x21
 8003798:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800379c:	f7fd fc3a 	bl	8001014 <HAL_GetTick>
 80037a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	88fa      	ldrh	r2, [r7, #6]
 80037ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80037b6:	e042      	b.n	800383e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ce:	d122      	bne.n	8003816 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2200      	movs	r2, #0
 80037d8:	2180      	movs	r1, #128	; 0x80
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f84c 	bl	8003878 <UART_WaitOnFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e042      	b.n	8003870 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d103      	bne.n	800380e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	3302      	adds	r3, #2
 800380a:	60bb      	str	r3, [r7, #8]
 800380c:	e017      	b.n	800383e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3301      	adds	r3, #1
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	e013      	b.n	800383e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	2180      	movs	r1, #128	; 0x80
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f829 	bl	8003878 <UART_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e01f      	b.n	8003870 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	60ba      	str	r2, [r7, #8]
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003842:	b29b      	uxth	r3, r3
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1b7      	bne.n	80037b8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2200      	movs	r2, #0
 8003850:	2140      	movs	r1, #64	; 0x40
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f810 	bl	8003878 <UART_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e006      	b.n	8003870 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	e000      	b.n	8003870 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800386e:	2302      	movs	r3, #2
  }
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003888:	e02c      	b.n	80038e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d028      	beq.n	80038e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d007      	beq.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003898:	f7fd fbbc 	bl	8001014 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d21d      	bcs.n	80038e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80038b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e00f      	b.n	8003904 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4013      	ands	r3, r2
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	79fb      	ldrb	r3, [r7, #7]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d0c3      	beq.n	800388a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800390c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003910:	b085      	sub	sp, #20
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	431a      	orrs	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800394e:	f023 030c 	bic.w	r3, r3, #12
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	68f9      	ldr	r1, [r7, #12]
 8003958:	430b      	orrs	r3, r1
 800395a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397a:	f040 818b 	bne.w	8003c94 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4ac1      	ldr	r2, [pc, #772]	; (8003c88 <UART_SetConfig+0x37c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d005      	beq.n	8003994 <UART_SetConfig+0x88>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4abf      	ldr	r2, [pc, #764]	; (8003c8c <UART_SetConfig+0x380>)
 800398e:	4293      	cmp	r3, r2
 8003990:	f040 80bd 	bne.w	8003b0e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003994:	f7ff fc06 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8003998:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	461d      	mov	r5, r3
 800399e:	f04f 0600 	mov.w	r6, #0
 80039a2:	46a8      	mov	r8, r5
 80039a4:	46b1      	mov	r9, r6
 80039a6:	eb18 0308 	adds.w	r3, r8, r8
 80039aa:	eb49 0409 	adc.w	r4, r9, r9
 80039ae:	4698      	mov	r8, r3
 80039b0:	46a1      	mov	r9, r4
 80039b2:	eb18 0805 	adds.w	r8, r8, r5
 80039b6:	eb49 0906 	adc.w	r9, r9, r6
 80039ba:	f04f 0100 	mov.w	r1, #0
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039c6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039ca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039ce:	4688      	mov	r8, r1
 80039d0:	4691      	mov	r9, r2
 80039d2:	eb18 0005 	adds.w	r0, r8, r5
 80039d6:	eb49 0106 	adc.w	r1, r9, r6
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	461d      	mov	r5, r3
 80039e0:	f04f 0600 	mov.w	r6, #0
 80039e4:	196b      	adds	r3, r5, r5
 80039e6:	eb46 0406 	adc.w	r4, r6, r6
 80039ea:	461a      	mov	r2, r3
 80039ec:	4623      	mov	r3, r4
 80039ee:	f7fc fc67 	bl	80002c0 <__aeabi_uldivmod>
 80039f2:	4603      	mov	r3, r0
 80039f4:	460c      	mov	r4, r1
 80039f6:	461a      	mov	r2, r3
 80039f8:	4ba5      	ldr	r3, [pc, #660]	; (8003c90 <UART_SetConfig+0x384>)
 80039fa:	fba3 2302 	umull	r2, r3, r3, r2
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	461d      	mov	r5, r3
 8003a08:	f04f 0600 	mov.w	r6, #0
 8003a0c:	46a9      	mov	r9, r5
 8003a0e:	46b2      	mov	sl, r6
 8003a10:	eb19 0309 	adds.w	r3, r9, r9
 8003a14:	eb4a 040a 	adc.w	r4, sl, sl
 8003a18:	4699      	mov	r9, r3
 8003a1a:	46a2      	mov	sl, r4
 8003a1c:	eb19 0905 	adds.w	r9, r9, r5
 8003a20:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a24:	f04f 0100 	mov.w	r1, #0
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a38:	4689      	mov	r9, r1
 8003a3a:	4692      	mov	sl, r2
 8003a3c:	eb19 0005 	adds.w	r0, r9, r5
 8003a40:	eb4a 0106 	adc.w	r1, sl, r6
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	461d      	mov	r5, r3
 8003a4a:	f04f 0600 	mov.w	r6, #0
 8003a4e:	196b      	adds	r3, r5, r5
 8003a50:	eb46 0406 	adc.w	r4, r6, r6
 8003a54:	461a      	mov	r2, r3
 8003a56:	4623      	mov	r3, r4
 8003a58:	f7fc fc32 	bl	80002c0 <__aeabi_uldivmod>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	461a      	mov	r2, r3
 8003a62:	4b8b      	ldr	r3, [pc, #556]	; (8003c90 <UART_SetConfig+0x384>)
 8003a64:	fba3 1302 	umull	r1, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	2164      	movs	r1, #100	; 0x64
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	3332      	adds	r3, #50	; 0x32
 8003a76:	4a86      	ldr	r2, [pc, #536]	; (8003c90 <UART_SetConfig+0x384>)
 8003a78:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a84:	4498      	add	r8, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	461d      	mov	r5, r3
 8003a8a:	f04f 0600 	mov.w	r6, #0
 8003a8e:	46a9      	mov	r9, r5
 8003a90:	46b2      	mov	sl, r6
 8003a92:	eb19 0309 	adds.w	r3, r9, r9
 8003a96:	eb4a 040a 	adc.w	r4, sl, sl
 8003a9a:	4699      	mov	r9, r3
 8003a9c:	46a2      	mov	sl, r4
 8003a9e:	eb19 0905 	adds.w	r9, r9, r5
 8003aa2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ab2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ab6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aba:	4689      	mov	r9, r1
 8003abc:	4692      	mov	sl, r2
 8003abe:	eb19 0005 	adds.w	r0, r9, r5
 8003ac2:	eb4a 0106 	adc.w	r1, sl, r6
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	461d      	mov	r5, r3
 8003acc:	f04f 0600 	mov.w	r6, #0
 8003ad0:	196b      	adds	r3, r5, r5
 8003ad2:	eb46 0406 	adc.w	r4, r6, r6
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4623      	mov	r3, r4
 8003ada:	f7fc fbf1 	bl	80002c0 <__aeabi_uldivmod>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4b6a      	ldr	r3, [pc, #424]	; (8003c90 <UART_SetConfig+0x384>)
 8003ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2164      	movs	r1, #100	; 0x64
 8003aee:	fb01 f303 	mul.w	r3, r1, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	3332      	adds	r3, #50	; 0x32
 8003af8:	4a65      	ldr	r2, [pc, #404]	; (8003c90 <UART_SetConfig+0x384>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	f003 0207 	and.w	r2, r3, #7
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4442      	add	r2, r8
 8003b0a:	609a      	str	r2, [r3, #8]
 8003b0c:	e26f      	b.n	8003fee <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b0e:	f7ff fb35 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8003b12:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	461d      	mov	r5, r3
 8003b18:	f04f 0600 	mov.w	r6, #0
 8003b1c:	46a8      	mov	r8, r5
 8003b1e:	46b1      	mov	r9, r6
 8003b20:	eb18 0308 	adds.w	r3, r8, r8
 8003b24:	eb49 0409 	adc.w	r4, r9, r9
 8003b28:	4698      	mov	r8, r3
 8003b2a:	46a1      	mov	r9, r4
 8003b2c:	eb18 0805 	adds.w	r8, r8, r5
 8003b30:	eb49 0906 	adc.w	r9, r9, r6
 8003b34:	f04f 0100 	mov.w	r1, #0
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b40:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b44:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b48:	4688      	mov	r8, r1
 8003b4a:	4691      	mov	r9, r2
 8003b4c:	eb18 0005 	adds.w	r0, r8, r5
 8003b50:	eb49 0106 	adc.w	r1, r9, r6
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	461d      	mov	r5, r3
 8003b5a:	f04f 0600 	mov.w	r6, #0
 8003b5e:	196b      	adds	r3, r5, r5
 8003b60:	eb46 0406 	adc.w	r4, r6, r6
 8003b64:	461a      	mov	r2, r3
 8003b66:	4623      	mov	r3, r4
 8003b68:	f7fc fbaa 	bl	80002c0 <__aeabi_uldivmod>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	460c      	mov	r4, r1
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <UART_SetConfig+0x384>)
 8003b74:	fba3 2302 	umull	r2, r3, r3, r2
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	461d      	mov	r5, r3
 8003b82:	f04f 0600 	mov.w	r6, #0
 8003b86:	46a9      	mov	r9, r5
 8003b88:	46b2      	mov	sl, r6
 8003b8a:	eb19 0309 	adds.w	r3, r9, r9
 8003b8e:	eb4a 040a 	adc.w	r4, sl, sl
 8003b92:	4699      	mov	r9, r3
 8003b94:	46a2      	mov	sl, r4
 8003b96:	eb19 0905 	adds.w	r9, r9, r5
 8003b9a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b9e:	f04f 0100 	mov.w	r1, #0
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003baa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bb2:	4689      	mov	r9, r1
 8003bb4:	4692      	mov	sl, r2
 8003bb6:	eb19 0005 	adds.w	r0, r9, r5
 8003bba:	eb4a 0106 	adc.w	r1, sl, r6
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	461d      	mov	r5, r3
 8003bc4:	f04f 0600 	mov.w	r6, #0
 8003bc8:	196b      	adds	r3, r5, r5
 8003bca:	eb46 0406 	adc.w	r4, r6, r6
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4623      	mov	r3, r4
 8003bd2:	f7fc fb75 	bl	80002c0 <__aeabi_uldivmod>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	460c      	mov	r4, r1
 8003bda:	461a      	mov	r2, r3
 8003bdc:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <UART_SetConfig+0x384>)
 8003bde:	fba3 1302 	umull	r1, r3, r3, r2
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2164      	movs	r1, #100	; 0x64
 8003be6:	fb01 f303 	mul.w	r3, r1, r3
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	3332      	adds	r3, #50	; 0x32
 8003bf0:	4a27      	ldr	r2, [pc, #156]	; (8003c90 <UART_SetConfig+0x384>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bfe:	4498      	add	r8, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	461d      	mov	r5, r3
 8003c04:	f04f 0600 	mov.w	r6, #0
 8003c08:	46a9      	mov	r9, r5
 8003c0a:	46b2      	mov	sl, r6
 8003c0c:	eb19 0309 	adds.w	r3, r9, r9
 8003c10:	eb4a 040a 	adc.w	r4, sl, sl
 8003c14:	4699      	mov	r9, r3
 8003c16:	46a2      	mov	sl, r4
 8003c18:	eb19 0905 	adds.w	r9, r9, r5
 8003c1c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c20:	f04f 0100 	mov.w	r1, #0
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c34:	4689      	mov	r9, r1
 8003c36:	4692      	mov	sl, r2
 8003c38:	eb19 0005 	adds.w	r0, r9, r5
 8003c3c:	eb4a 0106 	adc.w	r1, sl, r6
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	461d      	mov	r5, r3
 8003c46:	f04f 0600 	mov.w	r6, #0
 8003c4a:	196b      	adds	r3, r5, r5
 8003c4c:	eb46 0406 	adc.w	r4, r6, r6
 8003c50:	461a      	mov	r2, r3
 8003c52:	4623      	mov	r3, r4
 8003c54:	f7fc fb34 	bl	80002c0 <__aeabi_uldivmod>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	460c      	mov	r4, r1
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <UART_SetConfig+0x384>)
 8003c60:	fba3 1302 	umull	r1, r3, r3, r2
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	2164      	movs	r1, #100	; 0x64
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	3332      	adds	r3, #50	; 0x32
 8003c72:	4a07      	ldr	r2, [pc, #28]	; (8003c90 <UART_SetConfig+0x384>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	095b      	lsrs	r3, r3, #5
 8003c7a:	f003 0207 	and.w	r2, r3, #7
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4442      	add	r2, r8
 8003c84:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003c86:	e1b2      	b.n	8003fee <UART_SetConfig+0x6e2>
 8003c88:	40011000 	.word	0x40011000
 8003c8c:	40011400 	.word	0x40011400
 8003c90:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4ad7      	ldr	r2, [pc, #860]	; (8003ff8 <UART_SetConfig+0x6ec>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d005      	beq.n	8003caa <UART_SetConfig+0x39e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4ad6      	ldr	r2, [pc, #856]	; (8003ffc <UART_SetConfig+0x6f0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	f040 80d1 	bne.w	8003e4c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003caa:	f7ff fa7b 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8003cae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	469a      	mov	sl, r3
 8003cb4:	f04f 0b00 	mov.w	fp, #0
 8003cb8:	46d0      	mov	r8, sl
 8003cba:	46d9      	mov	r9, fp
 8003cbc:	eb18 0308 	adds.w	r3, r8, r8
 8003cc0:	eb49 0409 	adc.w	r4, r9, r9
 8003cc4:	4698      	mov	r8, r3
 8003cc6:	46a1      	mov	r9, r4
 8003cc8:	eb18 080a 	adds.w	r8, r8, sl
 8003ccc:	eb49 090b 	adc.w	r9, r9, fp
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cdc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ce0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ce4:	4688      	mov	r8, r1
 8003ce6:	4691      	mov	r9, r2
 8003ce8:	eb1a 0508 	adds.w	r5, sl, r8
 8003cec:	eb4b 0609 	adc.w	r6, fp, r9
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	f04f 0400 	mov.w	r4, #0
 8003d02:	0094      	lsls	r4, r2, #2
 8003d04:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d08:	008b      	lsls	r3, r1, #2
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4623      	mov	r3, r4
 8003d0e:	4628      	mov	r0, r5
 8003d10:	4631      	mov	r1, r6
 8003d12:	f7fc fad5 	bl	80002c0 <__aeabi_uldivmod>
 8003d16:	4603      	mov	r3, r0
 8003d18:	460c      	mov	r4, r1
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	4bb8      	ldr	r3, [pc, #736]	; (8004000 <UART_SetConfig+0x6f4>)
 8003d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	469b      	mov	fp, r3
 8003d2c:	f04f 0c00 	mov.w	ip, #0
 8003d30:	46d9      	mov	r9, fp
 8003d32:	46e2      	mov	sl, ip
 8003d34:	eb19 0309 	adds.w	r3, r9, r9
 8003d38:	eb4a 040a 	adc.w	r4, sl, sl
 8003d3c:	4699      	mov	r9, r3
 8003d3e:	46a2      	mov	sl, r4
 8003d40:	eb19 090b 	adds.w	r9, r9, fp
 8003d44:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d48:	f04f 0100 	mov.w	r1, #0
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d5c:	4689      	mov	r9, r1
 8003d5e:	4692      	mov	sl, r2
 8003d60:	eb1b 0509 	adds.w	r5, fp, r9
 8003d64:	eb4c 060a 	adc.w	r6, ip, sl
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	f04f 0400 	mov.w	r4, #0
 8003d7a:	0094      	lsls	r4, r2, #2
 8003d7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d80:	008b      	lsls	r3, r1, #2
 8003d82:	461a      	mov	r2, r3
 8003d84:	4623      	mov	r3, r4
 8003d86:	4628      	mov	r0, r5
 8003d88:	4631      	mov	r1, r6
 8003d8a:	f7fc fa99 	bl	80002c0 <__aeabi_uldivmod>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	460c      	mov	r4, r1
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b9a      	ldr	r3, [pc, #616]	; (8004000 <UART_SetConfig+0x6f4>)
 8003d96:	fba3 1302 	umull	r1, r3, r3, r2
 8003d9a:	095b      	lsrs	r3, r3, #5
 8003d9c:	2164      	movs	r1, #100	; 0x64
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	3332      	adds	r3, #50	; 0x32
 8003da8:	4a95      	ldr	r2, [pc, #596]	; (8004000 <UART_SetConfig+0x6f4>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db4:	4498      	add	r8, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	469b      	mov	fp, r3
 8003dba:	f04f 0c00 	mov.w	ip, #0
 8003dbe:	46d9      	mov	r9, fp
 8003dc0:	46e2      	mov	sl, ip
 8003dc2:	eb19 0309 	adds.w	r3, r9, r9
 8003dc6:	eb4a 040a 	adc.w	r4, sl, sl
 8003dca:	4699      	mov	r9, r3
 8003dcc:	46a2      	mov	sl, r4
 8003dce:	eb19 090b 	adds.w	r9, r9, fp
 8003dd2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003de2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003de6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dea:	4689      	mov	r9, r1
 8003dec:	4692      	mov	sl, r2
 8003dee:	eb1b 0509 	adds.w	r5, fp, r9
 8003df2:	eb4c 060a 	adc.w	r6, ip, sl
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	f04f 0400 	mov.w	r4, #0
 8003e08:	0094      	lsls	r4, r2, #2
 8003e0a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e0e:	008b      	lsls	r3, r1, #2
 8003e10:	461a      	mov	r2, r3
 8003e12:	4623      	mov	r3, r4
 8003e14:	4628      	mov	r0, r5
 8003e16:	4631      	mov	r1, r6
 8003e18:	f7fc fa52 	bl	80002c0 <__aeabi_uldivmod>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	461a      	mov	r2, r3
 8003e22:	4b77      	ldr	r3, [pc, #476]	; (8004000 <UART_SetConfig+0x6f4>)
 8003e24:	fba3 1302 	umull	r1, r3, r3, r2
 8003e28:	095b      	lsrs	r3, r3, #5
 8003e2a:	2164      	movs	r1, #100	; 0x64
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	3332      	adds	r3, #50	; 0x32
 8003e36:	4a72      	ldr	r2, [pc, #456]	; (8004000 <UART_SetConfig+0x6f4>)
 8003e38:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	f003 020f 	and.w	r2, r3, #15
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4442      	add	r2, r8
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	e0d0      	b.n	8003fee <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e4c:	f7ff f996 	bl	800317c <HAL_RCC_GetPCLK1Freq>
 8003e50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	469a      	mov	sl, r3
 8003e56:	f04f 0b00 	mov.w	fp, #0
 8003e5a:	46d0      	mov	r8, sl
 8003e5c:	46d9      	mov	r9, fp
 8003e5e:	eb18 0308 	adds.w	r3, r8, r8
 8003e62:	eb49 0409 	adc.w	r4, r9, r9
 8003e66:	4698      	mov	r8, r3
 8003e68:	46a1      	mov	r9, r4
 8003e6a:	eb18 080a 	adds.w	r8, r8, sl
 8003e6e:	eb49 090b 	adc.w	r9, r9, fp
 8003e72:	f04f 0100 	mov.w	r1, #0
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e86:	4688      	mov	r8, r1
 8003e88:	4691      	mov	r9, r2
 8003e8a:	eb1a 0508 	adds.w	r5, sl, r8
 8003e8e:	eb4b 0609 	adc.w	r6, fp, r9
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	4619      	mov	r1, r3
 8003e98:	f04f 0200 	mov.w	r2, #0
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	f04f 0400 	mov.w	r4, #0
 8003ea4:	0094      	lsls	r4, r2, #2
 8003ea6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eaa:	008b      	lsls	r3, r1, #2
 8003eac:	461a      	mov	r2, r3
 8003eae:	4623      	mov	r3, r4
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	4631      	mov	r1, r6
 8003eb4:	f7fc fa04 	bl	80002c0 <__aeabi_uldivmod>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	460c      	mov	r4, r1
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b50      	ldr	r3, [pc, #320]	; (8004000 <UART_SetConfig+0x6f4>)
 8003ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec4:	095b      	lsrs	r3, r3, #5
 8003ec6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	469b      	mov	fp, r3
 8003ece:	f04f 0c00 	mov.w	ip, #0
 8003ed2:	46d9      	mov	r9, fp
 8003ed4:	46e2      	mov	sl, ip
 8003ed6:	eb19 0309 	adds.w	r3, r9, r9
 8003eda:	eb4a 040a 	adc.w	r4, sl, sl
 8003ede:	4699      	mov	r9, r3
 8003ee0:	46a2      	mov	sl, r4
 8003ee2:	eb19 090b 	adds.w	r9, r9, fp
 8003ee6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003eea:	f04f 0100 	mov.w	r1, #0
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003efa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003efe:	4689      	mov	r9, r1
 8003f00:	4692      	mov	sl, r2
 8003f02:	eb1b 0509 	adds.w	r5, fp, r9
 8003f06:	eb4c 060a 	adc.w	r6, ip, sl
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	f04f 0400 	mov.w	r4, #0
 8003f1c:	0094      	lsls	r4, r2, #2
 8003f1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f22:	008b      	lsls	r3, r1, #2
 8003f24:	461a      	mov	r2, r3
 8003f26:	4623      	mov	r3, r4
 8003f28:	4628      	mov	r0, r5
 8003f2a:	4631      	mov	r1, r6
 8003f2c:	f7fc f9c8 	bl	80002c0 <__aeabi_uldivmod>
 8003f30:	4603      	mov	r3, r0
 8003f32:	460c      	mov	r4, r1
 8003f34:	461a      	mov	r2, r3
 8003f36:	4b32      	ldr	r3, [pc, #200]	; (8004000 <UART_SetConfig+0x6f4>)
 8003f38:	fba3 1302 	umull	r1, r3, r3, r2
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	2164      	movs	r1, #100	; 0x64
 8003f40:	fb01 f303 	mul.w	r3, r1, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	3332      	adds	r3, #50	; 0x32
 8003f4a:	4a2d      	ldr	r2, [pc, #180]	; (8004000 <UART_SetConfig+0x6f4>)
 8003f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f56:	4498      	add	r8, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	469b      	mov	fp, r3
 8003f5c:	f04f 0c00 	mov.w	ip, #0
 8003f60:	46d9      	mov	r9, fp
 8003f62:	46e2      	mov	sl, ip
 8003f64:	eb19 0309 	adds.w	r3, r9, r9
 8003f68:	eb4a 040a 	adc.w	r4, sl, sl
 8003f6c:	4699      	mov	r9, r3
 8003f6e:	46a2      	mov	sl, r4
 8003f70:	eb19 090b 	adds.w	r9, r9, fp
 8003f74:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f78:	f04f 0100 	mov.w	r1, #0
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f8c:	4689      	mov	r9, r1
 8003f8e:	4692      	mov	sl, r2
 8003f90:	eb1b 0509 	adds.w	r5, fp, r9
 8003f94:	eb4c 060a 	adc.w	r6, ip, sl
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	f04f 0400 	mov.w	r4, #0
 8003faa:	0094      	lsls	r4, r2, #2
 8003fac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fb0:	008b      	lsls	r3, r1, #2
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4623      	mov	r3, r4
 8003fb6:	4628      	mov	r0, r5
 8003fb8:	4631      	mov	r1, r6
 8003fba:	f7fc f981 	bl	80002c0 <__aeabi_uldivmod>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	460c      	mov	r4, r1
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <UART_SetConfig+0x6f4>)
 8003fc6:	fba3 1302 	umull	r1, r3, r3, r2
 8003fca:	095b      	lsrs	r3, r3, #5
 8003fcc:	2164      	movs	r1, #100	; 0x64
 8003fce:	fb01 f303 	mul.w	r3, r1, r3
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	3332      	adds	r3, #50	; 0x32
 8003fd8:	4a09      	ldr	r2, [pc, #36]	; (8004000 <UART_SetConfig+0x6f4>)
 8003fda:	fba2 2303 	umull	r2, r3, r2, r3
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	f003 020f 	and.w	r2, r3, #15
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4442      	add	r2, r8
 8003fea:	609a      	str	r2, [r3, #8]
}
 8003fec:	e7ff      	b.n	8003fee <UART_SetConfig+0x6e2>
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff8:	40011000 	.word	0x40011000
 8003ffc:	40011400 	.word	0x40011400
 8004000:	51eb851f 	.word	0x51eb851f

08004004 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800400a:	2100      	movs	r1, #0
 800400c:	2000      	movs	r0, #0
 800400e:	f004 fe09 	bl	8008c24 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8004012:	4b2a      	ldr	r3, [pc, #168]	; (80040bc <MX_LWIP_Init+0xb8>)
 8004014:	2200      	movs	r2, #0
 8004016:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004018:	4b29      	ldr	r3, [pc, #164]	; (80040c0 <MX_LWIP_Init+0xbc>)
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800401e:	4b29      	ldr	r3, [pc, #164]	; (80040c4 <MX_LWIP_Init+0xc0>)
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004024:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <MX_LWIP_Init+0xc4>)
 8004026:	9302      	str	r3, [sp, #8]
 8004028:	4b28      	ldr	r3, [pc, #160]	; (80040cc <MX_LWIP_Init+0xc8>)
 800402a:	9301      	str	r3, [sp, #4]
 800402c:	2300      	movs	r3, #0
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <MX_LWIP_Init+0xc0>)
 8004032:	4a23      	ldr	r2, [pc, #140]	; (80040c0 <MX_LWIP_Init+0xbc>)
 8004034:	4921      	ldr	r1, [pc, #132]	; (80040bc <MX_LWIP_Init+0xb8>)
 8004036:	4826      	ldr	r0, [pc, #152]	; (80040d0 <MX_LWIP_Init+0xcc>)
 8004038:	f006 f9c8 	bl	800a3cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800403c:	4824      	ldr	r0, [pc, #144]	; (80040d0 <MX_LWIP_Init+0xcc>)
 800403e:	f006 fb7f 	bl	800a740 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004042:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <MX_LWIP_Init+0xcc>)
 8004044:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004048:	089b      	lsrs	r3, r3, #2
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004054:	481e      	ldr	r0, [pc, #120]	; (80040d0 <MX_LWIP_Init+0xcc>)
 8004056:	f006 fb83 	bl	800a760 <netif_set_up>
 800405a:	e002      	b.n	8004062 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800405c:	481c      	ldr	r0, [pc, #112]	; (80040d0 <MX_LWIP_Init+0xcc>)
 800405e:	f006 fbeb 	bl	800a838 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004062:	491c      	ldr	r1, [pc, #112]	; (80040d4 <MX_LWIP_Init+0xd0>)
 8004064:	481a      	ldr	r0, [pc, #104]	; (80040d0 <MX_LWIP_Init+0xcc>)
 8004066:	f006 fc81 	bl	800a96c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 800406a:	2200      	movs	r2, #0
 800406c:	2101      	movs	r1, #1
 800406e:	2001      	movs	r0, #1
 8004070:	f000 ff16 	bl	8004ea0 <osSemaphoreNew>
 8004074:	4602      	mov	r2, r0
 8004076:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <MX_LWIP_Init+0xd4>)
 8004078:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 800407a:	4b18      	ldr	r3, [pc, #96]	; (80040dc <MX_LWIP_Init+0xd8>)
 800407c:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <MX_LWIP_Init+0xcc>)
 800407e:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004080:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <MX_LWIP_Init+0xd4>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a15      	ldr	r2, [pc, #84]	; (80040dc <MX_LWIP_Init+0xd8>)
 8004086:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004088:	2224      	movs	r2, #36	; 0x24
 800408a:	2100      	movs	r1, #0
 800408c:	4814      	ldr	r0, [pc, #80]	; (80040e0 <MX_LWIP_Init+0xdc>)
 800408e:	f012 fc22 	bl	80168d6 <memset>
  attributes.name = "LinkThr";
 8004092:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <MX_LWIP_Init+0xdc>)
 8004094:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <MX_LWIP_Init+0xe0>)
 8004096:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004098:	4b11      	ldr	r3, [pc, #68]	; (80040e0 <MX_LWIP_Init+0xdc>)
 800409a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800409e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <MX_LWIP_Init+0xdc>)
 80040a2:	2210      	movs	r2, #16
 80040a4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 80040a6:	4a0e      	ldr	r2, [pc, #56]	; (80040e0 <MX_LWIP_Init+0xdc>)
 80040a8:	490c      	ldr	r1, [pc, #48]	; (80040dc <MX_LWIP_Init+0xd8>)
 80040aa:	480f      	ldr	r0, [pc, #60]	; (80040e8 <MX_LWIP_Init+0xe4>)
 80040ac:	f000 fcdc 	bl	8004a68 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80040b0:	4807      	ldr	r0, [pc, #28]	; (80040d0 <MX_LWIP_Init+0xcc>)
 80040b2:	f00e fcb9 	bl	8012a28 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80040b6:	bf00      	nop
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	200105a8 	.word	0x200105a8
 80040c0:	200105ac 	.word	0x200105ac
 80040c4:	200105b0 	.word	0x200105b0
 80040c8:	08008b61 	.word	0x08008b61
 80040cc:	08004745 	.word	0x08004745
 80040d0:	20010570 	.word	0x20010570
 80040d4:	08004829 	.word	0x08004829
 80040d8:	200000a4 	.word	0x200000a4
 80040dc:	20010544 	.word	0x20010544
 80040e0:	2001054c 	.word	0x2001054c
 80040e4:	08017bbc 	.word	0x08017bbc
 80040e8:	080047b1 	.word	0x080047b1

080040ec <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08e      	sub	sp, #56	; 0x38
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a59      	ldr	r2, [pc, #356]	; (8004270 <HAL_ETH_MspInit+0x184>)
 800410a:	4293      	cmp	r3, r2
 800410c:	f040 80ac 	bne.w	8004268 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004110:	2300      	movs	r3, #0
 8004112:	623b      	str	r3, [r7, #32]
 8004114:	4b57      	ldr	r3, [pc, #348]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	4a56      	ldr	r2, [pc, #344]	; (8004274 <HAL_ETH_MspInit+0x188>)
 800411a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800411e:	6313      	str	r3, [r2, #48]	; 0x30
 8004120:	4b54      	ldr	r3, [pc, #336]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004128:	623b      	str	r3, [r7, #32]
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	2300      	movs	r3, #0
 800412e:	61fb      	str	r3, [r7, #28]
 8004130:	4b50      	ldr	r3, [pc, #320]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	4a4f      	ldr	r2, [pc, #316]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004136:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800413a:	6313      	str	r3, [r2, #48]	; 0x30
 800413c:	4b4d      	ldr	r3, [pc, #308]	; (8004274 <HAL_ETH_MspInit+0x188>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	2300      	movs	r3, #0
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	4b49      	ldr	r3, [pc, #292]	; (8004274 <HAL_ETH_MspInit+0x188>)
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	4a48      	ldr	r2, [pc, #288]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004152:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004156:	6313      	str	r3, [r2, #48]	; 0x30
 8004158:	4b46      	ldr	r3, [pc, #280]	; (8004274 <HAL_ETH_MspInit+0x188>)
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004160:	61bb      	str	r3, [r7, #24]
 8004162:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	4b42      	ldr	r3, [pc, #264]	; (8004274 <HAL_ETH_MspInit+0x188>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	4a41      	ldr	r2, [pc, #260]	; (8004274 <HAL_ETH_MspInit+0x188>)
 800416e:	f043 0304 	orr.w	r3, r3, #4
 8004172:	6313      	str	r3, [r2, #48]	; 0x30
 8004174:	4b3f      	ldr	r3, [pc, #252]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004180:	2300      	movs	r3, #0
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004188:	4a3a      	ldr	r2, [pc, #232]	; (8004274 <HAL_ETH_MspInit+0x188>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6313      	str	r3, [r2, #48]	; 0x30
 8004190:	4b38      	ldr	r3, [pc, #224]	; (8004274 <HAL_ETH_MspInit+0x188>)
 8004192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800419c:	2300      	movs	r3, #0
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	4b34      	ldr	r3, [pc, #208]	; (8004274 <HAL_ETH_MspInit+0x188>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	4a33      	ldr	r2, [pc, #204]	; (8004274 <HAL_ETH_MspInit+0x188>)
 80041a6:	f043 0302 	orr.w	r3, r3, #2
 80041aa:	6313      	str	r3, [r2, #48]	; 0x30
 80041ac:	4b31      	ldr	r3, [pc, #196]	; (8004274 <HAL_ETH_MspInit+0x188>)
 80041ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80041b8:	2300      	movs	r3, #0
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	4b2d      	ldr	r3, [pc, #180]	; (8004274 <HAL_ETH_MspInit+0x188>)
 80041be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c0:	4a2c      	ldr	r2, [pc, #176]	; (8004274 <HAL_ETH_MspInit+0x188>)
 80041c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041c6:	6313      	str	r3, [r2, #48]	; 0x30
 80041c8:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <HAL_ETH_MspInit+0x188>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80041d4:	2332      	movs	r3, #50	; 0x32
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d8:	2302      	movs	r3, #2
 80041da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041dc:	2300      	movs	r3, #0
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041e0:	2303      	movs	r3, #3
 80041e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041e4:	230b      	movs	r3, #11
 80041e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ec:	4619      	mov	r1, r3
 80041ee:	4822      	ldr	r0, [pc, #136]	; (8004278 <HAL_ETH_MspInit+0x18c>)
 80041f0:	f7fe f9c6 	bl	8002580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80041f4:	2386      	movs	r3, #134	; 0x86
 80041f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f8:	2302      	movs	r3, #2
 80041fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004200:	2303      	movs	r3, #3
 8004202:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004204:	230b      	movs	r3, #11
 8004206:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800420c:	4619      	mov	r1, r3
 800420e:	481b      	ldr	r0, [pc, #108]	; (800427c <HAL_ETH_MspInit+0x190>)
 8004210:	f7fe f9b6 	bl	8002580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421a:	2302      	movs	r3, #2
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004222:	2303      	movs	r3, #3
 8004224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004226:	230b      	movs	r3, #11
 8004228:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800422a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800422e:	4619      	mov	r1, r3
 8004230:	4813      	ldr	r0, [pc, #76]	; (8004280 <HAL_ETH_MspInit+0x194>)
 8004232:	f7fe f9a5 	bl	8002580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004236:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423c:	2302      	movs	r3, #2
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004240:	2300      	movs	r3, #0
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004244:	2303      	movs	r3, #3
 8004246:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004248:	230b      	movs	r3, #11
 800424a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800424c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004250:	4619      	mov	r1, r3
 8004252:	480c      	ldr	r0, [pc, #48]	; (8004284 <HAL_ETH_MspInit+0x198>)
 8004254:	f7fe f994 	bl	8002580 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 10, 0);
 8004258:	2200      	movs	r2, #0
 800425a:	210a      	movs	r1, #10
 800425c:	203d      	movs	r0, #61	; 0x3d
 800425e:	f7fc ffbf 	bl	80011e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004262:	203d      	movs	r0, #61	; 0x3d
 8004264:	f7fc ffd8 	bl	8001218 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004268:	bf00      	nop
 800426a:	3738      	adds	r7, #56	; 0x38
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40028000 	.word	0x40028000
 8004274:	40023800 	.word	0x40023800
 8004278:	40020800 	.word	0x40020800
 800427c:	40020000 	.word	0x40020000
 8004280:	40020400 	.word	0x40020400
 8004284:	40021800 	.word	0x40021800

08004288 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <HAL_ETH_RxCpltCallback+0x1c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f000 ff07 	bl	80050a8 <osSemaphoreRelease>
}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	200000a8 	.word	0x200000a8

080042a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b090      	sub	sp, #64	; 0x40
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80042b4:	4b59      	ldr	r3, [pc, #356]	; (800441c <low_level_init+0x174>)
 80042b6:	4a5a      	ldr	r2, [pc, #360]	; (8004420 <low_level_init+0x178>)
 80042b8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80042ba:	4b58      	ldr	r3, [pc, #352]	; (800441c <low_level_init+0x174>)
 80042bc:	2201      	movs	r2, #1
 80042be:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80042c0:	4b56      	ldr	r3, [pc, #344]	; (800441c <low_level_init+0x174>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80042c6:	2300      	movs	r3, #0
 80042c8:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80042ce:	23e1      	movs	r3, #225	; 0xe1
 80042d0:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80042d2:	2300      	movs	r3, #0
 80042d4:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80042d6:	2300      	movs	r3, #0
 80042d8:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 80042da:	2300      	movs	r3, #0
 80042dc:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 80042de:	4a4f      	ldr	r2, [pc, #316]	; (800441c <low_level_init+0x174>)
 80042e0:	f107 030c 	add.w	r3, r7, #12
 80042e4:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80042e6:	4b4d      	ldr	r3, [pc, #308]	; (800441c <low_level_init+0x174>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80042ec:	4b4b      	ldr	r3, [pc, #300]	; (800441c <low_level_init+0x174>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80042f2:	4b4a      	ldr	r3, [pc, #296]	; (800441c <low_level_init+0x174>)
 80042f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80042f8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80042fa:	4848      	ldr	r0, [pc, #288]	; (800441c <low_level_init+0x174>)
 80042fc:	f7fc ff9a 	bl	8001234 <HAL_ETH_Init>
 8004300:	4603      	mov	r3, r0
 8004302:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004306:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800430a:	2b00      	cmp	r3, #0
 800430c:	d108      	bne.n	8004320 <low_level_init+0x78>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004314:	f043 0304 	orr.w	r3, r3, #4
 8004318:	b2da      	uxtb	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004320:	2304      	movs	r3, #4
 8004322:	4a40      	ldr	r2, [pc, #256]	; (8004424 <low_level_init+0x17c>)
 8004324:	4940      	ldr	r1, [pc, #256]	; (8004428 <low_level_init+0x180>)
 8004326:	483d      	ldr	r0, [pc, #244]	; (800441c <low_level_init+0x174>)
 8004328:	f7fd f922 	bl	8001570 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800432c:	2304      	movs	r3, #4
 800432e:	4a3f      	ldr	r2, [pc, #252]	; (800442c <low_level_init+0x184>)
 8004330:	493f      	ldr	r1, [pc, #252]	; (8004430 <low_level_init+0x188>)
 8004332:	483a      	ldr	r0, [pc, #232]	; (800441c <low_level_init+0x174>)
 8004334:	f7fd f985 	bl	8001642 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2206      	movs	r2, #6
 800433c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004340:	4b36      	ldr	r3, [pc, #216]	; (800441c <low_level_init+0x174>)
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	781a      	ldrb	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800434c:	4b33      	ldr	r3, [pc, #204]	; (800441c <low_level_init+0x174>)
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	785a      	ldrb	r2, [r3, #1]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004358:	4b30      	ldr	r3, [pc, #192]	; (800441c <low_level_init+0x174>)
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	789a      	ldrb	r2, [r3, #2]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004364:	4b2d      	ldr	r3, [pc, #180]	; (800441c <low_level_init+0x174>)
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	78da      	ldrb	r2, [r3, #3]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004370:	4b2a      	ldr	r3, [pc, #168]	; (800441c <low_level_init+0x174>)
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	791a      	ldrb	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800437c:	4b27      	ldr	r3, [pc, #156]	; (800441c <low_level_init+0x174>)
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	795a      	ldrb	r2, [r3, #5]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800438e:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004396:	f043 030a 	orr.w	r3, r3, #10
 800439a:	b2da      	uxtb	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80043a2:	2200      	movs	r2, #0
 80043a4:	2101      	movs	r1, #1
 80043a6:	2001      	movs	r0, #1
 80043a8:	f000 fd7a 	bl	8004ea0 <osSemaphoreNew>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4b21      	ldr	r3, [pc, #132]	; (8004434 <low_level_init+0x18c>)
 80043b0:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80043b2:	f107 0314 	add.w	r3, r7, #20
 80043b6:	2224      	movs	r2, #36	; 0x24
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f012 fa8b 	bl	80168d6 <memset>
  attributes.name = "EthIf";
 80043c0:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <low_level_init+0x190>)
 80043c2:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80043c4:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 80043c8:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 80043ca:	2330      	movs	r3, #48	; 0x30
 80043cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 80043ce:	f107 0314 	add.w	r3, r7, #20
 80043d2:	461a      	mov	r2, r3
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	4819      	ldr	r0, [pc, #100]	; (800443c <low_level_init+0x194>)
 80043d8:	f000 fb46 	bl	8004a68 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80043dc:	480f      	ldr	r0, [pc, #60]	; (800441c <low_level_init+0x174>)
 80043de:	f7fd fc58 	bl	8001c92 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80043e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043e6:	461a      	mov	r2, r3
 80043e8:	211d      	movs	r1, #29
 80043ea:	480c      	ldr	r0, [pc, #48]	; (800441c <low_level_init+0x174>)
 80043ec:	f7fd fb83 	bl	8001af6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80043f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f2:	f043 030b 	orr.w	r3, r3, #11
 80043f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80043f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fa:	461a      	mov	r2, r3
 80043fc:	211d      	movs	r1, #29
 80043fe:	4807      	ldr	r0, [pc, #28]	; (800441c <low_level_init+0x174>)
 8004400:	f7fd fbe1 	bl	8001bc6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004404:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004408:	461a      	mov	r2, r3
 800440a:	211d      	movs	r1, #29
 800440c:	4803      	ldr	r0, [pc, #12]	; (800441c <low_level_init+0x174>)
 800440e:	f7fd fb72 	bl	8001af6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004412:	bf00      	nop
 8004414:	3740      	adds	r7, #64	; 0x40
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20011e84 	.word	0x20011e84
 8004420:	40028000 	.word	0x40028000
 8004424:	20011ecc 	.word	0x20011ecc
 8004428:	200105b4 	.word	0x200105b4
 800442c:	20010634 	.word	0x20010634
 8004430:	20011e04 	.word	0x20011e04
 8004434:	200000a8 	.word	0x200000a8
 8004438:	08017bc4 	.word	0x08017bc4
 800443c:	080046e5 	.word	0x080046e5

08004440 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08a      	sub	sp, #40	; 0x28
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800444a:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <low_level_output+0x138>)
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8004456:	2300      	movs	r3, #0
 8004458:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004462:	4b45      	ldr	r3, [pc, #276]	; (8004578 <low_level_output+0x138>)
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	623b      	str	r3, [r7, #32]
 8004470:	e05a      	b.n	8004528 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	da03      	bge.n	8004482 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800447a:	23f8      	movs	r3, #248	; 0xf8
 800447c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004480:	e05c      	b.n	800453c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	895b      	ldrh	r3, [r3, #10]
 8004486:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800448c:	e02f      	b.n	80044ee <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	18d0      	adds	r0, r2, r3
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	18d1      	adds	r1, r2, r3
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80044a2:	3304      	adds	r3, #4
 80044a4:	461a      	mov	r2, r3
 80044a6:	f012 f9f2 	bl	801688e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	da03      	bge.n	80044c0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80044b8:	23f8      	movs	r3, #248	; 0xf8
 80044ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80044be:	e03d      	b.n	800453c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80044d0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80044dc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80044e8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	4413      	add	r3, r2
 80044f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d8c8      	bhi.n	800448e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	18d0      	adds	r0, r2, r3
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	4413      	add	r3, r2
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4619      	mov	r1, r3
 800450e:	f012 f9be 	bl	801688e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	623b      	str	r3, [r7, #32]
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1a1      	bne.n	8004472 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	4811      	ldr	r0, [pc, #68]	; (8004578 <low_level_output+0x138>)
 8004532:	f7fd f8f3 	bl	800171c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800453c:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <low_level_output+0x138>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004544:	3314      	adds	r3, #20
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00d      	beq.n	800456c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <low_level_output+0x138>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004558:	3314      	adds	r3, #20
 800455a:	2220      	movs	r2, #32
 800455c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800455e:	4b06      	ldr	r3, [pc, #24]	; (8004578 <low_level_output+0x138>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004566:	3304      	adds	r3, #4
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800456c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004570:	4618      	mov	r0, r3
 8004572:	3728      	adds	r7, #40	; 0x28
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20011e84 	.word	0x20011e84

0800457c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08c      	sub	sp, #48	; 0x30
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004584:	2300      	movs	r3, #0
 8004586:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004588:	2300      	movs	r3, #0
 800458a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80045a0:	484f      	ldr	r0, [pc, #316]	; (80046e0 <low_level_input+0x164>)
 80045a2:	f7fd f9a5 	bl	80018f0 <HAL_ETH_GetReceivedFrame_IT>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d001      	beq.n	80045b0 <low_level_input+0x34>

    return NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e092      	b.n	80046d6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80045b0:	4b4b      	ldr	r3, [pc, #300]	; (80046e0 <low_level_input+0x164>)
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80045b6:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <low_level_input+0x164>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80045bc:	89fb      	ldrh	r3, [r7, #14]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d007      	beq.n	80045d2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80045c2:	89fb      	ldrh	r3, [r7, #14]
 80045c4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80045c8:	4619      	mov	r1, r3
 80045ca:	2000      	movs	r0, #0
 80045cc:	f006 fa98 	bl	800ab00 <pbuf_alloc>
 80045d0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d04b      	beq.n	8004670 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80045d8:	4b41      	ldr	r3, [pc, #260]	; (80046e0 <low_level_input+0x164>)
 80045da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045dc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e6:	e040      	b.n	800466a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80045e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ea:	895b      	ldrh	r3, [r3, #10]
 80045ec:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80045f2:	e021      	b.n	8004638 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80045f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	18d0      	adds	r0, r2, r3
 80045fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	18d1      	adds	r1, r2, r3
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004608:	3304      	adds	r3, #4
 800460a:	461a      	mov	r2, r3
 800460c:	f012 f93f 	bl	801688e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	4413      	add	r3, r2
 8004622:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004626:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004632:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004642:	4293      	cmp	r3, r2
 8004644:	d8d6      	bhi.n	80045f4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	18d0      	adds	r0, r2, r3
 800464e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	4413      	add	r3, r2
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4619      	mov	r1, r3
 8004658:	f012 f919 	bl	801688e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	4413      	add	r3, r2
 8004662:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	62bb      	str	r3, [r7, #40]	; 0x28
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1bb      	bne.n	80045e8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <low_level_input+0x164>)
 8004672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004674:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	e00b      	b.n	8004694 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	3301      	adds	r3, #1
 8004692:	613b      	str	r3, [r7, #16]
 8004694:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <low_level_input+0x164>)
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	429a      	cmp	r2, r3
 800469c:	d3ee      	bcc.n	800467c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <low_level_input+0x164>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80046a4:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <low_level_input+0x164>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ac:	3314      	adds	r3, #20
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00d      	beq.n	80046d4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80046b8:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <low_level_input+0x164>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c0:	3314      	adds	r3, #20
 80046c2:	2280      	movs	r2, #128	; 0x80
 80046c4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80046c6:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <low_level_input+0x164>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ce:	3308      	adds	r3, #8
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
  }
  return p;
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3730      	adds	r7, #48	; 0x30
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	20011e84 	.word	0x20011e84

080046e4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80046f0:	4b12      	ldr	r3, [pc, #72]	; (800473c <ethernetif_input+0x58>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f04f 31ff 	mov.w	r1, #4294967295
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fc6f 	bl	8004fdc <osSemaphoreAcquire>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1f5      	bne.n	80046f0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004704:	480e      	ldr	r0, [pc, #56]	; (8004740 <ethernetif_input+0x5c>)
 8004706:	f012 f835 	bl	8016774 <sys_mutex_lock>
        p = low_level_input( netif );
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7ff ff36 	bl	800457c <low_level_input>
 8004710:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	68f9      	ldr	r1, [r7, #12]
 800471e:	68b8      	ldr	r0, [r7, #8]
 8004720:	4798      	blx	r3
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004728:	68b8      	ldr	r0, [r7, #8]
 800472a:	f006 fcc9 	bl	800b0c0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800472e:	4804      	ldr	r0, [pc, #16]	; (8004740 <ethernetif_input+0x5c>)
 8004730:	f012 f82f 	bl	8016792 <sys_mutex_unlock>
      } while(p!=NULL);
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1e4      	bne.n	8004704 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800473a:	e7d9      	b.n	80046f0 <ethernetif_input+0xc>
 800473c:	200000a8 	.word	0x200000a8
 8004740:	200136dc 	.word	0x200136dc

08004744 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d106      	bne.n	8004760 <ethernetif_init+0x1c>
 8004752:	4b0e      	ldr	r3, [pc, #56]	; (800478c <ethernetif_init+0x48>)
 8004754:	f44f 720e 	mov.w	r2, #568	; 0x238
 8004758:	490d      	ldr	r1, [pc, #52]	; (8004790 <ethernetif_init+0x4c>)
 800475a:	480e      	ldr	r0, [pc, #56]	; (8004794 <ethernetif_init+0x50>)
 800475c:	f012 f8c4 	bl	80168e8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2273      	movs	r2, #115	; 0x73
 8004764:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2274      	movs	r2, #116	; 0x74
 800476c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <ethernetif_init+0x54>)
 8004774:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a08      	ldr	r2, [pc, #32]	; (800479c <ethernetif_init+0x58>)
 800477a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff fd93 	bl	80042a8 <low_level_init>

  return ERR_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	08017bcc 	.word	0x08017bcc
 8004790:	08017be8 	.word	0x08017be8
 8004794:	08017bf8 	.word	0x08017bf8
 8004798:	0801492d 	.word	0x0801492d
 800479c:	08004441 	.word	0x08004441

080047a0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80047a4:	f7fc fc36 	bl	8001014 <HAL_GetTick>
 80047a8:	4603      	mov	r3, r0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80047c0:	f107 0308 	add.w	r3, r7, #8
 80047c4:	461a      	mov	r2, r3
 80047c6:	2101      	movs	r1, #1
 80047c8:	4816      	ldr	r0, [pc, #88]	; (8004824 <ethernetif_set_link+0x74>)
 80047ca:	f7fd f994 	bl	8001af6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d108      	bne.n	80047f8 <ethernetif_set_link+0x48>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d005      	beq.n	80047f8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f006 f853 	bl	800a89c <netif_set_link_up>
 80047f6:	e011      	b.n	800481c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004800:	089b      	lsrs	r3, r3, #2
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <ethernetif_set_link+0x6c>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d104      	bne.n	800481c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f006 f878 	bl	800a90c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800481c:	20c8      	movs	r0, #200	; 0xc8
 800481e:	f000 f9c9 	bl	8004bb4 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004822:	e7cd      	b.n	80047c0 <ethernetif_set_link+0x10>
 8004824:	20011e84 	.word	0x20011e84

08004828 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800483e:	089b      	lsrs	r3, r3, #2
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d05d      	beq.n	8004906 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800484a:	4b34      	ldr	r3, [pc, #208]	; (800491c <ethernetif_update_config+0xf4>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d03f      	beq.n	80048d2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004852:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004856:	2100      	movs	r1, #0
 8004858:	4830      	ldr	r0, [pc, #192]	; (800491c <ethernetif_update_config+0xf4>)
 800485a:	f7fd f9b4 	bl	8001bc6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800485e:	f7fc fbd9 	bl	8001014 <HAL_GetTick>
 8004862:	4603      	mov	r3, r0
 8004864:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004866:	f107 0308 	add.w	r3, r7, #8
 800486a:	461a      	mov	r2, r3
 800486c:	2101      	movs	r1, #1
 800486e:	482b      	ldr	r0, [pc, #172]	; (800491c <ethernetif_update_config+0xf4>)
 8004870:	f7fd f941 	bl	8001af6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004874:	f7fc fbce 	bl	8001014 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004882:	d828      	bhi.n	80048d6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0eb      	beq.n	8004866 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800488e:	f107 0308 	add.w	r3, r7, #8
 8004892:	461a      	mov	r2, r3
 8004894:	211f      	movs	r1, #31
 8004896:	4821      	ldr	r0, [pc, #132]	; (800491c <ethernetif_update_config+0xf4>)
 8004898:	f7fd f92d 	bl	8001af6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d004      	beq.n	80048b0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80048a6:	4b1d      	ldr	r3, [pc, #116]	; (800491c <ethernetif_update_config+0xf4>)
 80048a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	e002      	b.n	80048b6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80048b0:	4b1a      	ldr	r3, [pc, #104]	; (800491c <ethernetif_update_config+0xf4>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80048c0:	4b16      	ldr	r3, [pc, #88]	; (800491c <ethernetif_update_config+0xf4>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	609a      	str	r2, [r3, #8]
 80048c6:	e016      	b.n	80048f6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80048c8:	4b14      	ldr	r3, [pc, #80]	; (800491c <ethernetif_update_config+0xf4>)
 80048ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	e011      	b.n	80048f6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80048d2:	bf00      	nop
 80048d4:	e000      	b.n	80048d8 <ethernetif_update_config+0xb0>
          goto error;
 80048d6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80048d8:	4b10      	ldr	r3, [pc, #64]	; (800491c <ethernetif_update_config+0xf4>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	08db      	lsrs	r3, r3, #3
 80048de:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80048e0:	4b0e      	ldr	r3, [pc, #56]	; (800491c <ethernetif_update_config+0xf4>)
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80048e8:	4313      	orrs	r3, r2
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	2100      	movs	r1, #0
 80048f0:	480a      	ldr	r0, [pc, #40]	; (800491c <ethernetif_update_config+0xf4>)
 80048f2:	f7fd f968 	bl	8001bc6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80048f6:	2100      	movs	r1, #0
 80048f8:	4808      	ldr	r0, [pc, #32]	; (800491c <ethernetif_update_config+0xf4>)
 80048fa:	f7fd fa29 	bl	8001d50 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80048fe:	4807      	ldr	r0, [pc, #28]	; (800491c <ethernetif_update_config+0xf4>)
 8004900:	f7fd f9c7 	bl	8001c92 <HAL_ETH_Start>
 8004904:	e002      	b.n	800490c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004906:	4805      	ldr	r0, [pc, #20]	; (800491c <ethernetif_update_config+0xf4>)
 8004908:	f7fd f9f2 	bl	8001cf0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f807 	bl	8004920 <ethernetif_notify_conn_changed>
}
 8004912:	bf00      	nop
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20011e84 	.word	0x20011e84

08004920 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004938:	bf00      	nop
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800494a:	f3ef 8305 	mrs	r3, IPSR
 800494e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004950:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10f      	bne.n	8004976 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004956:	f3ef 8310 	mrs	r3, PRIMASK
 800495a:	607b      	str	r3, [r7, #4]
  return(result);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004962:	f3ef 8311 	mrs	r3, BASEPRI
 8004966:	603b      	str	r3, [r7, #0]
  return(result);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <osKernelInitialize+0x3a>
 800496e:	4b0e      	ldr	r3, [pc, #56]	; (80049a8 <osKernelInitialize+0x64>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d103      	bne.n	800497e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004976:	f06f 0305 	mvn.w	r3, #5
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e00c      	b.n	8004998 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800497e:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <osKernelInitialize+0x64>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d105      	bne.n	8004992 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004986:	4b08      	ldr	r3, [pc, #32]	; (80049a8 <osKernelInitialize+0x64>)
 8004988:	2201      	movs	r2, #1
 800498a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e002      	b.n	8004998 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004992:	f04f 33ff 	mov.w	r3, #4294967295
 8004996:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004998:	68fb      	ldr	r3, [r7, #12]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	200000ac 	.word	0x200000ac

080049ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049b2:	f3ef 8305 	mrs	r3, IPSR
 80049b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80049b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049be:	f3ef 8310 	mrs	r3, PRIMASK
 80049c2:	607b      	str	r3, [r7, #4]
  return(result);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d105      	bne.n	80049d6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049ca:	f3ef 8311 	mrs	r3, BASEPRI
 80049ce:	603b      	str	r3, [r7, #0]
  return(result);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d007      	beq.n	80049e6 <osKernelStart+0x3a>
 80049d6:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <osKernelStart+0x68>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d103      	bne.n	80049e6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80049de:	f06f 0305 	mvn.w	r3, #5
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e010      	b.n	8004a08 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80049e6:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <osKernelStart+0x68>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d109      	bne.n	8004a02 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80049ee:	f7ff ffa1 	bl	8004934 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049f2:	4b08      	ldr	r3, [pc, #32]	; (8004a14 <osKernelStart+0x68>)
 80049f4:	2202      	movs	r2, #2
 80049f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049f8:	f002 fa16 	bl	8006e28 <vTaskStartScheduler>
      stat = osOK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e002      	b.n	8004a08 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004a02:	f04f 33ff 	mov.w	r3, #4294967295
 8004a06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004a08:	68fb      	ldr	r3, [r7, #12]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	200000ac 	.word	0x200000ac

08004a18 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a1e:	f3ef 8305 	mrs	r3, IPSR
 8004a22:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a24:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a2e:	607b      	str	r3, [r7, #4]
  return(result);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d105      	bne.n	8004a42 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a36:	f3ef 8311 	mrs	r3, BASEPRI
 8004a3a:	603b      	str	r3, [r7, #0]
  return(result);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <osKernelGetTickCount+0x3a>
 8004a42:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <osKernelGetTickCount+0x4c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d103      	bne.n	8004a52 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004a4a:	f002 fb0d 	bl	8007068 <xTaskGetTickCountFromISR>
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	e002      	b.n	8004a58 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8004a52:	f002 faf9 	bl	8007048 <xTaskGetTickCount>
 8004a56:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004a58:	68fb      	ldr	r3, [r7, #12]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	200000ac 	.word	0x200000ac

08004a68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b090      	sub	sp, #64	; 0x40
 8004a6c:	af04      	add	r7, sp, #16
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a78:	f3ef 8305 	mrs	r3, IPSR
 8004a7c:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a7e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f040 808f 	bne.w	8004ba4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a86:	f3ef 8310 	mrs	r3, PRIMASK
 8004a8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d105      	bne.n	8004a9e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a92:	f3ef 8311 	mrs	r3, BASEPRI
 8004a96:	617b      	str	r3, [r7, #20]
  return(result);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <osThreadNew+0x3e>
 8004a9e:	4b44      	ldr	r3, [pc, #272]	; (8004bb0 <osThreadNew+0x148>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d07e      	beq.n	8004ba4 <osThreadNew+0x13c>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d07b      	beq.n	8004ba4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004aac:	2380      	movs	r3, #128	; 0x80
 8004aae:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004ab0:	2318      	movs	r3, #24
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8004abc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d045      	beq.n	8004b50 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <osThreadNew+0x6a>
        name = attr->name;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <osThreadNew+0x90>
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	2b38      	cmp	r3, #56	; 0x38
 8004aea:	d805      	bhi.n	8004af8 <osThreadNew+0x90>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <osThreadNew+0x94>
        return (NULL);
 8004af8:	2300      	movs	r3, #0
 8004afa:	e054      	b.n	8004ba6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00e      	beq.n	8004b32 <osThreadNew+0xca>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b5f      	cmp	r3, #95	; 0x5f
 8004b1a:	d90a      	bls.n	8004b32 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d006      	beq.n	8004b32 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <osThreadNew+0xca>
        mem = 1;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	623b      	str	r3, [r7, #32]
 8004b30:	e010      	b.n	8004b54 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10c      	bne.n	8004b54 <osThreadNew+0xec>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d108      	bne.n	8004b54 <osThreadNew+0xec>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d104      	bne.n	8004b54 <osThreadNew+0xec>
          mem = 0;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	623b      	str	r3, [r7, #32]
 8004b4e:	e001      	b.n	8004b54 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d110      	bne.n	8004b7c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004b62:	9202      	str	r2, [sp, #8]
 8004b64:	9301      	str	r3, [sp, #4]
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f001 fde7 	bl	8006744 <xTaskCreateStatic>
 8004b76:	4603      	mov	r3, r0
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	e013      	b.n	8004ba4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d110      	bne.n	8004ba4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b84:	b29a      	uxth	r2, r3
 8004b86:	f107 0310 	add.w	r3, r7, #16
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f001 fe2f 	bl	80067f8 <xTaskCreate>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d001      	beq.n	8004ba4 <osThreadNew+0x13c>
          hTask = NULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ba4:	693b      	ldr	r3, [r7, #16]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3730      	adds	r7, #48	; 0x30
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	200000ac 	.word	0x200000ac

08004bb4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bbc:	f3ef 8305 	mrs	r3, IPSR
 8004bc0:	613b      	str	r3, [r7, #16]
  return(result);
 8004bc2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10f      	bne.n	8004be8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bd4:	f3ef 8311 	mrs	r3, BASEPRI
 8004bd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <osDelay+0x3c>
 8004be0:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <osDelay+0x58>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d103      	bne.n	8004bf0 <osDelay+0x3c>
    stat = osErrorISR;
 8004be8:	f06f 0305 	mvn.w	r3, #5
 8004bec:	617b      	str	r3, [r7, #20]
 8004bee:	e007      	b.n	8004c00 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f001 ff42 	bl	8006a84 <vTaskDelay>
    }
  }

  return (stat);
 8004c00:	697b      	ldr	r3, [r7, #20]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	200000ac 	.word	0x200000ac

08004c10 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08a      	sub	sp, #40	; 0x28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c1c:	f3ef 8305 	mrs	r3, IPSR
 8004c20:	613b      	str	r3, [r7, #16]
  return(result);
 8004c22:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f040 8085 	bne.w	8004d34 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d105      	bne.n	8004c42 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c36:	f3ef 8311 	mrs	r3, BASEPRI
 8004c3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <osMutexNew+0x3a>
 8004c42:	4b3f      	ldr	r3, [pc, #252]	; (8004d40 <osMutexNew+0x130>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d074      	beq.n	8004d34 <osMutexNew+0x124>
    if (attr != NULL) {
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	623b      	str	r3, [r7, #32]
 8004c56:	e001      	b.n	8004c5c <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <osMutexNew+0x5c>
      rmtx = 1U;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	e001      	b.n	8004c70 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d15c      	bne.n	8004d34 <osMutexNew+0x124>
      mem = -1;
 8004c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c7e:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d015      	beq.n	8004cb2 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d006      	beq.n	8004c9c <osMutexNew+0x8c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	2b4f      	cmp	r3, #79	; 0x4f
 8004c94:	d902      	bls.n	8004c9c <osMutexNew+0x8c>
          mem = 1;
 8004c96:	2301      	movs	r3, #1
 8004c98:	61bb      	str	r3, [r7, #24]
 8004c9a:	e00c      	b.n	8004cb6 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d108      	bne.n	8004cb6 <osMutexNew+0xa6>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d104      	bne.n	8004cb6 <osMutexNew+0xa6>
            mem = 0;
 8004cac:	2300      	movs	r3, #0
 8004cae:	61bb      	str	r3, [r7, #24]
 8004cb0:	e001      	b.n	8004cb6 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d112      	bne.n	8004ce2 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	2004      	movs	r0, #4
 8004cca:	f000 fe08 	bl	80058de <xQueueCreateMutexStatic>
 8004cce:	6278      	str	r0, [r7, #36]	; 0x24
 8004cd0:	e016      	b.n	8004d00 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	2001      	movs	r0, #1
 8004cda:	f000 fe00 	bl	80058de <xQueueCreateMutexStatic>
 8004cde:	6278      	str	r0, [r7, #36]	; 0x24
 8004ce0:	e00e      	b.n	8004d00 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d004      	beq.n	8004cf8 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004cee:	2004      	movs	r0, #4
 8004cf0:	f000 fddd 	bl	80058ae <xQueueCreateMutex>
 8004cf4:	6278      	str	r0, [r7, #36]	; 0x24
 8004cf6:	e003      	b.n	8004d00 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004cf8:	2001      	movs	r0, #1
 8004cfa:	f000 fdd8 	bl	80058ae <xQueueCreateMutex>
 8004cfe:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00c      	beq.n	8004d20 <osMutexNew+0x110>
        if (attr != NULL) {
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <osMutexNew+0x104>
          name = attr->name;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	e001      	b.n	8004d18 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004d18:	6979      	ldr	r1, [r7, #20]
 8004d1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d1c:	f001 fc8c 	bl	8006638 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d006      	beq.n	8004d34 <osMutexNew+0x124>
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3728      	adds	r7, #40	; 0x28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	200000ac 	.word	0x200000ac

08004d44 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d62:	f3ef 8305 	mrs	r3, IPSR
 8004d66:	613b      	str	r3, [r7, #16]
  return(result);
 8004d68:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10f      	bne.n	8004d8e <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d72:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d105      	bne.n	8004d86 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <osMutexAcquire+0x52>
 8004d86:	4b1d      	ldr	r3, [pc, #116]	; (8004dfc <osMutexAcquire+0xb8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d103      	bne.n	8004d96 <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004d8e:	f06f 0305 	mvn.w	r3, #5
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	e02c      	b.n	8004df0 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d103      	bne.n	8004da4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004d9c:	f06f 0303 	mvn.w	r3, #3
 8004da0:	61fb      	str	r3, [r7, #28]
 8004da2:	e025      	b.n	8004df0 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d011      	beq.n	8004dce <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004daa:	6839      	ldr	r1, [r7, #0]
 8004dac:	69b8      	ldr	r0, [r7, #24]
 8004dae:	f000 fde4 	bl	800597a <xQueueTakeMutexRecursive>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d01b      	beq.n	8004df0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004dbe:	f06f 0301 	mvn.w	r3, #1
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	e014      	b.n	8004df0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004dc6:	f06f 0302 	mvn.w	r3, #2
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	e010      	b.n	8004df0 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004dce:	6839      	ldr	r1, [r7, #0]
 8004dd0:	69b8      	ldr	r0, [r7, #24]
 8004dd2:	f001 f961 	bl	8006098 <xQueueSemaphoreTake>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d009      	beq.n	8004df0 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004de2:	f06f 0301 	mvn.w	r3, #1
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	e002      	b.n	8004df0 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004dea:	f06f 0302 	mvn.w	r3, #2
 8004dee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004df0:	69fb      	ldr	r3, [r7, #28]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	200000ac 	.word	0x200000ac

08004e00 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b088      	sub	sp, #32
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f023 0301 	bic.w	r3, r3, #1
 8004e0e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e1c:	f3ef 8305 	mrs	r3, IPSR
 8004e20:	613b      	str	r3, [r7, #16]
  return(result);
 8004e22:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10f      	bne.n	8004e48 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e28:	f3ef 8310 	mrs	r3, PRIMASK
 8004e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d105      	bne.n	8004e40 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e34:	f3ef 8311 	mrs	r3, BASEPRI
 8004e38:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <osMutexRelease+0x50>
 8004e40:	4b16      	ldr	r3, [pc, #88]	; (8004e9c <osMutexRelease+0x9c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d103      	bne.n	8004e50 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004e48:	f06f 0305 	mvn.w	r3, #5
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	e01f      	b.n	8004e90 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d103      	bne.n	8004e5e <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004e56:	f06f 0303 	mvn.w	r3, #3
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	e018      	b.n	8004e90 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d009      	beq.n	8004e78 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004e64:	69b8      	ldr	r0, [r7, #24]
 8004e66:	f000 fd55 	bl	8005914 <xQueueGiveMutexRecursive>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d00f      	beq.n	8004e90 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004e70:	f06f 0302 	mvn.w	r3, #2
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	e00b      	b.n	8004e90 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004e78:	2300      	movs	r3, #0
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	69b8      	ldr	r0, [r7, #24]
 8004e80:	f000 fe16 	bl	8005ab0 <xQueueGenericSend>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d002      	beq.n	8004e90 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004e8a:	f06f 0302 	mvn.w	r3, #2
 8004e8e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004e90:	69fb      	ldr	r3, [r7, #28]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	200000ac 	.word	0x200000ac

08004ea0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08c      	sub	sp, #48	; 0x30
 8004ea4:	af02      	add	r7, sp, #8
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eb0:	f3ef 8305 	mrs	r3, IPSR
 8004eb4:	61bb      	str	r3, [r7, #24]
  return(result);
 8004eb6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f040 8087 	bne.w	8004fcc <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec2:	617b      	str	r3, [r7, #20]
  return(result);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d105      	bne.n	8004ed6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004eca:	f3ef 8311 	mrs	r3, BASEPRI
 8004ece:	613b      	str	r3, [r7, #16]
  return(result);
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <osSemaphoreNew+0x3e>
 8004ed6:	4b40      	ldr	r3, [pc, #256]	; (8004fd8 <osSemaphoreNew+0x138>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d076      	beq.n	8004fcc <osSemaphoreNew+0x12c>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d073      	beq.n	8004fcc <osSemaphoreNew+0x12c>
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d86f      	bhi.n	8004fcc <osSemaphoreNew+0x12c>
    mem = -1;
 8004eec:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d015      	beq.n	8004f24 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d006      	beq.n	8004f0e <osSemaphoreNew+0x6e>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	2b4f      	cmp	r3, #79	; 0x4f
 8004f06:	d902      	bls.n	8004f0e <osSemaphoreNew+0x6e>
        mem = 1;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	623b      	str	r3, [r7, #32]
 8004f0c:	e00c      	b.n	8004f28 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d108      	bne.n	8004f28 <osSemaphoreNew+0x88>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d104      	bne.n	8004f28 <osSemaphoreNew+0x88>
          mem = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	623b      	str	r3, [r7, #32]
 8004f22:	e001      	b.n	8004f28 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d04d      	beq.n	8004fcc <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d129      	bne.n	8004f8a <osSemaphoreNew+0xea>
        if (mem == 1) {
 8004f36:	6a3b      	ldr	r3, [r7, #32]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d10b      	bne.n	8004f54 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	2303      	movs	r3, #3
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	4613      	mov	r3, r2
 8004f46:	2200      	movs	r2, #0
 8004f48:	2100      	movs	r1, #0
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f000 fbc0 	bl	80056d0 <xQueueGenericCreateStatic>
 8004f50:	6278      	str	r0, [r7, #36]	; 0x24
 8004f52:	e005      	b.n	8004f60 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004f54:	2203      	movs	r2, #3
 8004f56:	2100      	movs	r1, #0
 8004f58:	2001      	movs	r0, #1
 8004f5a:	f000 fc2c 	bl	80057b6 <xQueueGenericCreate>
 8004f5e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d022      	beq.n	8004fac <osSemaphoreNew+0x10c>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d01f      	beq.n	8004fac <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	2200      	movs	r2, #0
 8004f70:	2100      	movs	r1, #0
 8004f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f74:	f000 fd9c 	bl	8005ab0 <xQueueGenericSend>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d016      	beq.n	8004fac <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8004f7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f80:	f001 fa0f 	bl	80063a2 <vQueueDelete>
            hSemaphore = NULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
 8004f88:	e010      	b.n	8004fac <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d108      	bne.n	8004fa2 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	461a      	mov	r2, r3
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 fd23 	bl	80059e4 <xQueueCreateCountingSemaphoreStatic>
 8004f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8004fa0:	e004      	b.n	8004fac <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fd52 	bl	8005a4e <xQueueCreateCountingSemaphore>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00c      	beq.n	8004fcc <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d003      	beq.n	8004fc0 <osSemaphoreNew+0x120>
          name = attr->name;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	61fb      	str	r3, [r7, #28]
 8004fbe:	e001      	b.n	8004fc4 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004fc4:	69f9      	ldr	r1, [r7, #28]
 8004fc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004fc8:	f001 fb36 	bl	8006638 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3728      	adds	r7, #40	; 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	200000ac 	.word	0x200000ac

08004fdc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b088      	sub	sp, #32
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d103      	bne.n	8004ffc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004ff4:	f06f 0303 	mvn.w	r3, #3
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	e04b      	b.n	8005094 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ffc:	f3ef 8305 	mrs	r3, IPSR
 8005000:	617b      	str	r3, [r7, #20]
  return(result);
 8005002:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10f      	bne.n	8005028 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005008:	f3ef 8310 	mrs	r3, PRIMASK
 800500c:	613b      	str	r3, [r7, #16]
  return(result);
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d105      	bne.n	8005020 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005014:	f3ef 8311 	mrs	r3, BASEPRI
 8005018:	60fb      	str	r3, [r7, #12]
  return(result);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d026      	beq.n	800506e <osSemaphoreAcquire+0x92>
 8005020:	4b1f      	ldr	r3, [pc, #124]	; (80050a0 <osSemaphoreAcquire+0xc4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d122      	bne.n	800506e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800502e:	f06f 0303 	mvn.w	r3, #3
 8005032:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005034:	e02d      	b.n	8005092 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8005036:	2300      	movs	r3, #0
 8005038:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800503a:	f107 0308 	add.w	r3, r7, #8
 800503e:	461a      	mov	r2, r3
 8005040:	2100      	movs	r1, #0
 8005042:	69b8      	ldr	r0, [r7, #24]
 8005044:	f001 f930 	bl	80062a8 <xQueueReceiveFromISR>
 8005048:	4603      	mov	r3, r0
 800504a:	2b01      	cmp	r3, #1
 800504c:	d003      	beq.n	8005056 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800504e:	f06f 0302 	mvn.w	r3, #2
 8005052:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005054:	e01d      	b.n	8005092 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01a      	beq.n	8005092 <osSemaphoreAcquire+0xb6>
 800505c:	4b11      	ldr	r3, [pc, #68]	; (80050a4 <osSemaphoreAcquire+0xc8>)
 800505e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800506c:	e011      	b.n	8005092 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800506e:	6839      	ldr	r1, [r7, #0]
 8005070:	69b8      	ldr	r0, [r7, #24]
 8005072:	f001 f811 	bl	8006098 <xQueueSemaphoreTake>
 8005076:	4603      	mov	r3, r0
 8005078:	2b01      	cmp	r3, #1
 800507a:	d00b      	beq.n	8005094 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005082:	f06f 0301 	mvn.w	r3, #1
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	e004      	b.n	8005094 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800508a:	f06f 0302 	mvn.w	r3, #2
 800508e:	61fb      	str	r3, [r7, #28]
 8005090:	e000      	b.n	8005094 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8005092:	bf00      	nop
      }
    }
  }

  return (stat);
 8005094:	69fb      	ldr	r3, [r7, #28]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3720      	adds	r7, #32
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	200000ac 	.word	0x200000ac
 80050a4:	e000ed04 	.word	0xe000ed04

080050a8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d103      	bne.n	80050c6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80050be:	f06f 0303 	mvn.w	r3, #3
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	e03e      	b.n	8005144 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050c6:	f3ef 8305 	mrs	r3, IPSR
 80050ca:	617b      	str	r3, [r7, #20]
  return(result);
 80050cc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10f      	bne.n	80050f2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d2:	f3ef 8310 	mrs	r3, PRIMASK
 80050d6:	613b      	str	r3, [r7, #16]
  return(result);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d105      	bne.n	80050ea <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80050de:	f3ef 8311 	mrs	r3, BASEPRI
 80050e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d01e      	beq.n	8005128 <osSemaphoreRelease+0x80>
 80050ea:	4b19      	ldr	r3, [pc, #100]	; (8005150 <osSemaphoreRelease+0xa8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d11a      	bne.n	8005128 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80050f6:	f107 0308 	add.w	r3, r7, #8
 80050fa:	4619      	mov	r1, r3
 80050fc:	69b8      	ldr	r0, [r7, #24]
 80050fe:	f000 fe65 	bl	8005dcc <xQueueGiveFromISR>
 8005102:	4603      	mov	r3, r0
 8005104:	2b01      	cmp	r3, #1
 8005106:	d003      	beq.n	8005110 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005108:	f06f 0302 	mvn.w	r3, #2
 800510c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800510e:	e018      	b.n	8005142 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d015      	beq.n	8005142 <osSemaphoreRelease+0x9a>
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <osSemaphoreRelease+0xac>)
 8005118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511c:	601a      	str	r2, [r3, #0]
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005126:	e00c      	b.n	8005142 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005128:	2300      	movs	r3, #0
 800512a:	2200      	movs	r2, #0
 800512c:	2100      	movs	r1, #0
 800512e:	69b8      	ldr	r0, [r7, #24]
 8005130:	f000 fcbe 	bl	8005ab0 <xQueueGenericSend>
 8005134:	4603      	mov	r3, r0
 8005136:	2b01      	cmp	r3, #1
 8005138:	d004      	beq.n	8005144 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800513a:	f06f 0302 	mvn.w	r3, #2
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	e000      	b.n	8005144 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005142:	bf00      	nop
    }
  }

  return (stat);
 8005144:	69fb      	ldr	r3, [r7, #28]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	200000ac 	.word	0x200000ac
 8005154:	e000ed04 	.word	0xe000ed04

08005158 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005158:	b580      	push	{r7, lr}
 800515a:	b08c      	sub	sp, #48	; 0x30
 800515c:	af02      	add	r7, sp, #8
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005168:	f3ef 8305 	mrs	r3, IPSR
 800516c:	61bb      	str	r3, [r7, #24]
  return(result);
 800516e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005170:	2b00      	cmp	r3, #0
 8005172:	d170      	bne.n	8005256 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005174:	f3ef 8310 	mrs	r3, PRIMASK
 8005178:	617b      	str	r3, [r7, #20]
  return(result);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d105      	bne.n	800518c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005180:	f3ef 8311 	mrs	r3, BASEPRI
 8005184:	613b      	str	r3, [r7, #16]
  return(result);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <osMessageQueueNew+0x3c>
 800518c:	4b34      	ldr	r3, [pc, #208]	; (8005260 <osMessageQueueNew+0x108>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b02      	cmp	r3, #2
 8005192:	d060      	beq.n	8005256 <osMessageQueueNew+0xfe>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d05d      	beq.n	8005256 <osMessageQueueNew+0xfe>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d05a      	beq.n	8005256 <osMessageQueueNew+0xfe>
    mem = -1;
 80051a0:	f04f 33ff 	mov.w	r3, #4294967295
 80051a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d029      	beq.n	8005200 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d012      	beq.n	80051da <osMessageQueueNew+0x82>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	2b4f      	cmp	r3, #79	; 0x4f
 80051ba:	d90e      	bls.n	80051da <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	695a      	ldr	r2, [r3, #20]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	68b9      	ldr	r1, [r7, #8]
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d302      	bcc.n	80051da <osMessageQueueNew+0x82>
        mem = 1;
 80051d4:	2301      	movs	r3, #1
 80051d6:	623b      	str	r3, [r7, #32]
 80051d8:	e014      	b.n	8005204 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d110      	bne.n	8005204 <osMessageQueueNew+0xac>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10c      	bne.n	8005204 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d108      	bne.n	8005204 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d104      	bne.n	8005204 <osMessageQueueNew+0xac>
          mem = 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	623b      	str	r3, [r7, #32]
 80051fe:	e001      	b.n	8005204 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005200:	2300      	movs	r3, #0
 8005202:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d10c      	bne.n	8005224 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6899      	ldr	r1, [r3, #8]
 8005212:	2300      	movs	r3, #0
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	460b      	mov	r3, r1
 8005218:	68b9      	ldr	r1, [r7, #8]
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 fa58 	bl	80056d0 <xQueueGenericCreateStatic>
 8005220:	6278      	str	r0, [r7, #36]	; 0x24
 8005222:	e008      	b.n	8005236 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d105      	bne.n	8005236 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800522a:	2200      	movs	r2, #0
 800522c:	68b9      	ldr	r1, [r7, #8]
 800522e:	68f8      	ldr	r0, [r7, #12]
 8005230:	f000 fac1 	bl	80057b6 <xQueueGenericCreate>
 8005234:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00c      	beq.n	8005256 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <osMessageQueueNew+0xf2>
        name = attr->name;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	e001      	b.n	800524e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800524a:	2300      	movs	r3, #0
 800524c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800524e:	69f9      	ldr	r1, [r7, #28]
 8005250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005252:	f001 f9f1 	bl	8006638 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005258:	4618      	mov	r0, r3
 800525a:	3728      	adds	r7, #40	; 0x28
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	200000ac 	.word	0x200000ac

08005264 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b08a      	sub	sp, #40	; 0x28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	4613      	mov	r3, r2
 8005272:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005278:	2300      	movs	r3, #0
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800527c:	f3ef 8305 	mrs	r3, IPSR
 8005280:	61fb      	str	r3, [r7, #28]
  return(result);
 8005282:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10f      	bne.n	80052a8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005288:	f3ef 8310 	mrs	r3, PRIMASK
 800528c:	61bb      	str	r3, [r7, #24]
  return(result);
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005294:	f3ef 8311 	mrs	r3, BASEPRI
 8005298:	617b      	str	r3, [r7, #20]
  return(result);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d02c      	beq.n	80052fa <osMessageQueuePut+0x96>
 80052a0:	4b28      	ldr	r3, [pc, #160]	; (8005344 <osMessageQueuePut+0xe0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d128      	bne.n	80052fa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <osMessageQueuePut+0x56>
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <osMessageQueuePut+0x56>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80052ba:	f06f 0303 	mvn.w	r3, #3
 80052be:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052c0:	e039      	b.n	8005336 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80052c6:	f107 0210 	add.w	r2, r7, #16
 80052ca:	2300      	movs	r3, #0
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	6a38      	ldr	r0, [r7, #32]
 80052d0:	f000 fce8 	bl	8005ca4 <xQueueGenericSendFromISR>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d003      	beq.n	80052e2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80052da:	f06f 0302 	mvn.w	r3, #2
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052e0:	e029      	b.n	8005336 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d026      	beq.n	8005336 <osMessageQueuePut+0xd2>
 80052e8:	4b17      	ldr	r3, [pc, #92]	; (8005348 <osMessageQueuePut+0xe4>)
 80052ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80052f8:	e01d      	b.n	8005336 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <osMessageQueuePut+0xa2>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d103      	bne.n	800530e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005306:	f06f 0303 	mvn.w	r3, #3
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
 800530c:	e014      	b.n	8005338 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800530e:	2300      	movs	r3, #0
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	6a38      	ldr	r0, [r7, #32]
 8005316:	f000 fbcb 	bl	8005ab0 <xQueueGenericSend>
 800531a:	4603      	mov	r3, r0
 800531c:	2b01      	cmp	r3, #1
 800531e:	d00b      	beq.n	8005338 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005326:	f06f 0301 	mvn.w	r3, #1
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
 800532c:	e004      	b.n	8005338 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800532e:	f06f 0302 	mvn.w	r3, #2
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
 8005334:	e000      	b.n	8005338 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005336:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800533a:	4618      	mov	r0, r3
 800533c:	3728      	adds	r7, #40	; 0x28
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	200000ac 	.word	0x200000ac
 8005348:	e000ed04 	.word	0xe000ed04

0800534c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	; 0x28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800535e:	2300      	movs	r3, #0
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005362:	f3ef 8305 	mrs	r3, IPSR
 8005366:	61fb      	str	r3, [r7, #28]
  return(result);
 8005368:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10f      	bne.n	800538e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800536e:	f3ef 8310 	mrs	r3, PRIMASK
 8005372:	61bb      	str	r3, [r7, #24]
  return(result);
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d105      	bne.n	8005386 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800537a:	f3ef 8311 	mrs	r3, BASEPRI
 800537e:	617b      	str	r3, [r7, #20]
  return(result);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d02c      	beq.n	80053e0 <osMessageQueueGet+0x94>
 8005386:	4b28      	ldr	r3, [pc, #160]	; (8005428 <osMessageQueueGet+0xdc>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d128      	bne.n	80053e0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <osMessageQueueGet+0x54>
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <osMessageQueueGet+0x54>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80053a0:	f06f 0303 	mvn.w	r3, #3
 80053a4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053a6:	e038      	b.n	800541a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80053ac:	f107 0310 	add.w	r3, r7, #16
 80053b0:	461a      	mov	r2, r3
 80053b2:	68b9      	ldr	r1, [r7, #8]
 80053b4:	6a38      	ldr	r0, [r7, #32]
 80053b6:	f000 ff77 	bl	80062a8 <xQueueReceiveFromISR>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d003      	beq.n	80053c8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80053c0:	f06f 0302 	mvn.w	r3, #2
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053c6:	e028      	b.n	800541a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d025      	beq.n	800541a <osMessageQueueGet+0xce>
 80053ce:	4b17      	ldr	r3, [pc, #92]	; (800542c <osMessageQueueGet+0xe0>)
 80053d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053de:	e01c      	b.n	800541a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <osMessageQueueGet+0xa0>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d103      	bne.n	80053f4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80053ec:	f06f 0303 	mvn.w	r3, #3
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
 80053f2:	e013      	b.n	800541c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	68b9      	ldr	r1, [r7, #8]
 80053f8:	6a38      	ldr	r0, [r7, #32]
 80053fa:	f000 fd71 	bl	8005ee0 <xQueueReceive>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b01      	cmp	r3, #1
 8005402:	d00b      	beq.n	800541c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800540a:	f06f 0301 	mvn.w	r3, #1
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
 8005410:	e004      	b.n	800541c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005412:	f06f 0302 	mvn.w	r3, #2
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
 8005418:	e000      	b.n	800541c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800541a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800541c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800541e:	4618      	mov	r0, r3
 8005420:	3728      	adds	r7, #40	; 0x28
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	200000ac 	.word	0x200000ac
 800542c:	e000ed04 	.word	0xe000ed04

08005430 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4a07      	ldr	r2, [pc, #28]	; (800545c <vApplicationGetIdleTaskMemory+0x2c>)
 8005440:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4a06      	ldr	r2, [pc, #24]	; (8005460 <vApplicationGetIdleTaskMemory+0x30>)
 8005446:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2280      	movs	r2, #128	; 0x80
 800544c:	601a      	str	r2, [r3, #0]
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	200000b0 	.word	0x200000b0
 8005460:	20000110 	.word	0x20000110

08005464 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a07      	ldr	r2, [pc, #28]	; (8005490 <vApplicationGetTimerTaskMemory+0x2c>)
 8005474:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4a06      	ldr	r2, [pc, #24]	; (8005494 <vApplicationGetTimerTaskMemory+0x30>)
 800547a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	20000310 	.word	0x20000310
 8005494:	20000370 	.word	0x20000370

08005498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f103 0208 	add.w	r2, r3, #8
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295
 80054b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f103 0208 	add.w	r2, r3, #8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f103 0208 	add.w	r2, r3, #8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005550:	d103      	bne.n	800555a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e00c      	b.n	8005574 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3308      	adds	r3, #8
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	e002      	b.n	8005568 <vListInsert+0x2e>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	d2f6      	bcs.n	8005562 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	601a      	str	r2, [r3, #0]
}
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6892      	ldr	r2, [r2, #8]
 80055c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6852      	ldr	r2, [r2, #4]
 80055cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d103      	bne.n	80055e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	1e5a      	subs	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d109      	bne.n	8005628 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	60bb      	str	r3, [r7, #8]
 8005626:	e7fe      	b.n	8005626 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8005628:	f002 feb8 	bl	800839c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005634:	68f9      	ldr	r1, [r7, #12]
 8005636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005638:	fb01 f303 	mul.w	r3, r1, r3
 800563c:	441a      	add	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005658:	3b01      	subs	r3, #1
 800565a:	68f9      	ldr	r1, [r7, #12]
 800565c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800565e:	fb01 f303 	mul.w	r3, r1, r3
 8005662:	441a      	add	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	22ff      	movs	r2, #255	; 0xff
 800566c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	22ff      	movs	r2, #255	; 0xff
 8005674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d114      	bne.n	80056a8 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01a      	beq.n	80056bc <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3310      	adds	r3, #16
 800568a:	4618      	mov	r0, r3
 800568c:	f001 fe7c 	bl	8007388 <xTaskRemoveFromEventList>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d012      	beq.n	80056bc <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005696:	4b0d      	ldr	r3, [pc, #52]	; (80056cc <xQueueGenericReset+0xcc>)
 8005698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	e009      	b.n	80056bc <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3310      	adds	r3, #16
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff fef3 	bl	8005498 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3324      	adds	r3, #36	; 0x24
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7ff feee 	bl	8005498 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80056bc:	f002 fe9c 	bl	80083f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80056c0:	2301      	movs	r3, #1
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	e000ed04 	.word	0xe000ed04

080056d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08e      	sub	sp, #56	; 0x38
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d109      	bne.n	80056f8 <xQueueGenericCreateStatic+0x28>
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80056f6:	e7fe      	b.n	80056f6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d109      	bne.n	8005712 <xQueueGenericCreateStatic+0x42>
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
 8005710:	e7fe      	b.n	8005710 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <xQueueGenericCreateStatic+0x4e>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <xQueueGenericCreateStatic+0x52>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <xQueueGenericCreateStatic+0x54>
 8005722:	2300      	movs	r3, #0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <xQueueGenericCreateStatic+0x6c>
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	623b      	str	r3, [r7, #32]
 800573a:	e7fe      	b.n	800573a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d102      	bne.n	8005748 <xQueueGenericCreateStatic+0x78>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <xQueueGenericCreateStatic+0x7c>
 8005748:	2301      	movs	r3, #1
 800574a:	e000      	b.n	800574e <xQueueGenericCreateStatic+0x7e>
 800574c:	2300      	movs	r3, #0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d109      	bne.n	8005766 <xQueueGenericCreateStatic+0x96>
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	61fb      	str	r3, [r7, #28]
 8005764:	e7fe      	b.n	8005764 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005766:	2350      	movs	r3, #80	; 0x50
 8005768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b50      	cmp	r3, #80	; 0x50
 800576e:	d009      	beq.n	8005784 <xQueueGenericCreateStatic+0xb4>
 8005770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	61bb      	str	r3, [r7, #24]
 8005782:	e7fe      	b.n	8005782 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005784:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800578a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00d      	beq.n	80057ac <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005798:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579e:	9300      	str	r3, [sp, #0]
 80057a0:	4613      	mov	r3, r2
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 f844 	bl	8005834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3730      	adds	r7, #48	; 0x30
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80057b6:	b580      	push	{r7, lr}
 80057b8:	b08a      	sub	sp, #40	; 0x28
 80057ba:	af02      	add	r7, sp, #8
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	4613      	mov	r3, r2
 80057c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d109      	bne.n	80057de <xQueueGenericCreate+0x28>
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	613b      	str	r3, [r7, #16]
 80057dc:	e7fe      	b.n	80057dc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	e004      	b.n	80057f4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	68ba      	ldr	r2, [r7, #8]
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	3350      	adds	r3, #80	; 0x50
 80057f8:	4618      	mov	r0, r3
 80057fa:	f002 fee9 	bl	80085d0 <pvPortMalloc>
 80057fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d011      	beq.n	800582a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	3350      	adds	r3, #80	; 0x50
 800580e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005818:	79fa      	ldrb	r2, [r7, #7]
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	9300      	str	r3, [sp, #0]
 800581e:	4613      	mov	r3, r2
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	68b9      	ldr	r1, [r7, #8]
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 f805 	bl	8005834 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800582a:	69bb      	ldr	r3, [r7, #24]
	}
 800582c:	4618      	mov	r0, r3
 800582e:	3720      	adds	r7, #32
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
 8005840:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d103      	bne.n	8005850 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e002      	b.n	8005856 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005862:	2101      	movs	r1, #1
 8005864:	69b8      	ldr	r0, [r7, #24]
 8005866:	f7ff fecb 	bl	8005600 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800587a:	b580      	push	{r7, lr}
 800587c:	b082      	sub	sp, #8
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00e      	beq.n	80058a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800589a:	2300      	movs	r3, #0
 800589c:	2200      	movs	r2, #0
 800589e:	2100      	movs	r1, #0
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f905 	bl	8005ab0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b086      	sub	sp, #24
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	4603      	mov	r3, r0
 80058b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80058b8:	2301      	movs	r3, #1
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	461a      	mov	r2, r3
 80058c4:	6939      	ldr	r1, [r7, #16]
 80058c6:	6978      	ldr	r0, [r7, #20]
 80058c8:	f7ff ff75 	bl	80057b6 <xQueueGenericCreate>
 80058cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f7ff ffd3 	bl	800587a <prvInitialiseMutex>

		return xNewQueue;
 80058d4:	68fb      	ldr	r3, [r7, #12]
	}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b088      	sub	sp, #32
 80058e2:	af02      	add	r7, sp, #8
 80058e4:	4603      	mov	r3, r0
 80058e6:	6039      	str	r1, [r7, #0]
 80058e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80058ea:	2301      	movs	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2200      	movs	r2, #0
 80058fa:	6939      	ldr	r1, [r7, #16]
 80058fc:	6978      	ldr	r0, [r7, #20]
 80058fe:	f7ff fee7 	bl	80056d0 <xQueueGenericCreateStatic>
 8005902:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f7ff ffb8 	bl	800587a <prvInitialiseMutex>

		return xNewQueue;
 800590a:	68fb      	ldr	r3, [r7, #12]
	}
 800590c:	4618      	mov	r0, r3
 800590e:	3718      	adds	r7, #24
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005914:	b590      	push	{r4, r7, lr}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <xQueueGiveMutexRecursive+0x26>
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	e7fe      	b.n	8005938 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	689c      	ldr	r4, [r3, #8]
 800593e:	f001 fed9 	bl	80076f4 <xTaskGetCurrentTaskHandle>
 8005942:	4603      	mov	r3, r0
 8005944:	429c      	cmp	r4, r3
 8005946:	d111      	bne.n	800596c <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	1e5a      	subs	r2, r3, #1
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d105      	bne.n	8005966 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800595a:	2300      	movs	r3, #0
 800595c:	2200      	movs	r2, #0
 800595e:	2100      	movs	r1, #0
 8005960:	6938      	ldr	r0, [r7, #16]
 8005962:	f000 f8a5 	bl	8005ab0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005966:	2301      	movs	r3, #1
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e001      	b.n	8005970 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005970:	697b      	ldr	r3, [r7, #20]
	}
 8005972:	4618      	mov	r0, r3
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	bd90      	pop	{r4, r7, pc}

0800597a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800597a:	b590      	push	{r4, r7, lr}
 800597c:	b087      	sub	sp, #28
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d109      	bne.n	80059a2 <xQueueTakeMutexRecursive+0x28>
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	e7fe      	b.n	80059a0 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	689c      	ldr	r4, [r3, #8]
 80059a6:	f001 fea5 	bl	80076f4 <xTaskGetCurrentTaskHandle>
 80059aa:	4603      	mov	r3, r0
 80059ac:	429c      	cmp	r4, r3
 80059ae:	d107      	bne.n	80059c0 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80059ba:	2301      	movs	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e00c      	b.n	80059da <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80059c0:	6839      	ldr	r1, [r7, #0]
 80059c2:	6938      	ldr	r0, [r7, #16]
 80059c4:	f000 fb68 	bl	8006098 <xQueueSemaphoreTake>
 80059c8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d004      	beq.n	80059da <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80059da:	697b      	ldr	r3, [r7, #20]
	}
 80059dc:	4618      	mov	r0, r3
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd90      	pop	{r4, r7, pc}

080059e4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08a      	sub	sp, #40	; 0x28
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d109      	bne.n	8005a0a <xQueueCreateCountingSemaphoreStatic+0x26>
 80059f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	61bb      	str	r3, [r7, #24]
 8005a08:	e7fe      	b.n	8005a08 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d909      	bls.n	8005a26 <xQueueCreateCountingSemaphoreStatic+0x42>
 8005a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a16:	f383 8811 	msr	BASEPRI, r3
 8005a1a:	f3bf 8f6f 	isb	sy
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	e7fe      	b.n	8005a24 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005a26:	2302      	movs	r3, #2
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2100      	movs	r1, #0
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f7ff fe4d 	bl	80056d0 <xQueueGenericCreateStatic>
 8005a36:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005a44:	69fb      	ldr	r3, [r7, #28]
	}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b086      	sub	sp, #24
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
 8005a56:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <xQueueCreateCountingSemaphore+0x24>
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	e7fe      	b.n	8005a70 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d909      	bls.n	8005a8e <xQueueCreateCountingSemaphore+0x40>
 8005a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	e7fe      	b.n	8005a8c <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005a8e:	2202      	movs	r2, #2
 8005a90:	2100      	movs	r1, #0
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fe8f 	bl	80057b6 <xQueueGenericCreate>
 8005a98:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005aa6:	697b      	ldr	r3, [r7, #20]
	}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08e      	sub	sp, #56	; 0x38
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d109      	bne.n	8005ae0 <xQueueGenericSend+0x30>
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ade:	e7fe      	b.n	8005ade <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d103      	bne.n	8005aee <xQueueGenericSend+0x3e>
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <xQueueGenericSend+0x42>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <xQueueGenericSend+0x44>
 8005af2:	2300      	movs	r3, #0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <xQueueGenericSend+0x5c>
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0a:	e7fe      	b.n	8005b0a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d103      	bne.n	8005b1a <xQueueGenericSend+0x6a>
 8005b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <xQueueGenericSend+0x6e>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <xQueueGenericSend+0x70>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d109      	bne.n	8005b38 <xQueueGenericSend+0x88>
 8005b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	623b      	str	r3, [r7, #32]
 8005b36:	e7fe      	b.n	8005b36 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b38:	f001 fdec 	bl	8007714 <xTaskGetSchedulerState>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <xQueueGenericSend+0x98>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <xQueueGenericSend+0x9c>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e000      	b.n	8005b4e <xQueueGenericSend+0x9e>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <xQueueGenericSend+0xb6>
 8005b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b56:	f383 8811 	msr	BASEPRI, r3
 8005b5a:	f3bf 8f6f 	isb	sy
 8005b5e:	f3bf 8f4f 	dsb	sy
 8005b62:	61fb      	str	r3, [r7, #28]
 8005b64:	e7fe      	b.n	8005b64 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b66:	f002 fc19 	bl	800839c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d302      	bcc.n	8005b7c <xQueueGenericSend+0xcc>
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d129      	bne.n	8005bd0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b82:	f000 fc48 	bl	8006416 <prvCopyDataToQueue>
 8005b86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d010      	beq.n	8005bb2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	3324      	adds	r3, #36	; 0x24
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 fbf7 	bl	8007388 <xTaskRemoveFromEventList>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d013      	beq.n	8005bc8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ba0:	4b3f      	ldr	r3, [pc, #252]	; (8005ca0 <xQueueGenericSend+0x1f0>)
 8005ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	e00a      	b.n	8005bc8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d007      	beq.n	8005bc8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005bb8:	4b39      	ldr	r3, [pc, #228]	; (8005ca0 <xQueueGenericSend+0x1f0>)
 8005bba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bc8:	f002 fc16 	bl	80083f8 <vPortExitCritical>
				return pdPASS;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e063      	b.n	8005c98 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d103      	bne.n	8005bde <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bd6:	f002 fc0f 	bl	80083f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	e05c      	b.n	8005c98 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d106      	bne.n	8005bf2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005be4:	f107 0314 	add.w	r3, r7, #20
 8005be8:	4618      	mov	r0, r3
 8005bea:	f001 fc2f 	bl	800744c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bf2:	f002 fc01 	bl	80083f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bf6:	f001 f97d 	bl	8006ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bfa:	f002 fbcf 	bl	800839c <vPortEnterCritical>
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c04:	b25b      	sxtb	r3, r3
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d103      	bne.n	8005c14 <xQueueGenericSend+0x164>
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c1a:	b25b      	sxtb	r3, r3
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d103      	bne.n	8005c2a <xQueueGenericSend+0x17a>
 8005c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c2a:	f002 fbe5 	bl	80083f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c2e:	1d3a      	adds	r2, r7, #4
 8005c30:	f107 0314 	add.w	r3, r7, #20
 8005c34:	4611      	mov	r1, r2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 fc1e 	bl	8007478 <xTaskCheckForTimeOut>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d124      	bne.n	8005c8c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c44:	f000 fcdf 	bl	8006606 <prvIsQueueFull>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d018      	beq.n	8005c80 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	3310      	adds	r3, #16
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	4611      	mov	r1, r2
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 fb48 	bl	80072ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c5e:	f000 fc6a 	bl	8006536 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c62:	f001 f955 	bl	8006f10 <xTaskResumeAll>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f47f af7c 	bne.w	8005b66 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005c6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <xQueueGenericSend+0x1f0>)
 8005c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c74:	601a      	str	r2, [r3, #0]
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	e772      	b.n	8005b66 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c82:	f000 fc58 	bl	8006536 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c86:	f001 f943 	bl	8006f10 <xTaskResumeAll>
 8005c8a:	e76c      	b.n	8005b66 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c8e:	f000 fc52 	bl	8006536 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c92:	f001 f93d 	bl	8006f10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3738      	adds	r7, #56	; 0x38
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	e000ed04 	.word	0xe000ed04

08005ca4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08e      	sub	sp, #56	; 0x38
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d109      	bne.n	8005cd0 <xQueueGenericSendFromISR+0x2c>
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8005cce:	e7fe      	b.n	8005cce <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <xQueueGenericSendFromISR+0x3a>
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <xQueueGenericSendFromISR+0x3e>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <xQueueGenericSendFromISR+0x40>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <xQueueGenericSendFromISR+0x58>
 8005ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cec:	f383 8811 	msr	BASEPRI, r3
 8005cf0:	f3bf 8f6f 	isb	sy
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	623b      	str	r3, [r7, #32]
 8005cfa:	e7fe      	b.n	8005cfa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d103      	bne.n	8005d0a <xQueueGenericSendFromISR+0x66>
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <xQueueGenericSendFromISR+0x6a>
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <xQueueGenericSendFromISR+0x6c>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <xQueueGenericSendFromISR+0x84>
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	61fb      	str	r3, [r7, #28]
 8005d26:	e7fe      	b.n	8005d26 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d28:	f002 fc14 	bl	8008554 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d2c:	f3ef 8211 	mrs	r2, BASEPRI
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	61ba      	str	r2, [r7, #24]
 8005d42:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d44:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d46:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d302      	bcc.n	8005d5a <xQueueGenericSendFromISR+0xb6>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d12c      	bne.n	8005db4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d6a:	f000 fb54 	bl	8006416 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d6e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d76:	d112      	bne.n	8005d9e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d016      	beq.n	8005dae <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	3324      	adds	r3, #36	; 0x24
 8005d84:	4618      	mov	r0, r3
 8005d86:	f001 faff 	bl	8007388 <xTaskRemoveFromEventList>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00e      	beq.n	8005dae <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00b      	beq.n	8005dae <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	e007      	b.n	8005dae <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005da2:	3301      	adds	r3, #1
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	b25a      	sxtb	r2, r3
 8005da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005dae:	2301      	movs	r3, #1
 8005db0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005db2:	e001      	b.n	8005db8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	637b      	str	r3, [r7, #52]	; 0x34
 8005db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3738      	adds	r7, #56	; 0x38
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08e      	sub	sp, #56	; 0x38
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d109      	bne.n	8005df4 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	623b      	str	r3, [r7, #32]
 8005df2:	e7fe      	b.n	8005df2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d009      	beq.n	8005e10 <xQueueGiveFromISR+0x44>
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	61fb      	str	r3, [r7, #28]
 8005e0e:	e7fe      	b.n	8005e0e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d103      	bne.n	8005e20 <xQueueGiveFromISR+0x54>
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <xQueueGiveFromISR+0x58>
 8005e20:	2301      	movs	r3, #1
 8005e22:	e000      	b.n	8005e26 <xQueueGiveFromISR+0x5a>
 8005e24:	2300      	movs	r3, #0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d109      	bne.n	8005e3e <xQueueGiveFromISR+0x72>
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	61bb      	str	r3, [r7, #24]
 8005e3c:	e7fe      	b.n	8005e3c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e3e:	f002 fb89 	bl	8008554 <vPortValidateInterruptPriority>
	__asm volatile
 8005e42:	f3ef 8211 	mrs	r2, BASEPRI
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	617a      	str	r2, [r7, #20]
 8005e58:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005e5a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d22b      	bcs.n	8005ec6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e88:	d112      	bne.n	8005eb0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d016      	beq.n	8005ec0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	3324      	adds	r3, #36	; 0x24
 8005e96:	4618      	mov	r0, r3
 8005e98:	f001 fa76 	bl	8007388 <xTaskRemoveFromEventList>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00e      	beq.n	8005ec0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00b      	beq.n	8005ec0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	e007      	b.n	8005ec0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	b25a      	sxtb	r2, r3
 8005eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ec4:	e001      	b.n	8005eca <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ecc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3738      	adds	r7, #56	; 0x38
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
	...

08005ee0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08c      	sub	sp, #48	; 0x30
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <xQueueReceive+0x2e>
	__asm volatile
 8005efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efe:	f383 8811 	msr	BASEPRI, r3
 8005f02:	f3bf 8f6f 	isb	sy
 8005f06:	f3bf 8f4f 	dsb	sy
 8005f0a:	623b      	str	r3, [r7, #32]
 8005f0c:	e7fe      	b.n	8005f0c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d103      	bne.n	8005f1c <xQueueReceive+0x3c>
 8005f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <xQueueReceive+0x40>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e000      	b.n	8005f22 <xQueueReceive+0x42>
 8005f20:	2300      	movs	r3, #0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <xQueueReceive+0x5a>
 8005f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	61fb      	str	r3, [r7, #28]
 8005f38:	e7fe      	b.n	8005f38 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f3a:	f001 fbeb 	bl	8007714 <xTaskGetSchedulerState>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d102      	bne.n	8005f4a <xQueueReceive+0x6a>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d101      	bne.n	8005f4e <xQueueReceive+0x6e>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <xQueueReceive+0x70>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <xQueueReceive+0x88>
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	61bb      	str	r3, [r7, #24]
 8005f66:	e7fe      	b.n	8005f66 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f68:	f002 fa18 	bl	800839c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d01f      	beq.n	8005fb8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f7c:	f000 fab5 	bl	80064ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	1e5a      	subs	r2, r3, #1
 8005f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f86:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00f      	beq.n	8005fb0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	3310      	adds	r3, #16
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 f9f7 	bl	8007388 <xTaskRemoveFromEventList>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d007      	beq.n	8005fb0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fa0:	4b3c      	ldr	r3, [pc, #240]	; (8006094 <xQueueReceive+0x1b4>)
 8005fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	f3bf 8f4f 	dsb	sy
 8005fac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fb0:	f002 fa22 	bl	80083f8 <vPortExitCritical>
				return pdPASS;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e069      	b.n	800608c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d103      	bne.n	8005fc6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fbe:	f002 fa1b 	bl	80083f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e062      	b.n	800608c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d106      	bne.n	8005fda <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fcc:	f107 0310 	add.w	r3, r7, #16
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 fa3b 	bl	800744c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fda:	f002 fa0d 	bl	80083f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fde:	f000 ff89 	bl	8006ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fe2:	f002 f9db 	bl	800839c <vPortEnterCritical>
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005fec:	b25b      	sxtb	r3, r3
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d103      	bne.n	8005ffc <xQueueReceive+0x11c>
 8005ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006002:	b25b      	sxtb	r3, r3
 8006004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006008:	d103      	bne.n	8006012 <xQueueReceive+0x132>
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006012:	f002 f9f1 	bl	80083f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006016:	1d3a      	adds	r2, r7, #4
 8006018:	f107 0310 	add.w	r3, r7, #16
 800601c:	4611      	mov	r1, r2
 800601e:	4618      	mov	r0, r3
 8006020:	f001 fa2a 	bl	8007478 <xTaskCheckForTimeOut>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d123      	bne.n	8006072 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800602a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800602c:	f000 fad5 	bl	80065da <prvIsQueueEmpty>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d017      	beq.n	8006066 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	3324      	adds	r3, #36	; 0x24
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	4611      	mov	r1, r2
 800603e:	4618      	mov	r0, r3
 8006040:	f001 f954 	bl	80072ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006046:	f000 fa76 	bl	8006536 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800604a:	f000 ff61 	bl	8006f10 <xTaskResumeAll>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d189      	bne.n	8005f68 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006054:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <xQueueReceive+0x1b4>)
 8006056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	e780      	b.n	8005f68 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006068:	f000 fa65 	bl	8006536 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800606c:	f000 ff50 	bl	8006f10 <xTaskResumeAll>
 8006070:	e77a      	b.n	8005f68 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006074:	f000 fa5f 	bl	8006536 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006078:	f000 ff4a 	bl	8006f10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800607c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800607e:	f000 faac 	bl	80065da <prvIsQueueEmpty>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	f43f af6f 	beq.w	8005f68 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800608a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800608c:	4618      	mov	r0, r3
 800608e:	3730      	adds	r7, #48	; 0x30
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08e      	sub	sp, #56	; 0x38
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80060aa:	2300      	movs	r3, #0
 80060ac:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d109      	bne.n	80060c8 <xQueueSemaphoreTake+0x30>
 80060b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	623b      	str	r3, [r7, #32]
 80060c6:	e7fe      	b.n	80060c6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d009      	beq.n	80060e4 <xQueueSemaphoreTake+0x4c>
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	e7fe      	b.n	80060e2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060e4:	f001 fb16 	bl	8007714 <xTaskGetSchedulerState>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d102      	bne.n	80060f4 <xQueueSemaphoreTake+0x5c>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <xQueueSemaphoreTake+0x60>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <xQueueSemaphoreTake+0x62>
 80060f8:	2300      	movs	r3, #0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d109      	bne.n	8006112 <xQueueSemaphoreTake+0x7a>
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	e7fe      	b.n	8006110 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006112:	f002 f943 	bl	800839c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d024      	beq.n	800616c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	1e5a      	subs	r2, r3, #1
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006132:	f001 fc61 	bl	80079f8 <pvTaskIncrementMutexHeldCount>
 8006136:	4602      	mov	r2, r0
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800613c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00f      	beq.n	8006164 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006146:	3310      	adds	r3, #16
 8006148:	4618      	mov	r0, r3
 800614a:	f001 f91d 	bl	8007388 <xTaskRemoveFromEventList>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006154:	4b53      	ldr	r3, [pc, #332]	; (80062a4 <xQueueSemaphoreTake+0x20c>)
 8006156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006164:	f002 f948 	bl	80083f8 <vPortExitCritical>
				return pdPASS;
 8006168:	2301      	movs	r3, #1
 800616a:	e096      	b.n	800629a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d110      	bne.n	8006194 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006174:	2b00      	cmp	r3, #0
 8006176:	d009      	beq.n	800618c <xQueueSemaphoreTake+0xf4>
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	617b      	str	r3, [r7, #20]
 800618a:	e7fe      	b.n	800618a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800618c:	f002 f934 	bl	80083f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006190:	2300      	movs	r3, #0
 8006192:	e082      	b.n	800629a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800619a:	f107 030c 	add.w	r3, r7, #12
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 f954 	bl	800744c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061a4:	2301      	movs	r3, #1
 80061a6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061a8:	f002 f926 	bl	80083f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061ac:	f000 fea2 	bl	8006ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061b0:	f002 f8f4 	bl	800839c <vPortEnterCritical>
 80061b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061ba:	b25b      	sxtb	r3, r3
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d103      	bne.n	80061ca <xQueueSemaphoreTake+0x132>
 80061c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061d0:	b25b      	sxtb	r3, r3
 80061d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d6:	d103      	bne.n	80061e0 <xQueueSemaphoreTake+0x148>
 80061d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061e0:	f002 f90a 	bl	80083f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061e4:	463a      	mov	r2, r7
 80061e6:	f107 030c 	add.w	r3, r7, #12
 80061ea:	4611      	mov	r1, r2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f001 f943 	bl	8007478 <xTaskCheckForTimeOut>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d132      	bne.n	800625e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061fa:	f000 f9ee 	bl	80065da <prvIsQueueEmpty>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d026      	beq.n	8006252 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d109      	bne.n	8006220 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800620c:	f002 f8c6 	bl	800839c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	4618      	mov	r0, r3
 8006216:	f001 fa9b 	bl	8007750 <xTaskPriorityInherit>
 800621a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800621c:	f002 f8ec 	bl	80083f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006222:	3324      	adds	r3, #36	; 0x24
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	4611      	mov	r1, r2
 8006228:	4618      	mov	r0, r3
 800622a:	f001 f85f 	bl	80072ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800622e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006230:	f000 f981 	bl	8006536 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006234:	f000 fe6c 	bl	8006f10 <xTaskResumeAll>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	f47f af69 	bne.w	8006112 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006240:	4b18      	ldr	r3, [pc, #96]	; (80062a4 <xQueueSemaphoreTake+0x20c>)
 8006242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	e75f      	b.n	8006112 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006254:	f000 f96f 	bl	8006536 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006258:	f000 fe5a 	bl	8006f10 <xTaskResumeAll>
 800625c:	e759      	b.n	8006112 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800625e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006260:	f000 f969 	bl	8006536 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006264:	f000 fe54 	bl	8006f10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006268:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800626a:	f000 f9b6 	bl	80065da <prvIsQueueEmpty>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	f43f af4e 	beq.w	8006112 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00d      	beq.n	8006298 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800627c:	f002 f88e 	bl	800839c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006280:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006282:	f000 f8b0 	bl	80063e6 <prvGetDisinheritPriorityAfterTimeout>
 8006286:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800628e:	4618      	mov	r0, r3
 8006290:	f001 fb32 	bl	80078f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006294:	f002 f8b0 	bl	80083f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006298:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800629a:	4618      	mov	r0, r3
 800629c:	3738      	adds	r7, #56	; 0x38
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	e000ed04 	.word	0xe000ed04

080062a8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08e      	sub	sp, #56	; 0x38
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <xQueueReceiveFromISR+0x2a>
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	623b      	str	r3, [r7, #32]
 80062d0:	e7fe      	b.n	80062d0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <xQueueReceiveFromISR+0x38>
 80062d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <xQueueReceiveFromISR+0x3c>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <xQueueReceiveFromISR+0x3e>
 80062e4:	2300      	movs	r3, #0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <xQueueReceiveFromISR+0x56>
 80062ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e7fe      	b.n	80062fc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062fe:	f002 f929 	bl	8008554 <vPortValidateInterruptPriority>
	__asm volatile
 8006302:	f3ef 8211 	mrs	r2, BASEPRI
 8006306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	61ba      	str	r2, [r7, #24]
 8006318:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800631a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	2b00      	cmp	r3, #0
 8006328:	d02f      	beq.n	800638a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800632a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006334:	68b9      	ldr	r1, [r7, #8]
 8006336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006338:	f000 f8d7 	bl	80064ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	1e5a      	subs	r2, r3, #1
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006344:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d112      	bne.n	8006374 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d016      	beq.n	8006384 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	3310      	adds	r3, #16
 800635a:	4618      	mov	r0, r3
 800635c:	f001 f814 	bl	8007388 <xTaskRemoveFromEventList>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00e      	beq.n	8006384 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e007      	b.n	8006384 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006378:	3301      	adds	r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	b25a      	sxtb	r2, r3
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006384:	2301      	movs	r3, #1
 8006386:	637b      	str	r3, [r7, #52]	; 0x34
 8006388:	e001      	b.n	800638e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800638a:	2300      	movs	r3, #0
 800638c:	637b      	str	r3, [r7, #52]	; 0x34
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800639a:	4618      	mov	r0, r3
 800639c:	3738      	adds	r7, #56	; 0x38
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b084      	sub	sp, #16
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d109      	bne.n	80063c8 <vQueueDelete+0x26>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	60bb      	str	r3, [r7, #8]
 80063c6:	e7fe      	b.n	80063c6 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f95d 	bl	8006688 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d102      	bne.n	80063de <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f002 f9bb 	bl	8008754 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80063de:	bf00      	nop
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d006      	beq.n	8006404 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	e001      	b.n	8006408 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006404:	2300      	movs	r3, #0
 8006406:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006408:	68fb      	ldr	r3, [r7, #12]
	}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af00      	add	r7, sp, #0
 800641c:	60f8      	str	r0, [r7, #12]
 800641e:	60b9      	str	r1, [r7, #8]
 8006420:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006422:	2300      	movs	r3, #0
 8006424:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10d      	bne.n	8006450 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d14d      	bne.n	80064d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	4618      	mov	r0, r3
 8006442:	f001 f9ed 	bl	8007820 <xTaskPriorityDisinherit>
 8006446:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2200      	movs	r2, #0
 800644c:	609a      	str	r2, [r3, #8]
 800644e:	e043      	b.n	80064d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d119      	bne.n	800648a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6858      	ldr	r0, [r3, #4]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	461a      	mov	r2, r3
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	f010 fa14 	bl	801688e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	441a      	add	r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	429a      	cmp	r2, r3
 800647e:	d32b      	bcc.n	80064d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	605a      	str	r2, [r3, #4]
 8006488:	e026      	b.n	80064d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68d8      	ldr	r0, [r3, #12]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	461a      	mov	r2, r3
 8006494:	68b9      	ldr	r1, [r7, #8]
 8006496:	f010 f9fa 	bl	801688e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	425b      	negs	r3, r3
 80064a4:	441a      	add	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d207      	bcs.n	80064c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	425b      	negs	r3, r3
 80064c0:	441a      	add	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d105      	bne.n	80064d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1c5a      	adds	r2, r3, #1
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064e0:	697b      	ldr	r3, [r7, #20]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3718      	adds	r7, #24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d018      	beq.n	800652e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006504:	441a      	add	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68da      	ldr	r2, [r3, #12]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	429a      	cmp	r2, r3
 8006514:	d303      	bcc.n	800651e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68d9      	ldr	r1, [r3, #12]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006526:	461a      	mov	r2, r3
 8006528:	6838      	ldr	r0, [r7, #0]
 800652a:	f010 f9b0 	bl	801688e <memcpy>
	}
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800653e:	f001 ff2d 	bl	800839c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006548:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800654a:	e011      	b.n	8006570 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	2b00      	cmp	r3, #0
 8006552:	d012      	beq.n	800657a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3324      	adds	r3, #36	; 0x24
 8006558:	4618      	mov	r0, r3
 800655a:	f000 ff15 	bl	8007388 <xTaskRemoveFromEventList>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006564:	f000 ffe8 	bl	8007538 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	3b01      	subs	r3, #1
 800656c:	b2db      	uxtb	r3, r3
 800656e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006574:	2b00      	cmp	r3, #0
 8006576:	dce9      	bgt.n	800654c <prvUnlockQueue+0x16>
 8006578:	e000      	b.n	800657c <prvUnlockQueue+0x46>
					break;
 800657a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	22ff      	movs	r2, #255	; 0xff
 8006580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006584:	f001 ff38 	bl	80083f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006588:	f001 ff08 	bl	800839c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006592:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006594:	e011      	b.n	80065ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d012      	beq.n	80065c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	3310      	adds	r3, #16
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 fef0 	bl	8007388 <xTaskRemoveFromEventList>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065ae:	f000 ffc3 	bl	8007538 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
 80065b4:	3b01      	subs	r3, #1
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	dce9      	bgt.n	8006596 <prvUnlockQueue+0x60>
 80065c2:	e000      	b.n	80065c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	22ff      	movs	r2, #255	; 0xff
 80065ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065ce:	f001 ff13 	bl	80083f8 <vPortExitCritical>
}
 80065d2:	bf00      	nop
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065e2:	f001 fedb 	bl	800839c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d102      	bne.n	80065f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065ee:	2301      	movs	r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	e001      	b.n	80065f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065f8:	f001 fefe 	bl	80083f8 <vPortExitCritical>

	return xReturn;
 80065fc:	68fb      	ldr	r3, [r7, #12]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800660e:	f001 fec5 	bl	800839c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800661a:	429a      	cmp	r2, r3
 800661c:	d102      	bne.n	8006624 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800661e:	2301      	movs	r3, #1
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	e001      	b.n	8006628 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006628:	f001 fee6 	bl	80083f8 <vPortExitCritical>

	return xReturn;
 800662c:	68fb      	ldr	r3, [r7, #12]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006642:	2300      	movs	r3, #0
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	e014      	b.n	8006672 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006648:	4a0e      	ldr	r2, [pc, #56]	; (8006684 <vQueueAddToRegistry+0x4c>)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10b      	bne.n	800666c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006654:	490b      	ldr	r1, [pc, #44]	; (8006684 <vQueueAddToRegistry+0x4c>)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800665e:	4a09      	ldr	r2, [pc, #36]	; (8006684 <vQueueAddToRegistry+0x4c>)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	4413      	add	r3, r2
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800666a:	e005      	b.n	8006678 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	3301      	adds	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b07      	cmp	r3, #7
 8006676:	d9e7      	bls.n	8006648 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006678:	bf00      	nop
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	2001369c 	.word	0x2001369c

08006688 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e016      	b.n	80066c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006696:	4a10      	ldr	r2, [pc, #64]	; (80066d8 <vQueueUnregisterQueue+0x50>)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	00db      	lsls	r3, r3, #3
 800669c:	4413      	add	r3, r2
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d10b      	bne.n	80066be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80066a6:	4a0c      	ldr	r2, [pc, #48]	; (80066d8 <vQueueUnregisterQueue+0x50>)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2100      	movs	r1, #0
 80066ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80066b0:	4a09      	ldr	r2, [pc, #36]	; (80066d8 <vQueueUnregisterQueue+0x50>)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	00db      	lsls	r3, r3, #3
 80066b6:	4413      	add	r3, r2
 80066b8:	2200      	movs	r2, #0
 80066ba:	605a      	str	r2, [r3, #4]
				break;
 80066bc:	e005      	b.n	80066ca <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b07      	cmp	r3, #7
 80066c8:	d9e5      	bls.n	8006696 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80066ca:	bf00      	nop
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	2001369c 	.word	0x2001369c

080066dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80066ec:	f001 fe56 	bl	800839c <vPortEnterCritical>
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066f6:	b25b      	sxtb	r3, r3
 80066f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fc:	d103      	bne.n	8006706 <vQueueWaitForMessageRestricted+0x2a>
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800670c:	b25b      	sxtb	r3, r3
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d103      	bne.n	800671c <vQueueWaitForMessageRestricted+0x40>
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800671c:	f001 fe6c 	bl	80083f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	2b00      	cmp	r3, #0
 8006726:	d106      	bne.n	8006736 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	3324      	adds	r3, #36	; 0x24
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	4618      	mov	r0, r3
 8006732:	f000 fdff 	bl	8007334 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006736:	6978      	ldr	r0, [r7, #20]
 8006738:	f7ff fefd 	bl	8006536 <prvUnlockQueue>
	}
 800673c:	bf00      	nop
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08e      	sub	sp, #56	; 0x38
 8006748:	af04      	add	r7, sp, #16
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	60b9      	str	r1, [r7, #8]
 800674e:	607a      	str	r2, [r7, #4]
 8006750:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006754:	2b00      	cmp	r3, #0
 8006756:	d109      	bne.n	800676c <xTaskCreateStatic+0x28>
 8006758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	623b      	str	r3, [r7, #32]
 800676a:	e7fe      	b.n	800676a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <xTaskCreateStatic+0x42>
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	e7fe      	b.n	8006784 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006786:	2360      	movs	r3, #96	; 0x60
 8006788:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	2b60      	cmp	r3, #96	; 0x60
 800678e:	d009      	beq.n	80067a4 <xTaskCreateStatic+0x60>
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	e7fe      	b.n	80067a2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80067a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80067a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01e      	beq.n	80067ea <xTaskCreateStatic+0xa6>
 80067ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d01b      	beq.n	80067ea <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067c4:	2300      	movs	r3, #0
 80067c6:	9303      	str	r3, [sp, #12]
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	9302      	str	r3, [sp, #8]
 80067cc:	f107 0314 	add.w	r3, r7, #20
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	68b9      	ldr	r1, [r7, #8]
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 f850 	bl	8006882 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067e4:	f000 f8de 	bl	80069a4 <prvAddNewTaskToReadyList>
 80067e8:	e001      	b.n	80067ee <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80067ee:	697b      	ldr	r3, [r7, #20]
	}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3728      	adds	r7, #40	; 0x28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08c      	sub	sp, #48	; 0x30
 80067fc:	af04      	add	r7, sp, #16
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	4613      	mov	r3, r2
 8006806:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006808:	88fb      	ldrh	r3, [r7, #6]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4618      	mov	r0, r3
 800680e:	f001 fedf 	bl	80085d0 <pvPortMalloc>
 8006812:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800681a:	2060      	movs	r0, #96	; 0x60
 800681c:	f001 fed8 	bl	80085d0 <pvPortMalloc>
 8006820:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	631a      	str	r2, [r3, #48]	; 0x30
 800682e:	e005      	b.n	800683c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006830:	6978      	ldr	r0, [r7, #20]
 8006832:	f001 ff8f 	bl	8008754 <vPortFree>
 8006836:	e001      	b.n	800683c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006838:	2300      	movs	r3, #0
 800683a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d017      	beq.n	8006872 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800684a:	88fa      	ldrh	r2, [r7, #6]
 800684c:	2300      	movs	r3, #0
 800684e:	9303      	str	r3, [sp, #12]
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	9302      	str	r3, [sp, #8]
 8006854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f80e 	bl	8006882 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006866:	69f8      	ldr	r0, [r7, #28]
 8006868:	f000 f89c 	bl	80069a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800686c:	2301      	movs	r3, #1
 800686e:	61bb      	str	r3, [r7, #24]
 8006870:	e002      	b.n	8006878 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006872:	f04f 33ff 	mov.w	r3, #4294967295
 8006876:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006878:	69bb      	ldr	r3, [r7, #24]
	}
 800687a:	4618      	mov	r0, r3
 800687c:	3720      	adds	r7, #32
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b088      	sub	sp, #32
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
 800688e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006892:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	461a      	mov	r2, r3
 800689a:	21a5      	movs	r1, #165	; 0xa5
 800689c:	f010 f81b 	bl	80168d6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80068aa:	3b01      	subs	r3, #1
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	f023 0307 	bic.w	r3, r3, #7
 80068b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	f003 0307 	and.w	r3, r3, #7
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d009      	beq.n	80068d8 <prvInitialiseNewTask+0x56>
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	e7fe      	b.n	80068d6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d01f      	beq.n	800691e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80068de:	2300      	movs	r3, #0
 80068e0:	61fb      	str	r3, [r7, #28]
 80068e2:	e012      	b.n	800690a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	4413      	add	r3, r2
 80068ea:	7819      	ldrb	r1, [r3, #0]
 80068ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	4413      	add	r3, r2
 80068f2:	3334      	adds	r3, #52	; 0x34
 80068f4:	460a      	mov	r2, r1
 80068f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	4413      	add	r3, r2
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d006      	beq.n	8006912 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	3301      	adds	r3, #1
 8006908:	61fb      	str	r3, [r7, #28]
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	2b0f      	cmp	r3, #15
 800690e:	d9e9      	bls.n	80068e4 <prvInitialiseNewTask+0x62>
 8006910:	e000      	b.n	8006914 <prvInitialiseNewTask+0x92>
			{
				break;
 8006912:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800691c:	e003      	b.n	8006926 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006928:	2b37      	cmp	r3, #55	; 0x37
 800692a:	d901      	bls.n	8006930 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800692c:	2337      	movs	r3, #55	; 0x37
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006934:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800693a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	2200      	movs	r2, #0
 8006940:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	3304      	adds	r3, #4
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe fdc6 	bl	80054d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	3318      	adds	r3, #24
 8006950:	4618      	mov	r0, r3
 8006952:	f7fe fdc1 	bl	80054d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800696a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	2200      	movs	r2, #0
 8006970:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	2200      	movs	r2, #0
 8006976:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	2200      	movs	r2, #0
 800697c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	68f9      	ldr	r1, [r7, #12]
 8006984:	69b8      	ldr	r0, [r7, #24]
 8006986:	f001 fbe5 	bl	8008154 <pxPortInitialiseStack>
 800698a:	4602      	mov	r2, r0
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	2b00      	cmp	r3, #0
 8006994:	d002      	beq.n	800699c <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800699a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800699c:	bf00      	nop
 800699e:	3720      	adds	r7, #32
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80069ac:	f001 fcf6 	bl	800839c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80069b0:	4b2d      	ldr	r3, [pc, #180]	; (8006a68 <prvAddNewTaskToReadyList+0xc4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3301      	adds	r3, #1
 80069b6:	4a2c      	ldr	r2, [pc, #176]	; (8006a68 <prvAddNewTaskToReadyList+0xc4>)
 80069b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80069ba:	4b2c      	ldr	r3, [pc, #176]	; (8006a6c <prvAddNewTaskToReadyList+0xc8>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d109      	bne.n	80069d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80069c2:	4a2a      	ldr	r2, [pc, #168]	; (8006a6c <prvAddNewTaskToReadyList+0xc8>)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80069c8:	4b27      	ldr	r3, [pc, #156]	; (8006a68 <prvAddNewTaskToReadyList+0xc4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d110      	bne.n	80069f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80069d0:	f000 fdd6 	bl	8007580 <prvInitialiseTaskLists>
 80069d4:	e00d      	b.n	80069f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80069d6:	4b26      	ldr	r3, [pc, #152]	; (8006a70 <prvAddNewTaskToReadyList+0xcc>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d109      	bne.n	80069f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80069de:	4b23      	ldr	r3, [pc, #140]	; (8006a6c <prvAddNewTaskToReadyList+0xc8>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d802      	bhi.n	80069f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80069ec:	4a1f      	ldr	r2, [pc, #124]	; (8006a6c <prvAddNewTaskToReadyList+0xc8>)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80069f2:	4b20      	ldr	r3, [pc, #128]	; (8006a74 <prvAddNewTaskToReadyList+0xd0>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3301      	adds	r3, #1
 80069f8:	4a1e      	ldr	r2, [pc, #120]	; (8006a74 <prvAddNewTaskToReadyList+0xd0>)
 80069fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80069fc:	4b1d      	ldr	r3, [pc, #116]	; (8006a74 <prvAddNewTaskToReadyList+0xd0>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a08:	4b1b      	ldr	r3, [pc, #108]	; (8006a78 <prvAddNewTaskToReadyList+0xd4>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d903      	bls.n	8006a18 <prvAddNewTaskToReadyList+0x74>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a14:	4a18      	ldr	r2, [pc, #96]	; (8006a78 <prvAddNewTaskToReadyList+0xd4>)
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <prvAddNewTaskToReadyList+0xd8>)
 8006a26:	441a      	add	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4610      	mov	r0, r2
 8006a30:	f7fe fd5f 	bl	80054f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006a34:	f001 fce0 	bl	80083f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006a38:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <prvAddNewTaskToReadyList+0xcc>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00e      	beq.n	8006a5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006a40:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <prvAddNewTaskToReadyList+0xc8>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d207      	bcs.n	8006a5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006a4e:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <prvAddNewTaskToReadyList+0xdc>)
 8006a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a5e:	bf00      	nop
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20000c44 	.word	0x20000c44
 8006a6c:	20000770 	.word	0x20000770
 8006a70:	20000c50 	.word	0x20000c50
 8006a74:	20000c60 	.word	0x20000c60
 8006a78:	20000c4c 	.word	0x20000c4c
 8006a7c:	20000774 	.word	0x20000774
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d016      	beq.n	8006ac4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a96:	4b13      	ldr	r3, [pc, #76]	; (8006ae4 <vTaskDelay+0x60>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d009      	beq.n	8006ab2 <vTaskDelay+0x2e>
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	60bb      	str	r3, [r7, #8]
 8006ab0:	e7fe      	b.n	8006ab0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006ab2:	f000 fa1f 	bl	8006ef4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 ffb1 	bl	8007a20 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006abe:	f000 fa27 	bl	8006f10 <xTaskResumeAll>
 8006ac2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d107      	bne.n	8006ada <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006aca:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <vTaskDelay+0x64>)
 8006acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ada:	bf00      	nop
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000c6c 	.word	0x20000c6c
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b37      	cmp	r3, #55	; 0x37
 8006afe:	d909      	bls.n	8006b14 <vTaskPrioritySet+0x28>
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	60fb      	str	r3, [r7, #12]
 8006b12:	e7fe      	b.n	8006b12 <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2b37      	cmp	r3, #55	; 0x37
 8006b18:	d901      	bls.n	8006b1e <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b1a:	2337      	movs	r3, #55	; 0x37
 8006b1c:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8006b1e:	f001 fc3d 	bl	800839c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <vTaskPrioritySet+0x42>
 8006b28:	4b3a      	ldr	r3, [pc, #232]	; (8006c14 <vTaskPrioritySet+0x128>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	e000      	b.n	8006b30 <vTaskPrioritySet+0x44>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b36:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d063      	beq.n	8006c08 <vTaskPrioritySet+0x11c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d90d      	bls.n	8006b64 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8006b48:	4b32      	ldr	r3, [pc, #200]	; (8006c14 <vTaskPrioritySet+0x128>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d00f      	beq.n	8006b72 <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8006b52:	4b30      	ldr	r3, [pc, #192]	; (8006c14 <vTaskPrioritySet+0x128>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d309      	bcc.n	8006b72 <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	e006      	b.n	8006b72 <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8006b64:	4b2b      	ldr	r3, [pc, #172]	; (8006c14 <vTaskPrioritySet+0x128>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d101      	bne.n	8006b72 <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d102      	bne.n	8006b8a <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	db04      	blt.n	8006ba2 <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	6959      	ldr	r1, [r3, #20]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4a19      	ldr	r2, [pc, #100]	; (8006c18 <vTaskPrioritySet+0x12c>)
 8006bb2:	4413      	add	r3, r2
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	d11c      	bne.n	8006bf2 <vTaskPrioritySet+0x106>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f7fe fcf5 	bl	80055ac <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc6:	4b15      	ldr	r3, [pc, #84]	; (8006c1c <vTaskPrioritySet+0x130>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d903      	bls.n	8006bd6 <vTaskPrioritySet+0xea>
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd2:	4a12      	ldr	r2, [pc, #72]	; (8006c1c <vTaskPrioritySet+0x130>)
 8006bd4:	6013      	str	r3, [r2, #0]
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bda:	4613      	mov	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4a0d      	ldr	r2, [pc, #52]	; (8006c18 <vTaskPrioritySet+0x12c>)
 8006be4:	441a      	add	r2, r3
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	3304      	adds	r3, #4
 8006bea:	4619      	mov	r1, r3
 8006bec:	4610      	mov	r0, r2
 8006bee:	f7fe fc80 	bl	80054f2 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d007      	beq.n	8006c08 <vTaskPrioritySet+0x11c>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8006bf8:	4b09      	ldr	r3, [pc, #36]	; (8006c20 <vTaskPrioritySet+0x134>)
 8006bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bfe:	601a      	str	r2, [r3, #0]
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8006c08:	f001 fbf6 	bl	80083f8 <vPortExitCritical>
	}
 8006c0c:	bf00      	nop
 8006c0e:	3720      	adds	r7, #32
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	20000770 	.word	0x20000770
 8006c18:	20000774 	.word	0x20000774
 8006c1c:	20000c4c 	.word	0x20000c4c
 8006c20:	e000ed04 	.word	0xe000ed04

08006c24 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006c2c:	f001 fbb6 	bl	800839c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d102      	bne.n	8006c3c <vTaskSuspend+0x18>
 8006c36:	4b2f      	ldr	r3, [pc, #188]	; (8006cf4 <vTaskSuspend+0xd0>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	e000      	b.n	8006c3e <vTaskSuspend+0x1a>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3304      	adds	r3, #4
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe fcb1 	bl	80055ac <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d004      	beq.n	8006c5c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	3318      	adds	r3, #24
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7fe fca8 	bl	80055ac <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4619      	mov	r1, r3
 8006c62:	4825      	ldr	r0, [pc, #148]	; (8006cf8 <vTaskSuspend+0xd4>)
 8006c64:	f7fe fc45 	bl	80054f2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d103      	bne.n	8006c7c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8006c7c:	f001 fbbc 	bl	80083f8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8006c80:	4b1e      	ldr	r3, [pc, #120]	; (8006cfc <vTaskSuspend+0xd8>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8006c88:	f001 fb88 	bl	800839c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8006c8c:	f000 fd12 	bl	80076b4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8006c90:	f001 fbb2 	bl	80083f8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8006c94:	4b17      	ldr	r3, [pc, #92]	; (8006cf4 <vTaskSuspend+0xd0>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d126      	bne.n	8006cec <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 8006c9e:	4b17      	ldr	r3, [pc, #92]	; (8006cfc <vTaskSuspend+0xd8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d016      	beq.n	8006cd4 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8006ca6:	4b16      	ldr	r3, [pc, #88]	; (8006d00 <vTaskSuspend+0xdc>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <vTaskSuspend+0x9e>
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	60bb      	str	r3, [r7, #8]
 8006cc0:	e7fe      	b.n	8006cc0 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8006cc2:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <vTaskSuspend+0xe0>)
 8006cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cd2:	e00b      	b.n	8006cec <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8006cd4:	4b08      	ldr	r3, [pc, #32]	; (8006cf8 <vTaskSuspend+0xd4>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <vTaskSuspend+0xe4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d103      	bne.n	8006ce8 <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8006ce0:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <vTaskSuspend+0xd0>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
	}
 8006ce6:	e001      	b.n	8006cec <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8006ce8:	f000 fa88 	bl	80071fc <vTaskSwitchContext>
	}
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	20000770 	.word	0x20000770
 8006cf8:	20000c30 	.word	0x20000c30
 8006cfc:	20000c50 	.word	0x20000c50
 8006d00:	20000c6c 	.word	0x20000c6c
 8006d04:	e000ed04 	.word	0xe000ed04
 8006d08:	20000c44 	.word	0x20000c44

08006d0c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006d14:	2300      	movs	r3, #0
 8006d16:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <prvTaskIsTaskSuspended+0x2a>
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e7fe      	b.n	8006d34 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	4a0a      	ldr	r2, [pc, #40]	; (8006d64 <prvTaskIsTaskSuspended+0x58>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d10a      	bne.n	8006d56 <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d44:	4a08      	ldr	r2, [pc, #32]	; (8006d68 <prvTaskIsTaskSuspended+0x5c>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d005      	beq.n	8006d56 <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8006d52:	2301      	movs	r3, #1
 8006d54:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d56:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006d58:	4618      	mov	r0, r3
 8006d5a:	371c      	adds	r7, #28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	20000c30 	.word	0x20000c30
 8006d68:	20000c04 	.word	0x20000c04

08006d6c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d109      	bne.n	8006d92 <vTaskResume+0x26>
 8006d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	60bb      	str	r3, [r7, #8]
 8006d90:	e7fe      	b.n	8006d90 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006d92:	4b21      	ldr	r3, [pc, #132]	; (8006e18 <vTaskResume+0xac>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d038      	beq.n	8006e0e <vTaskResume+0xa2>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d035      	beq.n	8006e0e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8006da2:	f001 fafb 	bl	800839c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7ff ffb0 	bl	8006d0c <prvTaskIsTaskSuspended>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d02b      	beq.n	8006e0a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3304      	adds	r3, #4
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe fbf8 	bl	80055ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc0:	4b16      	ldr	r3, [pc, #88]	; (8006e1c <vTaskResume+0xb0>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d903      	bls.n	8006dd0 <vTaskResume+0x64>
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	4a13      	ldr	r2, [pc, #76]	; (8006e1c <vTaskResume+0xb0>)
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	4413      	add	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4a10      	ldr	r2, [pc, #64]	; (8006e20 <vTaskResume+0xb4>)
 8006dde:	441a      	add	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3304      	adds	r3, #4
 8006de4:	4619      	mov	r1, r3
 8006de6:	4610      	mov	r0, r2
 8006de8:	f7fe fb83 	bl	80054f2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df0:	4b09      	ldr	r3, [pc, #36]	; (8006e18 <vTaskResume+0xac>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d307      	bcc.n	8006e0a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006dfa:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <vTaskResume+0xb8>)
 8006dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006e0a:	f001 faf5 	bl	80083f8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20000770 	.word	0x20000770
 8006e1c:	20000c4c 	.word	0x20000c4c
 8006e20:	20000774 	.word	0x20000774
 8006e24:	e000ed04 	.word	0xe000ed04

08006e28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b08a      	sub	sp, #40	; 0x28
 8006e2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e36:	463a      	mov	r2, r7
 8006e38:	1d39      	adds	r1, r7, #4
 8006e3a:	f107 0308 	add.w	r3, r7, #8
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fe faf6 	bl	8005430 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	9202      	str	r2, [sp, #8]
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	2300      	movs	r3, #0
 8006e54:	460a      	mov	r2, r1
 8006e56:	4921      	ldr	r1, [pc, #132]	; (8006edc <vTaskStartScheduler+0xb4>)
 8006e58:	4821      	ldr	r0, [pc, #132]	; (8006ee0 <vTaskStartScheduler+0xb8>)
 8006e5a:	f7ff fc73 	bl	8006744 <xTaskCreateStatic>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	4b20      	ldr	r3, [pc, #128]	; (8006ee4 <vTaskStartScheduler+0xbc>)
 8006e62:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e64:	4b1f      	ldr	r3, [pc, #124]	; (8006ee4 <vTaskStartScheduler+0xbc>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	e001      	b.n	8006e76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d102      	bne.n	8006e82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e7c:	f000 fe24 	bl	8007ac8 <xTimerCreateTimerTask>
 8006e80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d117      	bne.n	8006eb8 <vTaskStartScheduler+0x90>
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e9a:	4b13      	ldr	r3, [pc, #76]	; (8006ee8 <vTaskStartScheduler+0xc0>)
 8006e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ea2:	4b12      	ldr	r3, [pc, #72]	; (8006eec <vTaskStartScheduler+0xc4>)
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ea8:	4b11      	ldr	r3, [pc, #68]	; (8006ef0 <vTaskStartScheduler+0xc8>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8006eae:	f7f9 fb87 	bl	80005c0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006eb2:	f001 f9d5 	bl	8008260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006eb6:	e00d      	b.n	8006ed4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d109      	bne.n	8006ed4 <vTaskStartScheduler+0xac>
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	e7fe      	b.n	8006ed2 <vTaskStartScheduler+0xaa>
}
 8006ed4:	bf00      	nop
 8006ed6:	3718      	adds	r7, #24
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	08017c20 	.word	0x08017c20
 8006ee0:	08007551 	.word	0x08007551
 8006ee4:	20000c68 	.word	0x20000c68
 8006ee8:	20000c64 	.word	0x20000c64
 8006eec:	20000c50 	.word	0x20000c50
 8006ef0:	20000c48 	.word	0x20000c48

08006ef4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006ef8:	4b04      	ldr	r3, [pc, #16]	; (8006f0c <vTaskSuspendAll+0x18>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3301      	adds	r3, #1
 8006efe:	4a03      	ldr	r2, [pc, #12]	; (8006f0c <vTaskSuspendAll+0x18>)
 8006f00:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006f02:	bf00      	nop
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	20000c6c 	.word	0x20000c6c

08006f10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f1e:	4b41      	ldr	r3, [pc, #260]	; (8007024 <xTaskResumeAll+0x114>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d109      	bne.n	8006f3a <xTaskResumeAll+0x2a>
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	603b      	str	r3, [r7, #0]
 8006f38:	e7fe      	b.n	8006f38 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f3a:	f001 fa2f 	bl	800839c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f3e:	4b39      	ldr	r3, [pc, #228]	; (8007024 <xTaskResumeAll+0x114>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	4a37      	ldr	r2, [pc, #220]	; (8007024 <xTaskResumeAll+0x114>)
 8006f46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f48:	4b36      	ldr	r3, [pc, #216]	; (8007024 <xTaskResumeAll+0x114>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d162      	bne.n	8007016 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f50:	4b35      	ldr	r3, [pc, #212]	; (8007028 <xTaskResumeAll+0x118>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d05e      	beq.n	8007016 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f58:	e02f      	b.n	8006fba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f5a:	4b34      	ldr	r3, [pc, #208]	; (800702c <xTaskResumeAll+0x11c>)
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	3318      	adds	r3, #24
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fb20 	bl	80055ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	3304      	adds	r3, #4
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe fb1b 	bl	80055ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7a:	4b2d      	ldr	r3, [pc, #180]	; (8007030 <xTaskResumeAll+0x120>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d903      	bls.n	8006f8a <xTaskResumeAll+0x7a>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f86:	4a2a      	ldr	r2, [pc, #168]	; (8007030 <xTaskResumeAll+0x120>)
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4a27      	ldr	r2, [pc, #156]	; (8007034 <xTaskResumeAll+0x124>)
 8006f98:	441a      	add	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fe faa6 	bl	80054f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006faa:	4b23      	ldr	r3, [pc, #140]	; (8007038 <xTaskResumeAll+0x128>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d302      	bcc.n	8006fba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006fb4:	4b21      	ldr	r3, [pc, #132]	; (800703c <xTaskResumeAll+0x12c>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fba:	4b1c      	ldr	r3, [pc, #112]	; (800702c <xTaskResumeAll+0x11c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1cb      	bne.n	8006f5a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fc8:	f000 fb74 	bl	80076b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006fcc:	4b1c      	ldr	r3, [pc, #112]	; (8007040 <xTaskResumeAll+0x130>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d010      	beq.n	8006ffa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006fd8:	f000 f858 	bl	800708c <xTaskIncrementTick>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006fe2:	4b16      	ldr	r3, [pc, #88]	; (800703c <xTaskResumeAll+0x12c>)
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3b01      	subs	r3, #1
 8006fec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1f1      	bne.n	8006fd8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006ff4:	4b12      	ldr	r3, [pc, #72]	; (8007040 <xTaskResumeAll+0x130>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ffa:	4b10      	ldr	r3, [pc, #64]	; (800703c <xTaskResumeAll+0x12c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d009      	beq.n	8007016 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007002:	2301      	movs	r3, #1
 8007004:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007006:	4b0f      	ldr	r3, [pc, #60]	; (8007044 <xTaskResumeAll+0x134>)
 8007008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007016:	f001 f9ef 	bl	80083f8 <vPortExitCritical>

	return xAlreadyYielded;
 800701a:	68bb      	ldr	r3, [r7, #8]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20000c6c 	.word	0x20000c6c
 8007028:	20000c44 	.word	0x20000c44
 800702c:	20000c04 	.word	0x20000c04
 8007030:	20000c4c 	.word	0x20000c4c
 8007034:	20000774 	.word	0x20000774
 8007038:	20000770 	.word	0x20000770
 800703c:	20000c58 	.word	0x20000c58
 8007040:	20000c54 	.word	0x20000c54
 8007044:	e000ed04 	.word	0xe000ed04

08007048 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800704e:	4b05      	ldr	r3, [pc, #20]	; (8007064 <xTaskGetTickCount+0x1c>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007054:	687b      	ldr	r3, [r7, #4]
}
 8007056:	4618      	mov	r0, r3
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	20000c48 	.word	0x20000c48

08007068 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800706e:	f001 fa71 	bl	8008554 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007072:	2300      	movs	r3, #0
 8007074:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007076:	4b04      	ldr	r3, [pc, #16]	; (8007088 <xTaskGetTickCountFromISR+0x20>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800707c:	683b      	ldr	r3, [r7, #0]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	20000c48 	.word	0x20000c48

0800708c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007096:	4b4e      	ldr	r3, [pc, #312]	; (80071d0 <xTaskIncrementTick+0x144>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	f040 8088 	bne.w	80071b0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070a0:	4b4c      	ldr	r3, [pc, #304]	; (80071d4 <xTaskIncrementTick+0x148>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3301      	adds	r3, #1
 80070a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070a8:	4a4a      	ldr	r2, [pc, #296]	; (80071d4 <xTaskIncrementTick+0x148>)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d11f      	bne.n	80070f4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80070b4:	4b48      	ldr	r3, [pc, #288]	; (80071d8 <xTaskIncrementTick+0x14c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <xTaskIncrementTick+0x46>
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	603b      	str	r3, [r7, #0]
 80070d0:	e7fe      	b.n	80070d0 <xTaskIncrementTick+0x44>
 80070d2:	4b41      	ldr	r3, [pc, #260]	; (80071d8 <xTaskIncrementTick+0x14c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	4b40      	ldr	r3, [pc, #256]	; (80071dc <xTaskIncrementTick+0x150>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a3e      	ldr	r2, [pc, #248]	; (80071d8 <xTaskIncrementTick+0x14c>)
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	4a3e      	ldr	r2, [pc, #248]	; (80071dc <xTaskIncrementTick+0x150>)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	4b3e      	ldr	r3, [pc, #248]	; (80071e0 <xTaskIncrementTick+0x154>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3301      	adds	r3, #1
 80070ec:	4a3c      	ldr	r2, [pc, #240]	; (80071e0 <xTaskIncrementTick+0x154>)
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	f000 fae0 	bl	80076b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070f4:	4b3b      	ldr	r3, [pc, #236]	; (80071e4 <xTaskIncrementTick+0x158>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d349      	bcc.n	8007192 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070fe:	4b36      	ldr	r3, [pc, #216]	; (80071d8 <xTaskIncrementTick+0x14c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d104      	bne.n	8007112 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007108:	4b36      	ldr	r3, [pc, #216]	; (80071e4 <xTaskIncrementTick+0x158>)
 800710a:	f04f 32ff 	mov.w	r2, #4294967295
 800710e:	601a      	str	r2, [r3, #0]
					break;
 8007110:	e03f      	b.n	8007192 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007112:	4b31      	ldr	r3, [pc, #196]	; (80071d8 <xTaskIncrementTick+0x14c>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	429a      	cmp	r2, r3
 8007128:	d203      	bcs.n	8007132 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800712a:	4a2e      	ldr	r2, [pc, #184]	; (80071e4 <xTaskIncrementTick+0x158>)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007130:	e02f      	b.n	8007192 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	3304      	adds	r3, #4
 8007136:	4618      	mov	r0, r3
 8007138:	f7fe fa38 	bl	80055ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007140:	2b00      	cmp	r3, #0
 8007142:	d004      	beq.n	800714e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	3318      	adds	r3, #24
 8007148:	4618      	mov	r0, r3
 800714a:	f7fe fa2f 	bl	80055ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007152:	4b25      	ldr	r3, [pc, #148]	; (80071e8 <xTaskIncrementTick+0x15c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d903      	bls.n	8007162 <xTaskIncrementTick+0xd6>
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	4a22      	ldr	r2, [pc, #136]	; (80071e8 <xTaskIncrementTick+0x15c>)
 8007160:	6013      	str	r3, [r2, #0]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007166:	4613      	mov	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4a1f      	ldr	r2, [pc, #124]	; (80071ec <xTaskIncrementTick+0x160>)
 8007170:	441a      	add	r2, r3
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	3304      	adds	r3, #4
 8007176:	4619      	mov	r1, r3
 8007178:	4610      	mov	r0, r2
 800717a:	f7fe f9ba 	bl	80054f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007182:	4b1b      	ldr	r3, [pc, #108]	; (80071f0 <xTaskIncrementTick+0x164>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	429a      	cmp	r2, r3
 800718a:	d3b8      	bcc.n	80070fe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800718c:	2301      	movs	r3, #1
 800718e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007190:	e7b5      	b.n	80070fe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007192:	4b17      	ldr	r3, [pc, #92]	; (80071f0 <xTaskIncrementTick+0x164>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007198:	4914      	ldr	r1, [pc, #80]	; (80071ec <xTaskIncrementTick+0x160>)
 800719a:	4613      	mov	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	440b      	add	r3, r1
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d907      	bls.n	80071ba <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80071aa:	2301      	movs	r3, #1
 80071ac:	617b      	str	r3, [r7, #20]
 80071ae:	e004      	b.n	80071ba <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80071b0:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <xTaskIncrementTick+0x168>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	4a0f      	ldr	r2, [pc, #60]	; (80071f4 <xTaskIncrementTick+0x168>)
 80071b8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80071ba:	4b0f      	ldr	r3, [pc, #60]	; (80071f8 <xTaskIncrementTick+0x16c>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80071c2:	2301      	movs	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071c6:	697b      	ldr	r3, [r7, #20]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3718      	adds	r7, #24
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20000c6c 	.word	0x20000c6c
 80071d4:	20000c48 	.word	0x20000c48
 80071d8:	20000bfc 	.word	0x20000bfc
 80071dc:	20000c00 	.word	0x20000c00
 80071e0:	20000c5c 	.word	0x20000c5c
 80071e4:	20000c64 	.word	0x20000c64
 80071e8:	20000c4c 	.word	0x20000c4c
 80071ec:	20000774 	.word	0x20000774
 80071f0:	20000770 	.word	0x20000770
 80071f4:	20000c54 	.word	0x20000c54
 80071f8:	20000c58 	.word	0x20000c58

080071fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007202:	4b33      	ldr	r3, [pc, #204]	; (80072d0 <vTaskSwitchContext+0xd4>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800720a:	4b32      	ldr	r3, [pc, #200]	; (80072d4 <vTaskSwitchContext+0xd8>)
 800720c:	2201      	movs	r2, #1
 800720e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007210:	e059      	b.n	80072c6 <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8007212:	4b30      	ldr	r3, [pc, #192]	; (80072d4 <vTaskSwitchContext+0xd8>)
 8007214:	2200      	movs	r2, #0
 8007216:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007218:	f7f9 f9d9 	bl	80005ce <getRunTimeCounterValue>
 800721c:	4602      	mov	r2, r0
 800721e:	4b2e      	ldr	r3, [pc, #184]	; (80072d8 <vTaskSwitchContext+0xdc>)
 8007220:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007222:	4b2d      	ldr	r3, [pc, #180]	; (80072d8 <vTaskSwitchContext+0xdc>)
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	4b2d      	ldr	r3, [pc, #180]	; (80072dc <vTaskSwitchContext+0xe0>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	429a      	cmp	r2, r3
 800722c:	d909      	bls.n	8007242 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800722e:	4b2c      	ldr	r3, [pc, #176]	; (80072e0 <vTaskSwitchContext+0xe4>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007234:	4a28      	ldr	r2, [pc, #160]	; (80072d8 <vTaskSwitchContext+0xdc>)
 8007236:	6810      	ldr	r0, [r2, #0]
 8007238:	4a28      	ldr	r2, [pc, #160]	; (80072dc <vTaskSwitchContext+0xe0>)
 800723a:	6812      	ldr	r2, [r2, #0]
 800723c:	1a82      	subs	r2, r0, r2
 800723e:	440a      	add	r2, r1
 8007240:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007242:	4b25      	ldr	r3, [pc, #148]	; (80072d8 <vTaskSwitchContext+0xdc>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a25      	ldr	r2, [pc, #148]	; (80072dc <vTaskSwitchContext+0xe0>)
 8007248:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800724a:	4b26      	ldr	r3, [pc, #152]	; (80072e4 <vTaskSwitchContext+0xe8>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]
 8007250:	e00f      	b.n	8007272 <vTaskSwitchContext+0x76>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d109      	bne.n	800726c <vTaskSwitchContext+0x70>
 8007258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725c:	f383 8811 	msr	BASEPRI, r3
 8007260:	f3bf 8f6f 	isb	sy
 8007264:	f3bf 8f4f 	dsb	sy
 8007268:	607b      	str	r3, [r7, #4]
 800726a:	e7fe      	b.n	800726a <vTaskSwitchContext+0x6e>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	3b01      	subs	r3, #1
 8007270:	60fb      	str	r3, [r7, #12]
 8007272:	491d      	ldr	r1, [pc, #116]	; (80072e8 <vTaskSwitchContext+0xec>)
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	4613      	mov	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4413      	add	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	440b      	add	r3, r1
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0e5      	beq.n	8007252 <vTaskSwitchContext+0x56>
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4613      	mov	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <vTaskSwitchContext+0xec>)
 8007292:	4413      	add	r3, r2
 8007294:	60bb      	str	r3, [r7, #8]
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	605a      	str	r2, [r3, #4]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	3308      	adds	r3, #8
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d104      	bne.n	80072b6 <vTaskSwitchContext+0xba>
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	605a      	str	r2, [r3, #4]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	4a08      	ldr	r2, [pc, #32]	; (80072e0 <vTaskSwitchContext+0xe4>)
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	4a08      	ldr	r2, [pc, #32]	; (80072e4 <vTaskSwitchContext+0xe8>)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6013      	str	r3, [r2, #0]
}
 80072c6:	bf00      	nop
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	20000c6c 	.word	0x20000c6c
 80072d4:	20000c58 	.word	0x20000c58
 80072d8:	20000c74 	.word	0x20000c74
 80072dc:	20000c70 	.word	0x20000c70
 80072e0:	20000770 	.word	0x20000770
 80072e4:	20000c4c 	.word	0x20000c4c
 80072e8:	20000774 	.word	0x20000774

080072ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d109      	bne.n	8007310 <vTaskPlaceOnEventList+0x24>
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	e7fe      	b.n	800730e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007310:	4b07      	ldr	r3, [pc, #28]	; (8007330 <vTaskPlaceOnEventList+0x44>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3318      	adds	r3, #24
 8007316:	4619      	mov	r1, r3
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fe f90e 	bl	800553a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800731e:	2101      	movs	r1, #1
 8007320:	6838      	ldr	r0, [r7, #0]
 8007322:	f000 fb7d 	bl	8007a20 <prvAddCurrentTaskToDelayedList>
}
 8007326:	bf00      	nop
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	20000770 	.word	0x20000770

08007334 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d109      	bne.n	800735a <vTaskPlaceOnEventListRestricted+0x26>
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	e7fe      	b.n	8007358 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800735a:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <vTaskPlaceOnEventListRestricted+0x50>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3318      	adds	r3, #24
 8007360:	4619      	mov	r1, r3
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7fe f8c5 	bl	80054f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d002      	beq.n	8007374 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800736e:	f04f 33ff 	mov.w	r3, #4294967295
 8007372:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007374:	6879      	ldr	r1, [r7, #4]
 8007376:	68b8      	ldr	r0, [r7, #8]
 8007378:	f000 fb52 	bl	8007a20 <prvAddCurrentTaskToDelayedList>
	}
 800737c:	bf00      	nop
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	20000770 	.word	0x20000770

08007388 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d109      	bne.n	80073b2 <xTaskRemoveFromEventList+0x2a>
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e7fe      	b.n	80073b0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	3318      	adds	r3, #24
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe f8f8 	bl	80055ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073bc:	4b1d      	ldr	r3, [pc, #116]	; (8007434 <xTaskRemoveFromEventList+0xac>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d11d      	bne.n	8007400 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	3304      	adds	r3, #4
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7fe f8ef 	bl	80055ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d2:	4b19      	ldr	r3, [pc, #100]	; (8007438 <xTaskRemoveFromEventList+0xb0>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d903      	bls.n	80073e2 <xTaskRemoveFromEventList+0x5a>
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073de:	4a16      	ldr	r2, [pc, #88]	; (8007438 <xTaskRemoveFromEventList+0xb0>)
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4a13      	ldr	r2, [pc, #76]	; (800743c <xTaskRemoveFromEventList+0xb4>)
 80073f0:	441a      	add	r2, r3
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7fe f87a 	bl	80054f2 <vListInsertEnd>
 80073fe:	e005      	b.n	800740c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	3318      	adds	r3, #24
 8007404:	4619      	mov	r1, r3
 8007406:	480e      	ldr	r0, [pc, #56]	; (8007440 <xTaskRemoveFromEventList+0xb8>)
 8007408:	f7fe f873 	bl	80054f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007410:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <xTaskRemoveFromEventList+0xbc>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	429a      	cmp	r2, r3
 8007418:	d905      	bls.n	8007426 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800741a:	2301      	movs	r3, #1
 800741c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800741e:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <xTaskRemoveFromEventList+0xc0>)
 8007420:	2201      	movs	r2, #1
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	e001      	b.n	800742a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007426:	2300      	movs	r3, #0
 8007428:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800742a:	697b      	ldr	r3, [r7, #20]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20000c6c 	.word	0x20000c6c
 8007438:	20000c4c 	.word	0x20000c4c
 800743c:	20000774 	.word	0x20000774
 8007440:	20000c04 	.word	0x20000c04
 8007444:	20000770 	.word	0x20000770
 8007448:	20000c58 	.word	0x20000c58

0800744c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007454:	4b06      	ldr	r3, [pc, #24]	; (8007470 <vTaskInternalSetTimeOutState+0x24>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800745c:	4b05      	ldr	r3, [pc, #20]	; (8007474 <vTaskInternalSetTimeOutState+0x28>)
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	605a      	str	r2, [r3, #4]
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	20000c5c 	.word	0x20000c5c
 8007474:	20000c48 	.word	0x20000c48

08007478 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d109      	bne.n	800749c <xTaskCheckForTimeOut+0x24>
 8007488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	e7fe      	b.n	800749a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d109      	bne.n	80074b6 <xTaskCheckForTimeOut+0x3e>
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e7fe      	b.n	80074b4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80074b6:	f000 ff71 	bl	800839c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074ba:	4b1d      	ldr	r3, [pc, #116]	; (8007530 <xTaskCheckForTimeOut+0xb8>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	69ba      	ldr	r2, [r7, #24]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d102      	bne.n	80074da <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	e023      	b.n	8007522 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	4b15      	ldr	r3, [pc, #84]	; (8007534 <xTaskCheckForTimeOut+0xbc>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d007      	beq.n	80074f6 <xTaskCheckForTimeOut+0x7e>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	69ba      	ldr	r2, [r7, #24]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d302      	bcc.n	80074f6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074f0:	2301      	movs	r3, #1
 80074f2:	61fb      	str	r3, [r7, #28]
 80074f4:	e015      	b.n	8007522 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d20b      	bcs.n	8007518 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	1ad2      	subs	r2, r2, r3
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff ff9d 	bl	800744c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
 8007516:	e004      	b.n	8007522 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2200      	movs	r2, #0
 800751c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800751e:	2301      	movs	r3, #1
 8007520:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007522:	f000 ff69 	bl	80083f8 <vPortExitCritical>

	return xReturn;
 8007526:	69fb      	ldr	r3, [r7, #28]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3720      	adds	r7, #32
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20000c48 	.word	0x20000c48
 8007534:	20000c5c 	.word	0x20000c5c

08007538 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800753c:	4b03      	ldr	r3, [pc, #12]	; (800754c <vTaskMissedYield+0x14>)
 800753e:	2201      	movs	r2, #1
 8007540:	601a      	str	r2, [r3, #0]
}
 8007542:	bf00      	nop
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	20000c58 	.word	0x20000c58

08007550 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007558:	f000 f852 	bl	8007600 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800755c:	4b06      	ldr	r3, [pc, #24]	; (8007578 <prvIdleTask+0x28>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d9f9      	bls.n	8007558 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007564:	4b05      	ldr	r3, [pc, #20]	; (800757c <prvIdleTask+0x2c>)
 8007566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800756a:	601a      	str	r2, [r3, #0]
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007574:	e7f0      	b.n	8007558 <prvIdleTask+0x8>
 8007576:	bf00      	nop
 8007578:	20000774 	.word	0x20000774
 800757c:	e000ed04 	.word	0xe000ed04

08007580 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007586:	2300      	movs	r3, #0
 8007588:	607b      	str	r3, [r7, #4]
 800758a:	e00c      	b.n	80075a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	4613      	mov	r3, r2
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4a12      	ldr	r2, [pc, #72]	; (80075e0 <prvInitialiseTaskLists+0x60>)
 8007598:	4413      	add	r3, r2
 800759a:	4618      	mov	r0, r3
 800759c:	f7fd ff7c 	bl	8005498 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3301      	adds	r3, #1
 80075a4:	607b      	str	r3, [r7, #4]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b37      	cmp	r3, #55	; 0x37
 80075aa:	d9ef      	bls.n	800758c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075ac:	480d      	ldr	r0, [pc, #52]	; (80075e4 <prvInitialiseTaskLists+0x64>)
 80075ae:	f7fd ff73 	bl	8005498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075b2:	480d      	ldr	r0, [pc, #52]	; (80075e8 <prvInitialiseTaskLists+0x68>)
 80075b4:	f7fd ff70 	bl	8005498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075b8:	480c      	ldr	r0, [pc, #48]	; (80075ec <prvInitialiseTaskLists+0x6c>)
 80075ba:	f7fd ff6d 	bl	8005498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075be:	480c      	ldr	r0, [pc, #48]	; (80075f0 <prvInitialiseTaskLists+0x70>)
 80075c0:	f7fd ff6a 	bl	8005498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075c4:	480b      	ldr	r0, [pc, #44]	; (80075f4 <prvInitialiseTaskLists+0x74>)
 80075c6:	f7fd ff67 	bl	8005498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075ca:	4b0b      	ldr	r3, [pc, #44]	; (80075f8 <prvInitialiseTaskLists+0x78>)
 80075cc:	4a05      	ldr	r2, [pc, #20]	; (80075e4 <prvInitialiseTaskLists+0x64>)
 80075ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075d0:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <prvInitialiseTaskLists+0x7c>)
 80075d2:	4a05      	ldr	r2, [pc, #20]	; (80075e8 <prvInitialiseTaskLists+0x68>)
 80075d4:	601a      	str	r2, [r3, #0]
}
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000774 	.word	0x20000774
 80075e4:	20000bd4 	.word	0x20000bd4
 80075e8:	20000be8 	.word	0x20000be8
 80075ec:	20000c04 	.word	0x20000c04
 80075f0:	20000c18 	.word	0x20000c18
 80075f4:	20000c30 	.word	0x20000c30
 80075f8:	20000bfc 	.word	0x20000bfc
 80075fc:	20000c00 	.word	0x20000c00

08007600 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007606:	e019      	b.n	800763c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007608:	f000 fec8 	bl	800839c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800760c:	4b0f      	ldr	r3, [pc, #60]	; (800764c <prvCheckTasksWaitingTermination+0x4c>)
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3304      	adds	r3, #4
 8007618:	4618      	mov	r0, r3
 800761a:	f7fd ffc7 	bl	80055ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800761e:	4b0c      	ldr	r3, [pc, #48]	; (8007650 <prvCheckTasksWaitingTermination+0x50>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3b01      	subs	r3, #1
 8007624:	4a0a      	ldr	r2, [pc, #40]	; (8007650 <prvCheckTasksWaitingTermination+0x50>)
 8007626:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <prvCheckTasksWaitingTermination+0x54>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3b01      	subs	r3, #1
 800762e:	4a09      	ldr	r2, [pc, #36]	; (8007654 <prvCheckTasksWaitingTermination+0x54>)
 8007630:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007632:	f000 fee1 	bl	80083f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f80e 	bl	8007658 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800763c:	4b05      	ldr	r3, [pc, #20]	; (8007654 <prvCheckTasksWaitingTermination+0x54>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e1      	bne.n	8007608 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007644:	bf00      	nop
 8007646:	3708      	adds	r7, #8
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}
 800764c:	20000c18 	.word	0x20000c18
 8007650:	20000c44 	.word	0x20000c44
 8007654:	20000c2c 	.word	0x20000c2c

08007658 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007666:	2b00      	cmp	r3, #0
 8007668:	d108      	bne.n	800767c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766e:	4618      	mov	r0, r3
 8007670:	f001 f870 	bl	8008754 <vPortFree>
				vPortFree( pxTCB );
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f001 f86d 	bl	8008754 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800767a:	e017      	b.n	80076ac <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007682:	2b01      	cmp	r3, #1
 8007684:	d103      	bne.n	800768e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f001 f864 	bl	8008754 <vPortFree>
	}
 800768c:	e00e      	b.n	80076ac <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007694:	2b02      	cmp	r3, #2
 8007696:	d009      	beq.n	80076ac <prvDeleteTCB+0x54>
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	e7fe      	b.n	80076aa <prvDeleteTCB+0x52>
	}
 80076ac:	bf00      	nop
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ba:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <prvResetNextTaskUnblockTime+0x38>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d104      	bne.n	80076ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076c4:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <prvResetNextTaskUnblockTime+0x3c>)
 80076c6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076cc:	e008      	b.n	80076e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076ce:	4b07      	ldr	r3, [pc, #28]	; (80076ec <prvResetNextTaskUnblockTime+0x38>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	68db      	ldr	r3, [r3, #12]
 80076d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	4a04      	ldr	r2, [pc, #16]	; (80076f0 <prvResetNextTaskUnblockTime+0x3c>)
 80076de:	6013      	str	r3, [r2, #0]
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	20000bfc 	.word	0x20000bfc
 80076f0:	20000c64 	.word	0x20000c64

080076f4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80076fa:	4b05      	ldr	r3, [pc, #20]	; (8007710 <xTaskGetCurrentTaskHandle+0x1c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007700:	687b      	ldr	r3, [r7, #4]
	}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	20000770 	.word	0x20000770

08007714 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800771a:	4b0b      	ldr	r3, [pc, #44]	; (8007748 <xTaskGetSchedulerState+0x34>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007722:	2301      	movs	r3, #1
 8007724:	607b      	str	r3, [r7, #4]
 8007726:	e008      	b.n	800773a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007728:	4b08      	ldr	r3, [pc, #32]	; (800774c <xTaskGetSchedulerState+0x38>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d102      	bne.n	8007736 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007730:	2302      	movs	r3, #2
 8007732:	607b      	str	r3, [r7, #4]
 8007734:	e001      	b.n	800773a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007736:	2300      	movs	r3, #0
 8007738:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800773a:	687b      	ldr	r3, [r7, #4]
	}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	20000c50 	.word	0x20000c50
 800774c:	20000c6c 	.word	0x20000c6c

08007750 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d051      	beq.n	800780a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800776a:	4b2a      	ldr	r3, [pc, #168]	; (8007814 <xTaskPriorityInherit+0xc4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	429a      	cmp	r2, r3
 8007772:	d241      	bcs.n	80077f8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	2b00      	cmp	r3, #0
 800777a:	db06      	blt.n	800778a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800777c:	4b25      	ldr	r3, [pc, #148]	; (8007814 <xTaskPriorityInherit+0xc4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007782:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	6959      	ldr	r1, [r3, #20]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	4a1f      	ldr	r2, [pc, #124]	; (8007818 <xTaskPriorityInherit+0xc8>)
 800779c:	4413      	add	r3, r2
 800779e:	4299      	cmp	r1, r3
 80077a0:	d122      	bne.n	80077e8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	3304      	adds	r3, #4
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fd ff00 	bl	80055ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077ac:	4b19      	ldr	r3, [pc, #100]	; (8007814 <xTaskPriorityInherit+0xc4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ba:	4b18      	ldr	r3, [pc, #96]	; (800781c <xTaskPriorityInherit+0xcc>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d903      	bls.n	80077ca <xTaskPriorityInherit+0x7a>
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c6:	4a15      	ldr	r2, [pc, #84]	; (800781c <xTaskPriorityInherit+0xcc>)
 80077c8:	6013      	str	r3, [r2, #0]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ce:	4613      	mov	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	4413      	add	r3, r2
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	4a10      	ldr	r2, [pc, #64]	; (8007818 <xTaskPriorityInherit+0xc8>)
 80077d8:	441a      	add	r2, r3
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	3304      	adds	r3, #4
 80077de:	4619      	mov	r1, r3
 80077e0:	4610      	mov	r0, r2
 80077e2:	f7fd fe86 	bl	80054f2 <vListInsertEnd>
 80077e6:	e004      	b.n	80077f2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80077e8:	4b0a      	ldr	r3, [pc, #40]	; (8007814 <xTaskPriorityInherit+0xc4>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80077f2:	2301      	movs	r3, #1
 80077f4:	60fb      	str	r3, [r7, #12]
 80077f6:	e008      	b.n	800780a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077fc:	4b05      	ldr	r3, [pc, #20]	; (8007814 <xTaskPriorityInherit+0xc4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	429a      	cmp	r2, r3
 8007804:	d201      	bcs.n	800780a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007806:	2301      	movs	r3, #1
 8007808:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800780a:	68fb      	ldr	r3, [r7, #12]
	}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	20000770 	.word	0x20000770
 8007818:	20000774 	.word	0x20000774
 800781c:	20000c4c 	.word	0x20000c4c

08007820 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800782c:	2300      	movs	r3, #0
 800782e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d054      	beq.n	80078e0 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007836:	4b2d      	ldr	r3, [pc, #180]	; (80078ec <xTaskPriorityDisinherit+0xcc>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	429a      	cmp	r2, r3
 800783e:	d009      	beq.n	8007854 <xTaskPriorityDisinherit+0x34>
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	e7fe      	b.n	8007852 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007858:	2b00      	cmp	r3, #0
 800785a:	d109      	bne.n	8007870 <xTaskPriorityDisinherit+0x50>
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	60bb      	str	r3, [r7, #8]
 800786e:	e7fe      	b.n	800786e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007874:	1e5a      	subs	r2, r3, #1
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007882:	429a      	cmp	r2, r3
 8007884:	d02c      	beq.n	80078e0 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788a:	2b00      	cmp	r3, #0
 800788c:	d128      	bne.n	80078e0 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	3304      	adds	r3, #4
 8007892:	4618      	mov	r0, r3
 8007894:	f7fd fe8a 	bl	80055ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078b0:	4b0f      	ldr	r3, [pc, #60]	; (80078f0 <xTaskPriorityDisinherit+0xd0>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d903      	bls.n	80078c0 <xTaskPriorityDisinherit+0xa0>
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078bc:	4a0c      	ldr	r2, [pc, #48]	; (80078f0 <xTaskPriorityDisinherit+0xd0>)
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c4:	4613      	mov	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <xTaskPriorityDisinherit+0xd4>)
 80078ce:	441a      	add	r2, r3
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	3304      	adds	r3, #4
 80078d4:	4619      	mov	r1, r3
 80078d6:	4610      	mov	r0, r2
 80078d8:	f7fd fe0b 	bl	80054f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80078dc:	2301      	movs	r3, #1
 80078de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078e0:	697b      	ldr	r3, [r7, #20]
	}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000770 	.word	0x20000770
 80078f0:	20000c4c 	.word	0x20000c4c
 80078f4:	20000774 	.word	0x20000774

080078f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007906:	2301      	movs	r3, #1
 8007908:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d068      	beq.n	80079e2 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007914:	2b00      	cmp	r3, #0
 8007916:	d109      	bne.n	800792c <vTaskPriorityDisinheritAfterTimeout+0x34>
 8007918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	e7fe      	b.n	800792a <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007930:	683a      	ldr	r2, [r7, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d902      	bls.n	800793c <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	61fb      	str	r3, [r7, #28]
 800793a:	e002      	b.n	8007942 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007940:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	69fa      	ldr	r2, [r7, #28]
 8007948:	429a      	cmp	r2, r3
 800794a:	d04a      	beq.n	80079e2 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	429a      	cmp	r2, r3
 8007954:	d145      	bne.n	80079e2 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007956:	4b25      	ldr	r3, [pc, #148]	; (80079ec <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	429a      	cmp	r2, r3
 800795e:	d109      	bne.n	8007974 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8007960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	60bb      	str	r3, [r7, #8]
 8007972:	e7fe      	b.n	8007972 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	69fa      	ldr	r2, [r7, #28]
 800797e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	2b00      	cmp	r3, #0
 8007986:	db04      	blt.n	8007992 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	6959      	ldr	r1, [r3, #20]
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	4613      	mov	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4a13      	ldr	r2, [pc, #76]	; (80079f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80079a2:	4413      	add	r3, r2
 80079a4:	4299      	cmp	r1, r3
 80079a6:	d11c      	bne.n	80079e2 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	3304      	adds	r3, #4
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fd fdfd 	bl	80055ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b6:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d903      	bls.n	80079c6 <vTaskPriorityDisinheritAfterTimeout+0xce>
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	4a0c      	ldr	r2, [pc, #48]	; (80079f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4a07      	ldr	r2, [pc, #28]	; (80079f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80079d4:	441a      	add	r2, r3
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	3304      	adds	r3, #4
 80079da:	4619      	mov	r1, r3
 80079dc:	4610      	mov	r0, r2
 80079de:	f7fd fd88 	bl	80054f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079e2:	bf00      	nop
 80079e4:	3720      	adds	r7, #32
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20000770 	.word	0x20000770
 80079f0:	20000774 	.word	0x20000774
 80079f4:	20000c4c 	.word	0x20000c4c

080079f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80079fc:	4b07      	ldr	r3, [pc, #28]	; (8007a1c <pvTaskIncrementMutexHeldCount+0x24>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d004      	beq.n	8007a0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a04:	4b05      	ldr	r3, [pc, #20]	; (8007a1c <pvTaskIncrementMutexHeldCount+0x24>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a0a:	3201      	adds	r2, #1
 8007a0c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007a0e:	4b03      	ldr	r3, [pc, #12]	; (8007a1c <pvTaskIncrementMutexHeldCount+0x24>)
 8007a10:	681b      	ldr	r3, [r3, #0]
	}
 8007a12:	4618      	mov	r0, r3
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	20000770 	.word	0x20000770

08007a20 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a2a:	4b21      	ldr	r3, [pc, #132]	; (8007ab0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a30:	4b20      	ldr	r3, [pc, #128]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3304      	adds	r3, #4
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fd fdb8 	bl	80055ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a42:	d10a      	bne.n	8007a5a <prvAddCurrentTaskToDelayedList+0x3a>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d007      	beq.n	8007a5a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a4a:	4b1a      	ldr	r3, [pc, #104]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	4619      	mov	r1, r3
 8007a52:	4819      	ldr	r0, [pc, #100]	; (8007ab8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007a54:	f7fd fd4d 	bl	80054f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a58:	e026      	b.n	8007aa8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4413      	add	r3, r2
 8007a60:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a62:	4b14      	ldr	r3, [pc, #80]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a6a:	68ba      	ldr	r2, [r7, #8]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d209      	bcs.n	8007a86 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a72:	4b12      	ldr	r3, [pc, #72]	; (8007abc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	4b0f      	ldr	r3, [pc, #60]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f7fd fd5b 	bl	800553a <vListInsert>
}
 8007a84:	e010      	b.n	8007aa8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a86:	4b0e      	ldr	r3, [pc, #56]	; (8007ac0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	4619      	mov	r1, r3
 8007a92:	4610      	mov	r0, r2
 8007a94:	f7fd fd51 	bl	800553a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a98:	4b0a      	ldr	r3, [pc, #40]	; (8007ac4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d202      	bcs.n	8007aa8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007aa2:	4a08      	ldr	r2, [pc, #32]	; (8007ac4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	6013      	str	r3, [r2, #0]
}
 8007aa8:	bf00      	nop
 8007aaa:	3710      	adds	r7, #16
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	20000c48 	.word	0x20000c48
 8007ab4:	20000770 	.word	0x20000770
 8007ab8:	20000c30 	.word	0x20000c30
 8007abc:	20000c00 	.word	0x20000c00
 8007ac0:	20000bfc 	.word	0x20000bfc
 8007ac4:	20000c64 	.word	0x20000c64

08007ac8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b08a      	sub	sp, #40	; 0x28
 8007acc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ad2:	f000 faff 	bl	80080d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007ad6:	4b1c      	ldr	r3, [pc, #112]	; (8007b48 <xTimerCreateTimerTask+0x80>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d021      	beq.n	8007b22 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ae6:	1d3a      	adds	r2, r7, #4
 8007ae8:	f107 0108 	add.w	r1, r7, #8
 8007aec:	f107 030c 	add.w	r3, r7, #12
 8007af0:	4618      	mov	r0, r3
 8007af2:	f7fd fcb7 	bl	8005464 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	9202      	str	r2, [sp, #8]
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	2302      	movs	r3, #2
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	2300      	movs	r3, #0
 8007b06:	460a      	mov	r2, r1
 8007b08:	4910      	ldr	r1, [pc, #64]	; (8007b4c <xTimerCreateTimerTask+0x84>)
 8007b0a:	4811      	ldr	r0, [pc, #68]	; (8007b50 <xTimerCreateTimerTask+0x88>)
 8007b0c:	f7fe fe1a 	bl	8006744 <xTaskCreateStatic>
 8007b10:	4602      	mov	r2, r0
 8007b12:	4b10      	ldr	r3, [pc, #64]	; (8007b54 <xTimerCreateTimerTask+0x8c>)
 8007b14:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b16:	4b0f      	ldr	r3, [pc, #60]	; (8007b54 <xTimerCreateTimerTask+0x8c>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d001      	beq.n	8007b22 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d109      	bne.n	8007b3c <xTimerCreateTimerTask+0x74>
 8007b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2c:	f383 8811 	msr	BASEPRI, r3
 8007b30:	f3bf 8f6f 	isb	sy
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	613b      	str	r3, [r7, #16]
 8007b3a:	e7fe      	b.n	8007b3a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007b3c:	697b      	ldr	r3, [r7, #20]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000ca8 	.word	0x20000ca8
 8007b4c:	08017c50 	.word	0x08017c50
 8007b50:	08007c89 	.word	0x08007c89
 8007b54:	20000cac 	.word	0x20000cac

08007b58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08a      	sub	sp, #40	; 0x28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
 8007b64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b66:	2300      	movs	r3, #0
 8007b68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d109      	bne.n	8007b84 <xTimerGenericCommand+0x2c>
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	623b      	str	r3, [r7, #32]
 8007b82:	e7fe      	b.n	8007b82 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b84:	4b19      	ldr	r3, [pc, #100]	; (8007bec <xTimerGenericCommand+0x94>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d02a      	beq.n	8007be2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2b05      	cmp	r3, #5
 8007b9c:	dc18      	bgt.n	8007bd0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b9e:	f7ff fdb9 	bl	8007714 <xTaskGetSchedulerState>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d109      	bne.n	8007bbc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ba8:	4b10      	ldr	r3, [pc, #64]	; (8007bec <xTimerGenericCommand+0x94>)
 8007baa:	6818      	ldr	r0, [r3, #0]
 8007bac:	f107 0110 	add.w	r1, r7, #16
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb4:	f7fd ff7c 	bl	8005ab0 <xQueueGenericSend>
 8007bb8:	6278      	str	r0, [r7, #36]	; 0x24
 8007bba:	e012      	b.n	8007be2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007bbc:	4b0b      	ldr	r3, [pc, #44]	; (8007bec <xTimerGenericCommand+0x94>)
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	f107 0110 	add.w	r1, r7, #16
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f7fd ff72 	bl	8005ab0 <xQueueGenericSend>
 8007bcc:	6278      	str	r0, [r7, #36]	; 0x24
 8007bce:	e008      	b.n	8007be2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007bd0:	4b06      	ldr	r3, [pc, #24]	; (8007bec <xTimerGenericCommand+0x94>)
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	f107 0110 	add.w	r1, r7, #16
 8007bd8:	2300      	movs	r3, #0
 8007bda:	683a      	ldr	r2, [r7, #0]
 8007bdc:	f7fe f862 	bl	8005ca4 <xQueueGenericSendFromISR>
 8007be0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3728      	adds	r7, #40	; 0x28
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20000ca8 	.word	0x20000ca8

08007bf0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b088      	sub	sp, #32
 8007bf4:	af02      	add	r7, sp, #8
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bfa:	4b22      	ldr	r3, [pc, #136]	; (8007c84 <prvProcessExpiredTimer+0x94>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	3304      	adds	r3, #4
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fd fccf 	bl	80055ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d021      	beq.n	8007c60 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	699a      	ldr	r2, [r3, #24]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	18d1      	adds	r1, r2, r3
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	683a      	ldr	r2, [r7, #0]
 8007c28:	6978      	ldr	r0, [r7, #20]
 8007c2a:	f000 f8d1 	bl	8007dd0 <prvInsertTimerInActiveList>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d01e      	beq.n	8007c72 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c34:	2300      	movs	r3, #0
 8007c36:	9300      	str	r3, [sp, #0]
 8007c38:	2300      	movs	r3, #0
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	6978      	ldr	r0, [r7, #20]
 8007c40:	f7ff ff8a 	bl	8007b58 <xTimerGenericCommand>
 8007c44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d112      	bne.n	8007c72 <prvProcessExpiredTimer+0x82>
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	e7fe      	b.n	8007c5e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c66:	f023 0301 	bic.w	r3, r3, #1
 8007c6a:	b2da      	uxtb	r2, r3
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	6978      	ldr	r0, [r7, #20]
 8007c78:	4798      	blx	r3
}
 8007c7a:	bf00      	nop
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20000ca0 	.word	0x20000ca0

08007c88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c90:	f107 0308 	add.w	r3, r7, #8
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 f857 	bl	8007d48 <prvGetNextExpireTime>
 8007c9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 f803 	bl	8007cac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ca6:	f000 f8d5 	bl	8007e54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007caa:	e7f1      	b.n	8007c90 <prvTimerTask+0x8>

08007cac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007cb6:	f7ff f91d 	bl	8006ef4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cba:	f107 0308 	add.w	r3, r7, #8
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 f866 	bl	8007d90 <prvSampleTimeNow>
 8007cc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d130      	bne.n	8007d2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <prvProcessTimerOrBlockTask+0x3c>
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d806      	bhi.n	8007ce8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007cda:	f7ff f919 	bl	8006f10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007cde:	68f9      	ldr	r1, [r7, #12]
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7ff ff85 	bl	8007bf0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007ce6:	e024      	b.n	8007d32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d008      	beq.n	8007d00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007cee:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <prvProcessTimerOrBlockTask+0x90>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <prvProcessTimerOrBlockTask+0x50>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e000      	b.n	8007cfe <prvProcessTimerOrBlockTask+0x52>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d00:	4b0f      	ldr	r3, [pc, #60]	; (8007d40 <prvProcessTimerOrBlockTask+0x94>)
 8007d02:	6818      	ldr	r0, [r3, #0]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	f7fe fce5 	bl	80066dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d12:	f7ff f8fd 	bl	8006f10 <xTaskResumeAll>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10a      	bne.n	8007d32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d1c:	4b09      	ldr	r3, [pc, #36]	; (8007d44 <prvProcessTimerOrBlockTask+0x98>)
 8007d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	f3bf 8f6f 	isb	sy
}
 8007d2c:	e001      	b.n	8007d32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d2e:	f7ff f8ef 	bl	8006f10 <xTaskResumeAll>
}
 8007d32:	bf00      	nop
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	20000ca4 	.word	0x20000ca4
 8007d40:	20000ca8 	.word	0x20000ca8
 8007d44:	e000ed04 	.word	0xe000ed04

08007d48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d50:	4b0e      	ldr	r3, [pc, #56]	; (8007d8c <prvGetNextExpireTime+0x44>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <prvGetNextExpireTime+0x16>
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	e000      	b.n	8007d60 <prvGetNextExpireTime+0x18>
 8007d5e:	2200      	movs	r2, #0
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d105      	bne.n	8007d78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d6c:	4b07      	ldr	r3, [pc, #28]	; (8007d8c <prvGetNextExpireTime+0x44>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	60fb      	str	r3, [r7, #12]
 8007d76:	e001      	b.n	8007d7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	20000ca0 	.word	0x20000ca0

08007d90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d98:	f7ff f956 	bl	8007048 <xTaskGetTickCount>
 8007d9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d9e:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <prvSampleTimeNow+0x3c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d205      	bcs.n	8007db4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007da8:	f000 f930 	bl	800800c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2201      	movs	r2, #1
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	e002      	b.n	8007dba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007dba:	4a04      	ldr	r2, [pc, #16]	; (8007dcc <prvSampleTimeNow+0x3c>)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000cb0 	.word	0x20000cb0

08007dd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007dde:	2300      	movs	r3, #0
 8007de0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d812      	bhi.n	8007e1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	1ad2      	subs	r2, r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d302      	bcc.n	8007e0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e04:	2301      	movs	r3, #1
 8007e06:	617b      	str	r3, [r7, #20]
 8007e08:	e01b      	b.n	8007e42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e0a:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <prvInsertTimerInActiveList+0x7c>)
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3304      	adds	r3, #4
 8007e12:	4619      	mov	r1, r3
 8007e14:	4610      	mov	r0, r2
 8007e16:	f7fd fb90 	bl	800553a <vListInsert>
 8007e1a:	e012      	b.n	8007e42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d206      	bcs.n	8007e32 <prvInsertTimerInActiveList+0x62>
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d302      	bcc.n	8007e32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	e007      	b.n	8007e42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e32:	4b07      	ldr	r3, [pc, #28]	; (8007e50 <prvInsertTimerInActiveList+0x80>)
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	4619      	mov	r1, r3
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	f7fd fb7c 	bl	800553a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e42:	697b      	ldr	r3, [r7, #20]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000ca4 	.word	0x20000ca4
 8007e50:	20000ca0 	.word	0x20000ca0

08007e54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08e      	sub	sp, #56	; 0x38
 8007e58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e5a:	e0c6      	b.n	8007fea <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	da17      	bge.n	8007e92 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007e62:	1d3b      	adds	r3, r7, #4
 8007e64:	3304      	adds	r3, #4
 8007e66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d109      	bne.n	8007e82 <prvProcessReceivedCommands+0x2e>
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	61fb      	str	r3, [r7, #28]
 8007e80:	e7fe      	b.n	8007e80 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e88:	6850      	ldr	r0, [r2, #4]
 8007e8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e8c:	6892      	ldr	r2, [r2, #8]
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f2c0 80a7 	blt.w	8007fe8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d004      	beq.n	8007eb0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fd fb7e 	bl	80055ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007eb0:	463b      	mov	r3, r7
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff ff6c 	bl	8007d90 <prvSampleTimeNow>
 8007eb8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2b09      	cmp	r3, #9
 8007ebe:	f200 8094 	bhi.w	8007fea <prvProcessReceivedCommands+0x196>
 8007ec2:	a201      	add	r2, pc, #4	; (adr r2, 8007ec8 <prvProcessReceivedCommands+0x74>)
 8007ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec8:	08007ef1 	.word	0x08007ef1
 8007ecc:	08007ef1 	.word	0x08007ef1
 8007ed0:	08007ef1 	.word	0x08007ef1
 8007ed4:	08007f63 	.word	0x08007f63
 8007ed8:	08007f77 	.word	0x08007f77
 8007edc:	08007fbf 	.word	0x08007fbf
 8007ee0:	08007ef1 	.word	0x08007ef1
 8007ee4:	08007ef1 	.word	0x08007ef1
 8007ee8:	08007f63 	.word	0x08007f63
 8007eec:	08007f77 	.word	0x08007f77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ef6:	f043 0301 	orr.w	r3, r3, #1
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	18d1      	adds	r1, r2, r3
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f10:	f7ff ff5e 	bl	8007dd0 <prvInsertTimerInActiveList>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d067      	beq.n	8007fea <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f20:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d05c      	beq.n	8007fea <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	441a      	add	r2, r3
 8007f38:	2300      	movs	r3, #0
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	2100      	movs	r1, #0
 8007f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f42:	f7ff fe09 	bl	8007b58 <xTimerGenericCommand>
 8007f46:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d14d      	bne.n	8007fea <prvProcessReceivedCommands+0x196>
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	61bb      	str	r3, [r7, #24]
 8007f60:	e7fe      	b.n	8007f60 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f68:	f023 0301 	bic.w	r3, r3, #1
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007f74:	e039      	b.n	8007fea <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f7c:	f043 0301 	orr.w	r3, r3, #1
 8007f80:	b2da      	uxtb	r2, r3
 8007f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d109      	bne.n	8007faa <prvProcessReceivedCommands+0x156>
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	e7fe      	b.n	8007fa8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	699a      	ldr	r2, [r3, #24]
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	18d1      	adds	r1, r2, r3
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fb8:	f7ff ff0a 	bl	8007dd0 <prvInsertTimerInActiveList>
					break;
 8007fbc:	e015      	b.n	8007fea <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d103      	bne.n	8007fd4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007fcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fce:	f000 fbc1 	bl	8008754 <vPortFree>
 8007fd2:	e00a      	b.n	8007fea <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fda:	f023 0301 	bic.w	r3, r3, #1
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007fe6:	e000      	b.n	8007fea <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007fe8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fea:	4b07      	ldr	r3, [pc, #28]	; (8008008 <prvProcessReceivedCommands+0x1b4>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	1d39      	adds	r1, r7, #4
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fd ff74 	bl	8005ee0 <xQueueReceive>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f47f af2e 	bne.w	8007e5c <prvProcessReceivedCommands+0x8>
	}
}
 8008000:	bf00      	nop
 8008002:	3730      	adds	r7, #48	; 0x30
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20000ca8 	.word	0x20000ca8

0800800c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b088      	sub	sp, #32
 8008010:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008012:	e047      	b.n	80080a4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008014:	4b2d      	ldr	r3, [pc, #180]	; (80080cc <prvSwitchTimerLists+0xc0>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800801e:	4b2b      	ldr	r3, [pc, #172]	; (80080cc <prvSwitchTimerLists+0xc0>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3304      	adds	r3, #4
 800802c:	4618      	mov	r0, r3
 800802e:	f7fd fabd 	bl	80055ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d02d      	beq.n	80080a4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4413      	add	r3, r2
 8008050:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	429a      	cmp	r2, r3
 8008058:	d90e      	bls.n	8008078 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008066:	4b19      	ldr	r3, [pc, #100]	; (80080cc <prvSwitchTimerLists+0xc0>)
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3304      	adds	r3, #4
 800806e:	4619      	mov	r1, r3
 8008070:	4610      	mov	r0, r2
 8008072:	f7fd fa62 	bl	800553a <vListInsert>
 8008076:	e015      	b.n	80080a4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008078:	2300      	movs	r3, #0
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	2300      	movs	r3, #0
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	2100      	movs	r1, #0
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff fd68 	bl	8007b58 <xTimerGenericCommand>
 8008088:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d109      	bne.n	80080a4 <prvSwitchTimerLists+0x98>
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	603b      	str	r3, [r7, #0]
 80080a2:	e7fe      	b.n	80080a2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080a4:	4b09      	ldr	r3, [pc, #36]	; (80080cc <prvSwitchTimerLists+0xc0>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1b2      	bne.n	8008014 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80080ae:	4b07      	ldr	r3, [pc, #28]	; (80080cc <prvSwitchTimerLists+0xc0>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80080b4:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <prvSwitchTimerLists+0xc4>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a04      	ldr	r2, [pc, #16]	; (80080cc <prvSwitchTimerLists+0xc0>)
 80080ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80080bc:	4a04      	ldr	r2, [pc, #16]	; (80080d0 <prvSwitchTimerLists+0xc4>)
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	6013      	str	r3, [r2, #0]
}
 80080c2:	bf00      	nop
 80080c4:	3718      	adds	r7, #24
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20000ca0 	.word	0x20000ca0
 80080d0:	20000ca4 	.word	0x20000ca4

080080d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80080da:	f000 f95f 	bl	800839c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80080de:	4b15      	ldr	r3, [pc, #84]	; (8008134 <prvCheckForValidListAndQueue+0x60>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d120      	bne.n	8008128 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80080e6:	4814      	ldr	r0, [pc, #80]	; (8008138 <prvCheckForValidListAndQueue+0x64>)
 80080e8:	f7fd f9d6 	bl	8005498 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80080ec:	4813      	ldr	r0, [pc, #76]	; (800813c <prvCheckForValidListAndQueue+0x68>)
 80080ee:	f7fd f9d3 	bl	8005498 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80080f2:	4b13      	ldr	r3, [pc, #76]	; (8008140 <prvCheckForValidListAndQueue+0x6c>)
 80080f4:	4a10      	ldr	r2, [pc, #64]	; (8008138 <prvCheckForValidListAndQueue+0x64>)
 80080f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80080f8:	4b12      	ldr	r3, [pc, #72]	; (8008144 <prvCheckForValidListAndQueue+0x70>)
 80080fa:	4a10      	ldr	r2, [pc, #64]	; (800813c <prvCheckForValidListAndQueue+0x68>)
 80080fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80080fe:	2300      	movs	r3, #0
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4b11      	ldr	r3, [pc, #68]	; (8008148 <prvCheckForValidListAndQueue+0x74>)
 8008104:	4a11      	ldr	r2, [pc, #68]	; (800814c <prvCheckForValidListAndQueue+0x78>)
 8008106:	2110      	movs	r1, #16
 8008108:	200a      	movs	r0, #10
 800810a:	f7fd fae1 	bl	80056d0 <xQueueGenericCreateStatic>
 800810e:	4602      	mov	r2, r0
 8008110:	4b08      	ldr	r3, [pc, #32]	; (8008134 <prvCheckForValidListAndQueue+0x60>)
 8008112:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008114:	4b07      	ldr	r3, [pc, #28]	; (8008134 <prvCheckForValidListAndQueue+0x60>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d005      	beq.n	8008128 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800811c:	4b05      	ldr	r3, [pc, #20]	; (8008134 <prvCheckForValidListAndQueue+0x60>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	490b      	ldr	r1, [pc, #44]	; (8008150 <prvCheckForValidListAndQueue+0x7c>)
 8008122:	4618      	mov	r0, r3
 8008124:	f7fe fa88 	bl	8006638 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008128:	f000 f966 	bl	80083f8 <vPortExitCritical>
}
 800812c:	bf00      	nop
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20000ca8 	.word	0x20000ca8
 8008138:	20000c78 	.word	0x20000c78
 800813c:	20000c8c 	.word	0x20000c8c
 8008140:	20000ca0 	.word	0x20000ca0
 8008144:	20000ca4 	.word	0x20000ca4
 8008148:	20000d54 	.word	0x20000d54
 800814c:	20000cb4 	.word	0x20000cb4
 8008150:	08017c58 	.word	0x08017c58

08008154 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3b04      	subs	r3, #4
 8008164:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800816c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	3b04      	subs	r3, #4
 8008172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f023 0201 	bic.w	r2, r3, #1
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3b04      	subs	r3, #4
 8008182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008184:	4a0c      	ldr	r2, [pc, #48]	; (80081b8 <pxPortInitialiseStack+0x64>)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3b14      	subs	r3, #20
 800818e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	3b04      	subs	r3, #4
 800819a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f06f 0202 	mvn.w	r2, #2
 80081a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3b20      	subs	r3, #32
 80081a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081aa:	68fb      	ldr	r3, [r7, #12]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	080081bd 	.word	0x080081bd

080081bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80081c2:	2300      	movs	r3, #0
 80081c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80081c6:	4b11      	ldr	r3, [pc, #68]	; (800820c <prvTaskExitError+0x50>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ce:	d009      	beq.n	80081e4 <prvTaskExitError+0x28>
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	e7fe      	b.n	80081e2 <prvTaskExitError+0x26>
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081f6:	bf00      	nop
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0fc      	beq.n	80081f8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081fe:	bf00      	nop
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	2000000c 	.word	0x2000000c

08008210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008210:	4b07      	ldr	r3, [pc, #28]	; (8008230 <pxCurrentTCBConst2>)
 8008212:	6819      	ldr	r1, [r3, #0]
 8008214:	6808      	ldr	r0, [r1, #0]
 8008216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821a:	f380 8809 	msr	PSP, r0
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f04f 0000 	mov.w	r0, #0
 8008226:	f380 8811 	msr	BASEPRI, r0
 800822a:	4770      	bx	lr
 800822c:	f3af 8000 	nop.w

08008230 <pxCurrentTCBConst2>:
 8008230:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop

08008238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008238:	4808      	ldr	r0, [pc, #32]	; (800825c <prvPortStartFirstTask+0x24>)
 800823a:	6800      	ldr	r0, [r0, #0]
 800823c:	6800      	ldr	r0, [r0, #0]
 800823e:	f380 8808 	msr	MSP, r0
 8008242:	f04f 0000 	mov.w	r0, #0
 8008246:	f380 8814 	msr	CONTROL, r0
 800824a:	b662      	cpsie	i
 800824c:	b661      	cpsie	f
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	f3bf 8f6f 	isb	sy
 8008256:	df00      	svc	0
 8008258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800825a:	bf00      	nop
 800825c:	e000ed08 	.word	0xe000ed08

08008260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008266:	4b44      	ldr	r3, [pc, #272]	; (8008378 <xPortStartScheduler+0x118>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a44      	ldr	r2, [pc, #272]	; (800837c <xPortStartScheduler+0x11c>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d109      	bne.n	8008284 <xPortStartScheduler+0x24>
 8008270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008274:	f383 8811 	msr	BASEPRI, r3
 8008278:	f3bf 8f6f 	isb	sy
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	e7fe      	b.n	8008282 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008284:	4b3c      	ldr	r3, [pc, #240]	; (8008378 <xPortStartScheduler+0x118>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a3d      	ldr	r2, [pc, #244]	; (8008380 <xPortStartScheduler+0x120>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d109      	bne.n	80082a2 <xPortStartScheduler+0x42>
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	60fb      	str	r3, [r7, #12]
 80082a0:	e7fe      	b.n	80082a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082a2:	4b38      	ldr	r3, [pc, #224]	; (8008384 <xPortStartScheduler+0x124>)
 80082a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	22ff      	movs	r2, #255	; 0xff
 80082b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082bc:	78fb      	ldrb	r3, [r7, #3]
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	4b30      	ldr	r3, [pc, #192]	; (8008388 <xPortStartScheduler+0x128>)
 80082c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082ca:	4b30      	ldr	r3, [pc, #192]	; (800838c <xPortStartScheduler+0x12c>)
 80082cc:	2207      	movs	r2, #7
 80082ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082d0:	e009      	b.n	80082e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80082d2:	4b2e      	ldr	r3, [pc, #184]	; (800838c <xPortStartScheduler+0x12c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	4a2c      	ldr	r2, [pc, #176]	; (800838c <xPortStartScheduler+0x12c>)
 80082da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082e6:	78fb      	ldrb	r3, [r7, #3]
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ee:	2b80      	cmp	r3, #128	; 0x80
 80082f0:	d0ef      	beq.n	80082d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082f2:	4b26      	ldr	r3, [pc, #152]	; (800838c <xPortStartScheduler+0x12c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f1c3 0307 	rsb	r3, r3, #7
 80082fa:	2b04      	cmp	r3, #4
 80082fc:	d009      	beq.n	8008312 <xPortStartScheduler+0xb2>
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	60bb      	str	r3, [r7, #8]
 8008310:	e7fe      	b.n	8008310 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008312:	4b1e      	ldr	r3, [pc, #120]	; (800838c <xPortStartScheduler+0x12c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	021b      	lsls	r3, r3, #8
 8008318:	4a1c      	ldr	r2, [pc, #112]	; (800838c <xPortStartScheduler+0x12c>)
 800831a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800831c:	4b1b      	ldr	r3, [pc, #108]	; (800838c <xPortStartScheduler+0x12c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008324:	4a19      	ldr	r2, [pc, #100]	; (800838c <xPortStartScheduler+0x12c>)
 8008326:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	b2da      	uxtb	r2, r3
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008330:	4b17      	ldr	r3, [pc, #92]	; (8008390 <xPortStartScheduler+0x130>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a16      	ldr	r2, [pc, #88]	; (8008390 <xPortStartScheduler+0x130>)
 8008336:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800833a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800833c:	4b14      	ldr	r3, [pc, #80]	; (8008390 <xPortStartScheduler+0x130>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a13      	ldr	r2, [pc, #76]	; (8008390 <xPortStartScheduler+0x130>)
 8008342:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008346:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008348:	f000 f8d6 	bl	80084f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800834c:	4b11      	ldr	r3, [pc, #68]	; (8008394 <xPortStartScheduler+0x134>)
 800834e:	2200      	movs	r2, #0
 8008350:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008352:	f000 f8f5 	bl	8008540 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008356:	4b10      	ldr	r3, [pc, #64]	; (8008398 <xPortStartScheduler+0x138>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a0f      	ldr	r2, [pc, #60]	; (8008398 <xPortStartScheduler+0x138>)
 800835c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008360:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008362:	f7ff ff69 	bl	8008238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008366:	f7fe ff49 	bl	80071fc <vTaskSwitchContext>
	prvTaskExitError();
 800836a:	f7ff ff27 	bl	80081bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3718      	adds	r7, #24
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	e000ed00 	.word	0xe000ed00
 800837c:	410fc271 	.word	0x410fc271
 8008380:	410fc270 	.word	0x410fc270
 8008384:	e000e400 	.word	0xe000e400
 8008388:	20000da4 	.word	0x20000da4
 800838c:	20000da8 	.word	0x20000da8
 8008390:	e000ed20 	.word	0xe000ed20
 8008394:	2000000c 	.word	0x2000000c
 8008398:	e000ef34 	.word	0xe000ef34

0800839c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083b4:	4b0e      	ldr	r3, [pc, #56]	; (80083f0 <vPortEnterCritical+0x54>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3301      	adds	r3, #1
 80083ba:	4a0d      	ldr	r2, [pc, #52]	; (80083f0 <vPortEnterCritical+0x54>)
 80083bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083be:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <vPortEnterCritical+0x54>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d10e      	bne.n	80083e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083c6:	4b0b      	ldr	r3, [pc, #44]	; (80083f4 <vPortEnterCritical+0x58>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d009      	beq.n	80083e4 <vPortEnterCritical+0x48>
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	603b      	str	r3, [r7, #0]
 80083e2:	e7fe      	b.n	80083e2 <vPortEnterCritical+0x46>
	}
}
 80083e4:	bf00      	nop
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	2000000c 	.word	0x2000000c
 80083f4:	e000ed04 	.word	0xe000ed04

080083f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083fe:	4b11      	ldr	r3, [pc, #68]	; (8008444 <vPortExitCritical+0x4c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d109      	bne.n	800841a <vPortExitCritical+0x22>
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	607b      	str	r3, [r7, #4]
 8008418:	e7fe      	b.n	8008418 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800841a:	4b0a      	ldr	r3, [pc, #40]	; (8008444 <vPortExitCritical+0x4c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	3b01      	subs	r3, #1
 8008420:	4a08      	ldr	r2, [pc, #32]	; (8008444 <vPortExitCritical+0x4c>)
 8008422:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008424:	4b07      	ldr	r3, [pc, #28]	; (8008444 <vPortExitCritical+0x4c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d104      	bne.n	8008436 <vPortExitCritical+0x3e>
 800842c:	2300      	movs	r3, #0
 800842e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008436:	bf00      	nop
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	2000000c 	.word	0x2000000c
	...

08008450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008450:	f3ef 8009 	mrs	r0, PSP
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	4b15      	ldr	r3, [pc, #84]	; (80084b0 <pxCurrentTCBConst>)
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	f01e 0f10 	tst.w	lr, #16
 8008460:	bf08      	it	eq
 8008462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846a:	6010      	str	r0, [r2, #0]
 800846c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008474:	f380 8811 	msr	BASEPRI, r0
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f7fe febc 	bl	80071fc <vTaskSwitchContext>
 8008484:	f04f 0000 	mov.w	r0, #0
 8008488:	f380 8811 	msr	BASEPRI, r0
 800848c:	bc09      	pop	{r0, r3}
 800848e:	6819      	ldr	r1, [r3, #0]
 8008490:	6808      	ldr	r0, [r1, #0]
 8008492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008496:	f01e 0f10 	tst.w	lr, #16
 800849a:	bf08      	it	eq
 800849c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084a0:	f380 8809 	msr	PSP, r0
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	f3af 8000 	nop.w

080084b0 <pxCurrentTCBConst>:
 80084b0:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop

080084b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
	__asm volatile
 80084be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c2:	f383 8811 	msr	BASEPRI, r3
 80084c6:	f3bf 8f6f 	isb	sy
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084d0:	f7fe fddc 	bl	800708c <xTaskIncrementTick>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084da:	4b06      	ldr	r3, [pc, #24]	; (80084f4 <SysTick_Handler+0x3c>)
 80084dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	2300      	movs	r3, #0
 80084e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80084ec:	bf00      	nop
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	e000ed04 	.word	0xe000ed04

080084f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084f8:	b480      	push	{r7}
 80084fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084fc:	4b0b      	ldr	r3, [pc, #44]	; (800852c <vPortSetupTimerInterrupt+0x34>)
 80084fe:	2200      	movs	r2, #0
 8008500:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008502:	4b0b      	ldr	r3, [pc, #44]	; (8008530 <vPortSetupTimerInterrupt+0x38>)
 8008504:	2200      	movs	r2, #0
 8008506:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008508:	4b0a      	ldr	r3, [pc, #40]	; (8008534 <vPortSetupTimerInterrupt+0x3c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a0a      	ldr	r2, [pc, #40]	; (8008538 <vPortSetupTimerInterrupt+0x40>)
 800850e:	fba2 2303 	umull	r2, r3, r2, r3
 8008512:	099b      	lsrs	r3, r3, #6
 8008514:	4a09      	ldr	r2, [pc, #36]	; (800853c <vPortSetupTimerInterrupt+0x44>)
 8008516:	3b01      	subs	r3, #1
 8008518:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800851a:	4b04      	ldr	r3, [pc, #16]	; (800852c <vPortSetupTimerInterrupt+0x34>)
 800851c:	2207      	movs	r2, #7
 800851e:	601a      	str	r2, [r3, #0]
}
 8008520:	bf00      	nop
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	e000e010 	.word	0xe000e010
 8008530:	e000e018 	.word	0xe000e018
 8008534:	20000000 	.word	0x20000000
 8008538:	10624dd3 	.word	0x10624dd3
 800853c:	e000e014 	.word	0xe000e014

08008540 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008540:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008550 <vPortEnableVFP+0x10>
 8008544:	6801      	ldr	r1, [r0, #0]
 8008546:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800854a:	6001      	str	r1, [r0, #0]
 800854c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800854e:	bf00      	nop
 8008550:	e000ed88 	.word	0xe000ed88

08008554 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800855a:	f3ef 8305 	mrs	r3, IPSR
 800855e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b0f      	cmp	r3, #15
 8008564:	d913      	bls.n	800858e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008566:	4a16      	ldr	r2, [pc, #88]	; (80085c0 <vPortValidateInterruptPriority+0x6c>)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	4413      	add	r3, r2
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008570:	4b14      	ldr	r3, [pc, #80]	; (80085c4 <vPortValidateInterruptPriority+0x70>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	7afa      	ldrb	r2, [r7, #11]
 8008576:	429a      	cmp	r2, r3
 8008578:	d209      	bcs.n	800858e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	607b      	str	r3, [r7, #4]
 800858c:	e7fe      	b.n	800858c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800858e:	4b0e      	ldr	r3, [pc, #56]	; (80085c8 <vPortValidateInterruptPriority+0x74>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008596:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <vPortValidateInterruptPriority+0x78>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	429a      	cmp	r2, r3
 800859c:	d909      	bls.n	80085b2 <vPortValidateInterruptPriority+0x5e>
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	e7fe      	b.n	80085b0 <vPortValidateInterruptPriority+0x5c>
	}
 80085b2:	bf00      	nop
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	e000e3f0 	.word	0xe000e3f0
 80085c4:	20000da4 	.word	0x20000da4
 80085c8:	e000ed0c 	.word	0xe000ed0c
 80085cc:	20000da8 	.word	0x20000da8

080085d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08a      	sub	sp, #40	; 0x28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80085d8:	2300      	movs	r3, #0
 80085da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085dc:	f7fe fc8a 	bl	8006ef4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085e0:	4b57      	ldr	r3, [pc, #348]	; (8008740 <pvPortMalloc+0x170>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085e8:	f000 f90c 	bl	8008804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085ec:	4b55      	ldr	r3, [pc, #340]	; (8008744 <pvPortMalloc+0x174>)
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4013      	ands	r3, r2
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f040 808c 	bne.w	8008712 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01c      	beq.n	800863a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008600:	2208      	movs	r2, #8
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4413      	add	r3, r2
 8008606:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f003 0307 	and.w	r3, r3, #7
 800860e:	2b00      	cmp	r3, #0
 8008610:	d013      	beq.n	800863a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f023 0307 	bic.w	r3, r3, #7
 8008618:	3308      	adds	r3, #8
 800861a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f003 0307 	and.w	r3, r3, #7
 8008622:	2b00      	cmp	r3, #0
 8008624:	d009      	beq.n	800863a <pvPortMalloc+0x6a>
 8008626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	617b      	str	r3, [r7, #20]
 8008638:	e7fe      	b.n	8008638 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d068      	beq.n	8008712 <pvPortMalloc+0x142>
 8008640:	4b41      	ldr	r3, [pc, #260]	; (8008748 <pvPortMalloc+0x178>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	429a      	cmp	r2, r3
 8008648:	d863      	bhi.n	8008712 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800864a:	4b40      	ldr	r3, [pc, #256]	; (800874c <pvPortMalloc+0x17c>)
 800864c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800864e:	4b3f      	ldr	r3, [pc, #252]	; (800874c <pvPortMalloc+0x17c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008654:	e004      	b.n	8008660 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	429a      	cmp	r2, r3
 8008668:	d903      	bls.n	8008672 <pvPortMalloc+0xa2>
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1f1      	bne.n	8008656 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008672:	4b33      	ldr	r3, [pc, #204]	; (8008740 <pvPortMalloc+0x170>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008678:	429a      	cmp	r2, r3
 800867a:	d04a      	beq.n	8008712 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800867c:	6a3b      	ldr	r3, [r7, #32]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2208      	movs	r2, #8
 8008682:	4413      	add	r3, r2
 8008684:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800868e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008690:	685a      	ldr	r2, [r3, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	1ad2      	subs	r2, r2, r3
 8008696:	2308      	movs	r3, #8
 8008698:	005b      	lsls	r3, r3, #1
 800869a:	429a      	cmp	r2, r3
 800869c:	d91e      	bls.n	80086dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800869e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4413      	add	r3, r2
 80086a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	f003 0307 	and.w	r3, r3, #7
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d009      	beq.n	80086c4 <pvPortMalloc+0xf4>
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	613b      	str	r3, [r7, #16]
 80086c2:	e7fe      	b.n	80086c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	1ad2      	subs	r2, r2, r3
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086d6:	69b8      	ldr	r0, [r7, #24]
 80086d8:	f000 f8f6 	bl	80088c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086dc:	4b1a      	ldr	r3, [pc, #104]	; (8008748 <pvPortMalloc+0x178>)
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	4a18      	ldr	r2, [pc, #96]	; (8008748 <pvPortMalloc+0x178>)
 80086e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086ea:	4b17      	ldr	r3, [pc, #92]	; (8008748 <pvPortMalloc+0x178>)
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	4b18      	ldr	r3, [pc, #96]	; (8008750 <pvPortMalloc+0x180>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d203      	bcs.n	80086fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086f6:	4b14      	ldr	r3, [pc, #80]	; (8008748 <pvPortMalloc+0x178>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a15      	ldr	r2, [pc, #84]	; (8008750 <pvPortMalloc+0x180>)
 80086fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	4b10      	ldr	r3, [pc, #64]	; (8008744 <pvPortMalloc+0x174>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	431a      	orrs	r2, r3
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008712:	f7fe fbfd 	bl	8006f10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	f003 0307 	and.w	r3, r3, #7
 800871c:	2b00      	cmp	r3, #0
 800871e:	d009      	beq.n	8008734 <pvPortMalloc+0x164>
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	e7fe      	b.n	8008732 <pvPortMalloc+0x162>
	return pvReturn;
 8008734:	69fb      	ldr	r3, [r7, #28]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3728      	adds	r7, #40	; 0x28
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	2000fdb4 	.word	0x2000fdb4
 8008744:	2000fdc0 	.word	0x2000fdc0
 8008748:	2000fdb8 	.word	0x2000fdb8
 800874c:	2000fdac 	.word	0x2000fdac
 8008750:	2000fdbc 	.word	0x2000fdbc

08008754 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d046      	beq.n	80087f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008766:	2308      	movs	r3, #8
 8008768:	425b      	negs	r3, r3
 800876a:	697a      	ldr	r2, [r7, #20]
 800876c:	4413      	add	r3, r2
 800876e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	4b20      	ldr	r3, [pc, #128]	; (80087fc <vPortFree+0xa8>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4013      	ands	r3, r2
 800877e:	2b00      	cmp	r3, #0
 8008780:	d109      	bne.n	8008796 <vPortFree+0x42>
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	e7fe      	b.n	8008794 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <vPortFree+0x5e>
 800879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	60bb      	str	r3, [r7, #8]
 80087b0:	e7fe      	b.n	80087b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	4b11      	ldr	r3, [pc, #68]	; (80087fc <vPortFree+0xa8>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4013      	ands	r3, r2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d019      	beq.n	80087f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d115      	bne.n	80087f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	4b0b      	ldr	r3, [pc, #44]	; (80087fc <vPortFree+0xa8>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	43db      	mvns	r3, r3
 80087d2:	401a      	ands	r2, r3
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087d8:	f7fe fb8c 	bl	8006ef4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	4b07      	ldr	r3, [pc, #28]	; (8008800 <vPortFree+0xac>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4413      	add	r3, r2
 80087e6:	4a06      	ldr	r2, [pc, #24]	; (8008800 <vPortFree+0xac>)
 80087e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087ea:	6938      	ldr	r0, [r7, #16]
 80087ec:	f000 f86c 	bl	80088c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80087f0:	f7fe fb8e 	bl	8006f10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087f4:	bf00      	nop
 80087f6:	3718      	adds	r7, #24
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	2000fdc0 	.word	0x2000fdc0
 8008800:	2000fdb8 	.word	0x2000fdb8

08008804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800880a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800880e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008810:	4b27      	ldr	r3, [pc, #156]	; (80088b0 <prvHeapInit+0xac>)
 8008812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00c      	beq.n	8008838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3307      	adds	r3, #7
 8008822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f023 0307 	bic.w	r3, r3, #7
 800882a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	4a1f      	ldr	r2, [pc, #124]	; (80088b0 <prvHeapInit+0xac>)
 8008834:	4413      	add	r3, r2
 8008836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800883c:	4a1d      	ldr	r2, [pc, #116]	; (80088b4 <prvHeapInit+0xb0>)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008842:	4b1c      	ldr	r3, [pc, #112]	; (80088b4 <prvHeapInit+0xb0>)
 8008844:	2200      	movs	r2, #0
 8008846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	4413      	add	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008850:	2208      	movs	r2, #8
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	1a9b      	subs	r3, r3, r2
 8008856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0307 	bic.w	r3, r3, #7
 800885e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4a15      	ldr	r2, [pc, #84]	; (80088b8 <prvHeapInit+0xb4>)
 8008864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008866:	4b14      	ldr	r3, [pc, #80]	; (80088b8 <prvHeapInit+0xb4>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2200      	movs	r2, #0
 800886c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800886e:	4b12      	ldr	r3, [pc, #72]	; (80088b8 <prvHeapInit+0xb4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	1ad2      	subs	r2, r2, r3
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008884:	4b0c      	ldr	r3, [pc, #48]	; (80088b8 <prvHeapInit+0xb4>)
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	4a0a      	ldr	r2, [pc, #40]	; (80088bc <prvHeapInit+0xb8>)
 8008892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	4a09      	ldr	r2, [pc, #36]	; (80088c0 <prvHeapInit+0xbc>)
 800889a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800889c:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <prvHeapInit+0xc0>)
 800889e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80088a2:	601a      	str	r2, [r3, #0]
}
 80088a4:	bf00      	nop
 80088a6:	3714      	adds	r7, #20
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	20000dac 	.word	0x20000dac
 80088b4:	2000fdac 	.word	0x2000fdac
 80088b8:	2000fdb4 	.word	0x2000fdb4
 80088bc:	2000fdbc 	.word	0x2000fdbc
 80088c0:	2000fdb8 	.word	0x2000fdb8
 80088c4:	2000fdc0 	.word	0x2000fdc0

080088c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088c8:	b480      	push	{r7}
 80088ca:	b085      	sub	sp, #20
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088d0:	4b28      	ldr	r3, [pc, #160]	; (8008974 <prvInsertBlockIntoFreeList+0xac>)
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	e002      	b.n	80088dc <prvInsertBlockIntoFreeList+0x14>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	60fb      	str	r3, [r7, #12]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d8f7      	bhi.n	80088d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	68ba      	ldr	r2, [r7, #8]
 80088f0:	4413      	add	r3, r2
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d108      	bne.n	800890a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	441a      	add	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	441a      	add	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	429a      	cmp	r2, r3
 800891c:	d118      	bne.n	8008950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	4b15      	ldr	r3, [pc, #84]	; (8008978 <prvInsertBlockIntoFreeList+0xb0>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	429a      	cmp	r2, r3
 8008928:	d00d      	beq.n	8008946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	441a      	add	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	e008      	b.n	8008958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008946:	4b0c      	ldr	r3, [pc, #48]	; (8008978 <prvInsertBlockIntoFreeList+0xb0>)
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	e003      	b.n	8008958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	429a      	cmp	r2, r3
 800895e:	d002      	beq.n	8008966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008966:	bf00      	nop
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	2000fdac 	.word	0x2000fdac
 8008978:	2000fdb4 	.word	0x2000fdb4

0800897c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008986:	f008 ffdf 	bl	8011948 <sys_timeouts_sleeptime>
 800898a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008992:	d10b      	bne.n	80089ac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8008994:	4813      	ldr	r0, [pc, #76]	; (80089e4 <tcpip_timeouts_mbox_fetch+0x68>)
 8008996:	f00d fefc 	bl	8016792 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800899a:	2200      	movs	r2, #0
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f00d fe84 	bl	80166ac <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80089a4:	480f      	ldr	r0, [pc, #60]	; (80089e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80089a6:	f00d fee5 	bl	8016774 <sys_mutex_lock>
    return;
 80089aa:	e018      	b.n	80089de <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d102      	bne.n	80089b8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80089b2:	f008 ff8f 	bl	80118d4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80089b6:	e7e6      	b.n	8008986 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80089b8:	480a      	ldr	r0, [pc, #40]	; (80089e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80089ba:	f00d feea 	bl	8016792 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f00d fe72 	bl	80166ac <sys_arch_mbox_fetch>
 80089c8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80089ca:	4806      	ldr	r0, [pc, #24]	; (80089e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80089cc:	f00d fed2 	bl	8016774 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d6:	d102      	bne.n	80089de <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80089d8:	f008 ff7c 	bl	80118d4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80089dc:	e7d3      	b.n	8008986 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80089de:	3710      	adds	r7, #16
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	200136dc 	.word	0x200136dc

080089e8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80089f0:	4810      	ldr	r0, [pc, #64]	; (8008a34 <tcpip_thread+0x4c>)
 80089f2:	f00d febf 	bl	8016774 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80089f6:	4b10      	ldr	r3, [pc, #64]	; (8008a38 <tcpip_thread+0x50>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d005      	beq.n	8008a0a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80089fe:	4b0e      	ldr	r3, [pc, #56]	; (8008a38 <tcpip_thread+0x50>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a0e      	ldr	r2, [pc, #56]	; (8008a3c <tcpip_thread+0x54>)
 8008a04:	6812      	ldr	r2, [r2, #0]
 8008a06:	4610      	mov	r0, r2
 8008a08:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008a0a:	f107 030c 	add.w	r3, r7, #12
 8008a0e:	4619      	mov	r1, r3
 8008a10:	480b      	ldr	r0, [pc, #44]	; (8008a40 <tcpip_thread+0x58>)
 8008a12:	f7ff ffb3 	bl	800897c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d106      	bne.n	8008a2a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008a1c:	4b09      	ldr	r3, [pc, #36]	; (8008a44 <tcpip_thread+0x5c>)
 8008a1e:	2291      	movs	r2, #145	; 0x91
 8008a20:	4909      	ldr	r1, [pc, #36]	; (8008a48 <tcpip_thread+0x60>)
 8008a22:	480a      	ldr	r0, [pc, #40]	; (8008a4c <tcpip_thread+0x64>)
 8008a24:	f00d ff60 	bl	80168e8 <iprintf>
      continue;
 8008a28:	e003      	b.n	8008a32 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 f80f 	bl	8008a50 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008a32:	e7ea      	b.n	8008a0a <tcpip_thread+0x22>
 8008a34:	200136dc 	.word	0x200136dc
 8008a38:	2000fdc4 	.word	0x2000fdc4
 8008a3c:	2000fdc8 	.word	0x2000fdc8
 8008a40:	2000fdcc 	.word	0x2000fdcc
 8008a44:	08017c60 	.word	0x08017c60
 8008a48:	08017c90 	.word	0x08017c90
 8008a4c:	08017cb0 	.word	0x08017cb0

08008a50 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d018      	beq.n	8008a92 <tcpip_thread_handle_msg+0x42>
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d021      	beq.n	8008aa8 <tcpip_thread_handle_msg+0x58>
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d126      	bne.n	8008ab6 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	6850      	ldr	r0, [r2, #4]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	6892      	ldr	r2, [r2, #8]
 8008a74:	4611      	mov	r1, r2
 8008a76:	4798      	blx	r3
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d004      	beq.n	8008a88 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f002 fb1c 	bl	800b0c0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	2009      	movs	r0, #9
 8008a8c:	f001 fc6c 	bl	800a368 <memp_free>
      break;
 8008a90:	e018      	b.n	8008ac4 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	6892      	ldr	r2, [r2, #8]
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	2008      	movs	r0, #8
 8008aa2:	f001 fc61 	bl	800a368 <memp_free>
      break;
 8008aa6:	e00d      	b.n	8008ac4 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6892      	ldr	r2, [r2, #8]
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	4798      	blx	r3
      break;
 8008ab4:	e006      	b.n	8008ac4 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008ab6:	4b05      	ldr	r3, [pc, #20]	; (8008acc <tcpip_thread_handle_msg+0x7c>)
 8008ab8:	22cf      	movs	r2, #207	; 0xcf
 8008aba:	4905      	ldr	r1, [pc, #20]	; (8008ad0 <tcpip_thread_handle_msg+0x80>)
 8008abc:	4805      	ldr	r0, [pc, #20]	; (8008ad4 <tcpip_thread_handle_msg+0x84>)
 8008abe:	f00d ff13 	bl	80168e8 <iprintf>
      break;
 8008ac2:	bf00      	nop
  }
}
 8008ac4:	bf00      	nop
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	08017c60 	.word	0x08017c60
 8008ad0:	08017c90 	.word	0x08017c90
 8008ad4:	08017cb0 	.word	0x08017cb0

08008ad8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b086      	sub	sp, #24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008ae4:	481a      	ldr	r0, [pc, #104]	; (8008b50 <tcpip_inpkt+0x78>)
 8008ae6:	f00d fe12 	bl	801670e <sys_mbox_valid>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d105      	bne.n	8008afc <tcpip_inpkt+0x24>
 8008af0:	4b18      	ldr	r3, [pc, #96]	; (8008b54 <tcpip_inpkt+0x7c>)
 8008af2:	22fc      	movs	r2, #252	; 0xfc
 8008af4:	4918      	ldr	r1, [pc, #96]	; (8008b58 <tcpip_inpkt+0x80>)
 8008af6:	4819      	ldr	r0, [pc, #100]	; (8008b5c <tcpip_inpkt+0x84>)
 8008af8:	f00d fef6 	bl	80168e8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008afc:	2009      	movs	r0, #9
 8008afe:	f001 fbe1 	bl	800a2c4 <memp_malloc>
 8008b02:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d102      	bne.n	8008b10 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0e:	e01a      	b.n	8008b46 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	2200      	movs	r2, #0
 8008b14:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008b28:	6979      	ldr	r1, [r7, #20]
 8008b2a:	4809      	ldr	r0, [pc, #36]	; (8008b50 <tcpip_inpkt+0x78>)
 8008b2c:	f00d fda4 	bl	8016678 <sys_mbox_trypost>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d006      	beq.n	8008b44 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008b36:	6979      	ldr	r1, [r7, #20]
 8008b38:	2009      	movs	r0, #9
 8008b3a:	f001 fc15 	bl	800a368 <memp_free>
    return ERR_MEM;
 8008b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b42:	e000      	b.n	8008b46 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008b44:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	2000fdcc 	.word	0x2000fdcc
 8008b54:	08017c60 	.word	0x08017c60
 8008b58:	08017cd8 	.word	0x08017cd8
 8008b5c:	08017cb0 	.word	0x08017cb0

08008b60 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
 8008b68:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b70:	f003 0318 	and.w	r3, r3, #24
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d006      	beq.n	8008b86 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008b78:	4a08      	ldr	r2, [pc, #32]	; (8008b9c <tcpip_input+0x3c>)
 8008b7a:	6839      	ldr	r1, [r7, #0]
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff ffab 	bl	8008ad8 <tcpip_inpkt>
 8008b82:	4603      	mov	r3, r0
 8008b84:	e005      	b.n	8008b92 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008b86:	4a06      	ldr	r2, [pc, #24]	; (8008ba0 <tcpip_input+0x40>)
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7ff ffa4 	bl	8008ad8 <tcpip_inpkt>
 8008b90:	4603      	mov	r3, r0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	08016499 	.word	0x08016499
 8008ba0:	0801537d 	.word	0x0801537d

08008ba4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008bae:	4819      	ldr	r0, [pc, #100]	; (8008c14 <tcpip_try_callback+0x70>)
 8008bb0:	f00d fdad 	bl	801670e <sys_mbox_valid>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <tcpip_try_callback+0x24>
 8008bba:	4b17      	ldr	r3, [pc, #92]	; (8008c18 <tcpip_try_callback+0x74>)
 8008bbc:	f240 125d 	movw	r2, #349	; 0x15d
 8008bc0:	4916      	ldr	r1, [pc, #88]	; (8008c1c <tcpip_try_callback+0x78>)
 8008bc2:	4817      	ldr	r0, [pc, #92]	; (8008c20 <tcpip_try_callback+0x7c>)
 8008bc4:	f00d fe90 	bl	80168e8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008bc8:	2008      	movs	r0, #8
 8008bca:	f001 fb7b 	bl	800a2c4 <memp_malloc>
 8008bce:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d102      	bne.n	8008bdc <tcpip_try_callback+0x38>
    return ERR_MEM;
 8008bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bda:	e017      	b.n	8008c0c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008bee:	68f9      	ldr	r1, [r7, #12]
 8008bf0:	4808      	ldr	r0, [pc, #32]	; (8008c14 <tcpip_try_callback+0x70>)
 8008bf2:	f00d fd41 	bl	8016678 <sys_mbox_trypost>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d006      	beq.n	8008c0a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008bfc:	68f9      	ldr	r1, [r7, #12]
 8008bfe:	2008      	movs	r0, #8
 8008c00:	f001 fbb2 	bl	800a368 <memp_free>
    return ERR_MEM;
 8008c04:	f04f 33ff 	mov.w	r3, #4294967295
 8008c08:	e000      	b.n	8008c0c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	2000fdcc 	.word	0x2000fdcc
 8008c18:	08017c60 	.word	0x08017c60
 8008c1c:	08017cd8 	.word	0x08017cd8
 8008c20:	08017cb0 	.word	0x08017cb0

08008c24 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af02      	add	r7, sp, #8
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008c2e:	f000 fec1 	bl	80099b4 <lwip_init>

  tcpip_init_done = initfunc;
 8008c32:	4a17      	ldr	r2, [pc, #92]	; (8008c90 <tcpip_init+0x6c>)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008c38:	4a16      	ldr	r2, [pc, #88]	; (8008c94 <tcpip_init+0x70>)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008c3e:	2106      	movs	r1, #6
 8008c40:	4815      	ldr	r0, [pc, #84]	; (8008c98 <tcpip_init+0x74>)
 8008c42:	f00d fcff 	bl	8016644 <sys_mbox_new>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d006      	beq.n	8008c5a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008c4c:	4b13      	ldr	r3, [pc, #76]	; (8008c9c <tcpip_init+0x78>)
 8008c4e:	f240 2261 	movw	r2, #609	; 0x261
 8008c52:	4913      	ldr	r1, [pc, #76]	; (8008ca0 <tcpip_init+0x7c>)
 8008c54:	4813      	ldr	r0, [pc, #76]	; (8008ca4 <tcpip_init+0x80>)
 8008c56:	f00d fe47 	bl	80168e8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008c5a:	4813      	ldr	r0, [pc, #76]	; (8008ca8 <tcpip_init+0x84>)
 8008c5c:	f00d fd74 	bl	8016748 <sys_mutex_new>
 8008c60:	4603      	mov	r3, r0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d006      	beq.n	8008c74 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008c66:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <tcpip_init+0x78>)
 8008c68:	f240 2265 	movw	r2, #613	; 0x265
 8008c6c:	490f      	ldr	r1, [pc, #60]	; (8008cac <tcpip_init+0x88>)
 8008c6e:	480d      	ldr	r0, [pc, #52]	; (8008ca4 <tcpip_init+0x80>)
 8008c70:	f00d fe3a 	bl	80168e8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008c74:	2318      	movs	r3, #24
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	490c      	ldr	r1, [pc, #48]	; (8008cb0 <tcpip_init+0x8c>)
 8008c80:	480c      	ldr	r0, [pc, #48]	; (8008cb4 <tcpip_init+0x90>)
 8008c82:	f00d fd93 	bl	80167ac <sys_thread_new>
}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	2000fdc4 	.word	0x2000fdc4
 8008c94:	2000fdc8 	.word	0x2000fdc8
 8008c98:	2000fdcc 	.word	0x2000fdcc
 8008c9c:	08017c60 	.word	0x08017c60
 8008ca0:	08017ce8 	.word	0x08017ce8
 8008ca4:	08017cb0 	.word	0x08017cb0
 8008ca8:	200136dc 	.word	0x200136dc
 8008cac:	08017d0c 	.word	0x08017d0c
 8008cb0:	080089e9 	.word	0x080089e9
 8008cb4:	08017d30 	.word	0x08017d30

08008cb8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b084      	sub	sp, #16
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <fs_open+0x16>
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d102      	bne.n	8008cd4 <fs_open+0x1c>
    return ERR_ARG;
 8008cce:	f06f 030f 	mvn.w	r3, #15
 8008cd2:	e028      	b.n	8008d26 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8008cd4:	4b16      	ldr	r3, [pc, #88]	; (8008d30 <fs_open+0x78>)
 8008cd6:	60fb      	str	r3, [r7, #12]
 8008cd8:	e020      	b.n	8008d1c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6838      	ldr	r0, [r7, #0]
 8008ce2:	f7f7 fa85 	bl	80001f0 <strcmp>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d114      	bne.n	8008d16 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68da      	ldr	r2, [r3, #12]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	68da      	ldr	r2, [r3, #12]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	7c1a      	ldrb	r2, [r3, #16]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	e007      	b.n	8008d26 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1db      	bne.n	8008cda <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8008d22:	f06f 0305 	mvn.w	r3, #5
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	0803ac2c 	.word	0x0803ac2c

08008d34 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8008d3c:	bf00      	nop
 8008d3e:	370c      	adds	r7, #12
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	1ad3      	subs	r3, r2, r3
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b082      	sub	sp, #8
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8008d6e:	222c      	movs	r2, #44	; 0x2c
 8008d70:	2100      	movs	r1, #0
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f00d fdaf 	bl	80168d6 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8008d86:	202c      	movs	r0, #44	; 0x2c
 8008d88:	f001 f91a 	bl	8009fc0 <mem_malloc>
 8008d8c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <http_state_alloc+0x1a>
    http_state_init(ret);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7ff ffe6 	bl	8008d66 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8008d9a:	687b      	ldr	r3, [r7, #4]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d007      	beq.n	8008dc4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7ff ffbb 	bl	8008d34 <fs_close>
    hs->handle = NULL;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d007      	beq.n	8008ddc <http_state_eof+0x38>
    pbuf_free(hs->req);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f002 f975 	bl	800b0c0 <pbuf_free>
    hs->req = NULL;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8008ddc:	bf00      	nop
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d005      	beq.n	8008dfe <http_state_free+0x1a>
    http_state_eof(hs);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff ffd6 	bl	8008da4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 ff47 	bl	8009c8c <mem_free>
  }
}
 8008dfe:	bf00      	nop
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}
	...

08008e08 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
 8008e14:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d106      	bne.n	8008e2a <http_write+0x22>
 8008e1c:	4b2c      	ldr	r3, [pc, #176]	; (8008ed0 <http_write+0xc8>)
 8008e1e:	f240 2219 	movw	r2, #537	; 0x219
 8008e22:	492c      	ldr	r1, [pc, #176]	; (8008ed4 <http_write+0xcc>)
 8008e24:	482c      	ldr	r0, [pc, #176]	; (8008ed8 <http_write+0xd0>)
 8008e26:	f00d fd5f 	bl	80168e8 <iprintf>
  len = *length;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	881b      	ldrh	r3, [r3, #0]
 8008e2e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8008e30:	8afb      	ldrh	r3, [r7, #22]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d101      	bne.n	8008e3a <http_write+0x32>
    return ERR_OK;
 8008e36:	2300      	movs	r3, #0
 8008e38:	e045      	b.n	8008ec6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008e40:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8008e42:	8aba      	ldrh	r2, [r7, #20]
 8008e44:	8afb      	ldrh	r3, [r7, #22]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d201      	bcs.n	8008e4e <http_write+0x46>
    len = max_len;
 8008e4a:	8abb      	ldrh	r3, [r7, #20]
 8008e4c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e52:	005b      	lsls	r3, r3, #1
 8008e54:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8008e56:	8afa      	ldrh	r2, [r7, #22]
 8008e58:	8abb      	ldrh	r3, [r7, #20]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d901      	bls.n	8008e62 <http_write+0x5a>
    len = max_len;
 8008e5e:	8abb      	ldrh	r3, [r7, #20]
 8008e60:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8008e62:	78fb      	ldrb	r3, [r7, #3]
 8008e64:	8afa      	ldrh	r2, [r7, #22]
 8008e66:	68b9      	ldr	r1, [r7, #8]
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f006 febb 	bl	800fbe4 <tcp_write>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8008e72:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e7a:	d10f      	bne.n	8008e9c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d004      	beq.n	8008e90 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8008e8c:	2b08      	cmp	r3, #8
 8008e8e:	d902      	bls.n	8008e96 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8008e90:	2301      	movs	r3, #1
 8008e92:	82fb      	strh	r3, [r7, #22]
 8008e94:	e002      	b.n	8008e9c <http_write+0x94>
      } else {
        len /= 2;
 8008e96:	8afb      	ldrh	r3, [r7, #22]
 8008e98:	085b      	lsrs	r3, r3, #1
 8008e9a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8008e9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea4:	d102      	bne.n	8008eac <http_write+0xa4>
 8008ea6:	8afb      	ldrh	r3, [r7, #22]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d8da      	bhi.n	8008e62 <http_write+0x5a>

  if (err == ERR_OK) {
 8008eac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d103      	bne.n	8008ebc <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	8afa      	ldrh	r2, [r7, #22]
 8008eb8:	801a      	strh	r2, [r3, #0]
 8008eba:	e002      	b.n	8008ec2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8008ec2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	08017d80 	.word	0x08017d80
 8008ed4:	08017db8 	.word	0x08017db8
 8008ed8:	08017dc8 	.word	0x08017dc8

08008edc <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8008eea:	2100      	movs	r1, #0
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f003 ff3d 	bl	800cd6c <tcp_arg>
  altcp_recv(pcb, NULL);
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	f003 ff4b 	bl	800cd90 <tcp_recv>
  altcp_err(pcb, NULL);
 8008efa:	2100      	movs	r1, #0
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f003 ff8b 	bl	800ce18 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8008f02:	2200      	movs	r2, #0
 8008f04:	2100      	movs	r1, #0
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f003 ffc0 	bl	800ce8c <tcp_poll>
  altcp_sent(pcb, NULL);
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f003 ff60 	bl	800cdd4 <tcp_sent>
  if (hs != NULL) {
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d002      	beq.n	8008f20 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8008f1a:	68b8      	ldr	r0, [r7, #8]
 8008f1c:	f7ff ff62 	bl	8008de4 <http_state_free>
  }

  if (abort_conn) {
 8008f20:	79fb      	ldrb	r3, [r7, #7]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d004      	beq.n	8008f30 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f002 fe66 	bl	800bbf8 <tcp_abort>
    return ERR_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	e00f      	b.n	8008f50 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f002 fd77 	bl	800ba24 <tcp_close>
 8008f36:	4603      	mov	r3, r0
 8008f38:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8008f3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d004      	beq.n	8008f4c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8008f42:	2204      	movs	r2, #4
 8008f44:	4904      	ldr	r1, [pc, #16]	; (8008f58 <http_close_or_abort_conn+0x7c>)
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f003 ffa0 	bl	800ce8c <tcp_poll>
  }
  return err;
 8008f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	0800961f 	.word	0x0800961f

08008f5c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8008f66:	2200      	movs	r2, #0
 8008f68:	6839      	ldr	r1, [r7, #0]
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff ffb6 	bl	8008edc <http_close_or_abort_conn>
 8008f70:	4603      	mov	r3, r0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b082      	sub	sp, #8
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7ff ffe8 	bl	8008f5c <http_close_conn>
  }
}
 8008f8c:	bf00      	nop
 8008f8e:	3708      	adds	r7, #8
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d105      	bne.n	8008fb2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f7ff ffe6 	bl	8008f7a <http_eof>
    return 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	e016      	b.n	8008fe0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7ff fec6 	bl	8008d48 <fs_bytes_left>
 8008fbc:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	dc05      	bgt.n	8008fd0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7ff ffd7 	bl	8008f7a <http_eof>
    return 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	e007      	b.n	8008fe0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8008fd0:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <http_check_eof+0x54>)
 8008fd2:	f240 429d 	movw	r2, #1181	; 0x49d
 8008fd6:	4905      	ldr	r1, [pc, #20]	; (8008fec <http_check_eof+0x58>)
 8008fd8:	4805      	ldr	r0, [pc, #20]	; (8008ff0 <http_check_eof+0x5c>)
 8008fda:	f00d fc85 	bl	80168e8 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8008fde:	2301      	movs	r3, #1
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	08017d80 	.word	0x08017d80
 8008fec:	08017df0 	.word	0x08017df0
 8008ff0:	08017dc8 	.word	0x08017dc8

08008ff4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8008ffe:	2300      	movs	r3, #0
 8009000:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800900a:	4293      	cmp	r3, r2
 800900c:	d803      	bhi.n	8009016 <http_send_data_nonssi+0x22>
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009012:	b29b      	uxth	r3, r3
 8009014:	e001      	b.n	800901a <http_send_data_nonssi+0x26>
 8009016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800901a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	6999      	ldr	r1, [r3, #24]
 8009020:	f107 020c 	add.w	r2, r7, #12
 8009024:	2300      	movs	r3, #0
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7ff feee 	bl	8008e08 <http_write>
 800902c:	4603      	mov	r3, r0
 800902e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8009030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10d      	bne.n	8009054 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8009038:	2301      	movs	r3, #1
 800903a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	89ba      	ldrh	r2, [r7, #12]
 8009042:	441a      	add	r2, r3
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	89ba      	ldrh	r2, [r7, #12]
 800904e:	1a9a      	subs	r2, r3, r2
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8009054:	7bfb      	ldrb	r3, [r7, #15]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d101      	bne.n	8009076 <http_send+0x18>
    return 0;
 8009072:	2300      	movs	r3, #0
 8009074:	e025      	b.n	80090c2 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	2b00      	cmp	r3, #0
 800907c:	d108      	bne.n	8009090 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800907e:	6839      	ldr	r1, [r7, #0]
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f7ff ff87 	bl	8008f94 <http_check_eof>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <http_send+0x32>
      return 0;
 800908c:	2300      	movs	r3, #0
 800908e:	e018      	b.n	80090c2 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f7ff ffae 	bl	8008ff4 <http_send_data_nonssi>
 8009098:	4603      	mov	r3, r0
 800909a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10d      	bne.n	80090c0 <http_send+0x62>
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7ff fe4d 	bl	8008d48 <fs_bytes_left>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	dc05      	bgt.n	80090c0 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff ff5f 	bl	8008f7a <http_eof>
    return 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	e000      	b.n	80090c2 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 80090c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
	...

080090cc <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	4a1c      	ldr	r2, [pc, #112]	; (800914c <http_get_404_file+0x80>)
 80090da:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4619      	mov	r1, r3
 80090e4:	4610      	mov	r0, r2
 80090e6:	f7ff fde7 	bl	8008cb8 <fs_open>
 80090ea:	4603      	mov	r3, r0
 80090ec:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80090ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d024      	beq.n	8009140 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	4a15      	ldr	r2, [pc, #84]	; (8009150 <http_get_404_file+0x84>)
 80090fa:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	4619      	mov	r1, r3
 8009104:	4610      	mov	r0, r2
 8009106:	f7ff fdd7 	bl	8008cb8 <fs_open>
 800910a:	4603      	mov	r3, r0
 800910c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800910e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d014      	beq.n	8009140 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	4a0e      	ldr	r2, [pc, #56]	; (8009154 <http_get_404_file+0x88>)
 800911a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4619      	mov	r1, r3
 8009124:	4610      	mov	r0, r2
 8009126:	f7ff fdc7 	bl	8008cb8 <fs_open>
 800912a:	4603      	mov	r3, r0
 800912c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800912e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d004      	beq.n	8009140 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]
        return NULL;
 800913c:	2300      	movs	r3, #0
 800913e:	e000      	b.n	8009142 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8009140:	687b      	ldr	r3, [r7, #4]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	08017e28 	.word	0x08017e28
 8009150:	08017e34 	.word	0x08017e34
 8009154:	08017e40 	.word	0x08017e40

08009158 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b08e      	sub	sp, #56	; 0x38
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8009168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916a:	2b00      	cmp	r3, #0
 800916c:	d106      	bne.n	800917c <http_parse_request+0x24>
 800916e:	4b65      	ldr	r3, [pc, #404]	; (8009304 <http_parse_request+0x1ac>)
 8009170:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8009174:	4964      	ldr	r1, [pc, #400]	; (8009308 <http_parse_request+0x1b0>)
 8009176:	4865      	ldr	r0, [pc, #404]	; (800930c <http_parse_request+0x1b4>)
 8009178:	f00d fbb6 	bl	80168e8 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d106      	bne.n	8009190 <http_parse_request+0x38>
 8009182:	4b60      	ldr	r3, [pc, #384]	; (8009304 <http_parse_request+0x1ac>)
 8009184:	f240 72af 	movw	r2, #1967	; 0x7af
 8009188:	4961      	ldr	r1, [pc, #388]	; (8009310 <http_parse_request+0x1b8>)
 800918a:	4860      	ldr	r0, [pc, #384]	; (800930c <http_parse_request+0x1b4>)
 800918c:	f00d fbac 	bl	80168e8 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	695b      	ldr	r3, [r3, #20]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d103      	bne.n	80091a0 <http_parse_request+0x48>
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80091a0:	f06f 0307 	mvn.w	r3, #7
 80091a4:	e0aa      	b.n	80092fc <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d103      	bne.n	80091b6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b2:	621a      	str	r2, [r3, #32]
 80091b4:	e005      	b.n	80091c2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091bc:	4618      	mov	r0, r3
 80091be:	f002 f84d 	bl	800b25c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80091c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091c4:	f002 f822 	bl	800b20c <pbuf_ref>

  if (hs->req->next != NULL) {
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	6a1b      	ldr	r3, [r3, #32]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d012      	beq.n	80091f8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	891b      	ldrh	r3, [r3, #8]
 80091d8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80091dc:	4293      	cmp	r3, r2
 80091de:	bf28      	it	cs
 80091e0:	4613      	movcs	r3, r2
 80091e2:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	6a18      	ldr	r0, [r3, #32]
 80091e8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80091ea:	2300      	movs	r3, #0
 80091ec:	4949      	ldr	r1, [pc, #292]	; (8009314 <http_parse_request+0x1bc>)
 80091ee:	f002 f96d 	bl	800b4cc <pbuf_copy_partial>
    data = httpd_req_buf;
 80091f2:	4b48      	ldr	r3, [pc, #288]	; (8009314 <http_parse_request+0x1bc>)
 80091f4:	637b      	str	r3, [r7, #52]	; 0x34
 80091f6:	e005      	b.n	8009204 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	895b      	ldrh	r3, [r3, #10]
 8009202:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8009204:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009206:	2b06      	cmp	r3, #6
 8009208:	d963      	bls.n	80092d2 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800920a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800920c:	461a      	mov	r2, r3
 800920e:	4942      	ldr	r1, [pc, #264]	; (8009318 <http_parse_request+0x1c0>)
 8009210:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009212:	f000 fb99 	bl	8009948 <lwip_strnstr>
 8009216:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8009218:	6a3b      	ldr	r3, [r7, #32]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d059      	beq.n	80092d2 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800921e:	2300      	movs	r3, #0
 8009220:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8009222:	2204      	movs	r2, #4
 8009224:	493d      	ldr	r1, [pc, #244]	; (800931c <http_parse_request+0x1c4>)
 8009226:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009228:	f00d fbb7 	bl	801699a <strncmp>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d117      	bne.n	8009262 <http_parse_request+0x10a>
        sp1 = data + 3;
 8009232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009234:	3303      	adds	r3, #3
 8009236:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	3301      	adds	r3, #1
 800923c:	461a      	mov	r2, r3
 800923e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	b29b      	uxth	r3, r3
 8009244:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	3301      	adds	r3, #1
 800924e:	8b7a      	ldrh	r2, [r7, #26]
 8009250:	4933      	ldr	r1, [pc, #204]	; (8009320 <http_parse_request+0x1c8>)
 8009252:	4618      	mov	r0, r3
 8009254:	f000 fb78 	bl	8009948 <lwip_strnstr>
 8009258:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	2b00      	cmp	r3, #0
 800925e:	d111      	bne.n	8009284 <http_parse_request+0x12c>
 8009260:	e006      	b.n	8009270 <http_parse_request+0x118>
        data[4] = 0;
 8009262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009264:	3304      	adds	r3, #4
 8009266:	2200      	movs	r2, #0
 8009268:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800926a:	f06f 030f 	mvn.w	r3, #15
 800926e:	e045      	b.n	80092fc <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	3301      	adds	r3, #1
 8009274:	8b7a      	ldrh	r2, [r7, #26]
 8009276:	4928      	ldr	r1, [pc, #160]	; (8009318 <http_parse_request+0x1c0>)
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fb65 	bl	8009948 <lwip_strnstr>
 800927e:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8009280:	2301      	movs	r3, #1
 8009282:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	3201      	adds	r2, #1
 800928a:	1a9b      	subs	r3, r3, r2
 800928c:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800928e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009290:	2b00      	cmp	r3, #0
 8009292:	d01e      	beq.n	80092d2 <http_parse_request+0x17a>
 8009294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009296:	69fb      	ldr	r3, [r7, #28]
 8009298:	429a      	cmp	r2, r3
 800929a:	d91a      	bls.n	80092d2 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800929c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800929e:	461a      	mov	r2, r3
 80092a0:	4920      	ldr	r1, [pc, #128]	; (8009324 <http_parse_request+0x1cc>)
 80092a2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80092a4:	f000 fb50 	bl	8009948 <lwip_strnstr>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d011      	beq.n	80092d2 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	3301      	adds	r3, #1
 80092b2:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	2200      	movs	r2, #0
 80092b8:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80092ba:	8b3b      	ldrh	r3, [r7, #24]
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	4413      	add	r3, r2
 80092c0:	2200      	movs	r2, #0
 80092c2:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 80092c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092c6:	6979      	ldr	r1, [r7, #20]
 80092c8:	68b8      	ldr	r0, [r7, #8]
 80092ca:	f000 f82d 	bl	8009328 <http_find_file>
 80092ce:	4603      	mov	r3, r0
 80092d0:	e014      	b.n	80092fc <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f001 ff80 	bl	800b1dc <pbuf_clen>
 80092dc:	4603      	mov	r3, r0
 80092de:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	891b      	ldrh	r3, [r3, #8]
 80092e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092ea:	d205      	bcs.n	80092f8 <http_parse_request+0x1a0>
 80092ec:	8a7b      	ldrh	r3, [r7, #18]
 80092ee:	2b05      	cmp	r3, #5
 80092f0:	d802      	bhi.n	80092f8 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 80092f2:	f06f 0304 	mvn.w	r3, #4
 80092f6:	e001      	b.n	80092fc <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 80092f8:	f06f 030f 	mvn.w	r3, #15
  }
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3738      	adds	r7, #56	; 0x38
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	08017d80 	.word	0x08017d80
 8009308:	08017e4c 	.word	0x08017e4c
 800930c:	08017dc8 	.word	0x08017dc8
 8009310:	08017e58 	.word	0x08017e58
 8009314:	2000fdd0 	.word	0x2000fdd0
 8009318:	08017e64 	.word	0x08017e64
 800931c:	08017e68 	.word	0x08017e68
 8009320:	08017e70 	.word	0x08017e70
 8009324:	08017e74 	.word	0x08017e74

08009328 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b092      	sub	sp, #72	; 0x48
 800932c:	af02      	add	r7, sp, #8
 800932e:	60f8      	str	r0, [r7, #12]
 8009330:	60b9      	str	r1, [r7, #8]
 8009332:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8009334:	2300      	movs	r3, #0
 8009336:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8009338:	2300      	movs	r3, #0
 800933a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800933c:	2300      	movs	r3, #0
 800933e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	4618      	mov	r0, r3
 8009346:	f7f6 ff5d 	bl	8000204 <strlen>
 800934a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800934c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934e:	2b00      	cmp	r3, #0
 8009350:	d06b      	beq.n	800942a <http_find_file+0x102>
 8009352:	68ba      	ldr	r2, [r7, #8]
 8009354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009356:	3b01      	subs	r3, #1
 8009358:	4413      	add	r3, r2
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	2b2f      	cmp	r3, #47	; 0x2f
 800935e:	d164      	bne.n	800942a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009360:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8009362:	4a53      	ldr	r2, [pc, #332]	; (80094b0 <http_find_file+0x188>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d102      	bne.n	800936e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936a:	2b01      	cmp	r3, #1
 800936c:	d15d      	bne.n	800942a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	3b01      	subs	r3, #1
 8009372:	2b3f      	cmp	r3, #63	; 0x3f
 8009374:	bf28      	it	cs
 8009376:	233f      	movcs	r3, #63	; 0x3f
 8009378:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800937a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00a      	beq.n	8009396 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009384:	4619      	mov	r1, r3
 8009386:	484a      	ldr	r0, [pc, #296]	; (80094b0 <http_find_file+0x188>)
 8009388:	f00d fa81 	bl	801688e <memcpy>
      http_uri_buf[copy_len] = 0;
 800938c:	4a48      	ldr	r2, [pc, #288]	; (80094b0 <http_find_file+0x188>)
 800938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009390:	4413      	add	r3, r2
 8009392:	2200      	movs	r2, #0
 8009394:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8009396:	2300      	movs	r3, #0
 8009398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800939a:	e043      	b.n	8009424 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d028      	beq.n	80093f4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80093a8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d01e      	beq.n	80093ee <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80093b0:	4a40      	ldr	r2, [pc, #256]	; (80094b4 <http_find_file+0x18c>)
 80093b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7f6 ff23 	bl	8000204 <strlen>
 80093be:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80093c0:	69fa      	ldr	r2, [r7, #28]
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	4293      	cmp	r3, r2
 80093c6:	bf28      	it	cs
 80093c8:	4613      	movcs	r3, r2
 80093ca:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	4a38      	ldr	r2, [pc, #224]	; (80094b0 <http_find_file+0x188>)
 80093d0:	1898      	adds	r0, r3, r2
 80093d2:	4a38      	ldr	r2, [pc, #224]	; (80094b4 <http_find_file+0x18c>)
 80093d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	4619      	mov	r1, r3
 80093de:	f00d fa56 	bl	801688e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 80093e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	4413      	add	r3, r2
 80093e8:	4a31      	ldr	r2, [pc, #196]	; (80094b0 <http_find_file+0x188>)
 80093ea:	2100      	movs	r1, #0
 80093ec:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 80093ee:	4b30      	ldr	r3, [pc, #192]	; (80094b0 <http_find_file+0x188>)
 80093f0:	633b      	str	r3, [r7, #48]	; 0x30
 80093f2:	e004      	b.n	80093fe <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 80093f4:	4a2f      	ldr	r2, [pc, #188]	; (80094b4 <http_find_file+0x18c>)
 80093f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80093fc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009402:	4618      	mov	r0, r3
 8009404:	f7ff fc58 	bl	8008cb8 <fs_open>
 8009408:	4603      	mov	r3, r0
 800940a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800940c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d104      	bne.n	800941e <http_find_file+0xf6>
        uri = file_name;
 8009414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009416:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800941c:	e005      	b.n	800942a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800941e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009420:	3301      	adds	r3, #1
 8009422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009426:	2b04      	cmp	r3, #4
 8009428:	d9b8      	bls.n	800939c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800942a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942c:	2b00      	cmp	r3, #0
 800942e:	d124      	bne.n	800947a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	213f      	movs	r1, #63	; 0x3f
 8009434:	4618      	mov	r0, r3
 8009436:	f00d faa3 	bl	8016980 <strchr>
 800943a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800943c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800943e:	2b00      	cmp	r3, #0
 8009440:	d005      	beq.n	800944e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8009442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009444:	2200      	movs	r2, #0
 8009446:	701a      	strb	r2, [r3, #0]
      params++;
 8009448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800944a:	3301      	adds	r3, #1
 800944c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	68ba      	ldr	r2, [r7, #8]
 8009452:	4611      	mov	r1, r2
 8009454:	4618      	mov	r0, r3
 8009456:	f7ff fc2f 	bl	8008cb8 <fs_open>
 800945a:	4603      	mov	r3, r0
 800945c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800945e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d102      	bne.n	800946c <http_find_file+0x144>
      file = &hs->file_handle;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	63bb      	str	r3, [r7, #56]	; 0x38
 800946a:	e006      	b.n	800947a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800946c:	f107 0308 	add.w	r3, r7, #8
 8009470:	4619      	mov	r1, r3
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f7ff fe2a 	bl	80090cc <http_get_404_file>
 8009478:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800947a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947c:	2b00      	cmp	r3, #0
 800947e:	d106      	bne.n	800948e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8009480:	f107 0308 	add.w	r3, r7, #8
 8009484:	4619      	mov	r1, r3
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f7ff fe20 	bl	80090cc <http_get_404_file>
 800948c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009492:	9301      	str	r3, [sp, #4]
 8009494:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009498:	9300      	str	r3, [sp, #0]
 800949a:	4613      	mov	r3, r2
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 f809 	bl	80094b8 <http_init_file>
 80094a6:	4603      	mov	r3, r0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3740      	adds	r7, #64	; 0x40
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	200101d0 	.word	0x200101d0
 80094b4:	0803ac40 	.word	0x0803ac40

080094b8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
 80094c4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d05d      	beq.n	8009588 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d106      	bne.n	80094e2 <http_init_file+0x2a>
 80094d4:	4b35      	ldr	r3, [pc, #212]	; (80095ac <http_init_file+0xf4>)
 80094d6:	f640 120b 	movw	r2, #2315	; 0x90b
 80094da:	4935      	ldr	r1, [pc, #212]	; (80095b0 <http_init_file+0xf8>)
 80094dc:	4835      	ldr	r0, [pc, #212]	; (80095b4 <http_init_file+0xfc>)
 80094de:	f00d fa03 	bl	80168e8 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	68ba      	ldr	r2, [r7, #8]
 80094e6:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	da06      	bge.n	8009506 <http_init_file+0x4e>
 80094f8:	4b2c      	ldr	r3, [pc, #176]	; (80095ac <http_init_file+0xf4>)
 80094fa:	f640 1234 	movw	r2, #2356	; 0x934
 80094fe:	492e      	ldr	r1, [pc, #184]	; (80095b8 <http_init_file+0x100>)
 8009500:	482c      	ldr	r0, [pc, #176]	; (80095b4 <http_init_file+0xfc>)
 8009502:	f00d f9f1 	bl	80168e8 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	461a      	mov	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	695b      	ldr	r3, [r3, #20]
 800951c:	7c1b      	ldrb	r3, [r3, #16]
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d106      	bne.n	8009534 <http_init_file+0x7c>
 8009526:	4b21      	ldr	r3, [pc, #132]	; (80095ac <http_init_file+0xf4>)
 8009528:	f640 1244 	movw	r2, #2372	; 0x944
 800952c:	4923      	ldr	r1, [pc, #140]	; (80095bc <http_init_file+0x104>)
 800952e:	4821      	ldr	r0, [pc, #132]	; (80095b4 <http_init_file+0xfc>)
 8009530:	f00d f9da 	bl	80168e8 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d033      	beq.n	80095a2 <http_init_file+0xea>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	7c1b      	ldrb	r3, [r3, #16]
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	2b00      	cmp	r3, #0
 8009546:	d02c      	beq.n	80095a2 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6998      	ldr	r0, [r3, #24]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	461a      	mov	r2, r3
 8009552:	491b      	ldr	r1, [pc, #108]	; (80095c0 <http_init_file+0x108>)
 8009554:	f000 f9f8 	bl	8009948 <lwip_strnstr>
 8009558:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d020      	beq.n	80095a2 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	3304      	adds	r3, #4
 8009564:	461a      	mov	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	1ad3      	subs	r3, r2, r3
 800956c:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	699a      	ldr	r2, [r3, #24]
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	441a      	add	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	1ad2      	subs	r2, r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	625a      	str	r2, [r3, #36]	; 0x24
 8009586:	e00c      	b.n	80095a2 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3718      	adds	r7, #24
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	08017d80 	.word	0x08017d80
 80095b0:	08017e7c 	.word	0x08017e7c
 80095b4:	08017dc8 	.word	0x08017dc8
 80095b8:	08017e90 	.word	0x08017e90
 80095bc:	08017eb0 	.word	0x08017eb0
 80095c0:	08017e74 	.word	0x08017e74

080095c4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <http_err+0x1c>
    http_state_free(hs);
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f7ff fc02 	bl	8008de4 <http_state_free>
  }
}
 80095e0:	bf00      	nop
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b086      	sub	sp, #24
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	4613      	mov	r3, r2
 80095f4:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <http_sent+0x1c>
    return ERR_OK;
 8009600:	2300      	movs	r3, #0
 8009602:	e008      	b.n	8009616 <http_sent+0x2e>
  }

  hs->retries = 0;
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800960c:	6979      	ldr	r1, [r7, #20]
 800960e:	68b8      	ldr	r0, [r7, #8]
 8009610:	f7ff fd25 	bl	800905e <http_send>

  return ERR_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d107      	bne.n	8009642 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 8009632:	2100      	movs	r1, #0
 8009634:	6838      	ldr	r0, [r7, #0]
 8009636:	f7ff fc91 	bl	8008f5c <http_close_conn>
 800963a:	4603      	mov	r3, r0
 800963c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800963e:	2300      	movs	r3, #0
 8009640:	e021      	b.n	8009686 <http_poll+0x68>
  } else {
    hs->retries++;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009648:	3301      	adds	r3, #1
 800964a:	b2da      	uxtb	r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009658:	2b04      	cmp	r3, #4
 800965a:	d105      	bne.n	8009668 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800965c:	68f9      	ldr	r1, [r7, #12]
 800965e:	6838      	ldr	r0, [r7, #0]
 8009660:	f7ff fc7c 	bl	8008f5c <http_close_conn>
      return ERR_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	e00e      	b.n	8009686 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d009      	beq.n	8009684 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 8009670:	68f9      	ldr	r1, [r7, #12]
 8009672:	6838      	ldr	r0, [r7, #0]
 8009674:	f7ff fcf3 	bl	800905e <http_send>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800967e:	6838      	ldr	r0, [r7, #0]
 8009680:	f007 f89c 	bl	80107bc <tcp_output>
      }
    }
  }

  return ERR_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
	...

08009690 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
 800969c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80096a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d105      	bne.n	80096b6 <http_recv+0x26>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <http_recv+0x26>
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d111      	bne.n	80096da <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d008      	beq.n	80096ce <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	891b      	ldrh	r3, [r3, #8]
 80096c0:	4619      	mov	r1, r3
 80096c2:	68b8      	ldr	r0, [r7, #8]
 80096c4:	f002 fc72 	bl	800bfac <tcp_recved>
      pbuf_free(p);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f001 fcf9 	bl	800b0c0 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 80096ce:	6979      	ldr	r1, [r7, #20]
 80096d0:	68b8      	ldr	r0, [r7, #8]
 80096d2:	f7ff fc43 	bl	8008f5c <http_close_conn>
    return ERR_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	e055      	b.n	8009786 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	891b      	ldrh	r3, [r3, #8]
 80096de:	4619      	mov	r1, r3
 80096e0:	68b8      	ldr	r0, [r7, #8]
 80096e2:	f002 fc63 	bl	800bfac <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d147      	bne.n	800977e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	6979      	ldr	r1, [r7, #20]
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7ff fd30 	bl	8009158 <http_parse_request>
 80096f8:	4603      	mov	r3, r0
 80096fa:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80096fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d015      	beq.n	8009730 <http_recv+0xa0>
 8009704:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009708:	f113 0f05 	cmn.w	r3, #5
 800970c:	d010      	beq.n	8009730 <http_recv+0xa0>
 800970e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009712:	f113 0f10 	cmn.w	r3, #16
 8009716:	d00b      	beq.n	8009730 <http_recv+0xa0>
 8009718:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800971c:	f113 0f08 	cmn.w	r3, #8
 8009720:	d006      	beq.n	8009730 <http_recv+0xa0>
 8009722:	4b1b      	ldr	r3, [pc, #108]	; (8009790 <http_recv+0x100>)
 8009724:	f640 2205 	movw	r2, #2565	; 0xa05
 8009728:	491a      	ldr	r1, [pc, #104]	; (8009794 <http_recv+0x104>)
 800972a:	481b      	ldr	r0, [pc, #108]	; (8009798 <http_recv+0x108>)
 800972c:	f00d f8dc 	bl	80168e8 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8009730:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009734:	f113 0f05 	cmn.w	r3, #5
 8009738:	d00b      	beq.n	8009752 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d007      	beq.n	8009752 <http_recv+0xc2>
          pbuf_free(hs->req);
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	4618      	mov	r0, r3
 8009748:	f001 fcba 	bl	800b0c0 <pbuf_free>
          hs->req = NULL;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	2200      	movs	r2, #0
 8009750:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f001 fcb4 	bl	800b0c0 <pbuf_free>
      if (parsed == ERR_OK) {
 8009758:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d104      	bne.n	800976a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8009760:	6979      	ldr	r1, [r7, #20]
 8009762:	68b8      	ldr	r0, [r7, #8]
 8009764:	f7ff fc7b 	bl	800905e <http_send>
 8009768:	e00c      	b.n	8009784 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800976a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800976e:	f113 0f10 	cmn.w	r3, #16
 8009772:	d107      	bne.n	8009784 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8009774:	6979      	ldr	r1, [r7, #20]
 8009776:	68b8      	ldr	r0, [r7, #8]
 8009778:	f7ff fbf0 	bl	8008f5c <http_close_conn>
 800977c:	e002      	b.n	8009784 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f001 fc9e 	bl	800b0c0 <pbuf_free>
    }
  }
  return ERR_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	08017d80 	.word	0x08017d80
 8009794:	08017edc 	.word	0x08017edc
 8009798:	08017dc8 	.word	0x08017dc8

0800979c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b086      	sub	sp, #24
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	4613      	mov	r3, r2
 80097a8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 80097aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d102      	bne.n	80097b8 <http_accept+0x1c>
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d102      	bne.n	80097be <http_accept+0x22>
    return ERR_VAL;
 80097b8:	f06f 0305 	mvn.w	r3, #5
 80097bc:	e025      	b.n	800980a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 80097be:	2101      	movs	r1, #1
 80097c0:	68b8      	ldr	r0, [r7, #8]
 80097c2:	f003 f8d3 	bl	800c96c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 80097c6:	f7ff fadb 	bl	8008d80 <http_state_alloc>
 80097ca:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d102      	bne.n	80097d8 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 80097d2:	f04f 33ff 	mov.w	r3, #4294967295
 80097d6:	e018      	b.n	800980a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 80097de:	6979      	ldr	r1, [r7, #20]
 80097e0:	68b8      	ldr	r0, [r7, #8]
 80097e2:	f003 fac3 	bl	800cd6c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 80097e6:	490b      	ldr	r1, [pc, #44]	; (8009814 <http_accept+0x78>)
 80097e8:	68b8      	ldr	r0, [r7, #8]
 80097ea:	f003 fad1 	bl	800cd90 <tcp_recv>
  altcp_err(pcb, http_err);
 80097ee:	490a      	ldr	r1, [pc, #40]	; (8009818 <http_accept+0x7c>)
 80097f0:	68b8      	ldr	r0, [r7, #8]
 80097f2:	f003 fb11 	bl	800ce18 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80097f6:	2204      	movs	r2, #4
 80097f8:	4908      	ldr	r1, [pc, #32]	; (800981c <http_accept+0x80>)
 80097fa:	68b8      	ldr	r0, [r7, #8]
 80097fc:	f003 fb46 	bl	800ce8c <tcp_poll>
  altcp_sent(pcb, http_sent);
 8009800:	4907      	ldr	r1, [pc, #28]	; (8009820 <http_accept+0x84>)
 8009802:	68b8      	ldr	r0, [r7, #8]
 8009804:	f003 fae6 	bl	800cdd4 <tcp_sent>

  return ERR_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3718      	adds	r7, #24
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	08009691 	.word	0x08009691
 8009818:	080095c5 	.word	0x080095c5
 800981c:	0800961f 	.word	0x0800961f
 8009820:	080095e9 	.word	0x080095e9

08009824 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d029      	beq.n	800988a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8009836:	2101      	movs	r1, #1
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f003 f897 	bl	800c96c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800983e:	887b      	ldrh	r3, [r7, #2]
 8009840:	461a      	mov	r2, r3
 8009842:	4914      	ldr	r1, [pc, #80]	; (8009894 <httpd_init_pcb+0x70>)
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f002 f9e3 	bl	800bc10 <tcp_bind>
 800984a:	4603      	mov	r3, r0
 800984c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800984e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d006      	beq.n	8009864 <httpd_init_pcb+0x40>
 8009856:	4b10      	ldr	r3, [pc, #64]	; (8009898 <httpd_init_pcb+0x74>)
 8009858:	f640 2257 	movw	r2, #2647	; 0xa57
 800985c:	490f      	ldr	r1, [pc, #60]	; (800989c <httpd_init_pcb+0x78>)
 800985e:	4810      	ldr	r0, [pc, #64]	; (80098a0 <httpd_init_pcb+0x7c>)
 8009860:	f00d f842 	bl	80168e8 <iprintf>
    pcb = altcp_listen(pcb);
 8009864:	21ff      	movs	r1, #255	; 0xff
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f002 fa8a 	bl	800bd80 <tcp_listen_with_backlog>
 800986c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d106      	bne.n	8009882 <httpd_init_pcb+0x5e>
 8009874:	4b08      	ldr	r3, [pc, #32]	; (8009898 <httpd_init_pcb+0x74>)
 8009876:	f640 2259 	movw	r2, #2649	; 0xa59
 800987a:	490a      	ldr	r1, [pc, #40]	; (80098a4 <httpd_init_pcb+0x80>)
 800987c:	4808      	ldr	r0, [pc, #32]	; (80098a0 <httpd_init_pcb+0x7c>)
 800987e:	f00d f833 	bl	80168e8 <iprintf>
    altcp_accept(pcb, http_accept);
 8009882:	4909      	ldr	r1, [pc, #36]	; (80098a8 <httpd_init_pcb+0x84>)
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f003 fae9 	bl	800ce5c <tcp_accept>
  }
}
 800988a:	bf00      	nop
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	0803ad88 	.word	0x0803ad88
 8009898:	08017d80 	.word	0x08017d80
 800989c:	08017f08 	.word	0x08017f08
 80098a0:	08017dc8 	.word	0x08017dc8
 80098a4:	08017f24 	.word	0x08017f24
 80098a8:	0800979d 	.word	0x0800979d

080098ac <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 80098b2:	202e      	movs	r0, #46	; 0x2e
 80098b4:	f003 fa4c 	bl	800cd50 <tcp_new_ip_type>
 80098b8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d106      	bne.n	80098ce <httpd_init+0x22>
 80098c0:	4b07      	ldr	r3, [pc, #28]	; (80098e0 <httpd_init+0x34>)
 80098c2:	f640 2272 	movw	r2, #2674	; 0xa72
 80098c6:	4907      	ldr	r1, [pc, #28]	; (80098e4 <httpd_init+0x38>)
 80098c8:	4807      	ldr	r0, [pc, #28]	; (80098e8 <httpd_init+0x3c>)
 80098ca:	f00d f80d 	bl	80168e8 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 80098ce:	2150      	movs	r1, #80	; 0x50
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7ff ffa7 	bl	8009824 <httpd_init_pcb>
}
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	08017d80 	.word	0x08017d80
 80098e4:	08017f44 	.word	0x08017f44
 80098e8:	08017dc8 	.word	0x08017dc8

080098ec <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	4603      	mov	r3, r0
 80098f4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80098f6:	88fb      	ldrh	r3, [r7, #6]
 80098f8:	021b      	lsls	r3, r3, #8
 80098fa:	b21a      	sxth	r2, r3
 80098fc:	88fb      	ldrh	r3, [r7, #6]
 80098fe:	0a1b      	lsrs	r3, r3, #8
 8009900:	b29b      	uxth	r3, r3
 8009902:	b21b      	sxth	r3, r3
 8009904:	4313      	orrs	r3, r2
 8009906:	b21b      	sxth	r3, r3
 8009908:	b29b      	uxth	r3, r3
}
 800990a:	4618      	mov	r0, r3
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	061a      	lsls	r2, r3, #24
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	021b      	lsls	r3, r3, #8
 8009926:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800992a:	431a      	orrs	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	0a1b      	lsrs	r3, r3, #8
 8009930:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009934:	431a      	orrs	r2, r3
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	0e1b      	lsrs	r3, r3, #24
 800993a:	4313      	orrs	r3, r2
}
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b086      	sub	sp, #24
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8009954:	68b8      	ldr	r0, [r7, #8]
 8009956:	f7f6 fc55 	bl	8000204 <strlen>
 800995a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	e022      	b.n	80099ac <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	617b      	str	r3, [r7, #20]
 800996a:	e012      	b.n	8009992 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	781a      	ldrb	r2, [r3, #0]
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	429a      	cmp	r2, r3
 8009976:	d109      	bne.n	800998c <lwip_strnstr+0x44>
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	68b9      	ldr	r1, [r7, #8]
 800997c:	6978      	ldr	r0, [r7, #20]
 800997e:	f00d f80c 	bl	801699a <strncmp>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d101      	bne.n	800998c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	e00f      	b.n	80099ac <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	3301      	adds	r3, #1
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d007      	beq.n	80099aa <lwip_strnstr+0x62>
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	441a      	add	r2, r3
 80099a0:	68f9      	ldr	r1, [r7, #12]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	440b      	add	r3, r1
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d9e0      	bls.n	800996c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3718      	adds	r7, #24
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80099ba:	2300      	movs	r3, #0
 80099bc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80099be:	f00c feb7 	bl	8016730 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80099c2:	f000 f8d5 	bl	8009b70 <mem_init>
  memp_init();
 80099c6:	f000 fc31 	bl	800a22c <memp_init>
  pbuf_init();
  netif_init();
 80099ca:	f000 fcf7 	bl	800a3bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80099ce:	f007 fff3 	bl	80119b8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80099d2:	f001 fe1f 	bl	800b614 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80099d6:	f007 ff37 	bl	8011848 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80099da:	bf00      	nop
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
	...

080099e4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80099ee:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <ptr_to_mem+0x20>)
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	88fb      	ldrh	r3, [r7, #6]
 80099f4:	4413      	add	r3, r2
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	20010210 	.word	0x20010210

08009a08 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a05      	ldr	r2, [pc, #20]	; (8009a28 <mem_to_ptr+0x20>)
 8009a14:	6812      	ldr	r2, [r2, #0]
 8009a16:	1a9b      	subs	r3, r3, r2
 8009a18:	b29b      	uxth	r3, r3
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	370c      	adds	r7, #12
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	20010210 	.word	0x20010210

08009a2c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009a2c:	b590      	push	{r4, r7, lr}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009a34:	4b45      	ldr	r3, [pc, #276]	; (8009b4c <plug_holes+0x120>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d206      	bcs.n	8009a4c <plug_holes+0x20>
 8009a3e:	4b44      	ldr	r3, [pc, #272]	; (8009b50 <plug_holes+0x124>)
 8009a40:	f240 12df 	movw	r2, #479	; 0x1df
 8009a44:	4943      	ldr	r1, [pc, #268]	; (8009b54 <plug_holes+0x128>)
 8009a46:	4844      	ldr	r0, [pc, #272]	; (8009b58 <plug_holes+0x12c>)
 8009a48:	f00c ff4e 	bl	80168e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009a4c:	4b43      	ldr	r3, [pc, #268]	; (8009b5c <plug_holes+0x130>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d306      	bcc.n	8009a64 <plug_holes+0x38>
 8009a56:	4b3e      	ldr	r3, [pc, #248]	; (8009b50 <plug_holes+0x124>)
 8009a58:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009a5c:	4940      	ldr	r1, [pc, #256]	; (8009b60 <plug_holes+0x134>)
 8009a5e:	483e      	ldr	r0, [pc, #248]	; (8009b58 <plug_holes+0x12c>)
 8009a60:	f00c ff42 	bl	80168e8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	791b      	ldrb	r3, [r3, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d006      	beq.n	8009a7a <plug_holes+0x4e>
 8009a6c:	4b38      	ldr	r3, [pc, #224]	; (8009b50 <plug_holes+0x124>)
 8009a6e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009a72:	493c      	ldr	r1, [pc, #240]	; (8009b64 <plug_holes+0x138>)
 8009a74:	4838      	ldr	r0, [pc, #224]	; (8009b58 <plug_holes+0x12c>)
 8009a76:	f00c ff37 	bl	80168e8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009a82:	d906      	bls.n	8009a92 <plug_holes+0x66>
 8009a84:	4b32      	ldr	r3, [pc, #200]	; (8009b50 <plug_holes+0x124>)
 8009a86:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009a8a:	4937      	ldr	r1, [pc, #220]	; (8009b68 <plug_holes+0x13c>)
 8009a8c:	4832      	ldr	r0, [pc, #200]	; (8009b58 <plug_holes+0x12c>)
 8009a8e:	f00c ff2b 	bl	80168e8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7ff ffa4 	bl	80099e4 <ptr_to_mem>
 8009a9c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	429a      	cmp	r2, r3
 8009aa4:	d024      	beq.n	8009af0 <plug_holes+0xc4>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	791b      	ldrb	r3, [r3, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d120      	bne.n	8009af0 <plug_holes+0xc4>
 8009aae:	4b2b      	ldr	r3, [pc, #172]	; (8009b5c <plug_holes+0x130>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d01b      	beq.n	8009af0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009ab8:	4b2c      	ldr	r3, [pc, #176]	; (8009b6c <plug_holes+0x140>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d102      	bne.n	8009ac8 <plug_holes+0x9c>
      lfree = mem;
 8009ac2:	4a2a      	ldr	r2, [pc, #168]	; (8009b6c <plug_holes+0x140>)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	881a      	ldrh	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ad8:	d00a      	beq.n	8009af0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff ff80 	bl	80099e4 <ptr_to_mem>
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7ff ff8e 	bl	8009a08 <mem_to_ptr>
 8009aec:	4603      	mov	r3, r0
 8009aee:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	885b      	ldrh	r3, [r3, #2]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7ff ff75 	bl	80099e4 <ptr_to_mem>
 8009afa:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d01f      	beq.n	8009b44 <plug_holes+0x118>
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	791b      	ldrb	r3, [r3, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d11b      	bne.n	8009b44 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009b0c:	4b17      	ldr	r3, [pc, #92]	; (8009b6c <plug_holes+0x140>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d102      	bne.n	8009b1c <plug_holes+0xf0>
      lfree = pmem;
 8009b16:	4a15      	ldr	r2, [pc, #84]	; (8009b6c <plug_holes+0x140>)
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	881a      	ldrh	r2, [r3, #0]
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	881b      	ldrh	r3, [r3, #0]
 8009b28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009b2c:	d00a      	beq.n	8009b44 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7ff ff56 	bl	80099e4 <ptr_to_mem>
 8009b38:	4604      	mov	r4, r0
 8009b3a:	68b8      	ldr	r0, [r7, #8]
 8009b3c:	f7ff ff64 	bl	8009a08 <mem_to_ptr>
 8009b40:	4603      	mov	r3, r0
 8009b42:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009b44:	bf00      	nop
 8009b46:	3714      	adds	r7, #20
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd90      	pop	{r4, r7, pc}
 8009b4c:	20010210 	.word	0x20010210
 8009b50:	08017f60 	.word	0x08017f60
 8009b54:	08017f90 	.word	0x08017f90
 8009b58:	08017fa8 	.word	0x08017fa8
 8009b5c:	20010214 	.word	0x20010214
 8009b60:	08017fd0 	.word	0x08017fd0
 8009b64:	08017fec 	.word	0x08017fec
 8009b68:	08018008 	.word	0x08018008
 8009b6c:	2001021c 	.word	0x2001021c

08009b70 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009b76:	4b1f      	ldr	r3, [pc, #124]	; (8009bf4 <mem_init+0x84>)
 8009b78:	3303      	adds	r3, #3
 8009b7a:	f023 0303 	bic.w	r3, r3, #3
 8009b7e:	461a      	mov	r2, r3
 8009b80:	4b1d      	ldr	r3, [pc, #116]	; (8009bf8 <mem_init+0x88>)
 8009b82:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009b84:	4b1c      	ldr	r3, [pc, #112]	; (8009bf8 <mem_init+0x88>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009b90:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009b9e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009ba2:	f7ff ff1f 	bl	80099e4 <ptr_to_mem>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	4b14      	ldr	r3, [pc, #80]	; (8009bfc <mem_init+0x8c>)
 8009baa:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8009bac:	4b13      	ldr	r3, [pc, #76]	; (8009bfc <mem_init+0x8c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009bb4:	4b11      	ldr	r3, [pc, #68]	; (8009bfc <mem_init+0x8c>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009bbc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009bbe:	4b0f      	ldr	r3, [pc, #60]	; (8009bfc <mem_init+0x8c>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009bc6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009bc8:	4b0b      	ldr	r3, [pc, #44]	; (8009bf8 <mem_init+0x88>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a0c      	ldr	r2, [pc, #48]	; (8009c00 <mem_init+0x90>)
 8009bce:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009bd0:	480c      	ldr	r0, [pc, #48]	; (8009c04 <mem_init+0x94>)
 8009bd2:	f00c fdb9 	bl	8016748 <sys_mutex_new>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d006      	beq.n	8009bea <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009bdc:	4b0a      	ldr	r3, [pc, #40]	; (8009c08 <mem_init+0x98>)
 8009bde:	f240 221f 	movw	r2, #543	; 0x21f
 8009be2:	490a      	ldr	r1, [pc, #40]	; (8009c0c <mem_init+0x9c>)
 8009be4:	480a      	ldr	r0, [pc, #40]	; (8009c10 <mem_init+0xa0>)
 8009be6:	f00c fe7f 	bl	80168e8 <iprintf>
  }
}
 8009bea:	bf00      	nop
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	200136f8 	.word	0x200136f8
 8009bf8:	20010210 	.word	0x20010210
 8009bfc:	20010214 	.word	0x20010214
 8009c00:	2001021c 	.word	0x2001021c
 8009c04:	20010218 	.word	0x20010218
 8009c08:	08017f60 	.word	0x08017f60
 8009c0c:	08018034 	.word	0x08018034
 8009c10:	08017fa8 	.word	0x08017fa8

08009c14 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff fef3 	bl	8009a08 <mem_to_ptr>
 8009c22:	4603      	mov	r3, r0
 8009c24:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	881b      	ldrh	r3, [r3, #0]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7ff feda 	bl	80099e4 <ptr_to_mem>
 8009c30:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	885b      	ldrh	r3, [r3, #2]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7ff fed4 	bl	80099e4 <ptr_to_mem>
 8009c3c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	881b      	ldrh	r3, [r3, #0]
 8009c42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009c46:	d818      	bhi.n	8009c7a <mem_link_valid+0x66>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	885b      	ldrh	r3, [r3, #2]
 8009c4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009c50:	d813      	bhi.n	8009c7a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009c56:	8afa      	ldrh	r2, [r7, #22]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d004      	beq.n	8009c66 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	881b      	ldrh	r3, [r3, #0]
 8009c60:	8afa      	ldrh	r2, [r7, #22]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d109      	bne.n	8009c7a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009c66:	4b08      	ldr	r3, [pc, #32]	; (8009c88 <mem_link_valid+0x74>)
 8009c68:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d006      	beq.n	8009c7e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	885b      	ldrh	r3, [r3, #2]
 8009c74:	8afa      	ldrh	r2, [r7, #22]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d001      	beq.n	8009c7e <mem_link_valid+0x6a>
    return 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	e000      	b.n	8009c80 <mem_link_valid+0x6c>
  }
  return 1;
 8009c7e:	2301      	movs	r3, #1
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3718      	adds	r7, #24
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	20010214 	.word	0x20010214

08009c8c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b088      	sub	sp, #32
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d070      	beq.n	8009d7c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f003 0303 	and.w	r3, r3, #3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00d      	beq.n	8009cc0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8009ca4:	4b37      	ldr	r3, [pc, #220]	; (8009d84 <mem_free+0xf8>)
 8009ca6:	f240 2273 	movw	r2, #627	; 0x273
 8009caa:	4937      	ldr	r1, [pc, #220]	; (8009d88 <mem_free+0xfc>)
 8009cac:	4837      	ldr	r0, [pc, #220]	; (8009d8c <mem_free+0x100>)
 8009cae:	f00c fe1b 	bl	80168e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009cb2:	f00c fd9b 	bl	80167ec <sys_arch_protect>
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f00c fda5 	bl	8016808 <sys_arch_unprotect>
    return;
 8009cbe:	e05e      	b.n	8009d7e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3b08      	subs	r3, #8
 8009cc4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8009cc6:	4b32      	ldr	r3, [pc, #200]	; (8009d90 <mem_free+0x104>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	69fa      	ldr	r2, [r7, #28]
 8009ccc:	429a      	cmp	r2, r3
 8009cce:	d306      	bcc.n	8009cde <mem_free+0x52>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f103 020c 	add.w	r2, r3, #12
 8009cd6:	4b2f      	ldr	r3, [pc, #188]	; (8009d94 <mem_free+0x108>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d90d      	bls.n	8009cfa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8009cde:	4b29      	ldr	r3, [pc, #164]	; (8009d84 <mem_free+0xf8>)
 8009ce0:	f240 227f 	movw	r2, #639	; 0x27f
 8009ce4:	492c      	ldr	r1, [pc, #176]	; (8009d98 <mem_free+0x10c>)
 8009ce6:	4829      	ldr	r0, [pc, #164]	; (8009d8c <mem_free+0x100>)
 8009ce8:	f00c fdfe 	bl	80168e8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009cec:	f00c fd7e 	bl	80167ec <sys_arch_protect>
 8009cf0:	6138      	str	r0, [r7, #16]
 8009cf2:	6938      	ldr	r0, [r7, #16]
 8009cf4:	f00c fd88 	bl	8016808 <sys_arch_unprotect>
    return;
 8009cf8:	e041      	b.n	8009d7e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009cfa:	4828      	ldr	r0, [pc, #160]	; (8009d9c <mem_free+0x110>)
 8009cfc:	f00c fd3a 	bl	8016774 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	791b      	ldrb	r3, [r3, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d110      	bne.n	8009d2a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8009d08:	4b1e      	ldr	r3, [pc, #120]	; (8009d84 <mem_free+0xf8>)
 8009d0a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8009d0e:	4924      	ldr	r1, [pc, #144]	; (8009da0 <mem_free+0x114>)
 8009d10:	481e      	ldr	r0, [pc, #120]	; (8009d8c <mem_free+0x100>)
 8009d12:	f00c fde9 	bl	80168e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009d16:	4821      	ldr	r0, [pc, #132]	; (8009d9c <mem_free+0x110>)
 8009d18:	f00c fd3b 	bl	8016792 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009d1c:	f00c fd66 	bl	80167ec <sys_arch_protect>
 8009d20:	6178      	str	r0, [r7, #20]
 8009d22:	6978      	ldr	r0, [r7, #20]
 8009d24:	f00c fd70 	bl	8016808 <sys_arch_unprotect>
    return;
 8009d28:	e029      	b.n	8009d7e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8009d2a:	69f8      	ldr	r0, [r7, #28]
 8009d2c:	f7ff ff72 	bl	8009c14 <mem_link_valid>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d110      	bne.n	8009d58 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8009d36:	4b13      	ldr	r3, [pc, #76]	; (8009d84 <mem_free+0xf8>)
 8009d38:	f240 2295 	movw	r2, #661	; 0x295
 8009d3c:	4919      	ldr	r1, [pc, #100]	; (8009da4 <mem_free+0x118>)
 8009d3e:	4813      	ldr	r0, [pc, #76]	; (8009d8c <mem_free+0x100>)
 8009d40:	f00c fdd2 	bl	80168e8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8009d44:	4815      	ldr	r0, [pc, #84]	; (8009d9c <mem_free+0x110>)
 8009d46:	f00c fd24 	bl	8016792 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009d4a:	f00c fd4f 	bl	80167ec <sys_arch_protect>
 8009d4e:	61b8      	str	r0, [r7, #24]
 8009d50:	69b8      	ldr	r0, [r7, #24]
 8009d52:	f00c fd59 	bl	8016808 <sys_arch_unprotect>
    return;
 8009d56:	e012      	b.n	8009d7e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009d5e:	4b12      	ldr	r3, [pc, #72]	; (8009da8 <mem_free+0x11c>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69fa      	ldr	r2, [r7, #28]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d202      	bcs.n	8009d6e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8009d68:	4a0f      	ldr	r2, [pc, #60]	; (8009da8 <mem_free+0x11c>)
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8009d6e:	69f8      	ldr	r0, [r7, #28]
 8009d70:	f7ff fe5c 	bl	8009a2c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009d74:	4809      	ldr	r0, [pc, #36]	; (8009d9c <mem_free+0x110>)
 8009d76:	f00c fd0c 	bl	8016792 <sys_mutex_unlock>
 8009d7a:	e000      	b.n	8009d7e <mem_free+0xf2>
    return;
 8009d7c:	bf00      	nop
}
 8009d7e:	3720      	adds	r7, #32
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	08017f60 	.word	0x08017f60
 8009d88:	08018050 	.word	0x08018050
 8009d8c:	08017fa8 	.word	0x08017fa8
 8009d90:	20010210 	.word	0x20010210
 8009d94:	20010214 	.word	0x20010214
 8009d98:	08018074 	.word	0x08018074
 8009d9c:	20010218 	.word	0x20010218
 8009da0:	08018090 	.word	0x08018090
 8009da4:	080180b8 	.word	0x080180b8
 8009da8:	2001021c 	.word	0x2001021c

08009dac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	460b      	mov	r3, r1
 8009db6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8009db8:	887b      	ldrh	r3, [r7, #2]
 8009dba:	3303      	adds	r3, #3
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	f023 0303 	bic.w	r3, r3, #3
 8009dc2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8009dc4:	8bfb      	ldrh	r3, [r7, #30]
 8009dc6:	2b0b      	cmp	r3, #11
 8009dc8:	d801      	bhi.n	8009dce <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8009dca:	230c      	movs	r3, #12
 8009dcc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8009dce:	8bfb      	ldrh	r3, [r7, #30]
 8009dd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009dd4:	d803      	bhi.n	8009dde <mem_trim+0x32>
 8009dd6:	8bfa      	ldrh	r2, [r7, #30]
 8009dd8:	887b      	ldrh	r3, [r7, #2]
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d201      	bcs.n	8009de2 <mem_trim+0x36>
    return NULL;
 8009dde:	2300      	movs	r3, #0
 8009de0:	e0d8      	b.n	8009f94 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009de2:	4b6e      	ldr	r3, [pc, #440]	; (8009f9c <mem_trim+0x1f0>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d304      	bcc.n	8009df6 <mem_trim+0x4a>
 8009dec:	4b6c      	ldr	r3, [pc, #432]	; (8009fa0 <mem_trim+0x1f4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d306      	bcc.n	8009e04 <mem_trim+0x58>
 8009df6:	4b6b      	ldr	r3, [pc, #428]	; (8009fa4 <mem_trim+0x1f8>)
 8009df8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8009dfc:	496a      	ldr	r1, [pc, #424]	; (8009fa8 <mem_trim+0x1fc>)
 8009dfe:	486b      	ldr	r0, [pc, #428]	; (8009fac <mem_trim+0x200>)
 8009e00:	f00c fd72 	bl	80168e8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009e04:	4b65      	ldr	r3, [pc, #404]	; (8009f9c <mem_trim+0x1f0>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d304      	bcc.n	8009e18 <mem_trim+0x6c>
 8009e0e:	4b64      	ldr	r3, [pc, #400]	; (8009fa0 <mem_trim+0x1f4>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d307      	bcc.n	8009e28 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8009e18:	f00c fce8 	bl	80167ec <sys_arch_protect>
 8009e1c:	60b8      	str	r0, [r7, #8]
 8009e1e:	68b8      	ldr	r0, [r7, #8]
 8009e20:	f00c fcf2 	bl	8016808 <sys_arch_unprotect>
    return rmem;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	e0b5      	b.n	8009f94 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	3b08      	subs	r3, #8
 8009e2c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8009e2e:	69b8      	ldr	r0, [r7, #24]
 8009e30:	f7ff fdea 	bl	8009a08 <mem_to_ptr>
 8009e34:	4603      	mov	r3, r0
 8009e36:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	881a      	ldrh	r2, [r3, #0]
 8009e3c:	8afb      	ldrh	r3, [r7, #22]
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	3b08      	subs	r3, #8
 8009e44:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8009e46:	8bfa      	ldrh	r2, [r7, #30]
 8009e48:	8abb      	ldrh	r3, [r7, #20]
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d906      	bls.n	8009e5c <mem_trim+0xb0>
 8009e4e:	4b55      	ldr	r3, [pc, #340]	; (8009fa4 <mem_trim+0x1f8>)
 8009e50:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8009e54:	4956      	ldr	r1, [pc, #344]	; (8009fb0 <mem_trim+0x204>)
 8009e56:	4855      	ldr	r0, [pc, #340]	; (8009fac <mem_trim+0x200>)
 8009e58:	f00c fd46 	bl	80168e8 <iprintf>
  if (newsize > size) {
 8009e5c:	8bfa      	ldrh	r2, [r7, #30]
 8009e5e:	8abb      	ldrh	r3, [r7, #20]
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d901      	bls.n	8009e68 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8009e64:	2300      	movs	r3, #0
 8009e66:	e095      	b.n	8009f94 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8009e68:	8bfa      	ldrh	r2, [r7, #30]
 8009e6a:	8abb      	ldrh	r3, [r7, #20]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d101      	bne.n	8009e74 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	e08f      	b.n	8009f94 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009e74:	484f      	ldr	r0, [pc, #316]	; (8009fb4 <mem_trim+0x208>)
 8009e76:	f00c fc7d 	bl	8016774 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7ff fdb0 	bl	80099e4 <ptr_to_mem>
 8009e84:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	791b      	ldrb	r3, [r3, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d13f      	bne.n	8009f0e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009e96:	d106      	bne.n	8009ea6 <mem_trim+0xfa>
 8009e98:	4b42      	ldr	r3, [pc, #264]	; (8009fa4 <mem_trim+0x1f8>)
 8009e9a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8009e9e:	4946      	ldr	r1, [pc, #280]	; (8009fb8 <mem_trim+0x20c>)
 8009ea0:	4842      	ldr	r0, [pc, #264]	; (8009fac <mem_trim+0x200>)
 8009ea2:	f00c fd21 	bl	80168e8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	881b      	ldrh	r3, [r3, #0]
 8009eaa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009eac:	8afa      	ldrh	r2, [r7, #22]
 8009eae:	8bfb      	ldrh	r3, [r7, #30]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	3308      	adds	r3, #8
 8009eb6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8009eb8:	4b40      	ldr	r3, [pc, #256]	; (8009fbc <mem_trim+0x210>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d106      	bne.n	8009ed0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8009ec2:	89fb      	ldrh	r3, [r7, #14]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7ff fd8d 	bl	80099e4 <ptr_to_mem>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	4b3b      	ldr	r3, [pc, #236]	; (8009fbc <mem_trim+0x210>)
 8009ece:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8009ed0:	89fb      	ldrh	r3, [r7, #14]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f7ff fd86 	bl	80099e4 <ptr_to_mem>
 8009ed8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	2200      	movs	r2, #0
 8009ede:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	89ba      	ldrh	r2, [r7, #12]
 8009ee4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	8afa      	ldrh	r2, [r7, #22]
 8009eea:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	89fa      	ldrh	r2, [r7, #14]
 8009ef0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	881b      	ldrh	r3, [r3, #0]
 8009ef6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009efa:	d047      	beq.n	8009f8c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	881b      	ldrh	r3, [r3, #0]
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7ff fd6f 	bl	80099e4 <ptr_to_mem>
 8009f06:	4602      	mov	r2, r0
 8009f08:	89fb      	ldrh	r3, [r7, #14]
 8009f0a:	8053      	strh	r3, [r2, #2]
 8009f0c:	e03e      	b.n	8009f8c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8009f0e:	8bfb      	ldrh	r3, [r7, #30]
 8009f10:	f103 0214 	add.w	r2, r3, #20
 8009f14:	8abb      	ldrh	r3, [r7, #20]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d838      	bhi.n	8009f8c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8009f1a:	8afa      	ldrh	r2, [r7, #22]
 8009f1c:	8bfb      	ldrh	r3, [r7, #30]
 8009f1e:	4413      	add	r3, r2
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	3308      	adds	r3, #8
 8009f24:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f2e:	d106      	bne.n	8009f3e <mem_trim+0x192>
 8009f30:	4b1c      	ldr	r3, [pc, #112]	; (8009fa4 <mem_trim+0x1f8>)
 8009f32:	f240 3216 	movw	r2, #790	; 0x316
 8009f36:	4920      	ldr	r1, [pc, #128]	; (8009fb8 <mem_trim+0x20c>)
 8009f38:	481c      	ldr	r0, [pc, #112]	; (8009fac <mem_trim+0x200>)
 8009f3a:	f00c fcd5 	bl	80168e8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8009f3e:	89fb      	ldrh	r3, [r7, #14]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7ff fd4f 	bl	80099e4 <ptr_to_mem>
 8009f46:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8009f48:	4b1c      	ldr	r3, [pc, #112]	; (8009fbc <mem_trim+0x210>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	693a      	ldr	r2, [r7, #16]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d202      	bcs.n	8009f58 <mem_trim+0x1ac>
      lfree = mem2;
 8009f52:	4a1a      	ldr	r2, [pc, #104]	; (8009fbc <mem_trim+0x210>)
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	881a      	ldrh	r2, [r3, #0]
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	8afa      	ldrh	r2, [r7, #22]
 8009f6a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	89fa      	ldrh	r2, [r7, #14]
 8009f70:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	881b      	ldrh	r3, [r3, #0]
 8009f76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f7a:	d007      	beq.n	8009f8c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	881b      	ldrh	r3, [r3, #0]
 8009f80:	4618      	mov	r0, r3
 8009f82:	f7ff fd2f 	bl	80099e4 <ptr_to_mem>
 8009f86:	4602      	mov	r2, r0
 8009f88:	89fb      	ldrh	r3, [r7, #14]
 8009f8a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8009f8c:	4809      	ldr	r0, [pc, #36]	; (8009fb4 <mem_trim+0x208>)
 8009f8e:	f00c fc00 	bl	8016792 <sys_mutex_unlock>
  return rmem;
 8009f92:	687b      	ldr	r3, [r7, #4]
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3720      	adds	r7, #32
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	20010210 	.word	0x20010210
 8009fa0:	20010214 	.word	0x20010214
 8009fa4:	08017f60 	.word	0x08017f60
 8009fa8:	080180ec 	.word	0x080180ec
 8009fac:	08017fa8 	.word	0x08017fa8
 8009fb0:	08018104 	.word	0x08018104
 8009fb4:	20010218 	.word	0x20010218
 8009fb8:	08018124 	.word	0x08018124
 8009fbc:	2001021c 	.word	0x2001021c

08009fc0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8009fca:	88fb      	ldrh	r3, [r7, #6]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <mem_malloc+0x14>
    return NULL;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	e0e2      	b.n	800a19a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8009fd4:	88fb      	ldrh	r3, [r7, #6]
 8009fd6:	3303      	adds	r3, #3
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	f023 0303 	bic.w	r3, r3, #3
 8009fde:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8009fe0:	8bbb      	ldrh	r3, [r7, #28]
 8009fe2:	2b0b      	cmp	r3, #11
 8009fe4:	d801      	bhi.n	8009fea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8009fe6:	230c      	movs	r3, #12
 8009fe8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8009fea:	8bbb      	ldrh	r3, [r7, #28]
 8009fec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ff0:	d803      	bhi.n	8009ffa <mem_malloc+0x3a>
 8009ff2:	8bba      	ldrh	r2, [r7, #28]
 8009ff4:	88fb      	ldrh	r3, [r7, #6]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d201      	bcs.n	8009ffe <mem_malloc+0x3e>
    return NULL;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	e0cd      	b.n	800a19a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009ffe:	4869      	ldr	r0, [pc, #420]	; (800a1a4 <mem_malloc+0x1e4>)
 800a000:	f00c fbb8 	bl	8016774 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a004:	4b68      	ldr	r3, [pc, #416]	; (800a1a8 <mem_malloc+0x1e8>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4618      	mov	r0, r3
 800a00a:	f7ff fcfd 	bl	8009a08 <mem_to_ptr>
 800a00e:	4603      	mov	r3, r0
 800a010:	83fb      	strh	r3, [r7, #30]
 800a012:	e0b7      	b.n	800a184 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a014:	8bfb      	ldrh	r3, [r7, #30]
 800a016:	4618      	mov	r0, r3
 800a018:	f7ff fce4 	bl	80099e4 <ptr_to_mem>
 800a01c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	791b      	ldrb	r3, [r3, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	f040 80a7 	bne.w	800a176 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	461a      	mov	r2, r3
 800a02e:	8bfb      	ldrh	r3, [r7, #30]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	f1a3 0208 	sub.w	r2, r3, #8
 800a036:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a038:	429a      	cmp	r2, r3
 800a03a:	f0c0 809c 	bcc.w	800a176 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	881b      	ldrh	r3, [r3, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	8bfb      	ldrh	r3, [r7, #30]
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	f1a3 0208 	sub.w	r2, r3, #8
 800a04c:	8bbb      	ldrh	r3, [r7, #28]
 800a04e:	3314      	adds	r3, #20
 800a050:	429a      	cmp	r2, r3
 800a052:	d333      	bcc.n	800a0bc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a054:	8bfa      	ldrh	r2, [r7, #30]
 800a056:	8bbb      	ldrh	r3, [r7, #28]
 800a058:	4413      	add	r3, r2
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	3308      	adds	r3, #8
 800a05e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a060:	8a7b      	ldrh	r3, [r7, #18]
 800a062:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a066:	d106      	bne.n	800a076 <mem_malloc+0xb6>
 800a068:	4b50      	ldr	r3, [pc, #320]	; (800a1ac <mem_malloc+0x1ec>)
 800a06a:	f240 3287 	movw	r2, #903	; 0x387
 800a06e:	4950      	ldr	r1, [pc, #320]	; (800a1b0 <mem_malloc+0x1f0>)
 800a070:	4850      	ldr	r0, [pc, #320]	; (800a1b4 <mem_malloc+0x1f4>)
 800a072:	f00c fc39 	bl	80168e8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a076:	8a7b      	ldrh	r3, [r7, #18]
 800a078:	4618      	mov	r0, r3
 800a07a:	f7ff fcb3 	bl	80099e4 <ptr_to_mem>
 800a07e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	881a      	ldrh	r2, [r3, #0]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	8bfa      	ldrh	r2, [r7, #30]
 800a092:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	8a7a      	ldrh	r2, [r7, #18]
 800a098:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2201      	movs	r2, #1
 800a09e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0a8:	d00b      	beq.n	800a0c2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	881b      	ldrh	r3, [r3, #0]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff fc98 	bl	80099e4 <ptr_to_mem>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	8a7b      	ldrh	r3, [r7, #18]
 800a0b8:	8053      	strh	r3, [r2, #2]
 800a0ba:	e002      	b.n	800a0c2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a0c2:	4b39      	ldr	r3, [pc, #228]	; (800a1a8 <mem_malloc+0x1e8>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d127      	bne.n	800a11c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a0cc:	4b36      	ldr	r3, [pc, #216]	; (800a1a8 <mem_malloc+0x1e8>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a0d2:	e005      	b.n	800a0e0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	881b      	ldrh	r3, [r3, #0]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7ff fc83 	bl	80099e4 <ptr_to_mem>
 800a0de:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a0e0:	69bb      	ldr	r3, [r7, #24]
 800a0e2:	791b      	ldrb	r3, [r3, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d004      	beq.n	800a0f2 <mem_malloc+0x132>
 800a0e8:	4b33      	ldr	r3, [pc, #204]	; (800a1b8 <mem_malloc+0x1f8>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	69ba      	ldr	r2, [r7, #24]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d1f0      	bne.n	800a0d4 <mem_malloc+0x114>
          }
          lfree = cur;
 800a0f2:	4a2d      	ldr	r2, [pc, #180]	; (800a1a8 <mem_malloc+0x1e8>)
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a0f8:	4b2b      	ldr	r3, [pc, #172]	; (800a1a8 <mem_malloc+0x1e8>)
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	4b2e      	ldr	r3, [pc, #184]	; (800a1b8 <mem_malloc+0x1f8>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	429a      	cmp	r2, r3
 800a102:	d00b      	beq.n	800a11c <mem_malloc+0x15c>
 800a104:	4b28      	ldr	r3, [pc, #160]	; (800a1a8 <mem_malloc+0x1e8>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	791b      	ldrb	r3, [r3, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d006      	beq.n	800a11c <mem_malloc+0x15c>
 800a10e:	4b27      	ldr	r3, [pc, #156]	; (800a1ac <mem_malloc+0x1ec>)
 800a110:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a114:	4929      	ldr	r1, [pc, #164]	; (800a1bc <mem_malloc+0x1fc>)
 800a116:	4827      	ldr	r0, [pc, #156]	; (800a1b4 <mem_malloc+0x1f4>)
 800a118:	f00c fbe6 	bl	80168e8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a11c:	4821      	ldr	r0, [pc, #132]	; (800a1a4 <mem_malloc+0x1e4>)
 800a11e:	f00c fb38 	bl	8016792 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a122:	8bba      	ldrh	r2, [r7, #28]
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	4413      	add	r3, r2
 800a128:	3308      	adds	r3, #8
 800a12a:	4a23      	ldr	r2, [pc, #140]	; (800a1b8 <mem_malloc+0x1f8>)
 800a12c:	6812      	ldr	r2, [r2, #0]
 800a12e:	4293      	cmp	r3, r2
 800a130:	d906      	bls.n	800a140 <mem_malloc+0x180>
 800a132:	4b1e      	ldr	r3, [pc, #120]	; (800a1ac <mem_malloc+0x1ec>)
 800a134:	f240 32ba 	movw	r2, #954	; 0x3ba
 800a138:	4921      	ldr	r1, [pc, #132]	; (800a1c0 <mem_malloc+0x200>)
 800a13a:	481e      	ldr	r0, [pc, #120]	; (800a1b4 <mem_malloc+0x1f4>)
 800a13c:	f00c fbd4 	bl	80168e8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	f003 0303 	and.w	r3, r3, #3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d006      	beq.n	800a158 <mem_malloc+0x198>
 800a14a:	4b18      	ldr	r3, [pc, #96]	; (800a1ac <mem_malloc+0x1ec>)
 800a14c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800a150:	491c      	ldr	r1, [pc, #112]	; (800a1c4 <mem_malloc+0x204>)
 800a152:	4818      	ldr	r0, [pc, #96]	; (800a1b4 <mem_malloc+0x1f4>)
 800a154:	f00c fbc8 	bl	80168e8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d006      	beq.n	800a170 <mem_malloc+0x1b0>
 800a162:	4b12      	ldr	r3, [pc, #72]	; (800a1ac <mem_malloc+0x1ec>)
 800a164:	f240 32be 	movw	r2, #958	; 0x3be
 800a168:	4917      	ldr	r1, [pc, #92]	; (800a1c8 <mem_malloc+0x208>)
 800a16a:	4812      	ldr	r0, [pc, #72]	; (800a1b4 <mem_malloc+0x1f4>)
 800a16c:	f00c fbbc 	bl	80168e8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	3308      	adds	r3, #8
 800a174:	e011      	b.n	800a19a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a176:	8bfb      	ldrh	r3, [r7, #30]
 800a178:	4618      	mov	r0, r3
 800a17a:	f7ff fc33 	bl	80099e4 <ptr_to_mem>
 800a17e:	4603      	mov	r3, r0
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a184:	8bfa      	ldrh	r2, [r7, #30]
 800a186:	8bbb      	ldrh	r3, [r7, #28]
 800a188:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a18c:	429a      	cmp	r2, r3
 800a18e:	f4ff af41 	bcc.w	800a014 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a192:	4804      	ldr	r0, [pc, #16]	; (800a1a4 <mem_malloc+0x1e4>)
 800a194:	f00c fafd 	bl	8016792 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3720      	adds	r7, #32
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	20010218 	.word	0x20010218
 800a1a8:	2001021c 	.word	0x2001021c
 800a1ac:	08017f60 	.word	0x08017f60
 800a1b0:	08018124 	.word	0x08018124
 800a1b4:	08017fa8 	.word	0x08017fa8
 800a1b8:	20010214 	.word	0x20010214
 800a1bc:	08018138 	.word	0x08018138
 800a1c0:	08018154 	.word	0x08018154
 800a1c4:	08018184 	.word	0x08018184
 800a1c8:	080181b4 	.word	0x080181b4

0800a1cc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	3303      	adds	r3, #3
 800a1e2:	f023 0303 	bic.w	r3, r3, #3
 800a1e6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	60fb      	str	r3, [r7, #12]
 800a1ec:	e011      	b.n	800a212 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	4413      	add	r3, r2
 800a20a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	3301      	adds	r3, #1
 800a210:	60fb      	str	r3, [r7, #12]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	885b      	ldrh	r3, [r3, #2]
 800a216:	461a      	mov	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4293      	cmp	r3, r2
 800a21c:	dbe7      	blt.n	800a1ee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a21e:	bf00      	nop
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
	...

0800a22c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a232:	2300      	movs	r3, #0
 800a234:	80fb      	strh	r3, [r7, #6]
 800a236:	e009      	b.n	800a24c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a238:	88fb      	ldrh	r3, [r7, #6]
 800a23a:	4a08      	ldr	r2, [pc, #32]	; (800a25c <memp_init+0x30>)
 800a23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a240:	4618      	mov	r0, r3
 800a242:	f7ff ffc3 	bl	800a1cc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a246:	88fb      	ldrh	r3, [r7, #6]
 800a248:	3301      	adds	r3, #1
 800a24a:	80fb      	strh	r3, [r7, #6]
 800a24c:	88fb      	ldrh	r3, [r7, #6]
 800a24e:	2b0c      	cmp	r3, #12
 800a250:	d9f2      	bls.n	800a238 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a252:	bf00      	nop
 800a254:	3708      	adds	r7, #8
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	0803ad04 	.word	0x0803ad04

0800a260 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a268:	f00c fac0 	bl	80167ec <sys_arch_protect>
 800a26c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d015      	beq.n	800a2a8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	6812      	ldr	r2, [r2, #0]
 800a284:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	f003 0303 	and.w	r3, r3, #3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d006      	beq.n	800a29e <do_memp_malloc_pool+0x3e>
 800a290:	4b09      	ldr	r3, [pc, #36]	; (800a2b8 <do_memp_malloc_pool+0x58>)
 800a292:	f240 1219 	movw	r2, #281	; 0x119
 800a296:	4909      	ldr	r1, [pc, #36]	; (800a2bc <do_memp_malloc_pool+0x5c>)
 800a298:	4809      	ldr	r0, [pc, #36]	; (800a2c0 <do_memp_malloc_pool+0x60>)
 800a29a:	f00c fb25 	bl	80168e8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a29e:	68f8      	ldr	r0, [r7, #12]
 800a2a0:	f00c fab2 	bl	8016808 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	e003      	b.n	800a2b0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	f00c faad 	bl	8016808 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	080181d8 	.word	0x080181d8
 800a2bc:	08018208 	.word	0x08018208
 800a2c0:	0801822c 	.word	0x0801822c

0800a2c4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a2ce:	79fb      	ldrb	r3, [r7, #7]
 800a2d0:	2b0c      	cmp	r3, #12
 800a2d2:	d908      	bls.n	800a2e6 <memp_malloc+0x22>
 800a2d4:	4b0a      	ldr	r3, [pc, #40]	; (800a300 <memp_malloc+0x3c>)
 800a2d6:	f240 1257 	movw	r2, #343	; 0x157
 800a2da:	490a      	ldr	r1, [pc, #40]	; (800a304 <memp_malloc+0x40>)
 800a2dc:	480a      	ldr	r0, [pc, #40]	; (800a308 <memp_malloc+0x44>)
 800a2de:	f00c fb03 	bl	80168e8 <iprintf>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	e008      	b.n	800a2f8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a2e6:	79fb      	ldrb	r3, [r7, #7]
 800a2e8:	4a08      	ldr	r2, [pc, #32]	; (800a30c <memp_malloc+0x48>)
 800a2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f7ff ffb6 	bl	800a260 <do_memp_malloc_pool>
 800a2f4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3710      	adds	r7, #16
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	080181d8 	.word	0x080181d8
 800a304:	08018268 	.word	0x08018268
 800a308:	0801822c 	.word	0x0801822c
 800a30c:	0803ad04 	.word	0x0803ad04

0800a310 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	f003 0303 	and.w	r3, r3, #3
 800a320:	2b00      	cmp	r3, #0
 800a322:	d006      	beq.n	800a332 <do_memp_free_pool+0x22>
 800a324:	4b0d      	ldr	r3, [pc, #52]	; (800a35c <do_memp_free_pool+0x4c>)
 800a326:	f240 126d 	movw	r2, #365	; 0x16d
 800a32a:	490d      	ldr	r1, [pc, #52]	; (800a360 <do_memp_free_pool+0x50>)
 800a32c:	480d      	ldr	r0, [pc, #52]	; (800a364 <do_memp_free_pool+0x54>)
 800a32e:	f00c fadb 	bl	80168e8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a336:	f00c fa59 	bl	80167ec <sys_arch_protect>
 800a33a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	68fa      	ldr	r2, [r7, #12]
 800a34c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a34e:	68b8      	ldr	r0, [r7, #8]
 800a350:	f00c fa5a 	bl	8016808 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a354:	bf00      	nop
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}
 800a35c:	080181d8 	.word	0x080181d8
 800a360:	08018288 	.word	0x08018288
 800a364:	0801822c 	.word	0x0801822c

0800a368 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	4603      	mov	r3, r0
 800a370:	6039      	str	r1, [r7, #0]
 800a372:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a374:	79fb      	ldrb	r3, [r7, #7]
 800a376:	2b0c      	cmp	r3, #12
 800a378:	d907      	bls.n	800a38a <memp_free+0x22>
 800a37a:	4b0c      	ldr	r3, [pc, #48]	; (800a3ac <memp_free+0x44>)
 800a37c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a380:	490b      	ldr	r1, [pc, #44]	; (800a3b0 <memp_free+0x48>)
 800a382:	480c      	ldr	r0, [pc, #48]	; (800a3b4 <memp_free+0x4c>)
 800a384:	f00c fab0 	bl	80168e8 <iprintf>
 800a388:	e00c      	b.n	800a3a4 <memp_free+0x3c>

  if (mem == NULL) {
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d008      	beq.n	800a3a2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a390:	79fb      	ldrb	r3, [r7, #7]
 800a392:	4a09      	ldr	r2, [pc, #36]	; (800a3b8 <memp_free+0x50>)
 800a394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7ff ffb8 	bl	800a310 <do_memp_free_pool>
 800a3a0:	e000      	b.n	800a3a4 <memp_free+0x3c>
    return;
 800a3a2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	080181d8 	.word	0x080181d8
 800a3b0:	080182a8 	.word	0x080182a8
 800a3b4:	0801822c 	.word	0x0801822c
 800a3b8:	0803ad04 	.word	0x0803ad04

0800a3bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a3c0:	bf00      	nop
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c8:	4770      	bx	lr
	...

0800a3cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d108      	bne.n	800a3f2 <netif_add+0x26>
 800a3e0:	4b5b      	ldr	r3, [pc, #364]	; (800a550 <netif_add+0x184>)
 800a3e2:	f240 1227 	movw	r2, #295	; 0x127
 800a3e6:	495b      	ldr	r1, [pc, #364]	; (800a554 <netif_add+0x188>)
 800a3e8:	485b      	ldr	r0, [pc, #364]	; (800a558 <netif_add+0x18c>)
 800a3ea:	f00c fa7d 	bl	80168e8 <iprintf>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	e0a9      	b.n	800a546 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d108      	bne.n	800a40a <netif_add+0x3e>
 800a3f8:	4b55      	ldr	r3, [pc, #340]	; (800a550 <netif_add+0x184>)
 800a3fa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a3fe:	4957      	ldr	r1, [pc, #348]	; (800a55c <netif_add+0x190>)
 800a400:	4855      	ldr	r0, [pc, #340]	; (800a558 <netif_add+0x18c>)
 800a402:	f00c fa71 	bl	80168e8 <iprintf>
 800a406:	2300      	movs	r3, #0
 800a408:	e09d      	b.n	800a546 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d101      	bne.n	800a414 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a410:	4b53      	ldr	r3, [pc, #332]	; (800a560 <netif_add+0x194>)
 800a412:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a41a:	4b51      	ldr	r3, [pc, #324]	; (800a560 <netif_add+0x194>)
 800a41c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a424:	4b4e      	ldr	r3, [pc, #312]	; (800a560 <netif_add+0x194>)
 800a426:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2200      	movs	r2, #0
 800a438:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4a49      	ldr	r2, [pc, #292]	; (800a564 <netif_add+0x198>)
 800a43e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	3324      	adds	r3, #36	; 0x24
 800a452:	2204      	movs	r2, #4
 800a454:	2100      	movs	r1, #0
 800a456:	4618      	mov	r0, r3
 800a458:	f00c fa3d 	bl	80168d6 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6a3a      	ldr	r2, [r7, #32]
 800a466:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a468:	4b3f      	ldr	r3, [pc, #252]	; (800a568 <netif_add+0x19c>)
 800a46a:	781a      	ldrb	r2, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a476:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	68b9      	ldr	r1, [r7, #8]
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f914 	bl	800a6ac <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	4798      	blx	r3
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <netif_add+0xc8>
    return NULL;
 800a490:	2300      	movs	r3, #0
 800a492:	e058      	b.n	800a546 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a49a:	2bff      	cmp	r3, #255	; 0xff
 800a49c:	d103      	bne.n	800a4a6 <netif_add+0xda>
        netif->num = 0;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a4aa:	4b30      	ldr	r3, [pc, #192]	; (800a56c <netif_add+0x1a0>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	617b      	str	r3, [r7, #20]
 800a4b0:	e02b      	b.n	800a50a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a4b2:	697a      	ldr	r2, [r7, #20]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d106      	bne.n	800a4c8 <netif_add+0xfc>
 800a4ba:	4b25      	ldr	r3, [pc, #148]	; (800a550 <netif_add+0x184>)
 800a4bc:	f240 128b 	movw	r2, #395	; 0x18b
 800a4c0:	492b      	ldr	r1, [pc, #172]	; (800a570 <netif_add+0x1a4>)
 800a4c2:	4825      	ldr	r0, [pc, #148]	; (800a558 <netif_add+0x18c>)
 800a4c4:	f00c fa10 	bl	80168e8 <iprintf>
        num_netifs++;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	2bff      	cmp	r3, #255	; 0xff
 800a4d2:	dd06      	ble.n	800a4e2 <netif_add+0x116>
 800a4d4:	4b1e      	ldr	r3, [pc, #120]	; (800a550 <netif_add+0x184>)
 800a4d6:	f240 128d 	movw	r2, #397	; 0x18d
 800a4da:	4926      	ldr	r1, [pc, #152]	; (800a574 <netif_add+0x1a8>)
 800a4dc:	481e      	ldr	r0, [pc, #120]	; (800a558 <netif_add+0x18c>)
 800a4de:	f00c fa03 	bl	80168e8 <iprintf>
        if (netif2->num == netif->num) {
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d108      	bne.n	800a504 <netif_add+0x138>
          netif->num++;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800a502:	e005      	b.n	800a510 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	617b      	str	r3, [r7, #20]
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1d0      	bne.n	800a4b2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d1be      	bne.n	800a494 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a51c:	2bfe      	cmp	r3, #254	; 0xfe
 800a51e:	d103      	bne.n	800a528 <netif_add+0x15c>
    netif_num = 0;
 800a520:	4b11      	ldr	r3, [pc, #68]	; (800a568 <netif_add+0x19c>)
 800a522:	2200      	movs	r2, #0
 800a524:	701a      	strb	r2, [r3, #0]
 800a526:	e006      	b.n	800a536 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a52e:	3301      	adds	r3, #1
 800a530:	b2da      	uxtb	r2, r3
 800a532:	4b0d      	ldr	r3, [pc, #52]	; (800a568 <netif_add+0x19c>)
 800a534:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a536:	4b0d      	ldr	r3, [pc, #52]	; (800a56c <netif_add+0x1a0>)
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a53e:	4a0b      	ldr	r2, [pc, #44]	; (800a56c <netif_add+0x1a0>)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a544:	68fb      	ldr	r3, [r7, #12]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3718      	adds	r7, #24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	080182c4 	.word	0x080182c4
 800a554:	08018358 	.word	0x08018358
 800a558:	08018314 	.word	0x08018314
 800a55c:	08018374 	.word	0x08018374
 800a560:	0803ad88 	.word	0x0803ad88
 800a564:	0800a98f 	.word	0x0800a98f
 800a568:	20010254 	.word	0x20010254
 800a56c:	20016e04 	.word	0x20016e04
 800a570:	08018398 	.word	0x08018398
 800a574:	080183ac 	.word	0x080183ac

0800a578 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f002 fe27 	bl	800d1d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a58a:	6839      	ldr	r1, [r7, #0]
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f007 fe9f 	bl	80122d0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a592:	bf00      	nop
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
	...

0800a59c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b086      	sub	sp, #24
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d106      	bne.n	800a5bc <netif_do_set_ipaddr+0x20>
 800a5ae:	4b1d      	ldr	r3, [pc, #116]	; (800a624 <netif_do_set_ipaddr+0x88>)
 800a5b0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a5b4:	491c      	ldr	r1, [pc, #112]	; (800a628 <netif_do_set_ipaddr+0x8c>)
 800a5b6:	481d      	ldr	r0, [pc, #116]	; (800a62c <netif_do_set_ipaddr+0x90>)
 800a5b8:	f00c f996 	bl	80168e8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d106      	bne.n	800a5d0 <netif_do_set_ipaddr+0x34>
 800a5c2:	4b18      	ldr	r3, [pc, #96]	; (800a624 <netif_do_set_ipaddr+0x88>)
 800a5c4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a5c8:	4917      	ldr	r1, [pc, #92]	; (800a628 <netif_do_set_ipaddr+0x8c>)
 800a5ca:	4818      	ldr	r0, [pc, #96]	; (800a62c <netif_do_set_ipaddr+0x90>)
 800a5cc:	f00c f98c 	bl	80168e8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d01c      	beq.n	800a618 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a5ee:	f107 0314 	add.w	r3, r7, #20
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f7ff ffbf 	bl	800a578 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <netif_do_set_ipaddr+0x6a>
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	e000      	b.n	800a608 <netif_do_set_ipaddr+0x6c>
 800a606:	2300      	movs	r3, #0
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a60c:	2101      	movs	r1, #1
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f000 f8d2 	bl	800a7b8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a614:	2301      	movs	r3, #1
 800a616:	e000      	b.n	800a61a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3718      	adds	r7, #24
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	080182c4 	.word	0x080182c4
 800a628:	080183dc 	.word	0x080183dc
 800a62c:	08018314 	.word	0x08018314

0800a630 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3308      	adds	r3, #8
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	429a      	cmp	r2, r3
 800a648:	d00a      	beq.n	800a660 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d002      	beq.n	800a656 <netif_do_set_netmask+0x26>
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	e000      	b.n	800a658 <netif_do_set_netmask+0x28>
 800a656:	2300      	movs	r3, #0
 800a658:	68fa      	ldr	r2, [r7, #12]
 800a65a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a65c:	2301      	movs	r3, #1
 800a65e:	e000      	b.n	800a662 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a66e:	b480      	push	{r7}
 800a670:	b085      	sub	sp, #20
 800a672:	af00      	add	r7, sp, #0
 800a674:	60f8      	str	r0, [r7, #12]
 800a676:	60b9      	str	r1, [r7, #8]
 800a678:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	330c      	adds	r3, #12
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	429a      	cmp	r2, r3
 800a686:	d00a      	beq.n	800a69e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d002      	beq.n	800a694 <netif_do_set_gw+0x26>
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	e000      	b.n	800a696 <netif_do_set_gw+0x28>
 800a694:	2300      	movs	r3, #0
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a69a:	2301      	movs	r3, #1
 800a69c:	e000      	b.n	800a6a0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b088      	sub	sp, #32
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	607a      	str	r2, [r7, #4]
 800a6b8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800a6c8:	4b1c      	ldr	r3, [pc, #112]	; (800a73c <netif_set_addr+0x90>)
 800a6ca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d101      	bne.n	800a6d6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800a6d2:	4b1a      	ldr	r3, [pc, #104]	; (800a73c <netif_set_addr+0x90>)
 800a6d4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d101      	bne.n	800a6e0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800a6dc:	4b17      	ldr	r3, [pc, #92]	; (800a73c <netif_set_addr+0x90>)
 800a6de:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <netif_set_addr+0x42>
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d101      	bne.n	800a6f2 <netif_set_addr+0x46>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	e000      	b.n	800a6f4 <netif_set_addr+0x48>
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d006      	beq.n	800a70a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a6fc:	f107 0310 	add.w	r3, r7, #16
 800a700:	461a      	mov	r2, r3
 800a702:	68b9      	ldr	r1, [r7, #8]
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f7ff ff49 	bl	800a59c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800a70a:	69fa      	ldr	r2, [r7, #28]
 800a70c:	6879      	ldr	r1, [r7, #4]
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f7ff ff8e 	bl	800a630 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800a714:	69ba      	ldr	r2, [r7, #24]
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f7ff ffa8 	bl	800a66e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d106      	bne.n	800a732 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800a724:	f107 0310 	add.w	r3, r7, #16
 800a728:	461a      	mov	r2, r3
 800a72a:	68b9      	ldr	r1, [r7, #8]
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7ff ff35 	bl	800a59c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800a732:	bf00      	nop
 800a734:	3720      	adds	r7, #32
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	0803ad88 	.word	0x0803ad88

0800a740 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800a740:	b480      	push	{r7}
 800a742:	b083      	sub	sp, #12
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800a748:	4a04      	ldr	r2, [pc, #16]	; (800a75c <netif_set_default+0x1c>)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800a74e:	bf00      	nop
 800a750:	370c      	adds	r7, #12
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	20016e08 	.word	0x20016e08

0800a760 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d107      	bne.n	800a77e <netif_set_up+0x1e>
 800a76e:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <netif_set_up+0x4c>)
 800a770:	f44f 7254 	mov.w	r2, #848	; 0x350
 800a774:	490e      	ldr	r1, [pc, #56]	; (800a7b0 <netif_set_up+0x50>)
 800a776:	480f      	ldr	r0, [pc, #60]	; (800a7b4 <netif_set_up+0x54>)
 800a778:	f00c f8b6 	bl	80168e8 <iprintf>
 800a77c:	e013      	b.n	800a7a6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10c      	bne.n	800a7a6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a792:	f043 0301 	orr.w	r3, r3, #1
 800a796:	b2da      	uxtb	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a79e:	2103      	movs	r1, #3
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 f809 	bl	800a7b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	080182c4 	.word	0x080182c4
 800a7b0:	0801844c 	.word	0x0801844c
 800a7b4:	08018314 	.word	0x08018314

0800a7b8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d106      	bne.n	800a7d8 <netif_issue_reports+0x20>
 800a7ca:	4b18      	ldr	r3, [pc, #96]	; (800a82c <netif_issue_reports+0x74>)
 800a7cc:	f240 326d 	movw	r2, #877	; 0x36d
 800a7d0:	4917      	ldr	r1, [pc, #92]	; (800a830 <netif_issue_reports+0x78>)
 800a7d2:	4818      	ldr	r0, [pc, #96]	; (800a834 <netif_issue_reports+0x7c>)
 800a7d4:	f00c f888 	bl	80168e8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7de:	f003 0304 	and.w	r3, r3, #4
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d01e      	beq.n	800a824 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a7ec:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d017      	beq.n	800a824 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	f003 0301 	and.w	r3, r3, #1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d013      	beq.n	800a826 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	3304      	adds	r3, #4
 800a802:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00e      	beq.n	800a826 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a80e:	f003 0308 	and.w	r3, r3, #8
 800a812:	2b00      	cmp	r3, #0
 800a814:	d007      	beq.n	800a826 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	3304      	adds	r3, #4
 800a81a:	4619      	mov	r1, r3
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f00a fb73 	bl	8014f08 <etharp_request>
 800a822:	e000      	b.n	800a826 <netif_issue_reports+0x6e>
    return;
 800a824:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800a826:	3708      	adds	r7, #8
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}
 800a82c:	080182c4 	.word	0x080182c4
 800a830:	08018468 	.word	0x08018468
 800a834:	08018314 	.word	0x08018314

0800a838 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d107      	bne.n	800a856 <netif_set_down+0x1e>
 800a846:	4b12      	ldr	r3, [pc, #72]	; (800a890 <netif_set_down+0x58>)
 800a848:	f240 329b 	movw	r2, #923	; 0x39b
 800a84c:	4911      	ldr	r1, [pc, #68]	; (800a894 <netif_set_down+0x5c>)
 800a84e:	4812      	ldr	r0, [pc, #72]	; (800a898 <netif_set_down+0x60>)
 800a850:	f00c f84a 	bl	80168e8 <iprintf>
 800a854:	e019      	b.n	800a88a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a85c:	f003 0301 	and.w	r3, r3, #1
 800a860:	2b00      	cmp	r3, #0
 800a862:	d012      	beq.n	800a88a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a86a:	f023 0301 	bic.w	r3, r3, #1
 800a86e:	b2da      	uxtb	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a87c:	f003 0308 	and.w	r3, r3, #8
 800a880:	2b00      	cmp	r3, #0
 800a882:	d002      	beq.n	800a88a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f009 fef9 	bl	801467c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	080182c4 	.word	0x080182c4
 800a894:	0801848c 	.word	0x0801848c
 800a898:	08018314 	.word	0x08018314

0800a89c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d107      	bne.n	800a8ba <netif_set_link_up+0x1e>
 800a8aa:	4b15      	ldr	r3, [pc, #84]	; (800a900 <netif_set_link_up+0x64>)
 800a8ac:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800a8b0:	4914      	ldr	r1, [pc, #80]	; (800a904 <netif_set_link_up+0x68>)
 800a8b2:	4815      	ldr	r0, [pc, #84]	; (800a908 <netif_set_link_up+0x6c>)
 800a8b4:	f00c f818 	bl	80168e8 <iprintf>
 800a8b8:	e01e      	b.n	800a8f8 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a8c0:	f003 0304 	and.w	r3, r3, #4
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d117      	bne.n	800a8f8 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a8ce:	f043 0304 	orr.w	r3, r3, #4
 800a8d2:	b2da      	uxtb	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f008 f922 	bl	8012b24 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800a8e0:	2103      	movs	r1, #3
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7ff ff68 	bl	800a7b8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	69db      	ldr	r3, [r3, #28]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d003      	beq.n	800a8f8 <netif_set_link_up+0x5c>
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	69db      	ldr	r3, [r3, #28]
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	080182c4 	.word	0x080182c4
 800a904:	080184ac 	.word	0x080184ac
 800a908:	08018314 	.word	0x08018314

0800a90c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d107      	bne.n	800a92a <netif_set_link_down+0x1e>
 800a91a:	4b11      	ldr	r3, [pc, #68]	; (800a960 <netif_set_link_down+0x54>)
 800a91c:	f240 4206 	movw	r2, #1030	; 0x406
 800a920:	4910      	ldr	r1, [pc, #64]	; (800a964 <netif_set_link_down+0x58>)
 800a922:	4811      	ldr	r0, [pc, #68]	; (800a968 <netif_set_link_down+0x5c>)
 800a924:	f00b ffe0 	bl	80168e8 <iprintf>
 800a928:	e017      	b.n	800a95a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a930:	f003 0304 	and.w	r3, r3, #4
 800a934:	2b00      	cmp	r3, #0
 800a936:	d010      	beq.n	800a95a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a93e:	f023 0304 	bic.w	r3, r3, #4
 800a942:	b2da      	uxtb	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d003      	beq.n	800a95a <netif_set_link_down+0x4e>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	69db      	ldr	r3, [r3, #28]
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	080182c4 	.word	0x080182c4
 800a964:	080184d0 	.word	0x080184d0
 800a968:	08018314 	.word	0x08018314

0800a96c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	61da      	str	r2, [r3, #28]
  }
}
 800a982:	bf00      	nop
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800a98e:	b480      	push	{r7}
 800a990:	b085      	sub	sp, #20
 800a992:	af00      	add	r7, sp, #0
 800a994:	60f8      	str	r0, [r7, #12]
 800a996:	60b9      	str	r1, [r7, #8]
 800a998:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800a99a:	f06f 030b 	mvn.w	r3, #11
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3714      	adds	r7, #20
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
	...

0800a9ac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d013      	beq.n	800a9e4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800a9bc:	4b0d      	ldr	r3, [pc, #52]	; (800a9f4 <netif_get_by_index+0x48>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	60fb      	str	r3, [r7, #12]
 800a9c2:	e00c      	b.n	800a9de <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	79fa      	ldrb	r2, [r7, #7]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d101      	bne.n	800a9d8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	e006      	b.n	800a9e6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	60fb      	str	r3, [r7, #12]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1ef      	bne.n	800a9c4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3714      	adds	r7, #20
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	20016e04 	.word	0x20016e04

0800a9f8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800a9fe:	f00b fef5 	bl	80167ec <sys_arch_protect>
 800aa02:	6038      	str	r0, [r7, #0]
 800aa04:	4b0d      	ldr	r3, [pc, #52]	; (800aa3c <pbuf_free_ooseq+0x44>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	701a      	strb	r2, [r3, #0]
 800aa0a:	6838      	ldr	r0, [r7, #0]
 800aa0c:	f00b fefc 	bl	8016808 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800aa10:	4b0b      	ldr	r3, [pc, #44]	; (800aa40 <pbuf_free_ooseq+0x48>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	607b      	str	r3, [r7, #4]
 800aa16:	e00a      	b.n	800aa2e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d003      	beq.n	800aa28 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f002 fc17 	bl	800d254 <tcp_free_ooseq>
      return;
 800aa26:	e005      	b.n	800aa34 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	607b      	str	r3, [r7, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1f1      	bne.n	800aa18 <pbuf_free_ooseq+0x20>
    }
  }
}
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20016e0c 	.word	0x20016e0c
 800aa40:	20016e14 	.word	0x20016e14

0800aa44 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800aa4c:	f7ff ffd4 	bl	800a9f8 <pbuf_free_ooseq>
}
 800aa50:	bf00      	nop
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800aa5e:	f00b fec5 	bl	80167ec <sys_arch_protect>
 800aa62:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800aa64:	4b0f      	ldr	r3, [pc, #60]	; (800aaa4 <pbuf_pool_is_empty+0x4c>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800aa6a:	4b0e      	ldr	r3, [pc, #56]	; (800aaa4 <pbuf_pool_is_empty+0x4c>)
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f00b fec9 	bl	8016808 <sys_arch_unprotect>

  if (!queued) {
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10f      	bne.n	800aa9c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	480a      	ldr	r0, [pc, #40]	; (800aaa8 <pbuf_pool_is_empty+0x50>)
 800aa80:	f7fe f890 	bl	8008ba4 <tcpip_try_callback>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d008      	beq.n	800aa9c <pbuf_pool_is_empty+0x44>
 800aa8a:	f00b feaf 	bl	80167ec <sys_arch_protect>
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	4b04      	ldr	r3, [pc, #16]	; (800aaa4 <pbuf_pool_is_empty+0x4c>)
 800aa92:	2200      	movs	r2, #0
 800aa94:	701a      	strb	r2, [r3, #0]
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f00b feb6 	bl	8016808 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800aa9c:	bf00      	nop
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	20016e0c 	.word	0x20016e0c
 800aaa8:	0800aa45 	.word	0x0800aa45

0800aaac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	4611      	mov	r1, r2
 800aab8:	461a      	mov	r2, r3
 800aaba:	460b      	mov	r3, r1
 800aabc:	80fb      	strh	r3, [r7, #6]
 800aabe:	4613      	mov	r3, r2
 800aac0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	68ba      	ldr	r2, [r7, #8]
 800aacc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	88fa      	ldrh	r2, [r7, #6]
 800aad2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	88ba      	ldrh	r2, [r7, #4]
 800aad8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800aada:	8b3b      	ldrh	r3, [r7, #24]
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	7f3a      	ldrb	r2, [r7, #28]
 800aae6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2201      	movs	r2, #1
 800aaec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	73da      	strb	r2, [r3, #15]
}
 800aaf4:	bf00      	nop
 800aaf6:	3714      	adds	r7, #20
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b08c      	sub	sp, #48	; 0x30
 800ab04:	af02      	add	r7, sp, #8
 800ab06:	4603      	mov	r3, r0
 800ab08:	71fb      	strb	r3, [r7, #7]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	80bb      	strh	r3, [r7, #4]
 800ab0e:	4613      	mov	r3, r2
 800ab10:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ab12:	79fb      	ldrb	r3, [r7, #7]
 800ab14:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ab16:	887b      	ldrh	r3, [r7, #2]
 800ab18:	2b41      	cmp	r3, #65	; 0x41
 800ab1a:	d00b      	beq.n	800ab34 <pbuf_alloc+0x34>
 800ab1c:	2b41      	cmp	r3, #65	; 0x41
 800ab1e:	dc02      	bgt.n	800ab26 <pbuf_alloc+0x26>
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d007      	beq.n	800ab34 <pbuf_alloc+0x34>
 800ab24:	e0c2      	b.n	800acac <pbuf_alloc+0x1ac>
 800ab26:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ab2a:	d00b      	beq.n	800ab44 <pbuf_alloc+0x44>
 800ab2c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ab30:	d070      	beq.n	800ac14 <pbuf_alloc+0x114>
 800ab32:	e0bb      	b.n	800acac <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ab34:	887a      	ldrh	r2, [r7, #2]
 800ab36:	88bb      	ldrh	r3, [r7, #4]
 800ab38:	4619      	mov	r1, r3
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	f000 f8d2 	bl	800ace4 <pbuf_alloc_reference>
 800ab40:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ab42:	e0bd      	b.n	800acc0 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ab44:	2300      	movs	r3, #0
 800ab46:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ab4c:	88bb      	ldrh	r3, [r7, #4]
 800ab4e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ab50:	200c      	movs	r0, #12
 800ab52:	f7ff fbb7 	bl	800a2c4 <memp_malloc>
 800ab56:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d109      	bne.n	800ab72 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800ab5e:	f7ff ff7b 	bl	800aa58 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ab62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <pbuf_alloc+0x6e>
            pbuf_free(p);
 800ab68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab6a:	f000 faa9 	bl	800b0c0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	e0a7      	b.n	800acc2 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ab72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab74:	3303      	adds	r3, #3
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	f023 0303 	bic.w	r3, r3, #3
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	8b7a      	ldrh	r2, [r7, #26]
 800ab86:	4293      	cmp	r3, r2
 800ab88:	bf28      	it	cs
 800ab8a:	4613      	movcs	r3, r2
 800ab8c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ab8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ab90:	3310      	adds	r3, #16
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	4413      	add	r3, r2
 800ab96:	3303      	adds	r3, #3
 800ab98:	f023 0303 	bic.w	r3, r3, #3
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	89f9      	ldrh	r1, [r7, #14]
 800aba0:	8b7a      	ldrh	r2, [r7, #26]
 800aba2:	2300      	movs	r3, #0
 800aba4:	9301      	str	r3, [sp, #4]
 800aba6:	887b      	ldrh	r3, [r7, #2]
 800aba8:	9300      	str	r3, [sp, #0]
 800abaa:	460b      	mov	r3, r1
 800abac:	4601      	mov	r1, r0
 800abae:	6938      	ldr	r0, [r7, #16]
 800abb0:	f7ff ff7c 	bl	800aaac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	f003 0303 	and.w	r3, r3, #3
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d006      	beq.n	800abce <pbuf_alloc+0xce>
 800abc0:	4b42      	ldr	r3, [pc, #264]	; (800accc <pbuf_alloc+0x1cc>)
 800abc2:	f240 1201 	movw	r2, #257	; 0x101
 800abc6:	4942      	ldr	r1, [pc, #264]	; (800acd0 <pbuf_alloc+0x1d0>)
 800abc8:	4842      	ldr	r0, [pc, #264]	; (800acd4 <pbuf_alloc+0x1d4>)
 800abca:	f00b fe8d 	bl	80168e8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800abce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800abd0:	3303      	adds	r3, #3
 800abd2:	f023 0303 	bic.w	r3, r3, #3
 800abd6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800abda:	d106      	bne.n	800abea <pbuf_alloc+0xea>
 800abdc:	4b3b      	ldr	r3, [pc, #236]	; (800accc <pbuf_alloc+0x1cc>)
 800abde:	f240 1203 	movw	r2, #259	; 0x103
 800abe2:	493d      	ldr	r1, [pc, #244]	; (800acd8 <pbuf_alloc+0x1d8>)
 800abe4:	483b      	ldr	r0, [pc, #236]	; (800acd4 <pbuf_alloc+0x1d4>)
 800abe6:	f00b fe7f 	bl	80168e8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800abea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abec:	2b00      	cmp	r3, #0
 800abee:	d102      	bne.n	800abf6 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	627b      	str	r3, [r7, #36]	; 0x24
 800abf4:	e002      	b.n	800abfc <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ac00:	8b7a      	ldrh	r2, [r7, #26]
 800ac02:	89fb      	ldrh	r3, [r7, #14]
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ac0c:	8b7b      	ldrh	r3, [r7, #26]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d19e      	bne.n	800ab50 <pbuf_alloc+0x50>
      break;
 800ac12:	e055      	b.n	800acc0 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ac14:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac16:	3303      	adds	r3, #3
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	f023 0303 	bic.w	r3, r3, #3
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	88bb      	ldrh	r3, [r7, #4]
 800ac22:	3303      	adds	r3, #3
 800ac24:	b29b      	uxth	r3, r3
 800ac26:	f023 0303 	bic.w	r3, r3, #3
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	4413      	add	r3, r2
 800ac2e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ac30:	8b3b      	ldrh	r3, [r7, #24]
 800ac32:	3310      	adds	r3, #16
 800ac34:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ac36:	8b3a      	ldrh	r2, [r7, #24]
 800ac38:	88bb      	ldrh	r3, [r7, #4]
 800ac3a:	3303      	adds	r3, #3
 800ac3c:	f023 0303 	bic.w	r3, r3, #3
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d306      	bcc.n	800ac52 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ac44:	8afa      	ldrh	r2, [r7, #22]
 800ac46:	88bb      	ldrh	r3, [r7, #4]
 800ac48:	3303      	adds	r3, #3
 800ac4a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ac4e:	429a      	cmp	r2, r3
 800ac50:	d201      	bcs.n	800ac56 <pbuf_alloc+0x156>
        return NULL;
 800ac52:	2300      	movs	r3, #0
 800ac54:	e035      	b.n	800acc2 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ac56:	8afb      	ldrh	r3, [r7, #22]
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7ff f9b1 	bl	8009fc0 <mem_malloc>
 800ac5e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ac60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d101      	bne.n	800ac6a <pbuf_alloc+0x16a>
        return NULL;
 800ac66:	2300      	movs	r3, #0
 800ac68:	e02b      	b.n	800acc2 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ac6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ac6c:	3310      	adds	r3, #16
 800ac6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac70:	4413      	add	r3, r2
 800ac72:	3303      	adds	r3, #3
 800ac74:	f023 0303 	bic.w	r3, r3, #3
 800ac78:	4618      	mov	r0, r3
 800ac7a:	88b9      	ldrh	r1, [r7, #4]
 800ac7c:	88ba      	ldrh	r2, [r7, #4]
 800ac7e:	2300      	movs	r3, #0
 800ac80:	9301      	str	r3, [sp, #4]
 800ac82:	887b      	ldrh	r3, [r7, #2]
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	460b      	mov	r3, r1
 800ac88:	4601      	mov	r1, r0
 800ac8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ac8c:	f7ff ff0e 	bl	800aaac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	f003 0303 	and.w	r3, r3, #3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d010      	beq.n	800acbe <pbuf_alloc+0x1be>
 800ac9c:	4b0b      	ldr	r3, [pc, #44]	; (800accc <pbuf_alloc+0x1cc>)
 800ac9e:	f240 1223 	movw	r2, #291	; 0x123
 800aca2:	490e      	ldr	r1, [pc, #56]	; (800acdc <pbuf_alloc+0x1dc>)
 800aca4:	480b      	ldr	r0, [pc, #44]	; (800acd4 <pbuf_alloc+0x1d4>)
 800aca6:	f00b fe1f 	bl	80168e8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800acaa:	e008      	b.n	800acbe <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800acac:	4b07      	ldr	r3, [pc, #28]	; (800accc <pbuf_alloc+0x1cc>)
 800acae:	f240 1227 	movw	r2, #295	; 0x127
 800acb2:	490b      	ldr	r1, [pc, #44]	; (800ace0 <pbuf_alloc+0x1e0>)
 800acb4:	4807      	ldr	r0, [pc, #28]	; (800acd4 <pbuf_alloc+0x1d4>)
 800acb6:	f00b fe17 	bl	80168e8 <iprintf>
      return NULL;
 800acba:	2300      	movs	r3, #0
 800acbc:	e001      	b.n	800acc2 <pbuf_alloc+0x1c2>
      break;
 800acbe:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800acc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3728      	adds	r7, #40	; 0x28
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bd80      	pop	{r7, pc}
 800acca:	bf00      	nop
 800accc:	080184f4 	.word	0x080184f4
 800acd0:	08018524 	.word	0x08018524
 800acd4:	08018554 	.word	0x08018554
 800acd8:	0801857c 	.word	0x0801857c
 800acdc:	080185b0 	.word	0x080185b0
 800ace0:	080185dc 	.word	0x080185dc

0800ace4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af02      	add	r7, sp, #8
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	460b      	mov	r3, r1
 800acee:	807b      	strh	r3, [r7, #2]
 800acf0:	4613      	mov	r3, r2
 800acf2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800acf4:	883b      	ldrh	r3, [r7, #0]
 800acf6:	2b41      	cmp	r3, #65	; 0x41
 800acf8:	d009      	beq.n	800ad0e <pbuf_alloc_reference+0x2a>
 800acfa:	883b      	ldrh	r3, [r7, #0]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d006      	beq.n	800ad0e <pbuf_alloc_reference+0x2a>
 800ad00:	4b0f      	ldr	r3, [pc, #60]	; (800ad40 <pbuf_alloc_reference+0x5c>)
 800ad02:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ad06:	490f      	ldr	r1, [pc, #60]	; (800ad44 <pbuf_alloc_reference+0x60>)
 800ad08:	480f      	ldr	r0, [pc, #60]	; (800ad48 <pbuf_alloc_reference+0x64>)
 800ad0a:	f00b fded 	bl	80168e8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ad0e:	200b      	movs	r0, #11
 800ad10:	f7ff fad8 	bl	800a2c4 <memp_malloc>
 800ad14:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d101      	bne.n	800ad20 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	e00b      	b.n	800ad38 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ad20:	8879      	ldrh	r1, [r7, #2]
 800ad22:	887a      	ldrh	r2, [r7, #2]
 800ad24:	2300      	movs	r3, #0
 800ad26:	9301      	str	r3, [sp, #4]
 800ad28:	883b      	ldrh	r3, [r7, #0]
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	6879      	ldr	r1, [r7, #4]
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f7ff febb 	bl	800aaac <pbuf_init_alloced_pbuf>
  return p;
 800ad36:	68fb      	ldr	r3, [r7, #12]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}
 800ad40:	080184f4 	.word	0x080184f4
 800ad44:	080185f8 	.word	0x080185f8
 800ad48:	08018554 	.word	0x08018554

0800ad4c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b088      	sub	sp, #32
 800ad50:	af02      	add	r7, sp, #8
 800ad52:	607b      	str	r3, [r7, #4]
 800ad54:	4603      	mov	r3, r0
 800ad56:	73fb      	strb	r3, [r7, #15]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	81bb      	strh	r3, [r7, #12]
 800ad5c:	4613      	mov	r3, r2
 800ad5e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ad64:	8a7b      	ldrh	r3, [r7, #18]
 800ad66:	3303      	adds	r3, #3
 800ad68:	f023 0203 	bic.w	r2, r3, #3
 800ad6c:	89bb      	ldrh	r3, [r7, #12]
 800ad6e:	441a      	add	r2, r3
 800ad70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d901      	bls.n	800ad7a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ad76:	2300      	movs	r3, #0
 800ad78:	e018      	b.n	800adac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ad7a:	6a3b      	ldr	r3, [r7, #32]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d007      	beq.n	800ad90 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ad80:	8a7b      	ldrh	r3, [r7, #18]
 800ad82:	3303      	adds	r3, #3
 800ad84:	f023 0303 	bic.w	r3, r3, #3
 800ad88:	6a3a      	ldr	r2, [r7, #32]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	617b      	str	r3, [r7, #20]
 800ad8e:	e001      	b.n	800ad94 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ad90:	2300      	movs	r3, #0
 800ad92:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	89b9      	ldrh	r1, [r7, #12]
 800ad98:	89ba      	ldrh	r2, [r7, #12]
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	897b      	ldrh	r3, [r7, #10]
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	460b      	mov	r3, r1
 800ada4:	6979      	ldr	r1, [r7, #20]
 800ada6:	f7ff fe81 	bl	800aaac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800adaa:	687b      	ldr	r3, [r7, #4]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	460b      	mov	r3, r1
 800adbe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d106      	bne.n	800add4 <pbuf_realloc+0x20>
 800adc6:	4b3a      	ldr	r3, [pc, #232]	; (800aeb0 <pbuf_realloc+0xfc>)
 800adc8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800adcc:	4939      	ldr	r1, [pc, #228]	; (800aeb4 <pbuf_realloc+0x100>)
 800adce:	483a      	ldr	r0, [pc, #232]	; (800aeb8 <pbuf_realloc+0x104>)
 800add0:	f00b fd8a 	bl	80168e8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	891b      	ldrh	r3, [r3, #8]
 800add8:	887a      	ldrh	r2, [r7, #2]
 800adda:	429a      	cmp	r2, r3
 800addc:	d264      	bcs.n	800aea8 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	891a      	ldrh	r2, [r3, #8]
 800ade2:	887b      	ldrh	r3, [r7, #2]
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ade8:	887b      	ldrh	r3, [r7, #2]
 800adea:	817b      	strh	r3, [r7, #10]
  q = p;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800adf0:	e018      	b.n	800ae24 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	895b      	ldrh	r3, [r3, #10]
 800adf6:	897a      	ldrh	r2, [r7, #10]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	891a      	ldrh	r2, [r3, #8]
 800ae00:	893b      	ldrh	r3, [r7, #8]
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	b29a      	uxth	r2, r3
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d106      	bne.n	800ae24 <pbuf_realloc+0x70>
 800ae16:	4b26      	ldr	r3, [pc, #152]	; (800aeb0 <pbuf_realloc+0xfc>)
 800ae18:	f240 12af 	movw	r2, #431	; 0x1af
 800ae1c:	4927      	ldr	r1, [pc, #156]	; (800aebc <pbuf_realloc+0x108>)
 800ae1e:	4826      	ldr	r0, [pc, #152]	; (800aeb8 <pbuf_realloc+0x104>)
 800ae20:	f00b fd62 	bl	80168e8 <iprintf>
  while (rem_len > q->len) {
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	895b      	ldrh	r3, [r3, #10]
 800ae28:	897a      	ldrh	r2, [r7, #10]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d8e1      	bhi.n	800adf2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	7b1b      	ldrb	r3, [r3, #12]
 800ae32:	f003 030f 	and.w	r3, r3, #15
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d122      	bne.n	800ae80 <pbuf_realloc+0xcc>
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	895b      	ldrh	r3, [r3, #10]
 800ae3e:	897a      	ldrh	r2, [r7, #10]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d01d      	beq.n	800ae80 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	7b5b      	ldrb	r3, [r3, #13]
 800ae48:	f003 0302 	and.w	r3, r3, #2
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d117      	bne.n	800ae80 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	461a      	mov	r2, r3
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	1ad3      	subs	r3, r2, r3
 800ae5a:	b29a      	uxth	r2, r3
 800ae5c:	897b      	ldrh	r3, [r7, #10]
 800ae5e:	4413      	add	r3, r2
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	4619      	mov	r1, r3
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f7fe ffa1 	bl	8009dac <mem_trim>
 800ae6a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d106      	bne.n	800ae80 <pbuf_realloc+0xcc>
 800ae72:	4b0f      	ldr	r3, [pc, #60]	; (800aeb0 <pbuf_realloc+0xfc>)
 800ae74:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ae78:	4911      	ldr	r1, [pc, #68]	; (800aec0 <pbuf_realloc+0x10c>)
 800ae7a:	480f      	ldr	r0, [pc, #60]	; (800aeb8 <pbuf_realloc+0x104>)
 800ae7c:	f00b fd34 	bl	80168e8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	897a      	ldrh	r2, [r7, #10]
 800ae84:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	895a      	ldrh	r2, [r3, #10]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d004      	beq.n	800aea0 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f000 f910 	bl	800b0c0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	e000      	b.n	800aeaa <pbuf_realloc+0xf6>
    return;
 800aea8:	bf00      	nop

}
 800aeaa:	3710      	adds	r7, #16
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	080184f4 	.word	0x080184f4
 800aeb4:	0801860c 	.word	0x0801860c
 800aeb8:	08018554 	.word	0x08018554
 800aebc:	08018624 	.word	0x08018624
 800aec0:	0801863c 	.word	0x0801863c

0800aec4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b086      	sub	sp, #24
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	4613      	mov	r3, r2
 800aed0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d106      	bne.n	800aee6 <pbuf_add_header_impl+0x22>
 800aed8:	4b2b      	ldr	r3, [pc, #172]	; (800af88 <pbuf_add_header_impl+0xc4>)
 800aeda:	f240 12df 	movw	r2, #479	; 0x1df
 800aede:	492b      	ldr	r1, [pc, #172]	; (800af8c <pbuf_add_header_impl+0xc8>)
 800aee0:	482b      	ldr	r0, [pc, #172]	; (800af90 <pbuf_add_header_impl+0xcc>)
 800aee2:	f00b fd01 	bl	80168e8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d003      	beq.n	800aef4 <pbuf_add_header_impl+0x30>
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aef2:	d301      	bcc.n	800aef8 <pbuf_add_header_impl+0x34>
    return 1;
 800aef4:	2301      	movs	r3, #1
 800aef6:	e043      	b.n	800af80 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <pbuf_add_header_impl+0x3e>
    return 0;
 800aefe:	2300      	movs	r3, #0
 800af00:	e03e      	b.n	800af80 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	891a      	ldrh	r2, [r3, #8]
 800af0a:	8a7b      	ldrh	r3, [r7, #18]
 800af0c:	4413      	add	r3, r2
 800af0e:	b29b      	uxth	r3, r3
 800af10:	8a7a      	ldrh	r2, [r7, #18]
 800af12:	429a      	cmp	r2, r3
 800af14:	d901      	bls.n	800af1a <pbuf_add_header_impl+0x56>
    return 1;
 800af16:	2301      	movs	r3, #1
 800af18:	e032      	b.n	800af80 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	7b1b      	ldrb	r3, [r3, #12]
 800af1e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800af20:	8a3b      	ldrh	r3, [r7, #16]
 800af22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00c      	beq.n	800af44 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	685a      	ldr	r2, [r3, #4]
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	425b      	negs	r3, r3
 800af32:	4413      	add	r3, r2
 800af34:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3310      	adds	r3, #16
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d20d      	bcs.n	800af5c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800af40:	2301      	movs	r3, #1
 800af42:	e01d      	b.n	800af80 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800af44:	79fb      	ldrb	r3, [r7, #7]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d006      	beq.n	800af58 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	685a      	ldr	r2, [r3, #4]
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	425b      	negs	r3, r3
 800af52:	4413      	add	r3, r2
 800af54:	617b      	str	r3, [r7, #20]
 800af56:	e001      	b.n	800af5c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800af58:	2301      	movs	r3, #1
 800af5a:	e011      	b.n	800af80 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	895a      	ldrh	r2, [r3, #10]
 800af66:	8a7b      	ldrh	r3, [r7, #18]
 800af68:	4413      	add	r3, r2
 800af6a:	b29a      	uxth	r2, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	891a      	ldrh	r2, [r3, #8]
 800af74:	8a7b      	ldrh	r3, [r7, #18]
 800af76:	4413      	add	r3, r2
 800af78:	b29a      	uxth	r2, r3
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	811a      	strh	r2, [r3, #8]


  return 0;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	080184f4 	.word	0x080184f4
 800af8c:	08018658 	.word	0x08018658
 800af90:	08018554 	.word	0x08018554

0800af94 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800af9e:	2200      	movs	r2, #0
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f7ff ff8e 	bl	800aec4 <pbuf_add_header_impl>
 800afa8:	4603      	mov	r3, r0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
	...

0800afb4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d106      	bne.n	800afd2 <pbuf_remove_header+0x1e>
 800afc4:	4b20      	ldr	r3, [pc, #128]	; (800b048 <pbuf_remove_header+0x94>)
 800afc6:	f240 224b 	movw	r2, #587	; 0x24b
 800afca:	4920      	ldr	r1, [pc, #128]	; (800b04c <pbuf_remove_header+0x98>)
 800afcc:	4820      	ldr	r0, [pc, #128]	; (800b050 <pbuf_remove_header+0x9c>)
 800afce:	f00b fc8b 	bl	80168e8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d003      	beq.n	800afe0 <pbuf_remove_header+0x2c>
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afde:	d301      	bcc.n	800afe4 <pbuf_remove_header+0x30>
    return 1;
 800afe0:	2301      	movs	r3, #1
 800afe2:	e02c      	b.n	800b03e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d101      	bne.n	800afee <pbuf_remove_header+0x3a>
    return 0;
 800afea:	2300      	movs	r3, #0
 800afec:	e027      	b.n	800b03e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	895b      	ldrh	r3, [r3, #10]
 800aff6:	89fa      	ldrh	r2, [r7, #14]
 800aff8:	429a      	cmp	r2, r3
 800affa:	d908      	bls.n	800b00e <pbuf_remove_header+0x5a>
 800affc:	4b12      	ldr	r3, [pc, #72]	; (800b048 <pbuf_remove_header+0x94>)
 800affe:	f240 2255 	movw	r2, #597	; 0x255
 800b002:	4914      	ldr	r1, [pc, #80]	; (800b054 <pbuf_remove_header+0xa0>)
 800b004:	4812      	ldr	r0, [pc, #72]	; (800b050 <pbuf_remove_header+0x9c>)
 800b006:	f00b fc6f 	bl	80168e8 <iprintf>
 800b00a:	2301      	movs	r3, #1
 800b00c:	e017      	b.n	800b03e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685a      	ldr	r2, [r3, #4]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	441a      	add	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	895a      	ldrh	r2, [r3, #10]
 800b024:	89fb      	ldrh	r3, [r7, #14]
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	b29a      	uxth	r2, r3
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	891a      	ldrh	r2, [r3, #8]
 800b032:	89fb      	ldrh	r3, [r7, #14]
 800b034:	1ad3      	subs	r3, r2, r3
 800b036:	b29a      	uxth	r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b03c:	2300      	movs	r3, #0
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	080184f4 	.word	0x080184f4
 800b04c:	08018658 	.word	0x08018658
 800b050:	08018554 	.word	0x08018554
 800b054:	08018664 	.word	0x08018664

0800b058 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	460b      	mov	r3, r1
 800b062:	807b      	strh	r3, [r7, #2]
 800b064:	4613      	mov	r3, r2
 800b066:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b068:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	da08      	bge.n	800b082 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b070:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b074:	425b      	negs	r3, r3
 800b076:	4619      	mov	r1, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f7ff ff9b 	bl	800afb4 <pbuf_remove_header>
 800b07e:	4603      	mov	r3, r0
 800b080:	e007      	b.n	800b092 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b082:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b086:	787a      	ldrb	r2, [r7, #1]
 800b088:	4619      	mov	r1, r3
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7ff ff1a 	bl	800aec4 <pbuf_add_header_impl>
 800b090:	4603      	mov	r3, r0
  }
}
 800b092:	4618      	mov	r0, r3
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b082      	sub	sp, #8
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b0a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff ffd2 	bl	800b058 <pbuf_header_impl>
 800b0b4:	4603      	mov	r3, r0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
	...

0800b0c0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b088      	sub	sp, #32
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10b      	bne.n	800b0e6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d106      	bne.n	800b0e2 <pbuf_free+0x22>
 800b0d4:	4b3b      	ldr	r3, [pc, #236]	; (800b1c4 <pbuf_free+0x104>)
 800b0d6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b0da:	493b      	ldr	r1, [pc, #236]	; (800b1c8 <pbuf_free+0x108>)
 800b0dc:	483b      	ldr	r0, [pc, #236]	; (800b1cc <pbuf_free+0x10c>)
 800b0de:	f00b fc03 	bl	80168e8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	e069      	b.n	800b1ba <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b0ea:	e062      	b.n	800b1b2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b0ec:	f00b fb7e 	bl	80167ec <sys_arch_protect>
 800b0f0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	7b9b      	ldrb	r3, [r3, #14]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d106      	bne.n	800b108 <pbuf_free+0x48>
 800b0fa:	4b32      	ldr	r3, [pc, #200]	; (800b1c4 <pbuf_free+0x104>)
 800b0fc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b100:	4933      	ldr	r1, [pc, #204]	; (800b1d0 <pbuf_free+0x110>)
 800b102:	4832      	ldr	r0, [pc, #200]	; (800b1cc <pbuf_free+0x10c>)
 800b104:	f00b fbf0 	bl	80168e8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	7b9b      	ldrb	r3, [r3, #14]
 800b10c:	3b01      	subs	r3, #1
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	739a      	strb	r2, [r3, #14]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	7b9b      	ldrb	r3, [r3, #14]
 800b118:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b11a:	69b8      	ldr	r0, [r7, #24]
 800b11c:	f00b fb74 	bl	8016808 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b120:	7dfb      	ldrb	r3, [r7, #23]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d143      	bne.n	800b1ae <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	7b1b      	ldrb	r3, [r3, #12]
 800b130:	f003 030f 	and.w	r3, r3, #15
 800b134:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	7b5b      	ldrb	r3, [r3, #13]
 800b13a:	f003 0302 	and.w	r3, r3, #2
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d011      	beq.n	800b166 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	691b      	ldr	r3, [r3, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d106      	bne.n	800b15c <pbuf_free+0x9c>
 800b14e:	4b1d      	ldr	r3, [pc, #116]	; (800b1c4 <pbuf_free+0x104>)
 800b150:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b154:	491f      	ldr	r1, [pc, #124]	; (800b1d4 <pbuf_free+0x114>)
 800b156:	481d      	ldr	r0, [pc, #116]	; (800b1cc <pbuf_free+0x10c>)
 800b158:	f00b fbc6 	bl	80168e8 <iprintf>
        pc->custom_free_function(p);
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	4798      	blx	r3
 800b164:	e01d      	b.n	800b1a2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b166:	7bfb      	ldrb	r3, [r7, #15]
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d104      	bne.n	800b176 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b16c:	6879      	ldr	r1, [r7, #4]
 800b16e:	200c      	movs	r0, #12
 800b170:	f7ff f8fa 	bl	800a368 <memp_free>
 800b174:	e015      	b.n	800b1a2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b176:	7bfb      	ldrb	r3, [r7, #15]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d104      	bne.n	800b186 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b17c:	6879      	ldr	r1, [r7, #4]
 800b17e:	200b      	movs	r0, #11
 800b180:	f7ff f8f2 	bl	800a368 <memp_free>
 800b184:	e00d      	b.n	800b1a2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b186:	7bfb      	ldrb	r3, [r7, #15]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d103      	bne.n	800b194 <pbuf_free+0xd4>
          mem_free(p);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7fe fd7d 	bl	8009c8c <mem_free>
 800b192:	e006      	b.n	800b1a2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b194:	4b0b      	ldr	r3, [pc, #44]	; (800b1c4 <pbuf_free+0x104>)
 800b196:	f240 320f 	movw	r2, #783	; 0x30f
 800b19a:	490f      	ldr	r1, [pc, #60]	; (800b1d8 <pbuf_free+0x118>)
 800b19c:	480b      	ldr	r0, [pc, #44]	; (800b1cc <pbuf_free+0x10c>)
 800b19e:	f00b fba3 	bl	80168e8 <iprintf>
        }
      }
      count++;
 800b1a2:	7ffb      	ldrb	r3, [r7, #31]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	607b      	str	r3, [r7, #4]
 800b1ac:	e001      	b.n	800b1b2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d199      	bne.n	800b0ec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b1b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3720      	adds	r7, #32
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	080184f4 	.word	0x080184f4
 800b1c8:	08018658 	.word	0x08018658
 800b1cc:	08018554 	.word	0x08018554
 800b1d0:	08018684 	.word	0x08018684
 800b1d4:	0801869c 	.word	0x0801869c
 800b1d8:	080186c0 	.word	0x080186c0

0800b1dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b1e8:	e005      	b.n	800b1f6 <pbuf_clen+0x1a>
    ++len;
 800b1ea:	89fb      	ldrh	r3, [r7, #14]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1f6      	bne.n	800b1ea <pbuf_clen+0xe>
  }
  return len;
 800b1fc:	89fb      	ldrh	r3, [r7, #14]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
	...

0800b20c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d016      	beq.n	800b248 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b21a:	f00b fae7 	bl	80167ec <sys_arch_protect>
 800b21e:	60f8      	str	r0, [r7, #12]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	7b9b      	ldrb	r3, [r3, #14]
 800b224:	3301      	adds	r3, #1
 800b226:	b2da      	uxtb	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	739a      	strb	r2, [r3, #14]
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f00b faeb 	bl	8016808 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	7b9b      	ldrb	r3, [r3, #14]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d106      	bne.n	800b248 <pbuf_ref+0x3c>
 800b23a:	4b05      	ldr	r3, [pc, #20]	; (800b250 <pbuf_ref+0x44>)
 800b23c:	f240 3242 	movw	r2, #834	; 0x342
 800b240:	4904      	ldr	r1, [pc, #16]	; (800b254 <pbuf_ref+0x48>)
 800b242:	4805      	ldr	r0, [pc, #20]	; (800b258 <pbuf_ref+0x4c>)
 800b244:	f00b fb50 	bl	80168e8 <iprintf>
  }
}
 800b248:	bf00      	nop
 800b24a:	3710      	adds	r7, #16
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}
 800b250:	080184f4 	.word	0x080184f4
 800b254:	080186d4 	.word	0x080186d4
 800b258:	08018554 	.word	0x08018554

0800b25c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b084      	sub	sp, #16
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <pbuf_cat+0x16>
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d107      	bne.n	800b282 <pbuf_cat+0x26>
 800b272:	4b20      	ldr	r3, [pc, #128]	; (800b2f4 <pbuf_cat+0x98>)
 800b274:	f240 325a 	movw	r2, #858	; 0x35a
 800b278:	491f      	ldr	r1, [pc, #124]	; (800b2f8 <pbuf_cat+0x9c>)
 800b27a:	4820      	ldr	r0, [pc, #128]	; (800b2fc <pbuf_cat+0xa0>)
 800b27c:	f00b fb34 	bl	80168e8 <iprintf>
 800b280:	e034      	b.n	800b2ec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	60fb      	str	r3, [r7, #12]
 800b286:	e00a      	b.n	800b29e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	891a      	ldrh	r2, [r3, #8]
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	891b      	ldrh	r3, [r3, #8]
 800b290:	4413      	add	r3, r2
 800b292:	b29a      	uxth	r2, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	60fb      	str	r3, [r7, #12]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1f0      	bne.n	800b288 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	891a      	ldrh	r2, [r3, #8]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	895b      	ldrh	r3, [r3, #10]
 800b2ae:	429a      	cmp	r2, r3
 800b2b0:	d006      	beq.n	800b2c0 <pbuf_cat+0x64>
 800b2b2:	4b10      	ldr	r3, [pc, #64]	; (800b2f4 <pbuf_cat+0x98>)
 800b2b4:	f240 3262 	movw	r2, #866	; 0x362
 800b2b8:	4911      	ldr	r1, [pc, #68]	; (800b300 <pbuf_cat+0xa4>)
 800b2ba:	4810      	ldr	r0, [pc, #64]	; (800b2fc <pbuf_cat+0xa0>)
 800b2bc:	f00b fb14 	bl	80168e8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d006      	beq.n	800b2d6 <pbuf_cat+0x7a>
 800b2c8:	4b0a      	ldr	r3, [pc, #40]	; (800b2f4 <pbuf_cat+0x98>)
 800b2ca:	f240 3263 	movw	r2, #867	; 0x363
 800b2ce:	490d      	ldr	r1, [pc, #52]	; (800b304 <pbuf_cat+0xa8>)
 800b2d0:	480a      	ldr	r0, [pc, #40]	; (800b2fc <pbuf_cat+0xa0>)
 800b2d2:	f00b fb09 	bl	80168e8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	891a      	ldrh	r2, [r3, #8]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	891b      	ldrh	r3, [r3, #8]
 800b2de:	4413      	add	r3, r2
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b2ec:	3710      	adds	r7, #16
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}
 800b2f2:	bf00      	nop
 800b2f4:	080184f4 	.word	0x080184f4
 800b2f8:	080186e8 	.word	0x080186e8
 800b2fc:	08018554 	.word	0x08018554
 800b300:	08018720 	.word	0x08018720
 800b304:	08018750 	.word	0x08018750

0800b308 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f7ff ffa1 	bl	800b25c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b31a:	6838      	ldr	r0, [r7, #0]
 800b31c:	f7ff ff76 	bl	800b20c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b332:	2300      	movs	r3, #0
 800b334:	617b      	str	r3, [r7, #20]
 800b336:	2300      	movs	r3, #0
 800b338:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d008      	beq.n	800b352 <pbuf_copy+0x2a>
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d005      	beq.n	800b352 <pbuf_copy+0x2a>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	891a      	ldrh	r2, [r3, #8]
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	891b      	ldrh	r3, [r3, #8]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d209      	bcs.n	800b366 <pbuf_copy+0x3e>
 800b352:	4b57      	ldr	r3, [pc, #348]	; (800b4b0 <pbuf_copy+0x188>)
 800b354:	f240 32ca 	movw	r2, #970	; 0x3ca
 800b358:	4956      	ldr	r1, [pc, #344]	; (800b4b4 <pbuf_copy+0x18c>)
 800b35a:	4857      	ldr	r0, [pc, #348]	; (800b4b8 <pbuf_copy+0x190>)
 800b35c:	f00b fac4 	bl	80168e8 <iprintf>
 800b360:	f06f 030f 	mvn.w	r3, #15
 800b364:	e09f      	b.n	800b4a6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	895b      	ldrh	r3, [r3, #10]
 800b36a:	461a      	mov	r2, r3
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	1ad2      	subs	r2, r2, r3
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	895b      	ldrh	r3, [r3, #10]
 800b374:	4619      	mov	r1, r3
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	1acb      	subs	r3, r1, r3
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d306      	bcc.n	800b38c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	895b      	ldrh	r3, [r3, #10]
 800b382:	461a      	mov	r2, r3
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	60fb      	str	r3, [r7, #12]
 800b38a:	e005      	b.n	800b398 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	895b      	ldrh	r3, [r3, #10]
 800b390:	461a      	mov	r2, r3
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	18d0      	adds	r0, r2, r3
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	685a      	ldr	r2, [r3, #4]
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	f00b fa6f 	bl	801688e <memcpy>
    offset_to += len;
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	4413      	add	r3, r2
 800b3be:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	895b      	ldrh	r3, [r3, #10]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d906      	bls.n	800b3da <pbuf_copy+0xb2>
 800b3cc:	4b38      	ldr	r3, [pc, #224]	; (800b4b0 <pbuf_copy+0x188>)
 800b3ce:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b3d2:	493a      	ldr	r1, [pc, #232]	; (800b4bc <pbuf_copy+0x194>)
 800b3d4:	4838      	ldr	r0, [pc, #224]	; (800b4b8 <pbuf_copy+0x190>)
 800b3d6:	f00b fa87 	bl	80168e8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	895b      	ldrh	r3, [r3, #10]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d906      	bls.n	800b3f4 <pbuf_copy+0xcc>
 800b3e6:	4b32      	ldr	r3, [pc, #200]	; (800b4b0 <pbuf_copy+0x188>)
 800b3e8:	f240 32da 	movw	r2, #986	; 0x3da
 800b3ec:	4934      	ldr	r1, [pc, #208]	; (800b4c0 <pbuf_copy+0x198>)
 800b3ee:	4832      	ldr	r0, [pc, #200]	; (800b4b8 <pbuf_copy+0x190>)
 800b3f0:	f00b fa7a 	bl	80168e8 <iprintf>
    if (offset_from >= p_from->len) {
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	895b      	ldrh	r3, [r3, #10]
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d304      	bcc.n	800b40a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	895b      	ldrh	r3, [r3, #10]
 800b40e:	461a      	mov	r2, r3
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	4293      	cmp	r3, r2
 800b414:	d114      	bne.n	800b440 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b416:	2300      	movs	r3, #0
 800b418:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10c      	bne.n	800b440 <pbuf_copy+0x118>
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d009      	beq.n	800b440 <pbuf_copy+0x118>
 800b42c:	4b20      	ldr	r3, [pc, #128]	; (800b4b0 <pbuf_copy+0x188>)
 800b42e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b432:	4924      	ldr	r1, [pc, #144]	; (800b4c4 <pbuf_copy+0x19c>)
 800b434:	4820      	ldr	r0, [pc, #128]	; (800b4b8 <pbuf_copy+0x190>)
 800b436:	f00b fa57 	bl	80168e8 <iprintf>
 800b43a:	f06f 030f 	mvn.w	r3, #15
 800b43e:	e032      	b.n	800b4a6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d013      	beq.n	800b46e <pbuf_copy+0x146>
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	895a      	ldrh	r2, [r3, #10]
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	891b      	ldrh	r3, [r3, #8]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d10d      	bne.n	800b46e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d009      	beq.n	800b46e <pbuf_copy+0x146>
 800b45a:	4b15      	ldr	r3, [pc, #84]	; (800b4b0 <pbuf_copy+0x188>)
 800b45c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800b460:	4919      	ldr	r1, [pc, #100]	; (800b4c8 <pbuf_copy+0x1a0>)
 800b462:	4815      	ldr	r0, [pc, #84]	; (800b4b8 <pbuf_copy+0x190>)
 800b464:	f00b fa40 	bl	80168e8 <iprintf>
 800b468:	f06f 0305 	mvn.w	r3, #5
 800b46c:	e01b      	b.n	800b4a6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d013      	beq.n	800b49c <pbuf_copy+0x174>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	895a      	ldrh	r2, [r3, #10]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	891b      	ldrh	r3, [r3, #8]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d10d      	bne.n	800b49c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d009      	beq.n	800b49c <pbuf_copy+0x174>
 800b488:	4b09      	ldr	r3, [pc, #36]	; (800b4b0 <pbuf_copy+0x188>)
 800b48a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b48e:	490e      	ldr	r1, [pc, #56]	; (800b4c8 <pbuf_copy+0x1a0>)
 800b490:	4809      	ldr	r0, [pc, #36]	; (800b4b8 <pbuf_copy+0x190>)
 800b492:	f00b fa29 	bl	80168e8 <iprintf>
 800b496:	f06f 0305 	mvn.w	r3, #5
 800b49a:	e004      	b.n	800b4a6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f47f af61 	bne.w	800b366 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	080184f4 	.word	0x080184f4
 800b4b4:	0801879c 	.word	0x0801879c
 800b4b8:	08018554 	.word	0x08018554
 800b4bc:	080187cc 	.word	0x080187cc
 800b4c0:	080187e4 	.word	0x080187e4
 800b4c4:	08018800 	.word	0x08018800
 800b4c8:	08018810 	.word	0x08018810

0800b4cc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b088      	sub	sp, #32
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	4611      	mov	r1, r2
 800b4d8:	461a      	mov	r2, r3
 800b4da:	460b      	mov	r3, r1
 800b4dc:	80fb      	strh	r3, [r7, #6]
 800b4de:	4613      	mov	r3, r2
 800b4e0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d108      	bne.n	800b502 <pbuf_copy_partial+0x36>
 800b4f0:	4b2b      	ldr	r3, [pc, #172]	; (800b5a0 <pbuf_copy_partial+0xd4>)
 800b4f2:	f240 420a 	movw	r2, #1034	; 0x40a
 800b4f6:	492b      	ldr	r1, [pc, #172]	; (800b5a4 <pbuf_copy_partial+0xd8>)
 800b4f8:	482b      	ldr	r0, [pc, #172]	; (800b5a8 <pbuf_copy_partial+0xdc>)
 800b4fa:	f00b f9f5 	bl	80168e8 <iprintf>
 800b4fe:	2300      	movs	r3, #0
 800b500:	e04a      	b.n	800b598 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d108      	bne.n	800b51a <pbuf_copy_partial+0x4e>
 800b508:	4b25      	ldr	r3, [pc, #148]	; (800b5a0 <pbuf_copy_partial+0xd4>)
 800b50a:	f240 420b 	movw	r2, #1035	; 0x40b
 800b50e:	4927      	ldr	r1, [pc, #156]	; (800b5ac <pbuf_copy_partial+0xe0>)
 800b510:	4825      	ldr	r0, [pc, #148]	; (800b5a8 <pbuf_copy_partial+0xdc>)
 800b512:	f00b f9e9 	bl	80168e8 <iprintf>
 800b516:	2300      	movs	r3, #0
 800b518:	e03e      	b.n	800b598 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	61fb      	str	r3, [r7, #28]
 800b51e:	e034      	b.n	800b58a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b520:	88bb      	ldrh	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00a      	beq.n	800b53c <pbuf_copy_partial+0x70>
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	895b      	ldrh	r3, [r3, #10]
 800b52a:	88ba      	ldrh	r2, [r7, #4]
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d305      	bcc.n	800b53c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	895b      	ldrh	r3, [r3, #10]
 800b534:	88ba      	ldrh	r2, [r7, #4]
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	80bb      	strh	r3, [r7, #4]
 800b53a:	e023      	b.n	800b584 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	895a      	ldrh	r2, [r3, #10]
 800b540:	88bb      	ldrh	r3, [r7, #4]
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b546:	8b3a      	ldrh	r2, [r7, #24]
 800b548:	88fb      	ldrh	r3, [r7, #6]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d901      	bls.n	800b552 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b54e:	88fb      	ldrh	r3, [r7, #6]
 800b550:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b552:	8b7b      	ldrh	r3, [r7, #26]
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	18d0      	adds	r0, r2, r3
 800b558:	69fb      	ldr	r3, [r7, #28]
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	88bb      	ldrh	r3, [r7, #4]
 800b55e:	4413      	add	r3, r2
 800b560:	8b3a      	ldrh	r2, [r7, #24]
 800b562:	4619      	mov	r1, r3
 800b564:	f00b f993 	bl	801688e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b568:	8afa      	ldrh	r2, [r7, #22]
 800b56a:	8b3b      	ldrh	r3, [r7, #24]
 800b56c:	4413      	add	r3, r2
 800b56e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b570:	8b7a      	ldrh	r2, [r7, #26]
 800b572:	8b3b      	ldrh	r3, [r7, #24]
 800b574:	4413      	add	r3, r2
 800b576:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b578:	88fa      	ldrh	r2, [r7, #6]
 800b57a:	8b3b      	ldrh	r3, [r7, #24]
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b580:	2300      	movs	r3, #0
 800b582:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	61fb      	str	r3, [r7, #28]
 800b58a:	88fb      	ldrh	r3, [r7, #6]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <pbuf_copy_partial+0xca>
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1c4      	bne.n	800b520 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b596:	8afb      	ldrh	r3, [r7, #22]
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3720      	adds	r7, #32
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}
 800b5a0:	080184f4 	.word	0x080184f4
 800b5a4:	0801883c 	.word	0x0801883c
 800b5a8:	08018554 	.word	0x08018554
 800b5ac:	0801885c 	.word	0x0801885c

0800b5b0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	603a      	str	r2, [r7, #0]
 800b5ba:	71fb      	strb	r3, [r7, #7]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	8919      	ldrh	r1, [r3, #8]
 800b5c4:	88ba      	ldrh	r2, [r7, #4]
 800b5c6:	79fb      	ldrb	r3, [r7, #7]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7ff fa99 	bl	800ab00 <pbuf_alloc>
 800b5ce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d101      	bne.n	800b5da <pbuf_clone+0x2a>
    return NULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	e011      	b.n	800b5fe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f7ff fea3 	bl	800b328 <pbuf_copy>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b5e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d006      	beq.n	800b5fc <pbuf_clone+0x4c>
 800b5ee:	4b06      	ldr	r3, [pc, #24]	; (800b608 <pbuf_clone+0x58>)
 800b5f0:	f240 5224 	movw	r2, #1316	; 0x524
 800b5f4:	4905      	ldr	r1, [pc, #20]	; (800b60c <pbuf_clone+0x5c>)
 800b5f6:	4806      	ldr	r0, [pc, #24]	; (800b610 <pbuf_clone+0x60>)
 800b5f8:	f00b f976 	bl	80168e8 <iprintf>
  return q;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	080184f4 	.word	0x080184f4
 800b60c:	08018968 	.word	0x08018968
 800b610:	08018554 	.word	0x08018554

0800b614 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b618:	f00b f97e 	bl	8016918 <rand>
 800b61c:	4603      	mov	r3, r0
 800b61e:	b29b      	uxth	r3, r3
 800b620:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b624:	b29b      	uxth	r3, r3
 800b626:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b62a:	b29a      	uxth	r2, r3
 800b62c:	4b01      	ldr	r3, [pc, #4]	; (800b634 <tcp_init+0x20>)
 800b62e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b630:	bf00      	nop
 800b632:	bd80      	pop	{r7, pc}
 800b634:	20000010 	.word	0x20000010

0800b638 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b082      	sub	sp, #8
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	7d1b      	ldrb	r3, [r3, #20]
 800b644:	2b01      	cmp	r3, #1
 800b646:	d105      	bne.n	800b654 <tcp_free+0x1c>
 800b648:	4b06      	ldr	r3, [pc, #24]	; (800b664 <tcp_free+0x2c>)
 800b64a:	22d4      	movs	r2, #212	; 0xd4
 800b64c:	4906      	ldr	r1, [pc, #24]	; (800b668 <tcp_free+0x30>)
 800b64e:	4807      	ldr	r0, [pc, #28]	; (800b66c <tcp_free+0x34>)
 800b650:	f00b f94a 	bl	80168e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b654:	6879      	ldr	r1, [r7, #4]
 800b656:	2001      	movs	r0, #1
 800b658:	f7fe fe86 	bl	800a368 <memp_free>
}
 800b65c:	bf00      	nop
 800b65e:	3708      	adds	r7, #8
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	080189f4 	.word	0x080189f4
 800b668:	08018a24 	.word	0x08018a24
 800b66c:	08018a38 	.word	0x08018a38

0800b670 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	7d1b      	ldrb	r3, [r3, #20]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d105      	bne.n	800b68c <tcp_free_listen+0x1c>
 800b680:	4b06      	ldr	r3, [pc, #24]	; (800b69c <tcp_free_listen+0x2c>)
 800b682:	22df      	movs	r2, #223	; 0xdf
 800b684:	4906      	ldr	r1, [pc, #24]	; (800b6a0 <tcp_free_listen+0x30>)
 800b686:	4807      	ldr	r0, [pc, #28]	; (800b6a4 <tcp_free_listen+0x34>)
 800b688:	f00b f92e 	bl	80168e8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b68c:	6879      	ldr	r1, [r7, #4]
 800b68e:	2002      	movs	r0, #2
 800b690:	f7fe fe6a 	bl	800a368 <memp_free>
}
 800b694:	bf00      	nop
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	080189f4 	.word	0x080189f4
 800b6a0:	08018a60 	.word	0x08018a60
 800b6a4:	08018a38 	.word	0x08018a38

0800b6a8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b6ac:	f001 f852 	bl	800c754 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b6b0:	4b07      	ldr	r3, [pc, #28]	; (800b6d0 <tcp_tmr+0x28>)
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <tcp_tmr+0x28>)
 800b6ba:	701a      	strb	r2, [r3, #0]
 800b6bc:	4b04      	ldr	r3, [pc, #16]	; (800b6d0 <tcp_tmr+0x28>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d001      	beq.n	800b6cc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b6c8:	f000 fd06 	bl	800c0d8 <tcp_slowtmr>
  }
}
 800b6cc:	bf00      	nop
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	20010255 	.word	0x20010255

0800b6d4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d105      	bne.n	800b6f0 <tcp_remove_listener+0x1c>
 800b6e4:	4b0d      	ldr	r3, [pc, #52]	; (800b71c <tcp_remove_listener+0x48>)
 800b6e6:	22ff      	movs	r2, #255	; 0xff
 800b6e8:	490d      	ldr	r1, [pc, #52]	; (800b720 <tcp_remove_listener+0x4c>)
 800b6ea:	480e      	ldr	r0, [pc, #56]	; (800b724 <tcp_remove_listener+0x50>)
 800b6ec:	f00b f8fc 	bl	80168e8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	60fb      	str	r3, [r7, #12]
 800b6f4:	e00a      	b.n	800b70c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	429a      	cmp	r2, r3
 800b6fe:	d102      	bne.n	800b706 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	60fb      	str	r3, [r7, #12]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1f1      	bne.n	800b6f6 <tcp_remove_listener+0x22>
    }
  }
}
 800b712:	bf00      	nop
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	080189f4 	.word	0x080189f4
 800b720:	08018a7c 	.word	0x08018a7c
 800b724:	08018a38 	.word	0x08018a38

0800b728 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d106      	bne.n	800b744 <tcp_listen_closed+0x1c>
 800b736:	4b14      	ldr	r3, [pc, #80]	; (800b788 <tcp_listen_closed+0x60>)
 800b738:	f240 1211 	movw	r2, #273	; 0x111
 800b73c:	4913      	ldr	r1, [pc, #76]	; (800b78c <tcp_listen_closed+0x64>)
 800b73e:	4814      	ldr	r0, [pc, #80]	; (800b790 <tcp_listen_closed+0x68>)
 800b740:	f00b f8d2 	bl	80168e8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	7d1b      	ldrb	r3, [r3, #20]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d006      	beq.n	800b75a <tcp_listen_closed+0x32>
 800b74c:	4b0e      	ldr	r3, [pc, #56]	; (800b788 <tcp_listen_closed+0x60>)
 800b74e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b752:	4910      	ldr	r1, [pc, #64]	; (800b794 <tcp_listen_closed+0x6c>)
 800b754:	480e      	ldr	r0, [pc, #56]	; (800b790 <tcp_listen_closed+0x68>)
 800b756:	f00b f8c7 	bl	80168e8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b75a:	2301      	movs	r3, #1
 800b75c:	60fb      	str	r3, [r7, #12]
 800b75e:	e00b      	b.n	800b778 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b760:	4a0d      	ldr	r2, [pc, #52]	; (800b798 <tcp_listen_closed+0x70>)
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	6879      	ldr	r1, [r7, #4]
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7ff ffb1 	bl	800b6d4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	3301      	adds	r3, #1
 800b776:	60fb      	str	r3, [r7, #12]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b03      	cmp	r3, #3
 800b77c:	d9f0      	bls.n	800b760 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b77e:	bf00      	nop
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	080189f4 	.word	0x080189f4
 800b78c:	08018aa4 	.word	0x08018aa4
 800b790:	08018a38 	.word	0x08018a38
 800b794:	08018ab0 	.word	0x08018ab0
 800b798:	0803ad50 	.word	0x0803ad50

0800b79c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b79c:	b5b0      	push	{r4, r5, r7, lr}
 800b79e:	b088      	sub	sp, #32
 800b7a0:	af04      	add	r7, sp, #16
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d106      	bne.n	800b7bc <tcp_close_shutdown+0x20>
 800b7ae:	4b61      	ldr	r3, [pc, #388]	; (800b934 <tcp_close_shutdown+0x198>)
 800b7b0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b7b4:	4960      	ldr	r1, [pc, #384]	; (800b938 <tcp_close_shutdown+0x19c>)
 800b7b6:	4861      	ldr	r0, [pc, #388]	; (800b93c <tcp_close_shutdown+0x1a0>)
 800b7b8:	f00b f896 	bl	80168e8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b7bc:	78fb      	ldrb	r3, [r7, #3]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d066      	beq.n	800b890 <tcp_close_shutdown+0xf4>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	7d1b      	ldrb	r3, [r3, #20]
 800b7c6:	2b04      	cmp	r3, #4
 800b7c8:	d003      	beq.n	800b7d2 <tcp_close_shutdown+0x36>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	7d1b      	ldrb	r3, [r3, #20]
 800b7ce:	2b07      	cmp	r3, #7
 800b7d0:	d15e      	bne.n	800b890 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d104      	bne.n	800b7e4 <tcp_close_shutdown+0x48>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b7e2:	d055      	beq.n	800b890 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	8b5b      	ldrh	r3, [r3, #26]
 800b7e8:	f003 0310 	and.w	r3, r3, #16
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d106      	bne.n	800b7fe <tcp_close_shutdown+0x62>
 800b7f0:	4b50      	ldr	r3, [pc, #320]	; (800b934 <tcp_close_shutdown+0x198>)
 800b7f2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800b7f6:	4952      	ldr	r1, [pc, #328]	; (800b940 <tcp_close_shutdown+0x1a4>)
 800b7f8:	4850      	ldr	r0, [pc, #320]	; (800b93c <tcp_close_shutdown+0x1a0>)
 800b7fa:	f00b f875 	bl	80168e8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800b806:	687d      	ldr	r5, [r7, #4]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	3304      	adds	r3, #4
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	8ad2      	ldrh	r2, [r2, #22]
 800b810:	6879      	ldr	r1, [r7, #4]
 800b812:	8b09      	ldrh	r1, [r1, #24]
 800b814:	9102      	str	r1, [sp, #8]
 800b816:	9201      	str	r2, [sp, #4]
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	462b      	mov	r3, r5
 800b81c:	4622      	mov	r2, r4
 800b81e:	4601      	mov	r1, r0
 800b820:	6878      	ldr	r0, [r7, #4]
 800b822:	f005 fd8f 	bl	8011344 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f001 fb60 	bl	800ceec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800b82c:	4b45      	ldr	r3, [pc, #276]	; (800b944 <tcp_close_shutdown+0x1a8>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	687a      	ldr	r2, [r7, #4]
 800b832:	429a      	cmp	r2, r3
 800b834:	d105      	bne.n	800b842 <tcp_close_shutdown+0xa6>
 800b836:	4b43      	ldr	r3, [pc, #268]	; (800b944 <tcp_close_shutdown+0x1a8>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68db      	ldr	r3, [r3, #12]
 800b83c:	4a41      	ldr	r2, [pc, #260]	; (800b944 <tcp_close_shutdown+0x1a8>)
 800b83e:	6013      	str	r3, [r2, #0]
 800b840:	e013      	b.n	800b86a <tcp_close_shutdown+0xce>
 800b842:	4b40      	ldr	r3, [pc, #256]	; (800b944 <tcp_close_shutdown+0x1a8>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	60fb      	str	r3, [r7, #12]
 800b848:	e00c      	b.n	800b864 <tcp_close_shutdown+0xc8>
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	68db      	ldr	r3, [r3, #12]
 800b84e:	687a      	ldr	r2, [r7, #4]
 800b850:	429a      	cmp	r2, r3
 800b852:	d104      	bne.n	800b85e <tcp_close_shutdown+0xc2>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	68da      	ldr	r2, [r3, #12]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	60da      	str	r2, [r3, #12]
 800b85c:	e005      	b.n	800b86a <tcp_close_shutdown+0xce>
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	60fb      	str	r3, [r7, #12]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d1ef      	bne.n	800b84a <tcp_close_shutdown+0xae>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	60da      	str	r2, [r3, #12]
 800b870:	4b35      	ldr	r3, [pc, #212]	; (800b948 <tcp_close_shutdown+0x1ac>)
 800b872:	2201      	movs	r2, #1
 800b874:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800b876:	4b35      	ldr	r3, [pc, #212]	; (800b94c <tcp_close_shutdown+0x1b0>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d102      	bne.n	800b886 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800b880:	f003 fff2 	bl	800f868 <tcp_trigger_input_pcb_close>
 800b884:	e002      	b.n	800b88c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7ff fed6 	bl	800b638 <tcp_free>
      }
      return ERR_OK;
 800b88c:	2300      	movs	r3, #0
 800b88e:	e04d      	b.n	800b92c <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	7d1b      	ldrb	r3, [r3, #20]
 800b894:	2b01      	cmp	r3, #1
 800b896:	d02d      	beq.n	800b8f4 <tcp_close_shutdown+0x158>
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d036      	beq.n	800b90a <tcp_close_shutdown+0x16e>
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d13f      	bne.n	800b920 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	8adb      	ldrh	r3, [r3, #22]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d021      	beq.n	800b8ec <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800b8a8:	4b29      	ldr	r3, [pc, #164]	; (800b950 <tcp_close_shutdown+0x1b4>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d105      	bne.n	800b8be <tcp_close_shutdown+0x122>
 800b8b2:	4b27      	ldr	r3, [pc, #156]	; (800b950 <tcp_close_shutdown+0x1b4>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	4a25      	ldr	r2, [pc, #148]	; (800b950 <tcp_close_shutdown+0x1b4>)
 800b8ba:	6013      	str	r3, [r2, #0]
 800b8bc:	e013      	b.n	800b8e6 <tcp_close_shutdown+0x14a>
 800b8be:	4b24      	ldr	r3, [pc, #144]	; (800b950 <tcp_close_shutdown+0x1b4>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	60bb      	str	r3, [r7, #8]
 800b8c4:	e00c      	b.n	800b8e0 <tcp_close_shutdown+0x144>
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d104      	bne.n	800b8da <tcp_close_shutdown+0x13e>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	68da      	ldr	r2, [r3, #12]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	60da      	str	r2, [r3, #12]
 800b8d8:	e005      	b.n	800b8e6 <tcp_close_shutdown+0x14a>
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	60bb      	str	r3, [r7, #8]
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d1ef      	bne.n	800b8c6 <tcp_close_shutdown+0x12a>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7ff fea3 	bl	800b638 <tcp_free>
      break;
 800b8f2:	e01a      	b.n	800b92a <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f7ff ff17 	bl	800b728 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800b8fa:	6879      	ldr	r1, [r7, #4]
 800b8fc:	4815      	ldr	r0, [pc, #84]	; (800b954 <tcp_close_shutdown+0x1b8>)
 800b8fe:	f001 fb45 	bl	800cf8c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f7ff feb4 	bl	800b670 <tcp_free_listen>
      break;
 800b908:	e00f      	b.n	800b92a <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800b90a:	6879      	ldr	r1, [r7, #4]
 800b90c:	480d      	ldr	r0, [pc, #52]	; (800b944 <tcp_close_shutdown+0x1a8>)
 800b90e:	f001 fb3d 	bl	800cf8c <tcp_pcb_remove>
 800b912:	4b0d      	ldr	r3, [pc, #52]	; (800b948 <tcp_close_shutdown+0x1ac>)
 800b914:	2201      	movs	r2, #1
 800b916:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7ff fe8d 	bl	800b638 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800b91e:	e004      	b.n	800b92a <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f819 	bl	800b958 <tcp_close_shutdown_fin>
 800b926:	4603      	mov	r3, r0
 800b928:	e000      	b.n	800b92c <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3710      	adds	r7, #16
 800b930:	46bd      	mov	sp, r7
 800b932:	bdb0      	pop	{r4, r5, r7, pc}
 800b934:	080189f4 	.word	0x080189f4
 800b938:	08018ac8 	.word	0x08018ac8
 800b93c:	08018a38 	.word	0x08018a38
 800b940:	08018ae8 	.word	0x08018ae8
 800b944:	20016e14 	.word	0x20016e14
 800b948:	20016e10 	.word	0x20016e10
 800b94c:	20016e28 	.word	0x20016e28
 800b950:	20016e20 	.word	0x20016e20
 800b954:	20016e1c 	.word	0x20016e1c

0800b958 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d106      	bne.n	800b974 <tcp_close_shutdown_fin+0x1c>
 800b966:	4b2c      	ldr	r3, [pc, #176]	; (800ba18 <tcp_close_shutdown_fin+0xc0>)
 800b968:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800b96c:	492b      	ldr	r1, [pc, #172]	; (800ba1c <tcp_close_shutdown_fin+0xc4>)
 800b96e:	482c      	ldr	r0, [pc, #176]	; (800ba20 <tcp_close_shutdown_fin+0xc8>)
 800b970:	f00a ffba 	bl	80168e8 <iprintf>

  switch (pcb->state) {
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	7d1b      	ldrb	r3, [r3, #20]
 800b978:	2b04      	cmp	r3, #4
 800b97a:	d010      	beq.n	800b99e <tcp_close_shutdown_fin+0x46>
 800b97c:	2b07      	cmp	r3, #7
 800b97e:	d01b      	beq.n	800b9b8 <tcp_close_shutdown_fin+0x60>
 800b980:	2b03      	cmp	r3, #3
 800b982:	d126      	bne.n	800b9d2 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f004 fddb 	bl	8010540 <tcp_send_fin>
 800b98a:	4603      	mov	r3, r0
 800b98c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d11f      	bne.n	800b9d6 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2205      	movs	r2, #5
 800b99a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b99c:	e01b      	b.n	800b9d6 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f004 fdce 	bl	8010540 <tcp_send_fin>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b9a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d114      	bne.n	800b9da <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2205      	movs	r2, #5
 800b9b4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b9b6:	e010      	b.n	800b9da <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f004 fdc1 	bl	8010540 <tcp_send_fin>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800b9c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d109      	bne.n	800b9de <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2209      	movs	r2, #9
 800b9ce:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b9d0:	e005      	b.n	800b9de <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	e01c      	b.n	800ba10 <tcp_close_shutdown_fin+0xb8>
      break;
 800b9d6:	bf00      	nop
 800b9d8:	e002      	b.n	800b9e0 <tcp_close_shutdown_fin+0x88>
      break;
 800b9da:	bf00      	nop
 800b9dc:	e000      	b.n	800b9e0 <tcp_close_shutdown_fin+0x88>
      break;
 800b9de:	bf00      	nop
  }

  if (err == ERR_OK) {
 800b9e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d103      	bne.n	800b9f0 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f004 fee7 	bl	80107bc <tcp_output>
 800b9ee:	e00d      	b.n	800ba0c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800b9f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f8:	d108      	bne.n	800ba0c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	8b5b      	ldrh	r3, [r3, #26]
 800b9fe:	f043 0308 	orr.w	r3, r3, #8
 800ba02:	b29a      	uxth	r2, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	e001      	b.n	800ba10 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800ba0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	080189f4 	.word	0x080189f4
 800ba1c:	08018aa4 	.word	0x08018aa4
 800ba20:	08018a38 	.word	0x08018a38

0800ba24 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b082      	sub	sp, #8
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d109      	bne.n	800ba46 <tcp_close+0x22>
 800ba32:	4b0f      	ldr	r3, [pc, #60]	; (800ba70 <tcp_close+0x4c>)
 800ba34:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ba38:	490e      	ldr	r1, [pc, #56]	; (800ba74 <tcp_close+0x50>)
 800ba3a:	480f      	ldr	r0, [pc, #60]	; (800ba78 <tcp_close+0x54>)
 800ba3c:	f00a ff54 	bl	80168e8 <iprintf>
 800ba40:	f06f 030f 	mvn.w	r3, #15
 800ba44:	e00f      	b.n	800ba66 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	7d1b      	ldrb	r3, [r3, #20]
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d006      	beq.n	800ba5c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	8b5b      	ldrh	r3, [r3, #26]
 800ba52:	f043 0310 	orr.w	r3, r3, #16
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f7ff fe9c 	bl	800b79c <tcp_close_shutdown>
 800ba64:	4603      	mov	r3, r0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	080189f4 	.word	0x080189f4
 800ba74:	08018b04 	.word	0x08018b04
 800ba78:	08018a38 	.word	0x08018a38

0800ba7c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b08e      	sub	sp, #56	; 0x38
 800ba80:	af04      	add	r7, sp, #16
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d107      	bne.n	800ba9c <tcp_abandon+0x20>
 800ba8c:	4b52      	ldr	r3, [pc, #328]	; (800bbd8 <tcp_abandon+0x15c>)
 800ba8e:	f240 223d 	movw	r2, #573	; 0x23d
 800ba92:	4952      	ldr	r1, [pc, #328]	; (800bbdc <tcp_abandon+0x160>)
 800ba94:	4852      	ldr	r0, [pc, #328]	; (800bbe0 <tcp_abandon+0x164>)
 800ba96:	f00a ff27 	bl	80168e8 <iprintf>
 800ba9a:	e099      	b.n	800bbd0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	7d1b      	ldrb	r3, [r3, #20]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d106      	bne.n	800bab2 <tcp_abandon+0x36>
 800baa4:	4b4c      	ldr	r3, [pc, #304]	; (800bbd8 <tcp_abandon+0x15c>)
 800baa6:	f240 2241 	movw	r2, #577	; 0x241
 800baaa:	494e      	ldr	r1, [pc, #312]	; (800bbe4 <tcp_abandon+0x168>)
 800baac:	484c      	ldr	r0, [pc, #304]	; (800bbe0 <tcp_abandon+0x164>)
 800baae:	f00a ff1b 	bl	80168e8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	7d1b      	ldrb	r3, [r3, #20]
 800bab6:	2b0a      	cmp	r3, #10
 800bab8:	d107      	bne.n	800baca <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800baba:	6879      	ldr	r1, [r7, #4]
 800babc:	484a      	ldr	r0, [pc, #296]	; (800bbe8 <tcp_abandon+0x16c>)
 800babe:	f001 fa65 	bl	800cf8c <tcp_pcb_remove>
    tcp_free(pcb);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff fdb8 	bl	800b638 <tcp_free>
 800bac8:	e082      	b.n	800bbd0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800baca:	2300      	movs	r3, #0
 800bacc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bace:	2300      	movs	r3, #0
 800bad0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800badc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bae4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	7d1b      	ldrb	r3, [r3, #20]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d126      	bne.n	800bb42 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	8adb      	ldrh	r3, [r3, #22]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d02e      	beq.n	800bb5a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bafc:	4b3b      	ldr	r3, [pc, #236]	; (800bbec <tcp_abandon+0x170>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d105      	bne.n	800bb12 <tcp_abandon+0x96>
 800bb06:	4b39      	ldr	r3, [pc, #228]	; (800bbec <tcp_abandon+0x170>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	4a37      	ldr	r2, [pc, #220]	; (800bbec <tcp_abandon+0x170>)
 800bb0e:	6013      	str	r3, [r2, #0]
 800bb10:	e013      	b.n	800bb3a <tcp_abandon+0xbe>
 800bb12:	4b36      	ldr	r3, [pc, #216]	; (800bbec <tcp_abandon+0x170>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	61fb      	str	r3, [r7, #28]
 800bb18:	e00c      	b.n	800bb34 <tcp_abandon+0xb8>
 800bb1a:	69fb      	ldr	r3, [r7, #28]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d104      	bne.n	800bb2e <tcp_abandon+0xb2>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	68da      	ldr	r2, [r3, #12]
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	60da      	str	r2, [r3, #12]
 800bb2c:	e005      	b.n	800bb3a <tcp_abandon+0xbe>
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	68db      	ldr	r3, [r3, #12]
 800bb32:	61fb      	str	r3, [r7, #28]
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1ef      	bne.n	800bb1a <tcp_abandon+0x9e>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	60da      	str	r2, [r3, #12]
 800bb40:	e00b      	b.n	800bb5a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	8adb      	ldrh	r3, [r3, #22]
 800bb4a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bb4c:	6879      	ldr	r1, [r7, #4]
 800bb4e:	4828      	ldr	r0, [pc, #160]	; (800bbf0 <tcp_abandon+0x174>)
 800bb50:	f001 fa1c 	bl	800cf8c <tcp_pcb_remove>
 800bb54:	4b27      	ldr	r3, [pc, #156]	; (800bbf4 <tcp_abandon+0x178>)
 800bb56:	2201      	movs	r2, #1
 800bb58:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d004      	beq.n	800bb6c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 fed4 	bl	800c914 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d004      	beq.n	800bb7e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f000 fecb 	bl	800c914 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d004      	beq.n	800bb90 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f000 fec2 	bl	800c914 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800bb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00e      	beq.n	800bbb4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bb96:	6879      	ldr	r1, [r7, #4]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	3304      	adds	r3, #4
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	8b12      	ldrh	r2, [r2, #24]
 800bba0:	9202      	str	r2, [sp, #8]
 800bba2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bba4:	9201      	str	r2, [sp, #4]
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	460b      	mov	r3, r1
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	69b9      	ldr	r1, [r7, #24]
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f005 fbc8 	bl	8011344 <tcp_rst>
    }
    last_state = pcb->state;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	7d1b      	ldrb	r3, [r3, #20]
 800bbb8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f7ff fd3c 	bl	800b638 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d004      	beq.n	800bbd0 <tcp_abandon+0x154>
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	f06f 010c 	mvn.w	r1, #12
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	4798      	blx	r3
  }
}
 800bbd0:	3728      	adds	r7, #40	; 0x28
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	080189f4 	.word	0x080189f4
 800bbdc:	08018b38 	.word	0x08018b38
 800bbe0:	08018a38 	.word	0x08018a38
 800bbe4:	08018b54 	.word	0x08018b54
 800bbe8:	20016e24 	.word	0x20016e24
 800bbec:	20016e20 	.word	0x20016e20
 800bbf0:	20016e14 	.word	0x20016e14
 800bbf4:	20016e10 	.word	0x20016e10

0800bbf8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800bc00:	2101      	movs	r1, #1
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f7ff ff3a 	bl	800ba7c <tcp_abandon>
}
 800bc08:	bf00      	nop
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b088      	sub	sp, #32
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800bc1e:	2304      	movs	r3, #4
 800bc20:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800bc28:	4b3e      	ldr	r3, [pc, #248]	; (800bd24 <tcp_bind+0x114>)
 800bc2a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d109      	bne.n	800bc46 <tcp_bind+0x36>
 800bc32:	4b3d      	ldr	r3, [pc, #244]	; (800bd28 <tcp_bind+0x118>)
 800bc34:	f240 22a9 	movw	r2, #681	; 0x2a9
 800bc38:	493c      	ldr	r1, [pc, #240]	; (800bd2c <tcp_bind+0x11c>)
 800bc3a:	483d      	ldr	r0, [pc, #244]	; (800bd30 <tcp_bind+0x120>)
 800bc3c:	f00a fe54 	bl	80168e8 <iprintf>
 800bc40:	f06f 030f 	mvn.w	r3, #15
 800bc44:	e06a      	b.n	800bd1c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	7d1b      	ldrb	r3, [r3, #20]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d009      	beq.n	800bc62 <tcp_bind+0x52>
 800bc4e:	4b36      	ldr	r3, [pc, #216]	; (800bd28 <tcp_bind+0x118>)
 800bc50:	f240 22ab 	movw	r2, #683	; 0x2ab
 800bc54:	4937      	ldr	r1, [pc, #220]	; (800bd34 <tcp_bind+0x124>)
 800bc56:	4836      	ldr	r0, [pc, #216]	; (800bd30 <tcp_bind+0x120>)
 800bc58:	f00a fe46 	bl	80168e8 <iprintf>
 800bc5c:	f06f 0305 	mvn.w	r3, #5
 800bc60:	e05c      	b.n	800bd1c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800bc62:	88fb      	ldrh	r3, [r7, #6]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d109      	bne.n	800bc7c <tcp_bind+0x6c>
    port = tcp_new_port();
 800bc68:	f000 f9f0 	bl	800c04c <tcp_new_port>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800bc70:	88fb      	ldrh	r3, [r7, #6]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d135      	bne.n	800bce2 <tcp_bind+0xd2>
      return ERR_BUF;
 800bc76:	f06f 0301 	mvn.w	r3, #1
 800bc7a:	e04f      	b.n	800bd1c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	61fb      	str	r3, [r7, #28]
 800bc80:	e02b      	b.n	800bcda <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800bc82:	4a2d      	ldr	r2, [pc, #180]	; (800bd38 <tcp_bind+0x128>)
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	61bb      	str	r3, [r7, #24]
 800bc8e:	e01e      	b.n	800bcce <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	8adb      	ldrh	r3, [r3, #22]
 800bc94:	88fa      	ldrh	r2, [r7, #6]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d116      	bne.n	800bcc8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800bc9a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d010      	beq.n	800bcc2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00c      	beq.n	800bcc2 <tcp_bind+0xb2>
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d009      	beq.n	800bcc2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d005      	beq.n	800bcc2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	68bb      	ldr	r3, [r7, #8]
 800bcbc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d102      	bne.n	800bcc8 <tcp_bind+0xb8>
              return ERR_USE;
 800bcc2:	f06f 0307 	mvn.w	r3, #7
 800bcc6:	e029      	b.n	800bd1c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800bcc8:	69bb      	ldr	r3, [r7, #24]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	61bb      	str	r3, [r7, #24]
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1dd      	bne.n	800bc90 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800bcd4:	69fb      	ldr	r3, [r7, #28]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	61fb      	str	r3, [r7, #28]
 800bcda:	69fa      	ldr	r2, [r7, #28]
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	dbcf      	blt.n	800bc82 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d00c      	beq.n	800bd02 <tcp_bind+0xf2>
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d008      	beq.n	800bd02 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d002      	beq.n	800bcfc <tcp_bind+0xec>
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	e000      	b.n	800bcfe <tcp_bind+0xee>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	68fa      	ldr	r2, [r7, #12]
 800bd00:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	88fa      	ldrh	r2, [r7, #6]
 800bd06:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800bd08:	4b0c      	ldr	r3, [pc, #48]	; (800bd3c <tcp_bind+0x12c>)
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	60da      	str	r2, [r3, #12]
 800bd10:	4a0a      	ldr	r2, [pc, #40]	; (800bd3c <tcp_bind+0x12c>)
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6013      	str	r3, [r2, #0]
 800bd16:	f005 fcd7 	bl	80116c8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3720      	adds	r7, #32
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	0803ad88 	.word	0x0803ad88
 800bd28:	080189f4 	.word	0x080189f4
 800bd2c:	08018b88 	.word	0x08018b88
 800bd30:	08018a38 	.word	0x08018a38
 800bd34:	08018ba0 	.word	0x08018ba0
 800bd38:	0803ad50 	.word	0x0803ad50
 800bd3c:	20016e20 	.word	0x20016e20

0800bd40 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d106      	bne.n	800bd62 <tcp_accept_null+0x22>
 800bd54:	4b07      	ldr	r3, [pc, #28]	; (800bd74 <tcp_accept_null+0x34>)
 800bd56:	f240 320f 	movw	r2, #783	; 0x30f
 800bd5a:	4907      	ldr	r1, [pc, #28]	; (800bd78 <tcp_accept_null+0x38>)
 800bd5c:	4807      	ldr	r0, [pc, #28]	; (800bd7c <tcp_accept_null+0x3c>)
 800bd5e:	f00a fdc3 	bl	80168e8 <iprintf>

  tcp_abort(pcb);
 800bd62:	68b8      	ldr	r0, [r7, #8]
 800bd64:	f7ff ff48 	bl	800bbf8 <tcp_abort>

  return ERR_ABRT;
 800bd68:	f06f 030c 	mvn.w	r3, #12
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3710      	adds	r7, #16
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	080189f4 	.word	0x080189f4
 800bd78:	08018bc8 	.word	0x08018bc8
 800bd7c:	08018a38 	.word	0x08018a38

0800bd80 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	460b      	mov	r3, r1
 800bd8a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800bd8c:	78fb      	ldrb	r3, [r7, #3]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	4619      	mov	r1, r3
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 f806 	bl	800bda4 <tcp_listen_with_backlog_and_err>
 800bd98:	4603      	mov	r3, r0
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3708      	adds	r7, #8
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
	...

0800bda4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b088      	sub	sp, #32
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	460b      	mov	r3, r1
 800bdae:	607a      	str	r2, [r7, #4]
 800bdb0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d109      	bne.n	800bdd0 <tcp_listen_with_backlog_and_err+0x2c>
 800bdbc:	4b47      	ldr	r3, [pc, #284]	; (800bedc <tcp_listen_with_backlog_and_err+0x138>)
 800bdbe:	f240 3259 	movw	r2, #857	; 0x359
 800bdc2:	4947      	ldr	r1, [pc, #284]	; (800bee0 <tcp_listen_with_backlog_and_err+0x13c>)
 800bdc4:	4847      	ldr	r0, [pc, #284]	; (800bee4 <tcp_listen_with_backlog_and_err+0x140>)
 800bdc6:	f00a fd8f 	bl	80168e8 <iprintf>
 800bdca:	23f0      	movs	r3, #240	; 0xf0
 800bdcc:	76fb      	strb	r3, [r7, #27]
 800bdce:	e079      	b.n	800bec4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	7d1b      	ldrb	r3, [r3, #20]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d009      	beq.n	800bdec <tcp_listen_with_backlog_and_err+0x48>
 800bdd8:	4b40      	ldr	r3, [pc, #256]	; (800bedc <tcp_listen_with_backlog_and_err+0x138>)
 800bdda:	f240 325a 	movw	r2, #858	; 0x35a
 800bdde:	4942      	ldr	r1, [pc, #264]	; (800bee8 <tcp_listen_with_backlog_and_err+0x144>)
 800bde0:	4840      	ldr	r0, [pc, #256]	; (800bee4 <tcp_listen_with_backlog_and_err+0x140>)
 800bde2:	f00a fd81 	bl	80168e8 <iprintf>
 800bde6:	23f1      	movs	r3, #241	; 0xf1
 800bde8:	76fb      	strb	r3, [r7, #27]
 800bdea:	e06b      	b.n	800bec4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	7d1b      	ldrb	r3, [r3, #20]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d104      	bne.n	800bdfe <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800bdf8:	23f7      	movs	r3, #247	; 0xf7
 800bdfa:	76fb      	strb	r3, [r7, #27]
    goto done;
 800bdfc:	e062      	b.n	800bec4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800bdfe:	2002      	movs	r0, #2
 800be00:	f7fe fa60 	bl	800a2c4 <memp_malloc>
 800be04:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d102      	bne.n	800be12 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800be0c:	23ff      	movs	r3, #255	; 0xff
 800be0e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800be10:	e058      	b.n	800bec4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	691a      	ldr	r2, [r3, #16]
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	8ada      	ldrh	r2, [r3, #22]
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	2201      	movs	r2, #1
 800be26:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	7d5a      	ldrb	r2, [r3, #21]
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	7a5a      	ldrb	r2, [r3, #9]
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	2200      	movs	r2, #0
 800be3c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	7ada      	ldrb	r2, [r3, #11]
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	7a9a      	ldrb	r2, [r3, #10]
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	8adb      	ldrh	r3, [r3, #22]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d021      	beq.n	800bea2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800be5e:	4b23      	ldr	r3, [pc, #140]	; (800beec <tcp_listen_with_backlog_and_err+0x148>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	68fa      	ldr	r2, [r7, #12]
 800be64:	429a      	cmp	r2, r3
 800be66:	d105      	bne.n	800be74 <tcp_listen_with_backlog_and_err+0xd0>
 800be68:	4b20      	ldr	r3, [pc, #128]	; (800beec <tcp_listen_with_backlog_and_err+0x148>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	4a1f      	ldr	r2, [pc, #124]	; (800beec <tcp_listen_with_backlog_and_err+0x148>)
 800be70:	6013      	str	r3, [r2, #0]
 800be72:	e013      	b.n	800be9c <tcp_listen_with_backlog_and_err+0xf8>
 800be74:	4b1d      	ldr	r3, [pc, #116]	; (800beec <tcp_listen_with_backlog_and_err+0x148>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	617b      	str	r3, [r7, #20]
 800be7a:	e00c      	b.n	800be96 <tcp_listen_with_backlog_and_err+0xf2>
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	429a      	cmp	r2, r3
 800be84:	d104      	bne.n	800be90 <tcp_listen_with_backlog_and_err+0xec>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	68da      	ldr	r2, [r3, #12]
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	60da      	str	r2, [r3, #12]
 800be8e:	e005      	b.n	800be9c <tcp_listen_with_backlog_and_err+0xf8>
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	617b      	str	r3, [r7, #20]
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1ef      	bne.n	800be7c <tcp_listen_with_backlog_and_err+0xd8>
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2200      	movs	r2, #0
 800bea0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f7ff fbc8 	bl	800b638 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	4a11      	ldr	r2, [pc, #68]	; (800bef0 <tcp_listen_with_backlog_and_err+0x14c>)
 800beac:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800beae:	4b11      	ldr	r3, [pc, #68]	; (800bef4 <tcp_listen_with_backlog_and_err+0x150>)
 800beb0:	681a      	ldr	r2, [r3, #0]
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	60da      	str	r2, [r3, #12]
 800beb6:	4a0f      	ldr	r2, [pc, #60]	; (800bef4 <tcp_listen_with_backlog_and_err+0x150>)
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	6013      	str	r3, [r2, #0]
 800bebc:	f005 fc04 	bl	80116c8 <tcp_timer_needed>
  res = ERR_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d002      	beq.n	800bed0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	7efa      	ldrb	r2, [r7, #27]
 800bece:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800bed0:	69fb      	ldr	r3, [r7, #28]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3720      	adds	r7, #32
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	080189f4 	.word	0x080189f4
 800bee0:	08018be8 	.word	0x08018be8
 800bee4:	08018a38 	.word	0x08018a38
 800bee8:	08018c18 	.word	0x08018c18
 800beec:	20016e20 	.word	0x20016e20
 800bef0:	0800bd41 	.word	0x0800bd41
 800bef4:	20016e1c 	.word	0x20016e1c

0800bef8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b084      	sub	sp, #16
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <tcp_update_rcv_ann_wnd+0x1c>
 800bf06:	4b25      	ldr	r3, [pc, #148]	; (800bf9c <tcp_update_rcv_ann_wnd+0xa4>)
 800bf08:	f240 32a6 	movw	r2, #934	; 0x3a6
 800bf0c:	4924      	ldr	r1, [pc, #144]	; (800bfa0 <tcp_update_rcv_ann_wnd+0xa8>)
 800bf0e:	4825      	ldr	r0, [pc, #148]	; (800bfa4 <tcp_update_rcv_ann_wnd+0xac>)
 800bf10:	f00a fcea 	bl	80168e8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800bf1c:	4413      	add	r3, r2
 800bf1e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800bf28:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800bf2c:	bf28      	it	cs
 800bf2e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800bf32:	b292      	uxth	r2, r2
 800bf34:	4413      	add	r3, r2
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	1ad3      	subs	r3, r2, r3
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	db08      	blt.n	800bf50 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	1ad3      	subs	r3, r2, r3
 800bf4e:	e020      	b.n	800bf92 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	dd03      	ble.n	800bf66 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bf64:	e014      	b.n	800bf90 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6e:	1ad3      	subs	r3, r2, r3
 800bf70:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf78:	d306      	bcc.n	800bf88 <tcp_update_rcv_ann_wnd+0x90>
 800bf7a:	4b08      	ldr	r3, [pc, #32]	; (800bf9c <tcp_update_rcv_ann_wnd+0xa4>)
 800bf7c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800bf80:	4909      	ldr	r1, [pc, #36]	; (800bfa8 <tcp_update_rcv_ann_wnd+0xb0>)
 800bf82:	4808      	ldr	r0, [pc, #32]	; (800bfa4 <tcp_update_rcv_ann_wnd+0xac>)
 800bf84:	f00a fcb0 	bl	80168e8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	b29a      	uxth	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800bf90:	2300      	movs	r3, #0
  }
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	080189f4 	.word	0x080189f4
 800bfa0:	08018c50 	.word	0x08018c50
 800bfa4:	08018a38 	.word	0x08018a38
 800bfa8:	08018c74 	.word	0x08018c74

0800bfac <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d107      	bne.n	800bfce <tcp_recved+0x22>
 800bfbe:	4b1f      	ldr	r3, [pc, #124]	; (800c03c <tcp_recved+0x90>)
 800bfc0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800bfc4:	491e      	ldr	r1, [pc, #120]	; (800c040 <tcp_recved+0x94>)
 800bfc6:	481f      	ldr	r0, [pc, #124]	; (800c044 <tcp_recved+0x98>)
 800bfc8:	f00a fc8e 	bl	80168e8 <iprintf>
 800bfcc:	e032      	b.n	800c034 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	7d1b      	ldrb	r3, [r3, #20]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d106      	bne.n	800bfe4 <tcp_recved+0x38>
 800bfd6:	4b19      	ldr	r3, [pc, #100]	; (800c03c <tcp_recved+0x90>)
 800bfd8:	f240 32d3 	movw	r2, #979	; 0x3d3
 800bfdc:	491a      	ldr	r1, [pc, #104]	; (800c048 <tcp_recved+0x9c>)
 800bfde:	4819      	ldr	r0, [pc, #100]	; (800c044 <tcp_recved+0x98>)
 800bfe0:	f00a fc82 	bl	80168e8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bfe8:	887b      	ldrh	r3, [r7, #2]
 800bfea:	4413      	add	r3, r2
 800bfec:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800bfee:	89fb      	ldrh	r3, [r7, #14]
 800bff0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bff4:	d804      	bhi.n	800c000 <tcp_recved+0x54>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bffa:	89fa      	ldrh	r2, [r7, #14]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d204      	bcs.n	800c00a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c006:	851a      	strh	r2, [r3, #40]	; 0x28
 800c008:	e002      	b.n	800c010 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	89fa      	ldrh	r2, [r7, #14]
 800c00e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7ff ff71 	bl	800bef8 <tcp_update_rcv_ann_wnd>
 800c016:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c01e:	d309      	bcc.n	800c034 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	8b5b      	ldrh	r3, [r3, #26]
 800c024:	f043 0302 	orr.w	r3, r3, #2
 800c028:	b29a      	uxth	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f004 fbc4 	bl	80107bc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	080189f4 	.word	0x080189f4
 800c040:	08018c90 	.word	0x08018c90
 800c044:	08018a38 	.word	0x08018a38
 800c048:	08018ca8 	.word	0x08018ca8

0800c04c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c052:	2300      	movs	r3, #0
 800c054:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c056:	4b1e      	ldr	r3, [pc, #120]	; (800c0d0 <tcp_new_port+0x84>)
 800c058:	881b      	ldrh	r3, [r3, #0]
 800c05a:	3301      	adds	r3, #1
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	4b1c      	ldr	r3, [pc, #112]	; (800c0d0 <tcp_new_port+0x84>)
 800c060:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c062:	4b1b      	ldr	r3, [pc, #108]	; (800c0d0 <tcp_new_port+0x84>)
 800c064:	881b      	ldrh	r3, [r3, #0]
 800c066:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d103      	bne.n	800c076 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c06e:	4b18      	ldr	r3, [pc, #96]	; (800c0d0 <tcp_new_port+0x84>)
 800c070:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c074:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c076:	2300      	movs	r3, #0
 800c078:	71fb      	strb	r3, [r7, #7]
 800c07a:	e01e      	b.n	800c0ba <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c07c:	79fb      	ldrb	r3, [r7, #7]
 800c07e:	4a15      	ldr	r2, [pc, #84]	; (800c0d4 <tcp_new_port+0x88>)
 800c080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	603b      	str	r3, [r7, #0]
 800c088:	e011      	b.n	800c0ae <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	8ada      	ldrh	r2, [r3, #22]
 800c08e:	4b10      	ldr	r3, [pc, #64]	; (800c0d0 <tcp_new_port+0x84>)
 800c090:	881b      	ldrh	r3, [r3, #0]
 800c092:	429a      	cmp	r2, r3
 800c094:	d108      	bne.n	800c0a8 <tcp_new_port+0x5c>
        n++;
 800c096:	88bb      	ldrh	r3, [r7, #4]
 800c098:	3301      	adds	r3, #1
 800c09a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c09c:	88bb      	ldrh	r3, [r7, #4]
 800c09e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c0a2:	d3d8      	bcc.n	800c056 <tcp_new_port+0xa>
          return 0;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	e00d      	b.n	800c0c4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	603b      	str	r3, [r7, #0]
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1ea      	bne.n	800c08a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c0b4:	79fb      	ldrb	r3, [r7, #7]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	71fb      	strb	r3, [r7, #7]
 800c0ba:	79fb      	ldrb	r3, [r7, #7]
 800c0bc:	2b03      	cmp	r3, #3
 800c0be:	d9dd      	bls.n	800c07c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c0c0:	4b03      	ldr	r3, [pc, #12]	; (800c0d0 <tcp_new_port+0x84>)
 800c0c2:	881b      	ldrh	r3, [r3, #0]
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	370c      	adds	r7, #12
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr
 800c0d0:	20000010 	.word	0x20000010
 800c0d4:	0803ad50 	.word	0x0803ad50

0800c0d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c0d8:	b5b0      	push	{r4, r5, r7, lr}
 800c0da:	b090      	sub	sp, #64	; 0x40
 800c0dc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c0e4:	4b94      	ldr	r3, [pc, #592]	; (800c338 <tcp_slowtmr+0x260>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	4a93      	ldr	r2, [pc, #588]	; (800c338 <tcp_slowtmr+0x260>)
 800c0ec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c0ee:	4b93      	ldr	r3, [pc, #588]	; (800c33c <tcp_slowtmr+0x264>)
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	b2da      	uxtb	r2, r3
 800c0f6:	4b91      	ldr	r3, [pc, #580]	; (800c33c <tcp_slowtmr+0x264>)
 800c0f8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c0fe:	4b90      	ldr	r3, [pc, #576]	; (800c340 <tcp_slowtmr+0x268>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c104:	e29f      	b.n	800c646 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c108:	7d1b      	ldrb	r3, [r3, #20]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d106      	bne.n	800c11c <tcp_slowtmr+0x44>
 800c10e:	4b8d      	ldr	r3, [pc, #564]	; (800c344 <tcp_slowtmr+0x26c>)
 800c110:	f240 42be 	movw	r2, #1214	; 0x4be
 800c114:	498c      	ldr	r1, [pc, #560]	; (800c348 <tcp_slowtmr+0x270>)
 800c116:	488d      	ldr	r0, [pc, #564]	; (800c34c <tcp_slowtmr+0x274>)
 800c118:	f00a fbe6 	bl	80168e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11e:	7d1b      	ldrb	r3, [r3, #20]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d106      	bne.n	800c132 <tcp_slowtmr+0x5a>
 800c124:	4b87      	ldr	r3, [pc, #540]	; (800c344 <tcp_slowtmr+0x26c>)
 800c126:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c12a:	4989      	ldr	r1, [pc, #548]	; (800c350 <tcp_slowtmr+0x278>)
 800c12c:	4887      	ldr	r0, [pc, #540]	; (800c34c <tcp_slowtmr+0x274>)
 800c12e:	f00a fbdb 	bl	80168e8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c134:	7d1b      	ldrb	r3, [r3, #20]
 800c136:	2b0a      	cmp	r3, #10
 800c138:	d106      	bne.n	800c148 <tcp_slowtmr+0x70>
 800c13a:	4b82      	ldr	r3, [pc, #520]	; (800c344 <tcp_slowtmr+0x26c>)
 800c13c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c140:	4984      	ldr	r1, [pc, #528]	; (800c354 <tcp_slowtmr+0x27c>)
 800c142:	4882      	ldr	r0, [pc, #520]	; (800c34c <tcp_slowtmr+0x274>)
 800c144:	f00a fbd0 	bl	80168e8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14a:	7f9a      	ldrb	r2, [r3, #30]
 800c14c:	4b7b      	ldr	r3, [pc, #492]	; (800c33c <tcp_slowtmr+0x264>)
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	429a      	cmp	r2, r3
 800c152:	d105      	bne.n	800c160 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c156:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c15e:	e272      	b.n	800c646 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c160:	4b76      	ldr	r3, [pc, #472]	; (800c33c <tcp_slowtmr+0x264>)
 800c162:	781a      	ldrb	r2, [r3, #0]
 800c164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c166:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c16e:	2300      	movs	r3, #0
 800c170:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c176:	7d1b      	ldrb	r3, [r3, #20]
 800c178:	2b02      	cmp	r3, #2
 800c17a:	d10a      	bne.n	800c192 <tcp_slowtmr+0xba>
 800c17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c182:	2b05      	cmp	r3, #5
 800c184:	d905      	bls.n	800c192 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c186:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c18a:	3301      	adds	r3, #1
 800c18c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c190:	e11e      	b.n	800c3d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c194:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c198:	2b0b      	cmp	r3, #11
 800c19a:	d905      	bls.n	800c1a8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c19c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c1a6:	e113      	b.n	800c3d0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d075      	beq.n	800c29e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d006      	beq.n	800c1c8 <tcp_slowtmr+0xf0>
 800c1ba:	4b62      	ldr	r3, [pc, #392]	; (800c344 <tcp_slowtmr+0x26c>)
 800c1bc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c1c0:	4965      	ldr	r1, [pc, #404]	; (800c358 <tcp_slowtmr+0x280>)
 800c1c2:	4862      	ldr	r0, [pc, #392]	; (800c34c <tcp_slowtmr+0x274>)
 800c1c4:	f00a fb90 	bl	80168e8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d106      	bne.n	800c1de <tcp_slowtmr+0x106>
 800c1d0:	4b5c      	ldr	r3, [pc, #368]	; (800c344 <tcp_slowtmr+0x26c>)
 800c1d2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c1d6:	4961      	ldr	r1, [pc, #388]	; (800c35c <tcp_slowtmr+0x284>)
 800c1d8:	485c      	ldr	r0, [pc, #368]	; (800c34c <tcp_slowtmr+0x274>)
 800c1da:	f00a fb85 	bl	80168e8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c1e4:	2b0b      	cmp	r3, #11
 800c1e6:	d905      	bls.n	800c1f4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c1f2:	e0ed      	b.n	800c3d0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	4a58      	ldr	r2, [pc, #352]	; (800c360 <tcp_slowtmr+0x288>)
 800c1fe:	5cd3      	ldrb	r3, [r2, r3]
 800c200:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c204:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c208:	7c7a      	ldrb	r2, [r7, #17]
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d907      	bls.n	800c21e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c210:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c214:	3301      	adds	r3, #1
 800c216:	b2da      	uxtb	r2, r3
 800c218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c220:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c224:	7c7a      	ldrb	r2, [r7, #17]
 800c226:	429a      	cmp	r2, r3
 800c228:	f200 80d2 	bhi.w	800c3d0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c22c:	2301      	movs	r3, #1
 800c22e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c232:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c236:	2b00      	cmp	r3, #0
 800c238:	d108      	bne.n	800c24c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c23a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c23c:	f005 f976 	bl	801152c <tcp_zero_window_probe>
 800c240:	4603      	mov	r3, r0
 800c242:	2b00      	cmp	r3, #0
 800c244:	d014      	beq.n	800c270 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c246:	2300      	movs	r3, #0
 800c248:	623b      	str	r3, [r7, #32]
 800c24a:	e011      	b.n	800c270 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c252:	4619      	mov	r1, r3
 800c254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c256:	f004 f82b 	bl	80102b0 <tcp_split_unsent_seg>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d107      	bne.n	800c270 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c262:	f004 faab 	bl	80107bc <tcp_output>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c26c:	2300      	movs	r3, #0
 800c26e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	2b00      	cmp	r3, #0
 800c274:	f000 80ac 	beq.w	800c3d0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c282:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c286:	2b06      	cmp	r3, #6
 800c288:	f200 80a2 	bhi.w	800c3d0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c292:	3301      	adds	r3, #1
 800c294:	b2da      	uxtb	r2, r3
 800c296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c298:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c29c:	e098      	b.n	800c3d0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	db0f      	blt.n	800c2c8 <tcp_slowtmr+0x1f0>
 800c2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c2ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d008      	beq.n	800c2c8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	3301      	adds	r3, #1
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	b21a      	sxth	r2, r3
 800c2c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ca:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	db7b      	blt.n	800c3d0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c2d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2da:	f004 fd67 	bl	8010dac <tcp_rexmit_rto_prepare>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d007      	beq.n	800c2f4 <tcp_slowtmr+0x21c>
 800c2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d171      	bne.n	800c3d0 <tcp_slowtmr+0x2f8>
 800c2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d06d      	beq.n	800c3d0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c2f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f6:	7d1b      	ldrb	r3, [r3, #20]
 800c2f8:	2b02      	cmp	r3, #2
 800c2fa:	d03a      	beq.n	800c372 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c302:	2b0c      	cmp	r3, #12
 800c304:	bf28      	it	cs
 800c306:	230c      	movcs	r3, #12
 800c308:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c310:	10db      	asrs	r3, r3, #3
 800c312:	b21b      	sxth	r3, r3
 800c314:	461a      	mov	r2, r3
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c31c:	4413      	add	r3, r2
 800c31e:	7efa      	ldrb	r2, [r7, #27]
 800c320:	4910      	ldr	r1, [pc, #64]	; (800c364 <tcp_slowtmr+0x28c>)
 800c322:	5c8a      	ldrb	r2, [r1, r2]
 800c324:	4093      	lsls	r3, r2
 800c326:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c32e:	4293      	cmp	r3, r2
 800c330:	dc1a      	bgt.n	800c368 <tcp_slowtmr+0x290>
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	b21a      	sxth	r2, r3
 800c336:	e019      	b.n	800c36c <tcp_slowtmr+0x294>
 800c338:	20016e18 	.word	0x20016e18
 800c33c:	20010256 	.word	0x20010256
 800c340:	20016e14 	.word	0x20016e14
 800c344:	080189f4 	.word	0x080189f4
 800c348:	08018d38 	.word	0x08018d38
 800c34c:	08018a38 	.word	0x08018a38
 800c350:	08018d64 	.word	0x08018d64
 800c354:	08018d90 	.word	0x08018d90
 800c358:	08018dc0 	.word	0x08018dc0
 800c35c:	08018df4 	.word	0x08018df4
 800c360:	0803ad48 	.word	0x0803ad48
 800c364:	0803ad38 	.word	0x0803ad38
 800c368:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c36e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c374:	2200      	movs	r2, #0
 800c376:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c380:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c384:	4293      	cmp	r3, r2
 800c386:	bf28      	it	cs
 800c388:	4613      	movcs	r3, r2
 800c38a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c38c:	8a7b      	ldrh	r3, [r7, #18]
 800c38e:	085b      	lsrs	r3, r3, #1
 800c390:	b29a      	uxth	r2, r3
 800c392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c394:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3a2:	005b      	lsls	r3, r3, #1
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d206      	bcs.n	800c3b8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3ae:	005b      	lsls	r3, r3, #1
 800c3b0:	b29a      	uxth	r2, r3
 800c3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c3ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3cc:	f004 fd5e 	bl	8010e8c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d2:	7d1b      	ldrb	r3, [r3, #20]
 800c3d4:	2b06      	cmp	r3, #6
 800c3d6:	d111      	bne.n	800c3fc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3da:	8b5b      	ldrh	r3, [r3, #26]
 800c3dc:	f003 0310 	and.w	r3, r3, #16
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00b      	beq.n	800c3fc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c3e4:	4b9d      	ldr	r3, [pc, #628]	; (800c65c <tcp_slowtmr+0x584>)
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ea:	6a1b      	ldr	r3, [r3, #32]
 800c3ec:	1ad3      	subs	r3, r2, r3
 800c3ee:	2b28      	cmp	r3, #40	; 0x28
 800c3f0:	d904      	bls.n	800c3fc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c3f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fe:	7a5b      	ldrb	r3, [r3, #9]
 800c400:	f003 0308 	and.w	r3, r3, #8
 800c404:	2b00      	cmp	r3, #0
 800c406:	d04c      	beq.n	800c4a2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c40c:	2b04      	cmp	r3, #4
 800c40e:	d003      	beq.n	800c418 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c412:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c414:	2b07      	cmp	r3, #7
 800c416:	d144      	bne.n	800c4a2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c418:	4b90      	ldr	r3, [pc, #576]	; (800c65c <tcp_slowtmr+0x584>)
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c41e:	6a1b      	ldr	r3, [r3, #32]
 800c420:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c428:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c42c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c430:	498b      	ldr	r1, [pc, #556]	; (800c660 <tcp_slowtmr+0x588>)
 800c432:	fba1 1303 	umull	r1, r3, r1, r3
 800c436:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c438:	429a      	cmp	r2, r3
 800c43a:	d90a      	bls.n	800c452 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c43c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c440:	3301      	adds	r3, #1
 800c442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c446:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c44a:	3301      	adds	r3, #1
 800c44c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c450:	e027      	b.n	800c4a2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c452:	4b82      	ldr	r3, [pc, #520]	; (800c65c <tcp_slowtmr+0x584>)
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c458:	6a1b      	ldr	r3, [r3, #32]
 800c45a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c464:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c468:	4618      	mov	r0, r3
 800c46a:	4b7e      	ldr	r3, [pc, #504]	; (800c664 <tcp_slowtmr+0x58c>)
 800c46c:	fb03 f300 	mul.w	r3, r3, r0
 800c470:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c472:	497b      	ldr	r1, [pc, #492]	; (800c660 <tcp_slowtmr+0x588>)
 800c474:	fba1 1303 	umull	r1, r3, r1, r3
 800c478:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d911      	bls.n	800c4a2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c47e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c480:	f005 f814 	bl	80114ac <tcp_keepalive>
 800c484:	4603      	mov	r3, r0
 800c486:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c48a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d107      	bne.n	800c4a2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c494:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c498:	3301      	adds	r3, #1
 800c49a:	b2da      	uxtb	r2, r3
 800c49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d011      	beq.n	800c4ce <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c4aa:	4b6c      	ldr	r3, [pc, #432]	; (800c65c <tcp_slowtmr+0x584>)
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	1ad2      	subs	r2, r2, r3
 800c4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	460b      	mov	r3, r1
 800c4be:	005b      	lsls	r3, r3, #1
 800c4c0:	440b      	add	r3, r1
 800c4c2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d302      	bcc.n	800c4ce <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c4c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4ca:	f000 fec3 	bl	800d254 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d0:	7d1b      	ldrb	r3, [r3, #20]
 800c4d2:	2b03      	cmp	r3, #3
 800c4d4:	d10b      	bne.n	800c4ee <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c4d6:	4b61      	ldr	r3, [pc, #388]	; (800c65c <tcp_slowtmr+0x584>)
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	1ad3      	subs	r3, r2, r3
 800c4e0:	2b28      	cmp	r3, #40	; 0x28
 800c4e2:	d904      	bls.n	800c4ee <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f0:	7d1b      	ldrb	r3, [r3, #20]
 800c4f2:	2b09      	cmp	r3, #9
 800c4f4:	d10b      	bne.n	800c50e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c4f6:	4b59      	ldr	r3, [pc, #356]	; (800c65c <tcp_slowtmr+0x584>)
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fc:	6a1b      	ldr	r3, [r3, #32]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	2bf0      	cmp	r3, #240	; 0xf0
 800c502:	d904      	bls.n	800c50e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c508:	3301      	adds	r3, #1
 800c50a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c50e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c512:	2b00      	cmp	r3, #0
 800c514:	d060      	beq.n	800c5d8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c51c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c51e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c520:	f000 fce4 	bl	800ceec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c526:	2b00      	cmp	r3, #0
 800c528:	d010      	beq.n	800c54c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c52a:	4b4f      	ldr	r3, [pc, #316]	; (800c668 <tcp_slowtmr+0x590>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c530:	429a      	cmp	r2, r3
 800c532:	d106      	bne.n	800c542 <tcp_slowtmr+0x46a>
 800c534:	4b4d      	ldr	r3, [pc, #308]	; (800c66c <tcp_slowtmr+0x594>)
 800c536:	f240 526d 	movw	r2, #1389	; 0x56d
 800c53a:	494d      	ldr	r1, [pc, #308]	; (800c670 <tcp_slowtmr+0x598>)
 800c53c:	484d      	ldr	r0, [pc, #308]	; (800c674 <tcp_slowtmr+0x59c>)
 800c53e:	f00a f9d3 	bl	80168e8 <iprintf>
        prev->next = pcb->next;
 800c542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c544:	68da      	ldr	r2, [r3, #12]
 800c546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c548:	60da      	str	r2, [r3, #12]
 800c54a:	e00f      	b.n	800c56c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c54c:	4b46      	ldr	r3, [pc, #280]	; (800c668 <tcp_slowtmr+0x590>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c552:	429a      	cmp	r2, r3
 800c554:	d006      	beq.n	800c564 <tcp_slowtmr+0x48c>
 800c556:	4b45      	ldr	r3, [pc, #276]	; (800c66c <tcp_slowtmr+0x594>)
 800c558:	f240 5271 	movw	r2, #1393	; 0x571
 800c55c:	4946      	ldr	r1, [pc, #280]	; (800c678 <tcp_slowtmr+0x5a0>)
 800c55e:	4845      	ldr	r0, [pc, #276]	; (800c674 <tcp_slowtmr+0x59c>)
 800c560:	f00a f9c2 	bl	80168e8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c566:	68db      	ldr	r3, [r3, #12]
 800c568:	4a3f      	ldr	r2, [pc, #252]	; (800c668 <tcp_slowtmr+0x590>)
 800c56a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c56c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c570:	2b00      	cmp	r3, #0
 800c572:	d013      	beq.n	800c59c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c576:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c57c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c580:	3304      	adds	r3, #4
 800c582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c584:	8ad2      	ldrh	r2, [r2, #22]
 800c586:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c588:	8b09      	ldrh	r1, [r1, #24]
 800c58a:	9102      	str	r1, [sp, #8]
 800c58c:	9201      	str	r2, [sp, #4]
 800c58e:	9300      	str	r3, [sp, #0]
 800c590:	462b      	mov	r3, r5
 800c592:	4622      	mov	r2, r4
 800c594:	4601      	mov	r1, r0
 800c596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c598:	f004 fed4 	bl	8011344 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a4:	7d1b      	ldrb	r3, [r3, #20]
 800c5a6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5aa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c5b2:	6838      	ldr	r0, [r7, #0]
 800c5b4:	f7ff f840 	bl	800b638 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c5b8:	4b30      	ldr	r3, [pc, #192]	; (800c67c <tcp_slowtmr+0x5a4>)
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d004      	beq.n	800c5ce <tcp_slowtmr+0x4f6>
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f06f 010c 	mvn.w	r1, #12
 800c5ca:	68b8      	ldr	r0, [r7, #8]
 800c5cc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c5ce:	4b2b      	ldr	r3, [pc, #172]	; (800c67c <tcp_slowtmr+0x5a4>)
 800c5d0:	781b      	ldrb	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d037      	beq.n	800c646 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c5d6:	e590      	b.n	800c0fa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5da:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e4:	7f1b      	ldrb	r3, [r3, #28]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	b2da      	uxtb	r2, r3
 800c5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f0:	7f1a      	ldrb	r2, [r3, #28]
 800c5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f4:	7f5b      	ldrb	r3, [r3, #29]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d325      	bcc.n	800c646 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c600:	4b1e      	ldr	r3, [pc, #120]	; (800c67c <tcp_slowtmr+0x5a4>)
 800c602:	2200      	movs	r2, #0
 800c604:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d00b      	beq.n	800c628 <tcp_slowtmr+0x550>
 800c610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c618:	6912      	ldr	r2, [r2, #16]
 800c61a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c61c:	4610      	mov	r0, r2
 800c61e:	4798      	blx	r3
 800c620:	4603      	mov	r3, r0
 800c622:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c626:	e002      	b.n	800c62e <tcp_slowtmr+0x556>
 800c628:	2300      	movs	r3, #0
 800c62a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c62e:	4b13      	ldr	r3, [pc, #76]	; (800c67c <tcp_slowtmr+0x5a4>)
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d000      	beq.n	800c638 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800c636:	e560      	b.n	800c0fa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c638:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d102      	bne.n	800c646 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c642:	f004 f8bb 	bl	80107bc <tcp_output>
  while (pcb != NULL) {
 800c646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f47f ad5c 	bne.w	800c106 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c64e:	2300      	movs	r3, #0
 800c650:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c652:	4b0b      	ldr	r3, [pc, #44]	; (800c680 <tcp_slowtmr+0x5a8>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c658:	e067      	b.n	800c72a <tcp_slowtmr+0x652>
 800c65a:	bf00      	nop
 800c65c:	20016e18 	.word	0x20016e18
 800c660:	10624dd3 	.word	0x10624dd3
 800c664:	000124f8 	.word	0x000124f8
 800c668:	20016e14 	.word	0x20016e14
 800c66c:	080189f4 	.word	0x080189f4
 800c670:	08018e2c 	.word	0x08018e2c
 800c674:	08018a38 	.word	0x08018a38
 800c678:	08018e58 	.word	0x08018e58
 800c67c:	20016e10 	.word	0x20016e10
 800c680:	20016e24 	.word	0x20016e24
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c686:	7d1b      	ldrb	r3, [r3, #20]
 800c688:	2b0a      	cmp	r3, #10
 800c68a:	d006      	beq.n	800c69a <tcp_slowtmr+0x5c2>
 800c68c:	4b2a      	ldr	r3, [pc, #168]	; (800c738 <tcp_slowtmr+0x660>)
 800c68e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c692:	492a      	ldr	r1, [pc, #168]	; (800c73c <tcp_slowtmr+0x664>)
 800c694:	482a      	ldr	r0, [pc, #168]	; (800c740 <tcp_slowtmr+0x668>)
 800c696:	f00a f927 	bl	80168e8 <iprintf>
    pcb_remove = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c6a0:	4b28      	ldr	r3, [pc, #160]	; (800c744 <tcp_slowtmr+0x66c>)
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a6:	6a1b      	ldr	r3, [r3, #32]
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	2bf0      	cmp	r3, #240	; 0xf0
 800c6ac:	d904      	bls.n	800c6b8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c6ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c6b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d02f      	beq.n	800c720 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c6c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6c2:	f000 fc13 	bl	800ceec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d010      	beq.n	800c6ee <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c6cc:	4b1e      	ldr	r3, [pc, #120]	; (800c748 <tcp_slowtmr+0x670>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6d2:	429a      	cmp	r2, r3
 800c6d4:	d106      	bne.n	800c6e4 <tcp_slowtmr+0x60c>
 800c6d6:	4b18      	ldr	r3, [pc, #96]	; (800c738 <tcp_slowtmr+0x660>)
 800c6d8:	f240 52af 	movw	r2, #1455	; 0x5af
 800c6dc:	491b      	ldr	r1, [pc, #108]	; (800c74c <tcp_slowtmr+0x674>)
 800c6de:	4818      	ldr	r0, [pc, #96]	; (800c740 <tcp_slowtmr+0x668>)
 800c6e0:	f00a f902 	bl	80168e8 <iprintf>
        prev->next = pcb->next;
 800c6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e6:	68da      	ldr	r2, [r3, #12]
 800c6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ea:	60da      	str	r2, [r3, #12]
 800c6ec:	e00f      	b.n	800c70e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c6ee:	4b16      	ldr	r3, [pc, #88]	; (800c748 <tcp_slowtmr+0x670>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d006      	beq.n	800c706 <tcp_slowtmr+0x62e>
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	; (800c738 <tcp_slowtmr+0x660>)
 800c6fa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c6fe:	4914      	ldr	r1, [pc, #80]	; (800c750 <tcp_slowtmr+0x678>)
 800c700:	480f      	ldr	r0, [pc, #60]	; (800c740 <tcp_slowtmr+0x668>)
 800c702:	f00a f8f1 	bl	80168e8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	4a0f      	ldr	r2, [pc, #60]	; (800c748 <tcp_slowtmr+0x670>)
 800c70c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c710:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c718:	69f8      	ldr	r0, [r7, #28]
 800c71a:	f7fe ff8d 	bl	800b638 <tcp_free>
 800c71e:	e004      	b.n	800c72a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c722:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1a9      	bne.n	800c684 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c730:	bf00      	nop
 800c732:	3730      	adds	r7, #48	; 0x30
 800c734:	46bd      	mov	sp, r7
 800c736:	bdb0      	pop	{r4, r5, r7, pc}
 800c738:	080189f4 	.word	0x080189f4
 800c73c:	08018e84 	.word	0x08018e84
 800c740:	08018a38 	.word	0x08018a38
 800c744:	20016e18 	.word	0x20016e18
 800c748:	20016e24 	.word	0x20016e24
 800c74c:	08018eb4 	.word	0x08018eb4
 800c750:	08018edc 	.word	0x08018edc

0800c754 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b082      	sub	sp, #8
 800c758:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c75a:	4b2d      	ldr	r3, [pc, #180]	; (800c810 <tcp_fasttmr+0xbc>)
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	3301      	adds	r3, #1
 800c760:	b2da      	uxtb	r2, r3
 800c762:	4b2b      	ldr	r3, [pc, #172]	; (800c810 <tcp_fasttmr+0xbc>)
 800c764:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c766:	4b2b      	ldr	r3, [pc, #172]	; (800c814 <tcp_fasttmr+0xc0>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c76c:	e048      	b.n	800c800 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	7f9a      	ldrb	r2, [r3, #30]
 800c772:	4b27      	ldr	r3, [pc, #156]	; (800c810 <tcp_fasttmr+0xbc>)
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	429a      	cmp	r2, r3
 800c778:	d03f      	beq.n	800c7fa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c77a:	4b25      	ldr	r3, [pc, #148]	; (800c810 <tcp_fasttmr+0xbc>)
 800c77c:	781a      	ldrb	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	8b5b      	ldrh	r3, [r3, #26]
 800c786:	f003 0301 	and.w	r3, r3, #1
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d010      	beq.n	800c7b0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	8b5b      	ldrh	r3, [r3, #26]
 800c792:	f043 0302 	orr.w	r3, r3, #2
 800c796:	b29a      	uxth	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f004 f80d 	bl	80107bc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	8b5b      	ldrh	r3, [r3, #26]
 800c7a6:	f023 0303 	bic.w	r3, r3, #3
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	8b5b      	ldrh	r3, [r3, #26]
 800c7b4:	f003 0308 	and.w	r3, r3, #8
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d009      	beq.n	800c7d0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	8b5b      	ldrh	r3, [r3, #26]
 800c7c0:	f023 0308 	bic.w	r3, r3, #8
 800c7c4:	b29a      	uxth	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f7ff f8c4 	bl	800b958 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	68db      	ldr	r3, [r3, #12]
 800c7d4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00a      	beq.n	800c7f4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c7de:	4b0e      	ldr	r3, [pc, #56]	; (800c818 <tcp_fasttmr+0xc4>)
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 f819 	bl	800c81c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c7ea:	4b0b      	ldr	r3, [pc, #44]	; (800c818 <tcp_fasttmr+0xc4>)
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d000      	beq.n	800c7f4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c7f2:	e7b8      	b.n	800c766 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	607b      	str	r3, [r7, #4]
 800c7f8:	e002      	b.n	800c800 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1b3      	bne.n	800c76e <tcp_fasttmr+0x1a>
    }
  }
}
 800c806:	bf00      	nop
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	20010256 	.word	0x20010256
 800c814:	20016e14 	.word	0x20016e14
 800c818:	20016e10 	.word	0x20016e10

0800c81c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c81c:	b590      	push	{r4, r7, lr}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d109      	bne.n	800c83e <tcp_process_refused_data+0x22>
 800c82a:	4b37      	ldr	r3, [pc, #220]	; (800c908 <tcp_process_refused_data+0xec>)
 800c82c:	f240 6209 	movw	r2, #1545	; 0x609
 800c830:	4936      	ldr	r1, [pc, #216]	; (800c90c <tcp_process_refused_data+0xf0>)
 800c832:	4837      	ldr	r0, [pc, #220]	; (800c910 <tcp_process_refused_data+0xf4>)
 800c834:	f00a f858 	bl	80168e8 <iprintf>
 800c838:	f06f 030f 	mvn.w	r3, #15
 800c83c:	e060      	b.n	800c900 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c842:	7b5b      	ldrb	r3, [r3, #13]
 800c844:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c84a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00b      	beq.n	800c874 <tcp_process_refused_data+0x58>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6918      	ldr	r0, [r3, #16]
 800c866:	2300      	movs	r3, #0
 800c868:	68ba      	ldr	r2, [r7, #8]
 800c86a:	6879      	ldr	r1, [r7, #4]
 800c86c:	47a0      	blx	r4
 800c86e:	4603      	mov	r3, r0
 800c870:	73fb      	strb	r3, [r7, #15]
 800c872:	e007      	b.n	800c884 <tcp_process_refused_data+0x68>
 800c874:	2300      	movs	r3, #0
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	6879      	ldr	r1, [r7, #4]
 800c87a:	2000      	movs	r0, #0
 800c87c:	f000 f8c0 	bl	800ca00 <tcp_recv_null>
 800c880:	4603      	mov	r3, r0
 800c882:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d12a      	bne.n	800c8e2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c88c:	7bbb      	ldrb	r3, [r7, #14]
 800c88e:	f003 0320 	and.w	r3, r3, #32
 800c892:	2b00      	cmp	r3, #0
 800c894:	d033      	beq.n	800c8fe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c89a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c89e:	d005      	beq.n	800c8ac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d00b      	beq.n	800c8ce <tcp_process_refused_data+0xb2>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6918      	ldr	r0, [r3, #16]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	6879      	ldr	r1, [r7, #4]
 800c8c6:	47a0      	blx	r4
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	73fb      	strb	r3, [r7, #15]
 800c8cc:	e001      	b.n	800c8d2 <tcp_process_refused_data+0xb6>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c8d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8d6:	f113 0f0d 	cmn.w	r3, #13
 800c8da:	d110      	bne.n	800c8fe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c8dc:	f06f 030c 	mvn.w	r3, #12
 800c8e0:	e00e      	b.n	800c900 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8e6:	f113 0f0d 	cmn.w	r3, #13
 800c8ea:	d102      	bne.n	800c8f2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c8ec:	f06f 030c 	mvn.w	r3, #12
 800c8f0:	e006      	b.n	800c900 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68ba      	ldr	r2, [r7, #8]
 800c8f6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c8f8:	f06f 0304 	mvn.w	r3, #4
 800c8fc:	e000      	b.n	800c900 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c8fe:	2300      	movs	r3, #0
}
 800c900:	4618      	mov	r0, r3
 800c902:	3714      	adds	r7, #20
 800c904:	46bd      	mov	sp, r7
 800c906:	bd90      	pop	{r4, r7, pc}
 800c908:	080189f4 	.word	0x080189f4
 800c90c:	08018f04 	.word	0x08018f04
 800c910:	08018a38 	.word	0x08018a38

0800c914 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c91c:	e007      	b.n	800c92e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 f809 	bl	800c93c <tcp_seg_free>
    seg = next;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1f4      	bne.n	800c91e <tcp_segs_free+0xa>
  }
}
 800c934:	bf00      	nop
 800c936:	3710      	adds	r7, #16
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b082      	sub	sp, #8
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d00c      	beq.n	800c964 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d004      	beq.n	800c95c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe fbb2 	bl	800b0c0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c95c:	6879      	ldr	r1, [r7, #4]
 800c95e:	2003      	movs	r0, #3
 800c960:	f7fd fd02 	bl	800a368 <memp_free>
  }
}
 800c964:	bf00      	nop
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}

0800c96c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	460b      	mov	r3, r1
 800c976:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d107      	bne.n	800c98e <tcp_setprio+0x22>
 800c97e:	4b07      	ldr	r3, [pc, #28]	; (800c99c <tcp_setprio+0x30>)
 800c980:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800c984:	4906      	ldr	r1, [pc, #24]	; (800c9a0 <tcp_setprio+0x34>)
 800c986:	4807      	ldr	r0, [pc, #28]	; (800c9a4 <tcp_setprio+0x38>)
 800c988:	f009 ffae 	bl	80168e8 <iprintf>
 800c98c:	e002      	b.n	800c994 <tcp_setprio+0x28>

  pcb->prio = prio;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	78fa      	ldrb	r2, [r7, #3]
 800c992:	755a      	strb	r2, [r3, #21]
}
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	080189f4 	.word	0x080189f4
 800c9a0:	08018f2c 	.word	0x08018f2c
 800c9a4:	08018a38 	.word	0x08018a38

0800c9a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d106      	bne.n	800c9c4 <tcp_seg_copy+0x1c>
 800c9b6:	4b0f      	ldr	r3, [pc, #60]	; (800c9f4 <tcp_seg_copy+0x4c>)
 800c9b8:	f240 6282 	movw	r2, #1666	; 0x682
 800c9bc:	490e      	ldr	r1, [pc, #56]	; (800c9f8 <tcp_seg_copy+0x50>)
 800c9be:	480f      	ldr	r0, [pc, #60]	; (800c9fc <tcp_seg_copy+0x54>)
 800c9c0:	f009 ff92 	bl	80168e8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c9c4:	2003      	movs	r0, #3
 800c9c6:	f7fd fc7d 	bl	800a2c4 <memp_malloc>
 800c9ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d101      	bne.n	800c9d6 <tcp_seg_copy+0x2e>
    return NULL;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	e00a      	b.n	800c9ec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c9d6:	2210      	movs	r2, #16
 800c9d8:	6879      	ldr	r1, [r7, #4]
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f009 ff57 	bl	801688e <memcpy>
  pbuf_ref(cseg->p);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fe fc11 	bl	800b20c <pbuf_ref>
  return cseg;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3710      	adds	r7, #16
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	080189f4 	.word	0x080189f4
 800c9f8:	08018f48 	.word	0x08018f48
 800c9fc:	08018a38 	.word	0x08018a38

0800ca00 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	607a      	str	r2, [r7, #4]
 800ca0c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d109      	bne.n	800ca28 <tcp_recv_null+0x28>
 800ca14:	4b12      	ldr	r3, [pc, #72]	; (800ca60 <tcp_recv_null+0x60>)
 800ca16:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ca1a:	4912      	ldr	r1, [pc, #72]	; (800ca64 <tcp_recv_null+0x64>)
 800ca1c:	4812      	ldr	r0, [pc, #72]	; (800ca68 <tcp_recv_null+0x68>)
 800ca1e:	f009 ff63 	bl	80168e8 <iprintf>
 800ca22:	f06f 030f 	mvn.w	r3, #15
 800ca26:	e016      	b.n	800ca56 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d009      	beq.n	800ca42 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	891b      	ldrh	r3, [r3, #8]
 800ca32:	4619      	mov	r1, r3
 800ca34:	68b8      	ldr	r0, [r7, #8]
 800ca36:	f7ff fab9 	bl	800bfac <tcp_recved>
    pbuf_free(p);
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7fe fb40 	bl	800b0c0 <pbuf_free>
 800ca40:	e008      	b.n	800ca54 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ca42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d104      	bne.n	800ca54 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ca4a:	68b8      	ldr	r0, [r7, #8]
 800ca4c:	f7fe ffea 	bl	800ba24 <tcp_close>
 800ca50:	4603      	mov	r3, r0
 800ca52:	e000      	b.n	800ca56 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	080189f4 	.word	0x080189f4
 800ca64:	08018f64 	.word	0x08018f64
 800ca68:	08018a38 	.word	0x08018a38

0800ca6c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b086      	sub	sp, #24
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	4603      	mov	r3, r0
 800ca74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ca76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	db01      	blt.n	800ca82 <tcp_kill_prio+0x16>
 800ca7e:	79fb      	ldrb	r3, [r7, #7]
 800ca80:	e000      	b.n	800ca84 <tcp_kill_prio+0x18>
 800ca82:	237f      	movs	r3, #127	; 0x7f
 800ca84:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ca86:	7afb      	ldrb	r3, [r7, #11]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d034      	beq.n	800caf6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ca8c:	7afb      	ldrb	r3, [r7, #11]
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ca92:	2300      	movs	r3, #0
 800ca94:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ca96:	2300      	movs	r3, #0
 800ca98:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca9a:	4b19      	ldr	r3, [pc, #100]	; (800cb00 <tcp_kill_prio+0x94>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	617b      	str	r3, [r7, #20]
 800caa0:	e01f      	b.n	800cae2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	7d5b      	ldrb	r3, [r3, #21]
 800caa6:	7afa      	ldrb	r2, [r7, #11]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d80c      	bhi.n	800cac6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cab0:	7afa      	ldrb	r2, [r7, #11]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d112      	bne.n	800cadc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cab6:	4b13      	ldr	r3, [pc, #76]	; (800cb04 <tcp_kill_prio+0x98>)
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	6a1b      	ldr	r3, [r3, #32]
 800cabe:	1ad3      	subs	r3, r2, r3
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	429a      	cmp	r2, r3
 800cac4:	d80a      	bhi.n	800cadc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cac6:	4b0f      	ldr	r3, [pc, #60]	; (800cb04 <tcp_kill_prio+0x98>)
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	6a1b      	ldr	r3, [r3, #32]
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	7d5b      	ldrb	r3, [r3, #21]
 800cada:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	68db      	ldr	r3, [r3, #12]
 800cae0:	617b      	str	r3, [r7, #20]
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d1dc      	bne.n	800caa2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d004      	beq.n	800caf8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800caee:	6938      	ldr	r0, [r7, #16]
 800caf0:	f7ff f882 	bl	800bbf8 <tcp_abort>
 800caf4:	e000      	b.n	800caf8 <tcp_kill_prio+0x8c>
    return;
 800caf6:	bf00      	nop
  }
}
 800caf8:	3718      	adds	r7, #24
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	20016e14 	.word	0x20016e14
 800cb04:	20016e18 	.word	0x20016e18

0800cb08 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	4603      	mov	r3, r0
 800cb10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cb12:	79fb      	ldrb	r3, [r7, #7]
 800cb14:	2b08      	cmp	r3, #8
 800cb16:	d009      	beq.n	800cb2c <tcp_kill_state+0x24>
 800cb18:	79fb      	ldrb	r3, [r7, #7]
 800cb1a:	2b09      	cmp	r3, #9
 800cb1c:	d006      	beq.n	800cb2c <tcp_kill_state+0x24>
 800cb1e:	4b1a      	ldr	r3, [pc, #104]	; (800cb88 <tcp_kill_state+0x80>)
 800cb20:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800cb24:	4919      	ldr	r1, [pc, #100]	; (800cb8c <tcp_kill_state+0x84>)
 800cb26:	481a      	ldr	r0, [pc, #104]	; (800cb90 <tcp_kill_state+0x88>)
 800cb28:	f009 fede 	bl	80168e8 <iprintf>

  inactivity = 0;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cb30:	2300      	movs	r3, #0
 800cb32:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb34:	4b17      	ldr	r3, [pc, #92]	; (800cb94 <tcp_kill_state+0x8c>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	617b      	str	r3, [r7, #20]
 800cb3a:	e017      	b.n	800cb6c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	7d1b      	ldrb	r3, [r3, #20]
 800cb40:	79fa      	ldrb	r2, [r7, #7]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d10f      	bne.n	800cb66 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cb46:	4b14      	ldr	r3, [pc, #80]	; (800cb98 <tcp_kill_state+0x90>)
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	6a1b      	ldr	r3, [r3, #32]
 800cb4e:	1ad3      	subs	r3, r2, r3
 800cb50:	68fa      	ldr	r2, [r7, #12]
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d807      	bhi.n	800cb66 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cb56:	4b10      	ldr	r3, [pc, #64]	; (800cb98 <tcp_kill_state+0x90>)
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	6a1b      	ldr	r3, [r3, #32]
 800cb5e:	1ad3      	subs	r3, r2, r3
 800cb60:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	617b      	str	r3, [r7, #20]
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1e4      	bne.n	800cb3c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d003      	beq.n	800cb80 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cb78:	2100      	movs	r1, #0
 800cb7a:	6938      	ldr	r0, [r7, #16]
 800cb7c:	f7fe ff7e 	bl	800ba7c <tcp_abandon>
  }
}
 800cb80:	bf00      	nop
 800cb82:	3718      	adds	r7, #24
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	080189f4 	.word	0x080189f4
 800cb8c:	08018f80 	.word	0x08018f80
 800cb90:	08018a38 	.word	0x08018a38
 800cb94:	20016e14 	.word	0x20016e14
 800cb98:	20016e18 	.word	0x20016e18

0800cb9c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cba2:	2300      	movs	r3, #0
 800cba4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cba6:	2300      	movs	r3, #0
 800cba8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbaa:	4b12      	ldr	r3, [pc, #72]	; (800cbf4 <tcp_kill_timewait+0x58>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	60fb      	str	r3, [r7, #12]
 800cbb0:	e012      	b.n	800cbd8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cbb2:	4b11      	ldr	r3, [pc, #68]	; (800cbf8 <tcp_kill_timewait+0x5c>)
 800cbb4:	681a      	ldr	r2, [r3, #0]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	6a1b      	ldr	r3, [r3, #32]
 800cbba:	1ad3      	subs	r3, r2, r3
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d807      	bhi.n	800cbd2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cbc2:	4b0d      	ldr	r3, [pc, #52]	; (800cbf8 <tcp_kill_timewait+0x5c>)
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6a1b      	ldr	r3, [r3, #32]
 800cbca:	1ad3      	subs	r3, r2, r3
 800cbcc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	60fb      	str	r3, [r7, #12]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d1e9      	bne.n	800cbb2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d002      	beq.n	800cbea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cbe4:	68b8      	ldr	r0, [r7, #8]
 800cbe6:	f7ff f807 	bl	800bbf8 <tcp_abort>
  }
}
 800cbea:	bf00      	nop
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	20016e24 	.word	0x20016e24
 800cbf8:	20016e18 	.word	0x20016e18

0800cbfc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cc02:	4b10      	ldr	r3, [pc, #64]	; (800cc44 <tcp_handle_closepend+0x48>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cc08:	e014      	b.n	800cc34 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	8b5b      	ldrh	r3, [r3, #26]
 800cc14:	f003 0308 	and.w	r3, r3, #8
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d009      	beq.n	800cc30 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	8b5b      	ldrh	r3, [r3, #26]
 800cc20:	f023 0308 	bic.w	r3, r3, #8
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7fe fe94 	bl	800b958 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1e7      	bne.n	800cc0a <tcp_handle_closepend+0xe>
  }
}
 800cc3a:	bf00      	nop
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	20016e14 	.word	0x20016e14

0800cc48 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b084      	sub	sp, #16
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	4603      	mov	r3, r0
 800cc50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cc52:	2001      	movs	r0, #1
 800cc54:	f7fd fb36 	bl	800a2c4 <memp_malloc>
 800cc58:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d126      	bne.n	800ccae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cc60:	f7ff ffcc 	bl	800cbfc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cc64:	f7ff ff9a 	bl	800cb9c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cc68:	2001      	movs	r0, #1
 800cc6a:	f7fd fb2b 	bl	800a2c4 <memp_malloc>
 800cc6e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d11b      	bne.n	800ccae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800cc76:	2009      	movs	r0, #9
 800cc78:	f7ff ff46 	bl	800cb08 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cc7c:	2001      	movs	r0, #1
 800cc7e:	f7fd fb21 	bl	800a2c4 <memp_malloc>
 800cc82:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d111      	bne.n	800ccae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800cc8a:	2008      	movs	r0, #8
 800cc8c:	f7ff ff3c 	bl	800cb08 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cc90:	2001      	movs	r0, #1
 800cc92:	f7fd fb17 	bl	800a2c4 <memp_malloc>
 800cc96:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d107      	bne.n	800ccae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800cc9e:	79fb      	ldrb	r3, [r7, #7]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7ff fee3 	bl	800ca6c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cca6:	2001      	movs	r0, #1
 800cca8:	f7fd fb0c 	bl	800a2c4 <memp_malloc>
 800ccac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d03f      	beq.n	800cd34 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ccb4:	229c      	movs	r2, #156	; 0x9c
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f009 fe0c 	bl	80168d6 <memset>
    pcb->prio = prio;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	79fa      	ldrb	r2, [r7, #7]
 800ccc2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ccca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ccd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	22ff      	movs	r2, #255	; 0xff
 800cce2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ccea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2206      	movs	r2, #6
 800ccf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2206      	movs	r2, #6
 800ccf8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd00:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2201      	movs	r2, #1
 800cd06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800cd0a:	4b0d      	ldr	r3, [pc, #52]	; (800cd40 <tcp_alloc+0xf8>)
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800cd12:	4b0c      	ldr	r3, [pc, #48]	; (800cd44 <tcp_alloc+0xfc>)
 800cd14:	781a      	ldrb	r2, [r3, #0]
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cd20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	4a08      	ldr	r2, [pc, #32]	; (800cd48 <tcp_alloc+0x100>)
 800cd28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	4a07      	ldr	r2, [pc, #28]	; (800cd4c <tcp_alloc+0x104>)
 800cd30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800cd34:	68fb      	ldr	r3, [r7, #12]
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	20016e18 	.word	0x20016e18
 800cd44:	20010256 	.word	0x20010256
 800cd48:	0800ca01 	.word	0x0800ca01
 800cd4c:	006ddd00 	.word	0x006ddd00

0800cd50 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	4603      	mov	r3, r0
 800cd58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800cd5a:	2040      	movs	r0, #64	; 0x40
 800cd5c:	f7ff ff74 	bl	800cc48 <tcp_alloc>
 800cd60:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800cd62:	68fb      	ldr	r3, [r7, #12]
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b083      	sub	sp, #12
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	611a      	str	r2, [r3, #16]
  }
}
 800cd82:	bf00      	nop
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr
	...

0800cd90 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d00e      	beq.n	800cdbe <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	7d1b      	ldrb	r3, [r3, #20]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d106      	bne.n	800cdb6 <tcp_recv+0x26>
 800cda8:	4b07      	ldr	r3, [pc, #28]	; (800cdc8 <tcp_recv+0x38>)
 800cdaa:	f240 72df 	movw	r2, #2015	; 0x7df
 800cdae:	4907      	ldr	r1, [pc, #28]	; (800cdcc <tcp_recv+0x3c>)
 800cdb0:	4807      	ldr	r0, [pc, #28]	; (800cdd0 <tcp_recv+0x40>)
 800cdb2:	f009 fd99 	bl	80168e8 <iprintf>
    pcb->recv = recv;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	683a      	ldr	r2, [r7, #0]
 800cdba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800cdbe:	bf00      	nop
 800cdc0:	3708      	adds	r7, #8
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	080189f4 	.word	0x080189f4
 800cdcc:	08018f90 	.word	0x08018f90
 800cdd0:	08018a38 	.word	0x08018a38

0800cdd4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00e      	beq.n	800ce02 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	7d1b      	ldrb	r3, [r3, #20]
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d106      	bne.n	800cdfa <tcp_sent+0x26>
 800cdec:	4b07      	ldr	r3, [pc, #28]	; (800ce0c <tcp_sent+0x38>)
 800cdee:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800cdf2:	4907      	ldr	r1, [pc, #28]	; (800ce10 <tcp_sent+0x3c>)
 800cdf4:	4807      	ldr	r0, [pc, #28]	; (800ce14 <tcp_sent+0x40>)
 800cdf6:	f009 fd77 	bl	80168e8 <iprintf>
    pcb->sent = sent;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	683a      	ldr	r2, [r7, #0]
 800cdfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ce02:	bf00      	nop
 800ce04:	3708      	adds	r7, #8
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	080189f4 	.word	0x080189f4
 800ce10:	08018fb8 	.word	0x08018fb8
 800ce14:	08018a38 	.word	0x08018a38

0800ce18 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00e      	beq.n	800ce46 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	7d1b      	ldrb	r3, [r3, #20]
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d106      	bne.n	800ce3e <tcp_err+0x26>
 800ce30:	4b07      	ldr	r3, [pc, #28]	; (800ce50 <tcp_err+0x38>)
 800ce32:	f640 020d 	movw	r2, #2061	; 0x80d
 800ce36:	4907      	ldr	r1, [pc, #28]	; (800ce54 <tcp_err+0x3c>)
 800ce38:	4807      	ldr	r0, [pc, #28]	; (800ce58 <tcp_err+0x40>)
 800ce3a:	f009 fd55 	bl	80168e8 <iprintf>
    pcb->errf = err;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	683a      	ldr	r2, [r7, #0]
 800ce42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800ce46:	bf00      	nop
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	080189f4 	.word	0x080189f4
 800ce54:	08018fe0 	.word	0x08018fe0
 800ce58:	08018a38 	.word	0x08018a38

0800ce5c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b085      	sub	sp, #20
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d008      	beq.n	800ce7e <tcp_accept+0x22>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	7d1b      	ldrb	r3, [r3, #20]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d104      	bne.n	800ce7e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	683a      	ldr	r2, [r7, #0]
 800ce7c:	619a      	str	r2, [r3, #24]
  }
}
 800ce7e:	bf00      	nop
 800ce80:	3714      	adds	r7, #20
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
	...

0800ce8c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	4613      	mov	r3, r2
 800ce98:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d107      	bne.n	800ceb0 <tcp_poll+0x24>
 800cea0:	4b0e      	ldr	r3, [pc, #56]	; (800cedc <tcp_poll+0x50>)
 800cea2:	f640 023d 	movw	r2, #2109	; 0x83d
 800cea6:	490e      	ldr	r1, [pc, #56]	; (800cee0 <tcp_poll+0x54>)
 800cea8:	480e      	ldr	r0, [pc, #56]	; (800cee4 <tcp_poll+0x58>)
 800ceaa:	f009 fd1d 	bl	80168e8 <iprintf>
 800ceae:	e011      	b.n	800ced4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	7d1b      	ldrb	r3, [r3, #20]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d106      	bne.n	800cec6 <tcp_poll+0x3a>
 800ceb8:	4b08      	ldr	r3, [pc, #32]	; (800cedc <tcp_poll+0x50>)
 800ceba:	f640 023e 	movw	r2, #2110	; 0x83e
 800cebe:	490a      	ldr	r1, [pc, #40]	; (800cee8 <tcp_poll+0x5c>)
 800cec0:	4808      	ldr	r0, [pc, #32]	; (800cee4 <tcp_poll+0x58>)
 800cec2:	f009 fd11 	bl	80168e8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	79fa      	ldrb	r2, [r7, #7]
 800ced2:	775a      	strb	r2, [r3, #29]
}
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	080189f4 	.word	0x080189f4
 800cee0:	08019008 	.word	0x08019008
 800cee4:	08018a38 	.word	0x08018a38
 800cee8:	08019020 	.word	0x08019020

0800ceec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d107      	bne.n	800cf0a <tcp_pcb_purge+0x1e>
 800cefa:	4b21      	ldr	r3, [pc, #132]	; (800cf80 <tcp_pcb_purge+0x94>)
 800cefc:	f640 0251 	movw	r2, #2129	; 0x851
 800cf00:	4920      	ldr	r1, [pc, #128]	; (800cf84 <tcp_pcb_purge+0x98>)
 800cf02:	4821      	ldr	r0, [pc, #132]	; (800cf88 <tcp_pcb_purge+0x9c>)
 800cf04:	f009 fcf0 	bl	80168e8 <iprintf>
 800cf08:	e037      	b.n	800cf7a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	7d1b      	ldrb	r3, [r3, #20]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d033      	beq.n	800cf7a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cf16:	2b0a      	cmp	r3, #10
 800cf18:	d02f      	beq.n	800cf7a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d02b      	beq.n	800cf7a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d007      	beq.n	800cf3a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fe f8c6 	bl	800b0c0 <pbuf_free>
      pcb->refused_data = NULL;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d002      	beq.n	800cf48 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 f986 	bl	800d254 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf4e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf54:	4618      	mov	r0, r3
 800cf56:	f7ff fcdd 	bl	800c914 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7ff fcd8 	bl	800c914 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	66da      	str	r2, [r3, #108]	; 0x6c
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2200      	movs	r2, #0
 800cf76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	080189f4 	.word	0x080189f4
 800cf84:	08019040 	.word	0x08019040
 800cf88:	08018a38 	.word	0x08018a38

0800cf8c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d106      	bne.n	800cfaa <tcp_pcb_remove+0x1e>
 800cf9c:	4b3e      	ldr	r3, [pc, #248]	; (800d098 <tcp_pcb_remove+0x10c>)
 800cf9e:	f640 0283 	movw	r2, #2179	; 0x883
 800cfa2:	493e      	ldr	r1, [pc, #248]	; (800d09c <tcp_pcb_remove+0x110>)
 800cfa4:	483e      	ldr	r0, [pc, #248]	; (800d0a0 <tcp_pcb_remove+0x114>)
 800cfa6:	f009 fc9f 	bl	80168e8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d106      	bne.n	800cfbe <tcp_pcb_remove+0x32>
 800cfb0:	4b39      	ldr	r3, [pc, #228]	; (800d098 <tcp_pcb_remove+0x10c>)
 800cfb2:	f640 0284 	movw	r2, #2180	; 0x884
 800cfb6:	493b      	ldr	r1, [pc, #236]	; (800d0a4 <tcp_pcb_remove+0x118>)
 800cfb8:	4839      	ldr	r0, [pc, #228]	; (800d0a0 <tcp_pcb_remove+0x114>)
 800cfba:	f009 fc95 	bl	80168e8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	683a      	ldr	r2, [r7, #0]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d105      	bne.n	800cfd4 <tcp_pcb_remove+0x48>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	68da      	ldr	r2, [r3, #12]
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	601a      	str	r2, [r3, #0]
 800cfd2:	e013      	b.n	800cffc <tcp_pcb_remove+0x70>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	60fb      	str	r3, [r7, #12]
 800cfda:	e00c      	b.n	800cff6 <tcp_pcb_remove+0x6a>
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	68db      	ldr	r3, [r3, #12]
 800cfe0:	683a      	ldr	r2, [r7, #0]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d104      	bne.n	800cff0 <tcp_pcb_remove+0x64>
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	68da      	ldr	r2, [r3, #12]
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	60da      	str	r2, [r3, #12]
 800cfee:	e005      	b.n	800cffc <tcp_pcb_remove+0x70>
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	60fb      	str	r3, [r7, #12]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d1ef      	bne.n	800cfdc <tcp_pcb_remove+0x50>
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	2200      	movs	r2, #0
 800d000:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d002:	6838      	ldr	r0, [r7, #0]
 800d004:	f7ff ff72 	bl	800ceec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	7d1b      	ldrb	r3, [r3, #20]
 800d00c:	2b0a      	cmp	r3, #10
 800d00e:	d013      	beq.n	800d038 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d014:	2b01      	cmp	r3, #1
 800d016:	d00f      	beq.n	800d038 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	8b5b      	ldrh	r3, [r3, #26]
 800d01c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d020:	2b00      	cmp	r3, #0
 800d022:	d009      	beq.n	800d038 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	8b5b      	ldrh	r3, [r3, #26]
 800d028:	f043 0302 	orr.w	r3, r3, #2
 800d02c:	b29a      	uxth	r2, r3
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d032:	6838      	ldr	r0, [r7, #0]
 800d034:	f003 fbc2 	bl	80107bc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	7d1b      	ldrb	r3, [r3, #20]
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d020      	beq.n	800d082 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d044:	2b00      	cmp	r3, #0
 800d046:	d006      	beq.n	800d056 <tcp_pcb_remove+0xca>
 800d048:	4b13      	ldr	r3, [pc, #76]	; (800d098 <tcp_pcb_remove+0x10c>)
 800d04a:	f640 0293 	movw	r2, #2195	; 0x893
 800d04e:	4916      	ldr	r1, [pc, #88]	; (800d0a8 <tcp_pcb_remove+0x11c>)
 800d050:	4813      	ldr	r0, [pc, #76]	; (800d0a0 <tcp_pcb_remove+0x114>)
 800d052:	f009 fc49 	bl	80168e8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d006      	beq.n	800d06c <tcp_pcb_remove+0xe0>
 800d05e:	4b0e      	ldr	r3, [pc, #56]	; (800d098 <tcp_pcb_remove+0x10c>)
 800d060:	f640 0294 	movw	r2, #2196	; 0x894
 800d064:	4911      	ldr	r1, [pc, #68]	; (800d0ac <tcp_pcb_remove+0x120>)
 800d066:	480e      	ldr	r0, [pc, #56]	; (800d0a0 <tcp_pcb_remove+0x114>)
 800d068:	f009 fc3e 	bl	80168e8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d070:	2b00      	cmp	r3, #0
 800d072:	d006      	beq.n	800d082 <tcp_pcb_remove+0xf6>
 800d074:	4b08      	ldr	r3, [pc, #32]	; (800d098 <tcp_pcb_remove+0x10c>)
 800d076:	f640 0296 	movw	r2, #2198	; 0x896
 800d07a:	490d      	ldr	r1, [pc, #52]	; (800d0b0 <tcp_pcb_remove+0x124>)
 800d07c:	4808      	ldr	r0, [pc, #32]	; (800d0a0 <tcp_pcb_remove+0x114>)
 800d07e:	f009 fc33 	bl	80168e8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	2200      	movs	r2, #0
 800d086:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	2200      	movs	r2, #0
 800d08c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d08e:	bf00      	nop
 800d090:	3710      	adds	r7, #16
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
 800d096:	bf00      	nop
 800d098:	080189f4 	.word	0x080189f4
 800d09c:	0801905c 	.word	0x0801905c
 800d0a0:	08018a38 	.word	0x08018a38
 800d0a4:	08019078 	.word	0x08019078
 800d0a8:	08019098 	.word	0x08019098
 800d0ac:	080190b0 	.word	0x080190b0
 800d0b0:	080190cc 	.word	0x080190cc

0800d0b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d106      	bne.n	800d0d0 <tcp_next_iss+0x1c>
 800d0c2:	4b0a      	ldr	r3, [pc, #40]	; (800d0ec <tcp_next_iss+0x38>)
 800d0c4:	f640 02af 	movw	r2, #2223	; 0x8af
 800d0c8:	4909      	ldr	r1, [pc, #36]	; (800d0f0 <tcp_next_iss+0x3c>)
 800d0ca:	480a      	ldr	r0, [pc, #40]	; (800d0f4 <tcp_next_iss+0x40>)
 800d0cc:	f009 fc0c 	bl	80168e8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d0d0:	4b09      	ldr	r3, [pc, #36]	; (800d0f8 <tcp_next_iss+0x44>)
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	4b09      	ldr	r3, [pc, #36]	; (800d0fc <tcp_next_iss+0x48>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4413      	add	r3, r2
 800d0da:	4a07      	ldr	r2, [pc, #28]	; (800d0f8 <tcp_next_iss+0x44>)
 800d0dc:	6013      	str	r3, [r2, #0]
  return iss;
 800d0de:	4b06      	ldr	r3, [pc, #24]	; (800d0f8 <tcp_next_iss+0x44>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3708      	adds	r7, #8
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	080189f4 	.word	0x080189f4
 800d0f0:	080190e4 	.word	0x080190e4
 800d0f4:	08018a38 	.word	0x08018a38
 800d0f8:	20000014 	.word	0x20000014
 800d0fc:	20016e18 	.word	0x20016e18

0800d100 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b086      	sub	sp, #24
 800d104:	af00      	add	r7, sp, #0
 800d106:	4603      	mov	r3, r0
 800d108:	60b9      	str	r1, [r7, #8]
 800d10a:	607a      	str	r2, [r7, #4]
 800d10c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d106      	bne.n	800d122 <tcp_eff_send_mss_netif+0x22>
 800d114:	4b14      	ldr	r3, [pc, #80]	; (800d168 <tcp_eff_send_mss_netif+0x68>)
 800d116:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d11a:	4914      	ldr	r1, [pc, #80]	; (800d16c <tcp_eff_send_mss_netif+0x6c>)
 800d11c:	4814      	ldr	r0, [pc, #80]	; (800d170 <tcp_eff_send_mss_netif+0x70>)
 800d11e:	f009 fbe3 	bl	80168e8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d101      	bne.n	800d12c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d128:	89fb      	ldrh	r3, [r7, #14]
 800d12a:	e019      	b.n	800d160 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d130:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d132:	8afb      	ldrh	r3, [r7, #22]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d012      	beq.n	800d15e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d138:	2328      	movs	r3, #40	; 0x28
 800d13a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d13c:	8afa      	ldrh	r2, [r7, #22]
 800d13e:	8abb      	ldrh	r3, [r7, #20]
 800d140:	429a      	cmp	r2, r3
 800d142:	d904      	bls.n	800d14e <tcp_eff_send_mss_netif+0x4e>
 800d144:	8afa      	ldrh	r2, [r7, #22]
 800d146:	8abb      	ldrh	r3, [r7, #20]
 800d148:	1ad3      	subs	r3, r2, r3
 800d14a:	b29b      	uxth	r3, r3
 800d14c:	e000      	b.n	800d150 <tcp_eff_send_mss_netif+0x50>
 800d14e:	2300      	movs	r3, #0
 800d150:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d152:	8a7a      	ldrh	r2, [r7, #18]
 800d154:	89fb      	ldrh	r3, [r7, #14]
 800d156:	4293      	cmp	r3, r2
 800d158:	bf28      	it	cs
 800d15a:	4613      	movcs	r3, r2
 800d15c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d15e:	89fb      	ldrh	r3, [r7, #14]
}
 800d160:	4618      	mov	r0, r3
 800d162:	3718      	adds	r7, #24
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	080189f4 	.word	0x080189f4
 800d16c:	08019100 	.word	0x08019100
 800d170:	08018a38 	.word	0x08018a38

0800d174 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d119      	bne.n	800d1bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d188:	4b10      	ldr	r3, [pc, #64]	; (800d1cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d18a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d18e:	4910      	ldr	r1, [pc, #64]	; (800d1d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d190:	4810      	ldr	r0, [pc, #64]	; (800d1d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d192:	f009 fba9 	bl	80168e8 <iprintf>

  while (pcb != NULL) {
 800d196:	e011      	b.n	800d1bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681a      	ldr	r2, [r3, #0]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d108      	bne.n	800d1b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d1aa:	68f8      	ldr	r0, [r7, #12]
 800d1ac:	f7fe fd24 	bl	800bbf8 <tcp_abort>
      pcb = next;
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	60fb      	str	r3, [r7, #12]
 800d1b4:	e002      	b.n	800d1bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1ea      	bne.n	800d198 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d1c2:	bf00      	nop
 800d1c4:	3710      	adds	r7, #16
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	080189f4 	.word	0x080189f4
 800d1d0:	08019128 	.word	0x08019128
 800d1d4:	08018a38 	.word	0x08018a38

0800d1d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d02a      	beq.n	800d23e <tcp_netif_ip_addr_changed+0x66>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d026      	beq.n	800d23e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d1f0:	4b15      	ldr	r3, [pc, #84]	; (800d248 <tcp_netif_ip_addr_changed+0x70>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f7ff ffbc 	bl	800d174 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d1fc:	4b13      	ldr	r3, [pc, #76]	; (800d24c <tcp_netif_ip_addr_changed+0x74>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4619      	mov	r1, r3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7ff ffb6 	bl	800d174 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d017      	beq.n	800d23e <tcp_netif_ip_addr_changed+0x66>
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d013      	beq.n	800d23e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d216:	4b0e      	ldr	r3, [pc, #56]	; (800d250 <tcp_netif_ip_addr_changed+0x78>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	60fb      	str	r3, [r7, #12]
 800d21c:	e00c      	b.n	800d238 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681a      	ldr	r2, [r3, #0]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	429a      	cmp	r2, r3
 800d228:	d103      	bne.n	800d232 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	68db      	ldr	r3, [r3, #12]
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d1ef      	bne.n	800d21e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d23e:	bf00      	nop
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	20016e14 	.word	0x20016e14
 800d24c:	20016e20 	.word	0x20016e20
 800d250:	20016e1c 	.word	0x20016e1c

0800d254 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d260:	2b00      	cmp	r3, #0
 800d262:	d007      	beq.n	800d274 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d268:	4618      	mov	r0, r3
 800d26a:	f7ff fb53 	bl	800c914 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d274:	bf00      	nop
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d27c:	b590      	push	{r4, r7, lr}
 800d27e:	b08d      	sub	sp, #52	; 0x34
 800d280:	af04      	add	r7, sp, #16
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d105      	bne.n	800d298 <tcp_input+0x1c>
 800d28c:	4b9b      	ldr	r3, [pc, #620]	; (800d4fc <tcp_input+0x280>)
 800d28e:	2283      	movs	r2, #131	; 0x83
 800d290:	499b      	ldr	r1, [pc, #620]	; (800d500 <tcp_input+0x284>)
 800d292:	489c      	ldr	r0, [pc, #624]	; (800d504 <tcp_input+0x288>)
 800d294:	f009 fb28 	bl	80168e8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	4a9a      	ldr	r2, [pc, #616]	; (800d508 <tcp_input+0x28c>)
 800d29e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	895b      	ldrh	r3, [r3, #10]
 800d2a4:	2b13      	cmp	r3, #19
 800d2a6:	f240 83c4 	bls.w	800da32 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d2aa:	4b98      	ldr	r3, [pc, #608]	; (800d50c <tcp_input+0x290>)
 800d2ac:	695a      	ldr	r2, [r3, #20]
 800d2ae:	4b97      	ldr	r3, [pc, #604]	; (800d50c <tcp_input+0x290>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	4610      	mov	r0, r2
 800d2b6:	f008 fa79 	bl	80157ac <ip4_addr_isbroadcast_u32>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f040 83ba 	bne.w	800da36 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d2c2:	4b92      	ldr	r3, [pc, #584]	; (800d50c <tcp_input+0x290>)
 800d2c4:	695b      	ldr	r3, [r3, #20]
 800d2c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d2ca:	2be0      	cmp	r3, #224	; 0xe0
 800d2cc:	f000 83b3 	beq.w	800da36 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d2d0:	4b8d      	ldr	r3, [pc, #564]	; (800d508 <tcp_input+0x28c>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	899b      	ldrh	r3, [r3, #12]
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f7fc fb07 	bl	80098ec <lwip_htons>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	0b1b      	lsrs	r3, r3, #12
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d2ea:	7cbb      	ldrb	r3, [r7, #18]
 800d2ec:	2b13      	cmp	r3, #19
 800d2ee:	f240 83a2 	bls.w	800da36 <tcp_input+0x7ba>
 800d2f2:	7cbb      	ldrb	r3, [r7, #18]
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	891b      	ldrh	r3, [r3, #8]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	f200 839b 	bhi.w	800da36 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d300:	7cbb      	ldrb	r3, [r7, #18]
 800d302:	b29b      	uxth	r3, r3
 800d304:	3b14      	subs	r3, #20
 800d306:	b29a      	uxth	r2, r3
 800d308:	4b81      	ldr	r3, [pc, #516]	; (800d510 <tcp_input+0x294>)
 800d30a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d30c:	4b81      	ldr	r3, [pc, #516]	; (800d514 <tcp_input+0x298>)
 800d30e:	2200      	movs	r2, #0
 800d310:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	895a      	ldrh	r2, [r3, #10]
 800d316:	7cbb      	ldrb	r3, [r7, #18]
 800d318:	b29b      	uxth	r3, r3
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d309      	bcc.n	800d332 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d31e:	4b7c      	ldr	r3, [pc, #496]	; (800d510 <tcp_input+0x294>)
 800d320:	881a      	ldrh	r2, [r3, #0]
 800d322:	4b7d      	ldr	r3, [pc, #500]	; (800d518 <tcp_input+0x29c>)
 800d324:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d326:	7cbb      	ldrb	r3, [r7, #18]
 800d328:	4619      	mov	r1, r3
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f7fd fe42 	bl	800afb4 <pbuf_remove_header>
 800d330:	e04e      	b.n	800d3d0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d105      	bne.n	800d346 <tcp_input+0xca>
 800d33a:	4b70      	ldr	r3, [pc, #448]	; (800d4fc <tcp_input+0x280>)
 800d33c:	22c2      	movs	r2, #194	; 0xc2
 800d33e:	4977      	ldr	r1, [pc, #476]	; (800d51c <tcp_input+0x2a0>)
 800d340:	4870      	ldr	r0, [pc, #448]	; (800d504 <tcp_input+0x288>)
 800d342:	f009 fad1 	bl	80168e8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d346:	2114      	movs	r1, #20
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f7fd fe33 	bl	800afb4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	895a      	ldrh	r2, [r3, #10]
 800d352:	4b71      	ldr	r3, [pc, #452]	; (800d518 <tcp_input+0x29c>)
 800d354:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d356:	4b6e      	ldr	r3, [pc, #440]	; (800d510 <tcp_input+0x294>)
 800d358:	881a      	ldrh	r2, [r3, #0]
 800d35a:	4b6f      	ldr	r3, [pc, #444]	; (800d518 <tcp_input+0x29c>)
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	1ad3      	subs	r3, r2, r3
 800d360:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d362:	4b6d      	ldr	r3, [pc, #436]	; (800d518 <tcp_input+0x29c>)
 800d364:	881b      	ldrh	r3, [r3, #0]
 800d366:	4619      	mov	r1, r3
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f7fd fe23 	bl	800afb4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	895b      	ldrh	r3, [r3, #10]
 800d374:	8a3a      	ldrh	r2, [r7, #16]
 800d376:	429a      	cmp	r2, r3
 800d378:	f200 835f 	bhi.w	800da3a <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	4a64      	ldr	r2, [pc, #400]	; (800d514 <tcp_input+0x298>)
 800d384:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	8a3a      	ldrh	r2, [r7, #16]
 800d38c:	4611      	mov	r1, r2
 800d38e:	4618      	mov	r0, r3
 800d390:	f7fd fe10 	bl	800afb4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	891a      	ldrh	r2, [r3, #8]
 800d398:	8a3b      	ldrh	r3, [r7, #16]
 800d39a:	1ad3      	subs	r3, r2, r3
 800d39c:	b29a      	uxth	r2, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	895b      	ldrh	r3, [r3, #10]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d005      	beq.n	800d3b6 <tcp_input+0x13a>
 800d3aa:	4b54      	ldr	r3, [pc, #336]	; (800d4fc <tcp_input+0x280>)
 800d3ac:	22df      	movs	r2, #223	; 0xdf
 800d3ae:	495c      	ldr	r1, [pc, #368]	; (800d520 <tcp_input+0x2a4>)
 800d3b0:	4854      	ldr	r0, [pc, #336]	; (800d504 <tcp_input+0x288>)
 800d3b2:	f009 fa99 	bl	80168e8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	891a      	ldrh	r2, [r3, #8]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	891b      	ldrh	r3, [r3, #8]
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d005      	beq.n	800d3d0 <tcp_input+0x154>
 800d3c4:	4b4d      	ldr	r3, [pc, #308]	; (800d4fc <tcp_input+0x280>)
 800d3c6:	22e0      	movs	r2, #224	; 0xe0
 800d3c8:	4956      	ldr	r1, [pc, #344]	; (800d524 <tcp_input+0x2a8>)
 800d3ca:	484e      	ldr	r0, [pc, #312]	; (800d504 <tcp_input+0x288>)
 800d3cc:	f009 fa8c 	bl	80168e8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d3d0:	4b4d      	ldr	r3, [pc, #308]	; (800d508 <tcp_input+0x28c>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	881b      	ldrh	r3, [r3, #0]
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	4b4b      	ldr	r3, [pc, #300]	; (800d508 <tcp_input+0x28c>)
 800d3da:	681c      	ldr	r4, [r3, #0]
 800d3dc:	4610      	mov	r0, r2
 800d3de:	f7fc fa85 	bl	80098ec <lwip_htons>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d3e6:	4b48      	ldr	r3, [pc, #288]	; (800d508 <tcp_input+0x28c>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	885b      	ldrh	r3, [r3, #2]
 800d3ec:	b29a      	uxth	r2, r3
 800d3ee:	4b46      	ldr	r3, [pc, #280]	; (800d508 <tcp_input+0x28c>)
 800d3f0:	681c      	ldr	r4, [r3, #0]
 800d3f2:	4610      	mov	r0, r2
 800d3f4:	f7fc fa7a 	bl	80098ec <lwip_htons>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d3fc:	4b42      	ldr	r3, [pc, #264]	; (800d508 <tcp_input+0x28c>)
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	685a      	ldr	r2, [r3, #4]
 800d402:	4b41      	ldr	r3, [pc, #260]	; (800d508 <tcp_input+0x28c>)
 800d404:	681c      	ldr	r4, [r3, #0]
 800d406:	4610      	mov	r0, r2
 800d408:	f7fc fa85 	bl	8009916 <lwip_htonl>
 800d40c:	4603      	mov	r3, r0
 800d40e:	6063      	str	r3, [r4, #4]
 800d410:	6863      	ldr	r3, [r4, #4]
 800d412:	4a45      	ldr	r2, [pc, #276]	; (800d528 <tcp_input+0x2ac>)
 800d414:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d416:	4b3c      	ldr	r3, [pc, #240]	; (800d508 <tcp_input+0x28c>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	689a      	ldr	r2, [r3, #8]
 800d41c:	4b3a      	ldr	r3, [pc, #232]	; (800d508 <tcp_input+0x28c>)
 800d41e:	681c      	ldr	r4, [r3, #0]
 800d420:	4610      	mov	r0, r2
 800d422:	f7fc fa78 	bl	8009916 <lwip_htonl>
 800d426:	4603      	mov	r3, r0
 800d428:	60a3      	str	r3, [r4, #8]
 800d42a:	68a3      	ldr	r3, [r4, #8]
 800d42c:	4a3f      	ldr	r2, [pc, #252]	; (800d52c <tcp_input+0x2b0>)
 800d42e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d430:	4b35      	ldr	r3, [pc, #212]	; (800d508 <tcp_input+0x28c>)
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	89db      	ldrh	r3, [r3, #14]
 800d436:	b29a      	uxth	r2, r3
 800d438:	4b33      	ldr	r3, [pc, #204]	; (800d508 <tcp_input+0x28c>)
 800d43a:	681c      	ldr	r4, [r3, #0]
 800d43c:	4610      	mov	r0, r2
 800d43e:	f7fc fa55 	bl	80098ec <lwip_htons>
 800d442:	4603      	mov	r3, r0
 800d444:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d446:	4b30      	ldr	r3, [pc, #192]	; (800d508 <tcp_input+0x28c>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	899b      	ldrh	r3, [r3, #12]
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	4618      	mov	r0, r3
 800d450:	f7fc fa4c 	bl	80098ec <lwip_htons>
 800d454:	4603      	mov	r3, r0
 800d456:	b2db      	uxtb	r3, r3
 800d458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d45c:	b2da      	uxtb	r2, r3
 800d45e:	4b34      	ldr	r3, [pc, #208]	; (800d530 <tcp_input+0x2b4>)
 800d460:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	891a      	ldrh	r2, [r3, #8]
 800d466:	4b33      	ldr	r3, [pc, #204]	; (800d534 <tcp_input+0x2b8>)
 800d468:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d46a:	4b31      	ldr	r3, [pc, #196]	; (800d530 <tcp_input+0x2b4>)
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	f003 0303 	and.w	r3, r3, #3
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00c      	beq.n	800d490 <tcp_input+0x214>
    tcplen++;
 800d476:	4b2f      	ldr	r3, [pc, #188]	; (800d534 <tcp_input+0x2b8>)
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	3301      	adds	r3, #1
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	4b2d      	ldr	r3, [pc, #180]	; (800d534 <tcp_input+0x2b8>)
 800d480:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	891a      	ldrh	r2, [r3, #8]
 800d486:	4b2b      	ldr	r3, [pc, #172]	; (800d534 <tcp_input+0x2b8>)
 800d488:	881b      	ldrh	r3, [r3, #0]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	f200 82d7 	bhi.w	800da3e <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d490:	2300      	movs	r3, #0
 800d492:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d494:	4b28      	ldr	r3, [pc, #160]	; (800d538 <tcp_input+0x2bc>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	61fb      	str	r3, [r7, #28]
 800d49a:	e09d      	b.n	800d5d8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	7d1b      	ldrb	r3, [r3, #20]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d105      	bne.n	800d4b0 <tcp_input+0x234>
 800d4a4:	4b15      	ldr	r3, [pc, #84]	; (800d4fc <tcp_input+0x280>)
 800d4a6:	22fb      	movs	r2, #251	; 0xfb
 800d4a8:	4924      	ldr	r1, [pc, #144]	; (800d53c <tcp_input+0x2c0>)
 800d4aa:	4816      	ldr	r0, [pc, #88]	; (800d504 <tcp_input+0x288>)
 800d4ac:	f009 fa1c 	bl	80168e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	7d1b      	ldrb	r3, [r3, #20]
 800d4b4:	2b0a      	cmp	r3, #10
 800d4b6:	d105      	bne.n	800d4c4 <tcp_input+0x248>
 800d4b8:	4b10      	ldr	r3, [pc, #64]	; (800d4fc <tcp_input+0x280>)
 800d4ba:	22fc      	movs	r2, #252	; 0xfc
 800d4bc:	4920      	ldr	r1, [pc, #128]	; (800d540 <tcp_input+0x2c4>)
 800d4be:	4811      	ldr	r0, [pc, #68]	; (800d504 <tcp_input+0x288>)
 800d4c0:	f009 fa12 	bl	80168e8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	7d1b      	ldrb	r3, [r3, #20]
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d105      	bne.n	800d4d8 <tcp_input+0x25c>
 800d4cc:	4b0b      	ldr	r3, [pc, #44]	; (800d4fc <tcp_input+0x280>)
 800d4ce:	22fd      	movs	r2, #253	; 0xfd
 800d4d0:	491c      	ldr	r1, [pc, #112]	; (800d544 <tcp_input+0x2c8>)
 800d4d2:	480c      	ldr	r0, [pc, #48]	; (800d504 <tcp_input+0x288>)
 800d4d4:	f009 fa08 	bl	80168e8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d4d8:	69fb      	ldr	r3, [r7, #28]
 800d4da:	7a1b      	ldrb	r3, [r3, #8]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d033      	beq.n	800d548 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	7a1a      	ldrb	r2, [r3, #8]
 800d4e4:	4b09      	ldr	r3, [pc, #36]	; (800d50c <tcp_input+0x290>)
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d029      	beq.n	800d548 <tcp_input+0x2cc>
      prev = pcb;
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	61bb      	str	r3, [r7, #24]
      continue;
 800d4f8:	e06b      	b.n	800d5d2 <tcp_input+0x356>
 800d4fa:	bf00      	nop
 800d4fc:	0801915c 	.word	0x0801915c
 800d500:	08019190 	.word	0x08019190
 800d504:	080191a8 	.word	0x080191a8
 800d508:	20010268 	.word	0x20010268
 800d50c:	200136e0 	.word	0x200136e0
 800d510:	2001026c 	.word	0x2001026c
 800d514:	20010270 	.word	0x20010270
 800d518:	2001026e 	.word	0x2001026e
 800d51c:	080191d0 	.word	0x080191d0
 800d520:	080191e0 	.word	0x080191e0
 800d524:	080191ec 	.word	0x080191ec
 800d528:	20010278 	.word	0x20010278
 800d52c:	2001027c 	.word	0x2001027c
 800d530:	20010284 	.word	0x20010284
 800d534:	20010282 	.word	0x20010282
 800d538:	20016e14 	.word	0x20016e14
 800d53c:	0801920c 	.word	0x0801920c
 800d540:	08019234 	.word	0x08019234
 800d544:	08019260 	.word	0x08019260
    }

    if (pcb->remote_port == tcphdr->src &&
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	8b1a      	ldrh	r2, [r3, #24]
 800d54c:	4b94      	ldr	r3, [pc, #592]	; (800d7a0 <tcp_input+0x524>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	b29b      	uxth	r3, r3
 800d554:	429a      	cmp	r2, r3
 800d556:	d13a      	bne.n	800d5ce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d558:	69fb      	ldr	r3, [r7, #28]
 800d55a:	8ada      	ldrh	r2, [r3, #22]
 800d55c:	4b90      	ldr	r3, [pc, #576]	; (800d7a0 <tcp_input+0x524>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	885b      	ldrh	r3, [r3, #2]
 800d562:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d564:	429a      	cmp	r2, r3
 800d566:	d132      	bne.n	800d5ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	4b8d      	ldr	r3, [pc, #564]	; (800d7a4 <tcp_input+0x528>)
 800d56e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d570:	429a      	cmp	r2, r3
 800d572:	d12c      	bne.n	800d5ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	4b8a      	ldr	r3, [pc, #552]	; (800d7a4 <tcp_input+0x528>)
 800d57a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d126      	bne.n	800d5ce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	69fa      	ldr	r2, [r7, #28]
 800d586:	429a      	cmp	r2, r3
 800d588:	d106      	bne.n	800d598 <tcp_input+0x31c>
 800d58a:	4b87      	ldr	r3, [pc, #540]	; (800d7a8 <tcp_input+0x52c>)
 800d58c:	f240 120d 	movw	r2, #269	; 0x10d
 800d590:	4986      	ldr	r1, [pc, #536]	; (800d7ac <tcp_input+0x530>)
 800d592:	4887      	ldr	r0, [pc, #540]	; (800d7b0 <tcp_input+0x534>)
 800d594:	f009 f9a8 	bl	80168e8 <iprintf>
      if (prev != NULL) {
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00a      	beq.n	800d5b4 <tcp_input+0x338>
        prev->next = pcb->next;
 800d59e:	69fb      	ldr	r3, [r7, #28]
 800d5a0:	68da      	ldr	r2, [r3, #12]
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d5a6:	4b83      	ldr	r3, [pc, #524]	; (800d7b4 <tcp_input+0x538>)
 800d5a8:	681a      	ldr	r2, [r3, #0]
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d5ae:	4a81      	ldr	r2, [pc, #516]	; (800d7b4 <tcp_input+0x538>)
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d5b4:	69fb      	ldr	r3, [r7, #28]
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	69fa      	ldr	r2, [r7, #28]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d111      	bne.n	800d5e2 <tcp_input+0x366>
 800d5be:	4b7a      	ldr	r3, [pc, #488]	; (800d7a8 <tcp_input+0x52c>)
 800d5c0:	f240 1215 	movw	r2, #277	; 0x115
 800d5c4:	497c      	ldr	r1, [pc, #496]	; (800d7b8 <tcp_input+0x53c>)
 800d5c6:	487a      	ldr	r0, [pc, #488]	; (800d7b0 <tcp_input+0x534>)
 800d5c8:	f009 f98e 	bl	80168e8 <iprintf>
      break;
 800d5cc:	e009      	b.n	800d5e2 <tcp_input+0x366>
    }
    prev = pcb;
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	68db      	ldr	r3, [r3, #12]
 800d5d6:	61fb      	str	r3, [r7, #28]
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f47f af5e 	bne.w	800d49c <tcp_input+0x220>
 800d5e0:	e000      	b.n	800d5e4 <tcp_input+0x368>
      break;
 800d5e2:	bf00      	nop
  }

  if (pcb == NULL) {
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	f040 8095 	bne.w	800d716 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5ec:	4b73      	ldr	r3, [pc, #460]	; (800d7bc <tcp_input+0x540>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	61fb      	str	r3, [r7, #28]
 800d5f2:	e03f      	b.n	800d674 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	7d1b      	ldrb	r3, [r3, #20]
 800d5f8:	2b0a      	cmp	r3, #10
 800d5fa:	d006      	beq.n	800d60a <tcp_input+0x38e>
 800d5fc:	4b6a      	ldr	r3, [pc, #424]	; (800d7a8 <tcp_input+0x52c>)
 800d5fe:	f240 121f 	movw	r2, #287	; 0x11f
 800d602:	496f      	ldr	r1, [pc, #444]	; (800d7c0 <tcp_input+0x544>)
 800d604:	486a      	ldr	r0, [pc, #424]	; (800d7b0 <tcp_input+0x534>)
 800d606:	f009 f96f 	bl	80168e8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d60a:	69fb      	ldr	r3, [r7, #28]
 800d60c:	7a1b      	ldrb	r3, [r3, #8]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d009      	beq.n	800d626 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	7a1a      	ldrb	r2, [r3, #8]
 800d616:	4b63      	ldr	r3, [pc, #396]	; (800d7a4 <tcp_input+0x528>)
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d61e:	3301      	adds	r3, #1
 800d620:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d622:	429a      	cmp	r2, r3
 800d624:	d122      	bne.n	800d66c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	8b1a      	ldrh	r2, [r3, #24]
 800d62a:	4b5d      	ldr	r3, [pc, #372]	; (800d7a0 <tcp_input+0x524>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	b29b      	uxth	r3, r3
 800d632:	429a      	cmp	r2, r3
 800d634:	d11b      	bne.n	800d66e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	8ada      	ldrh	r2, [r3, #22]
 800d63a:	4b59      	ldr	r3, [pc, #356]	; (800d7a0 <tcp_input+0x524>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	885b      	ldrh	r3, [r3, #2]
 800d640:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d642:	429a      	cmp	r2, r3
 800d644:	d113      	bne.n	800d66e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	685a      	ldr	r2, [r3, #4]
 800d64a:	4b56      	ldr	r3, [pc, #344]	; (800d7a4 <tcp_input+0x528>)
 800d64c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d64e:	429a      	cmp	r2, r3
 800d650:	d10d      	bne.n	800d66e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	4b53      	ldr	r3, [pc, #332]	; (800d7a4 <tcp_input+0x528>)
 800d658:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d107      	bne.n	800d66e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d65e:	69f8      	ldr	r0, [r7, #28]
 800d660:	f000 fb52 	bl	800dd08 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7fd fd2b 	bl	800b0c0 <pbuf_free>
        return;
 800d66a:	e1ee      	b.n	800da4a <tcp_input+0x7ce>
        continue;
 800d66c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d66e:	69fb      	ldr	r3, [r7, #28]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	61fb      	str	r3, [r7, #28]
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1bc      	bne.n	800d5f4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d67a:	2300      	movs	r3, #0
 800d67c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d67e:	4b51      	ldr	r3, [pc, #324]	; (800d7c4 <tcp_input+0x548>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	617b      	str	r3, [r7, #20]
 800d684:	e02a      	b.n	800d6dc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	7a1b      	ldrb	r3, [r3, #8]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00c      	beq.n	800d6a8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	7a1a      	ldrb	r2, [r3, #8]
 800d692:	4b44      	ldr	r3, [pc, #272]	; (800d7a4 <tcp_input+0x528>)
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d69a:	3301      	adds	r3, #1
 800d69c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d69e:	429a      	cmp	r2, r3
 800d6a0:	d002      	beq.n	800d6a8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	61bb      	str	r3, [r7, #24]
        continue;
 800d6a6:	e016      	b.n	800d6d6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	8ada      	ldrh	r2, [r3, #22]
 800d6ac:	4b3c      	ldr	r3, [pc, #240]	; (800d7a0 <tcp_input+0x524>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	885b      	ldrh	r3, [r3, #2]
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d10c      	bne.n	800d6d2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	681a      	ldr	r2, [r3, #0]
 800d6bc:	4b39      	ldr	r3, [pc, #228]	; (800d7a4 <tcp_input+0x528>)
 800d6be:	695b      	ldr	r3, [r3, #20]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d00f      	beq.n	800d6e4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00d      	beq.n	800d6e6 <tcp_input+0x46a>
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d009      	beq.n	800d6e6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	617b      	str	r3, [r7, #20]
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d1d1      	bne.n	800d686 <tcp_input+0x40a>
 800d6e2:	e000      	b.n	800d6e6 <tcp_input+0x46a>
            break;
 800d6e4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d014      	beq.n	800d716 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d6ec:	69bb      	ldr	r3, [r7, #24]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d00a      	beq.n	800d708 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	68da      	ldr	r2, [r3, #12]
 800d6f6:	69bb      	ldr	r3, [r7, #24]
 800d6f8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d6fa:	4b32      	ldr	r3, [pc, #200]	; (800d7c4 <tcp_input+0x548>)
 800d6fc:	681a      	ldr	r2, [r3, #0]
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d702:	4a30      	ldr	r2, [pc, #192]	; (800d7c4 <tcp_input+0x548>)
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d708:	6978      	ldr	r0, [r7, #20]
 800d70a:	f000 f9ff 	bl	800db0c <tcp_listen_input>
      }
      pbuf_free(p);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f7fd fcd6 	bl	800b0c0 <pbuf_free>
      return;
 800d714:	e199      	b.n	800da4a <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d716:	69fb      	ldr	r3, [r7, #28]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	f000 8160 	beq.w	800d9de <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d71e:	4b2a      	ldr	r3, [pc, #168]	; (800d7c8 <tcp_input+0x54c>)
 800d720:	2200      	movs	r2, #0
 800d722:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	891a      	ldrh	r2, [r3, #8]
 800d728:	4b27      	ldr	r3, [pc, #156]	; (800d7c8 <tcp_input+0x54c>)
 800d72a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d72c:	4a26      	ldr	r2, [pc, #152]	; (800d7c8 <tcp_input+0x54c>)
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d732:	4b1b      	ldr	r3, [pc, #108]	; (800d7a0 <tcp_input+0x524>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	4a24      	ldr	r2, [pc, #144]	; (800d7c8 <tcp_input+0x54c>)
 800d738:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d73a:	4b24      	ldr	r3, [pc, #144]	; (800d7cc <tcp_input+0x550>)
 800d73c:	2200      	movs	r2, #0
 800d73e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d740:	4b23      	ldr	r3, [pc, #140]	; (800d7d0 <tcp_input+0x554>)
 800d742:	2200      	movs	r2, #0
 800d744:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d746:	4b23      	ldr	r3, [pc, #140]	; (800d7d4 <tcp_input+0x558>)
 800d748:	2200      	movs	r2, #0
 800d74a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d74c:	4b22      	ldr	r3, [pc, #136]	; (800d7d8 <tcp_input+0x55c>)
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	f003 0308 	and.w	r3, r3, #8
 800d754:	2b00      	cmp	r3, #0
 800d756:	d006      	beq.n	800d766 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	7b5b      	ldrb	r3, [r3, #13]
 800d75c:	f043 0301 	orr.w	r3, r3, #1
 800d760:	b2da      	uxtb	r2, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d766:	69fb      	ldr	r3, [r7, #28]
 800d768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d038      	beq.n	800d7e0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d76e:	69f8      	ldr	r0, [r7, #28]
 800d770:	f7ff f854 	bl	800c81c <tcp_process_refused_data>
 800d774:	4603      	mov	r3, r0
 800d776:	f113 0f0d 	cmn.w	r3, #13
 800d77a:	d007      	beq.n	800d78c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d77c:	69fb      	ldr	r3, [r7, #28]
 800d77e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d780:	2b00      	cmp	r3, #0
 800d782:	d02d      	beq.n	800d7e0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d784:	4b15      	ldr	r3, [pc, #84]	; (800d7dc <tcp_input+0x560>)
 800d786:	881b      	ldrh	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d029      	beq.n	800d7e0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d78c:	69fb      	ldr	r3, [r7, #28]
 800d78e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d790:	2b00      	cmp	r3, #0
 800d792:	f040 8104 	bne.w	800d99e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d796:	69f8      	ldr	r0, [r7, #28]
 800d798:	f003 fe26 	bl	80113e8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d79c:	e0ff      	b.n	800d99e <tcp_input+0x722>
 800d79e:	bf00      	nop
 800d7a0:	20010268 	.word	0x20010268
 800d7a4:	200136e0 	.word	0x200136e0
 800d7a8:	0801915c 	.word	0x0801915c
 800d7ac:	08019288 	.word	0x08019288
 800d7b0:	080191a8 	.word	0x080191a8
 800d7b4:	20016e14 	.word	0x20016e14
 800d7b8:	080192b4 	.word	0x080192b4
 800d7bc:	20016e24 	.word	0x20016e24
 800d7c0:	080192e0 	.word	0x080192e0
 800d7c4:	20016e1c 	.word	0x20016e1c
 800d7c8:	20010258 	.word	0x20010258
 800d7cc:	20010288 	.word	0x20010288
 800d7d0:	20010285 	.word	0x20010285
 800d7d4:	20010280 	.word	0x20010280
 800d7d8:	20010284 	.word	0x20010284
 800d7dc:	20010282 	.word	0x20010282
      }
    }
    tcp_input_pcb = pcb;
 800d7e0:	4a9b      	ldr	r2, [pc, #620]	; (800da50 <tcp_input+0x7d4>)
 800d7e2:	69fb      	ldr	r3, [r7, #28]
 800d7e4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d7e6:	69f8      	ldr	r0, [r7, #28]
 800d7e8:	f000 fb0a 	bl	800de00 <tcp_process>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d7f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7f4:	f113 0f0d 	cmn.w	r3, #13
 800d7f8:	f000 80d3 	beq.w	800d9a2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d7fc:	4b95      	ldr	r3, [pc, #596]	; (800da54 <tcp_input+0x7d8>)
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	f003 0308 	and.w	r3, r3, #8
 800d804:	2b00      	cmp	r3, #0
 800d806:	d015      	beq.n	800d834 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d808:	69fb      	ldr	r3, [r7, #28]
 800d80a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d008      	beq.n	800d824 <tcp_input+0x5a8>
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d818:	69fa      	ldr	r2, [r7, #28]
 800d81a:	6912      	ldr	r2, [r2, #16]
 800d81c:	f06f 010d 	mvn.w	r1, #13
 800d820:	4610      	mov	r0, r2
 800d822:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d824:	69f9      	ldr	r1, [r7, #28]
 800d826:	488c      	ldr	r0, [pc, #560]	; (800da58 <tcp_input+0x7dc>)
 800d828:	f7ff fbb0 	bl	800cf8c <tcp_pcb_remove>
        tcp_free(pcb);
 800d82c:	69f8      	ldr	r0, [r7, #28]
 800d82e:	f7fd ff03 	bl	800b638 <tcp_free>
 800d832:	e0c1      	b.n	800d9b8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800d834:	2300      	movs	r3, #0
 800d836:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d838:	4b88      	ldr	r3, [pc, #544]	; (800da5c <tcp_input+0x7e0>)
 800d83a:	881b      	ldrh	r3, [r3, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d01d      	beq.n	800d87c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d840:	4b86      	ldr	r3, [pc, #536]	; (800da5c <tcp_input+0x7e0>)
 800d842:	881b      	ldrh	r3, [r3, #0]
 800d844:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00a      	beq.n	800d866 <tcp_input+0x5ea>
 800d850:	69fb      	ldr	r3, [r7, #28]
 800d852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d856:	69fa      	ldr	r2, [r7, #28]
 800d858:	6910      	ldr	r0, [r2, #16]
 800d85a:	89fa      	ldrh	r2, [r7, #14]
 800d85c:	69f9      	ldr	r1, [r7, #28]
 800d85e:	4798      	blx	r3
 800d860:	4603      	mov	r3, r0
 800d862:	74fb      	strb	r3, [r7, #19]
 800d864:	e001      	b.n	800d86a <tcp_input+0x5ee>
 800d866:	2300      	movs	r3, #0
 800d868:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d86a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d86e:	f113 0f0d 	cmn.w	r3, #13
 800d872:	f000 8098 	beq.w	800d9a6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d876:	4b79      	ldr	r3, [pc, #484]	; (800da5c <tcp_input+0x7e0>)
 800d878:	2200      	movs	r2, #0
 800d87a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d87c:	69f8      	ldr	r0, [r7, #28]
 800d87e:	f000 f905 	bl	800da8c <tcp_input_delayed_close>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	f040 8090 	bne.w	800d9aa <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d88a:	4b75      	ldr	r3, [pc, #468]	; (800da60 <tcp_input+0x7e4>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d041      	beq.n	800d916 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d896:	2b00      	cmp	r3, #0
 800d898:	d006      	beq.n	800d8a8 <tcp_input+0x62c>
 800d89a:	4b72      	ldr	r3, [pc, #456]	; (800da64 <tcp_input+0x7e8>)
 800d89c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d8a0:	4971      	ldr	r1, [pc, #452]	; (800da68 <tcp_input+0x7ec>)
 800d8a2:	4872      	ldr	r0, [pc, #456]	; (800da6c <tcp_input+0x7f0>)
 800d8a4:	f009 f820 	bl	80168e8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	8b5b      	ldrh	r3, [r3, #26]
 800d8ac:	f003 0310 	and.w	r3, r3, #16
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d008      	beq.n	800d8c6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d8b4:	4b6a      	ldr	r3, [pc, #424]	; (800da60 <tcp_input+0x7e4>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f7fd fc01 	bl	800b0c0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d8be:	69f8      	ldr	r0, [r7, #28]
 800d8c0:	f7fe f99a 	bl	800bbf8 <tcp_abort>
            goto aborted;
 800d8c4:	e078      	b.n	800d9b8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d8c6:	69fb      	ldr	r3, [r7, #28]
 800d8c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00c      	beq.n	800d8ea <tcp_input+0x66e>
 800d8d0:	69fb      	ldr	r3, [r7, #28]
 800d8d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	6918      	ldr	r0, [r3, #16]
 800d8da:	4b61      	ldr	r3, [pc, #388]	; (800da60 <tcp_input+0x7e4>)
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	2300      	movs	r3, #0
 800d8e0:	69f9      	ldr	r1, [r7, #28]
 800d8e2:	47a0      	blx	r4
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	74fb      	strb	r3, [r7, #19]
 800d8e8:	e008      	b.n	800d8fc <tcp_input+0x680>
 800d8ea:	4b5d      	ldr	r3, [pc, #372]	; (800da60 <tcp_input+0x7e4>)
 800d8ec:	681a      	ldr	r2, [r3, #0]
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	69f9      	ldr	r1, [r7, #28]
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	f7ff f884 	bl	800ca00 <tcp_recv_null>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d8fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d900:	f113 0f0d 	cmn.w	r3, #13
 800d904:	d053      	beq.n	800d9ae <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d906:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d003      	beq.n	800d916 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d90e:	4b54      	ldr	r3, [pc, #336]	; (800da60 <tcp_input+0x7e4>)
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d916:	4b4f      	ldr	r3, [pc, #316]	; (800da54 <tcp_input+0x7d8>)
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	f003 0320 	and.w	r3, r3, #32
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d030      	beq.n	800d984 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d926:	2b00      	cmp	r3, #0
 800d928:	d009      	beq.n	800d93e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d92e:	7b5a      	ldrb	r2, [r3, #13]
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d934:	f042 0220 	orr.w	r2, r2, #32
 800d938:	b2d2      	uxtb	r2, r2
 800d93a:	735a      	strb	r2, [r3, #13]
 800d93c:	e022      	b.n	800d984 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d942:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d946:	d005      	beq.n	800d954 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d94c:	3301      	adds	r3, #1
 800d94e:	b29a      	uxth	r2, r3
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d00b      	beq.n	800d976 <tcp_input+0x6fa>
 800d95e:	69fb      	ldr	r3, [r7, #28]
 800d960:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	6918      	ldr	r0, [r3, #16]
 800d968:	2300      	movs	r3, #0
 800d96a:	2200      	movs	r2, #0
 800d96c:	69f9      	ldr	r1, [r7, #28]
 800d96e:	47a0      	blx	r4
 800d970:	4603      	mov	r3, r0
 800d972:	74fb      	strb	r3, [r7, #19]
 800d974:	e001      	b.n	800d97a <tcp_input+0x6fe>
 800d976:	2300      	movs	r3, #0
 800d978:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d97a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d97e:	f113 0f0d 	cmn.w	r3, #13
 800d982:	d016      	beq.n	800d9b2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d984:	4b32      	ldr	r3, [pc, #200]	; (800da50 <tcp_input+0x7d4>)
 800d986:	2200      	movs	r2, #0
 800d988:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d98a:	69f8      	ldr	r0, [r7, #28]
 800d98c:	f000 f87e 	bl	800da8c <tcp_input_delayed_close>
 800d990:	4603      	mov	r3, r0
 800d992:	2b00      	cmp	r3, #0
 800d994:	d10f      	bne.n	800d9b6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d996:	69f8      	ldr	r0, [r7, #28]
 800d998:	f002 ff10 	bl	80107bc <tcp_output>
 800d99c:	e00c      	b.n	800d9b8 <tcp_input+0x73c>
        goto aborted;
 800d99e:	bf00      	nop
 800d9a0:	e00a      	b.n	800d9b8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d9a2:	bf00      	nop
 800d9a4:	e008      	b.n	800d9b8 <tcp_input+0x73c>
              goto aborted;
 800d9a6:	bf00      	nop
 800d9a8:	e006      	b.n	800d9b8 <tcp_input+0x73c>
          goto aborted;
 800d9aa:	bf00      	nop
 800d9ac:	e004      	b.n	800d9b8 <tcp_input+0x73c>
            goto aborted;
 800d9ae:	bf00      	nop
 800d9b0:	e002      	b.n	800d9b8 <tcp_input+0x73c>
              goto aborted;
 800d9b2:	bf00      	nop
 800d9b4:	e000      	b.n	800d9b8 <tcp_input+0x73c>
          goto aborted;
 800d9b6:	bf00      	nop
    tcp_input_pcb = NULL;
 800d9b8:	4b25      	ldr	r3, [pc, #148]	; (800da50 <tcp_input+0x7d4>)
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d9be:	4b28      	ldr	r3, [pc, #160]	; (800da60 <tcp_input+0x7e4>)
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d9c4:	4b2a      	ldr	r3, [pc, #168]	; (800da70 <tcp_input+0x7f4>)
 800d9c6:	685b      	ldr	r3, [r3, #4]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d03d      	beq.n	800da48 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800d9cc:	4b28      	ldr	r3, [pc, #160]	; (800da70 <tcp_input+0x7f4>)
 800d9ce:	685b      	ldr	r3, [r3, #4]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7fd fb75 	bl	800b0c0 <pbuf_free>
      inseg.p = NULL;
 800d9d6:	4b26      	ldr	r3, [pc, #152]	; (800da70 <tcp_input+0x7f4>)
 800d9d8:	2200      	movs	r2, #0
 800d9da:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d9dc:	e034      	b.n	800da48 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d9de:	4b25      	ldr	r3, [pc, #148]	; (800da74 <tcp_input+0x7f8>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	899b      	ldrh	r3, [r3, #12]
 800d9e4:	b29b      	uxth	r3, r3
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fb ff80 	bl	80098ec <lwip_htons>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	b2db      	uxtb	r3, r3
 800d9f0:	f003 0304 	and.w	r3, r3, #4
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d118      	bne.n	800da2a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d9f8:	4b1f      	ldr	r3, [pc, #124]	; (800da78 <tcp_input+0x7fc>)
 800d9fa:	6819      	ldr	r1, [r3, #0]
 800d9fc:	4b1f      	ldr	r3, [pc, #124]	; (800da7c <tcp_input+0x800>)
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	461a      	mov	r2, r3
 800da02:	4b1f      	ldr	r3, [pc, #124]	; (800da80 <tcp_input+0x804>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da08:	4b1a      	ldr	r3, [pc, #104]	; (800da74 <tcp_input+0x7f8>)
 800da0a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da0c:	885b      	ldrh	r3, [r3, #2]
 800da0e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da10:	4a18      	ldr	r2, [pc, #96]	; (800da74 <tcp_input+0x7f8>)
 800da12:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da14:	8812      	ldrh	r2, [r2, #0]
 800da16:	b292      	uxth	r2, r2
 800da18:	9202      	str	r2, [sp, #8]
 800da1a:	9301      	str	r3, [sp, #4]
 800da1c:	4b19      	ldr	r3, [pc, #100]	; (800da84 <tcp_input+0x808>)
 800da1e:	9300      	str	r3, [sp, #0]
 800da20:	4b19      	ldr	r3, [pc, #100]	; (800da88 <tcp_input+0x80c>)
 800da22:	4602      	mov	r2, r0
 800da24:	2000      	movs	r0, #0
 800da26:	f003 fc8d 	bl	8011344 <tcp_rst>
    pbuf_free(p);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7fd fb48 	bl	800b0c0 <pbuf_free>
  return;
 800da30:	e00a      	b.n	800da48 <tcp_input+0x7cc>
    goto dropped;
 800da32:	bf00      	nop
 800da34:	e004      	b.n	800da40 <tcp_input+0x7c4>
dropped:
 800da36:	bf00      	nop
 800da38:	e002      	b.n	800da40 <tcp_input+0x7c4>
      goto dropped;
 800da3a:	bf00      	nop
 800da3c:	e000      	b.n	800da40 <tcp_input+0x7c4>
      goto dropped;
 800da3e:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f7fd fb3d 	bl	800b0c0 <pbuf_free>
 800da46:	e000      	b.n	800da4a <tcp_input+0x7ce>
  return;
 800da48:	bf00      	nop
}
 800da4a:	3724      	adds	r7, #36	; 0x24
 800da4c:	46bd      	mov	sp, r7
 800da4e:	bd90      	pop	{r4, r7, pc}
 800da50:	20016e28 	.word	0x20016e28
 800da54:	20010285 	.word	0x20010285
 800da58:	20016e14 	.word	0x20016e14
 800da5c:	20010280 	.word	0x20010280
 800da60:	20010288 	.word	0x20010288
 800da64:	0801915c 	.word	0x0801915c
 800da68:	08019310 	.word	0x08019310
 800da6c:	080191a8 	.word	0x080191a8
 800da70:	20010258 	.word	0x20010258
 800da74:	20010268 	.word	0x20010268
 800da78:	2001027c 	.word	0x2001027c
 800da7c:	20010282 	.word	0x20010282
 800da80:	20010278 	.word	0x20010278
 800da84:	200136f0 	.word	0x200136f0
 800da88:	200136f4 	.word	0x200136f4

0800da8c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d106      	bne.n	800daa8 <tcp_input_delayed_close+0x1c>
 800da9a:	4b17      	ldr	r3, [pc, #92]	; (800daf8 <tcp_input_delayed_close+0x6c>)
 800da9c:	f240 225a 	movw	r2, #602	; 0x25a
 800daa0:	4916      	ldr	r1, [pc, #88]	; (800dafc <tcp_input_delayed_close+0x70>)
 800daa2:	4817      	ldr	r0, [pc, #92]	; (800db00 <tcp_input_delayed_close+0x74>)
 800daa4:	f008 ff20 	bl	80168e8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800daa8:	4b16      	ldr	r3, [pc, #88]	; (800db04 <tcp_input_delayed_close+0x78>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	f003 0310 	and.w	r3, r3, #16
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d01c      	beq.n	800daee <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	8b5b      	ldrh	r3, [r3, #26]
 800dab8:	f003 0310 	and.w	r3, r3, #16
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d10d      	bne.n	800dadc <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d008      	beq.n	800dadc <tcp_input_delayed_close+0x50>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	6912      	ldr	r2, [r2, #16]
 800dad4:	f06f 010e 	mvn.w	r1, #14
 800dad8:	4610      	mov	r0, r2
 800dada:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dadc:	6879      	ldr	r1, [r7, #4]
 800dade:	480a      	ldr	r0, [pc, #40]	; (800db08 <tcp_input_delayed_close+0x7c>)
 800dae0:	f7ff fa54 	bl	800cf8c <tcp_pcb_remove>
    tcp_free(pcb);
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f7fd fda7 	bl	800b638 <tcp_free>
    return 1;
 800daea:	2301      	movs	r3, #1
 800daec:	e000      	b.n	800daf0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800daee:	2300      	movs	r3, #0
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	0801915c 	.word	0x0801915c
 800dafc:	0801932c 	.word	0x0801932c
 800db00:	080191a8 	.word	0x080191a8
 800db04:	20010285 	.word	0x20010285
 800db08:	20016e14 	.word	0x20016e14

0800db0c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800db0c:	b590      	push	{r4, r7, lr}
 800db0e:	b08b      	sub	sp, #44	; 0x2c
 800db10:	af04      	add	r7, sp, #16
 800db12:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800db14:	4b6f      	ldr	r3, [pc, #444]	; (800dcd4 <tcp_listen_input+0x1c8>)
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	f003 0304 	and.w	r3, r3, #4
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f040 80d3 	bne.w	800dcc8 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d106      	bne.n	800db36 <tcp_listen_input+0x2a>
 800db28:	4b6b      	ldr	r3, [pc, #428]	; (800dcd8 <tcp_listen_input+0x1cc>)
 800db2a:	f240 2281 	movw	r2, #641	; 0x281
 800db2e:	496b      	ldr	r1, [pc, #428]	; (800dcdc <tcp_listen_input+0x1d0>)
 800db30:	486b      	ldr	r0, [pc, #428]	; (800dce0 <tcp_listen_input+0x1d4>)
 800db32:	f008 fed9 	bl	80168e8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800db36:	4b67      	ldr	r3, [pc, #412]	; (800dcd4 <tcp_listen_input+0x1c8>)
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	f003 0310 	and.w	r3, r3, #16
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d019      	beq.n	800db76 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db42:	4b68      	ldr	r3, [pc, #416]	; (800dce4 <tcp_listen_input+0x1d8>)
 800db44:	6819      	ldr	r1, [r3, #0]
 800db46:	4b68      	ldr	r3, [pc, #416]	; (800dce8 <tcp_listen_input+0x1dc>)
 800db48:	881b      	ldrh	r3, [r3, #0]
 800db4a:	461a      	mov	r2, r3
 800db4c:	4b67      	ldr	r3, [pc, #412]	; (800dcec <tcp_listen_input+0x1e0>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db52:	4b67      	ldr	r3, [pc, #412]	; (800dcf0 <tcp_listen_input+0x1e4>)
 800db54:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db56:	885b      	ldrh	r3, [r3, #2]
 800db58:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800db5a:	4a65      	ldr	r2, [pc, #404]	; (800dcf0 <tcp_listen_input+0x1e4>)
 800db5c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800db5e:	8812      	ldrh	r2, [r2, #0]
 800db60:	b292      	uxth	r2, r2
 800db62:	9202      	str	r2, [sp, #8]
 800db64:	9301      	str	r3, [sp, #4]
 800db66:	4b63      	ldr	r3, [pc, #396]	; (800dcf4 <tcp_listen_input+0x1e8>)
 800db68:	9300      	str	r3, [sp, #0]
 800db6a:	4b63      	ldr	r3, [pc, #396]	; (800dcf8 <tcp_listen_input+0x1ec>)
 800db6c:	4602      	mov	r2, r0
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f003 fbe8 	bl	8011344 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800db74:	e0aa      	b.n	800dccc <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800db76:	4b57      	ldr	r3, [pc, #348]	; (800dcd4 <tcp_listen_input+0x1c8>)
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	f003 0302 	and.w	r3, r3, #2
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f000 80a4 	beq.w	800dccc <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	7d5b      	ldrb	r3, [r3, #21]
 800db88:	4618      	mov	r0, r3
 800db8a:	f7ff f85d 	bl	800cc48 <tcp_alloc>
 800db8e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d111      	bne.n	800dbba <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	699b      	ldr	r3, [r3, #24]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00a      	beq.n	800dbb4 <tcp_listen_input+0xa8>
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	699b      	ldr	r3, [r3, #24]
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	6910      	ldr	r0, [r2, #16]
 800dba6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbaa:	2100      	movs	r1, #0
 800dbac:	4798      	blx	r3
 800dbae:	4603      	mov	r3, r0
 800dbb0:	73bb      	strb	r3, [r7, #14]
      return;
 800dbb2:	e08c      	b.n	800dcce <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dbb4:	23f0      	movs	r3, #240	; 0xf0
 800dbb6:	73bb      	strb	r3, [r7, #14]
      return;
 800dbb8:	e089      	b.n	800dcce <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800dbba:	4b50      	ldr	r3, [pc, #320]	; (800dcfc <tcp_listen_input+0x1f0>)
 800dbbc:	695a      	ldr	r2, [r3, #20]
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800dbc2:	4b4e      	ldr	r3, [pc, #312]	; (800dcfc <tcp_listen_input+0x1f0>)
 800dbc4:	691a      	ldr	r2, [r3, #16]
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	8ada      	ldrh	r2, [r3, #22]
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800dbd2:	4b47      	ldr	r3, [pc, #284]	; (800dcf0 <tcp_listen_input+0x1e4>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	881b      	ldrh	r3, [r3, #0]
 800dbd8:	b29a      	uxth	r2, r3
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	2203      	movs	r2, #3
 800dbe2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800dbe4:	4b41      	ldr	r3, [pc, #260]	; (800dcec <tcp_listen_input+0x1e0>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	1c5a      	adds	r2, r3, #1
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800dbf6:	6978      	ldr	r0, [r7, #20]
 800dbf8:	f7ff fa5c 	bl	800d0b4 <tcp_next_iss>
 800dbfc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	693a      	ldr	r2, [r7, #16]
 800dc02:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	693a      	ldr	r2, [r7, #16]
 800dc08:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	693a      	ldr	r2, [r7, #16]
 800dc0e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	693a      	ldr	r2, [r7, #16]
 800dc14:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800dc16:	4b35      	ldr	r3, [pc, #212]	; (800dcec <tcp_listen_input+0x1e0>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	1e5a      	subs	r2, r3, #1
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	691a      	ldr	r2, [r3, #16]
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	7a5b      	ldrb	r3, [r3, #9]
 800dc32:	f003 030c 	and.w	r3, r3, #12
 800dc36:	b2da      	uxtb	r2, r3
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	7a1a      	ldrb	r2, [r3, #8]
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800dc44:	4b2e      	ldr	r3, [pc, #184]	; (800dd00 <tcp_listen_input+0x1f4>)
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	60da      	str	r2, [r3, #12]
 800dc4c:	4a2c      	ldr	r2, [pc, #176]	; (800dd00 <tcp_listen_input+0x1f4>)
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	6013      	str	r3, [r2, #0]
 800dc52:	f003 fd39 	bl	80116c8 <tcp_timer_needed>
 800dc56:	4b2b      	ldr	r3, [pc, #172]	; (800dd04 <tcp_listen_input+0x1f8>)
 800dc58:	2201      	movs	r2, #1
 800dc5a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800dc5c:	6978      	ldr	r0, [r7, #20]
 800dc5e:	f001 fd8f 	bl	800f780 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800dc62:	4b23      	ldr	r3, [pc, #140]	; (800dcf0 <tcp_listen_input+0x1e4>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	89db      	ldrh	r3, [r3, #14]
 800dc68:	b29a      	uxth	r2, r3
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	3304      	adds	r3, #4
 800dc84:	4618      	mov	r0, r3
 800dc86:	f007 fadf 	bl	8015248 <ip4_route>
 800dc8a:	4601      	mov	r1, r0
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	3304      	adds	r3, #4
 800dc90:	461a      	mov	r2, r3
 800dc92:	4620      	mov	r0, r4
 800dc94:	f7ff fa34 	bl	800d100 <tcp_eff_send_mss_netif>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800dca0:	2112      	movs	r1, #18
 800dca2:	6978      	ldr	r0, [r7, #20]
 800dca4:	f002 fc9c 	bl	80105e0 <tcp_enqueue_flags>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800dcac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d004      	beq.n	800dcbe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	6978      	ldr	r0, [r7, #20]
 800dcb8:	f7fd fee0 	bl	800ba7c <tcp_abandon>
      return;
 800dcbc:	e007      	b.n	800dcce <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800dcbe:	6978      	ldr	r0, [r7, #20]
 800dcc0:	f002 fd7c 	bl	80107bc <tcp_output>
  return;
 800dcc4:	bf00      	nop
 800dcc6:	e001      	b.n	800dccc <tcp_listen_input+0x1c0>
    return;
 800dcc8:	bf00      	nop
 800dcca:	e000      	b.n	800dcce <tcp_listen_input+0x1c2>
  return;
 800dccc:	bf00      	nop
}
 800dcce:	371c      	adds	r7, #28
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd90      	pop	{r4, r7, pc}
 800dcd4:	20010284 	.word	0x20010284
 800dcd8:	0801915c 	.word	0x0801915c
 800dcdc:	08019354 	.word	0x08019354
 800dce0:	080191a8 	.word	0x080191a8
 800dce4:	2001027c 	.word	0x2001027c
 800dce8:	20010282 	.word	0x20010282
 800dcec:	20010278 	.word	0x20010278
 800dcf0:	20010268 	.word	0x20010268
 800dcf4:	200136f0 	.word	0x200136f0
 800dcf8:	200136f4 	.word	0x200136f4
 800dcfc:	200136e0 	.word	0x200136e0
 800dd00:	20016e14 	.word	0x20016e14
 800dd04:	20016e10 	.word	0x20016e10

0800dd08 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af04      	add	r7, sp, #16
 800dd0e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800dd10:	4b30      	ldr	r3, [pc, #192]	; (800ddd4 <tcp_timewait_input+0xcc>)
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	f003 0304 	and.w	r3, r3, #4
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d154      	bne.n	800ddc6 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d106      	bne.n	800dd30 <tcp_timewait_input+0x28>
 800dd22:	4b2d      	ldr	r3, [pc, #180]	; (800ddd8 <tcp_timewait_input+0xd0>)
 800dd24:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dd28:	492c      	ldr	r1, [pc, #176]	; (800dddc <tcp_timewait_input+0xd4>)
 800dd2a:	482d      	ldr	r0, [pc, #180]	; (800dde0 <tcp_timewait_input+0xd8>)
 800dd2c:	f008 fddc 	bl	80168e8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800dd30:	4b28      	ldr	r3, [pc, #160]	; (800ddd4 <tcp_timewait_input+0xcc>)
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	f003 0302 	and.w	r3, r3, #2
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d02a      	beq.n	800dd92 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dd3c:	4b29      	ldr	r3, [pc, #164]	; (800dde4 <tcp_timewait_input+0xdc>)
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	db2d      	blt.n	800dda6 <tcp_timewait_input+0x9e>
 800dd4a:	4b26      	ldr	r3, [pc, #152]	; (800dde4 <tcp_timewait_input+0xdc>)
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd52:	6879      	ldr	r1, [r7, #4]
 800dd54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd56:	440b      	add	r3, r1
 800dd58:	1ad3      	subs	r3, r2, r3
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	dc23      	bgt.n	800dda6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd5e:	4b22      	ldr	r3, [pc, #136]	; (800dde8 <tcp_timewait_input+0xe0>)
 800dd60:	6819      	ldr	r1, [r3, #0]
 800dd62:	4b22      	ldr	r3, [pc, #136]	; (800ddec <tcp_timewait_input+0xe4>)
 800dd64:	881b      	ldrh	r3, [r3, #0]
 800dd66:	461a      	mov	r2, r3
 800dd68:	4b1e      	ldr	r3, [pc, #120]	; (800dde4 <tcp_timewait_input+0xdc>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd6e:	4b20      	ldr	r3, [pc, #128]	; (800ddf0 <tcp_timewait_input+0xe8>)
 800dd70:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd72:	885b      	ldrh	r3, [r3, #2]
 800dd74:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dd76:	4a1e      	ldr	r2, [pc, #120]	; (800ddf0 <tcp_timewait_input+0xe8>)
 800dd78:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dd7a:	8812      	ldrh	r2, [r2, #0]
 800dd7c:	b292      	uxth	r2, r2
 800dd7e:	9202      	str	r2, [sp, #8]
 800dd80:	9301      	str	r3, [sp, #4]
 800dd82:	4b1c      	ldr	r3, [pc, #112]	; (800ddf4 <tcp_timewait_input+0xec>)
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	4b1c      	ldr	r3, [pc, #112]	; (800ddf8 <tcp_timewait_input+0xf0>)
 800dd88:	4602      	mov	r2, r0
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f003 fada 	bl	8011344 <tcp_rst>
      return;
 800dd90:	e01c      	b.n	800ddcc <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800dd92:	4b10      	ldr	r3, [pc, #64]	; (800ddd4 <tcp_timewait_input+0xcc>)
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	f003 0301 	and.w	r3, r3, #1
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d003      	beq.n	800dda6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800dd9e:	4b17      	ldr	r3, [pc, #92]	; (800ddfc <tcp_timewait_input+0xf4>)
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800dda6:	4b11      	ldr	r3, [pc, #68]	; (800ddec <tcp_timewait_input+0xe4>)
 800dda8:	881b      	ldrh	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00d      	beq.n	800ddca <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	8b5b      	ldrh	r3, [r3, #26]
 800ddb2:	f043 0302 	orr.w	r3, r3, #2
 800ddb6:	b29a      	uxth	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f002 fcfd 	bl	80107bc <tcp_output>
  }
  return;
 800ddc2:	bf00      	nop
 800ddc4:	e001      	b.n	800ddca <tcp_timewait_input+0xc2>
    return;
 800ddc6:	bf00      	nop
 800ddc8:	e000      	b.n	800ddcc <tcp_timewait_input+0xc4>
  return;
 800ddca:	bf00      	nop
}
 800ddcc:	3708      	adds	r7, #8
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	20010284 	.word	0x20010284
 800ddd8:	0801915c 	.word	0x0801915c
 800dddc:	08019374 	.word	0x08019374
 800dde0:	080191a8 	.word	0x080191a8
 800dde4:	20010278 	.word	0x20010278
 800dde8:	2001027c 	.word	0x2001027c
 800ddec:	20010282 	.word	0x20010282
 800ddf0:	20010268 	.word	0x20010268
 800ddf4:	200136f0 	.word	0x200136f0
 800ddf8:	200136f4 	.word	0x200136f4
 800ddfc:	20016e18 	.word	0x20016e18

0800de00 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800de00:	b590      	push	{r4, r7, lr}
 800de02:	b08d      	sub	sp, #52	; 0x34
 800de04:	af04      	add	r7, sp, #16
 800de06:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800de08:	2300      	movs	r3, #0
 800de0a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800de0c:	2300      	movs	r3, #0
 800de0e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d106      	bne.n	800de24 <tcp_process+0x24>
 800de16:	4ba5      	ldr	r3, [pc, #660]	; (800e0ac <tcp_process+0x2ac>)
 800de18:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800de1c:	49a4      	ldr	r1, [pc, #656]	; (800e0b0 <tcp_process+0x2b0>)
 800de1e:	48a5      	ldr	r0, [pc, #660]	; (800e0b4 <tcp_process+0x2b4>)
 800de20:	f008 fd62 	bl	80168e8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800de24:	4ba4      	ldr	r3, [pc, #656]	; (800e0b8 <tcp_process+0x2b8>)
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	f003 0304 	and.w	r3, r3, #4
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d04e      	beq.n	800dece <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	7d1b      	ldrb	r3, [r3, #20]
 800de34:	2b02      	cmp	r3, #2
 800de36:	d108      	bne.n	800de4a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de3c:	4b9f      	ldr	r3, [pc, #636]	; (800e0bc <tcp_process+0x2bc>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	429a      	cmp	r2, r3
 800de42:	d123      	bne.n	800de8c <tcp_process+0x8c>
        acceptable = 1;
 800de44:	2301      	movs	r3, #1
 800de46:	76fb      	strb	r3, [r7, #27]
 800de48:	e020      	b.n	800de8c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de4e:	4b9c      	ldr	r3, [pc, #624]	; (800e0c0 <tcp_process+0x2c0>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	429a      	cmp	r2, r3
 800de54:	d102      	bne.n	800de5c <tcp_process+0x5c>
        acceptable = 1;
 800de56:	2301      	movs	r3, #1
 800de58:	76fb      	strb	r3, [r7, #27]
 800de5a:	e017      	b.n	800de8c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800de5c:	4b98      	ldr	r3, [pc, #608]	; (800e0c0 <tcp_process+0x2c0>)
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	2b00      	cmp	r3, #0
 800de68:	db10      	blt.n	800de8c <tcp_process+0x8c>
 800de6a:	4b95      	ldr	r3, [pc, #596]	; (800e0c0 <tcp_process+0x2c0>)
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de72:	6879      	ldr	r1, [r7, #4]
 800de74:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800de76:	440b      	add	r3, r1
 800de78:	1ad3      	subs	r3, r2, r3
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	dc06      	bgt.n	800de8c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	8b5b      	ldrh	r3, [r3, #26]
 800de82:	f043 0302 	orr.w	r3, r3, #2
 800de86:	b29a      	uxth	r2, r3
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800de8c:	7efb      	ldrb	r3, [r7, #27]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d01b      	beq.n	800deca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	7d1b      	ldrb	r3, [r3, #20]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d106      	bne.n	800dea8 <tcp_process+0xa8>
 800de9a:	4b84      	ldr	r3, [pc, #528]	; (800e0ac <tcp_process+0x2ac>)
 800de9c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800dea0:	4988      	ldr	r1, [pc, #544]	; (800e0c4 <tcp_process+0x2c4>)
 800dea2:	4884      	ldr	r0, [pc, #528]	; (800e0b4 <tcp_process+0x2b4>)
 800dea4:	f008 fd20 	bl	80168e8 <iprintf>
      recv_flags |= TF_RESET;
 800dea8:	4b87      	ldr	r3, [pc, #540]	; (800e0c8 <tcp_process+0x2c8>)
 800deaa:	781b      	ldrb	r3, [r3, #0]
 800deac:	f043 0308 	orr.w	r3, r3, #8
 800deb0:	b2da      	uxtb	r2, r3
 800deb2:	4b85      	ldr	r3, [pc, #532]	; (800e0c8 <tcp_process+0x2c8>)
 800deb4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	8b5b      	ldrh	r3, [r3, #26]
 800deba:	f023 0301 	bic.w	r3, r3, #1
 800debe:	b29a      	uxth	r2, r3
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800dec4:	f06f 030d 	mvn.w	r3, #13
 800dec8:	e37a      	b.n	800e5c0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800deca:	2300      	movs	r3, #0
 800decc:	e378      	b.n	800e5c0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800dece:	4b7a      	ldr	r3, [pc, #488]	; (800e0b8 <tcp_process+0x2b8>)
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	f003 0302 	and.w	r3, r3, #2
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d010      	beq.n	800defc <tcp_process+0xfc>
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	7d1b      	ldrb	r3, [r3, #20]
 800dede:	2b02      	cmp	r3, #2
 800dee0:	d00c      	beq.n	800defc <tcp_process+0xfc>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	7d1b      	ldrb	r3, [r3, #20]
 800dee6:	2b03      	cmp	r3, #3
 800dee8:	d008      	beq.n	800defc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	8b5b      	ldrh	r3, [r3, #26]
 800deee:	f043 0302 	orr.w	r3, r3, #2
 800def2:	b29a      	uxth	r2, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	e361      	b.n	800e5c0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	8b5b      	ldrh	r3, [r3, #26]
 800df00:	f003 0310 	and.w	r3, r3, #16
 800df04:	2b00      	cmp	r3, #0
 800df06:	d103      	bne.n	800df10 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800df08:	4b70      	ldr	r3, [pc, #448]	; (800e0cc <tcp_process+0x2cc>)
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f001 fc2d 	bl	800f780 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	7d1b      	ldrb	r3, [r3, #20]
 800df2a:	3b02      	subs	r3, #2
 800df2c:	2b07      	cmp	r3, #7
 800df2e:	f200 8337 	bhi.w	800e5a0 <tcp_process+0x7a0>
 800df32:	a201      	add	r2, pc, #4	; (adr r2, 800df38 <tcp_process+0x138>)
 800df34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df38:	0800df59 	.word	0x0800df59
 800df3c:	0800e189 	.word	0x0800e189
 800df40:	0800e301 	.word	0x0800e301
 800df44:	0800e32b 	.word	0x0800e32b
 800df48:	0800e44f 	.word	0x0800e44f
 800df4c:	0800e301 	.word	0x0800e301
 800df50:	0800e4db 	.word	0x0800e4db
 800df54:	0800e56b 	.word	0x0800e56b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800df58:	4b57      	ldr	r3, [pc, #348]	; (800e0b8 <tcp_process+0x2b8>)
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	f003 0310 	and.w	r3, r3, #16
 800df60:	2b00      	cmp	r3, #0
 800df62:	f000 80e4 	beq.w	800e12e <tcp_process+0x32e>
 800df66:	4b54      	ldr	r3, [pc, #336]	; (800e0b8 <tcp_process+0x2b8>)
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	f003 0302 	and.w	r3, r3, #2
 800df6e:	2b00      	cmp	r3, #0
 800df70:	f000 80dd 	beq.w	800e12e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df78:	1c5a      	adds	r2, r3, #1
 800df7a:	4b50      	ldr	r3, [pc, #320]	; (800e0bc <tcp_process+0x2bc>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	429a      	cmp	r2, r3
 800df80:	f040 80d5 	bne.w	800e12e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800df84:	4b4e      	ldr	r3, [pc, #312]	; (800e0c0 <tcp_process+0x2c0>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	1c5a      	adds	r2, r3, #1
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800df96:	4b49      	ldr	r3, [pc, #292]	; (800e0bc <tcp_process+0x2bc>)
 800df98:	681a      	ldr	r2, [r3, #0]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800df9e:	4b4c      	ldr	r3, [pc, #304]	; (800e0d0 <tcp_process+0x2d0>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	89db      	ldrh	r3, [r3, #14]
 800dfa4:	b29a      	uxth	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800dfb8:	4b41      	ldr	r3, [pc, #260]	; (800e0c0 <tcp_process+0x2c0>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	1e5a      	subs	r2, r3, #1
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2204      	movs	r2, #4
 800dfc6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	3304      	adds	r3, #4
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f007 f939 	bl	8015248 <ip4_route>
 800dfd6:	4601      	mov	r1, r0
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	3304      	adds	r3, #4
 800dfdc:	461a      	mov	r2, r3
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f7ff f88e 	bl	800d100 <tcp_eff_send_mss_netif>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dff0:	009a      	lsls	r2, r3, #2
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dff6:	005b      	lsls	r3, r3, #1
 800dff8:	f241 111c 	movw	r1, #4380	; 0x111c
 800dffc:	428b      	cmp	r3, r1
 800dffe:	bf38      	it	cc
 800e000:	460b      	movcc	r3, r1
 800e002:	429a      	cmp	r2, r3
 800e004:	d204      	bcs.n	800e010 <tcp_process+0x210>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	e00d      	b.n	800e02c <tcp_process+0x22c>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e014:	005b      	lsls	r3, r3, #1
 800e016:	f241 121c 	movw	r2, #4380	; 0x111c
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d904      	bls.n	800e028 <tcp_process+0x228>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e022:	005b      	lsls	r3, r3, #1
 800e024:	b29b      	uxth	r3, r3
 800e026:	e001      	b.n	800e02c <tcp_process+0x22c>
 800e028:	f241 131c 	movw	r3, #4380	; 0x111c
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d106      	bne.n	800e04a <tcp_process+0x24a>
 800e03c:	4b1b      	ldr	r3, [pc, #108]	; (800e0ac <tcp_process+0x2ac>)
 800e03e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e042:	4924      	ldr	r1, [pc, #144]	; (800e0d4 <tcp_process+0x2d4>)
 800e044:	481b      	ldr	r0, [pc, #108]	; (800e0b4 <tcp_process+0x2b4>)
 800e046:	f008 fc4f 	bl	80168e8 <iprintf>
        --pcb->snd_queuelen;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e050:	3b01      	subs	r3, #1
 800e052:	b29a      	uxth	r2, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e05e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d111      	bne.n	800e08a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e06a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d106      	bne.n	800e080 <tcp_process+0x280>
 800e072:	4b0e      	ldr	r3, [pc, #56]	; (800e0ac <tcp_process+0x2ac>)
 800e074:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e078:	4917      	ldr	r1, [pc, #92]	; (800e0d8 <tcp_process+0x2d8>)
 800e07a:	480e      	ldr	r0, [pc, #56]	; (800e0b4 <tcp_process+0x2b4>)
 800e07c:	f008 fc34 	bl	80168e8 <iprintf>
          pcb->unsent = rseg->next;
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	66da      	str	r2, [r3, #108]	; 0x6c
 800e088:	e003      	b.n	800e092 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e092:	69f8      	ldr	r0, [r7, #28]
 800e094:	f7fe fc52 	bl	800c93c <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d11d      	bne.n	800e0dc <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0a6:	861a      	strh	r2, [r3, #48]	; 0x30
 800e0a8:	e01f      	b.n	800e0ea <tcp_process+0x2ea>
 800e0aa:	bf00      	nop
 800e0ac:	0801915c 	.word	0x0801915c
 800e0b0:	08019394 	.word	0x08019394
 800e0b4:	080191a8 	.word	0x080191a8
 800e0b8:	20010284 	.word	0x20010284
 800e0bc:	2001027c 	.word	0x2001027c
 800e0c0:	20010278 	.word	0x20010278
 800e0c4:	080193b0 	.word	0x080193b0
 800e0c8:	20010285 	.word	0x20010285
 800e0cc:	20016e18 	.word	0x20016e18
 800e0d0:	20010268 	.word	0x20010268
 800e0d4:	080193d0 	.word	0x080193d0
 800e0d8:	080193e8 	.word	0x080193e8
        } else {
          pcb->rtime = 0;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2200      	movs	r2, #0
 800e0e0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d00a      	beq.n	800e10a <tcp_process+0x30a>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0fa:	687a      	ldr	r2, [r7, #4]
 800e0fc:	6910      	ldr	r0, [r2, #16]
 800e0fe:	2200      	movs	r2, #0
 800e100:	6879      	ldr	r1, [r7, #4]
 800e102:	4798      	blx	r3
 800e104:	4603      	mov	r3, r0
 800e106:	76bb      	strb	r3, [r7, #26]
 800e108:	e001      	b.n	800e10e <tcp_process+0x30e>
 800e10a:	2300      	movs	r3, #0
 800e10c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e10e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e112:	f113 0f0d 	cmn.w	r3, #13
 800e116:	d102      	bne.n	800e11e <tcp_process+0x31e>
          return ERR_ABRT;
 800e118:	f06f 030c 	mvn.w	r3, #12
 800e11c:	e250      	b.n	800e5c0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	8b5b      	ldrh	r3, [r3, #26]
 800e122:	f043 0302 	orr.w	r3, r3, #2
 800e126:	b29a      	uxth	r2, r3
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e12c:	e23a      	b.n	800e5a4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e12e:	4b9d      	ldr	r3, [pc, #628]	; (800e3a4 <tcp_process+0x5a4>)
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	f003 0310 	and.w	r3, r3, #16
 800e136:	2b00      	cmp	r3, #0
 800e138:	f000 8234 	beq.w	800e5a4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e13c:	4b9a      	ldr	r3, [pc, #616]	; (800e3a8 <tcp_process+0x5a8>)
 800e13e:	6819      	ldr	r1, [r3, #0]
 800e140:	4b9a      	ldr	r3, [pc, #616]	; (800e3ac <tcp_process+0x5ac>)
 800e142:	881b      	ldrh	r3, [r3, #0]
 800e144:	461a      	mov	r2, r3
 800e146:	4b9a      	ldr	r3, [pc, #616]	; (800e3b0 <tcp_process+0x5b0>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e14c:	4b99      	ldr	r3, [pc, #612]	; (800e3b4 <tcp_process+0x5b4>)
 800e14e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e150:	885b      	ldrh	r3, [r3, #2]
 800e152:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e154:	4a97      	ldr	r2, [pc, #604]	; (800e3b4 <tcp_process+0x5b4>)
 800e156:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e158:	8812      	ldrh	r2, [r2, #0]
 800e15a:	b292      	uxth	r2, r2
 800e15c:	9202      	str	r2, [sp, #8]
 800e15e:	9301      	str	r3, [sp, #4]
 800e160:	4b95      	ldr	r3, [pc, #596]	; (800e3b8 <tcp_process+0x5b8>)
 800e162:	9300      	str	r3, [sp, #0]
 800e164:	4b95      	ldr	r3, [pc, #596]	; (800e3bc <tcp_process+0x5bc>)
 800e166:	4602      	mov	r2, r0
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f003 f8eb 	bl	8011344 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e174:	2b05      	cmp	r3, #5
 800e176:	f200 8215 	bhi.w	800e5a4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2200      	movs	r2, #0
 800e17e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f002 feab 	bl	8010edc <tcp_rexmit_rto>
      break;
 800e186:	e20d      	b.n	800e5a4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e188:	4b86      	ldr	r3, [pc, #536]	; (800e3a4 <tcp_process+0x5a4>)
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	f003 0310 	and.w	r3, r3, #16
 800e190:	2b00      	cmp	r3, #0
 800e192:	f000 80a1 	beq.w	800e2d8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e196:	4b84      	ldr	r3, [pc, #528]	; (800e3a8 <tcp_process+0x5a8>)
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e19e:	1ad3      	subs	r3, r2, r3
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	db7e      	blt.n	800e2a4 <tcp_process+0x4a4>
 800e1a6:	4b80      	ldr	r3, [pc, #512]	; (800e3a8 <tcp_process+0x5a8>)
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1ae:	1ad3      	subs	r3, r2, r3
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	dc77      	bgt.n	800e2a4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2204      	movs	r2, #4
 800e1b8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d102      	bne.n	800e1c8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e1c2:	23fa      	movs	r3, #250	; 0xfa
 800e1c4:	76bb      	strb	r3, [r7, #26]
 800e1c6:	e01d      	b.n	800e204 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1cc:	699b      	ldr	r3, [r3, #24]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d106      	bne.n	800e1e0 <tcp_process+0x3e0>
 800e1d2:	4b7b      	ldr	r3, [pc, #492]	; (800e3c0 <tcp_process+0x5c0>)
 800e1d4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e1d8:	497a      	ldr	r1, [pc, #488]	; (800e3c4 <tcp_process+0x5c4>)
 800e1da:	487b      	ldr	r0, [pc, #492]	; (800e3c8 <tcp_process+0x5c8>)
 800e1dc:	f008 fb84 	bl	80168e8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1e4:	699b      	ldr	r3, [r3, #24]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d00a      	beq.n	800e200 <tcp_process+0x400>
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1ee:	699b      	ldr	r3, [r3, #24]
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	6910      	ldr	r0, [r2, #16]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	6879      	ldr	r1, [r7, #4]
 800e1f8:	4798      	blx	r3
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	76bb      	strb	r3, [r7, #26]
 800e1fe:	e001      	b.n	800e204 <tcp_process+0x404>
 800e200:	23f0      	movs	r3, #240	; 0xf0
 800e202:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e204:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d00a      	beq.n	800e222 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e20c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e210:	f113 0f0d 	cmn.w	r3, #13
 800e214:	d002      	beq.n	800e21c <tcp_process+0x41c>
              tcp_abort(pcb);
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f7fd fcee 	bl	800bbf8 <tcp_abort>
            }
            return ERR_ABRT;
 800e21c:	f06f 030c 	mvn.w	r3, #12
 800e220:	e1ce      	b.n	800e5c0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 fae0 	bl	800e7e8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e228:	4b68      	ldr	r3, [pc, #416]	; (800e3cc <tcp_process+0x5cc>)
 800e22a:	881b      	ldrh	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d005      	beq.n	800e23c <tcp_process+0x43c>
            recv_acked--;
 800e230:	4b66      	ldr	r3, [pc, #408]	; (800e3cc <tcp_process+0x5cc>)
 800e232:	881b      	ldrh	r3, [r3, #0]
 800e234:	3b01      	subs	r3, #1
 800e236:	b29a      	uxth	r2, r3
 800e238:	4b64      	ldr	r3, [pc, #400]	; (800e3cc <tcp_process+0x5cc>)
 800e23a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e240:	009a      	lsls	r2, r3, #2
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e246:	005b      	lsls	r3, r3, #1
 800e248:	f241 111c 	movw	r1, #4380	; 0x111c
 800e24c:	428b      	cmp	r3, r1
 800e24e:	bf38      	it	cc
 800e250:	460b      	movcc	r3, r1
 800e252:	429a      	cmp	r2, r3
 800e254:	d204      	bcs.n	800e260 <tcp_process+0x460>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	e00d      	b.n	800e27c <tcp_process+0x47c>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e264:	005b      	lsls	r3, r3, #1
 800e266:	f241 121c 	movw	r2, #4380	; 0x111c
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d904      	bls.n	800e278 <tcp_process+0x478>
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e272:	005b      	lsls	r3, r3, #1
 800e274:	b29b      	uxth	r3, r3
 800e276:	e001      	b.n	800e27c <tcp_process+0x47c>
 800e278:	f241 131c 	movw	r3, #4380	; 0x111c
 800e27c:	687a      	ldr	r2, [r7, #4]
 800e27e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e282:	4b53      	ldr	r3, [pc, #332]	; (800e3d0 <tcp_process+0x5d0>)
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	f003 0320 	and.w	r3, r3, #32
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d037      	beq.n	800e2fe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	8b5b      	ldrh	r3, [r3, #26]
 800e292:	f043 0302 	orr.w	r3, r3, #2
 800e296:	b29a      	uxth	r2, r3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2207      	movs	r2, #7
 800e2a0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e2a2:	e02c      	b.n	800e2fe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2a4:	4b40      	ldr	r3, [pc, #256]	; (800e3a8 <tcp_process+0x5a8>)
 800e2a6:	6819      	ldr	r1, [r3, #0]
 800e2a8:	4b40      	ldr	r3, [pc, #256]	; (800e3ac <tcp_process+0x5ac>)
 800e2aa:	881b      	ldrh	r3, [r3, #0]
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	4b40      	ldr	r3, [pc, #256]	; (800e3b0 <tcp_process+0x5b0>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2b4:	4b3f      	ldr	r3, [pc, #252]	; (800e3b4 <tcp_process+0x5b4>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2b8:	885b      	ldrh	r3, [r3, #2]
 800e2ba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2bc:	4a3d      	ldr	r2, [pc, #244]	; (800e3b4 <tcp_process+0x5b4>)
 800e2be:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2c0:	8812      	ldrh	r2, [r2, #0]
 800e2c2:	b292      	uxth	r2, r2
 800e2c4:	9202      	str	r2, [sp, #8]
 800e2c6:	9301      	str	r3, [sp, #4]
 800e2c8:	4b3b      	ldr	r3, [pc, #236]	; (800e3b8 <tcp_process+0x5b8>)
 800e2ca:	9300      	str	r3, [sp, #0]
 800e2cc:	4b3b      	ldr	r3, [pc, #236]	; (800e3bc <tcp_process+0x5bc>)
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f003 f837 	bl	8011344 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e2d6:	e167      	b.n	800e5a8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e2d8:	4b32      	ldr	r3, [pc, #200]	; (800e3a4 <tcp_process+0x5a4>)
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	f003 0302 	and.w	r3, r3, #2
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	f000 8161 	beq.w	800e5a8 <tcp_process+0x7a8>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ea:	1e5a      	subs	r2, r3, #1
 800e2ec:	4b30      	ldr	r3, [pc, #192]	; (800e3b0 <tcp_process+0x5b0>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	f040 8159 	bne.w	800e5a8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f002 fe12 	bl	8010f20 <tcp_rexmit>
      break;
 800e2fc:	e154      	b.n	800e5a8 <tcp_process+0x7a8>
 800e2fe:	e153      	b.n	800e5a8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 fa71 	bl	800e7e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e306:	4b32      	ldr	r3, [pc, #200]	; (800e3d0 <tcp_process+0x5d0>)
 800e308:	781b      	ldrb	r3, [r3, #0]
 800e30a:	f003 0320 	and.w	r3, r3, #32
 800e30e:	2b00      	cmp	r3, #0
 800e310:	f000 814c 	beq.w	800e5ac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	8b5b      	ldrh	r3, [r3, #26]
 800e318:	f043 0302 	orr.w	r3, r3, #2
 800e31c:	b29a      	uxth	r2, r3
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2207      	movs	r2, #7
 800e326:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e328:	e140      	b.n	800e5ac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 fa5c 	bl	800e7e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e330:	4b27      	ldr	r3, [pc, #156]	; (800e3d0 <tcp_process+0x5d0>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	f003 0320 	and.w	r3, r3, #32
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d071      	beq.n	800e420 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e33c:	4b19      	ldr	r3, [pc, #100]	; (800e3a4 <tcp_process+0x5a4>)
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	f003 0310 	and.w	r3, r3, #16
 800e344:	2b00      	cmp	r3, #0
 800e346:	d060      	beq.n	800e40a <tcp_process+0x60a>
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e34c:	4b16      	ldr	r3, [pc, #88]	; (800e3a8 <tcp_process+0x5a8>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	429a      	cmp	r2, r3
 800e352:	d15a      	bne.n	800e40a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d156      	bne.n	800e40a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	8b5b      	ldrh	r3, [r3, #26]
 800e360:	f043 0302 	orr.w	r3, r3, #2
 800e364:	b29a      	uxth	r2, r3
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7fe fdbe 	bl	800ceec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e370:	4b18      	ldr	r3, [pc, #96]	; (800e3d4 <tcp_process+0x5d4>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	429a      	cmp	r2, r3
 800e378:	d105      	bne.n	800e386 <tcp_process+0x586>
 800e37a:	4b16      	ldr	r3, [pc, #88]	; (800e3d4 <tcp_process+0x5d4>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	68db      	ldr	r3, [r3, #12]
 800e380:	4a14      	ldr	r2, [pc, #80]	; (800e3d4 <tcp_process+0x5d4>)
 800e382:	6013      	str	r3, [r2, #0]
 800e384:	e02e      	b.n	800e3e4 <tcp_process+0x5e4>
 800e386:	4b13      	ldr	r3, [pc, #76]	; (800e3d4 <tcp_process+0x5d4>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	617b      	str	r3, [r7, #20]
 800e38c:	e027      	b.n	800e3de <tcp_process+0x5de>
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	429a      	cmp	r2, r3
 800e396:	d11f      	bne.n	800e3d8 <tcp_process+0x5d8>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	68da      	ldr	r2, [r3, #12]
 800e39c:	697b      	ldr	r3, [r7, #20]
 800e39e:	60da      	str	r2, [r3, #12]
 800e3a0:	e020      	b.n	800e3e4 <tcp_process+0x5e4>
 800e3a2:	bf00      	nop
 800e3a4:	20010284 	.word	0x20010284
 800e3a8:	2001027c 	.word	0x2001027c
 800e3ac:	20010282 	.word	0x20010282
 800e3b0:	20010278 	.word	0x20010278
 800e3b4:	20010268 	.word	0x20010268
 800e3b8:	200136f0 	.word	0x200136f0
 800e3bc:	200136f4 	.word	0x200136f4
 800e3c0:	0801915c 	.word	0x0801915c
 800e3c4:	080193fc 	.word	0x080193fc
 800e3c8:	080191a8 	.word	0x080191a8
 800e3cc:	20010280 	.word	0x20010280
 800e3d0:	20010285 	.word	0x20010285
 800e3d4:	20016e14 	.word	0x20016e14
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	617b      	str	r3, [r7, #20]
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d1d4      	bne.n	800e38e <tcp_process+0x58e>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	60da      	str	r2, [r3, #12]
 800e3ea:	4b77      	ldr	r3, [pc, #476]	; (800e5c8 <tcp_process+0x7c8>)
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	220a      	movs	r2, #10
 800e3f4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e3f6:	4b75      	ldr	r3, [pc, #468]	; (800e5cc <tcp_process+0x7cc>)
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	60da      	str	r2, [r3, #12]
 800e3fe:	4a73      	ldr	r2, [pc, #460]	; (800e5cc <tcp_process+0x7cc>)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6013      	str	r3, [r2, #0]
 800e404:	f003 f960 	bl	80116c8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e408:	e0d2      	b.n	800e5b0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	8b5b      	ldrh	r3, [r3, #26]
 800e40e:	f043 0302 	orr.w	r3, r3, #2
 800e412:	b29a      	uxth	r2, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2208      	movs	r2, #8
 800e41c:	751a      	strb	r2, [r3, #20]
      break;
 800e41e:	e0c7      	b.n	800e5b0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e420:	4b6b      	ldr	r3, [pc, #428]	; (800e5d0 <tcp_process+0x7d0>)
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	f003 0310 	and.w	r3, r3, #16
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f000 80c1 	beq.w	800e5b0 <tcp_process+0x7b0>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e432:	4b68      	ldr	r3, [pc, #416]	; (800e5d4 <tcp_process+0x7d4>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	429a      	cmp	r2, r3
 800e438:	f040 80ba 	bne.w	800e5b0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e440:	2b00      	cmp	r3, #0
 800e442:	f040 80b5 	bne.w	800e5b0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2206      	movs	r2, #6
 800e44a:	751a      	strb	r2, [r3, #20]
      break;
 800e44c:	e0b0      	b.n	800e5b0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f000 f9ca 	bl	800e7e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e454:	4b60      	ldr	r3, [pc, #384]	; (800e5d8 <tcp_process+0x7d8>)
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	f003 0320 	and.w	r3, r3, #32
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	f000 80a9 	beq.w	800e5b4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	8b5b      	ldrh	r3, [r3, #26]
 800e466:	f043 0302 	orr.w	r3, r3, #2
 800e46a:	b29a      	uxth	r2, r3
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f7fe fd3b 	bl	800ceec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e476:	4b59      	ldr	r3, [pc, #356]	; (800e5dc <tcp_process+0x7dc>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	d105      	bne.n	800e48c <tcp_process+0x68c>
 800e480:	4b56      	ldr	r3, [pc, #344]	; (800e5dc <tcp_process+0x7dc>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	4a55      	ldr	r2, [pc, #340]	; (800e5dc <tcp_process+0x7dc>)
 800e488:	6013      	str	r3, [r2, #0]
 800e48a:	e013      	b.n	800e4b4 <tcp_process+0x6b4>
 800e48c:	4b53      	ldr	r3, [pc, #332]	; (800e5dc <tcp_process+0x7dc>)
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	613b      	str	r3, [r7, #16]
 800e492:	e00c      	b.n	800e4ae <tcp_process+0x6ae>
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	68db      	ldr	r3, [r3, #12]
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d104      	bne.n	800e4a8 <tcp_process+0x6a8>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	68da      	ldr	r2, [r3, #12]
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	60da      	str	r2, [r3, #12]
 800e4a6:	e005      	b.n	800e4b4 <tcp_process+0x6b4>
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	613b      	str	r3, [r7, #16]
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d1ef      	bne.n	800e494 <tcp_process+0x694>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	60da      	str	r2, [r3, #12]
 800e4ba:	4b43      	ldr	r3, [pc, #268]	; (800e5c8 <tcp_process+0x7c8>)
 800e4bc:	2201      	movs	r2, #1
 800e4be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	220a      	movs	r2, #10
 800e4c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e4c6:	4b41      	ldr	r3, [pc, #260]	; (800e5cc <tcp_process+0x7cc>)
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	60da      	str	r2, [r3, #12]
 800e4ce:	4a3f      	ldr	r2, [pc, #252]	; (800e5cc <tcp_process+0x7cc>)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6013      	str	r3, [r2, #0]
 800e4d4:	f003 f8f8 	bl	80116c8 <tcp_timer_needed>
      }
      break;
 800e4d8:	e06c      	b.n	800e5b4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 f984 	bl	800e7e8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e4e0:	4b3b      	ldr	r3, [pc, #236]	; (800e5d0 <tcp_process+0x7d0>)
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	f003 0310 	and.w	r3, r3, #16
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d065      	beq.n	800e5b8 <tcp_process+0x7b8>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4f0:	4b38      	ldr	r3, [pc, #224]	; (800e5d4 <tcp_process+0x7d4>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d15f      	bne.n	800e5b8 <tcp_process+0x7b8>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d15b      	bne.n	800e5b8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f7fe fcf3 	bl	800ceec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e506:	4b35      	ldr	r3, [pc, #212]	; (800e5dc <tcp_process+0x7dc>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d105      	bne.n	800e51c <tcp_process+0x71c>
 800e510:	4b32      	ldr	r3, [pc, #200]	; (800e5dc <tcp_process+0x7dc>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	68db      	ldr	r3, [r3, #12]
 800e516:	4a31      	ldr	r2, [pc, #196]	; (800e5dc <tcp_process+0x7dc>)
 800e518:	6013      	str	r3, [r2, #0]
 800e51a:	e013      	b.n	800e544 <tcp_process+0x744>
 800e51c:	4b2f      	ldr	r3, [pc, #188]	; (800e5dc <tcp_process+0x7dc>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	60fb      	str	r3, [r7, #12]
 800e522:	e00c      	b.n	800e53e <tcp_process+0x73e>
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d104      	bne.n	800e538 <tcp_process+0x738>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	68da      	ldr	r2, [r3, #12]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	60da      	str	r2, [r3, #12]
 800e536:	e005      	b.n	800e544 <tcp_process+0x744>
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	68db      	ldr	r3, [r3, #12]
 800e53c:	60fb      	str	r3, [r7, #12]
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d1ef      	bne.n	800e524 <tcp_process+0x724>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2200      	movs	r2, #0
 800e548:	60da      	str	r2, [r3, #12]
 800e54a:	4b1f      	ldr	r3, [pc, #124]	; (800e5c8 <tcp_process+0x7c8>)
 800e54c:	2201      	movs	r2, #1
 800e54e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	220a      	movs	r2, #10
 800e554:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e556:	4b1d      	ldr	r3, [pc, #116]	; (800e5cc <tcp_process+0x7cc>)
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	60da      	str	r2, [r3, #12]
 800e55e:	4a1b      	ldr	r2, [pc, #108]	; (800e5cc <tcp_process+0x7cc>)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6013      	str	r3, [r2, #0]
 800e564:	f003 f8b0 	bl	80116c8 <tcp_timer_needed>
      }
      break;
 800e568:	e026      	b.n	800e5b8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f93c 	bl	800e7e8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e570:	4b17      	ldr	r3, [pc, #92]	; (800e5d0 <tcp_process+0x7d0>)
 800e572:	781b      	ldrb	r3, [r3, #0]
 800e574:	f003 0310 	and.w	r3, r3, #16
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d01f      	beq.n	800e5bc <tcp_process+0x7bc>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e580:	4b14      	ldr	r3, [pc, #80]	; (800e5d4 <tcp_process+0x7d4>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	429a      	cmp	r2, r3
 800e586:	d119      	bne.n	800e5bc <tcp_process+0x7bc>
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d115      	bne.n	800e5bc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e590:	4b11      	ldr	r3, [pc, #68]	; (800e5d8 <tcp_process+0x7d8>)
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	f043 0310 	orr.w	r3, r3, #16
 800e598:	b2da      	uxtb	r2, r3
 800e59a:	4b0f      	ldr	r3, [pc, #60]	; (800e5d8 <tcp_process+0x7d8>)
 800e59c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e59e:	e00d      	b.n	800e5bc <tcp_process+0x7bc>
    default:
      break;
 800e5a0:	bf00      	nop
 800e5a2:	e00c      	b.n	800e5be <tcp_process+0x7be>
      break;
 800e5a4:	bf00      	nop
 800e5a6:	e00a      	b.n	800e5be <tcp_process+0x7be>
      break;
 800e5a8:	bf00      	nop
 800e5aa:	e008      	b.n	800e5be <tcp_process+0x7be>
      break;
 800e5ac:	bf00      	nop
 800e5ae:	e006      	b.n	800e5be <tcp_process+0x7be>
      break;
 800e5b0:	bf00      	nop
 800e5b2:	e004      	b.n	800e5be <tcp_process+0x7be>
      break;
 800e5b4:	bf00      	nop
 800e5b6:	e002      	b.n	800e5be <tcp_process+0x7be>
      break;
 800e5b8:	bf00      	nop
 800e5ba:	e000      	b.n	800e5be <tcp_process+0x7be>
      break;
 800e5bc:	bf00      	nop
  }
  return ERR_OK;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3724      	adds	r7, #36	; 0x24
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd90      	pop	{r4, r7, pc}
 800e5c8:	20016e10 	.word	0x20016e10
 800e5cc:	20016e24 	.word	0x20016e24
 800e5d0:	20010284 	.word	0x20010284
 800e5d4:	2001027c 	.word	0x2001027c
 800e5d8:	20010285 	.word	0x20010285
 800e5dc:	20016e14 	.word	0x20016e14

0800e5e0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e5e0:	b590      	push	{r4, r7, lr}
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
 800e5e8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d106      	bne.n	800e5fe <tcp_oos_insert_segment+0x1e>
 800e5f0:	4b3b      	ldr	r3, [pc, #236]	; (800e6e0 <tcp_oos_insert_segment+0x100>)
 800e5f2:	f240 421f 	movw	r2, #1055	; 0x41f
 800e5f6:	493b      	ldr	r1, [pc, #236]	; (800e6e4 <tcp_oos_insert_segment+0x104>)
 800e5f8:	483b      	ldr	r0, [pc, #236]	; (800e6e8 <tcp_oos_insert_segment+0x108>)
 800e5fa:	f008 f975 	bl	80168e8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	899b      	ldrh	r3, [r3, #12]
 800e604:	b29b      	uxth	r3, r3
 800e606:	4618      	mov	r0, r3
 800e608:	f7fb f970 	bl	80098ec <lwip_htons>
 800e60c:	4603      	mov	r3, r0
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	f003 0301 	and.w	r3, r3, #1
 800e614:	2b00      	cmp	r3, #0
 800e616:	d028      	beq.n	800e66a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e618:	6838      	ldr	r0, [r7, #0]
 800e61a:	f7fe f97b 	bl	800c914 <tcp_segs_free>
    next = NULL;
 800e61e:	2300      	movs	r3, #0
 800e620:	603b      	str	r3, [r7, #0]
 800e622:	e056      	b.n	800e6d2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	68db      	ldr	r3, [r3, #12]
 800e628:	899b      	ldrh	r3, [r3, #12]
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7fb f95d 	bl	80098ec <lwip_htons>
 800e632:	4603      	mov	r3, r0
 800e634:	b2db      	uxtb	r3, r3
 800e636:	f003 0301 	and.w	r3, r3, #1
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00d      	beq.n	800e65a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	68db      	ldr	r3, [r3, #12]
 800e642:	899b      	ldrh	r3, [r3, #12]
 800e644:	b29c      	uxth	r4, r3
 800e646:	2001      	movs	r0, #1
 800e648:	f7fb f950 	bl	80098ec <lwip_htons>
 800e64c:	4603      	mov	r3, r0
 800e64e:	461a      	mov	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	4322      	orrs	r2, r4
 800e656:	b292      	uxth	r2, r2
 800e658:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f7fe f969 	bl	800c93c <tcp_seg_free>
    while (next &&
 800e66a:	683b      	ldr	r3, [r7, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00e      	beq.n	800e68e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	891b      	ldrh	r3, [r3, #8]
 800e674:	461a      	mov	r2, r3
 800e676:	4b1d      	ldr	r3, [pc, #116]	; (800e6ec <tcp_oos_insert_segment+0x10c>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	441a      	add	r2, r3
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	68db      	ldr	r3, [r3, #12]
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	6839      	ldr	r1, [r7, #0]
 800e684:	8909      	ldrh	r1, [r1, #8]
 800e686:	440b      	add	r3, r1
 800e688:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	daca      	bge.n	800e624 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d01e      	beq.n	800e6d2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	891b      	ldrh	r3, [r3, #8]
 800e698:	461a      	mov	r2, r3
 800e69a:	4b14      	ldr	r3, [pc, #80]	; (800e6ec <tcp_oos_insert_segment+0x10c>)
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	441a      	add	r2, r3
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	68db      	ldr	r3, [r3, #12]
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	dd12      	ble.n	800e6d2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	68db      	ldr	r3, [r3, #12]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	b29a      	uxth	r2, r3
 800e6b4:	4b0d      	ldr	r3, [pc, #52]	; (800e6ec <tcp_oos_insert_segment+0x10c>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	b29b      	uxth	r3, r3
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	b29a      	uxth	r2, r3
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	685a      	ldr	r2, [r3, #4]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	891b      	ldrh	r3, [r3, #8]
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	4610      	mov	r0, r2
 800e6ce:	f7fc fb71 	bl	800adb4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	683a      	ldr	r2, [r7, #0]
 800e6d6:	601a      	str	r2, [r3, #0]
}
 800e6d8:	bf00      	nop
 800e6da:	3714      	adds	r7, #20
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd90      	pop	{r4, r7, pc}
 800e6e0:	0801915c 	.word	0x0801915c
 800e6e4:	0801941c 	.word	0x0801941c
 800e6e8:	080191a8 	.word	0x080191a8
 800e6ec:	20010278 	.word	0x20010278

0800e6f0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e6f0:	b5b0      	push	{r4, r5, r7, lr}
 800e6f2:	b086      	sub	sp, #24
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	60f8      	str	r0, [r7, #12]
 800e6f8:	60b9      	str	r1, [r7, #8]
 800e6fa:	607a      	str	r2, [r7, #4]
 800e6fc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e6fe:	e03e      	b.n	800e77e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	4618      	mov	r0, r3
 800e710:	f7fc fd64 	bl	800b1dc <pbuf_clen>
 800e714:	4603      	mov	r3, r0
 800e716:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e71e:	8a7a      	ldrh	r2, [r7, #18]
 800e720:	429a      	cmp	r2, r3
 800e722:	d906      	bls.n	800e732 <tcp_free_acked_segments+0x42>
 800e724:	4b2a      	ldr	r3, [pc, #168]	; (800e7d0 <tcp_free_acked_segments+0xe0>)
 800e726:	f240 4257 	movw	r2, #1111	; 0x457
 800e72a:	492a      	ldr	r1, [pc, #168]	; (800e7d4 <tcp_free_acked_segments+0xe4>)
 800e72c:	482a      	ldr	r0, [pc, #168]	; (800e7d8 <tcp_free_acked_segments+0xe8>)
 800e72e:	f008 f8db 	bl	80168e8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e738:	8a7b      	ldrh	r3, [r7, #18]
 800e73a:	1ad3      	subs	r3, r2, r3
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	891a      	ldrh	r2, [r3, #8]
 800e748:	4b24      	ldr	r3, [pc, #144]	; (800e7dc <tcp_free_acked_segments+0xec>)
 800e74a:	881b      	ldrh	r3, [r3, #0]
 800e74c:	4413      	add	r3, r2
 800e74e:	b29a      	uxth	r2, r3
 800e750:	4b22      	ldr	r3, [pc, #136]	; (800e7dc <tcp_free_acked_segments+0xec>)
 800e752:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e754:	6978      	ldr	r0, [r7, #20]
 800e756:	f7fe f8f1 	bl	800c93c <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e760:	2b00      	cmp	r3, #0
 800e762:	d00c      	beq.n	800e77e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d109      	bne.n	800e77e <tcp_free_acked_segments+0x8e>
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d106      	bne.n	800e77e <tcp_free_acked_segments+0x8e>
 800e770:	4b17      	ldr	r3, [pc, #92]	; (800e7d0 <tcp_free_acked_segments+0xe0>)
 800e772:	f240 4262 	movw	r2, #1122	; 0x462
 800e776:	491a      	ldr	r1, [pc, #104]	; (800e7e0 <tcp_free_acked_segments+0xf0>)
 800e778:	4817      	ldr	r0, [pc, #92]	; (800e7d8 <tcp_free_acked_segments+0xe8>)
 800e77a:	f008 f8b5 	bl	80168e8 <iprintf>
  while (seg_list != NULL &&
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d020      	beq.n	800e7c6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	68db      	ldr	r3, [r3, #12]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7fb f8c3 	bl	8009916 <lwip_htonl>
 800e790:	4604      	mov	r4, r0
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	891b      	ldrh	r3, [r3, #8]
 800e796:	461d      	mov	r5, r3
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	68db      	ldr	r3, [r3, #12]
 800e79c:	899b      	ldrh	r3, [r3, #12]
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fb f8a3 	bl	80098ec <lwip_htons>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	f003 0303 	and.w	r3, r3, #3
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d001      	beq.n	800e7b6 <tcp_free_acked_segments+0xc6>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e000      	b.n	800e7b8 <tcp_free_acked_segments+0xc8>
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	442b      	add	r3, r5
 800e7ba:	18e2      	adds	r2, r4, r3
 800e7bc:	4b09      	ldr	r3, [pc, #36]	; (800e7e4 <tcp_free_acked_segments+0xf4>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	dd9c      	ble.n	800e700 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e7c6:	68bb      	ldr	r3, [r7, #8]
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3718      	adds	r7, #24
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bdb0      	pop	{r4, r5, r7, pc}
 800e7d0:	0801915c 	.word	0x0801915c
 800e7d4:	08019444 	.word	0x08019444
 800e7d8:	080191a8 	.word	0x080191a8
 800e7dc:	20010280 	.word	0x20010280
 800e7e0:	0801946c 	.word	0x0801946c
 800e7e4:	2001027c 	.word	0x2001027c

0800e7e8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e7e8:	b5b0      	push	{r4, r5, r7, lr}
 800e7ea:	b094      	sub	sp, #80	; 0x50
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d106      	bne.n	800e808 <tcp_receive+0x20>
 800e7fa:	4ba6      	ldr	r3, [pc, #664]	; (800ea94 <tcp_receive+0x2ac>)
 800e7fc:	f240 427b 	movw	r2, #1147	; 0x47b
 800e800:	49a5      	ldr	r1, [pc, #660]	; (800ea98 <tcp_receive+0x2b0>)
 800e802:	48a6      	ldr	r0, [pc, #664]	; (800ea9c <tcp_receive+0x2b4>)
 800e804:	f008 f870 	bl	80168e8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	7d1b      	ldrb	r3, [r3, #20]
 800e80c:	2b03      	cmp	r3, #3
 800e80e:	d806      	bhi.n	800e81e <tcp_receive+0x36>
 800e810:	4ba0      	ldr	r3, [pc, #640]	; (800ea94 <tcp_receive+0x2ac>)
 800e812:	f240 427c 	movw	r2, #1148	; 0x47c
 800e816:	49a2      	ldr	r1, [pc, #648]	; (800eaa0 <tcp_receive+0x2b8>)
 800e818:	48a0      	ldr	r0, [pc, #640]	; (800ea9c <tcp_receive+0x2b4>)
 800e81a:	f008 f865 	bl	80168e8 <iprintf>

  if (flags & TCP_ACK) {
 800e81e:	4ba1      	ldr	r3, [pc, #644]	; (800eaa4 <tcp_receive+0x2bc>)
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	f003 0310 	and.w	r3, r3, #16
 800e826:	2b00      	cmp	r3, #0
 800e828:	f000 8263 	beq.w	800ecf2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e832:	461a      	mov	r2, r3
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e838:	4413      	add	r3, r2
 800e83a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e840:	4b99      	ldr	r3, [pc, #612]	; (800eaa8 <tcp_receive+0x2c0>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	2b00      	cmp	r3, #0
 800e848:	db1b      	blt.n	800e882 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e84e:	4b96      	ldr	r3, [pc, #600]	; (800eaa8 <tcp_receive+0x2c0>)
 800e850:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e852:	429a      	cmp	r2, r3
 800e854:	d106      	bne.n	800e864 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e85a:	4b94      	ldr	r3, [pc, #592]	; (800eaac <tcp_receive+0x2c4>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	1ad3      	subs	r3, r2, r3
 800e860:	2b00      	cmp	r3, #0
 800e862:	db0e      	blt.n	800e882 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e868:	4b90      	ldr	r3, [pc, #576]	; (800eaac <tcp_receive+0x2c4>)
 800e86a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e86c:	429a      	cmp	r2, r3
 800e86e:	d125      	bne.n	800e8bc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e870:	4b8f      	ldr	r3, [pc, #572]	; (800eab0 <tcp_receive+0x2c8>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	89db      	ldrh	r3, [r3, #14]
 800e876:	b29a      	uxth	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e87e:	429a      	cmp	r2, r3
 800e880:	d91c      	bls.n	800e8bc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e882:	4b8b      	ldr	r3, [pc, #556]	; (800eab0 <tcp_receive+0x2c8>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	89db      	ldrh	r3, [r3, #14]
 800e888:	b29a      	uxth	r2, r3
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d205      	bcs.n	800e8ac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e8ac:	4b7e      	ldr	r3, [pc, #504]	; (800eaa8 <tcp_receive+0x2c0>)
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e8b4:	4b7d      	ldr	r3, [pc, #500]	; (800eaac <tcp_receive+0x2c4>)
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e8bc:	4b7b      	ldr	r3, [pc, #492]	; (800eaac <tcp_receive+0x2c4>)
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8c4:	1ad3      	subs	r3, r2, r3
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	dc58      	bgt.n	800e97c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e8ca:	4b7a      	ldr	r3, [pc, #488]	; (800eab4 <tcp_receive+0x2cc>)
 800e8cc:	881b      	ldrh	r3, [r3, #0]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d14b      	bne.n	800e96a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e8dc:	4413      	add	r3, r2
 800e8de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d142      	bne.n	800e96a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	db3d      	blt.n	800e96a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e8f2:	4b6e      	ldr	r3, [pc, #440]	; (800eaac <tcp_receive+0x2c4>)
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d137      	bne.n	800e96a <tcp_receive+0x182>
              found_dupack = 1;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e904:	2bff      	cmp	r3, #255	; 0xff
 800e906:	d007      	beq.n	800e918 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e90e:	3301      	adds	r3, #1
 800e910:	b2da      	uxtb	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e91e:	2b03      	cmp	r3, #3
 800e920:	d91b      	bls.n	800e95a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e92c:	4413      	add	r3, r2
 800e92e:	b29a      	uxth	r2, r3
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e936:	429a      	cmp	r2, r3
 800e938:	d30a      	bcc.n	800e950 <tcp_receive+0x168>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e944:	4413      	add	r3, r2
 800e946:	b29a      	uxth	r2, r3
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e94e:	e004      	b.n	800e95a <tcp_receive+0x172>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e956:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e960:	2b02      	cmp	r3, #2
 800e962:	d902      	bls.n	800e96a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f002 fb47 	bl	8010ff8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f040 8160 	bne.w	800ec32 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e97a:	e15a      	b.n	800ec32 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e97c:	4b4b      	ldr	r3, [pc, #300]	; (800eaac <tcp_receive+0x2c4>)
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e984:	1ad3      	subs	r3, r2, r3
 800e986:	3b01      	subs	r3, #1
 800e988:	2b00      	cmp	r3, #0
 800e98a:	f2c0 814d 	blt.w	800ec28 <tcp_receive+0x440>
 800e98e:	4b47      	ldr	r3, [pc, #284]	; (800eaac <tcp_receive+0x2c4>)
 800e990:	681a      	ldr	r2, [r3, #0]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e996:	1ad3      	subs	r3, r2, r3
 800e998:	2b00      	cmp	r3, #0
 800e99a:	f300 8145 	bgt.w	800ec28 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	8b5b      	ldrh	r3, [r3, #26]
 800e9a2:	f003 0304 	and.w	r3, r3, #4
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d010      	beq.n	800e9cc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	8b5b      	ldrh	r3, [r3, #26]
 800e9ae:	f023 0304 	bic.w	r3, r3, #4
 800e9b2:	b29a      	uxth	r2, r3
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e9da:	10db      	asrs	r3, r3, #3
 800e9dc:	b21b      	sxth	r3, r3
 800e9de:	b29a      	uxth	r2, r3
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	4413      	add	r3, r2
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	b21a      	sxth	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e9f4:	4b2d      	ldr	r3, [pc, #180]	; (800eaac <tcp_receive+0x2c4>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	1ad3      	subs	r3, r2, r3
 800ea02:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	2200      	movs	r2, #0
 800ea08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ea0c:	4b27      	ldr	r3, [pc, #156]	; (800eaac <tcp_receive+0x2c4>)
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	7d1b      	ldrb	r3, [r3, #20]
 800ea18:	2b03      	cmp	r3, #3
 800ea1a:	f240 8096 	bls.w	800eb4a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d244      	bcs.n	800eab8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	8b5b      	ldrh	r3, [r3, #26]
 800ea32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d001      	beq.n	800ea3e <tcp_receive+0x256>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	e000      	b.n	800ea40 <tcp_receive+0x258>
 800ea3e:	2302      	movs	r3, #2
 800ea40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ea44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ea48:	b29a      	uxth	r2, r3
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea4e:	fb12 f303 	smulbb	r3, r2, r3
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ea56:	4293      	cmp	r3, r2
 800ea58:	bf28      	it	cs
 800ea5a:	4613      	movcs	r3, r2
 800ea5c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea66:	4413      	add	r3, r2
 800ea68:	b29a      	uxth	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d309      	bcc.n	800ea88 <tcp_receive+0x2a0>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea7c:	4413      	add	r3, r2
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ea86:	e060      	b.n	800eb4a <tcp_receive+0x362>
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ea92:	e05a      	b.n	800eb4a <tcp_receive+0x362>
 800ea94:	0801915c 	.word	0x0801915c
 800ea98:	0801948c 	.word	0x0801948c
 800ea9c:	080191a8 	.word	0x080191a8
 800eaa0:	080194a8 	.word	0x080194a8
 800eaa4:	20010284 	.word	0x20010284
 800eaa8:	20010278 	.word	0x20010278
 800eaac:	2001027c 	.word	0x2001027c
 800eab0:	20010268 	.word	0x20010268
 800eab4:	20010282 	.word	0x20010282
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eabe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eac0:	4413      	add	r3, r2
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d309      	bcc.n	800eae2 <tcp_receive+0x2fa>
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ead4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ead6:	4413      	add	r3, r2
 800ead8:	b29a      	uxth	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eae0:	e004      	b.n	800eaec <tcp_receive+0x304>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d326      	bcc.n	800eb4a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb08:	1ad3      	subs	r3, r2, r3
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb1c:	4413      	add	r3, r2
 800eb1e:	b29a      	uxth	r2, r3
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eb26:	429a      	cmp	r2, r3
 800eb28:	d30a      	bcc.n	800eb40 <tcp_receive+0x358>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eb34:	4413      	add	r3, r2
 800eb36:	b29a      	uxth	r2, r3
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eb3e:	e004      	b.n	800eb4a <tcp_receive+0x362>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb52:	4a98      	ldr	r2, [pc, #608]	; (800edb4 <tcp_receive+0x5cc>)
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7ff fdcb 	bl	800e6f0 <tcp_free_acked_segments>
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb68:	4a93      	ldr	r2, [pc, #588]	; (800edb8 <tcp_receive+0x5d0>)
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f7ff fdc0 	bl	800e6f0 <tcp_free_acked_segments>
 800eb70:	4602      	mov	r2, r0
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d104      	bne.n	800eb88 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb84:	861a      	strh	r2, [r3, #48]	; 0x30
 800eb86:	e002      	b.n	800eb8e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2200      	movs	r2, #0
 800eb92:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d103      	bne.n	800eba4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ebaa:	4b84      	ldr	r3, [pc, #528]	; (800edbc <tcp_receive+0x5d4>)
 800ebac:	881b      	ldrh	r3, [r3, #0]
 800ebae:	4413      	add	r3, r2
 800ebb0:	b29a      	uxth	r2, r3
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	8b5b      	ldrh	r3, [r3, #26]
 800ebbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d035      	beq.n	800ec30 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d118      	bne.n	800ebfe <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d00c      	beq.n	800ebee <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	f7fa fe98 	bl	8009916 <lwip_htonl>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	dc20      	bgt.n	800ec30 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	8b5b      	ldrh	r3, [r3, #26]
 800ebf2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ebfc:	e018      	b.n	800ec30 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	f7fa fe83 	bl	8009916 <lwip_htonl>
 800ec10:	4603      	mov	r3, r0
 800ec12:	1ae3      	subs	r3, r4, r3
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	dc0b      	bgt.n	800ec30 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	8b5b      	ldrh	r3, [r3, #26]
 800ec1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ec20:	b29a      	uxth	r2, r3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec26:	e003      	b.n	800ec30 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f002 fbdd 	bl	80113e8 <tcp_send_empty_ack>
 800ec2e:	e000      	b.n	800ec32 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ec30:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d05b      	beq.n	800ecf2 <tcp_receive+0x50a>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec3e:	4b60      	ldr	r3, [pc, #384]	; (800edc0 <tcp_receive+0x5d8>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	1ad3      	subs	r3, r2, r3
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	da54      	bge.n	800ecf2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ec48:	4b5e      	ldr	r3, [pc, #376]	; (800edc4 <tcp_receive+0x5dc>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec52:	b29b      	uxth	r3, r3
 800ec54:	1ad3      	subs	r3, r2, r3
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800ec5c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec66:	10db      	asrs	r3, r3, #3
 800ec68:	b21b      	sxth	r3, r3
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	1ad3      	subs	r3, r2, r3
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ec80:	4413      	add	r3, r2
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	b21a      	sxth	r2, r3
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ec8a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	da05      	bge.n	800ec9e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800ec92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ec96:	425b      	negs	r3, r3
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ec9e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eca8:	109b      	asrs	r3, r3, #2
 800ecaa:	b21b      	sxth	r3, r3
 800ecac:	b29b      	uxth	r3, r3
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	b29b      	uxth	r3, r3
 800ecb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ecbc:	b29a      	uxth	r2, r3
 800ecbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ecc2:	4413      	add	r3, r2
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	b21a      	sxth	r2, r3
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ecd2:	10db      	asrs	r3, r3, #3
 800ecd4:	b21b      	sxth	r3, r3
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	4413      	add	r3, r2
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	b21a      	sxth	r2, r3
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ecf2:	4b35      	ldr	r3, [pc, #212]	; (800edc8 <tcp_receive+0x5e0>)
 800ecf4:	881b      	ldrh	r3, [r3, #0]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	f000 84e1 	beq.w	800f6be <tcp_receive+0xed6>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	7d1b      	ldrb	r3, [r3, #20]
 800ed00:	2b06      	cmp	r3, #6
 800ed02:	f200 84dc 	bhi.w	800f6be <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed0a:	4b30      	ldr	r3, [pc, #192]	; (800edcc <tcp_receive+0x5e4>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	1ad3      	subs	r3, r2, r3
 800ed10:	3b01      	subs	r3, #1
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	f2c0 808e 	blt.w	800ee34 <tcp_receive+0x64c>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed1c:	4b2a      	ldr	r3, [pc, #168]	; (800edc8 <tcp_receive+0x5e0>)
 800ed1e:	881b      	ldrh	r3, [r3, #0]
 800ed20:	4619      	mov	r1, r3
 800ed22:	4b2a      	ldr	r3, [pc, #168]	; (800edcc <tcp_receive+0x5e4>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	440b      	add	r3, r1
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	f300 8081 	bgt.w	800ee34 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ed32:	4b27      	ldr	r3, [pc, #156]	; (800edd0 <tcp_receive+0x5e8>)
 800ed34:	685b      	ldr	r3, [r3, #4]
 800ed36:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed3c:	4b23      	ldr	r3, [pc, #140]	; (800edcc <tcp_receive+0x5e4>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	1ad3      	subs	r3, r2, r3
 800ed42:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ed44:	4b22      	ldr	r3, [pc, #136]	; (800edd0 <tcp_receive+0x5e8>)
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d106      	bne.n	800ed5a <tcp_receive+0x572>
 800ed4c:	4b21      	ldr	r3, [pc, #132]	; (800edd4 <tcp_receive+0x5ec>)
 800ed4e:	f240 5294 	movw	r2, #1428	; 0x594
 800ed52:	4921      	ldr	r1, [pc, #132]	; (800edd8 <tcp_receive+0x5f0>)
 800ed54:	4821      	ldr	r0, [pc, #132]	; (800eddc <tcp_receive+0x5f4>)
 800ed56:	f007 fdc7 	bl	80168e8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ed60:	4293      	cmp	r3, r2
 800ed62:	d906      	bls.n	800ed72 <tcp_receive+0x58a>
 800ed64:	4b1b      	ldr	r3, [pc, #108]	; (800edd4 <tcp_receive+0x5ec>)
 800ed66:	f240 5295 	movw	r2, #1429	; 0x595
 800ed6a:	491d      	ldr	r1, [pc, #116]	; (800ede0 <tcp_receive+0x5f8>)
 800ed6c:	481b      	ldr	r0, [pc, #108]	; (800eddc <tcp_receive+0x5f4>)
 800ed6e:	f007 fdbb 	bl	80168e8 <iprintf>
      off = (u16_t)off32;
 800ed72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed74:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ed78:	4b15      	ldr	r3, [pc, #84]	; (800edd0 <tcp_receive+0x5e8>)
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	891b      	ldrh	r3, [r3, #8]
 800ed7e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d906      	bls.n	800ed94 <tcp_receive+0x5ac>
 800ed86:	4b13      	ldr	r3, [pc, #76]	; (800edd4 <tcp_receive+0x5ec>)
 800ed88:	f240 5297 	movw	r2, #1431	; 0x597
 800ed8c:	4915      	ldr	r1, [pc, #84]	; (800ede4 <tcp_receive+0x5fc>)
 800ed8e:	4813      	ldr	r0, [pc, #76]	; (800eddc <tcp_receive+0x5f4>)
 800ed90:	f007 fdaa 	bl	80168e8 <iprintf>
      inseg.len -= off;
 800ed94:	4b0e      	ldr	r3, [pc, #56]	; (800edd0 <tcp_receive+0x5e8>)
 800ed96:	891a      	ldrh	r2, [r3, #8]
 800ed98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed9c:	1ad3      	subs	r3, r2, r3
 800ed9e:	b29a      	uxth	r2, r3
 800eda0:	4b0b      	ldr	r3, [pc, #44]	; (800edd0 <tcp_receive+0x5e8>)
 800eda2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800eda4:	4b0a      	ldr	r3, [pc, #40]	; (800edd0 <tcp_receive+0x5e8>)
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	891a      	ldrh	r2, [r3, #8]
 800edaa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800edae:	1ad3      	subs	r3, r2, r3
 800edb0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800edb2:	e029      	b.n	800ee08 <tcp_receive+0x620>
 800edb4:	080194c4 	.word	0x080194c4
 800edb8:	080194cc 	.word	0x080194cc
 800edbc:	20010280 	.word	0x20010280
 800edc0:	2001027c 	.word	0x2001027c
 800edc4:	20016e18 	.word	0x20016e18
 800edc8:	20010282 	.word	0x20010282
 800edcc:	20010278 	.word	0x20010278
 800edd0:	20010258 	.word	0x20010258
 800edd4:	0801915c 	.word	0x0801915c
 800edd8:	080194d4 	.word	0x080194d4
 800eddc:	080191a8 	.word	0x080191a8
 800ede0:	080194e4 	.word	0x080194e4
 800ede4:	080194f4 	.word	0x080194f4
        off -= p->len;
 800ede8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edea:	895b      	ldrh	r3, [r3, #10]
 800edec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800edf0:	1ad3      	subs	r3, r2, r3
 800edf2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800edf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edf8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800edfa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800edfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edfe:	2200      	movs	r2, #0
 800ee00:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ee02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ee08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee0a:	895b      	ldrh	r3, [r3, #10]
 800ee0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d8e9      	bhi.n	800ede8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ee14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee18:	4619      	mov	r1, r3
 800ee1a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ee1c:	f7fc f8ca 	bl	800afb4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee24:	4a91      	ldr	r2, [pc, #580]	; (800f06c <tcp_receive+0x884>)
 800ee26:	6013      	str	r3, [r2, #0]
 800ee28:	4b91      	ldr	r3, [pc, #580]	; (800f070 <tcp_receive+0x888>)
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	4a8f      	ldr	r2, [pc, #572]	; (800f06c <tcp_receive+0x884>)
 800ee2e:	6812      	ldr	r2, [r2, #0]
 800ee30:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ee32:	e00d      	b.n	800ee50 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ee34:	4b8d      	ldr	r3, [pc, #564]	; (800f06c <tcp_receive+0x884>)
 800ee36:	681a      	ldr	r2, [r3, #0]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee3c:	1ad3      	subs	r3, r2, r3
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	da06      	bge.n	800ee50 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	8b5b      	ldrh	r3, [r3, #26]
 800ee46:	f043 0302 	orr.w	r3, r3, #2
 800ee4a:	b29a      	uxth	r2, r3
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ee50:	4b86      	ldr	r3, [pc, #536]	; (800f06c <tcp_receive+0x884>)
 800ee52:	681a      	ldr	r2, [r3, #0]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	f2c0 842a 	blt.w	800f6b4 <tcp_receive+0xecc>
 800ee60:	4b82      	ldr	r3, [pc, #520]	; (800f06c <tcp_receive+0x884>)
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee68:	6879      	ldr	r1, [r7, #4]
 800ee6a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee6c:	440b      	add	r3, r1
 800ee6e:	1ad3      	subs	r3, r2, r3
 800ee70:	3301      	adds	r3, #1
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	f300 841e 	bgt.w	800f6b4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee7c:	4b7b      	ldr	r3, [pc, #492]	; (800f06c <tcp_receive+0x884>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	f040 829a 	bne.w	800f3ba <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ee86:	4b7a      	ldr	r3, [pc, #488]	; (800f070 <tcp_receive+0x888>)
 800ee88:	891c      	ldrh	r4, [r3, #8]
 800ee8a:	4b79      	ldr	r3, [pc, #484]	; (800f070 <tcp_receive+0x888>)
 800ee8c:	68db      	ldr	r3, [r3, #12]
 800ee8e:	899b      	ldrh	r3, [r3, #12]
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fa fd2a 	bl	80098ec <lwip_htons>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	f003 0303 	and.w	r3, r3, #3
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d001      	beq.n	800eea8 <tcp_receive+0x6c0>
 800eea4:	2301      	movs	r3, #1
 800eea6:	e000      	b.n	800eeaa <tcp_receive+0x6c2>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	4423      	add	r3, r4
 800eeac:	b29a      	uxth	r2, r3
 800eeae:	4b71      	ldr	r3, [pc, #452]	; (800f074 <tcp_receive+0x88c>)
 800eeb0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eeb6:	4b6f      	ldr	r3, [pc, #444]	; (800f074 <tcp_receive+0x88c>)
 800eeb8:	881b      	ldrh	r3, [r3, #0]
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d275      	bcs.n	800efaa <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eebe:	4b6c      	ldr	r3, [pc, #432]	; (800f070 <tcp_receive+0x888>)
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	899b      	ldrh	r3, [r3, #12]
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7fa fd10 	bl	80098ec <lwip_htons>
 800eecc:	4603      	mov	r3, r0
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	f003 0301 	and.w	r3, r3, #1
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d01f      	beq.n	800ef18 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800eed8:	4b65      	ldr	r3, [pc, #404]	; (800f070 <tcp_receive+0x888>)
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	899b      	ldrh	r3, [r3, #12]
 800eede:	b29b      	uxth	r3, r3
 800eee0:	b21b      	sxth	r3, r3
 800eee2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eee6:	b21c      	sxth	r4, r3
 800eee8:	4b61      	ldr	r3, [pc, #388]	; (800f070 <tcp_receive+0x888>)
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	899b      	ldrh	r3, [r3, #12]
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7fa fcfb 	bl	80098ec <lwip_htons>
 800eef6:	4603      	mov	r3, r0
 800eef8:	b2db      	uxtb	r3, r3
 800eefa:	b29b      	uxth	r3, r3
 800eefc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	4618      	mov	r0, r3
 800ef04:	f7fa fcf2 	bl	80098ec <lwip_htons>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	b21b      	sxth	r3, r3
 800ef0c:	4323      	orrs	r3, r4
 800ef0e:	b21a      	sxth	r2, r3
 800ef10:	4b57      	ldr	r3, [pc, #348]	; (800f070 <tcp_receive+0x888>)
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	b292      	uxth	r2, r2
 800ef16:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ef1c:	4b54      	ldr	r3, [pc, #336]	; (800f070 <tcp_receive+0x888>)
 800ef1e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ef20:	4b53      	ldr	r3, [pc, #332]	; (800f070 <tcp_receive+0x888>)
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	899b      	ldrh	r3, [r3, #12]
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7fa fcdf 	bl	80098ec <lwip_htons>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	f003 0302 	and.w	r3, r3, #2
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d005      	beq.n	800ef46 <tcp_receive+0x75e>
            inseg.len -= 1;
 800ef3a:	4b4d      	ldr	r3, [pc, #308]	; (800f070 <tcp_receive+0x888>)
 800ef3c:	891b      	ldrh	r3, [r3, #8]
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	b29a      	uxth	r2, r3
 800ef42:	4b4b      	ldr	r3, [pc, #300]	; (800f070 <tcp_receive+0x888>)
 800ef44:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ef46:	4b4a      	ldr	r3, [pc, #296]	; (800f070 <tcp_receive+0x888>)
 800ef48:	685a      	ldr	r2, [r3, #4]
 800ef4a:	4b49      	ldr	r3, [pc, #292]	; (800f070 <tcp_receive+0x888>)
 800ef4c:	891b      	ldrh	r3, [r3, #8]
 800ef4e:	4619      	mov	r1, r3
 800ef50:	4610      	mov	r0, r2
 800ef52:	f7fb ff2f 	bl	800adb4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ef56:	4b46      	ldr	r3, [pc, #280]	; (800f070 <tcp_receive+0x888>)
 800ef58:	891c      	ldrh	r4, [r3, #8]
 800ef5a:	4b45      	ldr	r3, [pc, #276]	; (800f070 <tcp_receive+0x888>)
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	899b      	ldrh	r3, [r3, #12]
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7fa fcc2 	bl	80098ec <lwip_htons>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	f003 0303 	and.w	r3, r3, #3
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d001      	beq.n	800ef78 <tcp_receive+0x790>
 800ef74:	2301      	movs	r3, #1
 800ef76:	e000      	b.n	800ef7a <tcp_receive+0x792>
 800ef78:	2300      	movs	r3, #0
 800ef7a:	4423      	add	r3, r4
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	4b3d      	ldr	r3, [pc, #244]	; (800f074 <tcp_receive+0x88c>)
 800ef80:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ef82:	4b3c      	ldr	r3, [pc, #240]	; (800f074 <tcp_receive+0x88c>)
 800ef84:	881b      	ldrh	r3, [r3, #0]
 800ef86:	461a      	mov	r2, r3
 800ef88:	4b38      	ldr	r3, [pc, #224]	; (800f06c <tcp_receive+0x884>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	441a      	add	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef92:	6879      	ldr	r1, [r7, #4]
 800ef94:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ef96:	440b      	add	r3, r1
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d006      	beq.n	800efaa <tcp_receive+0x7c2>
 800ef9c:	4b36      	ldr	r3, [pc, #216]	; (800f078 <tcp_receive+0x890>)
 800ef9e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800efa2:	4936      	ldr	r1, [pc, #216]	; (800f07c <tcp_receive+0x894>)
 800efa4:	4836      	ldr	r0, [pc, #216]	; (800f080 <tcp_receive+0x898>)
 800efa6:	f007 fc9f 	bl	80168e8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efae:	2b00      	cmp	r3, #0
 800efb0:	f000 80e7 	beq.w	800f182 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800efb4:	4b2e      	ldr	r3, [pc, #184]	; (800f070 <tcp_receive+0x888>)
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	899b      	ldrh	r3, [r3, #12]
 800efba:	b29b      	uxth	r3, r3
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7fa fc95 	bl	80098ec <lwip_htons>
 800efc2:	4603      	mov	r3, r0
 800efc4:	b2db      	uxtb	r3, r3
 800efc6:	f003 0301 	and.w	r3, r3, #1
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d010      	beq.n	800eff0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800efce:	e00a      	b.n	800efe6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efd4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800efe0:	68f8      	ldr	r0, [r7, #12]
 800efe2:	f7fd fcab 	bl	800c93c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800efea:	2b00      	cmp	r3, #0
 800efec:	d1f0      	bne.n	800efd0 <tcp_receive+0x7e8>
 800efee:	e0c8      	b.n	800f182 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eff4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800eff6:	e052      	b.n	800f09e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	899b      	ldrh	r3, [r3, #12]
 800effe:	b29b      	uxth	r3, r3
 800f000:	4618      	mov	r0, r3
 800f002:	f7fa fc73 	bl	80098ec <lwip_htons>
 800f006:	4603      	mov	r3, r0
 800f008:	b2db      	uxtb	r3, r3
 800f00a:	f003 0301 	and.w	r3, r3, #1
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d03d      	beq.n	800f08e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f012:	4b17      	ldr	r3, [pc, #92]	; (800f070 <tcp_receive+0x888>)
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	899b      	ldrh	r3, [r3, #12]
 800f018:	b29b      	uxth	r3, r3
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7fa fc66 	bl	80098ec <lwip_htons>
 800f020:	4603      	mov	r3, r0
 800f022:	b2db      	uxtb	r3, r3
 800f024:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d130      	bne.n	800f08e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f02c:	4b10      	ldr	r3, [pc, #64]	; (800f070 <tcp_receive+0x888>)
 800f02e:	68db      	ldr	r3, [r3, #12]
 800f030:	899b      	ldrh	r3, [r3, #12]
 800f032:	b29c      	uxth	r4, r3
 800f034:	2001      	movs	r0, #1
 800f036:	f7fa fc59 	bl	80098ec <lwip_htons>
 800f03a:	4603      	mov	r3, r0
 800f03c:	461a      	mov	r2, r3
 800f03e:	4b0c      	ldr	r3, [pc, #48]	; (800f070 <tcp_receive+0x888>)
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	4322      	orrs	r2, r4
 800f044:	b292      	uxth	r2, r2
 800f046:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f048:	4b09      	ldr	r3, [pc, #36]	; (800f070 <tcp_receive+0x888>)
 800f04a:	891c      	ldrh	r4, [r3, #8]
 800f04c:	4b08      	ldr	r3, [pc, #32]	; (800f070 <tcp_receive+0x888>)
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	899b      	ldrh	r3, [r3, #12]
 800f052:	b29b      	uxth	r3, r3
 800f054:	4618      	mov	r0, r3
 800f056:	f7fa fc49 	bl	80098ec <lwip_htons>
 800f05a:	4603      	mov	r3, r0
 800f05c:	b2db      	uxtb	r3, r3
 800f05e:	f003 0303 	and.w	r3, r3, #3
 800f062:	2b00      	cmp	r3, #0
 800f064:	d00e      	beq.n	800f084 <tcp_receive+0x89c>
 800f066:	2301      	movs	r3, #1
 800f068:	e00d      	b.n	800f086 <tcp_receive+0x89e>
 800f06a:	bf00      	nop
 800f06c:	20010278 	.word	0x20010278
 800f070:	20010258 	.word	0x20010258
 800f074:	20010282 	.word	0x20010282
 800f078:	0801915c 	.word	0x0801915c
 800f07c:	08019504 	.word	0x08019504
 800f080:	080191a8 	.word	0x080191a8
 800f084:	2300      	movs	r3, #0
 800f086:	4423      	add	r3, r4
 800f088:	b29a      	uxth	r2, r3
 800f08a:	4b98      	ldr	r3, [pc, #608]	; (800f2ec <tcp_receive+0xb04>)
 800f08c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f08e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f090:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f098:	6938      	ldr	r0, [r7, #16]
 800f09a:	f7fd fc4f 	bl	800c93c <tcp_seg_free>
            while (next &&
 800f09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d00e      	beq.n	800f0c2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f0a4:	4b91      	ldr	r3, [pc, #580]	; (800f2ec <tcp_receive+0xb04>)
 800f0a6:	881b      	ldrh	r3, [r3, #0]
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	4b91      	ldr	r3, [pc, #580]	; (800f2f0 <tcp_receive+0xb08>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	441a      	add	r2, r3
 800f0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f0b8:	8909      	ldrh	r1, [r1, #8]
 800f0ba:	440b      	add	r3, r1
 800f0bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	da9a      	bge.n	800eff8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d059      	beq.n	800f17c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f0c8:	4b88      	ldr	r3, [pc, #544]	; (800f2ec <tcp_receive+0xb04>)
 800f0ca:	881b      	ldrh	r3, [r3, #0]
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	4b88      	ldr	r3, [pc, #544]	; (800f2f0 <tcp_receive+0xb08>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	441a      	add	r2, r3
 800f0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0d6:	68db      	ldr	r3, [r3, #12]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	dd4d      	ble.n	800f17c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0e2:	68db      	ldr	r3, [r3, #12]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	b29a      	uxth	r2, r3
 800f0e8:	4b81      	ldr	r3, [pc, #516]	; (800f2f0 <tcp_receive+0xb08>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	4b80      	ldr	r3, [pc, #512]	; (800f2f4 <tcp_receive+0xb0c>)
 800f0f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f0f6:	4b7f      	ldr	r3, [pc, #508]	; (800f2f4 <tcp_receive+0xb0c>)
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	899b      	ldrh	r3, [r3, #12]
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7fa fbf4 	bl	80098ec <lwip_htons>
 800f104:	4603      	mov	r3, r0
 800f106:	b2db      	uxtb	r3, r3
 800f108:	f003 0302 	and.w	r3, r3, #2
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d005      	beq.n	800f11c <tcp_receive+0x934>
                inseg.len -= 1;
 800f110:	4b78      	ldr	r3, [pc, #480]	; (800f2f4 <tcp_receive+0xb0c>)
 800f112:	891b      	ldrh	r3, [r3, #8]
 800f114:	3b01      	subs	r3, #1
 800f116:	b29a      	uxth	r2, r3
 800f118:	4b76      	ldr	r3, [pc, #472]	; (800f2f4 <tcp_receive+0xb0c>)
 800f11a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f11c:	4b75      	ldr	r3, [pc, #468]	; (800f2f4 <tcp_receive+0xb0c>)
 800f11e:	685a      	ldr	r2, [r3, #4]
 800f120:	4b74      	ldr	r3, [pc, #464]	; (800f2f4 <tcp_receive+0xb0c>)
 800f122:	891b      	ldrh	r3, [r3, #8]
 800f124:	4619      	mov	r1, r3
 800f126:	4610      	mov	r0, r2
 800f128:	f7fb fe44 	bl	800adb4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f12c:	4b71      	ldr	r3, [pc, #452]	; (800f2f4 <tcp_receive+0xb0c>)
 800f12e:	891c      	ldrh	r4, [r3, #8]
 800f130:	4b70      	ldr	r3, [pc, #448]	; (800f2f4 <tcp_receive+0xb0c>)
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	899b      	ldrh	r3, [r3, #12]
 800f136:	b29b      	uxth	r3, r3
 800f138:	4618      	mov	r0, r3
 800f13a:	f7fa fbd7 	bl	80098ec <lwip_htons>
 800f13e:	4603      	mov	r3, r0
 800f140:	b2db      	uxtb	r3, r3
 800f142:	f003 0303 	and.w	r3, r3, #3
 800f146:	2b00      	cmp	r3, #0
 800f148:	d001      	beq.n	800f14e <tcp_receive+0x966>
 800f14a:	2301      	movs	r3, #1
 800f14c:	e000      	b.n	800f150 <tcp_receive+0x968>
 800f14e:	2300      	movs	r3, #0
 800f150:	4423      	add	r3, r4
 800f152:	b29a      	uxth	r2, r3
 800f154:	4b65      	ldr	r3, [pc, #404]	; (800f2ec <tcp_receive+0xb04>)
 800f156:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f158:	4b64      	ldr	r3, [pc, #400]	; (800f2ec <tcp_receive+0xb04>)
 800f15a:	881b      	ldrh	r3, [r3, #0]
 800f15c:	461a      	mov	r2, r3
 800f15e:	4b64      	ldr	r3, [pc, #400]	; (800f2f0 <tcp_receive+0xb08>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	441a      	add	r2, r3
 800f164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d006      	beq.n	800f17c <tcp_receive+0x994>
 800f16e:	4b62      	ldr	r3, [pc, #392]	; (800f2f8 <tcp_receive+0xb10>)
 800f170:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800f174:	4961      	ldr	r1, [pc, #388]	; (800f2fc <tcp_receive+0xb14>)
 800f176:	4862      	ldr	r0, [pc, #392]	; (800f300 <tcp_receive+0xb18>)
 800f178:	f007 fbb6 	bl	80168e8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f180:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f182:	4b5a      	ldr	r3, [pc, #360]	; (800f2ec <tcp_receive+0xb04>)
 800f184:	881b      	ldrh	r3, [r3, #0]
 800f186:	461a      	mov	r2, r3
 800f188:	4b59      	ldr	r3, [pc, #356]	; (800f2f0 <tcp_receive+0xb08>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	441a      	add	r2, r3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f196:	4b55      	ldr	r3, [pc, #340]	; (800f2ec <tcp_receive+0xb04>)
 800f198:	881b      	ldrh	r3, [r3, #0]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d206      	bcs.n	800f1ac <tcp_receive+0x9c4>
 800f19e:	4b56      	ldr	r3, [pc, #344]	; (800f2f8 <tcp_receive+0xb10>)
 800f1a0:	f240 6207 	movw	r2, #1543	; 0x607
 800f1a4:	4957      	ldr	r1, [pc, #348]	; (800f304 <tcp_receive+0xb1c>)
 800f1a6:	4856      	ldr	r0, [pc, #344]	; (800f300 <tcp_receive+0xb18>)
 800f1a8:	f007 fb9e 	bl	80168e8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f1b0:	4b4e      	ldr	r3, [pc, #312]	; (800f2ec <tcp_receive+0xb04>)
 800f1b2:	881b      	ldrh	r3, [r3, #0]
 800f1b4:	1ad3      	subs	r3, r2, r3
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f7fc fe9b 	bl	800bef8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f1c2:	4b4c      	ldr	r3, [pc, #304]	; (800f2f4 <tcp_receive+0xb0c>)
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	891b      	ldrh	r3, [r3, #8]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d006      	beq.n	800f1da <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f1cc:	4b49      	ldr	r3, [pc, #292]	; (800f2f4 <tcp_receive+0xb0c>)
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	4a4d      	ldr	r2, [pc, #308]	; (800f308 <tcp_receive+0xb20>)
 800f1d2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f1d4:	4b47      	ldr	r3, [pc, #284]	; (800f2f4 <tcp_receive+0xb0c>)
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f1da:	4b46      	ldr	r3, [pc, #280]	; (800f2f4 <tcp_receive+0xb0c>)
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	899b      	ldrh	r3, [r3, #12]
 800f1e0:	b29b      	uxth	r3, r3
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7fa fb82 	bl	80098ec <lwip_htons>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	f003 0301 	and.w	r3, r3, #1
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	f000 80b8 	beq.w	800f366 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f1f6:	4b45      	ldr	r3, [pc, #276]	; (800f30c <tcp_receive+0xb24>)
 800f1f8:	781b      	ldrb	r3, [r3, #0]
 800f1fa:	f043 0320 	orr.w	r3, r3, #32
 800f1fe:	b2da      	uxtb	r2, r3
 800f200:	4b42      	ldr	r3, [pc, #264]	; (800f30c <tcp_receive+0xb24>)
 800f202:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f204:	e0af      	b.n	800f366 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f20a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	685b      	ldr	r3, [r3, #4]
 800f214:	4a36      	ldr	r2, [pc, #216]	; (800f2f0 <tcp_receive+0xb08>)
 800f216:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	891b      	ldrh	r3, [r3, #8]
 800f21c:	461c      	mov	r4, r3
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	68db      	ldr	r3, [r3, #12]
 800f222:	899b      	ldrh	r3, [r3, #12]
 800f224:	b29b      	uxth	r3, r3
 800f226:	4618      	mov	r0, r3
 800f228:	f7fa fb60 	bl	80098ec <lwip_htons>
 800f22c:	4603      	mov	r3, r0
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	f003 0303 	and.w	r3, r3, #3
 800f234:	2b00      	cmp	r3, #0
 800f236:	d001      	beq.n	800f23c <tcp_receive+0xa54>
 800f238:	2301      	movs	r3, #1
 800f23a:	e000      	b.n	800f23e <tcp_receive+0xa56>
 800f23c:	2300      	movs	r3, #0
 800f23e:	191a      	adds	r2, r3, r4
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f244:	441a      	add	r2, r3
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f24e:	461c      	mov	r4, r3
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	891b      	ldrh	r3, [r3, #8]
 800f254:	461d      	mov	r5, r3
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	68db      	ldr	r3, [r3, #12]
 800f25a:	899b      	ldrh	r3, [r3, #12]
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fa fb44 	bl	80098ec <lwip_htons>
 800f264:	4603      	mov	r3, r0
 800f266:	b2db      	uxtb	r3, r3
 800f268:	f003 0303 	and.w	r3, r3, #3
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d001      	beq.n	800f274 <tcp_receive+0xa8c>
 800f270:	2301      	movs	r3, #1
 800f272:	e000      	b.n	800f276 <tcp_receive+0xa8e>
 800f274:	2300      	movs	r3, #0
 800f276:	442b      	add	r3, r5
 800f278:	429c      	cmp	r4, r3
 800f27a:	d206      	bcs.n	800f28a <tcp_receive+0xaa2>
 800f27c:	4b1e      	ldr	r3, [pc, #120]	; (800f2f8 <tcp_receive+0xb10>)
 800f27e:	f240 622c 	movw	r2, #1580	; 0x62c
 800f282:	4923      	ldr	r1, [pc, #140]	; (800f310 <tcp_receive+0xb28>)
 800f284:	481e      	ldr	r0, [pc, #120]	; (800f300 <tcp_receive+0xb18>)
 800f286:	f007 fb2f 	bl	80168e8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	891b      	ldrh	r3, [r3, #8]
 800f28e:	461c      	mov	r4, r3
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	899b      	ldrh	r3, [r3, #12]
 800f296:	b29b      	uxth	r3, r3
 800f298:	4618      	mov	r0, r3
 800f29a:	f7fa fb27 	bl	80098ec <lwip_htons>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	f003 0303 	and.w	r3, r3, #3
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d001      	beq.n	800f2ae <tcp_receive+0xac6>
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e000      	b.n	800f2b0 <tcp_receive+0xac8>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	1919      	adds	r1, r3, r4
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f2b6:	b28b      	uxth	r3, r1
 800f2b8:	1ad3      	subs	r3, r2, r3
 800f2ba:	b29a      	uxth	r2, r3
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f7fc fe19 	bl	800bef8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	891b      	ldrh	r3, [r3, #8]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d028      	beq.n	800f322 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f2d0:	4b0d      	ldr	r3, [pc, #52]	; (800f308 <tcp_receive+0xb20>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d01d      	beq.n	800f314 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f2d8:	4b0b      	ldr	r3, [pc, #44]	; (800f308 <tcp_receive+0xb20>)
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	685b      	ldr	r3, [r3, #4]
 800f2e0:	4619      	mov	r1, r3
 800f2e2:	4610      	mov	r0, r2
 800f2e4:	f7fb ffba 	bl	800b25c <pbuf_cat>
 800f2e8:	e018      	b.n	800f31c <tcp_receive+0xb34>
 800f2ea:	bf00      	nop
 800f2ec:	20010282 	.word	0x20010282
 800f2f0:	20010278 	.word	0x20010278
 800f2f4:	20010258 	.word	0x20010258
 800f2f8:	0801915c 	.word	0x0801915c
 800f2fc:	0801953c 	.word	0x0801953c
 800f300:	080191a8 	.word	0x080191a8
 800f304:	08019578 	.word	0x08019578
 800f308:	20010288 	.word	0x20010288
 800f30c:	20010285 	.word	0x20010285
 800f310:	08019598 	.word	0x08019598
            } else {
              recv_data = cseg->p;
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	685b      	ldr	r3, [r3, #4]
 800f318:	4a70      	ldr	r2, [pc, #448]	; (800f4dc <tcp_receive+0xcf4>)
 800f31a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	2200      	movs	r2, #0
 800f320:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	899b      	ldrh	r3, [r3, #12]
 800f328:	b29b      	uxth	r3, r3
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fa fade 	bl	80098ec <lwip_htons>
 800f330:	4603      	mov	r3, r0
 800f332:	b2db      	uxtb	r3, r3
 800f334:	f003 0301 	and.w	r3, r3, #1
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d00d      	beq.n	800f358 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f33c:	4b68      	ldr	r3, [pc, #416]	; (800f4e0 <tcp_receive+0xcf8>)
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	f043 0320 	orr.w	r3, r3, #32
 800f344:	b2da      	uxtb	r2, r3
 800f346:	4b66      	ldr	r3, [pc, #408]	; (800f4e0 <tcp_receive+0xcf8>)
 800f348:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	7d1b      	ldrb	r3, [r3, #20]
 800f34e:	2b04      	cmp	r3, #4
 800f350:	d102      	bne.n	800f358 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2207      	movs	r2, #7
 800f356:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	681a      	ldr	r2, [r3, #0]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f360:	68b8      	ldr	r0, [r7, #8]
 800f362:	f7fd faeb 	bl	800c93c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d008      	beq.n	800f380 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	685a      	ldr	r2, [r3, #4]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f37a:	429a      	cmp	r2, r3
 800f37c:	f43f af43 	beq.w	800f206 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	8b5b      	ldrh	r3, [r3, #26]
 800f384:	f003 0301 	and.w	r3, r3, #1
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d00e      	beq.n	800f3aa <tcp_receive+0xbc2>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	8b5b      	ldrh	r3, [r3, #26]
 800f390:	f023 0301 	bic.w	r3, r3, #1
 800f394:	b29a      	uxth	r2, r3
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	835a      	strh	r2, [r3, #26]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	8b5b      	ldrh	r3, [r3, #26]
 800f39e:	f043 0302 	orr.w	r3, r3, #2
 800f3a2:	b29a      	uxth	r2, r3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f3a8:	e188      	b.n	800f6bc <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	8b5b      	ldrh	r3, [r3, #26]
 800f3ae:	f043 0301 	orr.w	r3, r3, #1
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f3b8:	e180      	b.n	800f6bc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d106      	bne.n	800f3d0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f3c2:	4848      	ldr	r0, [pc, #288]	; (800f4e4 <tcp_receive+0xcfc>)
 800f3c4:	f7fd faf0 	bl	800c9a8 <tcp_seg_copy>
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	675a      	str	r2, [r3, #116]	; 0x74
 800f3ce:	e16d      	b.n	800f6ac <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f3da:	e157      	b.n	800f68c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3de:	68db      	ldr	r3, [r3, #12]
 800f3e0:	685a      	ldr	r2, [r3, #4]
 800f3e2:	4b41      	ldr	r3, [pc, #260]	; (800f4e8 <tcp_receive+0xd00>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d11d      	bne.n	800f426 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f3ea:	4b3e      	ldr	r3, [pc, #248]	; (800f4e4 <tcp_receive+0xcfc>)
 800f3ec:	891a      	ldrh	r2, [r3, #8]
 800f3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f0:	891b      	ldrh	r3, [r3, #8]
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	f240 814f 	bls.w	800f696 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f3f8:	483a      	ldr	r0, [pc, #232]	; (800f4e4 <tcp_receive+0xcfc>)
 800f3fa:	f7fd fad5 	bl	800c9a8 <tcp_seg_copy>
 800f3fe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	2b00      	cmp	r3, #0
 800f404:	f000 8149 	beq.w	800f69a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d003      	beq.n	800f416 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f410:	697a      	ldr	r2, [r7, #20]
 800f412:	601a      	str	r2, [r3, #0]
 800f414:	e002      	b.n	800f41c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	697a      	ldr	r2, [r7, #20]
 800f41a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f41c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f41e:	6978      	ldr	r0, [r7, #20]
 800f420:	f7ff f8de 	bl	800e5e0 <tcp_oos_insert_segment>
                }
                break;
 800f424:	e139      	b.n	800f69a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d117      	bne.n	800f45c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f42c:	4b2e      	ldr	r3, [pc, #184]	; (800f4e8 <tcp_receive+0xd00>)
 800f42e:	681a      	ldr	r2, [r3, #0]
 800f430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f432:	68db      	ldr	r3, [r3, #12]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	1ad3      	subs	r3, r2, r3
 800f438:	2b00      	cmp	r3, #0
 800f43a:	da57      	bge.n	800f4ec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f43c:	4829      	ldr	r0, [pc, #164]	; (800f4e4 <tcp_receive+0xcfc>)
 800f43e:	f7fd fab3 	bl	800c9a8 <tcp_seg_copy>
 800f442:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f444:	69bb      	ldr	r3, [r7, #24]
 800f446:	2b00      	cmp	r3, #0
 800f448:	f000 8129 	beq.w	800f69e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	69ba      	ldr	r2, [r7, #24]
 800f450:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f452:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f454:	69b8      	ldr	r0, [r7, #24]
 800f456:	f7ff f8c3 	bl	800e5e0 <tcp_oos_insert_segment>
                  }
                  break;
 800f45a:	e120      	b.n	800f69e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f45c:	4b22      	ldr	r3, [pc, #136]	; (800f4e8 <tcp_receive+0xd00>)
 800f45e:	681a      	ldr	r2, [r3, #0]
 800f460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	1ad3      	subs	r3, r2, r3
 800f468:	3b01      	subs	r3, #1
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	db3e      	blt.n	800f4ec <tcp_receive+0xd04>
 800f46e:	4b1e      	ldr	r3, [pc, #120]	; (800f4e8 <tcp_receive+0xd00>)
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f474:	68db      	ldr	r3, [r3, #12]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	1ad3      	subs	r3, r2, r3
 800f47a:	3301      	adds	r3, #1
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	dc35      	bgt.n	800f4ec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f480:	4818      	ldr	r0, [pc, #96]	; (800f4e4 <tcp_receive+0xcfc>)
 800f482:	f7fd fa91 	bl	800c9a8 <tcp_seg_copy>
 800f486:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	f000 8109 	beq.w	800f6a2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f498:	8912      	ldrh	r2, [r2, #8]
 800f49a:	441a      	add	r2, r3
 800f49c:	4b12      	ldr	r3, [pc, #72]	; (800f4e8 <tcp_receive+0xd00>)
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	1ad3      	subs	r3, r2, r3
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	dd12      	ble.n	800f4cc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f4a6:	4b10      	ldr	r3, [pc, #64]	; (800f4e8 <tcp_receive+0xd00>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	b29a      	uxth	r2, r3
 800f4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ae:	68db      	ldr	r3, [r3, #12]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	b29b      	uxth	r3, r3
 800f4b4:	1ad3      	subs	r3, r2, r3
 800f4b6:	b29a      	uxth	r2, r3
 800f4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4be:	685a      	ldr	r2, [r3, #4]
 800f4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4c2:	891b      	ldrh	r3, [r3, #8]
 800f4c4:	4619      	mov	r1, r3
 800f4c6:	4610      	mov	r0, r2
 800f4c8:	f7fb fc74 	bl	800adb4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ce:	69fa      	ldr	r2, [r7, #28]
 800f4d0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f4d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f4d4:	69f8      	ldr	r0, [r7, #28]
 800f4d6:	f7ff f883 	bl	800e5e0 <tcp_oos_insert_segment>
                  }
                  break;
 800f4da:	e0e2      	b.n	800f6a2 <tcp_receive+0xeba>
 800f4dc:	20010288 	.word	0x20010288
 800f4e0:	20010285 	.word	0x20010285
 800f4e4:	20010258 	.word	0x20010258
 800f4e8:	20010278 	.word	0x20010278
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	f040 80c6 	bne.w	800f686 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f4fa:	4b80      	ldr	r3, [pc, #512]	; (800f6fc <tcp_receive+0xf14>)
 800f4fc:	681a      	ldr	r2, [r3, #0]
 800f4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	685b      	ldr	r3, [r3, #4]
 800f504:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f506:	2b00      	cmp	r3, #0
 800f508:	f340 80bd 	ble.w	800f686 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	899b      	ldrh	r3, [r3, #12]
 800f512:	b29b      	uxth	r3, r3
 800f514:	4618      	mov	r0, r3
 800f516:	f7fa f9e9 	bl	80098ec <lwip_htons>
 800f51a:	4603      	mov	r3, r0
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	f003 0301 	and.w	r3, r3, #1
 800f522:	2b00      	cmp	r3, #0
 800f524:	f040 80bf 	bne.w	800f6a6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f528:	4875      	ldr	r0, [pc, #468]	; (800f700 <tcp_receive+0xf18>)
 800f52a:	f7fd fa3d 	bl	800c9a8 <tcp_seg_copy>
 800f52e:	4602      	mov	r2, r0
 800f530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f532:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f000 80b6 	beq.w	800f6aa <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f546:	8912      	ldrh	r2, [r2, #8]
 800f548:	441a      	add	r2, r3
 800f54a:	4b6c      	ldr	r3, [pc, #432]	; (800f6fc <tcp_receive+0xf14>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	1ad3      	subs	r3, r2, r3
 800f550:	2b00      	cmp	r3, #0
 800f552:	dd12      	ble.n	800f57a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f554:	4b69      	ldr	r3, [pc, #420]	; (800f6fc <tcp_receive+0xf14>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	b29a      	uxth	r2, r3
 800f55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55c:	68db      	ldr	r3, [r3, #12]
 800f55e:	685b      	ldr	r3, [r3, #4]
 800f560:	b29b      	uxth	r3, r3
 800f562:	1ad3      	subs	r3, r2, r3
 800f564:	b29a      	uxth	r2, r3
 800f566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f568:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56c:	685a      	ldr	r2, [r3, #4]
 800f56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f570:	891b      	ldrh	r3, [r3, #8]
 800f572:	4619      	mov	r1, r3
 800f574:	4610      	mov	r0, r2
 800f576:	f7fb fc1d 	bl	800adb4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f57a:	4b62      	ldr	r3, [pc, #392]	; (800f704 <tcp_receive+0xf1c>)
 800f57c:	881b      	ldrh	r3, [r3, #0]
 800f57e:	461a      	mov	r2, r3
 800f580:	4b5e      	ldr	r3, [pc, #376]	; (800f6fc <tcp_receive+0xf14>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	441a      	add	r2, r3
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f58a:	6879      	ldr	r1, [r7, #4]
 800f58c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f58e:	440b      	add	r3, r1
 800f590:	1ad3      	subs	r3, r2, r3
 800f592:	2b00      	cmp	r3, #0
 800f594:	f340 8089 	ble.w	800f6aa <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	68db      	ldr	r3, [r3, #12]
 800f59e:	899b      	ldrh	r3, [r3, #12]
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fa f9a2 	bl	80098ec <lwip_htons>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	f003 0301 	and.w	r3, r3, #1
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d022      	beq.n	800f5fa <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	899b      	ldrh	r3, [r3, #12]
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	b21b      	sxth	r3, r3
 800f5c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f5c4:	b21c      	sxth	r4, r3
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	899b      	ldrh	r3, [r3, #12]
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7fa f98b 	bl	80098ec <lwip_htons>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	b2db      	uxtb	r3, r3
 800f5da:	b29b      	uxth	r3, r3
 800f5dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fa f982 	bl	80098ec <lwip_htons>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	b21b      	sxth	r3, r3
 800f5ec:	4323      	orrs	r3, r4
 800f5ee:	b21a      	sxth	r2, r3
 800f5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	b292      	uxth	r2, r2
 800f5f8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5fe:	b29a      	uxth	r2, r3
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f604:	4413      	add	r3, r2
 800f606:	b299      	uxth	r1, r3
 800f608:	4b3c      	ldr	r3, [pc, #240]	; (800f6fc <tcp_receive+0xf14>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	b29a      	uxth	r2, r3
 800f60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	1a8a      	subs	r2, r1, r2
 800f614:	b292      	uxth	r2, r2
 800f616:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	685a      	ldr	r2, [r3, #4]
 800f61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	891b      	ldrh	r3, [r3, #8]
 800f624:	4619      	mov	r1, r3
 800f626:	4610      	mov	r0, r2
 800f628:	f7fb fbc4 	bl	800adb4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	891c      	ldrh	r4, [r3, #8]
 800f632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	68db      	ldr	r3, [r3, #12]
 800f638:	899b      	ldrh	r3, [r3, #12]
 800f63a:	b29b      	uxth	r3, r3
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fa f955 	bl	80098ec <lwip_htons>
 800f642:	4603      	mov	r3, r0
 800f644:	b2db      	uxtb	r3, r3
 800f646:	f003 0303 	and.w	r3, r3, #3
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d001      	beq.n	800f652 <tcp_receive+0xe6a>
 800f64e:	2301      	movs	r3, #1
 800f650:	e000      	b.n	800f654 <tcp_receive+0xe6c>
 800f652:	2300      	movs	r3, #0
 800f654:	4423      	add	r3, r4
 800f656:	b29a      	uxth	r2, r3
 800f658:	4b2a      	ldr	r3, [pc, #168]	; (800f704 <tcp_receive+0xf1c>)
 800f65a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f65c:	4b29      	ldr	r3, [pc, #164]	; (800f704 <tcp_receive+0xf1c>)
 800f65e:	881b      	ldrh	r3, [r3, #0]
 800f660:	461a      	mov	r2, r3
 800f662:	4b26      	ldr	r3, [pc, #152]	; (800f6fc <tcp_receive+0xf14>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	441a      	add	r2, r3
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f66c:	6879      	ldr	r1, [r7, #4]
 800f66e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f670:	440b      	add	r3, r1
 800f672:	429a      	cmp	r2, r3
 800f674:	d019      	beq.n	800f6aa <tcp_receive+0xec2>
 800f676:	4b24      	ldr	r3, [pc, #144]	; (800f708 <tcp_receive+0xf20>)
 800f678:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f67c:	4923      	ldr	r1, [pc, #140]	; (800f70c <tcp_receive+0xf24>)
 800f67e:	4824      	ldr	r0, [pc, #144]	; (800f710 <tcp_receive+0xf28>)
 800f680:	f007 f932 	bl	80168e8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f684:	e011      	b.n	800f6aa <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	63bb      	str	r3, [r7, #56]	; 0x38
 800f68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f47f aea4 	bne.w	800f3dc <tcp_receive+0xbf4>
 800f694:	e00a      	b.n	800f6ac <tcp_receive+0xec4>
                break;
 800f696:	bf00      	nop
 800f698:	e008      	b.n	800f6ac <tcp_receive+0xec4>
                break;
 800f69a:	bf00      	nop
 800f69c:	e006      	b.n	800f6ac <tcp_receive+0xec4>
                  break;
 800f69e:	bf00      	nop
 800f6a0:	e004      	b.n	800f6ac <tcp_receive+0xec4>
                  break;
 800f6a2:	bf00      	nop
 800f6a4:	e002      	b.n	800f6ac <tcp_receive+0xec4>
                  break;
 800f6a6:	bf00      	nop
 800f6a8:	e000      	b.n	800f6ac <tcp_receive+0xec4>
                break;
 800f6aa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f001 fe9b 	bl	80113e8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f6b2:	e003      	b.n	800f6bc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f001 fe97 	bl	80113e8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f6ba:	e01a      	b.n	800f6f2 <tcp_receive+0xf0a>
 800f6bc:	e019      	b.n	800f6f2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f6be:	4b0f      	ldr	r3, [pc, #60]	; (800f6fc <tcp_receive+0xf14>)
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c6:	1ad3      	subs	r3, r2, r3
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	db0a      	blt.n	800f6e2 <tcp_receive+0xefa>
 800f6cc:	4b0b      	ldr	r3, [pc, #44]	; (800f6fc <tcp_receive+0xf14>)
 800f6ce:	681a      	ldr	r2, [r3, #0]
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6d4:	6879      	ldr	r1, [r7, #4]
 800f6d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6d8:	440b      	add	r3, r1
 800f6da:	1ad3      	subs	r3, r2, r3
 800f6dc:	3301      	adds	r3, #1
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	dd07      	ble.n	800f6f2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	8b5b      	ldrh	r3, [r3, #26]
 800f6e6:	f043 0302 	orr.w	r3, r3, #2
 800f6ea:	b29a      	uxth	r2, r3
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f6f0:	e7ff      	b.n	800f6f2 <tcp_receive+0xf0a>
 800f6f2:	bf00      	nop
 800f6f4:	3750      	adds	r7, #80	; 0x50
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bdb0      	pop	{r4, r5, r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	20010278 	.word	0x20010278
 800f700:	20010258 	.word	0x20010258
 800f704:	20010282 	.word	0x20010282
 800f708:	0801915c 	.word	0x0801915c
 800f70c:	08019504 	.word	0x08019504
 800f710:	080191a8 	.word	0x080191a8

0800f714 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f71a:	4b15      	ldr	r3, [pc, #84]	; (800f770 <tcp_get_next_optbyte+0x5c>)
 800f71c:	881b      	ldrh	r3, [r3, #0]
 800f71e:	1c5a      	adds	r2, r3, #1
 800f720:	b291      	uxth	r1, r2
 800f722:	4a13      	ldr	r2, [pc, #76]	; (800f770 <tcp_get_next_optbyte+0x5c>)
 800f724:	8011      	strh	r1, [r2, #0]
 800f726:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f728:	4b12      	ldr	r3, [pc, #72]	; (800f774 <tcp_get_next_optbyte+0x60>)
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d004      	beq.n	800f73a <tcp_get_next_optbyte+0x26>
 800f730:	4b11      	ldr	r3, [pc, #68]	; (800f778 <tcp_get_next_optbyte+0x64>)
 800f732:	881b      	ldrh	r3, [r3, #0]
 800f734:	88fa      	ldrh	r2, [r7, #6]
 800f736:	429a      	cmp	r2, r3
 800f738:	d208      	bcs.n	800f74c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f73a:	4b10      	ldr	r3, [pc, #64]	; (800f77c <tcp_get_next_optbyte+0x68>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	3314      	adds	r3, #20
 800f740:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f742:	88fb      	ldrh	r3, [r7, #6]
 800f744:	683a      	ldr	r2, [r7, #0]
 800f746:	4413      	add	r3, r2
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	e00b      	b.n	800f764 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f74c:	88fb      	ldrh	r3, [r7, #6]
 800f74e:	b2da      	uxtb	r2, r3
 800f750:	4b09      	ldr	r3, [pc, #36]	; (800f778 <tcp_get_next_optbyte+0x64>)
 800f752:	881b      	ldrh	r3, [r3, #0]
 800f754:	b2db      	uxtb	r3, r3
 800f756:	1ad3      	subs	r3, r2, r3
 800f758:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f75a:	4b06      	ldr	r3, [pc, #24]	; (800f774 <tcp_get_next_optbyte+0x60>)
 800f75c:	681a      	ldr	r2, [r3, #0]
 800f75e:	797b      	ldrb	r3, [r7, #5]
 800f760:	4413      	add	r3, r2
 800f762:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f764:	4618      	mov	r0, r3
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr
 800f770:	20010274 	.word	0x20010274
 800f774:	20010270 	.word	0x20010270
 800f778:	2001026e 	.word	0x2001026e
 800f77c:	20010268 	.word	0x20010268

0800f780 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b084      	sub	sp, #16
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d106      	bne.n	800f79c <tcp_parseopt+0x1c>
 800f78e:	4b31      	ldr	r3, [pc, #196]	; (800f854 <tcp_parseopt+0xd4>)
 800f790:	f240 727d 	movw	r2, #1917	; 0x77d
 800f794:	4930      	ldr	r1, [pc, #192]	; (800f858 <tcp_parseopt+0xd8>)
 800f796:	4831      	ldr	r0, [pc, #196]	; (800f85c <tcp_parseopt+0xdc>)
 800f798:	f007 f8a6 	bl	80168e8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f79c:	4b30      	ldr	r3, [pc, #192]	; (800f860 <tcp_parseopt+0xe0>)
 800f79e:	881b      	ldrh	r3, [r3, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d053      	beq.n	800f84c <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f7a4:	4b2f      	ldr	r3, [pc, #188]	; (800f864 <tcp_parseopt+0xe4>)
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	801a      	strh	r2, [r3, #0]
 800f7aa:	e043      	b.n	800f834 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800f7ac:	f7ff ffb2 	bl	800f714 <tcp_get_next_optbyte>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f7b4:	7bfb      	ldrb	r3, [r7, #15]
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d03c      	beq.n	800f834 <tcp_parseopt+0xb4>
 800f7ba:	2b02      	cmp	r3, #2
 800f7bc:	d002      	beq.n	800f7c4 <tcp_parseopt+0x44>
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d03f      	beq.n	800f842 <tcp_parseopt+0xc2>
 800f7c2:	e026      	b.n	800f812 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f7c4:	f7ff ffa6 	bl	800f714 <tcp_get_next_optbyte>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	2b04      	cmp	r3, #4
 800f7cc:	d13b      	bne.n	800f846 <tcp_parseopt+0xc6>
 800f7ce:	4b25      	ldr	r3, [pc, #148]	; (800f864 <tcp_parseopt+0xe4>)
 800f7d0:	881b      	ldrh	r3, [r3, #0]
 800f7d2:	3302      	adds	r3, #2
 800f7d4:	4a22      	ldr	r2, [pc, #136]	; (800f860 <tcp_parseopt+0xe0>)
 800f7d6:	8812      	ldrh	r2, [r2, #0]
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	dc34      	bgt.n	800f846 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f7dc:	f7ff ff9a 	bl	800f714 <tcp_get_next_optbyte>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	021b      	lsls	r3, r3, #8
 800f7e6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f7e8:	f7ff ff94 	bl	800f714 <tcp_get_next_optbyte>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	b29a      	uxth	r2, r3
 800f7f0:	89bb      	ldrh	r3, [r7, #12]
 800f7f2:	4313      	orrs	r3, r2
 800f7f4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f7f6:	89bb      	ldrh	r3, [r7, #12]
 800f7f8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f7fc:	d804      	bhi.n	800f808 <tcp_parseopt+0x88>
 800f7fe:	89bb      	ldrh	r3, [r7, #12]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d001      	beq.n	800f808 <tcp_parseopt+0x88>
 800f804:	89ba      	ldrh	r2, [r7, #12]
 800f806:	e001      	b.n	800f80c <tcp_parseopt+0x8c>
 800f808:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f810:	e010      	b.n	800f834 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f812:	f7ff ff7f 	bl	800f714 <tcp_get_next_optbyte>
 800f816:	4603      	mov	r3, r0
 800f818:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f81a:	7afb      	ldrb	r3, [r7, #11]
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d914      	bls.n	800f84a <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f820:	7afb      	ldrb	r3, [r7, #11]
 800f822:	b29a      	uxth	r2, r3
 800f824:	4b0f      	ldr	r3, [pc, #60]	; (800f864 <tcp_parseopt+0xe4>)
 800f826:	881b      	ldrh	r3, [r3, #0]
 800f828:	4413      	add	r3, r2
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	3b02      	subs	r3, #2
 800f82e:	b29a      	uxth	r2, r3
 800f830:	4b0c      	ldr	r3, [pc, #48]	; (800f864 <tcp_parseopt+0xe4>)
 800f832:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f834:	4b0b      	ldr	r3, [pc, #44]	; (800f864 <tcp_parseopt+0xe4>)
 800f836:	881a      	ldrh	r2, [r3, #0]
 800f838:	4b09      	ldr	r3, [pc, #36]	; (800f860 <tcp_parseopt+0xe0>)
 800f83a:	881b      	ldrh	r3, [r3, #0]
 800f83c:	429a      	cmp	r2, r3
 800f83e:	d3b5      	bcc.n	800f7ac <tcp_parseopt+0x2c>
 800f840:	e004      	b.n	800f84c <tcp_parseopt+0xcc>
          return;
 800f842:	bf00      	nop
 800f844:	e002      	b.n	800f84c <tcp_parseopt+0xcc>
            return;
 800f846:	bf00      	nop
 800f848:	e000      	b.n	800f84c <tcp_parseopt+0xcc>
            return;
 800f84a:	bf00      	nop
      }
    }
  }
}
 800f84c:	3710      	adds	r7, #16
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	0801915c 	.word	0x0801915c
 800f858:	080195c0 	.word	0x080195c0
 800f85c:	080191a8 	.word	0x080191a8
 800f860:	2001026c 	.word	0x2001026c
 800f864:	20010274 	.word	0x20010274

0800f868 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f868:	b480      	push	{r7}
 800f86a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f86c:	4b05      	ldr	r3, [pc, #20]	; (800f884 <tcp_trigger_input_pcb_close+0x1c>)
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	f043 0310 	orr.w	r3, r3, #16
 800f874:	b2da      	uxtb	r2, r3
 800f876:	4b03      	ldr	r3, [pc, #12]	; (800f884 <tcp_trigger_input_pcb_close+0x1c>)
 800f878:	701a      	strb	r2, [r3, #0]
}
 800f87a:	bf00      	nop
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr
 800f884:	20010285 	.word	0x20010285

0800f888 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f888:	b580      	push	{r7, lr}
 800f88a:	b084      	sub	sp, #16
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	60b9      	str	r1, [r7, #8]
 800f892:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00a      	beq.n	800f8b0 <tcp_route+0x28>
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	7a1b      	ldrb	r3, [r3, #8]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d006      	beq.n	800f8b0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	7a1b      	ldrb	r3, [r3, #8]
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7fb f880 	bl	800a9ac <netif_get_by_index>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	e003      	b.n	800f8b8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f005 fcc9 	bl	8015248 <ip4_route>
 800f8b6:	4603      	mov	r3, r0
  }
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3710      	adds	r7, #16
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f8c0:	b590      	push	{r4, r7, lr}
 800f8c2:	b087      	sub	sp, #28
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	603b      	str	r3, [r7, #0]
 800f8cc:	4613      	mov	r3, r2
 800f8ce:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d105      	bne.n	800f8e2 <tcp_create_segment+0x22>
 800f8d6:	4b44      	ldr	r3, [pc, #272]	; (800f9e8 <tcp_create_segment+0x128>)
 800f8d8:	22a3      	movs	r2, #163	; 0xa3
 800f8da:	4944      	ldr	r1, [pc, #272]	; (800f9ec <tcp_create_segment+0x12c>)
 800f8dc:	4844      	ldr	r0, [pc, #272]	; (800f9f0 <tcp_create_segment+0x130>)
 800f8de:	f007 f803 	bl	80168e8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d105      	bne.n	800f8f4 <tcp_create_segment+0x34>
 800f8e8:	4b3f      	ldr	r3, [pc, #252]	; (800f9e8 <tcp_create_segment+0x128>)
 800f8ea:	22a4      	movs	r2, #164	; 0xa4
 800f8ec:	4941      	ldr	r1, [pc, #260]	; (800f9f4 <tcp_create_segment+0x134>)
 800f8ee:	4840      	ldr	r0, [pc, #256]	; (800f9f0 <tcp_create_segment+0x130>)
 800f8f0:	f006 fffa 	bl	80168e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f8f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	b2db      	uxtb	r3, r3
 800f8fc:	f003 0304 	and.w	r3, r3, #4
 800f900:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f902:	2003      	movs	r0, #3
 800f904:	f7fa fcde 	bl	800a2c4 <memp_malloc>
 800f908:	6138      	str	r0, [r7, #16]
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d104      	bne.n	800f91a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f910:	68b8      	ldr	r0, [r7, #8]
 800f912:	f7fb fbd5 	bl	800b0c0 <pbuf_free>
    return NULL;
 800f916:	2300      	movs	r3, #0
 800f918:	e061      	b.n	800f9de <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f920:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	2200      	movs	r2, #0
 800f926:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	68ba      	ldr	r2, [r7, #8]
 800f92c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	891a      	ldrh	r2, [r3, #8]
 800f932:	7dfb      	ldrb	r3, [r7, #23]
 800f934:	b29b      	uxth	r3, r3
 800f936:	429a      	cmp	r2, r3
 800f938:	d205      	bcs.n	800f946 <tcp_create_segment+0x86>
 800f93a:	4b2b      	ldr	r3, [pc, #172]	; (800f9e8 <tcp_create_segment+0x128>)
 800f93c:	22b0      	movs	r2, #176	; 0xb0
 800f93e:	492e      	ldr	r1, [pc, #184]	; (800f9f8 <tcp_create_segment+0x138>)
 800f940:	482b      	ldr	r0, [pc, #172]	; (800f9f0 <tcp_create_segment+0x130>)
 800f942:	f006 ffd1 	bl	80168e8 <iprintf>
  seg->len = p->tot_len - optlen;
 800f946:	68bb      	ldr	r3, [r7, #8]
 800f948:	891a      	ldrh	r2, [r3, #8]
 800f94a:	7dfb      	ldrb	r3, [r7, #23]
 800f94c:	b29b      	uxth	r3, r3
 800f94e:	1ad3      	subs	r3, r2, r3
 800f950:	b29a      	uxth	r2, r3
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f956:	2114      	movs	r1, #20
 800f958:	68b8      	ldr	r0, [r7, #8]
 800f95a:	f7fb fb1b 	bl	800af94 <pbuf_add_header>
 800f95e:	4603      	mov	r3, r0
 800f960:	2b00      	cmp	r3, #0
 800f962:	d004      	beq.n	800f96e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f964:	6938      	ldr	r0, [r7, #16]
 800f966:	f7fc ffe9 	bl	800c93c <tcp_seg_free>
    return NULL;
 800f96a:	2300      	movs	r3, #0
 800f96c:	e037      	b.n	800f9de <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	685a      	ldr	r2, [r3, #4]
 800f974:	693b      	ldr	r3, [r7, #16]
 800f976:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	8ada      	ldrh	r2, [r3, #22]
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	68dc      	ldr	r4, [r3, #12]
 800f980:	4610      	mov	r0, r2
 800f982:	f7f9 ffb3 	bl	80098ec <lwip_htons>
 800f986:	4603      	mov	r3, r0
 800f988:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	8b1a      	ldrh	r2, [r3, #24]
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	68dc      	ldr	r4, [r3, #12]
 800f992:	4610      	mov	r0, r2
 800f994:	f7f9 ffaa 	bl	80098ec <lwip_htons>
 800f998:	4603      	mov	r3, r0
 800f99a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	68dc      	ldr	r4, [r3, #12]
 800f9a0:	6838      	ldr	r0, [r7, #0]
 800f9a2:	f7f9 ffb8 	bl	8009916 <lwip_htonl>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f9aa:	7dfb      	ldrb	r3, [r7, #23]
 800f9ac:	089b      	lsrs	r3, r3, #2
 800f9ae:	b2db      	uxtb	r3, r3
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	3305      	adds	r3, #5
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	031b      	lsls	r3, r3, #12
 800f9b8:	b29a      	uxth	r2, r3
 800f9ba:	79fb      	ldrb	r3, [r7, #7]
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	4313      	orrs	r3, r2
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	68dc      	ldr	r4, [r3, #12]
 800f9c6:	4610      	mov	r0, r2
 800f9c8:	f7f9 ff90 	bl	80098ec <lwip_htons>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	749a      	strb	r2, [r3, #18]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	74da      	strb	r2, [r3, #19]
  return seg;
 800f9dc:	693b      	ldr	r3, [r7, #16]
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	371c      	adds	r7, #28
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd90      	pop	{r4, r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	080195dc 	.word	0x080195dc
 800f9ec:	08019610 	.word	0x08019610
 800f9f0:	08019630 	.word	0x08019630
 800f9f4:	08019658 	.word	0x08019658
 800f9f8:	0801967c 	.word	0x0801967c

0800f9fc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b086      	sub	sp, #24
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	607b      	str	r3, [r7, #4]
 800fa04:	4603      	mov	r3, r0
 800fa06:	73fb      	strb	r3, [r7, #15]
 800fa08:	460b      	mov	r3, r1
 800fa0a:	81bb      	strh	r3, [r7, #12]
 800fa0c:	4613      	mov	r3, r2
 800fa0e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800fa10:	89bb      	ldrh	r3, [r7, #12]
 800fa12:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d105      	bne.n	800fa26 <tcp_pbuf_prealloc+0x2a>
 800fa1a:	4b30      	ldr	r3, [pc, #192]	; (800fadc <tcp_pbuf_prealloc+0xe0>)
 800fa1c:	22e8      	movs	r2, #232	; 0xe8
 800fa1e:	4930      	ldr	r1, [pc, #192]	; (800fae0 <tcp_pbuf_prealloc+0xe4>)
 800fa20:	4830      	ldr	r0, [pc, #192]	; (800fae4 <tcp_pbuf_prealloc+0xe8>)
 800fa22:	f006 ff61 	bl	80168e8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800fa26:	6a3b      	ldr	r3, [r7, #32]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d105      	bne.n	800fa38 <tcp_pbuf_prealloc+0x3c>
 800fa2c:	4b2b      	ldr	r3, [pc, #172]	; (800fadc <tcp_pbuf_prealloc+0xe0>)
 800fa2e:	22e9      	movs	r2, #233	; 0xe9
 800fa30:	492d      	ldr	r1, [pc, #180]	; (800fae8 <tcp_pbuf_prealloc+0xec>)
 800fa32:	482c      	ldr	r0, [pc, #176]	; (800fae4 <tcp_pbuf_prealloc+0xe8>)
 800fa34:	f006 ff58 	bl	80168e8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800fa38:	89ba      	ldrh	r2, [r7, #12]
 800fa3a:	897b      	ldrh	r3, [r7, #10]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d221      	bcs.n	800fa84 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800fa40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fa44:	f003 0302 	and.w	r3, r3, #2
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d111      	bne.n	800fa70 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800fa4c:	6a3b      	ldr	r3, [r7, #32]
 800fa4e:	8b5b      	ldrh	r3, [r3, #26]
 800fa50:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d115      	bne.n	800fa84 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800fa58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d007      	beq.n	800fa70 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800fa60:	6a3b      	ldr	r3, [r7, #32]
 800fa62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d103      	bne.n	800fa70 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800fa68:	6a3b      	ldr	r3, [r7, #32]
 800fa6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d009      	beq.n	800fa84 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800fa70:	89bb      	ldrh	r3, [r7, #12]
 800fa72:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800fa76:	f023 0203 	bic.w	r2, r3, #3
 800fa7a:	897b      	ldrh	r3, [r7, #10]
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	bf28      	it	cs
 800fa80:	4613      	movcs	r3, r2
 800fa82:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800fa84:	8af9      	ldrh	r1, [r7, #22]
 800fa86:	7bfb      	ldrb	r3, [r7, #15]
 800fa88:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fb f837 	bl	800ab00 <pbuf_alloc>
 800fa92:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d101      	bne.n	800fa9e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	e019      	b.n	800fad2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d006      	beq.n	800fab4 <tcp_pbuf_prealloc+0xb8>
 800faa6:	4b0d      	ldr	r3, [pc, #52]	; (800fadc <tcp_pbuf_prealloc+0xe0>)
 800faa8:	f240 120b 	movw	r2, #267	; 0x10b
 800faac:	490f      	ldr	r1, [pc, #60]	; (800faec <tcp_pbuf_prealloc+0xf0>)
 800faae:	480d      	ldr	r0, [pc, #52]	; (800fae4 <tcp_pbuf_prealloc+0xe8>)
 800fab0:	f006 ff1a 	bl	80168e8 <iprintf>
  *oversize = p->len - length;
 800fab4:	693b      	ldr	r3, [r7, #16]
 800fab6:	895a      	ldrh	r2, [r3, #10]
 800fab8:	89bb      	ldrh	r3, [r7, #12]
 800faba:	1ad3      	subs	r3, r2, r3
 800fabc:	b29a      	uxth	r2, r3
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	89ba      	ldrh	r2, [r7, #12]
 800fac6:	811a      	strh	r2, [r3, #8]
 800fac8:	693b      	ldr	r3, [r7, #16]
 800faca:	891a      	ldrh	r2, [r3, #8]
 800facc:	693b      	ldr	r3, [r7, #16]
 800face:	815a      	strh	r2, [r3, #10]
  return p;
 800fad0:	693b      	ldr	r3, [r7, #16]
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3718      	adds	r7, #24
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	080195dc 	.word	0x080195dc
 800fae0:	08019694 	.word	0x08019694
 800fae4:	08019630 	.word	0x08019630
 800fae8:	080196b8 	.word	0x080196b8
 800faec:	080196d8 	.word	0x080196d8

0800faf0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b082      	sub	sp, #8
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	460b      	mov	r3, r1
 800fafa:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d106      	bne.n	800fb10 <tcp_write_checks+0x20>
 800fb02:	4b33      	ldr	r3, [pc, #204]	; (800fbd0 <tcp_write_checks+0xe0>)
 800fb04:	f240 1233 	movw	r2, #307	; 0x133
 800fb08:	4932      	ldr	r1, [pc, #200]	; (800fbd4 <tcp_write_checks+0xe4>)
 800fb0a:	4833      	ldr	r0, [pc, #204]	; (800fbd8 <tcp_write_checks+0xe8>)
 800fb0c:	f006 feec 	bl	80168e8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	7d1b      	ldrb	r3, [r3, #20]
 800fb14:	2b04      	cmp	r3, #4
 800fb16:	d00e      	beq.n	800fb36 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800fb1c:	2b07      	cmp	r3, #7
 800fb1e:	d00a      	beq.n	800fb36 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800fb24:	2b02      	cmp	r3, #2
 800fb26:	d006      	beq.n	800fb36 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800fb2c:	2b03      	cmp	r3, #3
 800fb2e:	d002      	beq.n	800fb36 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800fb30:	f06f 030a 	mvn.w	r3, #10
 800fb34:	e048      	b.n	800fbc8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800fb36:	887b      	ldrh	r3, [r7, #2]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d101      	bne.n	800fb40 <tcp_write_checks+0x50>
    return ERR_OK;
 800fb3c:	2300      	movs	r3, #0
 800fb3e:	e043      	b.n	800fbc8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fb46:	887a      	ldrh	r2, [r7, #2]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d909      	bls.n	800fb60 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	8b5b      	ldrh	r3, [r3, #26]
 800fb50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb54:	b29a      	uxth	r2, r3
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800fb5a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb5e:	e033      	b.n	800fbc8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb66:	2b08      	cmp	r3, #8
 800fb68:	d909      	bls.n	800fb7e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	8b5b      	ldrh	r3, [r3, #26]
 800fb6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb72:	b29a      	uxth	r2, r3
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800fb78:	f04f 33ff 	mov.w	r3, #4294967295
 800fb7c:	e024      	b.n	800fbc8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d00f      	beq.n	800fba8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d11a      	bne.n	800fbc6 <tcp_write_checks+0xd6>
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d116      	bne.n	800fbc6 <tcp_write_checks+0xd6>
 800fb98:	4b0d      	ldr	r3, [pc, #52]	; (800fbd0 <tcp_write_checks+0xe0>)
 800fb9a:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800fb9e:	490f      	ldr	r1, [pc, #60]	; (800fbdc <tcp_write_checks+0xec>)
 800fba0:	480d      	ldr	r0, [pc, #52]	; (800fbd8 <tcp_write_checks+0xe8>)
 800fba2:	f006 fea1 	bl	80168e8 <iprintf>
 800fba6:	e00e      	b.n	800fbc6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d103      	bne.n	800fbb8 <tcp_write_checks+0xc8>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d006      	beq.n	800fbc6 <tcp_write_checks+0xd6>
 800fbb8:	4b05      	ldr	r3, [pc, #20]	; (800fbd0 <tcp_write_checks+0xe0>)
 800fbba:	f240 1259 	movw	r2, #345	; 0x159
 800fbbe:	4908      	ldr	r1, [pc, #32]	; (800fbe0 <tcp_write_checks+0xf0>)
 800fbc0:	4805      	ldr	r0, [pc, #20]	; (800fbd8 <tcp_write_checks+0xe8>)
 800fbc2:	f006 fe91 	bl	80168e8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800fbc6:	2300      	movs	r3, #0
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3708      	adds	r7, #8
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}
 800fbd0:	080195dc 	.word	0x080195dc
 800fbd4:	080196ec 	.word	0x080196ec
 800fbd8:	08019630 	.word	0x08019630
 800fbdc:	0801970c 	.word	0x0801970c
 800fbe0:	08019748 	.word	0x08019748

0800fbe4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800fbe4:	b590      	push	{r4, r7, lr}
 800fbe6:	b09b      	sub	sp, #108	; 0x6c
 800fbe8:	af04      	add	r7, sp, #16
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	4611      	mov	r1, r2
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	80fb      	strh	r3, [r7, #6]
 800fbf6:	4613      	mov	r3, r2
 800fbf8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800fbfe:	2300      	movs	r3, #0
 800fc00:	653b      	str	r3, [r7, #80]	; 0x50
 800fc02:	2300      	movs	r3, #0
 800fc04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fc06:	2300      	movs	r3, #0
 800fc08:	64bb      	str	r3, [r7, #72]	; 0x48
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800fc0e:	2300      	movs	r3, #0
 800fc10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800fc14:	2300      	movs	r3, #0
 800fc16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800fc22:	2300      	movs	r3, #0
 800fc24:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d109      	bne.n	800fc40 <tcp_write+0x5c>
 800fc2c:	4ba5      	ldr	r3, [pc, #660]	; (800fec4 <tcp_write+0x2e0>)
 800fc2e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800fc32:	49a5      	ldr	r1, [pc, #660]	; (800fec8 <tcp_write+0x2e4>)
 800fc34:	48a5      	ldr	r0, [pc, #660]	; (800fecc <tcp_write+0x2e8>)
 800fc36:	f006 fe57 	bl	80168e8 <iprintf>
 800fc3a:	f06f 030f 	mvn.w	r3, #15
 800fc3e:	e32c      	b.n	801029a <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc46:	085b      	lsrs	r3, r3, #1
 800fc48:	b29a      	uxth	r2, r3
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	bf28      	it	cs
 800fc52:	4613      	movcs	r3, r2
 800fc54:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800fc56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d102      	bne.n	800fc62 <tcp_write+0x7e>
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc60:	e000      	b.n	800fc64 <tcp_write+0x80>
 800fc62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc64:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d109      	bne.n	800fc80 <tcp_write+0x9c>
 800fc6c:	4b95      	ldr	r3, [pc, #596]	; (800fec4 <tcp_write+0x2e0>)
 800fc6e:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800fc72:	4997      	ldr	r1, [pc, #604]	; (800fed0 <tcp_write+0x2ec>)
 800fc74:	4895      	ldr	r0, [pc, #596]	; (800fecc <tcp_write+0x2e8>)
 800fc76:	f006 fe37 	bl	80168e8 <iprintf>
 800fc7a:	f06f 030f 	mvn.w	r3, #15
 800fc7e:	e30c      	b.n	801029a <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800fc80:	88fb      	ldrh	r3, [r7, #6]
 800fc82:	4619      	mov	r1, r3
 800fc84:	68f8      	ldr	r0, [r7, #12]
 800fc86:	f7ff ff33 	bl	800faf0 <tcp_write_checks>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800fc90:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d002      	beq.n	800fc9e <tcp_write+0xba>
    return err;
 800fc98:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800fc9c:	e2fd      	b.n	801029a <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fca4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	f000 80f7 	beq.w	800fea6 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcbc:	653b      	str	r3, [r7, #80]	; 0x50
 800fcbe:	e002      	b.n	800fcc6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800fcc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fcc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1f8      	bne.n	800fcc0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800fcce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcd0:	7a9b      	ldrb	r3, [r3, #10]
 800fcd2:	009b      	lsls	r3, r3, #2
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	f003 0304 	and.w	r3, r3, #4
 800fcda:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800fcdc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fcde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fce0:	891b      	ldrh	r3, [r3, #8]
 800fce2:	4619      	mov	r1, r3
 800fce4:	8c3b      	ldrh	r3, [r7, #32]
 800fce6:	440b      	add	r3, r1
 800fce8:	429a      	cmp	r2, r3
 800fcea:	da06      	bge.n	800fcfa <tcp_write+0x116>
 800fcec:	4b75      	ldr	r3, [pc, #468]	; (800fec4 <tcp_write+0x2e0>)
 800fcee:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fcf2:	4978      	ldr	r1, [pc, #480]	; (800fed4 <tcp_write+0x2f0>)
 800fcf4:	4875      	ldr	r0, [pc, #468]	; (800fecc <tcp_write+0x2e8>)
 800fcf6:	f006 fdf7 	bl	80168e8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800fcfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcfc:	891a      	ldrh	r2, [r3, #8]
 800fcfe:	8c3b      	ldrh	r3, [r7, #32]
 800fd00:	4413      	add	r3, r2
 800fd02:	b29b      	uxth	r3, r3
 800fd04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fd06:	1ad3      	subs	r3, r2, r3
 800fd08:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd10:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800fd12:	8a7b      	ldrh	r3, [r7, #18]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d027      	beq.n	800fd68 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800fd18:	8a7b      	ldrh	r3, [r7, #18]
 800fd1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fd1c:	429a      	cmp	r2, r3
 800fd1e:	d206      	bcs.n	800fd2e <tcp_write+0x14a>
 800fd20:	4b68      	ldr	r3, [pc, #416]	; (800fec4 <tcp_write+0x2e0>)
 800fd22:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800fd26:	496c      	ldr	r1, [pc, #432]	; (800fed8 <tcp_write+0x2f4>)
 800fd28:	4868      	ldr	r0, [pc, #416]	; (800fecc <tcp_write+0x2e8>)
 800fd2a:	f006 fddd 	bl	80168e8 <iprintf>
      seg = last_unsent;
 800fd2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd30:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800fd32:	8a7b      	ldrh	r3, [r7, #18]
 800fd34:	88fa      	ldrh	r2, [r7, #6]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d901      	bls.n	800fd3e <tcp_write+0x15a>
 800fd3a:	8a7b      	ldrh	r3, [r7, #18]
 800fd3c:	e000      	b.n	800fd40 <tcp_write+0x15c>
 800fd3e:	88fb      	ldrh	r3, [r7, #6]
 800fd40:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fd42:	4293      	cmp	r3, r2
 800fd44:	bfa8      	it	ge
 800fd46:	4613      	movge	r3, r2
 800fd48:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800fd4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fd4e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fd50:	4413      	add	r3, r2
 800fd52:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800fd56:	8a7a      	ldrh	r2, [r7, #18]
 800fd58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fd5a:	1ad3      	subs	r3, r2, r3
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800fd60:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fd62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fd64:	1ad3      	subs	r3, r2, r3
 800fd66:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800fd68:	8a7b      	ldrh	r3, [r7, #18]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d00b      	beq.n	800fd86 <tcp_write+0x1a2>
 800fd6e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fd72:	88fb      	ldrh	r3, [r7, #6]
 800fd74:	429a      	cmp	r2, r3
 800fd76:	d006      	beq.n	800fd86 <tcp_write+0x1a2>
 800fd78:	4b52      	ldr	r3, [pc, #328]	; (800fec4 <tcp_write+0x2e0>)
 800fd7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd7e:	4957      	ldr	r1, [pc, #348]	; (800fedc <tcp_write+0x2f8>)
 800fd80:	4852      	ldr	r0, [pc, #328]	; (800fecc <tcp_write+0x2e8>)
 800fd82:	f006 fdb1 	bl	80168e8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800fd86:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fd8a:	88fb      	ldrh	r3, [r7, #6]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	f080 8168 	bcs.w	8010062 <tcp_write+0x47e>
 800fd92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	f000 8164 	beq.w	8010062 <tcp_write+0x47e>
 800fd9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd9c:	891b      	ldrh	r3, [r3, #8]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	f000 815f 	beq.w	8010062 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800fda4:	88fa      	ldrh	r2, [r7, #6]
 800fda6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fdaa:	1ad2      	subs	r2, r2, r3
 800fdac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	bfa8      	it	ge
 800fdb2:	4613      	movge	r3, r2
 800fdb4:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800fdb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdb8:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fdba:	797b      	ldrb	r3, [r7, #5]
 800fdbc:	f003 0301 	and.w	r3, r3, #1
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d027      	beq.n	800fe14 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800fdc4:	f107 0012 	add.w	r0, r7, #18
 800fdc8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fdca:	8bf9      	ldrh	r1, [r7, #30]
 800fdcc:	2301      	movs	r3, #1
 800fdce:	9302      	str	r3, [sp, #8]
 800fdd0:	797b      	ldrb	r3, [r7, #5]
 800fdd2:	9301      	str	r3, [sp, #4]
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	9300      	str	r3, [sp, #0]
 800fdd8:	4603      	mov	r3, r0
 800fdda:	2000      	movs	r0, #0
 800fddc:	f7ff fe0e 	bl	800f9fc <tcp_pbuf_prealloc>
 800fde0:	6578      	str	r0, [r7, #84]	; 0x54
 800fde2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	f000 8226 	beq.w	8010236 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800fdea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdec:	6858      	ldr	r0, [r3, #4]
 800fdee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fdf2:	68ba      	ldr	r2, [r7, #8]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	8bfa      	ldrh	r2, [r7, #30]
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	f006 fd48 	bl	801688e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800fdfe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fe00:	f7fb f9ec 	bl	800b1dc <pbuf_clen>
 800fe04:	4603      	mov	r3, r0
 800fe06:	461a      	mov	r2, r3
 800fe08:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fe0c:	4413      	add	r3, r2
 800fe0e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800fe12:	e041      	b.n	800fe98 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800fe14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe16:	685b      	ldr	r3, [r3, #4]
 800fe18:	637b      	str	r3, [r7, #52]	; 0x34
 800fe1a:	e002      	b.n	800fe22 <tcp_write+0x23e>
 800fe1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	637b      	str	r3, [r7, #52]	; 0x34
 800fe22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1f8      	bne.n	800fe1c <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800fe2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe2c:	7b1b      	ldrb	r3, [r3, #12]
 800fe2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d115      	bne.n	800fe62 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800fe36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe3c:	8952      	ldrh	r2, [r2, #10]
 800fe3e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800fe40:	68ba      	ldr	r2, [r7, #8]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d10d      	bne.n	800fe62 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800fe46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d006      	beq.n	800fe5c <tcp_write+0x278>
 800fe4e:	4b1d      	ldr	r3, [pc, #116]	; (800fec4 <tcp_write+0x2e0>)
 800fe50:	f240 2231 	movw	r2, #561	; 0x231
 800fe54:	4922      	ldr	r1, [pc, #136]	; (800fee0 <tcp_write+0x2fc>)
 800fe56:	481d      	ldr	r0, [pc, #116]	; (800fecc <tcp_write+0x2e8>)
 800fe58:	f006 fd46 	bl	80168e8 <iprintf>
          extendlen = seglen;
 800fe5c:	8bfb      	ldrh	r3, [r7, #30]
 800fe5e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800fe60:	e01a      	b.n	800fe98 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800fe62:	8bfb      	ldrh	r3, [r7, #30]
 800fe64:	2201      	movs	r2, #1
 800fe66:	4619      	mov	r1, r3
 800fe68:	2000      	movs	r0, #0
 800fe6a:	f7fa fe49 	bl	800ab00 <pbuf_alloc>
 800fe6e:	6578      	str	r0, [r7, #84]	; 0x54
 800fe70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	f000 81e1 	beq.w	801023a <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800fe78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe7c:	68ba      	ldr	r2, [r7, #8]
 800fe7e:	441a      	add	r2, r3
 800fe80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe82:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800fe84:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fe86:	f7fb f9a9 	bl	800b1dc <pbuf_clen>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	461a      	mov	r2, r3
 800fe8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fe92:	4413      	add	r3, r2
 800fe94:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800fe98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fe9c:	8bfb      	ldrh	r3, [r7, #30]
 800fe9e:	4413      	add	r3, r2
 800fea0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800fea4:	e0dd      	b.n	8010062 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800feac:	2b00      	cmp	r3, #0
 800feae:	f000 80d8 	beq.w	8010062 <tcp_write+0x47e>
 800feb2:	4b04      	ldr	r3, [pc, #16]	; (800fec4 <tcp_write+0x2e0>)
 800feb4:	f240 224b 	movw	r2, #587	; 0x24b
 800feb8:	490a      	ldr	r1, [pc, #40]	; (800fee4 <tcp_write+0x300>)
 800feba:	4804      	ldr	r0, [pc, #16]	; (800fecc <tcp_write+0x2e8>)
 800febc:	f006 fd14 	bl	80168e8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800fec0:	e0cf      	b.n	8010062 <tcp_write+0x47e>
 800fec2:	bf00      	nop
 800fec4:	080195dc 	.word	0x080195dc
 800fec8:	0801977c 	.word	0x0801977c
 800fecc:	08019630 	.word	0x08019630
 800fed0:	08019794 	.word	0x08019794
 800fed4:	080197c8 	.word	0x080197c8
 800fed8:	080197e0 	.word	0x080197e0
 800fedc:	08019800 	.word	0x08019800
 800fee0:	08019820 	.word	0x08019820
 800fee4:	0801984c 	.word	0x0801984c
    struct pbuf *p;
    u16_t left = len - pos;
 800fee8:	88fa      	ldrh	r2, [r7, #6]
 800feea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800feee:	1ad3      	subs	r3, r2, r3
 800fef0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800fef2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fefa:	1ad3      	subs	r3, r2, r3
 800fefc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800fefe:	8b7a      	ldrh	r2, [r7, #26]
 800ff00:	8bbb      	ldrh	r3, [r7, #28]
 800ff02:	4293      	cmp	r3, r2
 800ff04:	bf28      	it	cs
 800ff06:	4613      	movcs	r3, r2
 800ff08:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800ff0a:	797b      	ldrb	r3, [r7, #5]
 800ff0c:	f003 0301 	and.w	r3, r3, #1
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d036      	beq.n	800ff82 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800ff14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	8b3b      	ldrh	r3, [r7, #24]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	b299      	uxth	r1, r3
 800ff20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	bf0c      	ite	eq
 800ff26:	2301      	moveq	r3, #1
 800ff28:	2300      	movne	r3, #0
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	f107 0012 	add.w	r0, r7, #18
 800ff30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ff32:	9302      	str	r3, [sp, #8]
 800ff34:	797b      	ldrb	r3, [r7, #5]
 800ff36:	9301      	str	r3, [sp, #4]
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	9300      	str	r3, [sp, #0]
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	2036      	movs	r0, #54	; 0x36
 800ff40:	f7ff fd5c 	bl	800f9fc <tcp_pbuf_prealloc>
 800ff44:	6338      	str	r0, [r7, #48]	; 0x30
 800ff46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	f000 8178 	beq.w	801023e <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff50:	895b      	ldrh	r3, [r3, #10]
 800ff52:	8b3a      	ldrh	r2, [r7, #24]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d906      	bls.n	800ff66 <tcp_write+0x382>
 800ff58:	4b8c      	ldr	r3, [pc, #560]	; (801018c <tcp_write+0x5a8>)
 800ff5a:	f240 2267 	movw	r2, #615	; 0x267
 800ff5e:	498c      	ldr	r1, [pc, #560]	; (8010190 <tcp_write+0x5ac>)
 800ff60:	488c      	ldr	r0, [pc, #560]	; (8010194 <tcp_write+0x5b0>)
 800ff62:	f006 fcc1 	bl	80168e8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800ff66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff68:	685a      	ldr	r2, [r3, #4]
 800ff6a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ff6e:	18d0      	adds	r0, r2, r3
 800ff70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ff74:	68ba      	ldr	r2, [r7, #8]
 800ff76:	4413      	add	r3, r2
 800ff78:	8b3a      	ldrh	r2, [r7, #24]
 800ff7a:	4619      	mov	r1, r3
 800ff7c:	f006 fc87 	bl	801688e <memcpy>
 800ff80:	e02f      	b.n	800ffe2 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800ff82:	8a7b      	ldrh	r3, [r7, #18]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d006      	beq.n	800ff96 <tcp_write+0x3b2>
 800ff88:	4b80      	ldr	r3, [pc, #512]	; (801018c <tcp_write+0x5a8>)
 800ff8a:	f240 2271 	movw	r2, #625	; 0x271
 800ff8e:	4982      	ldr	r1, [pc, #520]	; (8010198 <tcp_write+0x5b4>)
 800ff90:	4880      	ldr	r0, [pc, #512]	; (8010194 <tcp_write+0x5b0>)
 800ff92:	f006 fca9 	bl	80168e8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800ff96:	8b3b      	ldrh	r3, [r7, #24]
 800ff98:	2201      	movs	r2, #1
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	2036      	movs	r0, #54	; 0x36
 800ff9e:	f7fa fdaf 	bl	800ab00 <pbuf_alloc>
 800ffa2:	6178      	str	r0, [r7, #20]
 800ffa4:	697b      	ldr	r3, [r7, #20]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f000 814b 	beq.w	8010242 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800ffac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ffb0:	68ba      	ldr	r2, [r7, #8]
 800ffb2:	441a      	add	r2, r3
 800ffb4:	697b      	ldr	r3, [r7, #20]
 800ffb6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ffb8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ffbc:	b29b      	uxth	r3, r3
 800ffbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	2036      	movs	r0, #54	; 0x36
 800ffc6:	f7fa fd9b 	bl	800ab00 <pbuf_alloc>
 800ffca:	6338      	str	r0, [r7, #48]	; 0x30
 800ffcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d103      	bne.n	800ffda <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800ffd2:	6978      	ldr	r0, [r7, #20]
 800ffd4:	f7fb f874 	bl	800b0c0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800ffd8:	e136      	b.n	8010248 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800ffda:	6979      	ldr	r1, [r7, #20]
 800ffdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffde:	f7fb f93d 	bl	800b25c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800ffe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffe4:	f7fb f8fa 	bl	800b1dc <pbuf_clen>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	461a      	mov	r2, r3
 800ffec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fff0:	4413      	add	r3, r2
 800fff2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800fff6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fffa:	2b09      	cmp	r3, #9
 800fffc:	d903      	bls.n	8010006 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800fffe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010000:	f7fb f85e 	bl	800b0c0 <pbuf_free>
      goto memerr;
 8010004:	e120      	b.n	8010248 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801000a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801000e:	441a      	add	r2, r3
 8010010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010014:	9300      	str	r3, [sp, #0]
 8010016:	4613      	mov	r3, r2
 8010018:	2200      	movs	r2, #0
 801001a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801001c:	68f8      	ldr	r0, [r7, #12]
 801001e:	f7ff fc4f 	bl	800f8c0 <tcp_create_segment>
 8010022:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010026:	2b00      	cmp	r3, #0
 8010028:	f000 810d 	beq.w	8010246 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801002c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801002e:	2b00      	cmp	r3, #0
 8010030:	d102      	bne.n	8010038 <tcp_write+0x454>
      queue = seg;
 8010032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010034:	647b      	str	r3, [r7, #68]	; 0x44
 8010036:	e00c      	b.n	8010052 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801003a:	2b00      	cmp	r3, #0
 801003c:	d106      	bne.n	801004c <tcp_write+0x468>
 801003e:	4b53      	ldr	r3, [pc, #332]	; (801018c <tcp_write+0x5a8>)
 8010040:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010044:	4955      	ldr	r1, [pc, #340]	; (801019c <tcp_write+0x5b8>)
 8010046:	4853      	ldr	r0, [pc, #332]	; (8010194 <tcp_write+0x5b0>)
 8010048:	f006 fc4e 	bl	80168e8 <iprintf>
      prev_seg->next = seg;
 801004c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801004e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010050:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010054:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010056:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801005a:	8b3b      	ldrh	r3, [r7, #24]
 801005c:	4413      	add	r3, r2
 801005e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010062:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010066:	88fb      	ldrh	r3, [r7, #6]
 8010068:	429a      	cmp	r2, r3
 801006a:	f4ff af3d 	bcc.w	800fee8 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801006e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010070:	2b00      	cmp	r3, #0
 8010072:	d02c      	beq.n	80100ce <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010076:	685b      	ldr	r3, [r3, #4]
 8010078:	62fb      	str	r3, [r7, #44]	; 0x2c
 801007a:	e01e      	b.n	80100ba <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 801007c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007e:	891a      	ldrh	r2, [r3, #8]
 8010080:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010082:	4413      	add	r3, r2
 8010084:	b29a      	uxth	r2, r3
 8010086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010088:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801008a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d110      	bne.n	80100b4 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010094:	685b      	ldr	r3, [r3, #4]
 8010096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010098:	8952      	ldrh	r2, [r2, #10]
 801009a:	4413      	add	r3, r2
 801009c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801009e:	68b9      	ldr	r1, [r7, #8]
 80100a0:	4618      	mov	r0, r3
 80100a2:	f006 fbf4 	bl	801688e <memcpy>
        p->len += oversize_used;
 80100a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a8:	895a      	ldrh	r2, [r3, #10]
 80100aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80100ac:	4413      	add	r3, r2
 80100ae:	b29a      	uxth	r2, r3
 80100b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80100b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80100ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d1dd      	bne.n	801007c <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 80100c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100c2:	891a      	ldrh	r2, [r3, #8]
 80100c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80100c6:	4413      	add	r3, r2
 80100c8:	b29a      	uxth	r2, r3
 80100ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100cc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80100ce:	8a7a      	ldrh	r2, [r7, #18]
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80100d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d018      	beq.n	801010e <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80100dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d106      	bne.n	80100f0 <tcp_write+0x50c>
 80100e2:	4b2a      	ldr	r3, [pc, #168]	; (801018c <tcp_write+0x5a8>)
 80100e4:	f240 22e1 	movw	r2, #737	; 0x2e1
 80100e8:	492d      	ldr	r1, [pc, #180]	; (80101a0 <tcp_write+0x5bc>)
 80100ea:	482a      	ldr	r0, [pc, #168]	; (8010194 <tcp_write+0x5b0>)
 80100ec:	f006 fbfc 	bl	80168e8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80100f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7fb f8b0 	bl	800b25c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80100fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100fe:	891a      	ldrh	r2, [r3, #8]
 8010100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010102:	891b      	ldrh	r3, [r3, #8]
 8010104:	4413      	add	r3, r2
 8010106:	b29a      	uxth	r2, r3
 8010108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801010a:	811a      	strh	r2, [r3, #8]
 801010c:	e037      	b.n	801017e <tcp_write+0x59a>
  } else if (extendlen > 0) {
 801010e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010110:	2b00      	cmp	r3, #0
 8010112:	d034      	beq.n	801017e <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010116:	2b00      	cmp	r3, #0
 8010118:	d003      	beq.n	8010122 <tcp_write+0x53e>
 801011a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d106      	bne.n	8010130 <tcp_write+0x54c>
 8010122:	4b1a      	ldr	r3, [pc, #104]	; (801018c <tcp_write+0x5a8>)
 8010124:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010128:	491e      	ldr	r1, [pc, #120]	; (80101a4 <tcp_write+0x5c0>)
 801012a:	481a      	ldr	r0, [pc, #104]	; (8010194 <tcp_write+0x5b0>)
 801012c:	f006 fbdc 	bl	80168e8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	62bb      	str	r3, [r7, #40]	; 0x28
 8010136:	e009      	b.n	801014c <tcp_write+0x568>
      p->tot_len += extendlen;
 8010138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801013a:	891a      	ldrh	r2, [r3, #8]
 801013c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801013e:	4413      	add	r3, r2
 8010140:	b29a      	uxth	r2, r3
 8010142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010144:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	62bb      	str	r3, [r7, #40]	; 0x28
 801014c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d1f1      	bne.n	8010138 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8010154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010156:	891a      	ldrh	r2, [r3, #8]
 8010158:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801015a:	4413      	add	r3, r2
 801015c:	b29a      	uxth	r2, r3
 801015e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010160:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010164:	895a      	ldrh	r2, [r3, #10]
 8010166:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010168:	4413      	add	r3, r2
 801016a:	b29a      	uxth	r2, r3
 801016c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801016e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010172:	891a      	ldrh	r2, [r3, #8]
 8010174:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010176:	4413      	add	r3, r2
 8010178:	b29a      	uxth	r2, r3
 801017a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801017c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801017e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010180:	2b00      	cmp	r3, #0
 8010182:	d111      	bne.n	80101a8 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010188:	66da      	str	r2, [r3, #108]	; 0x6c
 801018a:	e010      	b.n	80101ae <tcp_write+0x5ca>
 801018c:	080195dc 	.word	0x080195dc
 8010190:	0801987c 	.word	0x0801987c
 8010194:	08019630 	.word	0x08019630
 8010198:	080198bc 	.word	0x080198bc
 801019c:	080198cc 	.word	0x080198cc
 80101a0:	080198e0 	.word	0x080198e0
 80101a4:	08019918 	.word	0x08019918
  } else {
    last_unsent->next = queue;
 80101a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101ac:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80101b2:	88fb      	ldrh	r3, [r7, #6]
 80101b4:	441a      	add	r2, r3
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80101c0:	88fb      	ldrh	r3, [r7, #6]
 80101c2:	1ad3      	subs	r3, r2, r3
 80101c4:	b29a      	uxth	r2, r3
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80101d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d00e      	beq.n	80101fe <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d10a      	bne.n	80101fe <tcp_write+0x61a>
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d106      	bne.n	80101fe <tcp_write+0x61a>
 80101f0:	4b2c      	ldr	r3, [pc, #176]	; (80102a4 <tcp_write+0x6c0>)
 80101f2:	f240 3213 	movw	r2, #787	; 0x313
 80101f6:	492c      	ldr	r1, [pc, #176]	; (80102a8 <tcp_write+0x6c4>)
 80101f8:	482c      	ldr	r0, [pc, #176]	; (80102ac <tcp_write+0x6c8>)
 80101fa:	f006 fb75 	bl	80168e8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80101fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010200:	2b00      	cmp	r3, #0
 8010202:	d016      	beq.n	8010232 <tcp_write+0x64e>
 8010204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d012      	beq.n	8010232 <tcp_write+0x64e>
 801020c:	797b      	ldrb	r3, [r7, #5]
 801020e:	f003 0302 	and.w	r3, r3, #2
 8010212:	2b00      	cmp	r3, #0
 8010214:	d10d      	bne.n	8010232 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010218:	68db      	ldr	r3, [r3, #12]
 801021a:	899b      	ldrh	r3, [r3, #12]
 801021c:	b29c      	uxth	r4, r3
 801021e:	2008      	movs	r0, #8
 8010220:	f7f9 fb64 	bl	80098ec <lwip_htons>
 8010224:	4603      	mov	r3, r0
 8010226:	461a      	mov	r2, r3
 8010228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801022a:	68db      	ldr	r3, [r3, #12]
 801022c:	4322      	orrs	r2, r4
 801022e:	b292      	uxth	r2, r2
 8010230:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010232:	2300      	movs	r3, #0
 8010234:	e031      	b.n	801029a <tcp_write+0x6b6>
          goto memerr;
 8010236:	bf00      	nop
 8010238:	e006      	b.n	8010248 <tcp_write+0x664>
            goto memerr;
 801023a:	bf00      	nop
 801023c:	e004      	b.n	8010248 <tcp_write+0x664>
        goto memerr;
 801023e:	bf00      	nop
 8010240:	e002      	b.n	8010248 <tcp_write+0x664>
        goto memerr;
 8010242:	bf00      	nop
 8010244:	e000      	b.n	8010248 <tcp_write+0x664>
      goto memerr;
 8010246:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	8b5b      	ldrh	r3, [r3, #26]
 801024c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010250:	b29a      	uxth	r2, r3
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010258:	2b00      	cmp	r3, #0
 801025a:	d002      	beq.n	8010262 <tcp_write+0x67e>
    pbuf_free(concat_p);
 801025c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801025e:	f7fa ff2f 	bl	800b0c0 <pbuf_free>
  }
  if (queue != NULL) {
 8010262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010264:	2b00      	cmp	r3, #0
 8010266:	d002      	beq.n	801026e <tcp_write+0x68a>
    tcp_segs_free(queue);
 8010268:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801026a:	f7fc fb53 	bl	800c914 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010274:	2b00      	cmp	r3, #0
 8010276:	d00e      	beq.n	8010296 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801027c:	2b00      	cmp	r3, #0
 801027e:	d10a      	bne.n	8010296 <tcp_write+0x6b2>
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010284:	2b00      	cmp	r3, #0
 8010286:	d106      	bne.n	8010296 <tcp_write+0x6b2>
 8010288:	4b06      	ldr	r3, [pc, #24]	; (80102a4 <tcp_write+0x6c0>)
 801028a:	f44f 724a 	mov.w	r2, #808	; 0x328
 801028e:	4906      	ldr	r1, [pc, #24]	; (80102a8 <tcp_write+0x6c4>)
 8010290:	4806      	ldr	r0, [pc, #24]	; (80102ac <tcp_write+0x6c8>)
 8010292:	f006 fb29 	bl	80168e8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010296:	f04f 33ff 	mov.w	r3, #4294967295
}
 801029a:	4618      	mov	r0, r3
 801029c:	375c      	adds	r7, #92	; 0x5c
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd90      	pop	{r4, r7, pc}
 80102a2:	bf00      	nop
 80102a4:	080195dc 	.word	0x080195dc
 80102a8:	08019950 	.word	0x08019950
 80102ac:	08019630 	.word	0x08019630

080102b0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80102b0:	b590      	push	{r4, r7, lr}
 80102b2:	b08b      	sub	sp, #44	; 0x2c
 80102b4:	af02      	add	r7, sp, #8
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	460b      	mov	r3, r1
 80102ba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80102bc:	2300      	movs	r3, #0
 80102be:	61fb      	str	r3, [r7, #28]
 80102c0:	2300      	movs	r3, #0
 80102c2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80102c4:	2300      	movs	r3, #0
 80102c6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d106      	bne.n	80102dc <tcp_split_unsent_seg+0x2c>
 80102ce:	4b95      	ldr	r3, [pc, #596]	; (8010524 <tcp_split_unsent_seg+0x274>)
 80102d0:	f240 324b 	movw	r2, #843	; 0x34b
 80102d4:	4994      	ldr	r1, [pc, #592]	; (8010528 <tcp_split_unsent_seg+0x278>)
 80102d6:	4895      	ldr	r0, [pc, #596]	; (801052c <tcp_split_unsent_seg+0x27c>)
 80102d8:	f006 fb06 	bl	80168e8 <iprintf>

  useg = pcb->unsent;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102e0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d102      	bne.n	80102ee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80102e8:	f04f 33ff 	mov.w	r3, #4294967295
 80102ec:	e116      	b.n	801051c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80102ee:	887b      	ldrh	r3, [r7, #2]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d109      	bne.n	8010308 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80102f4:	4b8b      	ldr	r3, [pc, #556]	; (8010524 <tcp_split_unsent_seg+0x274>)
 80102f6:	f240 3253 	movw	r2, #851	; 0x353
 80102fa:	498d      	ldr	r1, [pc, #564]	; (8010530 <tcp_split_unsent_seg+0x280>)
 80102fc:	488b      	ldr	r0, [pc, #556]	; (801052c <tcp_split_unsent_seg+0x27c>)
 80102fe:	f006 faf3 	bl	80168e8 <iprintf>
    return ERR_VAL;
 8010302:	f06f 0305 	mvn.w	r3, #5
 8010306:	e109      	b.n	801051c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	891b      	ldrh	r3, [r3, #8]
 801030c:	887a      	ldrh	r2, [r7, #2]
 801030e:	429a      	cmp	r2, r3
 8010310:	d301      	bcc.n	8010316 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010312:	2300      	movs	r3, #0
 8010314:	e102      	b.n	801051c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801031a:	887a      	ldrh	r2, [r7, #2]
 801031c:	429a      	cmp	r2, r3
 801031e:	d906      	bls.n	801032e <tcp_split_unsent_seg+0x7e>
 8010320:	4b80      	ldr	r3, [pc, #512]	; (8010524 <tcp_split_unsent_seg+0x274>)
 8010322:	f240 325b 	movw	r2, #859	; 0x35b
 8010326:	4983      	ldr	r1, [pc, #524]	; (8010534 <tcp_split_unsent_seg+0x284>)
 8010328:	4880      	ldr	r0, [pc, #512]	; (801052c <tcp_split_unsent_seg+0x27c>)
 801032a:	f006 fadd 	bl	80168e8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	891b      	ldrh	r3, [r3, #8]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d106      	bne.n	8010344 <tcp_split_unsent_seg+0x94>
 8010336:	4b7b      	ldr	r3, [pc, #492]	; (8010524 <tcp_split_unsent_seg+0x274>)
 8010338:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801033c:	497e      	ldr	r1, [pc, #504]	; (8010538 <tcp_split_unsent_seg+0x288>)
 801033e:	487b      	ldr	r0, [pc, #492]	; (801052c <tcp_split_unsent_seg+0x27c>)
 8010340:	f006 fad2 	bl	80168e8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	7a9b      	ldrb	r3, [r3, #10]
 8010348:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801034a:	7bfb      	ldrb	r3, [r7, #15]
 801034c:	009b      	lsls	r3, r3, #2
 801034e:	b2db      	uxtb	r3, r3
 8010350:	f003 0304 	and.w	r3, r3, #4
 8010354:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	891a      	ldrh	r2, [r3, #8]
 801035a:	887b      	ldrh	r3, [r7, #2]
 801035c:	1ad3      	subs	r3, r2, r3
 801035e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010360:	7bbb      	ldrb	r3, [r7, #14]
 8010362:	b29a      	uxth	r2, r3
 8010364:	89bb      	ldrh	r3, [r7, #12]
 8010366:	4413      	add	r3, r2
 8010368:	b29b      	uxth	r3, r3
 801036a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801036e:	4619      	mov	r1, r3
 8010370:	2036      	movs	r0, #54	; 0x36
 8010372:	f7fa fbc5 	bl	800ab00 <pbuf_alloc>
 8010376:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	2b00      	cmp	r3, #0
 801037c:	f000 80b7 	beq.w	80104ee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	685b      	ldr	r3, [r3, #4]
 8010384:	891a      	ldrh	r2, [r3, #8]
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	891b      	ldrh	r3, [r3, #8]
 801038a:	1ad3      	subs	r3, r2, r3
 801038c:	b29a      	uxth	r2, r3
 801038e:	887b      	ldrh	r3, [r7, #2]
 8010390:	4413      	add	r3, r2
 8010392:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	6858      	ldr	r0, [r3, #4]
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	685a      	ldr	r2, [r3, #4]
 801039c:	7bbb      	ldrb	r3, [r7, #14]
 801039e:	18d1      	adds	r1, r2, r3
 80103a0:	897b      	ldrh	r3, [r7, #10]
 80103a2:	89ba      	ldrh	r2, [r7, #12]
 80103a4:	f7fb f892 	bl	800b4cc <pbuf_copy_partial>
 80103a8:	4603      	mov	r3, r0
 80103aa:	461a      	mov	r2, r3
 80103ac:	89bb      	ldrh	r3, [r7, #12]
 80103ae:	4293      	cmp	r3, r2
 80103b0:	f040 809f 	bne.w	80104f2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	68db      	ldr	r3, [r3, #12]
 80103b8:	899b      	ldrh	r3, [r3, #12]
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	4618      	mov	r0, r3
 80103be:	f7f9 fa95 	bl	80098ec <lwip_htons>
 80103c2:	4603      	mov	r3, r0
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103ca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80103cc:	2300      	movs	r3, #0
 80103ce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80103d0:	7efb      	ldrb	r3, [r7, #27]
 80103d2:	f003 0308 	and.w	r3, r3, #8
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d007      	beq.n	80103ea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80103da:	7efb      	ldrb	r3, [r7, #27]
 80103dc:	f023 0308 	bic.w	r3, r3, #8
 80103e0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80103e2:	7ebb      	ldrb	r3, [r7, #26]
 80103e4:	f043 0308 	orr.w	r3, r3, #8
 80103e8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80103ea:	7efb      	ldrb	r3, [r7, #27]
 80103ec:	f003 0301 	and.w	r3, r3, #1
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d007      	beq.n	8010404 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80103f4:	7efb      	ldrb	r3, [r7, #27]
 80103f6:	f023 0301 	bic.w	r3, r3, #1
 80103fa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80103fc:	7ebb      	ldrb	r3, [r7, #26]
 80103fe:	f043 0301 	orr.w	r3, r3, #1
 8010402:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	68db      	ldr	r3, [r3, #12]
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	4618      	mov	r0, r3
 801040c:	f7f9 fa83 	bl	8009916 <lwip_htonl>
 8010410:	4602      	mov	r2, r0
 8010412:	887b      	ldrh	r3, [r7, #2]
 8010414:	18d1      	adds	r1, r2, r3
 8010416:	7eba      	ldrb	r2, [r7, #26]
 8010418:	7bfb      	ldrb	r3, [r7, #15]
 801041a:	9300      	str	r3, [sp, #0]
 801041c:	460b      	mov	r3, r1
 801041e:	6939      	ldr	r1, [r7, #16]
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f7ff fa4d 	bl	800f8c0 <tcp_create_segment>
 8010426:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010428:	69fb      	ldr	r3, [r7, #28]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d063      	beq.n	80104f6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	4618      	mov	r0, r3
 8010434:	f7fa fed2 	bl	800b1dc <pbuf_clen>
 8010438:	4603      	mov	r3, r0
 801043a:	461a      	mov	r2, r3
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010442:	1a9b      	subs	r3, r3, r2
 8010444:	b29a      	uxth	r2, r3
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	6858      	ldr	r0, [r3, #4]
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	891a      	ldrh	r2, [r3, #8]
 8010456:	89bb      	ldrh	r3, [r7, #12]
 8010458:	1ad3      	subs	r3, r2, r3
 801045a:	b29b      	uxth	r3, r3
 801045c:	4619      	mov	r1, r3
 801045e:	f7fa fca9 	bl	800adb4 <pbuf_realloc>
  useg->len -= remainder;
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	891a      	ldrh	r2, [r3, #8]
 8010466:	89bb      	ldrh	r3, [r7, #12]
 8010468:	1ad3      	subs	r3, r2, r3
 801046a:	b29a      	uxth	r2, r3
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010470:	697b      	ldr	r3, [r7, #20]
 8010472:	68db      	ldr	r3, [r3, #12]
 8010474:	899b      	ldrh	r3, [r3, #12]
 8010476:	b29c      	uxth	r4, r3
 8010478:	7efb      	ldrb	r3, [r7, #27]
 801047a:	b29b      	uxth	r3, r3
 801047c:	4618      	mov	r0, r3
 801047e:	f7f9 fa35 	bl	80098ec <lwip_htons>
 8010482:	4603      	mov	r3, r0
 8010484:	461a      	mov	r2, r3
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	4322      	orrs	r2, r4
 801048c:	b292      	uxth	r2, r2
 801048e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	4618      	mov	r0, r3
 8010496:	f7fa fea1 	bl	800b1dc <pbuf_clen>
 801049a:	4603      	mov	r3, r0
 801049c:	461a      	mov	r2, r3
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104a4:	4413      	add	r3, r2
 80104a6:	b29a      	uxth	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80104ae:	69fb      	ldr	r3, [r7, #28]
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fa fe92 	bl	800b1dc <pbuf_clen>
 80104b8:	4603      	mov	r3, r0
 80104ba:	461a      	mov	r2, r3
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104c2:	4413      	add	r3, r2
 80104c4:	b29a      	uxth	r2, r3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	69fa      	ldr	r2, [r7, #28]
 80104d8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d103      	bne.n	80104ea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2200      	movs	r2, #0
 80104e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80104ea:	2300      	movs	r3, #0
 80104ec:	e016      	b.n	801051c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80104ee:	bf00      	nop
 80104f0:	e002      	b.n	80104f8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80104f2:	bf00      	nop
 80104f4:	e000      	b.n	80104f8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80104f6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80104f8:	69fb      	ldr	r3, [r7, #28]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d006      	beq.n	801050c <tcp_split_unsent_seg+0x25c>
 80104fe:	4b09      	ldr	r3, [pc, #36]	; (8010524 <tcp_split_unsent_seg+0x274>)
 8010500:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010504:	490d      	ldr	r1, [pc, #52]	; (801053c <tcp_split_unsent_seg+0x28c>)
 8010506:	4809      	ldr	r0, [pc, #36]	; (801052c <tcp_split_unsent_seg+0x27c>)
 8010508:	f006 f9ee 	bl	80168e8 <iprintf>
  if (p != NULL) {
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d002      	beq.n	8010518 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010512:	6938      	ldr	r0, [r7, #16]
 8010514:	f7fa fdd4 	bl	800b0c0 <pbuf_free>
  }

  return ERR_MEM;
 8010518:	f04f 33ff 	mov.w	r3, #4294967295
}
 801051c:	4618      	mov	r0, r3
 801051e:	3724      	adds	r7, #36	; 0x24
 8010520:	46bd      	mov	sp, r7
 8010522:	bd90      	pop	{r4, r7, pc}
 8010524:	080195dc 	.word	0x080195dc
 8010528:	08019970 	.word	0x08019970
 801052c:	08019630 	.word	0x08019630
 8010530:	08019994 	.word	0x08019994
 8010534:	080199b8 	.word	0x080199b8
 8010538:	080199c8 	.word	0x080199c8
 801053c:	080199d8 	.word	0x080199d8

08010540 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010540:	b590      	push	{r4, r7, lr}
 8010542:	b085      	sub	sp, #20
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d106      	bne.n	801055c <tcp_send_fin+0x1c>
 801054e:	4b21      	ldr	r3, [pc, #132]	; (80105d4 <tcp_send_fin+0x94>)
 8010550:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010554:	4920      	ldr	r1, [pc, #128]	; (80105d8 <tcp_send_fin+0x98>)
 8010556:	4821      	ldr	r0, [pc, #132]	; (80105dc <tcp_send_fin+0x9c>)
 8010558:	f006 f9c6 	bl	80168e8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010560:	2b00      	cmp	r3, #0
 8010562:	d02e      	beq.n	80105c2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010568:	60fb      	str	r3, [r7, #12]
 801056a:	e002      	b.n	8010572 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1f8      	bne.n	801056c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	899b      	ldrh	r3, [r3, #12]
 8010580:	b29b      	uxth	r3, r3
 8010582:	4618      	mov	r0, r3
 8010584:	f7f9 f9b2 	bl	80098ec <lwip_htons>
 8010588:	4603      	mov	r3, r0
 801058a:	b2db      	uxtb	r3, r3
 801058c:	f003 0307 	and.w	r3, r3, #7
 8010590:	2b00      	cmp	r3, #0
 8010592:	d116      	bne.n	80105c2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	899b      	ldrh	r3, [r3, #12]
 801059a:	b29c      	uxth	r4, r3
 801059c:	2001      	movs	r0, #1
 801059e:	f7f9 f9a5 	bl	80098ec <lwip_htons>
 80105a2:	4603      	mov	r3, r0
 80105a4:	461a      	mov	r2, r3
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	68db      	ldr	r3, [r3, #12]
 80105aa:	4322      	orrs	r2, r4
 80105ac:	b292      	uxth	r2, r2
 80105ae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	8b5b      	ldrh	r3, [r3, #26]
 80105b4:	f043 0320 	orr.w	r3, r3, #32
 80105b8:	b29a      	uxth	r2, r3
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80105be:	2300      	movs	r3, #0
 80105c0:	e004      	b.n	80105cc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80105c2:	2101      	movs	r1, #1
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f000 f80b 	bl	80105e0 <tcp_enqueue_flags>
 80105ca:	4603      	mov	r3, r0
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3714      	adds	r7, #20
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd90      	pop	{r4, r7, pc}
 80105d4:	080195dc 	.word	0x080195dc
 80105d8:	080199e4 	.word	0x080199e4
 80105dc:	08019630 	.word	0x08019630

080105e0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b08a      	sub	sp, #40	; 0x28
 80105e4:	af02      	add	r7, sp, #8
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	460b      	mov	r3, r1
 80105ea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80105ec:	2300      	movs	r3, #0
 80105ee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80105f0:	2300      	movs	r3, #0
 80105f2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80105f4:	78fb      	ldrb	r3, [r7, #3]
 80105f6:	f003 0303 	and.w	r3, r3, #3
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d106      	bne.n	801060c <tcp_enqueue_flags+0x2c>
 80105fe:	4b67      	ldr	r3, [pc, #412]	; (801079c <tcp_enqueue_flags+0x1bc>)
 8010600:	f240 4212 	movw	r2, #1042	; 0x412
 8010604:	4966      	ldr	r1, [pc, #408]	; (80107a0 <tcp_enqueue_flags+0x1c0>)
 8010606:	4867      	ldr	r0, [pc, #412]	; (80107a4 <tcp_enqueue_flags+0x1c4>)
 8010608:	f006 f96e 	bl	80168e8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d106      	bne.n	8010620 <tcp_enqueue_flags+0x40>
 8010612:	4b62      	ldr	r3, [pc, #392]	; (801079c <tcp_enqueue_flags+0x1bc>)
 8010614:	f240 4213 	movw	r2, #1043	; 0x413
 8010618:	4963      	ldr	r1, [pc, #396]	; (80107a8 <tcp_enqueue_flags+0x1c8>)
 801061a:	4862      	ldr	r0, [pc, #392]	; (80107a4 <tcp_enqueue_flags+0x1c4>)
 801061c:	f006 f964 	bl	80168e8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010620:	78fb      	ldrb	r3, [r7, #3]
 8010622:	f003 0302 	and.w	r3, r3, #2
 8010626:	2b00      	cmp	r3, #0
 8010628:	d001      	beq.n	801062e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801062a:	2301      	movs	r3, #1
 801062c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801062e:	7ffb      	ldrb	r3, [r7, #31]
 8010630:	009b      	lsls	r3, r3, #2
 8010632:	b2db      	uxtb	r3, r3
 8010634:	f003 0304 	and.w	r3, r3, #4
 8010638:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801063a:	7dfb      	ldrb	r3, [r7, #23]
 801063c:	b29b      	uxth	r3, r3
 801063e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010642:	4619      	mov	r1, r3
 8010644:	2036      	movs	r0, #54	; 0x36
 8010646:	f7fa fa5b 	bl	800ab00 <pbuf_alloc>
 801064a:	6138      	str	r0, [r7, #16]
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d109      	bne.n	8010666 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	8b5b      	ldrh	r3, [r3, #26]
 8010656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801065a:	b29a      	uxth	r2, r3
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010660:	f04f 33ff 	mov.w	r3, #4294967295
 8010664:	e095      	b.n	8010792 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	895a      	ldrh	r2, [r3, #10]
 801066a:	7dfb      	ldrb	r3, [r7, #23]
 801066c:	b29b      	uxth	r3, r3
 801066e:	429a      	cmp	r2, r3
 8010670:	d206      	bcs.n	8010680 <tcp_enqueue_flags+0xa0>
 8010672:	4b4a      	ldr	r3, [pc, #296]	; (801079c <tcp_enqueue_flags+0x1bc>)
 8010674:	f240 423a 	movw	r2, #1082	; 0x43a
 8010678:	494c      	ldr	r1, [pc, #304]	; (80107ac <tcp_enqueue_flags+0x1cc>)
 801067a:	484a      	ldr	r0, [pc, #296]	; (80107a4 <tcp_enqueue_flags+0x1c4>)
 801067c:	f006 f934 	bl	80168e8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010684:	78fa      	ldrb	r2, [r7, #3]
 8010686:	7ffb      	ldrb	r3, [r7, #31]
 8010688:	9300      	str	r3, [sp, #0]
 801068a:	460b      	mov	r3, r1
 801068c:	6939      	ldr	r1, [r7, #16]
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f7ff f916 	bl	800f8c0 <tcp_create_segment>
 8010694:	60f8      	str	r0, [r7, #12]
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d109      	bne.n	80106b0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	8b5b      	ldrh	r3, [r3, #26]
 80106a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106a4:	b29a      	uxth	r2, r3
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80106aa:	f04f 33ff 	mov.w	r3, #4294967295
 80106ae:	e070      	b.n	8010792 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	68db      	ldr	r3, [r3, #12]
 80106b4:	f003 0303 	and.w	r3, r3, #3
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d006      	beq.n	80106ca <tcp_enqueue_flags+0xea>
 80106bc:	4b37      	ldr	r3, [pc, #220]	; (801079c <tcp_enqueue_flags+0x1bc>)
 80106be:	f240 4242 	movw	r2, #1090	; 0x442
 80106c2:	493b      	ldr	r1, [pc, #236]	; (80107b0 <tcp_enqueue_flags+0x1d0>)
 80106c4:	4837      	ldr	r0, [pc, #220]	; (80107a4 <tcp_enqueue_flags+0x1c4>)
 80106c6:	f006 f90f 	bl	80168e8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	891b      	ldrh	r3, [r3, #8]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d006      	beq.n	80106e0 <tcp_enqueue_flags+0x100>
 80106d2:	4b32      	ldr	r3, [pc, #200]	; (801079c <tcp_enqueue_flags+0x1bc>)
 80106d4:	f240 4243 	movw	r2, #1091	; 0x443
 80106d8:	4936      	ldr	r1, [pc, #216]	; (80107b4 <tcp_enqueue_flags+0x1d4>)
 80106da:	4832      	ldr	r0, [pc, #200]	; (80107a4 <tcp_enqueue_flags+0x1c4>)
 80106dc:	f006 f904 	bl	80168e8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d103      	bne.n	80106f0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	68fa      	ldr	r2, [r7, #12]
 80106ec:	66da      	str	r2, [r3, #108]	; 0x6c
 80106ee:	e00d      	b.n	801070c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106f4:	61bb      	str	r3, [r7, #24]
 80106f6:	e002      	b.n	80106fe <tcp_enqueue_flags+0x11e>
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	61bb      	str	r3, [r7, #24]
 80106fe:	69bb      	ldr	r3, [r7, #24]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d1f8      	bne.n	80106f8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010706:	69bb      	ldr	r3, [r7, #24]
 8010708:	68fa      	ldr	r2, [r7, #12]
 801070a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2200      	movs	r2, #0
 8010710:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010714:	78fb      	ldrb	r3, [r7, #3]
 8010716:	f003 0302 	and.w	r3, r3, #2
 801071a:	2b00      	cmp	r3, #0
 801071c:	d104      	bne.n	8010728 <tcp_enqueue_flags+0x148>
 801071e:	78fb      	ldrb	r3, [r7, #3]
 8010720:	f003 0301 	and.w	r3, r3, #1
 8010724:	2b00      	cmp	r3, #0
 8010726:	d004      	beq.n	8010732 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801072c:	1c5a      	adds	r2, r3, #1
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010732:	78fb      	ldrb	r3, [r7, #3]
 8010734:	f003 0301 	and.w	r3, r3, #1
 8010738:	2b00      	cmp	r3, #0
 801073a:	d006      	beq.n	801074a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	8b5b      	ldrh	r3, [r3, #26]
 8010740:	f043 0320 	orr.w	r3, r3, #32
 8010744:	b29a      	uxth	r2, r3
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	685b      	ldr	r3, [r3, #4]
 801074e:	4618      	mov	r0, r3
 8010750:	f7fa fd44 	bl	800b1dc <pbuf_clen>
 8010754:	4603      	mov	r3, r0
 8010756:	461a      	mov	r2, r3
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801075e:	4413      	add	r3, r2
 8010760:	b29a      	uxth	r2, r3
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801076e:	2b00      	cmp	r3, #0
 8010770:	d00e      	beq.n	8010790 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010776:	2b00      	cmp	r3, #0
 8010778:	d10a      	bne.n	8010790 <tcp_enqueue_flags+0x1b0>
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801077e:	2b00      	cmp	r3, #0
 8010780:	d106      	bne.n	8010790 <tcp_enqueue_flags+0x1b0>
 8010782:	4b06      	ldr	r3, [pc, #24]	; (801079c <tcp_enqueue_flags+0x1bc>)
 8010784:	f240 4266 	movw	r2, #1126	; 0x466
 8010788:	490b      	ldr	r1, [pc, #44]	; (80107b8 <tcp_enqueue_flags+0x1d8>)
 801078a:	4806      	ldr	r0, [pc, #24]	; (80107a4 <tcp_enqueue_flags+0x1c4>)
 801078c:	f006 f8ac 	bl	80168e8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010790:	2300      	movs	r3, #0
}
 8010792:	4618      	mov	r0, r3
 8010794:	3720      	adds	r7, #32
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	080195dc 	.word	0x080195dc
 80107a0:	08019a00 	.word	0x08019a00
 80107a4:	08019630 	.word	0x08019630
 80107a8:	08019a58 	.word	0x08019a58
 80107ac:	08019a78 	.word	0x08019a78
 80107b0:	08019ab4 	.word	0x08019ab4
 80107b4:	08019acc 	.word	0x08019acc
 80107b8:	08019af8 	.word	0x08019af8

080107bc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80107bc:	b5b0      	push	{r4, r5, r7, lr}
 80107be:	b08a      	sub	sp, #40	; 0x28
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d106      	bne.n	80107d8 <tcp_output+0x1c>
 80107ca:	4ba0      	ldr	r3, [pc, #640]	; (8010a4c <tcp_output+0x290>)
 80107cc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80107d0:	499f      	ldr	r1, [pc, #636]	; (8010a50 <tcp_output+0x294>)
 80107d2:	48a0      	ldr	r0, [pc, #640]	; (8010a54 <tcp_output+0x298>)
 80107d4:	f006 f888 	bl	80168e8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	7d1b      	ldrb	r3, [r3, #20]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	d106      	bne.n	80107ee <tcp_output+0x32>
 80107e0:	4b9a      	ldr	r3, [pc, #616]	; (8010a4c <tcp_output+0x290>)
 80107e2:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80107e6:	499c      	ldr	r1, [pc, #624]	; (8010a58 <tcp_output+0x29c>)
 80107e8:	489a      	ldr	r0, [pc, #616]	; (8010a54 <tcp_output+0x298>)
 80107ea:	f006 f87d 	bl	80168e8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80107ee:	4b9b      	ldr	r3, [pc, #620]	; (8010a5c <tcp_output+0x2a0>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	687a      	ldr	r2, [r7, #4]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d101      	bne.n	80107fc <tcp_output+0x40>
    return ERR_OK;
 80107f8:	2300      	movs	r3, #0
 80107fa:	e1d2      	b.n	8010ba2 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010808:	429a      	cmp	r2, r3
 801080a:	d203      	bcs.n	8010814 <tcp_output+0x58>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010812:	e002      	b.n	801081a <tcp_output+0x5e>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801081a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010820:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010824:	2b00      	cmp	r3, #0
 8010826:	d10b      	bne.n	8010840 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	8b5b      	ldrh	r3, [r3, #26]
 801082c:	f003 0302 	and.w	r3, r3, #2
 8010830:	2b00      	cmp	r3, #0
 8010832:	f000 81a9 	beq.w	8010b88 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f000 fdd6 	bl	80113e8 <tcp_send_empty_ack>
 801083c:	4603      	mov	r3, r0
 801083e:	e1b0      	b.n	8010ba2 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010840:	6879      	ldr	r1, [r7, #4]
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	3304      	adds	r3, #4
 8010846:	461a      	mov	r2, r3
 8010848:	6878      	ldr	r0, [r7, #4]
 801084a:	f7ff f81d 	bl	800f888 <tcp_route>
 801084e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d102      	bne.n	801085c <tcp_output+0xa0>
    return ERR_RTE;
 8010856:	f06f 0303 	mvn.w	r3, #3
 801085a:	e1a2      	b.n	8010ba2 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d003      	beq.n	801086a <tcp_output+0xae>
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d111      	bne.n	801088e <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801086a:	697b      	ldr	r3, [r7, #20]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d002      	beq.n	8010876 <tcp_output+0xba>
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	3304      	adds	r3, #4
 8010874:	e000      	b.n	8010878 <tcp_output+0xbc>
 8010876:	2300      	movs	r3, #0
 8010878:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801087a:	693b      	ldr	r3, [r7, #16]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d102      	bne.n	8010886 <tcp_output+0xca>
      return ERR_RTE;
 8010880:	f06f 0303 	mvn.w	r3, #3
 8010884:	e18d      	b.n	8010ba2 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010890:	68db      	ldr	r3, [r3, #12]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	4618      	mov	r0, r3
 8010896:	f7f9 f83e 	bl	8009916 <lwip_htonl>
 801089a:	4602      	mov	r2, r0
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80108a0:	1ad3      	subs	r3, r2, r3
 80108a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108a4:	8912      	ldrh	r2, [r2, #8]
 80108a6:	4413      	add	r3, r2
 80108a8:	69ba      	ldr	r2, [r7, #24]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d227      	bcs.n	80108fe <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80108b4:	461a      	mov	r2, r3
 80108b6:	69bb      	ldr	r3, [r7, #24]
 80108b8:	4293      	cmp	r3, r2
 80108ba:	d114      	bne.n	80108e6 <tcp_output+0x12a>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d110      	bne.n	80108e6 <tcp_output+0x12a>
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d10b      	bne.n	80108e6 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2200      	movs	r2, #0
 80108d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2201      	movs	r2, #1
 80108da:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	2200      	movs	r2, #0
 80108e2:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	8b5b      	ldrh	r3, [r3, #26]
 80108ea:	f003 0302 	and.w	r3, r3, #2
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	f000 814c 	beq.w	8010b8c <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f000 fd77 	bl	80113e8 <tcp_send_empty_ack>
 80108fa:	4603      	mov	r3, r0
 80108fc:	e151      	b.n	8010ba2 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2200      	movs	r2, #0
 8010902:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801090a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801090c:	6a3b      	ldr	r3, [r7, #32]
 801090e:	2b00      	cmp	r3, #0
 8010910:	f000 811b 	beq.w	8010b4a <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8010914:	e002      	b.n	801091c <tcp_output+0x160>
 8010916:	6a3b      	ldr	r3, [r7, #32]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	623b      	str	r3, [r7, #32]
 801091c:	6a3b      	ldr	r3, [r7, #32]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d1f8      	bne.n	8010916 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010924:	e111      	b.n	8010b4a <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010928:	68db      	ldr	r3, [r3, #12]
 801092a:	899b      	ldrh	r3, [r3, #12]
 801092c:	b29b      	uxth	r3, r3
 801092e:	4618      	mov	r0, r3
 8010930:	f7f8 ffdc 	bl	80098ec <lwip_htons>
 8010934:	4603      	mov	r3, r0
 8010936:	b2db      	uxtb	r3, r3
 8010938:	f003 0304 	and.w	r3, r3, #4
 801093c:	2b00      	cmp	r3, #0
 801093e:	d006      	beq.n	801094e <tcp_output+0x192>
 8010940:	4b42      	ldr	r3, [pc, #264]	; (8010a4c <tcp_output+0x290>)
 8010942:	f240 5237 	movw	r2, #1335	; 0x537
 8010946:	4946      	ldr	r1, [pc, #280]	; (8010a60 <tcp_output+0x2a4>)
 8010948:	4842      	ldr	r0, [pc, #264]	; (8010a54 <tcp_output+0x298>)
 801094a:	f005 ffcd 	bl	80168e8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010952:	2b00      	cmp	r3, #0
 8010954:	d01f      	beq.n	8010996 <tcp_output+0x1da>
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	8b5b      	ldrh	r3, [r3, #26]
 801095a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801095e:	2b00      	cmp	r3, #0
 8010960:	d119      	bne.n	8010996 <tcp_output+0x1da>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010966:	2b00      	cmp	r3, #0
 8010968:	d00b      	beq.n	8010982 <tcp_output+0x1c6>
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d110      	bne.n	8010996 <tcp_output+0x1da>
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010978:	891a      	ldrh	r2, [r3, #8]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801097e:	429a      	cmp	r2, r3
 8010980:	d209      	bcs.n	8010996 <tcp_output+0x1da>
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010988:	2b00      	cmp	r3, #0
 801098a:	d004      	beq.n	8010996 <tcp_output+0x1da>
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010992:	2b08      	cmp	r3, #8
 8010994:	d901      	bls.n	801099a <tcp_output+0x1de>
 8010996:	2301      	movs	r3, #1
 8010998:	e000      	b.n	801099c <tcp_output+0x1e0>
 801099a:	2300      	movs	r3, #0
 801099c:	2b00      	cmp	r3, #0
 801099e:	d106      	bne.n	80109ae <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	8b5b      	ldrh	r3, [r3, #26]
 80109a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	f000 80e3 	beq.w	8010b74 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	7d1b      	ldrb	r3, [r3, #20]
 80109b2:	2b02      	cmp	r3, #2
 80109b4:	d00d      	beq.n	80109d2 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80109b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	899b      	ldrh	r3, [r3, #12]
 80109bc:	b29c      	uxth	r4, r3
 80109be:	2010      	movs	r0, #16
 80109c0:	f7f8 ff94 	bl	80098ec <lwip_htons>
 80109c4:	4603      	mov	r3, r0
 80109c6:	461a      	mov	r2, r3
 80109c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ca:	68db      	ldr	r3, [r3, #12]
 80109cc:	4322      	orrs	r2, r4
 80109ce:	b292      	uxth	r2, r2
 80109d0:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80109d2:	697a      	ldr	r2, [r7, #20]
 80109d4:	6879      	ldr	r1, [r7, #4]
 80109d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109d8:	f000 f908 	bl	8010bec <tcp_output_segment>
 80109dc:	4603      	mov	r3, r0
 80109de:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80109e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d009      	beq.n	80109fc <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	8b5b      	ldrh	r3, [r3, #26]
 80109ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109f0:	b29a      	uxth	r2, r3
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	835a      	strh	r2, [r3, #26]
      return err;
 80109f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109fa:	e0d2      	b.n	8010ba2 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80109fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fe:	681a      	ldr	r2, [r3, #0]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	7d1b      	ldrb	r3, [r3, #20]
 8010a08:	2b02      	cmp	r3, #2
 8010a0a:	d006      	beq.n	8010a1a <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	8b5b      	ldrh	r3, [r3, #26]
 8010a10:	f023 0303 	bic.w	r3, r3, #3
 8010a14:	b29a      	uxth	r2, r3
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1c:	68db      	ldr	r3, [r3, #12]
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7f8 ff78 	bl	8009916 <lwip_htonl>
 8010a26:	4604      	mov	r4, r0
 8010a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a2a:	891b      	ldrh	r3, [r3, #8]
 8010a2c:	461d      	mov	r5, r3
 8010a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a30:	68db      	ldr	r3, [r3, #12]
 8010a32:	899b      	ldrh	r3, [r3, #12]
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	4618      	mov	r0, r3
 8010a38:	f7f8 ff58 	bl	80098ec <lwip_htons>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	b2db      	uxtb	r3, r3
 8010a40:	f003 0303 	and.w	r3, r3, #3
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d00d      	beq.n	8010a64 <tcp_output+0x2a8>
 8010a48:	2301      	movs	r3, #1
 8010a4a:	e00c      	b.n	8010a66 <tcp_output+0x2aa>
 8010a4c:	080195dc 	.word	0x080195dc
 8010a50:	08019b20 	.word	0x08019b20
 8010a54:	08019630 	.word	0x08019630
 8010a58:	08019b38 	.word	0x08019b38
 8010a5c:	20016e28 	.word	0x20016e28
 8010a60:	08019b60 	.word	0x08019b60
 8010a64:	2300      	movs	r3, #0
 8010a66:	442b      	add	r3, r5
 8010a68:	4423      	add	r3, r4
 8010a6a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	1ad3      	subs	r3, r2, r3
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	da02      	bge.n	8010a7e <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	68ba      	ldr	r2, [r7, #8]
 8010a7c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a80:	891b      	ldrh	r3, [r3, #8]
 8010a82:	461c      	mov	r4, r3
 8010a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	899b      	ldrh	r3, [r3, #12]
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f7f8 ff2d 	bl	80098ec <lwip_htons>
 8010a92:	4603      	mov	r3, r0
 8010a94:	b2db      	uxtb	r3, r3
 8010a96:	f003 0303 	and.w	r3, r3, #3
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d001      	beq.n	8010aa2 <tcp_output+0x2e6>
 8010a9e:	2301      	movs	r3, #1
 8010aa0:	e000      	b.n	8010aa4 <tcp_output+0x2e8>
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	4423      	add	r3, r4
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d049      	beq.n	8010b3e <tcp_output+0x382>
      seg->next = NULL;
 8010aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aac:	2200      	movs	r2, #0
 8010aae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d105      	bne.n	8010ac4 <tcp_output+0x308>
        pcb->unacked = seg;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010abc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac0:	623b      	str	r3, [r7, #32]
 8010ac2:	e03f      	b.n	8010b44 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac6:	68db      	ldr	r3, [r3, #12]
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7f8 ff23 	bl	8009916 <lwip_htonl>
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	6a3b      	ldr	r3, [r7, #32]
 8010ad4:	68db      	ldr	r3, [r3, #12]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7f8 ff1c 	bl	8009916 <lwip_htonl>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	1ae3      	subs	r3, r4, r3
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	da24      	bge.n	8010b30 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	3370      	adds	r3, #112	; 0x70
 8010aea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010aec:	e002      	b.n	8010af4 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d011      	beq.n	8010b20 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010afc:	69fb      	ldr	r3, [r7, #28]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	68db      	ldr	r3, [r3, #12]
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7f8 ff06 	bl	8009916 <lwip_htonl>
 8010b0a:	4604      	mov	r4, r0
 8010b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0e:	68db      	ldr	r3, [r3, #12]
 8010b10:	685b      	ldr	r3, [r3, #4]
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7f8 feff 	bl	8009916 <lwip_htonl>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	dbe6      	blt.n	8010aee <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	681a      	ldr	r2, [r3, #0]
 8010b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b26:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b2c:	601a      	str	r2, [r3, #0]
 8010b2e:	e009      	b.n	8010b44 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010b30:	6a3b      	ldr	r3, [r7, #32]
 8010b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b34:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010b36:	6a3b      	ldr	r3, [r7, #32]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	623b      	str	r3, [r7, #32]
 8010b3c:	e002      	b.n	8010b44 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010b3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b40:	f7fb fefc 	bl	800c93c <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b48:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d012      	beq.n	8010b76 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b52:	68db      	ldr	r3, [r3, #12]
 8010b54:	685b      	ldr	r3, [r3, #4]
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7f8 fedd 	bl	8009916 <lwip_htonl>
 8010b5c:	4602      	mov	r2, r0
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b62:	1ad3      	subs	r3, r2, r3
 8010b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b66:	8912      	ldrh	r2, [r2, #8]
 8010b68:	4413      	add	r3, r2
  while (seg != NULL &&
 8010b6a:	69ba      	ldr	r2, [r7, #24]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	f4bf aeda 	bcs.w	8010926 <tcp_output+0x16a>
 8010b72:	e000      	b.n	8010b76 <tcp_output+0x3ba>
      break;
 8010b74:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d108      	bne.n	8010b90 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	2200      	movs	r2, #0
 8010b82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010b86:	e004      	b.n	8010b92 <tcp_output+0x3d6>
    goto output_done;
 8010b88:	bf00      	nop
 8010b8a:	e002      	b.n	8010b92 <tcp_output+0x3d6>
    goto output_done;
 8010b8c:	bf00      	nop
 8010b8e:	e000      	b.n	8010b92 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010b90:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	8b5b      	ldrh	r3, [r3, #26]
 8010b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010b9a:	b29a      	uxth	r2, r3
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010ba0:	2300      	movs	r3, #0
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3728      	adds	r7, #40	; 0x28
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8010baa:	bf00      	nop

08010bac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d106      	bne.n	8010bc8 <tcp_output_segment_busy+0x1c>
 8010bba:	4b09      	ldr	r3, [pc, #36]	; (8010be0 <tcp_output_segment_busy+0x34>)
 8010bbc:	f240 529a 	movw	r2, #1434	; 0x59a
 8010bc0:	4908      	ldr	r1, [pc, #32]	; (8010be4 <tcp_output_segment_busy+0x38>)
 8010bc2:	4809      	ldr	r0, [pc, #36]	; (8010be8 <tcp_output_segment_busy+0x3c>)
 8010bc4:	f005 fe90 	bl	80168e8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	7b9b      	ldrb	r3, [r3, #14]
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d001      	beq.n	8010bd6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	e000      	b.n	8010bd8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010bd6:	2300      	movs	r3, #0
}
 8010bd8:	4618      	mov	r0, r3
 8010bda:	3708      	adds	r7, #8
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}
 8010be0:	080195dc 	.word	0x080195dc
 8010be4:	08019b78 	.word	0x08019b78
 8010be8:	08019630 	.word	0x08019630

08010bec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010bec:	b5b0      	push	{r4, r5, r7, lr}
 8010bee:	b08c      	sub	sp, #48	; 0x30
 8010bf0:	af04      	add	r7, sp, #16
 8010bf2:	60f8      	str	r0, [r7, #12]
 8010bf4:	60b9      	str	r1, [r7, #8]
 8010bf6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d106      	bne.n	8010c0c <tcp_output_segment+0x20>
 8010bfe:	4b64      	ldr	r3, [pc, #400]	; (8010d90 <tcp_output_segment+0x1a4>)
 8010c00:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010c04:	4963      	ldr	r1, [pc, #396]	; (8010d94 <tcp_output_segment+0x1a8>)
 8010c06:	4864      	ldr	r0, [pc, #400]	; (8010d98 <tcp_output_segment+0x1ac>)
 8010c08:	f005 fe6e 	bl	80168e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d106      	bne.n	8010c20 <tcp_output_segment+0x34>
 8010c12:	4b5f      	ldr	r3, [pc, #380]	; (8010d90 <tcp_output_segment+0x1a4>)
 8010c14:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010c18:	4960      	ldr	r1, [pc, #384]	; (8010d9c <tcp_output_segment+0x1b0>)
 8010c1a:	485f      	ldr	r0, [pc, #380]	; (8010d98 <tcp_output_segment+0x1ac>)
 8010c1c:	f005 fe64 	bl	80168e8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d106      	bne.n	8010c34 <tcp_output_segment+0x48>
 8010c26:	4b5a      	ldr	r3, [pc, #360]	; (8010d90 <tcp_output_segment+0x1a4>)
 8010c28:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010c2c:	495c      	ldr	r1, [pc, #368]	; (8010da0 <tcp_output_segment+0x1b4>)
 8010c2e:	485a      	ldr	r0, [pc, #360]	; (8010d98 <tcp_output_segment+0x1ac>)
 8010c30:	f005 fe5a 	bl	80168e8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010c34:	68f8      	ldr	r0, [r7, #12]
 8010c36:	f7ff ffb9 	bl	8010bac <tcp_output_segment_busy>
 8010c3a:	4603      	mov	r3, r0
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d001      	beq.n	8010c44 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010c40:	2300      	movs	r3, #0
 8010c42:	e0a0      	b.n	8010d86 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010c44:	68bb      	ldr	r3, [r7, #8]
 8010c46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	68dc      	ldr	r4, [r3, #12]
 8010c4c:	4610      	mov	r0, r2
 8010c4e:	f7f8 fe62 	bl	8009916 <lwip_htonl>
 8010c52:	4603      	mov	r3, r0
 8010c54:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	68dc      	ldr	r4, [r3, #12]
 8010c5e:	4610      	mov	r0, r2
 8010c60:	f7f8 fe44 	bl	80098ec <lwip_htons>
 8010c64:	4603      	mov	r3, r0
 8010c66:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c6c:	68ba      	ldr	r2, [r7, #8]
 8010c6e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010c70:	441a      	add	r2, r3
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	3314      	adds	r3, #20
 8010c7c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	7a9b      	ldrb	r3, [r3, #10]
 8010c82:	f003 0301 	and.w	r3, r3, #1
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d015      	beq.n	8010cb6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010c8a:	68bb      	ldr	r3, [r7, #8]
 8010c8c:	3304      	adds	r3, #4
 8010c8e:	461a      	mov	r2, r3
 8010c90:	6879      	ldr	r1, [r7, #4]
 8010c92:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010c96:	f7fc fa33 	bl	800d100 <tcp_eff_send_mss_netif>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010c9e:	8b7b      	ldrh	r3, [r7, #26]
 8010ca0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7f8 fe36 	bl	8009916 <lwip_htonl>
 8010caa:	4602      	mov	r2, r0
 8010cac:	69fb      	ldr	r3, [r7, #28]
 8010cae:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010cb0:	69fb      	ldr	r3, [r7, #28]
 8010cb2:	3304      	adds	r3, #4
 8010cb4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010cb6:	68bb      	ldr	r3, [r7, #8]
 8010cb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	da02      	bge.n	8010cc6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d10c      	bne.n	8010ce8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010cce:	4b35      	ldr	r3, [pc, #212]	; (8010da4 <tcp_output_segment+0x1b8>)
 8010cd0:	681a      	ldr	r2, [r3, #0]
 8010cd2:	68bb      	ldr	r3, [r7, #8]
 8010cd4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	68db      	ldr	r3, [r3, #12]
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7f8 fe1a 	bl	8009916 <lwip_htonl>
 8010ce2:	4602      	mov	r2, r0
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	68db      	ldr	r3, [r3, #12]
 8010cec:	461a      	mov	r2, r3
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	685b      	ldr	r3, [r3, #4]
 8010cf2:	685b      	ldr	r3, [r3, #4]
 8010cf4:	1ad3      	subs	r3, r2, r3
 8010cf6:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	8959      	ldrh	r1, [r3, #10]
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	685b      	ldr	r3, [r3, #4]
 8010d02:	8b3a      	ldrh	r2, [r7, #24]
 8010d04:	1a8a      	subs	r2, r1, r2
 8010d06:	b292      	uxth	r2, r2
 8010d08:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	685b      	ldr	r3, [r3, #4]
 8010d0e:	8919      	ldrh	r1, [r3, #8]
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	685b      	ldr	r3, [r3, #4]
 8010d14:	8b3a      	ldrh	r2, [r7, #24]
 8010d16:	1a8a      	subs	r2, r1, r2
 8010d18:	b292      	uxth	r2, r2
 8010d1a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	685b      	ldr	r3, [r3, #4]
 8010d20:	68fa      	ldr	r2, [r7, #12]
 8010d22:	68d2      	ldr	r2, [r2, #12]
 8010d24:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	68db      	ldr	r3, [r3, #12]
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	741a      	strb	r2, [r3, #16]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	68db      	ldr	r3, [r3, #12]
 8010d36:	f103 0214 	add.w	r2, r3, #20
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	7a9b      	ldrb	r3, [r3, #10]
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	f003 0304 	and.w	r3, r3, #4
 8010d44:	4413      	add	r3, r2
 8010d46:	69fa      	ldr	r2, [r7, #28]
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d006      	beq.n	8010d5a <tcp_output_segment+0x16e>
 8010d4c:	4b10      	ldr	r3, [pc, #64]	; (8010d90 <tcp_output_segment+0x1a4>)
 8010d4e:	f240 621c 	movw	r2, #1564	; 0x61c
 8010d52:	4915      	ldr	r1, [pc, #84]	; (8010da8 <tcp_output_segment+0x1bc>)
 8010d54:	4810      	ldr	r0, [pc, #64]	; (8010d98 <tcp_output_segment+0x1ac>)
 8010d56:	f005 fdc7 	bl	80168e8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	6858      	ldr	r0, [r3, #4]
 8010d5e:	68b9      	ldr	r1, [r7, #8]
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	1d1c      	adds	r4, r3, #4
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	7add      	ldrb	r5, [r3, #11]
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	7a9b      	ldrb	r3, [r3, #10]
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	9202      	str	r2, [sp, #8]
 8010d70:	2206      	movs	r2, #6
 8010d72:	9201      	str	r2, [sp, #4]
 8010d74:	9300      	str	r3, [sp, #0]
 8010d76:	462b      	mov	r3, r5
 8010d78:	4622      	mov	r2, r4
 8010d7a:	f004 fc3f 	bl	80155fc <ip4_output_if>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3720      	adds	r7, #32
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8010d8e:	bf00      	nop
 8010d90:	080195dc 	.word	0x080195dc
 8010d94:	08019ba0 	.word	0x08019ba0
 8010d98:	08019630 	.word	0x08019630
 8010d9c:	08019bc0 	.word	0x08019bc0
 8010da0:	08019be0 	.word	0x08019be0
 8010da4:	20016e18 	.word	0x20016e18
 8010da8:	08019c04 	.word	0x08019c04

08010dac <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010dac:	b5b0      	push	{r4, r5, r7, lr}
 8010dae:	b084      	sub	sp, #16
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d106      	bne.n	8010dc8 <tcp_rexmit_rto_prepare+0x1c>
 8010dba:	4b31      	ldr	r3, [pc, #196]	; (8010e80 <tcp_rexmit_rto_prepare+0xd4>)
 8010dbc:	f240 6263 	movw	r2, #1635	; 0x663
 8010dc0:	4930      	ldr	r1, [pc, #192]	; (8010e84 <tcp_rexmit_rto_prepare+0xd8>)
 8010dc2:	4831      	ldr	r0, [pc, #196]	; (8010e88 <tcp_rexmit_rto_prepare+0xdc>)
 8010dc4:	f005 fd90 	bl	80168e8 <iprintf>

  if (pcb->unacked == NULL) {
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d102      	bne.n	8010dd6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010dd0:	f06f 0305 	mvn.w	r3, #5
 8010dd4:	e050      	b.n	8010e78 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dda:	60fb      	str	r3, [r7, #12]
 8010ddc:	e00b      	b.n	8010df6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010dde:	68f8      	ldr	r0, [r7, #12]
 8010de0:	f7ff fee4 	bl	8010bac <tcp_output_segment_busy>
 8010de4:	4603      	mov	r3, r0
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d002      	beq.n	8010df0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010dea:	f06f 0305 	mvn.w	r3, #5
 8010dee:	e043      	b.n	8010e78 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	60fb      	str	r3, [r7, #12]
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d1ef      	bne.n	8010dde <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010dfe:	68f8      	ldr	r0, [r7, #12]
 8010e00:	f7ff fed4 	bl	8010bac <tcp_output_segment_busy>
 8010e04:	4603      	mov	r3, r0
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d002      	beq.n	8010e10 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010e0a:	f06f 0305 	mvn.w	r3, #5
 8010e0e:	e033      	b.n	8010e78 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2200      	movs	r2, #0
 8010e24:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	8b5b      	ldrh	r3, [r3, #26]
 8010e2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010e2e:	b29a      	uxth	r2, r3
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	68db      	ldr	r3, [r3, #12]
 8010e38:	685b      	ldr	r3, [r3, #4]
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	f7f8 fd6b 	bl	8009916 <lwip_htonl>
 8010e40:	4604      	mov	r4, r0
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	891b      	ldrh	r3, [r3, #8]
 8010e46:	461d      	mov	r5, r3
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	68db      	ldr	r3, [r3, #12]
 8010e4c:	899b      	ldrh	r3, [r3, #12]
 8010e4e:	b29b      	uxth	r3, r3
 8010e50:	4618      	mov	r0, r3
 8010e52:	f7f8 fd4b 	bl	80098ec <lwip_htons>
 8010e56:	4603      	mov	r3, r0
 8010e58:	b2db      	uxtb	r3, r3
 8010e5a:	f003 0303 	and.w	r3, r3, #3
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d001      	beq.n	8010e66 <tcp_rexmit_rto_prepare+0xba>
 8010e62:	2301      	movs	r3, #1
 8010e64:	e000      	b.n	8010e68 <tcp_rexmit_rto_prepare+0xbc>
 8010e66:	2300      	movs	r3, #0
 8010e68:	442b      	add	r3, r5
 8010e6a:	18e2      	adds	r2, r4, r3
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2200      	movs	r2, #0
 8010e74:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010e76:	2300      	movs	r3, #0
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3710      	adds	r7, #16
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8010e80:	080195dc 	.word	0x080195dc
 8010e84:	08019c18 	.word	0x08019c18
 8010e88:	08019630 	.word	0x08019630

08010e8c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d106      	bne.n	8010ea8 <tcp_rexmit_rto_commit+0x1c>
 8010e9a:	4b0d      	ldr	r3, [pc, #52]	; (8010ed0 <tcp_rexmit_rto_commit+0x44>)
 8010e9c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010ea0:	490c      	ldr	r1, [pc, #48]	; (8010ed4 <tcp_rexmit_rto_commit+0x48>)
 8010ea2:	480d      	ldr	r0, [pc, #52]	; (8010ed8 <tcp_rexmit_rto_commit+0x4c>)
 8010ea4:	f005 fd20 	bl	80168e8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010eae:	2bff      	cmp	r3, #255	; 0xff
 8010eb0:	d007      	beq.n	8010ec2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010eb8:	3301      	adds	r3, #1
 8010eba:	b2da      	uxtb	r2, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f7ff fc7a 	bl	80107bc <tcp_output>
}
 8010ec8:	bf00      	nop
 8010eca:	3708      	adds	r7, #8
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	080195dc 	.word	0x080195dc
 8010ed4:	08019c3c 	.word	0x08019c3c
 8010ed8:	08019630 	.word	0x08019630

08010edc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b082      	sub	sp, #8
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d106      	bne.n	8010ef8 <tcp_rexmit_rto+0x1c>
 8010eea:	4b0a      	ldr	r3, [pc, #40]	; (8010f14 <tcp_rexmit_rto+0x38>)
 8010eec:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010ef0:	4909      	ldr	r1, [pc, #36]	; (8010f18 <tcp_rexmit_rto+0x3c>)
 8010ef2:	480a      	ldr	r0, [pc, #40]	; (8010f1c <tcp_rexmit_rto+0x40>)
 8010ef4:	f005 fcf8 	bl	80168e8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010ef8:	6878      	ldr	r0, [r7, #4]
 8010efa:	f7ff ff57 	bl	8010dac <tcp_rexmit_rto_prepare>
 8010efe:	4603      	mov	r3, r0
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d102      	bne.n	8010f0a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f7ff ffc1 	bl	8010e8c <tcp_rexmit_rto_commit>
  }
}
 8010f0a:	bf00      	nop
 8010f0c:	3708      	adds	r7, #8
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	bf00      	nop
 8010f14:	080195dc 	.word	0x080195dc
 8010f18:	08019c60 	.word	0x08019c60
 8010f1c:	08019630 	.word	0x08019630

08010f20 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010f20:	b590      	push	{r4, r7, lr}
 8010f22:	b085      	sub	sp, #20
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d106      	bne.n	8010f3c <tcp_rexmit+0x1c>
 8010f2e:	4b2f      	ldr	r3, [pc, #188]	; (8010fec <tcp_rexmit+0xcc>)
 8010f30:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010f34:	492e      	ldr	r1, [pc, #184]	; (8010ff0 <tcp_rexmit+0xd0>)
 8010f36:	482f      	ldr	r0, [pc, #188]	; (8010ff4 <tcp_rexmit+0xd4>)
 8010f38:	f005 fcd6 	bl	80168e8 <iprintf>

  if (pcb->unacked == NULL) {
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d102      	bne.n	8010f4a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010f44:	f06f 0305 	mvn.w	r3, #5
 8010f48:	e04c      	b.n	8010fe4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f4e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010f50:	68b8      	ldr	r0, [r7, #8]
 8010f52:	f7ff fe2b 	bl	8010bac <tcp_output_segment_busy>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d002      	beq.n	8010f62 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010f5c:	f06f 0305 	mvn.w	r3, #5
 8010f60:	e040      	b.n	8010fe4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	681a      	ldr	r2, [r3, #0]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	336c      	adds	r3, #108	; 0x6c
 8010f6e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010f70:	e002      	b.n	8010f78 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d011      	beq.n	8010fa4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	68db      	ldr	r3, [r3, #12]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7f8 fcc4 	bl	8009916 <lwip_htonl>
 8010f8e:	4604      	mov	r4, r0
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	68db      	ldr	r3, [r3, #12]
 8010f94:	685b      	ldr	r3, [r3, #4]
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7f8 fcbd 	bl	8009916 <lwip_htonl>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	dbe6      	blt.n	8010f72 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	681a      	ldr	r2, [r3, #0]
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	68ba      	ldr	r2, [r7, #8]
 8010fb0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d103      	bne.n	8010fc2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010fc8:	2bff      	cmp	r3, #255	; 0xff
 8010fca:	d007      	beq.n	8010fdc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	b2da      	uxtb	r2, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010fe2:	2300      	movs	r3, #0
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3714      	adds	r7, #20
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd90      	pop	{r4, r7, pc}
 8010fec:	080195dc 	.word	0x080195dc
 8010ff0:	08019c7c 	.word	0x08019c7c
 8010ff4:	08019630 	.word	0x08019630

08010ff8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b082      	sub	sp, #8
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d106      	bne.n	8011014 <tcp_rexmit_fast+0x1c>
 8011006:	4b2e      	ldr	r3, [pc, #184]	; (80110c0 <tcp_rexmit_fast+0xc8>)
 8011008:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801100c:	492d      	ldr	r1, [pc, #180]	; (80110c4 <tcp_rexmit_fast+0xcc>)
 801100e:	482e      	ldr	r0, [pc, #184]	; (80110c8 <tcp_rexmit_fast+0xd0>)
 8011010:	f005 fc6a 	bl	80168e8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011018:	2b00      	cmp	r3, #0
 801101a:	d04d      	beq.n	80110b8 <tcp_rexmit_fast+0xc0>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	8b5b      	ldrh	r3, [r3, #26]
 8011020:	f003 0304 	and.w	r3, r3, #4
 8011024:	2b00      	cmp	r3, #0
 8011026:	d147      	bne.n	80110b8 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f7ff ff79 	bl	8010f20 <tcp_rexmit>
 801102e:	4603      	mov	r3, r0
 8011030:	2b00      	cmp	r3, #0
 8011032:	d141      	bne.n	80110b8 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011040:	429a      	cmp	r2, r3
 8011042:	d207      	bcs.n	8011054 <tcp_rexmit_fast+0x5c>
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801104a:	0fda      	lsrs	r2, r3, #31
 801104c:	4413      	add	r3, r2
 801104e:	105b      	asrs	r3, r3, #1
 8011050:	b29b      	uxth	r3, r3
 8011052:	e006      	b.n	8011062 <tcp_rexmit_fast+0x6a>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801105a:	0fda      	lsrs	r2, r3, #31
 801105c:	4413      	add	r3, r2
 801105e:	105b      	asrs	r3, r3, #1
 8011060:	b29b      	uxth	r3, r3
 8011062:	687a      	ldr	r2, [r7, #4]
 8011064:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801106e:	461a      	mov	r2, r3
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011074:	005b      	lsls	r3, r3, #1
 8011076:	429a      	cmp	r2, r3
 8011078:	d206      	bcs.n	8011088 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801107e:	005b      	lsls	r3, r3, #1
 8011080:	b29a      	uxth	r2, r3
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011092:	4619      	mov	r1, r3
 8011094:	0049      	lsls	r1, r1, #1
 8011096:	440b      	add	r3, r1
 8011098:	b29b      	uxth	r3, r3
 801109a:	4413      	add	r3, r2
 801109c:	b29a      	uxth	r2, r3
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	8b5b      	ldrh	r3, [r3, #26]
 80110a8:	f043 0304 	orr.w	r3, r3, #4
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2200      	movs	r2, #0
 80110b6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80110b8:	bf00      	nop
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	080195dc 	.word	0x080195dc
 80110c4:	08019c94 	.word	0x08019c94
 80110c8:	08019630 	.word	0x08019630

080110cc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b086      	sub	sp, #24
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	607b      	str	r3, [r7, #4]
 80110d6:	460b      	mov	r3, r1
 80110d8:	817b      	strh	r3, [r7, #10]
 80110da:	4613      	mov	r3, r2
 80110dc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80110de:	897a      	ldrh	r2, [r7, #10]
 80110e0:	893b      	ldrh	r3, [r7, #8]
 80110e2:	4413      	add	r3, r2
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	3314      	adds	r3, #20
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80110ee:	4619      	mov	r1, r3
 80110f0:	2022      	movs	r0, #34	; 0x22
 80110f2:	f7f9 fd05 	bl	800ab00 <pbuf_alloc>
 80110f6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d04e      	beq.n	801119c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	895b      	ldrh	r3, [r3, #10]
 8011102:	461a      	mov	r2, r3
 8011104:	897b      	ldrh	r3, [r7, #10]
 8011106:	3314      	adds	r3, #20
 8011108:	429a      	cmp	r2, r3
 801110a:	da06      	bge.n	801111a <tcp_output_alloc_header_common+0x4e>
 801110c:	4b26      	ldr	r3, [pc, #152]	; (80111a8 <tcp_output_alloc_header_common+0xdc>)
 801110e:	f240 7224 	movw	r2, #1828	; 0x724
 8011112:	4926      	ldr	r1, [pc, #152]	; (80111ac <tcp_output_alloc_header_common+0xe0>)
 8011114:	4826      	ldr	r0, [pc, #152]	; (80111b0 <tcp_output_alloc_header_common+0xe4>)
 8011116:	f005 fbe7 	bl	80168e8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	685b      	ldr	r3, [r3, #4]
 801111e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011120:	8c3b      	ldrh	r3, [r7, #32]
 8011122:	4618      	mov	r0, r3
 8011124:	f7f8 fbe2 	bl	80098ec <lwip_htons>
 8011128:	4603      	mov	r3, r0
 801112a:	461a      	mov	r2, r3
 801112c:	693b      	ldr	r3, [r7, #16]
 801112e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011130:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011132:	4618      	mov	r0, r3
 8011134:	f7f8 fbda 	bl	80098ec <lwip_htons>
 8011138:	4603      	mov	r3, r0
 801113a:	461a      	mov	r2, r3
 801113c:	693b      	ldr	r3, [r7, #16]
 801113e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011140:	693b      	ldr	r3, [r7, #16]
 8011142:	687a      	ldr	r2, [r7, #4]
 8011144:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011146:	68f8      	ldr	r0, [r7, #12]
 8011148:	f7f8 fbe5 	bl	8009916 <lwip_htonl>
 801114c:	4602      	mov	r2, r0
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011152:	897b      	ldrh	r3, [r7, #10]
 8011154:	089b      	lsrs	r3, r3, #2
 8011156:	b29b      	uxth	r3, r3
 8011158:	3305      	adds	r3, #5
 801115a:	b29b      	uxth	r3, r3
 801115c:	031b      	lsls	r3, r3, #12
 801115e:	b29a      	uxth	r2, r3
 8011160:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011164:	b29b      	uxth	r3, r3
 8011166:	4313      	orrs	r3, r2
 8011168:	b29b      	uxth	r3, r3
 801116a:	4618      	mov	r0, r3
 801116c:	f7f8 fbbe 	bl	80098ec <lwip_htons>
 8011170:	4603      	mov	r3, r0
 8011172:	461a      	mov	r2, r3
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011178:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801117a:	4618      	mov	r0, r3
 801117c:	f7f8 fbb6 	bl	80098ec <lwip_htons>
 8011180:	4603      	mov	r3, r0
 8011182:	461a      	mov	r2, r3
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	2200      	movs	r2, #0
 801118c:	741a      	strb	r2, [r3, #16]
 801118e:	2200      	movs	r2, #0
 8011190:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	2200      	movs	r2, #0
 8011196:	749a      	strb	r2, [r3, #18]
 8011198:	2200      	movs	r2, #0
 801119a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801119c:	697b      	ldr	r3, [r7, #20]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3718      	adds	r7, #24
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	080195dc 	.word	0x080195dc
 80111ac:	08019cb4 	.word	0x08019cb4
 80111b0:	08019630 	.word	0x08019630

080111b4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80111b4:	b5b0      	push	{r4, r5, r7, lr}
 80111b6:	b08a      	sub	sp, #40	; 0x28
 80111b8:	af04      	add	r7, sp, #16
 80111ba:	60f8      	str	r0, [r7, #12]
 80111bc:	607b      	str	r3, [r7, #4]
 80111be:	460b      	mov	r3, r1
 80111c0:	817b      	strh	r3, [r7, #10]
 80111c2:	4613      	mov	r3, r2
 80111c4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d106      	bne.n	80111da <tcp_output_alloc_header+0x26>
 80111cc:	4b15      	ldr	r3, [pc, #84]	; (8011224 <tcp_output_alloc_header+0x70>)
 80111ce:	f240 7242 	movw	r2, #1858	; 0x742
 80111d2:	4915      	ldr	r1, [pc, #84]	; (8011228 <tcp_output_alloc_header+0x74>)
 80111d4:	4815      	ldr	r0, [pc, #84]	; (801122c <tcp_output_alloc_header+0x78>)
 80111d6:	f005 fb87 	bl	80168e8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	8adb      	ldrh	r3, [r3, #22]
 80111e2:	68fa      	ldr	r2, [r7, #12]
 80111e4:	8b12      	ldrh	r2, [r2, #24]
 80111e6:	68f9      	ldr	r1, [r7, #12]
 80111e8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80111ea:	893d      	ldrh	r5, [r7, #8]
 80111ec:	897c      	ldrh	r4, [r7, #10]
 80111ee:	9103      	str	r1, [sp, #12]
 80111f0:	2110      	movs	r1, #16
 80111f2:	9102      	str	r1, [sp, #8]
 80111f4:	9201      	str	r2, [sp, #4]
 80111f6:	9300      	str	r3, [sp, #0]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	462a      	mov	r2, r5
 80111fc:	4621      	mov	r1, r4
 80111fe:	f7ff ff65 	bl	80110cc <tcp_output_alloc_header_common>
 8011202:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d006      	beq.n	8011218 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801120e:	68fa      	ldr	r2, [r7, #12]
 8011210:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011212:	441a      	add	r2, r3
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011218:	697b      	ldr	r3, [r7, #20]
}
 801121a:	4618      	mov	r0, r3
 801121c:	3718      	adds	r7, #24
 801121e:	46bd      	mov	sp, r7
 8011220:	bdb0      	pop	{r4, r5, r7, pc}
 8011222:	bf00      	nop
 8011224:	080195dc 	.word	0x080195dc
 8011228:	08019ce4 	.word	0x08019ce4
 801122c:	08019630 	.word	0x08019630

08011230 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b088      	sub	sp, #32
 8011234:	af00      	add	r7, sp, #0
 8011236:	60f8      	str	r0, [r7, #12]
 8011238:	60b9      	str	r1, [r7, #8]
 801123a:	4611      	mov	r1, r2
 801123c:	461a      	mov	r2, r3
 801123e:	460b      	mov	r3, r1
 8011240:	71fb      	strb	r3, [r7, #7]
 8011242:	4613      	mov	r3, r2
 8011244:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011246:	2300      	movs	r3, #0
 8011248:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d106      	bne.n	801125e <tcp_output_fill_options+0x2e>
 8011250:	4b13      	ldr	r3, [pc, #76]	; (80112a0 <tcp_output_fill_options+0x70>)
 8011252:	f240 7256 	movw	r2, #1878	; 0x756
 8011256:	4913      	ldr	r1, [pc, #76]	; (80112a4 <tcp_output_fill_options+0x74>)
 8011258:	4813      	ldr	r0, [pc, #76]	; (80112a8 <tcp_output_fill_options+0x78>)
 801125a:	f005 fb45 	bl	80168e8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011264:	69bb      	ldr	r3, [r7, #24]
 8011266:	3314      	adds	r3, #20
 8011268:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801126a:	69bb      	ldr	r3, [r7, #24]
 801126c:	f103 0214 	add.w	r2, r3, #20
 8011270:	8bfb      	ldrh	r3, [r7, #30]
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	4619      	mov	r1, r3
 8011276:	79fb      	ldrb	r3, [r7, #7]
 8011278:	009b      	lsls	r3, r3, #2
 801127a:	f003 0304 	and.w	r3, r3, #4
 801127e:	440b      	add	r3, r1
 8011280:	4413      	add	r3, r2
 8011282:	697a      	ldr	r2, [r7, #20]
 8011284:	429a      	cmp	r2, r3
 8011286:	d006      	beq.n	8011296 <tcp_output_fill_options+0x66>
 8011288:	4b05      	ldr	r3, [pc, #20]	; (80112a0 <tcp_output_fill_options+0x70>)
 801128a:	f240 7275 	movw	r2, #1909	; 0x775
 801128e:	4907      	ldr	r1, [pc, #28]	; (80112ac <tcp_output_fill_options+0x7c>)
 8011290:	4805      	ldr	r0, [pc, #20]	; (80112a8 <tcp_output_fill_options+0x78>)
 8011292:	f005 fb29 	bl	80168e8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011296:	bf00      	nop
 8011298:	3720      	adds	r7, #32
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}
 801129e:	bf00      	nop
 80112a0:	080195dc 	.word	0x080195dc
 80112a4:	08019d0c 	.word	0x08019d0c
 80112a8:	08019630 	.word	0x08019630
 80112ac:	08019c04 	.word	0x08019c04

080112b0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b08a      	sub	sp, #40	; 0x28
 80112b4:	af04      	add	r7, sp, #16
 80112b6:	60f8      	str	r0, [r7, #12]
 80112b8:	60b9      	str	r1, [r7, #8]
 80112ba:	607a      	str	r2, [r7, #4]
 80112bc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d106      	bne.n	80112d2 <tcp_output_control_segment+0x22>
 80112c4:	4b1c      	ldr	r3, [pc, #112]	; (8011338 <tcp_output_control_segment+0x88>)
 80112c6:	f240 7287 	movw	r2, #1927	; 0x787
 80112ca:	491c      	ldr	r1, [pc, #112]	; (801133c <tcp_output_control_segment+0x8c>)
 80112cc:	481c      	ldr	r0, [pc, #112]	; (8011340 <tcp_output_control_segment+0x90>)
 80112ce:	f005 fb0b 	bl	80168e8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80112d2:	683a      	ldr	r2, [r7, #0]
 80112d4:	6879      	ldr	r1, [r7, #4]
 80112d6:	68f8      	ldr	r0, [r7, #12]
 80112d8:	f7fe fad6 	bl	800f888 <tcp_route>
 80112dc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80112de:	693b      	ldr	r3, [r7, #16]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d102      	bne.n	80112ea <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80112e4:	23fc      	movs	r3, #252	; 0xfc
 80112e6:	75fb      	strb	r3, [r7, #23]
 80112e8:	e01c      	b.n	8011324 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d006      	beq.n	80112fe <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	7adb      	ldrb	r3, [r3, #11]
 80112f4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	7a9b      	ldrb	r3, [r3, #10]
 80112fa:	757b      	strb	r3, [r7, #21]
 80112fc:	e003      	b.n	8011306 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80112fe:	23ff      	movs	r3, #255	; 0xff
 8011300:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011302:	2300      	movs	r3, #0
 8011304:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011306:	7dba      	ldrb	r2, [r7, #22]
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	9302      	str	r3, [sp, #8]
 801130c:	2306      	movs	r3, #6
 801130e:	9301      	str	r3, [sp, #4]
 8011310:	7d7b      	ldrb	r3, [r7, #21]
 8011312:	9300      	str	r3, [sp, #0]
 8011314:	4613      	mov	r3, r2
 8011316:	683a      	ldr	r2, [r7, #0]
 8011318:	6879      	ldr	r1, [r7, #4]
 801131a:	68b8      	ldr	r0, [r7, #8]
 801131c:	f004 f96e 	bl	80155fc <ip4_output_if>
 8011320:	4603      	mov	r3, r0
 8011322:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011324:	68b8      	ldr	r0, [r7, #8]
 8011326:	f7f9 fecb 	bl	800b0c0 <pbuf_free>
  return err;
 801132a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801132e:	4618      	mov	r0, r3
 8011330:	3718      	adds	r7, #24
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
 8011336:	bf00      	nop
 8011338:	080195dc 	.word	0x080195dc
 801133c:	08019d34 	.word	0x08019d34
 8011340:	08019630 	.word	0x08019630

08011344 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011344:	b590      	push	{r4, r7, lr}
 8011346:	b08b      	sub	sp, #44	; 0x2c
 8011348:	af04      	add	r7, sp, #16
 801134a:	60f8      	str	r0, [r7, #12]
 801134c:	60b9      	str	r1, [r7, #8]
 801134e:	607a      	str	r2, [r7, #4]
 8011350:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011352:	683b      	ldr	r3, [r7, #0]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d106      	bne.n	8011366 <tcp_rst+0x22>
 8011358:	4b1f      	ldr	r3, [pc, #124]	; (80113d8 <tcp_rst+0x94>)
 801135a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801135e:	491f      	ldr	r1, [pc, #124]	; (80113dc <tcp_rst+0x98>)
 8011360:	481f      	ldr	r0, [pc, #124]	; (80113e0 <tcp_rst+0x9c>)
 8011362:	f005 fac1 	bl	80168e8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011368:	2b00      	cmp	r3, #0
 801136a:	d106      	bne.n	801137a <tcp_rst+0x36>
 801136c:	4b1a      	ldr	r3, [pc, #104]	; (80113d8 <tcp_rst+0x94>)
 801136e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011372:	491c      	ldr	r1, [pc, #112]	; (80113e4 <tcp_rst+0xa0>)
 8011374:	481a      	ldr	r0, [pc, #104]	; (80113e0 <tcp_rst+0x9c>)
 8011376:	f005 fab7 	bl	80168e8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801137a:	2300      	movs	r3, #0
 801137c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801137e:	f246 0308 	movw	r3, #24584	; 0x6008
 8011382:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011384:	7dfb      	ldrb	r3, [r7, #23]
 8011386:	b29c      	uxth	r4, r3
 8011388:	68b8      	ldr	r0, [r7, #8]
 801138a:	f7f8 fac4 	bl	8009916 <lwip_htonl>
 801138e:	4602      	mov	r2, r0
 8011390:	8abb      	ldrh	r3, [r7, #20]
 8011392:	9303      	str	r3, [sp, #12]
 8011394:	2314      	movs	r3, #20
 8011396:	9302      	str	r3, [sp, #8]
 8011398:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801139a:	9301      	str	r3, [sp, #4]
 801139c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801139e:	9300      	str	r3, [sp, #0]
 80113a0:	4613      	mov	r3, r2
 80113a2:	2200      	movs	r2, #0
 80113a4:	4621      	mov	r1, r4
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f7ff fe90 	bl	80110cc <tcp_output_alloc_header_common>
 80113ac:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d00c      	beq.n	80113ce <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80113b4:	7dfb      	ldrb	r3, [r7, #23]
 80113b6:	2200      	movs	r2, #0
 80113b8:	6939      	ldr	r1, [r7, #16]
 80113ba:	68f8      	ldr	r0, [r7, #12]
 80113bc:	f7ff ff38 	bl	8011230 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80113c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c2:	683a      	ldr	r2, [r7, #0]
 80113c4:	6939      	ldr	r1, [r7, #16]
 80113c6:	68f8      	ldr	r0, [r7, #12]
 80113c8:	f7ff ff72 	bl	80112b0 <tcp_output_control_segment>
 80113cc:	e000      	b.n	80113d0 <tcp_rst+0x8c>
    return;
 80113ce:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80113d0:	371c      	adds	r7, #28
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd90      	pop	{r4, r7, pc}
 80113d6:	bf00      	nop
 80113d8:	080195dc 	.word	0x080195dc
 80113dc:	08019d60 	.word	0x08019d60
 80113e0:	08019630 	.word	0x08019630
 80113e4:	08019d7c 	.word	0x08019d7c

080113e8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80113e8:	b590      	push	{r4, r7, lr}
 80113ea:	b087      	sub	sp, #28
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80113f0:	2300      	movs	r3, #0
 80113f2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80113f4:	2300      	movs	r3, #0
 80113f6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d106      	bne.n	801140c <tcp_send_empty_ack+0x24>
 80113fe:	4b28      	ldr	r3, [pc, #160]	; (80114a0 <tcp_send_empty_ack+0xb8>)
 8011400:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011404:	4927      	ldr	r1, [pc, #156]	; (80114a4 <tcp_send_empty_ack+0xbc>)
 8011406:	4828      	ldr	r0, [pc, #160]	; (80114a8 <tcp_send_empty_ack+0xc0>)
 8011408:	f005 fa6e 	bl	80168e8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801140c:	7dfb      	ldrb	r3, [r7, #23]
 801140e:	009b      	lsls	r3, r3, #2
 8011410:	b2db      	uxtb	r3, r3
 8011412:	f003 0304 	and.w	r3, r3, #4
 8011416:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011418:	7d7b      	ldrb	r3, [r7, #21]
 801141a:	b29c      	uxth	r4, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011420:	4618      	mov	r0, r3
 8011422:	f7f8 fa78 	bl	8009916 <lwip_htonl>
 8011426:	4603      	mov	r3, r0
 8011428:	2200      	movs	r2, #0
 801142a:	4621      	mov	r1, r4
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f7ff fec1 	bl	80111b4 <tcp_output_alloc_header>
 8011432:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d109      	bne.n	801144e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	8b5b      	ldrh	r3, [r3, #26]
 801143e:	f043 0303 	orr.w	r3, r3, #3
 8011442:	b29a      	uxth	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011448:	f06f 0301 	mvn.w	r3, #1
 801144c:	e023      	b.n	8011496 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801144e:	7dbb      	ldrb	r3, [r7, #22]
 8011450:	7dfa      	ldrb	r2, [r7, #23]
 8011452:	6939      	ldr	r1, [r7, #16]
 8011454:	6878      	ldr	r0, [r7, #4]
 8011456:	f7ff feeb 	bl	8011230 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801145a:	687a      	ldr	r2, [r7, #4]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	3304      	adds	r3, #4
 8011460:	6939      	ldr	r1, [r7, #16]
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f7ff ff24 	bl	80112b0 <tcp_output_control_segment>
 8011468:	4603      	mov	r3, r0
 801146a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801146c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d007      	beq.n	8011484 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	8b5b      	ldrh	r3, [r3, #26]
 8011478:	f043 0303 	orr.w	r3, r3, #3
 801147c:	b29a      	uxth	r2, r3
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	835a      	strh	r2, [r3, #26]
 8011482:	e006      	b.n	8011492 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	8b5b      	ldrh	r3, [r3, #26]
 8011488:	f023 0303 	bic.w	r3, r3, #3
 801148c:	b29a      	uxth	r2, r3
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011492:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011496:	4618      	mov	r0, r3
 8011498:	371c      	adds	r7, #28
 801149a:	46bd      	mov	sp, r7
 801149c:	bd90      	pop	{r4, r7, pc}
 801149e:	bf00      	nop
 80114a0:	080195dc 	.word	0x080195dc
 80114a4:	08019d98 	.word	0x08019d98
 80114a8:	08019630 	.word	0x08019630

080114ac <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80114ac:	b590      	push	{r4, r7, lr}
 80114ae:	b087      	sub	sp, #28
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80114b4:	2300      	movs	r3, #0
 80114b6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d106      	bne.n	80114cc <tcp_keepalive+0x20>
 80114be:	4b18      	ldr	r3, [pc, #96]	; (8011520 <tcp_keepalive+0x74>)
 80114c0:	f640 0224 	movw	r2, #2084	; 0x824
 80114c4:	4917      	ldr	r1, [pc, #92]	; (8011524 <tcp_keepalive+0x78>)
 80114c6:	4818      	ldr	r0, [pc, #96]	; (8011528 <tcp_keepalive+0x7c>)
 80114c8:	f005 fa0e 	bl	80168e8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80114cc:	7dfb      	ldrb	r3, [r7, #23]
 80114ce:	b29c      	uxth	r4, r3
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80114d4:	3b01      	subs	r3, #1
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7f8 fa1d 	bl	8009916 <lwip_htonl>
 80114dc:	4603      	mov	r3, r0
 80114de:	2200      	movs	r2, #0
 80114e0:	4621      	mov	r1, r4
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f7ff fe66 	bl	80111b4 <tcp_output_alloc_header>
 80114e8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d102      	bne.n	80114f6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80114f0:	f04f 33ff 	mov.w	r3, #4294967295
 80114f4:	e010      	b.n	8011518 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80114f6:	7dfb      	ldrb	r3, [r7, #23]
 80114f8:	2200      	movs	r2, #0
 80114fa:	6939      	ldr	r1, [r7, #16]
 80114fc:	6878      	ldr	r0, [r7, #4]
 80114fe:	f7ff fe97 	bl	8011230 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011502:	687a      	ldr	r2, [r7, #4]
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	3304      	adds	r3, #4
 8011508:	6939      	ldr	r1, [r7, #16]
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	f7ff fed0 	bl	80112b0 <tcp_output_control_segment>
 8011510:	4603      	mov	r3, r0
 8011512:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011514:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011518:	4618      	mov	r0, r3
 801151a:	371c      	adds	r7, #28
 801151c:	46bd      	mov	sp, r7
 801151e:	bd90      	pop	{r4, r7, pc}
 8011520:	080195dc 	.word	0x080195dc
 8011524:	08019db8 	.word	0x08019db8
 8011528:	08019630 	.word	0x08019630

0801152c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801152c:	b590      	push	{r4, r7, lr}
 801152e:	b08b      	sub	sp, #44	; 0x2c
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011534:	2300      	movs	r3, #0
 8011536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d106      	bne.n	801154e <tcp_zero_window_probe+0x22>
 8011540:	4b4c      	ldr	r3, [pc, #304]	; (8011674 <tcp_zero_window_probe+0x148>)
 8011542:	f640 024f 	movw	r2, #2127	; 0x84f
 8011546:	494c      	ldr	r1, [pc, #304]	; (8011678 <tcp_zero_window_probe+0x14c>)
 8011548:	484c      	ldr	r0, [pc, #304]	; (801167c <tcp_zero_window_probe+0x150>)
 801154a:	f005 f9cd 	bl	80168e8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011552:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011554:	6a3b      	ldr	r3, [r7, #32]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d101      	bne.n	801155e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801155a:	2300      	movs	r3, #0
 801155c:	e086      	b.n	801166c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011564:	2bff      	cmp	r3, #255	; 0xff
 8011566:	d007      	beq.n	8011578 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801156e:	3301      	adds	r3, #1
 8011570:	b2da      	uxtb	r2, r3
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011578:	6a3b      	ldr	r3, [r7, #32]
 801157a:	68db      	ldr	r3, [r3, #12]
 801157c:	899b      	ldrh	r3, [r3, #12]
 801157e:	b29b      	uxth	r3, r3
 8011580:	4618      	mov	r0, r3
 8011582:	f7f8 f9b3 	bl	80098ec <lwip_htons>
 8011586:	4603      	mov	r3, r0
 8011588:	b2db      	uxtb	r3, r3
 801158a:	f003 0301 	and.w	r3, r3, #1
 801158e:	2b00      	cmp	r3, #0
 8011590:	d005      	beq.n	801159e <tcp_zero_window_probe+0x72>
 8011592:	6a3b      	ldr	r3, [r7, #32]
 8011594:	891b      	ldrh	r3, [r3, #8]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d101      	bne.n	801159e <tcp_zero_window_probe+0x72>
 801159a:	2301      	movs	r3, #1
 801159c:	e000      	b.n	80115a0 <tcp_zero_window_probe+0x74>
 801159e:	2300      	movs	r3, #0
 80115a0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80115a2:	7ffb      	ldrb	r3, [r7, #31]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	bf0c      	ite	eq
 80115a8:	2301      	moveq	r3, #1
 80115aa:	2300      	movne	r3, #0
 80115ac:	b2db      	uxtb	r3, r3
 80115ae:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80115b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115b4:	b299      	uxth	r1, r3
 80115b6:	6a3b      	ldr	r3, [r7, #32]
 80115b8:	68db      	ldr	r3, [r3, #12]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	8bba      	ldrh	r2, [r7, #28]
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f7ff fdf8 	bl	80111b4 <tcp_output_alloc_header>
 80115c4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80115c6:	69bb      	ldr	r3, [r7, #24]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d102      	bne.n	80115d2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80115cc:	f04f 33ff 	mov.w	r3, #4294967295
 80115d0:	e04c      	b.n	801166c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80115d2:	69bb      	ldr	r3, [r7, #24]
 80115d4:	685b      	ldr	r3, [r3, #4]
 80115d6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80115d8:	7ffb      	ldrb	r3, [r7, #31]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d011      	beq.n	8011602 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	899b      	ldrh	r3, [r3, #12]
 80115e2:	b29b      	uxth	r3, r3
 80115e4:	b21b      	sxth	r3, r3
 80115e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80115ea:	b21c      	sxth	r4, r3
 80115ec:	2011      	movs	r0, #17
 80115ee:	f7f8 f97d 	bl	80098ec <lwip_htons>
 80115f2:	4603      	mov	r3, r0
 80115f4:	b21b      	sxth	r3, r3
 80115f6:	4323      	orrs	r3, r4
 80115f8:	b21b      	sxth	r3, r3
 80115fa:	b29a      	uxth	r2, r3
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	819a      	strh	r2, [r3, #12]
 8011600:	e010      	b.n	8011624 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011602:	69bb      	ldr	r3, [r7, #24]
 8011604:	685b      	ldr	r3, [r3, #4]
 8011606:	3314      	adds	r3, #20
 8011608:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801160a:	6a3b      	ldr	r3, [r7, #32]
 801160c:	6858      	ldr	r0, [r3, #4]
 801160e:	6a3b      	ldr	r3, [r7, #32]
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	891a      	ldrh	r2, [r3, #8]
 8011614:	6a3b      	ldr	r3, [r7, #32]
 8011616:	891b      	ldrh	r3, [r3, #8]
 8011618:	1ad3      	subs	r3, r2, r3
 801161a:	b29b      	uxth	r3, r3
 801161c:	2201      	movs	r2, #1
 801161e:	6939      	ldr	r1, [r7, #16]
 8011620:	f7f9 ff54 	bl	800b4cc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011624:	6a3b      	ldr	r3, [r7, #32]
 8011626:	68db      	ldr	r3, [r3, #12]
 8011628:	685b      	ldr	r3, [r3, #4]
 801162a:	4618      	mov	r0, r3
 801162c:	f7f8 f973 	bl	8009916 <lwip_htonl>
 8011630:	4603      	mov	r3, r0
 8011632:	3301      	adds	r3, #1
 8011634:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	1ad3      	subs	r3, r2, r3
 801163e:	2b00      	cmp	r3, #0
 8011640:	da02      	bge.n	8011648 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	68fa      	ldr	r2, [r7, #12]
 8011646:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801164c:	2200      	movs	r2, #0
 801164e:	69b9      	ldr	r1, [r7, #24]
 8011650:	6878      	ldr	r0, [r7, #4]
 8011652:	f7ff fded 	bl	8011230 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	3304      	adds	r3, #4
 801165c:	69b9      	ldr	r1, [r7, #24]
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f7ff fe26 	bl	80112b0 <tcp_output_control_segment>
 8011664:	4603      	mov	r3, r0
 8011666:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011668:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801166c:	4618      	mov	r0, r3
 801166e:	372c      	adds	r7, #44	; 0x2c
 8011670:	46bd      	mov	sp, r7
 8011672:	bd90      	pop	{r4, r7, pc}
 8011674:	080195dc 	.word	0x080195dc
 8011678:	08019dd4 	.word	0x08019dd4
 801167c:	08019630 	.word	0x08019630

08011680 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011688:	f7fa f80e 	bl	800b6a8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801168c:	4b0a      	ldr	r3, [pc, #40]	; (80116b8 <tcpip_tcp_timer+0x38>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d103      	bne.n	801169c <tcpip_tcp_timer+0x1c>
 8011694:	4b09      	ldr	r3, [pc, #36]	; (80116bc <tcpip_tcp_timer+0x3c>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d005      	beq.n	80116a8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801169c:	2200      	movs	r2, #0
 801169e:	4908      	ldr	r1, [pc, #32]	; (80116c0 <tcpip_tcp_timer+0x40>)
 80116a0:	20fa      	movs	r0, #250	; 0xfa
 80116a2:	f000 f8f1 	bl	8011888 <sys_timeout>
 80116a6:	e002      	b.n	80116ae <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80116a8:	4b06      	ldr	r3, [pc, #24]	; (80116c4 <tcpip_tcp_timer+0x44>)
 80116aa:	2200      	movs	r2, #0
 80116ac:	601a      	str	r2, [r3, #0]
  }
}
 80116ae:	bf00      	nop
 80116b0:	3708      	adds	r7, #8
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	20016e14 	.word	0x20016e14
 80116bc:	20016e24 	.word	0x20016e24
 80116c0:	08011681 	.word	0x08011681
 80116c4:	20010294 	.word	0x20010294

080116c8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80116cc:	4b0a      	ldr	r3, [pc, #40]	; (80116f8 <tcp_timer_needed+0x30>)
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d10f      	bne.n	80116f4 <tcp_timer_needed+0x2c>
 80116d4:	4b09      	ldr	r3, [pc, #36]	; (80116fc <tcp_timer_needed+0x34>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d103      	bne.n	80116e4 <tcp_timer_needed+0x1c>
 80116dc:	4b08      	ldr	r3, [pc, #32]	; (8011700 <tcp_timer_needed+0x38>)
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d007      	beq.n	80116f4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80116e4:	4b04      	ldr	r3, [pc, #16]	; (80116f8 <tcp_timer_needed+0x30>)
 80116e6:	2201      	movs	r2, #1
 80116e8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80116ea:	2200      	movs	r2, #0
 80116ec:	4905      	ldr	r1, [pc, #20]	; (8011704 <tcp_timer_needed+0x3c>)
 80116ee:	20fa      	movs	r0, #250	; 0xfa
 80116f0:	f000 f8ca 	bl	8011888 <sys_timeout>
  }
}
 80116f4:	bf00      	nop
 80116f6:	bd80      	pop	{r7, pc}
 80116f8:	20010294 	.word	0x20010294
 80116fc:	20016e14 	.word	0x20016e14
 8011700:	20016e24 	.word	0x20016e24
 8011704:	08011681 	.word	0x08011681

08011708 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b086      	sub	sp, #24
 801170c:	af00      	add	r7, sp, #0
 801170e:	60f8      	str	r0, [r7, #12]
 8011710:	60b9      	str	r1, [r7, #8]
 8011712:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011714:	200a      	movs	r0, #10
 8011716:	f7f8 fdd5 	bl	800a2c4 <memp_malloc>
 801171a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801171c:	693b      	ldr	r3, [r7, #16]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d109      	bne.n	8011736 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011722:	693b      	ldr	r3, [r7, #16]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d151      	bne.n	80117cc <sys_timeout_abs+0xc4>
 8011728:	4b2a      	ldr	r3, [pc, #168]	; (80117d4 <sys_timeout_abs+0xcc>)
 801172a:	22be      	movs	r2, #190	; 0xbe
 801172c:	492a      	ldr	r1, [pc, #168]	; (80117d8 <sys_timeout_abs+0xd0>)
 801172e:	482b      	ldr	r0, [pc, #172]	; (80117dc <sys_timeout_abs+0xd4>)
 8011730:	f005 f8da 	bl	80168e8 <iprintf>
    return;
 8011734:	e04a      	b.n	80117cc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	2200      	movs	r2, #0
 801173a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801173c:	693b      	ldr	r3, [r7, #16]
 801173e:	68ba      	ldr	r2, [r7, #8]
 8011740:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011748:	693b      	ldr	r3, [r7, #16]
 801174a:	68fa      	ldr	r2, [r7, #12]
 801174c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801174e:	4b24      	ldr	r3, [pc, #144]	; (80117e0 <sys_timeout_abs+0xd8>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d103      	bne.n	801175e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011756:	4a22      	ldr	r2, [pc, #136]	; (80117e0 <sys_timeout_abs+0xd8>)
 8011758:	693b      	ldr	r3, [r7, #16]
 801175a:	6013      	str	r3, [r2, #0]
    return;
 801175c:	e037      	b.n	80117ce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801175e:	693b      	ldr	r3, [r7, #16]
 8011760:	685a      	ldr	r2, [r3, #4]
 8011762:	4b1f      	ldr	r3, [pc, #124]	; (80117e0 <sys_timeout_abs+0xd8>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	1ad3      	subs	r3, r2, r3
 801176a:	0fdb      	lsrs	r3, r3, #31
 801176c:	f003 0301 	and.w	r3, r3, #1
 8011770:	b2db      	uxtb	r3, r3
 8011772:	2b00      	cmp	r3, #0
 8011774:	d007      	beq.n	8011786 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011776:	4b1a      	ldr	r3, [pc, #104]	; (80117e0 <sys_timeout_abs+0xd8>)
 8011778:	681a      	ldr	r2, [r3, #0]
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801177e:	4a18      	ldr	r2, [pc, #96]	; (80117e0 <sys_timeout_abs+0xd8>)
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	6013      	str	r3, [r2, #0]
 8011784:	e023      	b.n	80117ce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011786:	4b16      	ldr	r3, [pc, #88]	; (80117e0 <sys_timeout_abs+0xd8>)
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	617b      	str	r3, [r7, #20]
 801178c:	e01a      	b.n	80117c4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d00b      	beq.n	80117ae <sys_timeout_abs+0xa6>
 8011796:	693b      	ldr	r3, [r7, #16]
 8011798:	685a      	ldr	r2, [r3, #4]
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	1ad3      	subs	r3, r2, r3
 80117a2:	0fdb      	lsrs	r3, r3, #31
 80117a4:	f003 0301 	and.w	r3, r3, #1
 80117a8:	b2db      	uxtb	r3, r3
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d007      	beq.n	80117be <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	681a      	ldr	r2, [r3, #0]
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	693a      	ldr	r2, [r7, #16]
 80117ba:	601a      	str	r2, [r3, #0]
        break;
 80117bc:	e007      	b.n	80117ce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	617b      	str	r3, [r7, #20]
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d1e1      	bne.n	801178e <sys_timeout_abs+0x86>
 80117ca:	e000      	b.n	80117ce <sys_timeout_abs+0xc6>
    return;
 80117cc:	bf00      	nop
      }
    }
  }
}
 80117ce:	3718      	adds	r7, #24
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}
 80117d4:	08019df8 	.word	0x08019df8
 80117d8:	08019e2c 	.word	0x08019e2c
 80117dc:	08019e6c 	.word	0x08019e6c
 80117e0:	2001028c 	.word	0x2001028c

080117e4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b086      	sub	sp, #24
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	4798      	blx	r3

  now = sys_now();
 80117f6:	f7f2 ffd3 	bl	80047a0 <sys_now>
 80117fa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	681a      	ldr	r2, [r3, #0]
 8011800:	4b0f      	ldr	r3, [pc, #60]	; (8011840 <lwip_cyclic_timer+0x5c>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	4413      	add	r3, r2
 8011806:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011808:	68fa      	ldr	r2, [r7, #12]
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	1ad3      	subs	r3, r2, r3
 801180e:	0fdb      	lsrs	r3, r3, #31
 8011810:	f003 0301 	and.w	r3, r3, #1
 8011814:	b2db      	uxtb	r3, r3
 8011816:	2b00      	cmp	r3, #0
 8011818:	d009      	beq.n	801182e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	681a      	ldr	r2, [r3, #0]
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	4413      	add	r3, r2
 8011822:	687a      	ldr	r2, [r7, #4]
 8011824:	4907      	ldr	r1, [pc, #28]	; (8011844 <lwip_cyclic_timer+0x60>)
 8011826:	4618      	mov	r0, r3
 8011828:	f7ff ff6e 	bl	8011708 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801182c:	e004      	b.n	8011838 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	4904      	ldr	r1, [pc, #16]	; (8011844 <lwip_cyclic_timer+0x60>)
 8011832:	68f8      	ldr	r0, [r7, #12]
 8011834:	f7ff ff68 	bl	8011708 <sys_timeout_abs>
}
 8011838:	bf00      	nop
 801183a:	3718      	adds	r7, #24
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}
 8011840:	20010290 	.word	0x20010290
 8011844:	080117e5 	.word	0x080117e5

08011848 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b082      	sub	sp, #8
 801184c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801184e:	2301      	movs	r3, #1
 8011850:	607b      	str	r3, [r7, #4]
 8011852:	e00e      	b.n	8011872 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011854:	4a0a      	ldr	r2, [pc, #40]	; (8011880 <sys_timeouts_init+0x38>)
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	00db      	lsls	r3, r3, #3
 8011860:	4a07      	ldr	r2, [pc, #28]	; (8011880 <sys_timeouts_init+0x38>)
 8011862:	4413      	add	r3, r2
 8011864:	461a      	mov	r2, r3
 8011866:	4907      	ldr	r1, [pc, #28]	; (8011884 <sys_timeouts_init+0x3c>)
 8011868:	f000 f80e 	bl	8011888 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	3301      	adds	r3, #1
 8011870:	607b      	str	r3, [r7, #4]
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	2b04      	cmp	r3, #4
 8011876:	d9ed      	bls.n	8011854 <sys_timeouts_init+0xc>
  }
}
 8011878:	bf00      	nop
 801187a:	3708      	adds	r7, #8
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}
 8011880:	0803ad60 	.word	0x0803ad60
 8011884:	080117e5 	.word	0x080117e5

08011888 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b086      	sub	sp, #24
 801188c:	af00      	add	r7, sp, #0
 801188e:	60f8      	str	r0, [r7, #12]
 8011890:	60b9      	str	r1, [r7, #8]
 8011892:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801189a:	d306      	bcc.n	80118aa <sys_timeout+0x22>
 801189c:	4b0a      	ldr	r3, [pc, #40]	; (80118c8 <sys_timeout+0x40>)
 801189e:	f240 1229 	movw	r2, #297	; 0x129
 80118a2:	490a      	ldr	r1, [pc, #40]	; (80118cc <sys_timeout+0x44>)
 80118a4:	480a      	ldr	r0, [pc, #40]	; (80118d0 <sys_timeout+0x48>)
 80118a6:	f005 f81f 	bl	80168e8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80118aa:	f7f2 ff79 	bl	80047a0 <sys_now>
 80118ae:	4602      	mov	r2, r0
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	4413      	add	r3, r2
 80118b4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80118b6:	687a      	ldr	r2, [r7, #4]
 80118b8:	68b9      	ldr	r1, [r7, #8]
 80118ba:	6978      	ldr	r0, [r7, #20]
 80118bc:	f7ff ff24 	bl	8011708 <sys_timeout_abs>
#endif
}
 80118c0:	bf00      	nop
 80118c2:	3718      	adds	r7, #24
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	08019df8 	.word	0x08019df8
 80118cc:	08019e94 	.word	0x08019e94
 80118d0:	08019e6c 	.word	0x08019e6c

080118d4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80118da:	f7f2 ff61 	bl	80047a0 <sys_now>
 80118de:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80118e0:	4b17      	ldr	r3, [pc, #92]	; (8011940 <sys_check_timeouts+0x6c>)
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d022      	beq.n	8011932 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	685b      	ldr	r3, [r3, #4]
 80118f0:	68fa      	ldr	r2, [r7, #12]
 80118f2:	1ad3      	subs	r3, r2, r3
 80118f4:	0fdb      	lsrs	r3, r3, #31
 80118f6:	f003 0301 	and.w	r3, r3, #1
 80118fa:	b2db      	uxtb	r3, r3
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d11a      	bne.n	8011936 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	4a0e      	ldr	r2, [pc, #56]	; (8011940 <sys_check_timeouts+0x6c>)
 8011906:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011908:	68bb      	ldr	r3, [r7, #8]
 801190a:	689b      	ldr	r3, [r3, #8]
 801190c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	68db      	ldr	r3, [r3, #12]
 8011912:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011914:	68bb      	ldr	r3, [r7, #8]
 8011916:	685b      	ldr	r3, [r3, #4]
 8011918:	4a0a      	ldr	r2, [pc, #40]	; (8011944 <sys_check_timeouts+0x70>)
 801191a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801191c:	68b9      	ldr	r1, [r7, #8]
 801191e:	200a      	movs	r0, #10
 8011920:	f7f8 fd22 	bl	800a368 <memp_free>
    if (handler != NULL) {
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d0da      	beq.n	80118e0 <sys_check_timeouts+0xc>
      handler(arg);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6838      	ldr	r0, [r7, #0]
 801192e:	4798      	blx	r3
  do {
 8011930:	e7d6      	b.n	80118e0 <sys_check_timeouts+0xc>
      return;
 8011932:	bf00      	nop
 8011934:	e000      	b.n	8011938 <sys_check_timeouts+0x64>
      return;
 8011936:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011938:	3710      	adds	r7, #16
 801193a:	46bd      	mov	sp, r7
 801193c:	bd80      	pop	{r7, pc}
 801193e:	bf00      	nop
 8011940:	2001028c 	.word	0x2001028c
 8011944:	20010290 	.word	0x20010290

08011948 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b082      	sub	sp, #8
 801194c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801194e:	4b16      	ldr	r3, [pc, #88]	; (80119a8 <sys_timeouts_sleeptime+0x60>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d102      	bne.n	801195c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011956:	f04f 33ff 	mov.w	r3, #4294967295
 801195a:	e020      	b.n	801199e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801195c:	f7f2 ff20 	bl	80047a0 <sys_now>
 8011960:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011962:	4b11      	ldr	r3, [pc, #68]	; (80119a8 <sys_timeouts_sleeptime+0x60>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	685a      	ldr	r2, [r3, #4]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	1ad3      	subs	r3, r2, r3
 801196c:	0fdb      	lsrs	r3, r3, #31
 801196e:	f003 0301 	and.w	r3, r3, #1
 8011972:	b2db      	uxtb	r3, r3
 8011974:	2b00      	cmp	r3, #0
 8011976:	d001      	beq.n	801197c <sys_timeouts_sleeptime+0x34>
    return 0;
 8011978:	2300      	movs	r3, #0
 801197a:	e010      	b.n	801199e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801197c:	4b0a      	ldr	r3, [pc, #40]	; (80119a8 <sys_timeouts_sleeptime+0x60>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	685a      	ldr	r2, [r3, #4]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	1ad3      	subs	r3, r2, r3
 8011986:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011988:	683b      	ldr	r3, [r7, #0]
 801198a:	2b00      	cmp	r3, #0
 801198c:	da06      	bge.n	801199c <sys_timeouts_sleeptime+0x54>
 801198e:	4b07      	ldr	r3, [pc, #28]	; (80119ac <sys_timeouts_sleeptime+0x64>)
 8011990:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011994:	4906      	ldr	r1, [pc, #24]	; (80119b0 <sys_timeouts_sleeptime+0x68>)
 8011996:	4807      	ldr	r0, [pc, #28]	; (80119b4 <sys_timeouts_sleeptime+0x6c>)
 8011998:	f004 ffa6 	bl	80168e8 <iprintf>
    return ret;
 801199c:	683b      	ldr	r3, [r7, #0]
  }
}
 801199e:	4618      	mov	r0, r3
 80119a0:	3708      	adds	r7, #8
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}
 80119a6:	bf00      	nop
 80119a8:	2001028c 	.word	0x2001028c
 80119ac:	08019df8 	.word	0x08019df8
 80119b0:	08019ecc 	.word	0x08019ecc
 80119b4:	08019e6c 	.word	0x08019e6c

080119b8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80119bc:	f004 ffac 	bl	8016918 <rand>
 80119c0:	4603      	mov	r3, r0
 80119c2:	b29b      	uxth	r3, r3
 80119c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80119ce:	b29a      	uxth	r2, r3
 80119d0:	4b01      	ldr	r3, [pc, #4]	; (80119d8 <udp_init+0x20>)
 80119d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80119d4:	bf00      	nop
 80119d6:	bd80      	pop	{r7, pc}
 80119d8:	20000018 	.word	0x20000018

080119dc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80119dc:	b480      	push	{r7}
 80119de:	b083      	sub	sp, #12
 80119e0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80119e2:	2300      	movs	r3, #0
 80119e4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80119e6:	4b17      	ldr	r3, [pc, #92]	; (8011a44 <udp_new_port+0x68>)
 80119e8:	881b      	ldrh	r3, [r3, #0]
 80119ea:	1c5a      	adds	r2, r3, #1
 80119ec:	b291      	uxth	r1, r2
 80119ee:	4a15      	ldr	r2, [pc, #84]	; (8011a44 <udp_new_port+0x68>)
 80119f0:	8011      	strh	r1, [r2, #0]
 80119f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d103      	bne.n	8011a02 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80119fa:	4b12      	ldr	r3, [pc, #72]	; (8011a44 <udp_new_port+0x68>)
 80119fc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011a00:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a02:	4b11      	ldr	r3, [pc, #68]	; (8011a48 <udp_new_port+0x6c>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	603b      	str	r3, [r7, #0]
 8011a08:	e011      	b.n	8011a2e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	8a5a      	ldrh	r2, [r3, #18]
 8011a0e:	4b0d      	ldr	r3, [pc, #52]	; (8011a44 <udp_new_port+0x68>)
 8011a10:	881b      	ldrh	r3, [r3, #0]
 8011a12:	429a      	cmp	r2, r3
 8011a14:	d108      	bne.n	8011a28 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011a16:	88fb      	ldrh	r3, [r7, #6]
 8011a18:	3301      	adds	r3, #1
 8011a1a:	80fb      	strh	r3, [r7, #6]
 8011a1c:	88fb      	ldrh	r3, [r7, #6]
 8011a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011a22:	d3e0      	bcc.n	80119e6 <udp_new_port+0xa>
        return 0;
 8011a24:	2300      	movs	r3, #0
 8011a26:	e007      	b.n	8011a38 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	68db      	ldr	r3, [r3, #12]
 8011a2c:	603b      	str	r3, [r7, #0]
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d1ea      	bne.n	8011a0a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011a34:	4b03      	ldr	r3, [pc, #12]	; (8011a44 <udp_new_port+0x68>)
 8011a36:	881b      	ldrh	r3, [r3, #0]
}
 8011a38:	4618      	mov	r0, r3
 8011a3a:	370c      	adds	r7, #12
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a42:	4770      	bx	lr
 8011a44:	20000018 	.word	0x20000018
 8011a48:	20016e2c 	.word	0x20016e2c

08011a4c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	60f8      	str	r0, [r7, #12]
 8011a54:	60b9      	str	r1, [r7, #8]
 8011a56:	4613      	mov	r3, r2
 8011a58:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d105      	bne.n	8011a6c <udp_input_local_match+0x20>
 8011a60:	4b27      	ldr	r3, [pc, #156]	; (8011b00 <udp_input_local_match+0xb4>)
 8011a62:	2287      	movs	r2, #135	; 0x87
 8011a64:	4927      	ldr	r1, [pc, #156]	; (8011b04 <udp_input_local_match+0xb8>)
 8011a66:	4828      	ldr	r0, [pc, #160]	; (8011b08 <udp_input_local_match+0xbc>)
 8011a68:	f004 ff3e 	bl	80168e8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d105      	bne.n	8011a7e <udp_input_local_match+0x32>
 8011a72:	4b23      	ldr	r3, [pc, #140]	; (8011b00 <udp_input_local_match+0xb4>)
 8011a74:	2288      	movs	r2, #136	; 0x88
 8011a76:	4925      	ldr	r1, [pc, #148]	; (8011b0c <udp_input_local_match+0xc0>)
 8011a78:	4823      	ldr	r0, [pc, #140]	; (8011b08 <udp_input_local_match+0xbc>)
 8011a7a:	f004 ff35 	bl	80168e8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	7a1b      	ldrb	r3, [r3, #8]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d00b      	beq.n	8011a9e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	7a1a      	ldrb	r2, [r3, #8]
 8011a8a:	4b21      	ldr	r3, [pc, #132]	; (8011b10 <udp_input_local_match+0xc4>)
 8011a8c:	685b      	ldr	r3, [r3, #4]
 8011a8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011a92:	3301      	adds	r3, #1
 8011a94:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d001      	beq.n	8011a9e <udp_input_local_match+0x52>
    return 0;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	e02b      	b.n	8011af6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011a9e:	79fb      	ldrb	r3, [r7, #7]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d018      	beq.n	8011ad6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d013      	beq.n	8011ad2 <udp_input_local_match+0x86>
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d00f      	beq.n	8011ad2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011ab2:	4b17      	ldr	r3, [pc, #92]	; (8011b10 <udp_input_local_match+0xc4>)
 8011ab4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aba:	d00a      	beq.n	8011ad2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	681a      	ldr	r2, [r3, #0]
 8011ac0:	4b13      	ldr	r3, [pc, #76]	; (8011b10 <udp_input_local_match+0xc4>)
 8011ac2:	695b      	ldr	r3, [r3, #20]
 8011ac4:	405a      	eors	r2, r3
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	3308      	adds	r3, #8
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d110      	bne.n	8011af4 <udp_input_local_match+0xa8>
          return 1;
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	e00f      	b.n	8011af6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d009      	beq.n	8011af0 <udp_input_local_match+0xa4>
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d005      	beq.n	8011af0 <udp_input_local_match+0xa4>
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	681a      	ldr	r2, [r3, #0]
 8011ae8:	4b09      	ldr	r3, [pc, #36]	; (8011b10 <udp_input_local_match+0xc4>)
 8011aea:	695b      	ldr	r3, [r3, #20]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d101      	bne.n	8011af4 <udp_input_local_match+0xa8>
        return 1;
 8011af0:	2301      	movs	r3, #1
 8011af2:	e000      	b.n	8011af6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011af4:	2300      	movs	r3, #0
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3710      	adds	r7, #16
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	08019ee0 	.word	0x08019ee0
 8011b04:	08019f10 	.word	0x08019f10
 8011b08:	08019f34 	.word	0x08019f34
 8011b0c:	08019f5c 	.word	0x08019f5c
 8011b10:	200136e0 	.word	0x200136e0

08011b14 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011b14:	b590      	push	{r4, r7, lr}
 8011b16:	b08d      	sub	sp, #52	; 0x34
 8011b18:	af02      	add	r7, sp, #8
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d105      	bne.n	8011b34 <udp_input+0x20>
 8011b28:	4b7c      	ldr	r3, [pc, #496]	; (8011d1c <udp_input+0x208>)
 8011b2a:	22cf      	movs	r2, #207	; 0xcf
 8011b2c:	497c      	ldr	r1, [pc, #496]	; (8011d20 <udp_input+0x20c>)
 8011b2e:	487d      	ldr	r0, [pc, #500]	; (8011d24 <udp_input+0x210>)
 8011b30:	f004 feda 	bl	80168e8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d105      	bne.n	8011b46 <udp_input+0x32>
 8011b3a:	4b78      	ldr	r3, [pc, #480]	; (8011d1c <udp_input+0x208>)
 8011b3c:	22d0      	movs	r2, #208	; 0xd0
 8011b3e:	497a      	ldr	r1, [pc, #488]	; (8011d28 <udp_input+0x214>)
 8011b40:	4878      	ldr	r0, [pc, #480]	; (8011d24 <udp_input+0x210>)
 8011b42:	f004 fed1 	bl	80168e8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	895b      	ldrh	r3, [r3, #10]
 8011b4a:	2b07      	cmp	r3, #7
 8011b4c:	d803      	bhi.n	8011b56 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f7f9 fab6 	bl	800b0c0 <pbuf_free>
    goto end;
 8011b54:	e0de      	b.n	8011d14 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	685b      	ldr	r3, [r3, #4]
 8011b5a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011b5c:	4b73      	ldr	r3, [pc, #460]	; (8011d2c <udp_input+0x218>)
 8011b5e:	695a      	ldr	r2, [r3, #20]
 8011b60:	4b72      	ldr	r3, [pc, #456]	; (8011d2c <udp_input+0x218>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4619      	mov	r1, r3
 8011b66:	4610      	mov	r0, r2
 8011b68:	f003 fe20 	bl	80157ac <ip4_addr_isbroadcast_u32>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	881b      	ldrh	r3, [r3, #0]
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	4618      	mov	r0, r3
 8011b78:	f7f7 feb8 	bl	80098ec <lwip_htons>
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011b80:	697b      	ldr	r3, [r7, #20]
 8011b82:	885b      	ldrh	r3, [r3, #2]
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7f7 feb0 	bl	80098ec <lwip_htons>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011b90:	2300      	movs	r3, #0
 8011b92:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011b94:	2300      	movs	r3, #0
 8011b96:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011b98:	2300      	movs	r3, #0
 8011b9a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b9c:	4b64      	ldr	r3, [pc, #400]	; (8011d30 <udp_input+0x21c>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8011ba2:	e054      	b.n	8011c4e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba6:	8a5b      	ldrh	r3, [r3, #18]
 8011ba8:	89fa      	ldrh	r2, [r7, #14]
 8011baa:	429a      	cmp	r2, r3
 8011bac:	d14a      	bne.n	8011c44 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011bae:	7cfb      	ldrb	r3, [r7, #19]
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	6839      	ldr	r1, [r7, #0]
 8011bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011bb6:	f7ff ff49 	bl	8011a4c <udp_input_local_match>
 8011bba:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d041      	beq.n	8011c44 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc2:	7c1b      	ldrb	r3, [r3, #16]
 8011bc4:	f003 0304 	and.w	r3, r3, #4
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d11d      	bne.n	8011c08 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011bcc:	69fb      	ldr	r3, [r7, #28]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d102      	bne.n	8011bd8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd4:	61fb      	str	r3, [r7, #28]
 8011bd6:	e017      	b.n	8011c08 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011bd8:	7cfb      	ldrb	r3, [r7, #19]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d014      	beq.n	8011c08 <udp_input+0xf4>
 8011bde:	4b53      	ldr	r3, [pc, #332]	; (8011d2c <udp_input+0x218>)
 8011be0:	695b      	ldr	r3, [r3, #20]
 8011be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011be6:	d10f      	bne.n	8011c08 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011be8:	69fb      	ldr	r3, [r7, #28]
 8011bea:	681a      	ldr	r2, [r3, #0]
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	3304      	adds	r3, #4
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d008      	beq.n	8011c08 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	3304      	adds	r3, #4
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d101      	bne.n	8011c08 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c06:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0a:	8a9b      	ldrh	r3, [r3, #20]
 8011c0c:	8a3a      	ldrh	r2, [r7, #16]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d118      	bne.n	8011c44 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c14:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d005      	beq.n	8011c26 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c1c:	685a      	ldr	r2, [r3, #4]
 8011c1e:	4b43      	ldr	r3, [pc, #268]	; (8011d2c <udp_input+0x218>)
 8011c20:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d10e      	bne.n	8011c44 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011c26:	6a3b      	ldr	r3, [r7, #32]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d014      	beq.n	8011c56 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c2e:	68da      	ldr	r2, [r3, #12]
 8011c30:	6a3b      	ldr	r3, [r7, #32]
 8011c32:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011c34:	4b3e      	ldr	r3, [pc, #248]	; (8011d30 <udp_input+0x21c>)
 8011c36:	681a      	ldr	r2, [r3, #0]
 8011c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c3a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011c3c:	4a3c      	ldr	r2, [pc, #240]	; (8011d30 <udp_input+0x21c>)
 8011c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c40:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011c42:	e008      	b.n	8011c56 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c46:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c4a:	68db      	ldr	r3, [r3, #12]
 8011c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8011c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d1a7      	bne.n	8011ba4 <udp_input+0x90>
 8011c54:	e000      	b.n	8011c58 <udp_input+0x144>
        break;
 8011c56:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d101      	bne.n	8011c62 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011c5e:	69fb      	ldr	r3, [r7, #28]
 8011c60:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d002      	beq.n	8011c6e <udp_input+0x15a>
    for_us = 1;
 8011c68:	2301      	movs	r3, #1
 8011c6a:	76fb      	strb	r3, [r7, #27]
 8011c6c:	e00a      	b.n	8011c84 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	3304      	adds	r3, #4
 8011c72:	681a      	ldr	r2, [r3, #0]
 8011c74:	4b2d      	ldr	r3, [pc, #180]	; (8011d2c <udp_input+0x218>)
 8011c76:	695b      	ldr	r3, [r3, #20]
 8011c78:	429a      	cmp	r2, r3
 8011c7a:	bf0c      	ite	eq
 8011c7c:	2301      	moveq	r3, #1
 8011c7e:	2300      	movne	r3, #0
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011c84:	7efb      	ldrb	r3, [r7, #27]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d041      	beq.n	8011d0e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011c8a:	2108      	movs	r1, #8
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f7f9 f991 	bl	800afb4 <pbuf_remove_header>
 8011c92:	4603      	mov	r3, r0
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d00a      	beq.n	8011cae <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011c98:	4b20      	ldr	r3, [pc, #128]	; (8011d1c <udp_input+0x208>)
 8011c9a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011c9e:	4925      	ldr	r1, [pc, #148]	; (8011d34 <udp_input+0x220>)
 8011ca0:	4820      	ldr	r0, [pc, #128]	; (8011d24 <udp_input+0x210>)
 8011ca2:	f004 fe21 	bl	80168e8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011ca6:	6878      	ldr	r0, [r7, #4]
 8011ca8:	f7f9 fa0a 	bl	800b0c0 <pbuf_free>
      goto end;
 8011cac:	e032      	b.n	8011d14 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d012      	beq.n	8011cda <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb6:	699b      	ldr	r3, [r3, #24]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d00a      	beq.n	8011cd2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbe:	699c      	ldr	r4, [r3, #24]
 8011cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc2:	69d8      	ldr	r0, [r3, #28]
 8011cc4:	8a3b      	ldrh	r3, [r7, #16]
 8011cc6:	9300      	str	r3, [sp, #0]
 8011cc8:	4b1b      	ldr	r3, [pc, #108]	; (8011d38 <udp_input+0x224>)
 8011cca:	687a      	ldr	r2, [r7, #4]
 8011ccc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cce:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011cd0:	e021      	b.n	8011d16 <udp_input+0x202>
        pbuf_free(p);
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f7f9 f9f4 	bl	800b0c0 <pbuf_free>
        goto end;
 8011cd8:	e01c      	b.n	8011d14 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011cda:	7cfb      	ldrb	r3, [r7, #19]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d112      	bne.n	8011d06 <udp_input+0x1f2>
 8011ce0:	4b12      	ldr	r3, [pc, #72]	; (8011d2c <udp_input+0x218>)
 8011ce2:	695b      	ldr	r3, [r3, #20]
 8011ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ce8:	2be0      	cmp	r3, #224	; 0xe0
 8011cea:	d00c      	beq.n	8011d06 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011cec:	4b0f      	ldr	r3, [pc, #60]	; (8011d2c <udp_input+0x218>)
 8011cee:	899b      	ldrh	r3, [r3, #12]
 8011cf0:	3308      	adds	r3, #8
 8011cf2:	b29b      	uxth	r3, r3
 8011cf4:	b21b      	sxth	r3, r3
 8011cf6:	4619      	mov	r1, r3
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f7f9 f9ce 	bl	800b09a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011cfe:	2103      	movs	r1, #3
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f003 fa17 	bl	8015134 <icmp_dest_unreach>
      pbuf_free(p);
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f7f9 f9da 	bl	800b0c0 <pbuf_free>
  return;
 8011d0c:	e003      	b.n	8011d16 <udp_input+0x202>
    pbuf_free(p);
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7f9 f9d6 	bl	800b0c0 <pbuf_free>
  return;
 8011d14:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011d16:	372c      	adds	r7, #44	; 0x2c
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd90      	pop	{r4, r7, pc}
 8011d1c:	08019ee0 	.word	0x08019ee0
 8011d20:	08019f84 	.word	0x08019f84
 8011d24:	08019f34 	.word	0x08019f34
 8011d28:	08019f9c 	.word	0x08019f9c
 8011d2c:	200136e0 	.word	0x200136e0
 8011d30:	20016e2c 	.word	0x20016e2c
 8011d34:	08019fb8 	.word	0x08019fb8
 8011d38:	200136f0 	.word	0x200136f0

08011d3c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b088      	sub	sp, #32
 8011d40:	af02      	add	r7, sp, #8
 8011d42:	60f8      	str	r0, [r7, #12]
 8011d44:	60b9      	str	r1, [r7, #8]
 8011d46:	607a      	str	r2, [r7, #4]
 8011d48:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d109      	bne.n	8011d64 <udp_sendto_if+0x28>
 8011d50:	4b2e      	ldr	r3, [pc, #184]	; (8011e0c <udp_sendto_if+0xd0>)
 8011d52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d56:	492e      	ldr	r1, [pc, #184]	; (8011e10 <udp_sendto_if+0xd4>)
 8011d58:	482e      	ldr	r0, [pc, #184]	; (8011e14 <udp_sendto_if+0xd8>)
 8011d5a:	f004 fdc5 	bl	80168e8 <iprintf>
 8011d5e:	f06f 030f 	mvn.w	r3, #15
 8011d62:	e04f      	b.n	8011e04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d109      	bne.n	8011d7e <udp_sendto_if+0x42>
 8011d6a:	4b28      	ldr	r3, [pc, #160]	; (8011e0c <udp_sendto_if+0xd0>)
 8011d6c:	f240 2281 	movw	r2, #641	; 0x281
 8011d70:	4929      	ldr	r1, [pc, #164]	; (8011e18 <udp_sendto_if+0xdc>)
 8011d72:	4828      	ldr	r0, [pc, #160]	; (8011e14 <udp_sendto_if+0xd8>)
 8011d74:	f004 fdb8 	bl	80168e8 <iprintf>
 8011d78:	f06f 030f 	mvn.w	r3, #15
 8011d7c:	e042      	b.n	8011e04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d109      	bne.n	8011d98 <udp_sendto_if+0x5c>
 8011d84:	4b21      	ldr	r3, [pc, #132]	; (8011e0c <udp_sendto_if+0xd0>)
 8011d86:	f240 2282 	movw	r2, #642	; 0x282
 8011d8a:	4924      	ldr	r1, [pc, #144]	; (8011e1c <udp_sendto_if+0xe0>)
 8011d8c:	4821      	ldr	r0, [pc, #132]	; (8011e14 <udp_sendto_if+0xd8>)
 8011d8e:	f004 fdab 	bl	80168e8 <iprintf>
 8011d92:	f06f 030f 	mvn.w	r3, #15
 8011d96:	e035      	b.n	8011e04 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011d98:	6a3b      	ldr	r3, [r7, #32]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d109      	bne.n	8011db2 <udp_sendto_if+0x76>
 8011d9e:	4b1b      	ldr	r3, [pc, #108]	; (8011e0c <udp_sendto_if+0xd0>)
 8011da0:	f240 2283 	movw	r2, #643	; 0x283
 8011da4:	491e      	ldr	r1, [pc, #120]	; (8011e20 <udp_sendto_if+0xe4>)
 8011da6:	481b      	ldr	r0, [pc, #108]	; (8011e14 <udp_sendto_if+0xd8>)
 8011da8:	f004 fd9e 	bl	80168e8 <iprintf>
 8011dac:	f06f 030f 	mvn.w	r3, #15
 8011db0:	e028      	b.n	8011e04 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d009      	beq.n	8011dcc <udp_sendto_if+0x90>
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d005      	beq.n	8011dcc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011dc8:	2be0      	cmp	r3, #224	; 0xe0
 8011dca:	d103      	bne.n	8011dd4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011dcc:	6a3b      	ldr	r3, [r7, #32]
 8011dce:	3304      	adds	r3, #4
 8011dd0:	617b      	str	r3, [r7, #20]
 8011dd2:	e00b      	b.n	8011dec <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	681a      	ldr	r2, [r3, #0]
 8011dd8:	6a3b      	ldr	r3, [r7, #32]
 8011dda:	3304      	adds	r3, #4
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d002      	beq.n	8011de8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011de2:	f06f 0303 	mvn.w	r3, #3
 8011de6:	e00d      	b.n	8011e04 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011dec:	887a      	ldrh	r2, [r7, #2]
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	9301      	str	r3, [sp, #4]
 8011df2:	6a3b      	ldr	r3, [r7, #32]
 8011df4:	9300      	str	r3, [sp, #0]
 8011df6:	4613      	mov	r3, r2
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	68b9      	ldr	r1, [r7, #8]
 8011dfc:	68f8      	ldr	r0, [r7, #12]
 8011dfe:	f000 f811 	bl	8011e24 <udp_sendto_if_src>
 8011e02:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3718      	adds	r7, #24
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}
 8011e0c:	08019ee0 	.word	0x08019ee0
 8011e10:	0801a054 	.word	0x0801a054
 8011e14:	08019f34 	.word	0x08019f34
 8011e18:	0801a070 	.word	0x0801a070
 8011e1c:	0801a08c 	.word	0x0801a08c
 8011e20:	0801a0ac 	.word	0x0801a0ac

08011e24 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b08c      	sub	sp, #48	; 0x30
 8011e28:	af04      	add	r7, sp, #16
 8011e2a:	60f8      	str	r0, [r7, #12]
 8011e2c:	60b9      	str	r1, [r7, #8]
 8011e2e:	607a      	str	r2, [r7, #4]
 8011e30:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d109      	bne.n	8011e4c <udp_sendto_if_src+0x28>
 8011e38:	4b65      	ldr	r3, [pc, #404]	; (8011fd0 <udp_sendto_if_src+0x1ac>)
 8011e3a:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011e3e:	4965      	ldr	r1, [pc, #404]	; (8011fd4 <udp_sendto_if_src+0x1b0>)
 8011e40:	4865      	ldr	r0, [pc, #404]	; (8011fd8 <udp_sendto_if_src+0x1b4>)
 8011e42:	f004 fd51 	bl	80168e8 <iprintf>
 8011e46:	f06f 030f 	mvn.w	r3, #15
 8011e4a:	e0bc      	b.n	8011fc6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d109      	bne.n	8011e66 <udp_sendto_if_src+0x42>
 8011e52:	4b5f      	ldr	r3, [pc, #380]	; (8011fd0 <udp_sendto_if_src+0x1ac>)
 8011e54:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011e58:	4960      	ldr	r1, [pc, #384]	; (8011fdc <udp_sendto_if_src+0x1b8>)
 8011e5a:	485f      	ldr	r0, [pc, #380]	; (8011fd8 <udp_sendto_if_src+0x1b4>)
 8011e5c:	f004 fd44 	bl	80168e8 <iprintf>
 8011e60:	f06f 030f 	mvn.w	r3, #15
 8011e64:	e0af      	b.n	8011fc6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d109      	bne.n	8011e80 <udp_sendto_if_src+0x5c>
 8011e6c:	4b58      	ldr	r3, [pc, #352]	; (8011fd0 <udp_sendto_if_src+0x1ac>)
 8011e6e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011e72:	495b      	ldr	r1, [pc, #364]	; (8011fe0 <udp_sendto_if_src+0x1bc>)
 8011e74:	4858      	ldr	r0, [pc, #352]	; (8011fd8 <udp_sendto_if_src+0x1b4>)
 8011e76:	f004 fd37 	bl	80168e8 <iprintf>
 8011e7a:	f06f 030f 	mvn.w	r3, #15
 8011e7e:	e0a2      	b.n	8011fc6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d109      	bne.n	8011e9a <udp_sendto_if_src+0x76>
 8011e86:	4b52      	ldr	r3, [pc, #328]	; (8011fd0 <udp_sendto_if_src+0x1ac>)
 8011e88:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011e8c:	4955      	ldr	r1, [pc, #340]	; (8011fe4 <udp_sendto_if_src+0x1c0>)
 8011e8e:	4852      	ldr	r0, [pc, #328]	; (8011fd8 <udp_sendto_if_src+0x1b4>)
 8011e90:	f004 fd2a 	bl	80168e8 <iprintf>
 8011e94:	f06f 030f 	mvn.w	r3, #15
 8011e98:	e095      	b.n	8011fc6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d109      	bne.n	8011eb4 <udp_sendto_if_src+0x90>
 8011ea0:	4b4b      	ldr	r3, [pc, #300]	; (8011fd0 <udp_sendto_if_src+0x1ac>)
 8011ea2:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011ea6:	4950      	ldr	r1, [pc, #320]	; (8011fe8 <udp_sendto_if_src+0x1c4>)
 8011ea8:	484b      	ldr	r0, [pc, #300]	; (8011fd8 <udp_sendto_if_src+0x1b4>)
 8011eaa:	f004 fd1d 	bl	80168e8 <iprintf>
 8011eae:	f06f 030f 	mvn.w	r3, #15
 8011eb2:	e088      	b.n	8011fc6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	8a5b      	ldrh	r3, [r3, #18]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d10f      	bne.n	8011edc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011ebc:	68f9      	ldr	r1, [r7, #12]
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	8a5b      	ldrh	r3, [r3, #18]
 8011ec2:	461a      	mov	r2, r3
 8011ec4:	68f8      	ldr	r0, [r7, #12]
 8011ec6:	f000 f893 	bl	8011ff0 <udp_bind>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011ece:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d002      	beq.n	8011edc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011ed6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011eda:	e074      	b.n	8011fc6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011edc:	68bb      	ldr	r3, [r7, #8]
 8011ede:	891b      	ldrh	r3, [r3, #8]
 8011ee0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011ee4:	4293      	cmp	r3, r2
 8011ee6:	d902      	bls.n	8011eee <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8011eec:	e06b      	b.n	8011fc6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011eee:	2108      	movs	r1, #8
 8011ef0:	68b8      	ldr	r0, [r7, #8]
 8011ef2:	f7f9 f84f 	bl	800af94 <pbuf_add_header>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d015      	beq.n	8011f28 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011efc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f00:	2108      	movs	r1, #8
 8011f02:	2022      	movs	r0, #34	; 0x22
 8011f04:	f7f8 fdfc 	bl	800ab00 <pbuf_alloc>
 8011f08:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011f0a:	69fb      	ldr	r3, [r7, #28]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d102      	bne.n	8011f16 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011f10:	f04f 33ff 	mov.w	r3, #4294967295
 8011f14:	e057      	b.n	8011fc6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	891b      	ldrh	r3, [r3, #8]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d006      	beq.n	8011f2c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011f1e:	68b9      	ldr	r1, [r7, #8]
 8011f20:	69f8      	ldr	r0, [r7, #28]
 8011f22:	f7f9 f9f1 	bl	800b308 <pbuf_chain>
 8011f26:	e001      	b.n	8011f2c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011f2c:	69fb      	ldr	r3, [r7, #28]
 8011f2e:	895b      	ldrh	r3, [r3, #10]
 8011f30:	2b07      	cmp	r3, #7
 8011f32:	d806      	bhi.n	8011f42 <udp_sendto_if_src+0x11e>
 8011f34:	4b26      	ldr	r3, [pc, #152]	; (8011fd0 <udp_sendto_if_src+0x1ac>)
 8011f36:	f240 320e 	movw	r2, #782	; 0x30e
 8011f3a:	492c      	ldr	r1, [pc, #176]	; (8011fec <udp_sendto_if_src+0x1c8>)
 8011f3c:	4826      	ldr	r0, [pc, #152]	; (8011fd8 <udp_sendto_if_src+0x1b4>)
 8011f3e:	f004 fcd3 	bl	80168e8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011f42:	69fb      	ldr	r3, [r7, #28]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	8a5b      	ldrh	r3, [r3, #18]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7f7 fccd 	bl	80098ec <lwip_htons>
 8011f52:	4603      	mov	r3, r0
 8011f54:	461a      	mov	r2, r3
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011f5a:	887b      	ldrh	r3, [r7, #2]
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f7f7 fcc5 	bl	80098ec <lwip_htons>
 8011f62:	4603      	mov	r3, r0
 8011f64:	461a      	mov	r2, r3
 8011f66:	697b      	ldr	r3, [r7, #20]
 8011f68:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011f6a:	697b      	ldr	r3, [r7, #20]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	719a      	strb	r2, [r3, #6]
 8011f70:	2200      	movs	r2, #0
 8011f72:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011f74:	69fb      	ldr	r3, [r7, #28]
 8011f76:	891b      	ldrh	r3, [r3, #8]
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7f7 fcb7 	bl	80098ec <lwip_htons>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	461a      	mov	r2, r3
 8011f82:	697b      	ldr	r3, [r7, #20]
 8011f84:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011f86:	2311      	movs	r3, #17
 8011f88:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	7adb      	ldrb	r3, [r3, #11]
 8011f8e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	7a9b      	ldrb	r3, [r3, #10]
 8011f94:	7cb9      	ldrb	r1, [r7, #18]
 8011f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f98:	9202      	str	r2, [sp, #8]
 8011f9a:	7cfa      	ldrb	r2, [r7, #19]
 8011f9c:	9201      	str	r2, [sp, #4]
 8011f9e:	9300      	str	r3, [sp, #0]
 8011fa0:	460b      	mov	r3, r1
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011fa6:	69f8      	ldr	r0, [r7, #28]
 8011fa8:	f003 fb52 	bl	8015650 <ip4_output_if_src>
 8011fac:	4603      	mov	r3, r0
 8011fae:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011fb0:	69fa      	ldr	r2, [r7, #28]
 8011fb2:	68bb      	ldr	r3, [r7, #8]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d004      	beq.n	8011fc2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011fb8:	69f8      	ldr	r0, [r7, #28]
 8011fba:	f7f9 f881 	bl	800b0c0 <pbuf_free>
    q = NULL;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011fc2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3720      	adds	r7, #32
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
 8011fce:	bf00      	nop
 8011fd0:	08019ee0 	.word	0x08019ee0
 8011fd4:	0801a0cc 	.word	0x0801a0cc
 8011fd8:	08019f34 	.word	0x08019f34
 8011fdc:	0801a0ec 	.word	0x0801a0ec
 8011fe0:	0801a10c 	.word	0x0801a10c
 8011fe4:	0801a130 	.word	0x0801a130
 8011fe8:	0801a154 	.word	0x0801a154
 8011fec:	0801a178 	.word	0x0801a178

08011ff0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b086      	sub	sp, #24
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	60f8      	str	r0, [r7, #12]
 8011ff8:	60b9      	str	r1, [r7, #8]
 8011ffa:	4613      	mov	r3, r2
 8011ffc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d101      	bne.n	8012008 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012004:	4b39      	ldr	r3, [pc, #228]	; (80120ec <udp_bind+0xfc>)
 8012006:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d109      	bne.n	8012022 <udp_bind+0x32>
 801200e:	4b38      	ldr	r3, [pc, #224]	; (80120f0 <udp_bind+0x100>)
 8012010:	f240 32b7 	movw	r2, #951	; 0x3b7
 8012014:	4937      	ldr	r1, [pc, #220]	; (80120f4 <udp_bind+0x104>)
 8012016:	4838      	ldr	r0, [pc, #224]	; (80120f8 <udp_bind+0x108>)
 8012018:	f004 fc66 	bl	80168e8 <iprintf>
 801201c:	f06f 030f 	mvn.w	r3, #15
 8012020:	e060      	b.n	80120e4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012022:	2300      	movs	r3, #0
 8012024:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012026:	4b35      	ldr	r3, [pc, #212]	; (80120fc <udp_bind+0x10c>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	617b      	str	r3, [r7, #20]
 801202c:	e009      	b.n	8012042 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801202e:	68fa      	ldr	r2, [r7, #12]
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	429a      	cmp	r2, r3
 8012034:	d102      	bne.n	801203c <udp_bind+0x4c>
      rebind = 1;
 8012036:	2301      	movs	r3, #1
 8012038:	74fb      	strb	r3, [r7, #19]
      break;
 801203a:	e005      	b.n	8012048 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801203c:	697b      	ldr	r3, [r7, #20]
 801203e:	68db      	ldr	r3, [r3, #12]
 8012040:	617b      	str	r3, [r7, #20]
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d1f2      	bne.n	801202e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012048:	88fb      	ldrh	r3, [r7, #6]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d109      	bne.n	8012062 <udp_bind+0x72>
    port = udp_new_port();
 801204e:	f7ff fcc5 	bl	80119dc <udp_new_port>
 8012052:	4603      	mov	r3, r0
 8012054:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012056:	88fb      	ldrh	r3, [r7, #6]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d12c      	bne.n	80120b6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801205c:	f06f 0307 	mvn.w	r3, #7
 8012060:	e040      	b.n	80120e4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012062:	4b26      	ldr	r3, [pc, #152]	; (80120fc <udp_bind+0x10c>)
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	617b      	str	r3, [r7, #20]
 8012068:	e022      	b.n	80120b0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801206a:	68fa      	ldr	r2, [r7, #12]
 801206c:	697b      	ldr	r3, [r7, #20]
 801206e:	429a      	cmp	r2, r3
 8012070:	d01b      	beq.n	80120aa <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	8a5b      	ldrh	r3, [r3, #18]
 8012076:	88fa      	ldrh	r2, [r7, #6]
 8012078:	429a      	cmp	r2, r3
 801207a:	d116      	bne.n	80120aa <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	681a      	ldr	r2, [r3, #0]
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012084:	429a      	cmp	r2, r3
 8012086:	d00d      	beq.n	80120a4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d00a      	beq.n	80120a4 <udp_bind+0xb4>
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d006      	beq.n	80120a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012096:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012098:	2b00      	cmp	r3, #0
 801209a:	d003      	beq.n	80120a4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d102      	bne.n	80120aa <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80120a4:	f06f 0307 	mvn.w	r3, #7
 80120a8:	e01c      	b.n	80120e4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80120aa:	697b      	ldr	r3, [r7, #20]
 80120ac:	68db      	ldr	r3, [r3, #12]
 80120ae:	617b      	str	r3, [r7, #20]
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d1d9      	bne.n	801206a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d002      	beq.n	80120c2 <udp_bind+0xd2>
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	e000      	b.n	80120c4 <udp_bind+0xd4>
 80120c2:	2300      	movs	r3, #0
 80120c4:	68fa      	ldr	r2, [r7, #12]
 80120c6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	88fa      	ldrh	r2, [r7, #6]
 80120cc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80120ce:	7cfb      	ldrb	r3, [r7, #19]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d106      	bne.n	80120e2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80120d4:	4b09      	ldr	r3, [pc, #36]	; (80120fc <udp_bind+0x10c>)
 80120d6:	681a      	ldr	r2, [r3, #0]
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80120dc:	4a07      	ldr	r2, [pc, #28]	; (80120fc <udp_bind+0x10c>)
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80120e2:	2300      	movs	r3, #0
}
 80120e4:	4618      	mov	r0, r3
 80120e6:	3718      	adds	r7, #24
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	0803ad88 	.word	0x0803ad88
 80120f0:	08019ee0 	.word	0x08019ee0
 80120f4:	0801a1a8 	.word	0x0801a1a8
 80120f8:	08019f34 	.word	0x08019f34
 80120fc:	20016e2c 	.word	0x20016e2c

08012100 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b086      	sub	sp, #24
 8012104:	af00      	add	r7, sp, #0
 8012106:	60f8      	str	r0, [r7, #12]
 8012108:	60b9      	str	r1, [r7, #8]
 801210a:	4613      	mov	r3, r2
 801210c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d109      	bne.n	8012128 <udp_connect+0x28>
 8012114:	4b2c      	ldr	r3, [pc, #176]	; (80121c8 <udp_connect+0xc8>)
 8012116:	f240 4235 	movw	r2, #1077	; 0x435
 801211a:	492c      	ldr	r1, [pc, #176]	; (80121cc <udp_connect+0xcc>)
 801211c:	482c      	ldr	r0, [pc, #176]	; (80121d0 <udp_connect+0xd0>)
 801211e:	f004 fbe3 	bl	80168e8 <iprintf>
 8012122:	f06f 030f 	mvn.w	r3, #15
 8012126:	e04b      	b.n	80121c0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d109      	bne.n	8012142 <udp_connect+0x42>
 801212e:	4b26      	ldr	r3, [pc, #152]	; (80121c8 <udp_connect+0xc8>)
 8012130:	f240 4236 	movw	r2, #1078	; 0x436
 8012134:	4927      	ldr	r1, [pc, #156]	; (80121d4 <udp_connect+0xd4>)
 8012136:	4826      	ldr	r0, [pc, #152]	; (80121d0 <udp_connect+0xd0>)
 8012138:	f004 fbd6 	bl	80168e8 <iprintf>
 801213c:	f06f 030f 	mvn.w	r3, #15
 8012140:	e03e      	b.n	80121c0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	8a5b      	ldrh	r3, [r3, #18]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d10f      	bne.n	801216a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801214a:	68f9      	ldr	r1, [r7, #12]
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	8a5b      	ldrh	r3, [r3, #18]
 8012150:	461a      	mov	r2, r3
 8012152:	68f8      	ldr	r0, [r7, #12]
 8012154:	f7ff ff4c 	bl	8011ff0 <udp_bind>
 8012158:	4603      	mov	r3, r0
 801215a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801215c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d002      	beq.n	801216a <udp_connect+0x6a>
      return err;
 8012164:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012168:	e02a      	b.n	80121c0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d002      	beq.n	8012176 <udp_connect+0x76>
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	e000      	b.n	8012178 <udp_connect+0x78>
 8012176:	2300      	movs	r3, #0
 8012178:	68fa      	ldr	r2, [r7, #12]
 801217a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	88fa      	ldrh	r2, [r7, #6]
 8012180:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	7c1b      	ldrb	r3, [r3, #16]
 8012186:	f043 0304 	orr.w	r3, r3, #4
 801218a:	b2da      	uxtb	r2, r3
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012190:	4b11      	ldr	r3, [pc, #68]	; (80121d8 <udp_connect+0xd8>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	617b      	str	r3, [r7, #20]
 8012196:	e008      	b.n	80121aa <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012198:	68fa      	ldr	r2, [r7, #12]
 801219a:	697b      	ldr	r3, [r7, #20]
 801219c:	429a      	cmp	r2, r3
 801219e:	d101      	bne.n	80121a4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80121a0:	2300      	movs	r3, #0
 80121a2:	e00d      	b.n	80121c0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	617b      	str	r3, [r7, #20]
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d1f3      	bne.n	8012198 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80121b0:	4b09      	ldr	r3, [pc, #36]	; (80121d8 <udp_connect+0xd8>)
 80121b2:	681a      	ldr	r2, [r3, #0]
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80121b8:	4a07      	ldr	r2, [pc, #28]	; (80121d8 <udp_connect+0xd8>)
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80121be:	2300      	movs	r3, #0
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3718      	adds	r7, #24
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}
 80121c8:	08019ee0 	.word	0x08019ee0
 80121cc:	0801a1c0 	.word	0x0801a1c0
 80121d0:	08019f34 	.word	0x08019f34
 80121d4:	0801a1dc 	.word	0x0801a1dc
 80121d8:	20016e2c 	.word	0x20016e2c

080121dc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b084      	sub	sp, #16
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	60f8      	str	r0, [r7, #12]
 80121e4:	60b9      	str	r1, [r7, #8]
 80121e6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d107      	bne.n	80121fe <udp_recv+0x22>
 80121ee:	4b08      	ldr	r3, [pc, #32]	; (8012210 <udp_recv+0x34>)
 80121f0:	f240 428a 	movw	r2, #1162	; 0x48a
 80121f4:	4907      	ldr	r1, [pc, #28]	; (8012214 <udp_recv+0x38>)
 80121f6:	4808      	ldr	r0, [pc, #32]	; (8012218 <udp_recv+0x3c>)
 80121f8:	f004 fb76 	bl	80168e8 <iprintf>
 80121fc:	e005      	b.n	801220a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	68ba      	ldr	r2, [r7, #8]
 8012202:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	687a      	ldr	r2, [r7, #4]
 8012208:	61da      	str	r2, [r3, #28]
}
 801220a:	3710      	adds	r7, #16
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}
 8012210:	08019ee0 	.word	0x08019ee0
 8012214:	0801a214 	.word	0x0801a214
 8012218:	08019f34 	.word	0x08019f34

0801221c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801221c:	b580      	push	{r7, lr}
 801221e:	b084      	sub	sp, #16
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d107      	bne.n	801223a <udp_remove+0x1e>
 801222a:	4b19      	ldr	r3, [pc, #100]	; (8012290 <udp_remove+0x74>)
 801222c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012230:	4918      	ldr	r1, [pc, #96]	; (8012294 <udp_remove+0x78>)
 8012232:	4819      	ldr	r0, [pc, #100]	; (8012298 <udp_remove+0x7c>)
 8012234:	f004 fb58 	bl	80168e8 <iprintf>
 8012238:	e026      	b.n	8012288 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801223a:	4b18      	ldr	r3, [pc, #96]	; (801229c <udp_remove+0x80>)
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	687a      	ldr	r2, [r7, #4]
 8012240:	429a      	cmp	r2, r3
 8012242:	d105      	bne.n	8012250 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012244:	4b15      	ldr	r3, [pc, #84]	; (801229c <udp_remove+0x80>)
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	68db      	ldr	r3, [r3, #12]
 801224a:	4a14      	ldr	r2, [pc, #80]	; (801229c <udp_remove+0x80>)
 801224c:	6013      	str	r3, [r2, #0]
 801224e:	e017      	b.n	8012280 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012250:	4b12      	ldr	r3, [pc, #72]	; (801229c <udp_remove+0x80>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	60fb      	str	r3, [r7, #12]
 8012256:	e010      	b.n	801227a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	68db      	ldr	r3, [r3, #12]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d009      	beq.n	8012274 <udp_remove+0x58>
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	687a      	ldr	r2, [r7, #4]
 8012266:	429a      	cmp	r2, r3
 8012268:	d104      	bne.n	8012274 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	68da      	ldr	r2, [r3, #12]
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	60da      	str	r2, [r3, #12]
        break;
 8012272:	e005      	b.n	8012280 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	68db      	ldr	r3, [r3, #12]
 8012278:	60fb      	str	r3, [r7, #12]
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2b00      	cmp	r3, #0
 801227e:	d1eb      	bne.n	8012258 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012280:	6879      	ldr	r1, [r7, #4]
 8012282:	2000      	movs	r0, #0
 8012284:	f7f8 f870 	bl	800a368 <memp_free>
}
 8012288:	3710      	adds	r7, #16
 801228a:	46bd      	mov	sp, r7
 801228c:	bd80      	pop	{r7, pc}
 801228e:	bf00      	nop
 8012290:	08019ee0 	.word	0x08019ee0
 8012294:	0801a22c 	.word	0x0801a22c
 8012298:	08019f34 	.word	0x08019f34
 801229c:	20016e2c 	.word	0x20016e2c

080122a0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80122a0:	b580      	push	{r7, lr}
 80122a2:	b082      	sub	sp, #8
 80122a4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80122a6:	2000      	movs	r0, #0
 80122a8:	f7f8 f80c 	bl	800a2c4 <memp_malloc>
 80122ac:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d007      	beq.n	80122c4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80122b4:	2220      	movs	r2, #32
 80122b6:	2100      	movs	r1, #0
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f004 fb0c 	bl	80168d6 <memset>
    pcb->ttl = UDP_TTL;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	22ff      	movs	r2, #255	; 0xff
 80122c2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80122c4:	687b      	ldr	r3, [r7, #4]
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	3708      	adds	r7, #8
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd80      	pop	{r7, pc}
	...

080122d0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80122d0:	b480      	push	{r7}
 80122d2:	b085      	sub	sp, #20
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	6078      	str	r0, [r7, #4]
 80122d8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d01e      	beq.n	801231e <udp_netif_ip_addr_changed+0x4e>
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d01a      	beq.n	801231e <udp_netif_ip_addr_changed+0x4e>
 80122e8:	683b      	ldr	r3, [r7, #0]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d017      	beq.n	801231e <udp_netif_ip_addr_changed+0x4e>
 80122ee:	683b      	ldr	r3, [r7, #0]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d013      	beq.n	801231e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80122f6:	4b0d      	ldr	r3, [pc, #52]	; (801232c <udp_netif_ip_addr_changed+0x5c>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	60fb      	str	r3, [r7, #12]
 80122fc:	e00c      	b.n	8012318 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	681a      	ldr	r2, [r3, #0]
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	429a      	cmp	r2, r3
 8012308:	d103      	bne.n	8012312 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	68db      	ldr	r3, [r3, #12]
 8012316:	60fb      	str	r3, [r7, #12]
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d1ef      	bne.n	80122fe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801231e:	bf00      	nop
 8012320:	3714      	adds	r7, #20
 8012322:	46bd      	mov	sp, r7
 8012324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012328:	4770      	bx	lr
 801232a:	bf00      	nop
 801232c:	20016e2c 	.word	0x20016e2c

08012330 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012330:	b580      	push	{r7, lr}
 8012332:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012334:	4b20      	ldr	r3, [pc, #128]	; (80123b8 <dhcp_inc_pcb_refcount+0x88>)
 8012336:	781b      	ldrb	r3, [r3, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d133      	bne.n	80123a4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801233c:	4b1f      	ldr	r3, [pc, #124]	; (80123bc <dhcp_inc_pcb_refcount+0x8c>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d005      	beq.n	8012350 <dhcp_inc_pcb_refcount+0x20>
 8012344:	4b1e      	ldr	r3, [pc, #120]	; (80123c0 <dhcp_inc_pcb_refcount+0x90>)
 8012346:	22e5      	movs	r2, #229	; 0xe5
 8012348:	491e      	ldr	r1, [pc, #120]	; (80123c4 <dhcp_inc_pcb_refcount+0x94>)
 801234a:	481f      	ldr	r0, [pc, #124]	; (80123c8 <dhcp_inc_pcb_refcount+0x98>)
 801234c:	f004 facc 	bl	80168e8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012350:	f7ff ffa6 	bl	80122a0 <udp_new>
 8012354:	4602      	mov	r2, r0
 8012356:	4b19      	ldr	r3, [pc, #100]	; (80123bc <dhcp_inc_pcb_refcount+0x8c>)
 8012358:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 801235a:	4b18      	ldr	r3, [pc, #96]	; (80123bc <dhcp_inc_pcb_refcount+0x8c>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d102      	bne.n	8012368 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012362:	f04f 33ff 	mov.w	r3, #4294967295
 8012366:	e024      	b.n	80123b2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012368:	4b14      	ldr	r3, [pc, #80]	; (80123bc <dhcp_inc_pcb_refcount+0x8c>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	7a5a      	ldrb	r2, [r3, #9]
 801236e:	4b13      	ldr	r3, [pc, #76]	; (80123bc <dhcp_inc_pcb_refcount+0x8c>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	f042 0220 	orr.w	r2, r2, #32
 8012376:	b2d2      	uxtb	r2, r2
 8012378:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801237a:	4b10      	ldr	r3, [pc, #64]	; (80123bc <dhcp_inc_pcb_refcount+0x8c>)
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	2244      	movs	r2, #68	; 0x44
 8012380:	4912      	ldr	r1, [pc, #72]	; (80123cc <dhcp_inc_pcb_refcount+0x9c>)
 8012382:	4618      	mov	r0, r3
 8012384:	f7ff fe34 	bl	8011ff0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012388:	4b0c      	ldr	r3, [pc, #48]	; (80123bc <dhcp_inc_pcb_refcount+0x8c>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	2243      	movs	r2, #67	; 0x43
 801238e:	490f      	ldr	r1, [pc, #60]	; (80123cc <dhcp_inc_pcb_refcount+0x9c>)
 8012390:	4618      	mov	r0, r3
 8012392:	f7ff feb5 	bl	8012100 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012396:	4b09      	ldr	r3, [pc, #36]	; (80123bc <dhcp_inc_pcb_refcount+0x8c>)
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	2200      	movs	r2, #0
 801239c:	490c      	ldr	r1, [pc, #48]	; (80123d0 <dhcp_inc_pcb_refcount+0xa0>)
 801239e:	4618      	mov	r0, r3
 80123a0:	f7ff ff1c 	bl	80121dc <udp_recv>
  }

  dhcp_pcb_refcount++;
 80123a4:	4b04      	ldr	r3, [pc, #16]	; (80123b8 <dhcp_inc_pcb_refcount+0x88>)
 80123a6:	781b      	ldrb	r3, [r3, #0]
 80123a8:	3301      	adds	r3, #1
 80123aa:	b2da      	uxtb	r2, r3
 80123ac:	4b02      	ldr	r3, [pc, #8]	; (80123b8 <dhcp_inc_pcb_refcount+0x88>)
 80123ae:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80123b0:	2300      	movs	r3, #0
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	2001029c 	.word	0x2001029c
 80123bc:	20010298 	.word	0x20010298
 80123c0:	0801a244 	.word	0x0801a244
 80123c4:	0801a27c 	.word	0x0801a27c
 80123c8:	0801a2a4 	.word	0x0801a2a4
 80123cc:	0803ad88 	.word	0x0803ad88
 80123d0:	08013ca1 	.word	0x08013ca1

080123d4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80123d8:	4b0e      	ldr	r3, [pc, #56]	; (8012414 <dhcp_dec_pcb_refcount+0x40>)
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d105      	bne.n	80123ec <dhcp_dec_pcb_refcount+0x18>
 80123e0:	4b0d      	ldr	r3, [pc, #52]	; (8012418 <dhcp_dec_pcb_refcount+0x44>)
 80123e2:	22ff      	movs	r2, #255	; 0xff
 80123e4:	490d      	ldr	r1, [pc, #52]	; (801241c <dhcp_dec_pcb_refcount+0x48>)
 80123e6:	480e      	ldr	r0, [pc, #56]	; (8012420 <dhcp_dec_pcb_refcount+0x4c>)
 80123e8:	f004 fa7e 	bl	80168e8 <iprintf>
  dhcp_pcb_refcount--;
 80123ec:	4b09      	ldr	r3, [pc, #36]	; (8012414 <dhcp_dec_pcb_refcount+0x40>)
 80123ee:	781b      	ldrb	r3, [r3, #0]
 80123f0:	3b01      	subs	r3, #1
 80123f2:	b2da      	uxtb	r2, r3
 80123f4:	4b07      	ldr	r3, [pc, #28]	; (8012414 <dhcp_dec_pcb_refcount+0x40>)
 80123f6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80123f8:	4b06      	ldr	r3, [pc, #24]	; (8012414 <dhcp_dec_pcb_refcount+0x40>)
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d107      	bne.n	8012410 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012400:	4b08      	ldr	r3, [pc, #32]	; (8012424 <dhcp_dec_pcb_refcount+0x50>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	4618      	mov	r0, r3
 8012406:	f7ff ff09 	bl	801221c <udp_remove>
    dhcp_pcb = NULL;
 801240a:	4b06      	ldr	r3, [pc, #24]	; (8012424 <dhcp_dec_pcb_refcount+0x50>)
 801240c:	2200      	movs	r2, #0
 801240e:	601a      	str	r2, [r3, #0]
  }
}
 8012410:	bf00      	nop
 8012412:	bd80      	pop	{r7, pc}
 8012414:	2001029c 	.word	0x2001029c
 8012418:	0801a244 	.word	0x0801a244
 801241c:	0801a2cc 	.word	0x0801a2cc
 8012420:	0801a2a4 	.word	0x0801a2a4
 8012424:	20010298 	.word	0x20010298

08012428 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012434:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012436:	210c      	movs	r1, #12
 8012438:	68f8      	ldr	r0, [r7, #12]
 801243a:	f001 f872 	bl	8013522 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801243e:	4b06      	ldr	r3, [pc, #24]	; (8012458 <dhcp_handle_nak+0x30>)
 8012440:	4a05      	ldr	r2, [pc, #20]	; (8012458 <dhcp_handle_nak+0x30>)
 8012442:	4905      	ldr	r1, [pc, #20]	; (8012458 <dhcp_handle_nak+0x30>)
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f7f8 f931 	bl	800a6ac <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f000 fc5a 	bl	8012d04 <dhcp_discover>
}
 8012450:	bf00      	nop
 8012452:	3710      	adds	r7, #16
 8012454:	46bd      	mov	sp, r7
 8012456:	bd80      	pop	{r7, pc}
 8012458:	0803ad88 	.word	0x0803ad88

0801245c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b084      	sub	sp, #16
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012468:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801246a:	2108      	movs	r1, #8
 801246c:	68f8      	ldr	r0, [r7, #12]
 801246e:	f001 f858 	bl	8013522 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	331c      	adds	r3, #28
 8012476:	2200      	movs	r2, #0
 8012478:	4619      	mov	r1, r3
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f002 fb58 	bl	8014b30 <etharp_query>
 8012480:	4603      	mov	r3, r0
 8012482:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	799b      	ldrb	r3, [r3, #6]
 8012488:	2bff      	cmp	r3, #255	; 0xff
 801248a:	d005      	beq.n	8012498 <dhcp_check+0x3c>
    dhcp->tries++;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	799b      	ldrb	r3, [r3, #6]
 8012490:	3301      	adds	r3, #1
 8012492:	b2da      	uxtb	r2, r3
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012498:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801249c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801249e:	893b      	ldrh	r3, [r7, #8]
 80124a0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80124a4:	4a06      	ldr	r2, [pc, #24]	; (80124c0 <dhcp_check+0x64>)
 80124a6:	fb82 1203 	smull	r1, r2, r2, r3
 80124aa:	1152      	asrs	r2, r2, #5
 80124ac:	17db      	asrs	r3, r3, #31
 80124ae:	1ad3      	subs	r3, r2, r3
 80124b0:	b29a      	uxth	r2, r3
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80124b6:	bf00      	nop
 80124b8:	3710      	adds	r7, #16
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	10624dd3 	.word	0x10624dd3

080124c4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b084      	sub	sp, #16
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124d2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80124d4:	4b0c      	ldr	r3, [pc, #48]	; (8012508 <dhcp_handle_offer+0x44>)
 80124d6:	789b      	ldrb	r3, [r3, #2]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d011      	beq.n	8012500 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	2200      	movs	r2, #0
 80124e0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80124e2:	4b0a      	ldr	r3, [pc, #40]	; (801250c <dhcp_handle_offer+0x48>)
 80124e4:	689b      	ldr	r3, [r3, #8]
 80124e6:	4618      	mov	r0, r3
 80124e8:	f7f7 fa15 	bl	8009916 <lwip_htonl>
 80124ec:	4602      	mov	r2, r0
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	691a      	ldr	r2, [r3, #16]
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f000 f808 	bl	8012510 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012500:	bf00      	nop
 8012502:	3710      	adds	r7, #16
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}
 8012508:	20016e30 	.word	0x20016e30
 801250c:	20016e38 	.word	0x20016e38

08012510 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012510:	b5b0      	push	{r4, r5, r7, lr}
 8012512:	b08a      	sub	sp, #40	; 0x28
 8012514:	af02      	add	r7, sp, #8
 8012516:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d109      	bne.n	8012532 <dhcp_select+0x22>
 801251e:	4b71      	ldr	r3, [pc, #452]	; (80126e4 <dhcp_select+0x1d4>)
 8012520:	f240 1277 	movw	r2, #375	; 0x177
 8012524:	4970      	ldr	r1, [pc, #448]	; (80126e8 <dhcp_select+0x1d8>)
 8012526:	4871      	ldr	r0, [pc, #452]	; (80126ec <dhcp_select+0x1dc>)
 8012528:	f004 f9de 	bl	80168e8 <iprintf>
 801252c:	f06f 030f 	mvn.w	r3, #15
 8012530:	e0d3      	b.n	80126da <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012536:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012538:	69bb      	ldr	r3, [r7, #24]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d109      	bne.n	8012552 <dhcp_select+0x42>
 801253e:	4b69      	ldr	r3, [pc, #420]	; (80126e4 <dhcp_select+0x1d4>)
 8012540:	f240 1279 	movw	r2, #377	; 0x179
 8012544:	496a      	ldr	r1, [pc, #424]	; (80126f0 <dhcp_select+0x1e0>)
 8012546:	4869      	ldr	r0, [pc, #420]	; (80126ec <dhcp_select+0x1dc>)
 8012548:	f004 f9ce 	bl	80168e8 <iprintf>
 801254c:	f06f 0305 	mvn.w	r3, #5
 8012550:	e0c3      	b.n	80126da <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012552:	2101      	movs	r1, #1
 8012554:	69b8      	ldr	r0, [r7, #24]
 8012556:	f000 ffe4 	bl	8013522 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801255a:	f107 030c 	add.w	r3, r7, #12
 801255e:	2203      	movs	r2, #3
 8012560:	69b9      	ldr	r1, [r7, #24]
 8012562:	6878      	ldr	r0, [r7, #4]
 8012564:	f001 fc68 	bl	8013e38 <dhcp_create_msg>
 8012568:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	2b00      	cmp	r3, #0
 801256e:	f000 8085 	beq.w	801267c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012578:	89b8      	ldrh	r0, [r7, #12]
 801257a:	693b      	ldr	r3, [r7, #16]
 801257c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012580:	2302      	movs	r3, #2
 8012582:	2239      	movs	r2, #57	; 0x39
 8012584:	f000 ffe8 	bl	8013558 <dhcp_option>
 8012588:	4603      	mov	r3, r0
 801258a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801258c:	89b8      	ldrh	r0, [r7, #12]
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012598:	461a      	mov	r2, r3
 801259a:	f001 f837 	bl	801360c <dhcp_option_short>
 801259e:	4603      	mov	r3, r0
 80125a0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80125a2:	89b8      	ldrh	r0, [r7, #12]
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80125aa:	2304      	movs	r3, #4
 80125ac:	2232      	movs	r2, #50	; 0x32
 80125ae:	f000 ffd3 	bl	8013558 <dhcp_option>
 80125b2:	4603      	mov	r3, r0
 80125b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80125b6:	89bc      	ldrh	r4, [r7, #12]
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80125be:	69bb      	ldr	r3, [r7, #24]
 80125c0:	69db      	ldr	r3, [r3, #28]
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7f7 f9a7 	bl	8009916 <lwip_htonl>
 80125c8:	4603      	mov	r3, r0
 80125ca:	461a      	mov	r2, r3
 80125cc:	4629      	mov	r1, r5
 80125ce:	4620      	mov	r0, r4
 80125d0:	f001 f84e 	bl	8013670 <dhcp_option_long>
 80125d4:	4603      	mov	r3, r0
 80125d6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80125d8:	89b8      	ldrh	r0, [r7, #12]
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80125e0:	2304      	movs	r3, #4
 80125e2:	2236      	movs	r2, #54	; 0x36
 80125e4:	f000 ffb8 	bl	8013558 <dhcp_option>
 80125e8:	4603      	mov	r3, r0
 80125ea:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80125ec:	89bc      	ldrh	r4, [r7, #12]
 80125ee:	693b      	ldr	r3, [r7, #16]
 80125f0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80125f4:	69bb      	ldr	r3, [r7, #24]
 80125f6:	699b      	ldr	r3, [r3, #24]
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7f7 f98c 	bl	8009916 <lwip_htonl>
 80125fe:	4603      	mov	r3, r0
 8012600:	461a      	mov	r2, r3
 8012602:	4629      	mov	r1, r5
 8012604:	4620      	mov	r0, r4
 8012606:	f001 f833 	bl	8013670 <dhcp_option_long>
 801260a:	4603      	mov	r3, r0
 801260c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801260e:	89b8      	ldrh	r0, [r7, #12]
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012616:	2303      	movs	r3, #3
 8012618:	2237      	movs	r2, #55	; 0x37
 801261a:	f000 ff9d 	bl	8013558 <dhcp_option>
 801261e:	4603      	mov	r3, r0
 8012620:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012622:	2300      	movs	r3, #0
 8012624:	77bb      	strb	r3, [r7, #30]
 8012626:	e00e      	b.n	8012646 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012628:	89b8      	ldrh	r0, [r7, #12]
 801262a:	693b      	ldr	r3, [r7, #16]
 801262c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012630:	7fbb      	ldrb	r3, [r7, #30]
 8012632:	4a30      	ldr	r2, [pc, #192]	; (80126f4 <dhcp_select+0x1e4>)
 8012634:	5cd3      	ldrb	r3, [r2, r3]
 8012636:	461a      	mov	r2, r3
 8012638:	f000 ffc2 	bl	80135c0 <dhcp_option_byte>
 801263c:	4603      	mov	r3, r0
 801263e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012640:	7fbb      	ldrb	r3, [r7, #30]
 8012642:	3301      	adds	r3, #1
 8012644:	77bb      	strb	r3, [r7, #30]
 8012646:	7fbb      	ldrb	r3, [r7, #30]
 8012648:	2b02      	cmp	r3, #2
 801264a:	d9ed      	bls.n	8012628 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801264c:	89b8      	ldrh	r0, [r7, #12]
 801264e:	693b      	ldr	r3, [r7, #16]
 8012650:	33f0      	adds	r3, #240	; 0xf0
 8012652:	697a      	ldr	r2, [r7, #20]
 8012654:	4619      	mov	r1, r3
 8012656:	f001 fcc5 	bl	8013fe4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801265a:	4b27      	ldr	r3, [pc, #156]	; (80126f8 <dhcp_select+0x1e8>)
 801265c:	6818      	ldr	r0, [r3, #0]
 801265e:	4b27      	ldr	r3, [pc, #156]	; (80126fc <dhcp_select+0x1ec>)
 8012660:	9301      	str	r3, [sp, #4]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	9300      	str	r3, [sp, #0]
 8012666:	2343      	movs	r3, #67	; 0x43
 8012668:	4a25      	ldr	r2, [pc, #148]	; (8012700 <dhcp_select+0x1f0>)
 801266a:	6979      	ldr	r1, [r7, #20]
 801266c:	f7ff fbda 	bl	8011e24 <udp_sendto_if_src>
 8012670:	4603      	mov	r3, r0
 8012672:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012674:	6978      	ldr	r0, [r7, #20]
 8012676:	f7f8 fd23 	bl	800b0c0 <pbuf_free>
 801267a:	e001      	b.n	8012680 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801267c:	23ff      	movs	r3, #255	; 0xff
 801267e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012680:	69bb      	ldr	r3, [r7, #24]
 8012682:	799b      	ldrb	r3, [r3, #6]
 8012684:	2bff      	cmp	r3, #255	; 0xff
 8012686:	d005      	beq.n	8012694 <dhcp_select+0x184>
    dhcp->tries++;
 8012688:	69bb      	ldr	r3, [r7, #24]
 801268a:	799b      	ldrb	r3, [r3, #6]
 801268c:	3301      	adds	r3, #1
 801268e:	b2da      	uxtb	r2, r3
 8012690:	69bb      	ldr	r3, [r7, #24]
 8012692:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012694:	69bb      	ldr	r3, [r7, #24]
 8012696:	799b      	ldrb	r3, [r3, #6]
 8012698:	2b05      	cmp	r3, #5
 801269a:	d80d      	bhi.n	80126b8 <dhcp_select+0x1a8>
 801269c:	69bb      	ldr	r3, [r7, #24]
 801269e:	799b      	ldrb	r3, [r3, #6]
 80126a0:	461a      	mov	r2, r3
 80126a2:	2301      	movs	r3, #1
 80126a4:	4093      	lsls	r3, r2
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	461a      	mov	r2, r3
 80126aa:	0152      	lsls	r2, r2, #5
 80126ac:	1ad2      	subs	r2, r2, r3
 80126ae:	0092      	lsls	r2, r2, #2
 80126b0:	4413      	add	r3, r2
 80126b2:	00db      	lsls	r3, r3, #3
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	e001      	b.n	80126bc <dhcp_select+0x1ac>
 80126b8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80126bc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80126be:	89fb      	ldrh	r3, [r7, #14]
 80126c0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80126c4:	4a0f      	ldr	r2, [pc, #60]	; (8012704 <dhcp_select+0x1f4>)
 80126c6:	fb82 1203 	smull	r1, r2, r2, r3
 80126ca:	1152      	asrs	r2, r2, #5
 80126cc:	17db      	asrs	r3, r3, #31
 80126ce:	1ad3      	subs	r3, r2, r3
 80126d0:	b29a      	uxth	r2, r3
 80126d2:	69bb      	ldr	r3, [r7, #24]
 80126d4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80126d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80126da:	4618      	mov	r0, r3
 80126dc:	3720      	adds	r7, #32
 80126de:	46bd      	mov	sp, r7
 80126e0:	bdb0      	pop	{r4, r5, r7, pc}
 80126e2:	bf00      	nop
 80126e4:	0801a244 	.word	0x0801a244
 80126e8:	0801a2f0 	.word	0x0801a2f0
 80126ec:	0801a2a4 	.word	0x0801a2a4
 80126f0:	0801a30c 	.word	0x0801a30c
 80126f4:	2000001c 	.word	0x2000001c
 80126f8:	20010298 	.word	0x20010298
 80126fc:	0803ad88 	.word	0x0803ad88
 8012700:	0803ad8c 	.word	0x0803ad8c
 8012704:	10624dd3 	.word	0x10624dd3

08012708 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b082      	sub	sp, #8
 801270c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801270e:	4b27      	ldr	r3, [pc, #156]	; (80127ac <dhcp_coarse_tmr+0xa4>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	607b      	str	r3, [r7, #4]
 8012714:	e042      	b.n	801279c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801271a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d039      	beq.n	8012796 <dhcp_coarse_tmr+0x8e>
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	795b      	ldrb	r3, [r3, #5]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d035      	beq.n	8012796 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	8a9b      	ldrh	r3, [r3, #20]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d012      	beq.n	8012758 <dhcp_coarse_tmr+0x50>
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	8a5b      	ldrh	r3, [r3, #18]
 8012736:	3301      	adds	r3, #1
 8012738:	b29a      	uxth	r2, r3
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	825a      	strh	r2, [r3, #18]
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	8a5a      	ldrh	r2, [r3, #18]
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	8a9b      	ldrh	r3, [r3, #20]
 8012746:	429a      	cmp	r2, r3
 8012748:	d106      	bne.n	8012758 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801274a:	6878      	ldr	r0, [r7, #4]
 801274c:	f000 fe44 	bl	80133d8 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f000 f969 	bl	8012a28 <dhcp_start>
 8012756:	e01e      	b.n	8012796 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	8a1b      	ldrh	r3, [r3, #16]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d00b      	beq.n	8012778 <dhcp_coarse_tmr+0x70>
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	8a1b      	ldrh	r3, [r3, #16]
 8012764:	1e5a      	subs	r2, r3, #1
 8012766:	b291      	uxth	r1, r2
 8012768:	683a      	ldr	r2, [r7, #0]
 801276a:	8211      	strh	r1, [r2, #16]
 801276c:	2b01      	cmp	r3, #1
 801276e:	d103      	bne.n	8012778 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f000 f8c6 	bl	8012902 <dhcp_t2_timeout>
 8012776:	e00e      	b.n	8012796 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	89db      	ldrh	r3, [r3, #14]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d00a      	beq.n	8012796 <dhcp_coarse_tmr+0x8e>
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	89db      	ldrh	r3, [r3, #14]
 8012784:	1e5a      	subs	r2, r3, #1
 8012786:	b291      	uxth	r1, r2
 8012788:	683a      	ldr	r2, [r7, #0]
 801278a:	81d1      	strh	r1, [r2, #14]
 801278c:	2b01      	cmp	r3, #1
 801278e:	d102      	bne.n	8012796 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f000 f888 	bl	80128a6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	607b      	str	r3, [r7, #4]
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d1b9      	bne.n	8012716 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80127a2:	bf00      	nop
 80127a4:	3708      	adds	r7, #8
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	bf00      	nop
 80127ac:	20016e04 	.word	0x20016e04

080127b0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80127b6:	4b16      	ldr	r3, [pc, #88]	; (8012810 <dhcp_fine_tmr+0x60>)
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	607b      	str	r3, [r7, #4]
 80127bc:	e020      	b.n	8012800 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127c2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d017      	beq.n	80127fa <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	891b      	ldrh	r3, [r3, #8]
 80127ce:	2b01      	cmp	r3, #1
 80127d0:	d906      	bls.n	80127e0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	891b      	ldrh	r3, [r3, #8]
 80127d6:	3b01      	subs	r3, #1
 80127d8:	b29a      	uxth	r2, r3
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	811a      	strh	r2, [r3, #8]
 80127de:	e00c      	b.n	80127fa <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	891b      	ldrh	r3, [r3, #8]
 80127e4:	2b01      	cmp	r3, #1
 80127e6:	d108      	bne.n	80127fa <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	891b      	ldrh	r3, [r3, #8]
 80127ec:	3b01      	subs	r3, #1
 80127ee:	b29a      	uxth	r2, r3
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f000 f80d 	bl	8012814 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	607b      	str	r3, [r7, #4]
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d1db      	bne.n	80127be <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012806:	bf00      	nop
 8012808:	3708      	adds	r7, #8
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
 801280e:	bf00      	nop
 8012810:	20016e04 	.word	0x20016e04

08012814 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b084      	sub	sp, #16
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012820:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	795b      	ldrb	r3, [r3, #5]
 8012826:	2b0c      	cmp	r3, #12
 8012828:	d003      	beq.n	8012832 <dhcp_timeout+0x1e>
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	795b      	ldrb	r3, [r3, #5]
 801282e:	2b06      	cmp	r3, #6
 8012830:	d103      	bne.n	801283a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f000 fa66 	bl	8012d04 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012838:	e031      	b.n	801289e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	795b      	ldrb	r3, [r3, #5]
 801283e:	2b01      	cmp	r3, #1
 8012840:	d10e      	bne.n	8012860 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	799b      	ldrb	r3, [r3, #6]
 8012846:	2b05      	cmp	r3, #5
 8012848:	d803      	bhi.n	8012852 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f7ff fe60 	bl	8012510 <dhcp_select>
}
 8012850:	e025      	b.n	801289e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f000 fdc0 	bl	80133d8 <dhcp_release_and_stop>
      dhcp_start(netif);
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f000 f8e5 	bl	8012a28 <dhcp_start>
}
 801285e:	e01e      	b.n	801289e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	795b      	ldrb	r3, [r3, #5]
 8012864:	2b08      	cmp	r3, #8
 8012866:	d10b      	bne.n	8012880 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	799b      	ldrb	r3, [r3, #6]
 801286c:	2b01      	cmp	r3, #1
 801286e:	d803      	bhi.n	8012878 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f7ff fdf3 	bl	801245c <dhcp_check>
}
 8012876:	e012      	b.n	801289e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8012878:	6878      	ldr	r0, [r7, #4]
 801287a:	f000 fae5 	bl	8012e48 <dhcp_bind>
}
 801287e:	e00e      	b.n	801289e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	795b      	ldrb	r3, [r3, #5]
 8012884:	2b03      	cmp	r3, #3
 8012886:	d10a      	bne.n	801289e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	799b      	ldrb	r3, [r3, #6]
 801288c:	2b01      	cmp	r3, #1
 801288e:	d803      	bhi.n	8012898 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	f000 fceb 	bl	801326c <dhcp_reboot>
}
 8012896:	e002      	b.n	801289e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f000 fa33 	bl	8012d04 <dhcp_discover>
}
 801289e:	bf00      	nop
 80128a0:	3710      	adds	r7, #16
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}

080128a6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80128a6:	b580      	push	{r7, lr}
 80128a8:	b084      	sub	sp, #16
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128b2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	795b      	ldrb	r3, [r3, #5]
 80128b8:	2b01      	cmp	r3, #1
 80128ba:	d007      	beq.n	80128cc <dhcp_t1_timeout+0x26>
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	795b      	ldrb	r3, [r3, #5]
 80128c0:	2b0a      	cmp	r3, #10
 80128c2:	d003      	beq.n	80128cc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80128c8:	2b05      	cmp	r3, #5
 80128ca:	d116      	bne.n	80128fa <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f000 fb95 	bl	8012ffc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	899b      	ldrh	r3, [r3, #12]
 80128d6:	461a      	mov	r2, r3
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	8a5b      	ldrh	r3, [r3, #18]
 80128dc:	1ad3      	subs	r3, r2, r3
 80128de:	2b01      	cmp	r3, #1
 80128e0:	dd0b      	ble.n	80128fa <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	899b      	ldrh	r3, [r3, #12]
 80128e6:	461a      	mov	r2, r3
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	8a5b      	ldrh	r3, [r3, #18]
 80128ec:	1ad3      	subs	r3, r2, r3
 80128ee:	0fda      	lsrs	r2, r3, #31
 80128f0:	4413      	add	r3, r2
 80128f2:	105b      	asrs	r3, r3, #1
 80128f4:	b29a      	uxth	r2, r3
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80128fa:	bf00      	nop
 80128fc:	3710      	adds	r7, #16
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}

08012902 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012902:	b580      	push	{r7, lr}
 8012904:	b084      	sub	sp, #16
 8012906:	af00      	add	r7, sp, #0
 8012908:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801290e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	795b      	ldrb	r3, [r3, #5]
 8012914:	2b01      	cmp	r3, #1
 8012916:	d00b      	beq.n	8012930 <dhcp_t2_timeout+0x2e>
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	795b      	ldrb	r3, [r3, #5]
 801291c:	2b0a      	cmp	r3, #10
 801291e:	d007      	beq.n	8012930 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012924:	2b05      	cmp	r3, #5
 8012926:	d003      	beq.n	8012930 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	795b      	ldrb	r3, [r3, #5]
 801292c:	2b04      	cmp	r3, #4
 801292e:	d116      	bne.n	801295e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f000 fbff 	bl	8013134 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012936:	68fb      	ldr	r3, [r7, #12]
 8012938:	8a9b      	ldrh	r3, [r3, #20]
 801293a:	461a      	mov	r2, r3
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	8a5b      	ldrh	r3, [r3, #18]
 8012940:	1ad3      	subs	r3, r2, r3
 8012942:	2b01      	cmp	r3, #1
 8012944:	dd0b      	ble.n	801295e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	8a9b      	ldrh	r3, [r3, #20]
 801294a:	461a      	mov	r2, r3
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	8a5b      	ldrh	r3, [r3, #18]
 8012950:	1ad3      	subs	r3, r2, r3
 8012952:	0fda      	lsrs	r2, r3, #31
 8012954:	4413      	add	r3, r2
 8012956:	105b      	asrs	r3, r3, #1
 8012958:	b29a      	uxth	r2, r3
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801295e:	bf00      	nop
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
	...

08012968 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
 8012970:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012976:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	2200      	movs	r2, #0
 801297c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2200      	movs	r2, #0
 8012982:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012984:	4b26      	ldr	r3, [pc, #152]	; (8012a20 <dhcp_handle_ack+0xb8>)
 8012986:	78db      	ldrb	r3, [r3, #3]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d003      	beq.n	8012994 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801298c:	4b25      	ldr	r3, [pc, #148]	; (8012a24 <dhcp_handle_ack+0xbc>)
 801298e:	68da      	ldr	r2, [r3, #12]
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012994:	4b22      	ldr	r3, [pc, #136]	; (8012a20 <dhcp_handle_ack+0xb8>)
 8012996:	791b      	ldrb	r3, [r3, #4]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d004      	beq.n	80129a6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801299c:	4b21      	ldr	r3, [pc, #132]	; (8012a24 <dhcp_handle_ack+0xbc>)
 801299e:	691a      	ldr	r2, [r3, #16]
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80129a4:	e004      	b.n	80129b0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129aa:	085a      	lsrs	r2, r3, #1
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80129b0:	4b1b      	ldr	r3, [pc, #108]	; (8012a20 <dhcp_handle_ack+0xb8>)
 80129b2:	795b      	ldrb	r3, [r3, #5]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d004      	beq.n	80129c2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80129b8:	4b1a      	ldr	r3, [pc, #104]	; (8012a24 <dhcp_handle_ack+0xbc>)
 80129ba:	695a      	ldr	r2, [r3, #20]
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	631a      	str	r2, [r3, #48]	; 0x30
 80129c0:	e007      	b.n	80129d2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80129c6:	4613      	mov	r3, r2
 80129c8:	00db      	lsls	r3, r3, #3
 80129ca:	1a9b      	subs	r3, r3, r2
 80129cc:	08da      	lsrs	r2, r3, #3
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	691a      	ldr	r2, [r3, #16]
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80129da:	4b11      	ldr	r3, [pc, #68]	; (8012a20 <dhcp_handle_ack+0xb8>)
 80129dc:	799b      	ldrb	r3, [r3, #6]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d00b      	beq.n	80129fa <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80129e2:	4b10      	ldr	r3, [pc, #64]	; (8012a24 <dhcp_handle_ack+0xbc>)
 80129e4:	699b      	ldr	r3, [r3, #24]
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7f6 ff95 	bl	8009916 <lwip_htonl>
 80129ec:	4602      	mov	r2, r0
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	2201      	movs	r2, #1
 80129f6:	71da      	strb	r2, [r3, #7]
 80129f8:	e002      	b.n	8012a00 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	2200      	movs	r2, #0
 80129fe:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012a00:	4b07      	ldr	r3, [pc, #28]	; (8012a20 <dhcp_handle_ack+0xb8>)
 8012a02:	79db      	ldrb	r3, [r3, #7]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d007      	beq.n	8012a18 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012a08:	4b06      	ldr	r3, [pc, #24]	; (8012a24 <dhcp_handle_ack+0xbc>)
 8012a0a:	69db      	ldr	r3, [r3, #28]
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	f7f6 ff82 	bl	8009916 <lwip_htonl>
 8012a12:	4602      	mov	r2, r0
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012a18:	bf00      	nop
 8012a1a:	3710      	adds	r7, #16
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	20016e30 	.word	0x20016e30
 8012a24:	20016e38 	.word	0x20016e38

08012a28 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d109      	bne.n	8012a4a <dhcp_start+0x22>
 8012a36:	4b37      	ldr	r3, [pc, #220]	; (8012b14 <dhcp_start+0xec>)
 8012a38:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012a3c:	4936      	ldr	r1, [pc, #216]	; (8012b18 <dhcp_start+0xf0>)
 8012a3e:	4837      	ldr	r0, [pc, #220]	; (8012b1c <dhcp_start+0xf4>)
 8012a40:	f003 ff52 	bl	80168e8 <iprintf>
 8012a44:	f06f 030f 	mvn.w	r3, #15
 8012a48:	e060      	b.n	8012b0c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012a50:	f003 0301 	and.w	r3, r3, #1
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d109      	bne.n	8012a6c <dhcp_start+0x44>
 8012a58:	4b2e      	ldr	r3, [pc, #184]	; (8012b14 <dhcp_start+0xec>)
 8012a5a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8012a5e:	4930      	ldr	r1, [pc, #192]	; (8012b20 <dhcp_start+0xf8>)
 8012a60:	482e      	ldr	r0, [pc, #184]	; (8012b1c <dhcp_start+0xf4>)
 8012a62:	f003 ff41 	bl	80168e8 <iprintf>
 8012a66:	f06f 030f 	mvn.w	r3, #15
 8012a6a:	e04f      	b.n	8012b0c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a70:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a76:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8012a7a:	d202      	bcs.n	8012a82 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8012a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a80:	e044      	b.n	8012b0c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d10d      	bne.n	8012aa4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012a88:	2034      	movs	r0, #52	; 0x34
 8012a8a:	f7f7 fa99 	bl	8009fc0 <mem_malloc>
 8012a8e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d102      	bne.n	8012a9c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8012a96:	f04f 33ff 	mov.w	r3, #4294967295
 8012a9a:	e037      	b.n	8012b0c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	68fa      	ldr	r2, [r7, #12]
 8012aa0:	625a      	str	r2, [r3, #36]	; 0x24
 8012aa2:	e005      	b.n	8012ab0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	791b      	ldrb	r3, [r3, #4]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d001      	beq.n	8012ab0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012aac:	f7ff fc92 	bl	80123d4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012ab0:	2234      	movs	r2, #52	; 0x34
 8012ab2:	2100      	movs	r1, #0
 8012ab4:	68f8      	ldr	r0, [r7, #12]
 8012ab6:	f003 ff0e 	bl	80168d6 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012aba:	f7ff fc39 	bl	8012330 <dhcp_inc_pcb_refcount>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d002      	beq.n	8012aca <dhcp_start+0xa2>
    return ERR_MEM;
 8012ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ac8:	e020      	b.n	8012b0c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	2201      	movs	r2, #1
 8012ace:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012ad6:	f003 0304 	and.w	r3, r3, #4
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d105      	bne.n	8012aea <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8012ade:	2102      	movs	r1, #2
 8012ae0:	68f8      	ldr	r0, [r7, #12]
 8012ae2:	f000 fd1e 	bl	8013522 <dhcp_set_state>
    return ERR_OK;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	e010      	b.n	8012b0c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8012aea:	6878      	ldr	r0, [r7, #4]
 8012aec:	f000 f90a 	bl	8012d04 <dhcp_discover>
 8012af0:	4603      	mov	r3, r0
 8012af2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8012af4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d005      	beq.n	8012b08 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f000 fc6b 	bl	80133d8 <dhcp_release_and_stop>
    return ERR_MEM;
 8012b02:	f04f 33ff 	mov.w	r3, #4294967295
 8012b06:	e001      	b.n	8012b0c <dhcp_start+0xe4>
  }
  return result;
 8012b08:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3710      	adds	r7, #16
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}
 8012b14:	0801a244 	.word	0x0801a244
 8012b18:	0801a328 	.word	0x0801a328
 8012b1c:	0801a2a4 	.word	0x0801a2a4
 8012b20:	0801a36c 	.word	0x0801a36c

08012b24 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b084      	sub	sp, #16
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b30:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d037      	beq.n	8012ba8 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	795b      	ldrb	r3, [r3, #5]
 8012b3c:	2b0a      	cmp	r3, #10
 8012b3e:	d820      	bhi.n	8012b82 <dhcp_network_changed+0x5e>
 8012b40:	a201      	add	r2, pc, #4	; (adr r2, 8012b48 <dhcp_network_changed+0x24>)
 8012b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b46:	bf00      	nop
 8012b48:	08012bad 	.word	0x08012bad
 8012b4c:	08012b83 	.word	0x08012b83
 8012b50:	08012b83 	.word	0x08012b83
 8012b54:	08012b75 	.word	0x08012b75
 8012b58:	08012b75 	.word	0x08012b75
 8012b5c:	08012b75 	.word	0x08012b75
 8012b60:	08012b83 	.word	0x08012b83
 8012b64:	08012b83 	.word	0x08012b83
 8012b68:	08012b83 	.word	0x08012b83
 8012b6c:	08012b83 	.word	0x08012b83
 8012b70:	08012b75 	.word	0x08012b75
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	2200      	movs	r2, #0
 8012b78:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8012b7a:	6878      	ldr	r0, [r7, #4]
 8012b7c:	f000 fb76 	bl	801326c <dhcp_reboot>
      break;
 8012b80:	e015      	b.n	8012bae <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	795b      	ldrb	r3, [r3, #5]
 8012b86:	2b0c      	cmp	r3, #12
 8012b88:	d906      	bls.n	8012b98 <dhcp_network_changed+0x74>
 8012b8a:	4b0a      	ldr	r3, [pc, #40]	; (8012bb4 <dhcp_network_changed+0x90>)
 8012b8c:	f240 326d 	movw	r2, #877	; 0x36d
 8012b90:	4909      	ldr	r1, [pc, #36]	; (8012bb8 <dhcp_network_changed+0x94>)
 8012b92:	480a      	ldr	r0, [pc, #40]	; (8012bbc <dhcp_network_changed+0x98>)
 8012b94:	f003 fea8 	bl	80168e8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8012b9e:	6878      	ldr	r0, [r7, #4]
 8012ba0:	f000 f8b0 	bl	8012d04 <dhcp_discover>
      break;
 8012ba4:	bf00      	nop
 8012ba6:	e002      	b.n	8012bae <dhcp_network_changed+0x8a>
    return;
 8012ba8:	bf00      	nop
 8012baa:	e000      	b.n	8012bae <dhcp_network_changed+0x8a>
      break;
 8012bac:	bf00      	nop
  }
}
 8012bae:	3710      	adds	r7, #16
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}
 8012bb4:	0801a244 	.word	0x0801a244
 8012bb8:	0801a390 	.word	0x0801a390
 8012bbc:	0801a2a4 	.word	0x0801a2a4

08012bc0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d107      	bne.n	8012be0 <dhcp_arp_reply+0x20>
 8012bd0:	4b0e      	ldr	r3, [pc, #56]	; (8012c0c <dhcp_arp_reply+0x4c>)
 8012bd2:	f240 328b 	movw	r2, #907	; 0x38b
 8012bd6:	490e      	ldr	r1, [pc, #56]	; (8012c10 <dhcp_arp_reply+0x50>)
 8012bd8:	480e      	ldr	r0, [pc, #56]	; (8012c14 <dhcp_arp_reply+0x54>)
 8012bda:	f003 fe85 	bl	80168e8 <iprintf>
 8012bde:	e012      	b.n	8012c06 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012be4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d00c      	beq.n	8012c06 <dhcp_arp_reply+0x46>
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	795b      	ldrb	r3, [r3, #5]
 8012bf0:	2b08      	cmp	r3, #8
 8012bf2:	d108      	bne.n	8012c06 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	681a      	ldr	r2, [r3, #0]
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	69db      	ldr	r3, [r3, #28]
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d102      	bne.n	8012c06 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f000 f809 	bl	8012c18 <dhcp_decline>
    }
  }
}
 8012c06:	3710      	adds	r7, #16
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	0801a244 	.word	0x0801a244
 8012c10:	0801a328 	.word	0x0801a328
 8012c14:	0801a2a4 	.word	0x0801a2a4

08012c18 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012c18:	b5b0      	push	{r4, r5, r7, lr}
 8012c1a:	b08a      	sub	sp, #40	; 0x28
 8012c1c:	af02      	add	r7, sp, #8
 8012c1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c24:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012c26:	210c      	movs	r1, #12
 8012c28:	69b8      	ldr	r0, [r7, #24]
 8012c2a:	f000 fc7a 	bl	8013522 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8012c2e:	f107 030c 	add.w	r3, r7, #12
 8012c32:	2204      	movs	r2, #4
 8012c34:	69b9      	ldr	r1, [r7, #24]
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f001 f8fe 	bl	8013e38 <dhcp_create_msg>
 8012c3c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012c3e:	697b      	ldr	r3, [r7, #20]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d035      	beq.n	8012cb0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	685b      	ldr	r3, [r3, #4]
 8012c48:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012c4a:	89b8      	ldrh	r0, [r7, #12]
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c52:	2304      	movs	r3, #4
 8012c54:	2232      	movs	r2, #50	; 0x32
 8012c56:	f000 fc7f 	bl	8013558 <dhcp_option>
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012c5e:	89bc      	ldrh	r4, [r7, #12]
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012c66:	69bb      	ldr	r3, [r7, #24]
 8012c68:	69db      	ldr	r3, [r3, #28]
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7f6 fe53 	bl	8009916 <lwip_htonl>
 8012c70:	4603      	mov	r3, r0
 8012c72:	461a      	mov	r2, r3
 8012c74:	4629      	mov	r1, r5
 8012c76:	4620      	mov	r0, r4
 8012c78:	f000 fcfa 	bl	8013670 <dhcp_option_long>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012c80:	89b8      	ldrh	r0, [r7, #12]
 8012c82:	693b      	ldr	r3, [r7, #16]
 8012c84:	33f0      	adds	r3, #240	; 0xf0
 8012c86:	697a      	ldr	r2, [r7, #20]
 8012c88:	4619      	mov	r1, r3
 8012c8a:	f001 f9ab 	bl	8013fe4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012c8e:	4b19      	ldr	r3, [pc, #100]	; (8012cf4 <dhcp_decline+0xdc>)
 8012c90:	6818      	ldr	r0, [r3, #0]
 8012c92:	4b19      	ldr	r3, [pc, #100]	; (8012cf8 <dhcp_decline+0xe0>)
 8012c94:	9301      	str	r3, [sp, #4]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	9300      	str	r3, [sp, #0]
 8012c9a:	2343      	movs	r3, #67	; 0x43
 8012c9c:	4a17      	ldr	r2, [pc, #92]	; (8012cfc <dhcp_decline+0xe4>)
 8012c9e:	6979      	ldr	r1, [r7, #20]
 8012ca0:	f7ff f8c0 	bl	8011e24 <udp_sendto_if_src>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012ca8:	6978      	ldr	r0, [r7, #20]
 8012caa:	f7f8 fa09 	bl	800b0c0 <pbuf_free>
 8012cae:	e001      	b.n	8012cb4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012cb0:	23ff      	movs	r3, #255	; 0xff
 8012cb2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012cb4:	69bb      	ldr	r3, [r7, #24]
 8012cb6:	799b      	ldrb	r3, [r3, #6]
 8012cb8:	2bff      	cmp	r3, #255	; 0xff
 8012cba:	d005      	beq.n	8012cc8 <dhcp_decline+0xb0>
    dhcp->tries++;
 8012cbc:	69bb      	ldr	r3, [r7, #24]
 8012cbe:	799b      	ldrb	r3, [r3, #6]
 8012cc0:	3301      	adds	r3, #1
 8012cc2:	b2da      	uxtb	r2, r3
 8012cc4:	69bb      	ldr	r3, [r7, #24]
 8012cc6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8012cc8:	f242 7310 	movw	r3, #10000	; 0x2710
 8012ccc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012cce:	89fb      	ldrh	r3, [r7, #14]
 8012cd0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012cd4:	4a0a      	ldr	r2, [pc, #40]	; (8012d00 <dhcp_decline+0xe8>)
 8012cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8012cda:	1152      	asrs	r2, r2, #5
 8012cdc:	17db      	asrs	r3, r3, #31
 8012cde:	1ad3      	subs	r3, r2, r3
 8012ce0:	b29a      	uxth	r2, r3
 8012ce2:	69bb      	ldr	r3, [r7, #24]
 8012ce4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012ce6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	3720      	adds	r7, #32
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bdb0      	pop	{r4, r5, r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	20010298 	.word	0x20010298
 8012cf8:	0803ad88 	.word	0x0803ad88
 8012cfc:	0803ad8c 	.word	0x0803ad8c
 8012d00:	10624dd3 	.word	0x10624dd3

08012d04 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b08a      	sub	sp, #40	; 0x28
 8012d08:	af02      	add	r7, sp, #8
 8012d0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d10:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8012d12:	2300      	movs	r3, #0
 8012d14:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012d16:	69bb      	ldr	r3, [r7, #24]
 8012d18:	2200      	movs	r2, #0
 8012d1a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012d1c:	2106      	movs	r1, #6
 8012d1e:	69b8      	ldr	r0, [r7, #24]
 8012d20:	f000 fbff 	bl	8013522 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8012d24:	f107 0308 	add.w	r3, r7, #8
 8012d28:	2201      	movs	r2, #1
 8012d2a:	69b9      	ldr	r1, [r7, #24]
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f001 f883 	bl	8013e38 <dhcp_create_msg>
 8012d32:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d04b      	beq.n	8012dd2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	685b      	ldr	r3, [r3, #4]
 8012d3e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012d40:	8938      	ldrh	r0, [r7, #8]
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d48:	2302      	movs	r3, #2
 8012d4a:	2239      	movs	r2, #57	; 0x39
 8012d4c:	f000 fc04 	bl	8013558 <dhcp_option>
 8012d50:	4603      	mov	r3, r0
 8012d52:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012d54:	8938      	ldrh	r0, [r7, #8]
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d60:	461a      	mov	r2, r3
 8012d62:	f000 fc53 	bl	801360c <dhcp_option_short>
 8012d66:	4603      	mov	r3, r0
 8012d68:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012d6a:	8938      	ldrh	r0, [r7, #8]
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d72:	2303      	movs	r3, #3
 8012d74:	2237      	movs	r2, #55	; 0x37
 8012d76:	f000 fbef 	bl	8013558 <dhcp_option>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012d7e:	2300      	movs	r3, #0
 8012d80:	77fb      	strb	r3, [r7, #31]
 8012d82:	e00e      	b.n	8012da2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012d84:	8938      	ldrh	r0, [r7, #8]
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012d8c:	7ffb      	ldrb	r3, [r7, #31]
 8012d8e:	4a29      	ldr	r2, [pc, #164]	; (8012e34 <dhcp_discover+0x130>)
 8012d90:	5cd3      	ldrb	r3, [r2, r3]
 8012d92:	461a      	mov	r2, r3
 8012d94:	f000 fc14 	bl	80135c0 <dhcp_option_byte>
 8012d98:	4603      	mov	r3, r0
 8012d9a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012d9c:	7ffb      	ldrb	r3, [r7, #31]
 8012d9e:	3301      	adds	r3, #1
 8012da0:	77fb      	strb	r3, [r7, #31]
 8012da2:	7ffb      	ldrb	r3, [r7, #31]
 8012da4:	2b02      	cmp	r3, #2
 8012da6:	d9ed      	bls.n	8012d84 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012da8:	8938      	ldrh	r0, [r7, #8]
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	33f0      	adds	r3, #240	; 0xf0
 8012dae:	693a      	ldr	r2, [r7, #16]
 8012db0:	4619      	mov	r1, r3
 8012db2:	f001 f917 	bl	8013fe4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012db6:	4b20      	ldr	r3, [pc, #128]	; (8012e38 <dhcp_discover+0x134>)
 8012db8:	6818      	ldr	r0, [r3, #0]
 8012dba:	4b20      	ldr	r3, [pc, #128]	; (8012e3c <dhcp_discover+0x138>)
 8012dbc:	9301      	str	r3, [sp, #4]
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	2343      	movs	r3, #67	; 0x43
 8012dc4:	4a1e      	ldr	r2, [pc, #120]	; (8012e40 <dhcp_discover+0x13c>)
 8012dc6:	6939      	ldr	r1, [r7, #16]
 8012dc8:	f7ff f82c 	bl	8011e24 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8012dcc:	6938      	ldr	r0, [r7, #16]
 8012dce:	f7f8 f977 	bl	800b0c0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012dd2:	69bb      	ldr	r3, [r7, #24]
 8012dd4:	799b      	ldrb	r3, [r3, #6]
 8012dd6:	2bff      	cmp	r3, #255	; 0xff
 8012dd8:	d005      	beq.n	8012de6 <dhcp_discover+0xe2>
    dhcp->tries++;
 8012dda:	69bb      	ldr	r3, [r7, #24]
 8012ddc:	799b      	ldrb	r3, [r3, #6]
 8012dde:	3301      	adds	r3, #1
 8012de0:	b2da      	uxtb	r2, r3
 8012de2:	69bb      	ldr	r3, [r7, #24]
 8012de4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012de6:	69bb      	ldr	r3, [r7, #24]
 8012de8:	799b      	ldrb	r3, [r3, #6]
 8012dea:	2b05      	cmp	r3, #5
 8012dec:	d80d      	bhi.n	8012e0a <dhcp_discover+0x106>
 8012dee:	69bb      	ldr	r3, [r7, #24]
 8012df0:	799b      	ldrb	r3, [r3, #6]
 8012df2:	461a      	mov	r2, r3
 8012df4:	2301      	movs	r3, #1
 8012df6:	4093      	lsls	r3, r2
 8012df8:	b29b      	uxth	r3, r3
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	0152      	lsls	r2, r2, #5
 8012dfe:	1ad2      	subs	r2, r2, r3
 8012e00:	0092      	lsls	r2, r2, #2
 8012e02:	4413      	add	r3, r2
 8012e04:	00db      	lsls	r3, r3, #3
 8012e06:	b29b      	uxth	r3, r3
 8012e08:	e001      	b.n	8012e0e <dhcp_discover+0x10a>
 8012e0a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012e0e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012e10:	897b      	ldrh	r3, [r7, #10]
 8012e12:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012e16:	4a0b      	ldr	r2, [pc, #44]	; (8012e44 <dhcp_discover+0x140>)
 8012e18:	fb82 1203 	smull	r1, r2, r2, r3
 8012e1c:	1152      	asrs	r2, r2, #5
 8012e1e:	17db      	asrs	r3, r3, #31
 8012e20:	1ad3      	subs	r3, r2, r3
 8012e22:	b29a      	uxth	r2, r3
 8012e24:	69bb      	ldr	r3, [r7, #24]
 8012e26:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3720      	adds	r7, #32
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}
 8012e34:	2000001c 	.word	0x2000001c
 8012e38:	20010298 	.word	0x20010298
 8012e3c:	0803ad88 	.word	0x0803ad88
 8012e40:	0803ad8c 	.word	0x0803ad8c
 8012e44:	10624dd3 	.word	0x10624dd3

08012e48 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b088      	sub	sp, #32
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d107      	bne.n	8012e66 <dhcp_bind+0x1e>
 8012e56:	4b64      	ldr	r3, [pc, #400]	; (8012fe8 <dhcp_bind+0x1a0>)
 8012e58:	f240 4215 	movw	r2, #1045	; 0x415
 8012e5c:	4963      	ldr	r1, [pc, #396]	; (8012fec <dhcp_bind+0x1a4>)
 8012e5e:	4864      	ldr	r0, [pc, #400]	; (8012ff0 <dhcp_bind+0x1a8>)
 8012e60:	f003 fd42 	bl	80168e8 <iprintf>
 8012e64:	e0bc      	b.n	8012fe0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e6a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8012e6c:	69bb      	ldr	r3, [r7, #24]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d107      	bne.n	8012e82 <dhcp_bind+0x3a>
 8012e72:	4b5d      	ldr	r3, [pc, #372]	; (8012fe8 <dhcp_bind+0x1a0>)
 8012e74:	f240 4217 	movw	r2, #1047	; 0x417
 8012e78:	495e      	ldr	r1, [pc, #376]	; (8012ff4 <dhcp_bind+0x1ac>)
 8012e7a:	485d      	ldr	r0, [pc, #372]	; (8012ff0 <dhcp_bind+0x1a8>)
 8012e7c:	f003 fd34 	bl	80168e8 <iprintf>
 8012e80:	e0ae      	b.n	8012fe0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012e82:	69bb      	ldr	r3, [r7, #24]
 8012e84:	2200      	movs	r2, #0
 8012e86:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8012e88:	69bb      	ldr	r3, [r7, #24]
 8012e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e90:	d019      	beq.n	8012ec6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012e92:	69bb      	ldr	r3, [r7, #24]
 8012e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e96:	331e      	adds	r3, #30
 8012e98:	4a57      	ldr	r2, [pc, #348]	; (8012ff8 <dhcp_bind+0x1b0>)
 8012e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8012e9e:	095b      	lsrs	r3, r3, #5
 8012ea0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012ea2:	69fb      	ldr	r3, [r7, #28]
 8012ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ea8:	d302      	bcc.n	8012eb0 <dhcp_bind+0x68>
      timeout = 0xffff;
 8012eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012eae:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8012eb0:	69fb      	ldr	r3, [r7, #28]
 8012eb2:	b29a      	uxth	r2, r3
 8012eb4:	69bb      	ldr	r3, [r7, #24]
 8012eb6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8012eb8:	69bb      	ldr	r3, [r7, #24]
 8012eba:	8a9b      	ldrh	r3, [r3, #20]
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d102      	bne.n	8012ec6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8012ec0:	69bb      	ldr	r3, [r7, #24]
 8012ec2:	2201      	movs	r2, #1
 8012ec4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8012ec6:	69bb      	ldr	r3, [r7, #24]
 8012ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ece:	d01d      	beq.n	8012f0c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012ed0:	69bb      	ldr	r3, [r7, #24]
 8012ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed4:	331e      	adds	r3, #30
 8012ed6:	4a48      	ldr	r2, [pc, #288]	; (8012ff8 <dhcp_bind+0x1b0>)
 8012ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8012edc:	095b      	lsrs	r3, r3, #5
 8012ede:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ee6:	d302      	bcc.n	8012eee <dhcp_bind+0xa6>
      timeout = 0xffff;
 8012ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012eec:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8012eee:	69fb      	ldr	r3, [r7, #28]
 8012ef0:	b29a      	uxth	r2, r3
 8012ef2:	69bb      	ldr	r3, [r7, #24]
 8012ef4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8012ef6:	69bb      	ldr	r3, [r7, #24]
 8012ef8:	895b      	ldrh	r3, [r3, #10]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d102      	bne.n	8012f04 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	2201      	movs	r2, #1
 8012f02:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012f04:	69bb      	ldr	r3, [r7, #24]
 8012f06:	895a      	ldrh	r2, [r3, #10]
 8012f08:	69bb      	ldr	r3, [r7, #24]
 8012f0a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8012f0c:	69bb      	ldr	r3, [r7, #24]
 8012f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f14:	d01d      	beq.n	8012f52 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012f16:	69bb      	ldr	r3, [r7, #24]
 8012f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f1a:	331e      	adds	r3, #30
 8012f1c:	4a36      	ldr	r2, [pc, #216]	; (8012ff8 <dhcp_bind+0x1b0>)
 8012f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8012f22:	095b      	lsrs	r3, r3, #5
 8012f24:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f2c:	d302      	bcc.n	8012f34 <dhcp_bind+0xec>
      timeout = 0xffff;
 8012f2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012f32:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012f34:	69fb      	ldr	r3, [r7, #28]
 8012f36:	b29a      	uxth	r2, r3
 8012f38:	69bb      	ldr	r3, [r7, #24]
 8012f3a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8012f3c:	69bb      	ldr	r3, [r7, #24]
 8012f3e:	899b      	ldrh	r3, [r3, #12]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d102      	bne.n	8012f4a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012f44:	69bb      	ldr	r3, [r7, #24]
 8012f46:	2201      	movs	r2, #1
 8012f48:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012f4a:	69bb      	ldr	r3, [r7, #24]
 8012f4c:	899a      	ldrh	r2, [r3, #12]
 8012f4e:	69bb      	ldr	r3, [r7, #24]
 8012f50:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012f52:	69bb      	ldr	r3, [r7, #24]
 8012f54:	895a      	ldrh	r2, [r3, #10]
 8012f56:	69bb      	ldr	r3, [r7, #24]
 8012f58:	899b      	ldrh	r3, [r3, #12]
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d306      	bcc.n	8012f6c <dhcp_bind+0x124>
 8012f5e:	69bb      	ldr	r3, [r7, #24]
 8012f60:	899b      	ldrh	r3, [r3, #12]
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d002      	beq.n	8012f6c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012f66:	69bb      	ldr	r3, [r7, #24]
 8012f68:	2200      	movs	r2, #0
 8012f6a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8012f6c:	69bb      	ldr	r3, [r7, #24]
 8012f6e:	79db      	ldrb	r3, [r3, #7]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d003      	beq.n	8012f7c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012f74:	69bb      	ldr	r3, [r7, #24]
 8012f76:	6a1b      	ldr	r3, [r3, #32]
 8012f78:	613b      	str	r3, [r7, #16]
 8012f7a:	e014      	b.n	8012fa6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8012f7c:	69bb      	ldr	r3, [r7, #24]
 8012f7e:	331c      	adds	r3, #28
 8012f80:	781b      	ldrb	r3, [r3, #0]
 8012f82:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012f84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	db02      	blt.n	8012f92 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8012f8c:	23ff      	movs	r3, #255	; 0xff
 8012f8e:	613b      	str	r3, [r7, #16]
 8012f90:	e009      	b.n	8012fa6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8012f92:	7dfb      	ldrb	r3, [r7, #23]
 8012f94:	2bbf      	cmp	r3, #191	; 0xbf
 8012f96:	d903      	bls.n	8012fa0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8012f98:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012f9c:	613b      	str	r3, [r7, #16]
 8012f9e:	e002      	b.n	8012fa6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8012fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012fa4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012faa:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d108      	bne.n	8012fc4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8012fb2:	69bb      	ldr	r3, [r7, #24]
 8012fb4:	69da      	ldr	r2, [r3, #28]
 8012fb6:	693b      	ldr	r3, [r7, #16]
 8012fb8:	4013      	ands	r3, r2
 8012fba:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012fc2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8012fc4:	210a      	movs	r1, #10
 8012fc6:	69b8      	ldr	r0, [r7, #24]
 8012fc8:	f000 faab 	bl	8013522 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8012fcc:	69bb      	ldr	r3, [r7, #24]
 8012fce:	f103 011c 	add.w	r1, r3, #28
 8012fd2:	f107 030c 	add.w	r3, r7, #12
 8012fd6:	f107 0210 	add.w	r2, r7, #16
 8012fda:	6878      	ldr	r0, [r7, #4]
 8012fdc:	f7f7 fb66 	bl	800a6ac <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8012fe0:	3720      	adds	r7, #32
 8012fe2:	46bd      	mov	sp, r7
 8012fe4:	bd80      	pop	{r7, pc}
 8012fe6:	bf00      	nop
 8012fe8:	0801a244 	.word	0x0801a244
 8012fec:	0801a3a4 	.word	0x0801a3a4
 8012ff0:	0801a2a4 	.word	0x0801a2a4
 8012ff4:	0801a3c0 	.word	0x0801a3c0
 8012ff8:	88888889 	.word	0x88888889

08012ffc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b08a      	sub	sp, #40	; 0x28
 8013000:	af02      	add	r7, sp, #8
 8013002:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013008:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801300a:	2105      	movs	r1, #5
 801300c:	69b8      	ldr	r0, [r7, #24]
 801300e:	f000 fa88 	bl	8013522 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013012:	f107 030c 	add.w	r3, r7, #12
 8013016:	2203      	movs	r2, #3
 8013018:	69b9      	ldr	r1, [r7, #24]
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	f000 ff0c 	bl	8013e38 <dhcp_create_msg>
 8013020:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d04e      	beq.n	80130c6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	685b      	ldr	r3, [r3, #4]
 801302c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801302e:	89b8      	ldrh	r0, [r7, #12]
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013036:	2302      	movs	r3, #2
 8013038:	2239      	movs	r2, #57	; 0x39
 801303a:	f000 fa8d 	bl	8013558 <dhcp_option>
 801303e:	4603      	mov	r3, r0
 8013040:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013042:	89b8      	ldrh	r0, [r7, #12]
 8013044:	693b      	ldr	r3, [r7, #16]
 8013046:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801304e:	461a      	mov	r2, r3
 8013050:	f000 fadc 	bl	801360c <dhcp_option_short>
 8013054:	4603      	mov	r3, r0
 8013056:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013058:	89b8      	ldrh	r0, [r7, #12]
 801305a:	693b      	ldr	r3, [r7, #16]
 801305c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013060:	2303      	movs	r3, #3
 8013062:	2237      	movs	r2, #55	; 0x37
 8013064:	f000 fa78 	bl	8013558 <dhcp_option>
 8013068:	4603      	mov	r3, r0
 801306a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801306c:	2300      	movs	r3, #0
 801306e:	77bb      	strb	r3, [r7, #30]
 8013070:	e00e      	b.n	8013090 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013072:	89b8      	ldrh	r0, [r7, #12]
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801307a:	7fbb      	ldrb	r3, [r7, #30]
 801307c:	4a2a      	ldr	r2, [pc, #168]	; (8013128 <dhcp_renew+0x12c>)
 801307e:	5cd3      	ldrb	r3, [r2, r3]
 8013080:	461a      	mov	r2, r3
 8013082:	f000 fa9d 	bl	80135c0 <dhcp_option_byte>
 8013086:	4603      	mov	r3, r0
 8013088:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801308a:	7fbb      	ldrb	r3, [r7, #30]
 801308c:	3301      	adds	r3, #1
 801308e:	77bb      	strb	r3, [r7, #30]
 8013090:	7fbb      	ldrb	r3, [r7, #30]
 8013092:	2b02      	cmp	r3, #2
 8013094:	d9ed      	bls.n	8013072 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013096:	89b8      	ldrh	r0, [r7, #12]
 8013098:	693b      	ldr	r3, [r7, #16]
 801309a:	33f0      	adds	r3, #240	; 0xf0
 801309c:	697a      	ldr	r2, [r7, #20]
 801309e:	4619      	mov	r1, r3
 80130a0:	f000 ffa0 	bl	8013fe4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80130a4:	4b21      	ldr	r3, [pc, #132]	; (801312c <dhcp_renew+0x130>)
 80130a6:	6818      	ldr	r0, [r3, #0]
 80130a8:	69bb      	ldr	r3, [r7, #24]
 80130aa:	f103 0218 	add.w	r2, r3, #24
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	9300      	str	r3, [sp, #0]
 80130b2:	2343      	movs	r3, #67	; 0x43
 80130b4:	6979      	ldr	r1, [r7, #20]
 80130b6:	f7fe fe41 	bl	8011d3c <udp_sendto_if>
 80130ba:	4603      	mov	r3, r0
 80130bc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80130be:	6978      	ldr	r0, [r7, #20]
 80130c0:	f7f7 fffe 	bl	800b0c0 <pbuf_free>
 80130c4:	e001      	b.n	80130ca <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80130c6:	23ff      	movs	r3, #255	; 0xff
 80130c8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	799b      	ldrb	r3, [r3, #6]
 80130ce:	2bff      	cmp	r3, #255	; 0xff
 80130d0:	d005      	beq.n	80130de <dhcp_renew+0xe2>
    dhcp->tries++;
 80130d2:	69bb      	ldr	r3, [r7, #24]
 80130d4:	799b      	ldrb	r3, [r3, #6]
 80130d6:	3301      	adds	r3, #1
 80130d8:	b2da      	uxtb	r2, r3
 80130da:	69bb      	ldr	r3, [r7, #24]
 80130dc:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80130de:	69bb      	ldr	r3, [r7, #24]
 80130e0:	799b      	ldrb	r3, [r3, #6]
 80130e2:	2b09      	cmp	r3, #9
 80130e4:	d80a      	bhi.n	80130fc <dhcp_renew+0x100>
 80130e6:	69bb      	ldr	r3, [r7, #24]
 80130e8:	799b      	ldrb	r3, [r3, #6]
 80130ea:	b29b      	uxth	r3, r3
 80130ec:	461a      	mov	r2, r3
 80130ee:	0152      	lsls	r2, r2, #5
 80130f0:	1ad2      	subs	r2, r2, r3
 80130f2:	0092      	lsls	r2, r2, #2
 80130f4:	4413      	add	r3, r2
 80130f6:	011b      	lsls	r3, r3, #4
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	e001      	b.n	8013100 <dhcp_renew+0x104>
 80130fc:	f644 6320 	movw	r3, #20000	; 0x4e20
 8013100:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013102:	89fb      	ldrh	r3, [r7, #14]
 8013104:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013108:	4a09      	ldr	r2, [pc, #36]	; (8013130 <dhcp_renew+0x134>)
 801310a:	fb82 1203 	smull	r1, r2, r2, r3
 801310e:	1152      	asrs	r2, r2, #5
 8013110:	17db      	asrs	r3, r3, #31
 8013112:	1ad3      	subs	r3, r2, r3
 8013114:	b29a      	uxth	r2, r3
 8013116:	69bb      	ldr	r3, [r7, #24]
 8013118:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801311a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801311e:	4618      	mov	r0, r3
 8013120:	3720      	adds	r7, #32
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
 8013126:	bf00      	nop
 8013128:	2000001c 	.word	0x2000001c
 801312c:	20010298 	.word	0x20010298
 8013130:	10624dd3 	.word	0x10624dd3

08013134 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013134:	b580      	push	{r7, lr}
 8013136:	b08a      	sub	sp, #40	; 0x28
 8013138:	af02      	add	r7, sp, #8
 801313a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013140:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8013142:	2104      	movs	r1, #4
 8013144:	69b8      	ldr	r0, [r7, #24]
 8013146:	f000 f9ec 	bl	8013522 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801314a:	f107 030c 	add.w	r3, r7, #12
 801314e:	2203      	movs	r2, #3
 8013150:	69b9      	ldr	r1, [r7, #24]
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f000 fe70 	bl	8013e38 <dhcp_create_msg>
 8013158:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801315a:	697b      	ldr	r3, [r7, #20]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d04c      	beq.n	80131fa <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013160:	697b      	ldr	r3, [r7, #20]
 8013162:	685b      	ldr	r3, [r3, #4]
 8013164:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013166:	89b8      	ldrh	r0, [r7, #12]
 8013168:	693b      	ldr	r3, [r7, #16]
 801316a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801316e:	2302      	movs	r3, #2
 8013170:	2239      	movs	r2, #57	; 0x39
 8013172:	f000 f9f1 	bl	8013558 <dhcp_option>
 8013176:	4603      	mov	r3, r0
 8013178:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801317a:	89b8      	ldrh	r0, [r7, #12]
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013186:	461a      	mov	r2, r3
 8013188:	f000 fa40 	bl	801360c <dhcp_option_short>
 801318c:	4603      	mov	r3, r0
 801318e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013190:	89b8      	ldrh	r0, [r7, #12]
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013198:	2303      	movs	r3, #3
 801319a:	2237      	movs	r2, #55	; 0x37
 801319c:	f000 f9dc 	bl	8013558 <dhcp_option>
 80131a0:	4603      	mov	r3, r0
 80131a2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80131a4:	2300      	movs	r3, #0
 80131a6:	77bb      	strb	r3, [r7, #30]
 80131a8:	e00e      	b.n	80131c8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80131aa:	89b8      	ldrh	r0, [r7, #12]
 80131ac:	693b      	ldr	r3, [r7, #16]
 80131ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131b2:	7fbb      	ldrb	r3, [r7, #30]
 80131b4:	4a29      	ldr	r2, [pc, #164]	; (801325c <dhcp_rebind+0x128>)
 80131b6:	5cd3      	ldrb	r3, [r2, r3]
 80131b8:	461a      	mov	r2, r3
 80131ba:	f000 fa01 	bl	80135c0 <dhcp_option_byte>
 80131be:	4603      	mov	r3, r0
 80131c0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80131c2:	7fbb      	ldrb	r3, [r7, #30]
 80131c4:	3301      	adds	r3, #1
 80131c6:	77bb      	strb	r3, [r7, #30]
 80131c8:	7fbb      	ldrb	r3, [r7, #30]
 80131ca:	2b02      	cmp	r3, #2
 80131cc:	d9ed      	bls.n	80131aa <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80131ce:	89b8      	ldrh	r0, [r7, #12]
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	33f0      	adds	r3, #240	; 0xf0
 80131d4:	697a      	ldr	r2, [r7, #20]
 80131d6:	4619      	mov	r1, r3
 80131d8:	f000 ff04 	bl	8013fe4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80131dc:	4b20      	ldr	r3, [pc, #128]	; (8013260 <dhcp_rebind+0x12c>)
 80131de:	6818      	ldr	r0, [r3, #0]
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	9300      	str	r3, [sp, #0]
 80131e4:	2343      	movs	r3, #67	; 0x43
 80131e6:	4a1f      	ldr	r2, [pc, #124]	; (8013264 <dhcp_rebind+0x130>)
 80131e8:	6979      	ldr	r1, [r7, #20]
 80131ea:	f7fe fda7 	bl	8011d3c <udp_sendto_if>
 80131ee:	4603      	mov	r3, r0
 80131f0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80131f2:	6978      	ldr	r0, [r7, #20]
 80131f4:	f7f7 ff64 	bl	800b0c0 <pbuf_free>
 80131f8:	e001      	b.n	80131fe <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80131fa:	23ff      	movs	r3, #255	; 0xff
 80131fc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80131fe:	69bb      	ldr	r3, [r7, #24]
 8013200:	799b      	ldrb	r3, [r3, #6]
 8013202:	2bff      	cmp	r3, #255	; 0xff
 8013204:	d005      	beq.n	8013212 <dhcp_rebind+0xde>
    dhcp->tries++;
 8013206:	69bb      	ldr	r3, [r7, #24]
 8013208:	799b      	ldrb	r3, [r3, #6]
 801320a:	3301      	adds	r3, #1
 801320c:	b2da      	uxtb	r2, r3
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013212:	69bb      	ldr	r3, [r7, #24]
 8013214:	799b      	ldrb	r3, [r3, #6]
 8013216:	2b09      	cmp	r3, #9
 8013218:	d80a      	bhi.n	8013230 <dhcp_rebind+0xfc>
 801321a:	69bb      	ldr	r3, [r7, #24]
 801321c:	799b      	ldrb	r3, [r3, #6]
 801321e:	b29b      	uxth	r3, r3
 8013220:	461a      	mov	r2, r3
 8013222:	0152      	lsls	r2, r2, #5
 8013224:	1ad2      	subs	r2, r2, r3
 8013226:	0092      	lsls	r2, r2, #2
 8013228:	4413      	add	r3, r2
 801322a:	00db      	lsls	r3, r3, #3
 801322c:	b29b      	uxth	r3, r3
 801322e:	e001      	b.n	8013234 <dhcp_rebind+0x100>
 8013230:	f242 7310 	movw	r3, #10000	; 0x2710
 8013234:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013236:	89fb      	ldrh	r3, [r7, #14]
 8013238:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801323c:	4a0a      	ldr	r2, [pc, #40]	; (8013268 <dhcp_rebind+0x134>)
 801323e:	fb82 1203 	smull	r1, r2, r2, r3
 8013242:	1152      	asrs	r2, r2, #5
 8013244:	17db      	asrs	r3, r3, #31
 8013246:	1ad3      	subs	r3, r2, r3
 8013248:	b29a      	uxth	r2, r3
 801324a:	69bb      	ldr	r3, [r7, #24]
 801324c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801324e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013252:	4618      	mov	r0, r3
 8013254:	3720      	adds	r7, #32
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	2000001c 	.word	0x2000001c
 8013260:	20010298 	.word	0x20010298
 8013264:	0803ad8c 	.word	0x0803ad8c
 8013268:	10624dd3 	.word	0x10624dd3

0801326c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801326c:	b5b0      	push	{r4, r5, r7, lr}
 801326e:	b08a      	sub	sp, #40	; 0x28
 8013270:	af02      	add	r7, sp, #8
 8013272:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013278:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801327a:	2103      	movs	r1, #3
 801327c:	69b8      	ldr	r0, [r7, #24]
 801327e:	f000 f950 	bl	8013522 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013282:	f107 030c 	add.w	r3, r7, #12
 8013286:	2203      	movs	r2, #3
 8013288:	69b9      	ldr	r1, [r7, #24]
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f000 fdd4 	bl	8013e38 <dhcp_create_msg>
 8013290:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013292:	697b      	ldr	r3, [r7, #20]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d066      	beq.n	8013366 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	685b      	ldr	r3, [r3, #4]
 801329c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801329e:	89b8      	ldrh	r0, [r7, #12]
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80132a6:	2302      	movs	r3, #2
 80132a8:	2239      	movs	r2, #57	; 0x39
 80132aa:	f000 f955 	bl	8013558 <dhcp_option>
 80132ae:	4603      	mov	r3, r0
 80132b0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80132b2:	89b8      	ldrh	r0, [r7, #12]
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	33f0      	adds	r3, #240	; 0xf0
 80132b8:	f44f 7210 	mov.w	r2, #576	; 0x240
 80132bc:	4619      	mov	r1, r3
 80132be:	f000 f9a5 	bl	801360c <dhcp_option_short>
 80132c2:	4603      	mov	r3, r0
 80132c4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80132c6:	89b8      	ldrh	r0, [r7, #12]
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80132ce:	2304      	movs	r3, #4
 80132d0:	2232      	movs	r2, #50	; 0x32
 80132d2:	f000 f941 	bl	8013558 <dhcp_option>
 80132d6:	4603      	mov	r3, r0
 80132d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80132da:	89bc      	ldrh	r4, [r7, #12]
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80132e2:	69bb      	ldr	r3, [r7, #24]
 80132e4:	69db      	ldr	r3, [r3, #28]
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7f6 fb15 	bl	8009916 <lwip_htonl>
 80132ec:	4603      	mov	r3, r0
 80132ee:	461a      	mov	r2, r3
 80132f0:	4629      	mov	r1, r5
 80132f2:	4620      	mov	r0, r4
 80132f4:	f000 f9bc 	bl	8013670 <dhcp_option_long>
 80132f8:	4603      	mov	r3, r0
 80132fa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80132fc:	89b8      	ldrh	r0, [r7, #12]
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013304:	2303      	movs	r3, #3
 8013306:	2237      	movs	r2, #55	; 0x37
 8013308:	f000 f926 	bl	8013558 <dhcp_option>
 801330c:	4603      	mov	r3, r0
 801330e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013310:	2300      	movs	r3, #0
 8013312:	77bb      	strb	r3, [r7, #30]
 8013314:	e00e      	b.n	8013334 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013316:	89b8      	ldrh	r0, [r7, #12]
 8013318:	693b      	ldr	r3, [r7, #16]
 801331a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801331e:	7fbb      	ldrb	r3, [r7, #30]
 8013320:	4a29      	ldr	r2, [pc, #164]	; (80133c8 <dhcp_reboot+0x15c>)
 8013322:	5cd3      	ldrb	r3, [r2, r3]
 8013324:	461a      	mov	r2, r3
 8013326:	f000 f94b 	bl	80135c0 <dhcp_option_byte>
 801332a:	4603      	mov	r3, r0
 801332c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801332e:	7fbb      	ldrb	r3, [r7, #30]
 8013330:	3301      	adds	r3, #1
 8013332:	77bb      	strb	r3, [r7, #30]
 8013334:	7fbb      	ldrb	r3, [r7, #30]
 8013336:	2b02      	cmp	r3, #2
 8013338:	d9ed      	bls.n	8013316 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801333a:	89b8      	ldrh	r0, [r7, #12]
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	33f0      	adds	r3, #240	; 0xf0
 8013340:	697a      	ldr	r2, [r7, #20]
 8013342:	4619      	mov	r1, r3
 8013344:	f000 fe4e 	bl	8013fe4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013348:	4b20      	ldr	r3, [pc, #128]	; (80133cc <dhcp_reboot+0x160>)
 801334a:	6818      	ldr	r0, [r3, #0]
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	9300      	str	r3, [sp, #0]
 8013350:	2343      	movs	r3, #67	; 0x43
 8013352:	4a1f      	ldr	r2, [pc, #124]	; (80133d0 <dhcp_reboot+0x164>)
 8013354:	6979      	ldr	r1, [r7, #20]
 8013356:	f7fe fcf1 	bl	8011d3c <udp_sendto_if>
 801335a:	4603      	mov	r3, r0
 801335c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801335e:	6978      	ldr	r0, [r7, #20]
 8013360:	f7f7 feae 	bl	800b0c0 <pbuf_free>
 8013364:	e001      	b.n	801336a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013366:	23ff      	movs	r3, #255	; 0xff
 8013368:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801336a:	69bb      	ldr	r3, [r7, #24]
 801336c:	799b      	ldrb	r3, [r3, #6]
 801336e:	2bff      	cmp	r3, #255	; 0xff
 8013370:	d005      	beq.n	801337e <dhcp_reboot+0x112>
    dhcp->tries++;
 8013372:	69bb      	ldr	r3, [r7, #24]
 8013374:	799b      	ldrb	r3, [r3, #6]
 8013376:	3301      	adds	r3, #1
 8013378:	b2da      	uxtb	r2, r3
 801337a:	69bb      	ldr	r3, [r7, #24]
 801337c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801337e:	69bb      	ldr	r3, [r7, #24]
 8013380:	799b      	ldrb	r3, [r3, #6]
 8013382:	2b09      	cmp	r3, #9
 8013384:	d80a      	bhi.n	801339c <dhcp_reboot+0x130>
 8013386:	69bb      	ldr	r3, [r7, #24]
 8013388:	799b      	ldrb	r3, [r3, #6]
 801338a:	b29b      	uxth	r3, r3
 801338c:	461a      	mov	r2, r3
 801338e:	0152      	lsls	r2, r2, #5
 8013390:	1ad2      	subs	r2, r2, r3
 8013392:	0092      	lsls	r2, r2, #2
 8013394:	4413      	add	r3, r2
 8013396:	00db      	lsls	r3, r3, #3
 8013398:	b29b      	uxth	r3, r3
 801339a:	e001      	b.n	80133a0 <dhcp_reboot+0x134>
 801339c:	f242 7310 	movw	r3, #10000	; 0x2710
 80133a0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80133a2:	89fb      	ldrh	r3, [r7, #14]
 80133a4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80133a8:	4a0a      	ldr	r2, [pc, #40]	; (80133d4 <dhcp_reboot+0x168>)
 80133aa:	fb82 1203 	smull	r1, r2, r2, r3
 80133ae:	1152      	asrs	r2, r2, #5
 80133b0:	17db      	asrs	r3, r3, #31
 80133b2:	1ad3      	subs	r3, r2, r3
 80133b4:	b29a      	uxth	r2, r3
 80133b6:	69bb      	ldr	r3, [r7, #24]
 80133b8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80133ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80133be:	4618      	mov	r0, r3
 80133c0:	3720      	adds	r7, #32
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bdb0      	pop	{r4, r5, r7, pc}
 80133c6:	bf00      	nop
 80133c8:	2000001c 	.word	0x2000001c
 80133cc:	20010298 	.word	0x20010298
 80133d0:	0803ad8c 	.word	0x0803ad8c
 80133d4:	10624dd3 	.word	0x10624dd3

080133d8 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80133d8:	b5b0      	push	{r4, r5, r7, lr}
 80133da:	b08a      	sub	sp, #40	; 0x28
 80133dc:	af02      	add	r7, sp, #8
 80133de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80133e6:	69fb      	ldr	r3, [r7, #28]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	f000 8084 	beq.w	80134f6 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80133ee:	69fb      	ldr	r3, [r7, #28]
 80133f0:	795b      	ldrb	r3, [r3, #5]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	f000 8081 	beq.w	80134fa <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80133f8:	69fb      	ldr	r3, [r7, #28]
 80133fa:	699b      	ldr	r3, [r3, #24]
 80133fc:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80133fe:	69fb      	ldr	r3, [r7, #28]
 8013400:	2200      	movs	r2, #0
 8013402:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013404:	69fb      	ldr	r3, [r7, #28]
 8013406:	2200      	movs	r2, #0
 8013408:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801340a:	69fb      	ldr	r3, [r7, #28]
 801340c:	2200      	movs	r2, #0
 801340e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013410:	69fb      	ldr	r3, [r7, #28]
 8013412:	2200      	movs	r2, #0
 8013414:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013416:	69fb      	ldr	r3, [r7, #28]
 8013418:	2200      	movs	r2, #0
 801341a:	631a      	str	r2, [r3, #48]	; 0x30
 801341c:	69fb      	ldr	r3, [r7, #28]
 801341e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013420:	69fb      	ldr	r3, [r7, #28]
 8013422:	62da      	str	r2, [r3, #44]	; 0x2c
 8013424:	69fb      	ldr	r3, [r7, #28]
 8013426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013428:	69fb      	ldr	r3, [r7, #28]
 801342a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801342c:	69fb      	ldr	r3, [r7, #28]
 801342e:	2200      	movs	r2, #0
 8013430:	829a      	strh	r2, [r3, #20]
 8013432:	69fb      	ldr	r3, [r7, #28]
 8013434:	8a9a      	ldrh	r2, [r3, #20]
 8013436:	69fb      	ldr	r3, [r7, #28]
 8013438:	825a      	strh	r2, [r3, #18]
 801343a:	69fb      	ldr	r3, [r7, #28]
 801343c:	8a5a      	ldrh	r2, [r3, #18]
 801343e:	69fb      	ldr	r3, [r7, #28]
 8013440:	821a      	strh	r2, [r3, #16]
 8013442:	69fb      	ldr	r3, [r7, #28]
 8013444:	8a1a      	ldrh	r2, [r3, #16]
 8013446:	69fb      	ldr	r3, [r7, #28]
 8013448:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f000 fdf8 	bl	8014040 <dhcp_supplied_address>
 8013450:	4603      	mov	r3, r0
 8013452:	2b00      	cmp	r3, #0
 8013454:	d03b      	beq.n	80134ce <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013456:	f107 030e 	add.w	r3, r7, #14
 801345a:	2207      	movs	r2, #7
 801345c:	69f9      	ldr	r1, [r7, #28]
 801345e:	6878      	ldr	r0, [r7, #4]
 8013460:	f000 fcea 	bl	8013e38 <dhcp_create_msg>
 8013464:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d030      	beq.n	80134ce <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801346c:	69bb      	ldr	r3, [r7, #24]
 801346e:	685b      	ldr	r3, [r3, #4]
 8013470:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013472:	89f8      	ldrh	r0, [r7, #14]
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801347a:	2304      	movs	r3, #4
 801347c:	2236      	movs	r2, #54	; 0x36
 801347e:	f000 f86b 	bl	8013558 <dhcp_option>
 8013482:	4603      	mov	r3, r0
 8013484:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013486:	89fc      	ldrh	r4, [r7, #14]
 8013488:	697b      	ldr	r3, [r7, #20]
 801348a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801348e:	693b      	ldr	r3, [r7, #16]
 8013490:	4618      	mov	r0, r3
 8013492:	f7f6 fa40 	bl	8009916 <lwip_htonl>
 8013496:	4603      	mov	r3, r0
 8013498:	461a      	mov	r2, r3
 801349a:	4629      	mov	r1, r5
 801349c:	4620      	mov	r0, r4
 801349e:	f000 f8e7 	bl	8013670 <dhcp_option_long>
 80134a2:	4603      	mov	r3, r0
 80134a4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80134a6:	89f8      	ldrh	r0, [r7, #14]
 80134a8:	697b      	ldr	r3, [r7, #20]
 80134aa:	33f0      	adds	r3, #240	; 0xf0
 80134ac:	69ba      	ldr	r2, [r7, #24]
 80134ae:	4619      	mov	r1, r3
 80134b0:	f000 fd98 	bl	8013fe4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80134b4:	4b13      	ldr	r3, [pc, #76]	; (8013504 <dhcp_release_and_stop+0x12c>)
 80134b6:	6818      	ldr	r0, [r3, #0]
 80134b8:	f107 0210 	add.w	r2, r7, #16
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	9300      	str	r3, [sp, #0]
 80134c0:	2343      	movs	r3, #67	; 0x43
 80134c2:	69b9      	ldr	r1, [r7, #24]
 80134c4:	f7fe fc3a 	bl	8011d3c <udp_sendto_if>
      pbuf_free(p_out);
 80134c8:	69b8      	ldr	r0, [r7, #24]
 80134ca:	f7f7 fdf9 	bl	800b0c0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80134ce:	4b0e      	ldr	r3, [pc, #56]	; (8013508 <dhcp_release_and_stop+0x130>)
 80134d0:	4a0d      	ldr	r2, [pc, #52]	; (8013508 <dhcp_release_and_stop+0x130>)
 80134d2:	490d      	ldr	r1, [pc, #52]	; (8013508 <dhcp_release_and_stop+0x130>)
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f7f7 f8e9 	bl	800a6ac <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80134da:	2100      	movs	r1, #0
 80134dc:	69f8      	ldr	r0, [r7, #28]
 80134de:	f000 f820 	bl	8013522 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80134e2:	69fb      	ldr	r3, [r7, #28]
 80134e4:	791b      	ldrb	r3, [r3, #4]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d008      	beq.n	80134fc <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80134ea:	f7fe ff73 	bl	80123d4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80134ee:	69fb      	ldr	r3, [r7, #28]
 80134f0:	2200      	movs	r2, #0
 80134f2:	711a      	strb	r2, [r3, #4]
 80134f4:	e002      	b.n	80134fc <dhcp_release_and_stop+0x124>
    return;
 80134f6:	bf00      	nop
 80134f8:	e000      	b.n	80134fc <dhcp_release_and_stop+0x124>
    return;
 80134fa:	bf00      	nop
  }
}
 80134fc:	3720      	adds	r7, #32
 80134fe:	46bd      	mov	sp, r7
 8013500:	bdb0      	pop	{r4, r5, r7, pc}
 8013502:	bf00      	nop
 8013504:	20010298 	.word	0x20010298
 8013508:	0803ad88 	.word	0x0803ad88

0801350c <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b082      	sub	sp, #8
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f7ff ff5f 	bl	80133d8 <dhcp_release_and_stop>
}
 801351a:	bf00      	nop
 801351c:	3708      	adds	r7, #8
 801351e:	46bd      	mov	sp, r7
 8013520:	bd80      	pop	{r7, pc}

08013522 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013522:	b480      	push	{r7}
 8013524:	b083      	sub	sp, #12
 8013526:	af00      	add	r7, sp, #0
 8013528:	6078      	str	r0, [r7, #4]
 801352a:	460b      	mov	r3, r1
 801352c:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	795b      	ldrb	r3, [r3, #5]
 8013532:	78fa      	ldrb	r2, [r7, #3]
 8013534:	429a      	cmp	r2, r3
 8013536:	d008      	beq.n	801354a <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	78fa      	ldrb	r2, [r7, #3]
 801353c:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	2200      	movs	r2, #0
 8013542:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	2200      	movs	r2, #0
 8013548:	811a      	strh	r2, [r3, #8]
  }
}
 801354a:	bf00      	nop
 801354c:	370c      	adds	r7, #12
 801354e:	46bd      	mov	sp, r7
 8013550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013554:	4770      	bx	lr
	...

08013558 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	6039      	str	r1, [r7, #0]
 8013560:	4611      	mov	r1, r2
 8013562:	461a      	mov	r2, r3
 8013564:	4603      	mov	r3, r0
 8013566:	80fb      	strh	r3, [r7, #6]
 8013568:	460b      	mov	r3, r1
 801356a:	717b      	strb	r3, [r7, #5]
 801356c:	4613      	mov	r3, r2
 801356e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013570:	88fa      	ldrh	r2, [r7, #6]
 8013572:	793b      	ldrb	r3, [r7, #4]
 8013574:	4413      	add	r3, r2
 8013576:	3302      	adds	r3, #2
 8013578:	2b44      	cmp	r3, #68	; 0x44
 801357a:	d906      	bls.n	801358a <dhcp_option+0x32>
 801357c:	4b0d      	ldr	r3, [pc, #52]	; (80135b4 <dhcp_option+0x5c>)
 801357e:	f240 529a 	movw	r2, #1434	; 0x59a
 8013582:	490d      	ldr	r1, [pc, #52]	; (80135b8 <dhcp_option+0x60>)
 8013584:	480d      	ldr	r0, [pc, #52]	; (80135bc <dhcp_option+0x64>)
 8013586:	f003 f9af 	bl	80168e8 <iprintf>
  options[options_out_len++] = option_type;
 801358a:	88fb      	ldrh	r3, [r7, #6]
 801358c:	1c5a      	adds	r2, r3, #1
 801358e:	80fa      	strh	r2, [r7, #6]
 8013590:	461a      	mov	r2, r3
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	4413      	add	r3, r2
 8013596:	797a      	ldrb	r2, [r7, #5]
 8013598:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801359a:	88fb      	ldrh	r3, [r7, #6]
 801359c:	1c5a      	adds	r2, r3, #1
 801359e:	80fa      	strh	r2, [r7, #6]
 80135a0:	461a      	mov	r2, r3
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	4413      	add	r3, r2
 80135a6:	793a      	ldrb	r2, [r7, #4]
 80135a8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80135aa:	88fb      	ldrh	r3, [r7, #6]
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3708      	adds	r7, #8
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}
 80135b4:	0801a244 	.word	0x0801a244
 80135b8:	0801a3d8 	.word	0x0801a3d8
 80135bc:	0801a2a4 	.word	0x0801a2a4

080135c0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b082      	sub	sp, #8
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	4603      	mov	r3, r0
 80135c8:	6039      	str	r1, [r7, #0]
 80135ca:	80fb      	strh	r3, [r7, #6]
 80135cc:	4613      	mov	r3, r2
 80135ce:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80135d0:	88fb      	ldrh	r3, [r7, #6]
 80135d2:	2b43      	cmp	r3, #67	; 0x43
 80135d4:	d906      	bls.n	80135e4 <dhcp_option_byte+0x24>
 80135d6:	4b0a      	ldr	r3, [pc, #40]	; (8013600 <dhcp_option_byte+0x40>)
 80135d8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80135dc:	4909      	ldr	r1, [pc, #36]	; (8013604 <dhcp_option_byte+0x44>)
 80135de:	480a      	ldr	r0, [pc, #40]	; (8013608 <dhcp_option_byte+0x48>)
 80135e0:	f003 f982 	bl	80168e8 <iprintf>
  options[options_out_len++] = value;
 80135e4:	88fb      	ldrh	r3, [r7, #6]
 80135e6:	1c5a      	adds	r2, r3, #1
 80135e8:	80fa      	strh	r2, [r7, #6]
 80135ea:	461a      	mov	r2, r3
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	4413      	add	r3, r2
 80135f0:	797a      	ldrb	r2, [r7, #5]
 80135f2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80135f4:	88fb      	ldrh	r3, [r7, #6]
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3708      	adds	r7, #8
 80135fa:	46bd      	mov	sp, r7
 80135fc:	bd80      	pop	{r7, pc}
 80135fe:	bf00      	nop
 8013600:	0801a244 	.word	0x0801a244
 8013604:	0801a41c 	.word	0x0801a41c
 8013608:	0801a2a4 	.word	0x0801a2a4

0801360c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	4603      	mov	r3, r0
 8013614:	6039      	str	r1, [r7, #0]
 8013616:	80fb      	strh	r3, [r7, #6]
 8013618:	4613      	mov	r3, r2
 801361a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801361c:	88fb      	ldrh	r3, [r7, #6]
 801361e:	3302      	adds	r3, #2
 8013620:	2b44      	cmp	r3, #68	; 0x44
 8013622:	d906      	bls.n	8013632 <dhcp_option_short+0x26>
 8013624:	4b0f      	ldr	r3, [pc, #60]	; (8013664 <dhcp_option_short+0x58>)
 8013626:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801362a:	490f      	ldr	r1, [pc, #60]	; (8013668 <dhcp_option_short+0x5c>)
 801362c:	480f      	ldr	r0, [pc, #60]	; (801366c <dhcp_option_short+0x60>)
 801362e:	f003 f95b 	bl	80168e8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013632:	88bb      	ldrh	r3, [r7, #4]
 8013634:	0a1b      	lsrs	r3, r3, #8
 8013636:	b29a      	uxth	r2, r3
 8013638:	88fb      	ldrh	r3, [r7, #6]
 801363a:	1c59      	adds	r1, r3, #1
 801363c:	80f9      	strh	r1, [r7, #6]
 801363e:	4619      	mov	r1, r3
 8013640:	683b      	ldr	r3, [r7, #0]
 8013642:	440b      	add	r3, r1
 8013644:	b2d2      	uxtb	r2, r2
 8013646:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013648:	88fb      	ldrh	r3, [r7, #6]
 801364a:	1c5a      	adds	r2, r3, #1
 801364c:	80fa      	strh	r2, [r7, #6]
 801364e:	461a      	mov	r2, r3
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	4413      	add	r3, r2
 8013654:	88ba      	ldrh	r2, [r7, #4]
 8013656:	b2d2      	uxtb	r2, r2
 8013658:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801365a:	88fb      	ldrh	r3, [r7, #6]
}
 801365c:	4618      	mov	r0, r3
 801365e:	3708      	adds	r7, #8
 8013660:	46bd      	mov	sp, r7
 8013662:	bd80      	pop	{r7, pc}
 8013664:	0801a244 	.word	0x0801a244
 8013668:	0801a454 	.word	0x0801a454
 801366c:	0801a2a4 	.word	0x0801a2a4

08013670 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b084      	sub	sp, #16
 8013674:	af00      	add	r7, sp, #0
 8013676:	4603      	mov	r3, r0
 8013678:	60b9      	str	r1, [r7, #8]
 801367a:	607a      	str	r2, [r7, #4]
 801367c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801367e:	89fb      	ldrh	r3, [r7, #14]
 8013680:	3304      	adds	r3, #4
 8013682:	2b44      	cmp	r3, #68	; 0x44
 8013684:	d906      	bls.n	8013694 <dhcp_option_long+0x24>
 8013686:	4b19      	ldr	r3, [pc, #100]	; (80136ec <dhcp_option_long+0x7c>)
 8013688:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801368c:	4918      	ldr	r1, [pc, #96]	; (80136f0 <dhcp_option_long+0x80>)
 801368e:	4819      	ldr	r0, [pc, #100]	; (80136f4 <dhcp_option_long+0x84>)
 8013690:	f003 f92a 	bl	80168e8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	0e1a      	lsrs	r2, r3, #24
 8013698:	89fb      	ldrh	r3, [r7, #14]
 801369a:	1c59      	adds	r1, r3, #1
 801369c:	81f9      	strh	r1, [r7, #14]
 801369e:	4619      	mov	r1, r3
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	440b      	add	r3, r1
 80136a4:	b2d2      	uxtb	r2, r2
 80136a6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	0c1a      	lsrs	r2, r3, #16
 80136ac:	89fb      	ldrh	r3, [r7, #14]
 80136ae:	1c59      	adds	r1, r3, #1
 80136b0:	81f9      	strh	r1, [r7, #14]
 80136b2:	4619      	mov	r1, r3
 80136b4:	68bb      	ldr	r3, [r7, #8]
 80136b6:	440b      	add	r3, r1
 80136b8:	b2d2      	uxtb	r2, r2
 80136ba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	0a1a      	lsrs	r2, r3, #8
 80136c0:	89fb      	ldrh	r3, [r7, #14]
 80136c2:	1c59      	adds	r1, r3, #1
 80136c4:	81f9      	strh	r1, [r7, #14]
 80136c6:	4619      	mov	r1, r3
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	440b      	add	r3, r1
 80136cc:	b2d2      	uxtb	r2, r2
 80136ce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80136d0:	89fb      	ldrh	r3, [r7, #14]
 80136d2:	1c5a      	adds	r2, r3, #1
 80136d4:	81fa      	strh	r2, [r7, #14]
 80136d6:	461a      	mov	r2, r3
 80136d8:	68bb      	ldr	r3, [r7, #8]
 80136da:	4413      	add	r3, r2
 80136dc:	687a      	ldr	r2, [r7, #4]
 80136de:	b2d2      	uxtb	r2, r2
 80136e0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80136e2:	89fb      	ldrh	r3, [r7, #14]
}
 80136e4:	4618      	mov	r0, r3
 80136e6:	3710      	adds	r7, #16
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bd80      	pop	{r7, pc}
 80136ec:	0801a244 	.word	0x0801a244
 80136f0:	0801a490 	.word	0x0801a490
 80136f4:	0801a2a4 	.word	0x0801a2a4

080136f8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b090      	sub	sp, #64	; 0x40
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013702:	2300      	movs	r3, #0
 8013704:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013706:	2300      	movs	r3, #0
 8013708:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801370a:	2208      	movs	r2, #8
 801370c:	2100      	movs	r1, #0
 801370e:	48be      	ldr	r0, [pc, #760]	; (8013a08 <dhcp_parse_reply+0x310>)
 8013710:	f003 f8e1 	bl	80168d6 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	895b      	ldrh	r3, [r3, #10]
 8013718:	2b2b      	cmp	r3, #43	; 0x2b
 801371a:	d802      	bhi.n	8013722 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801371c:	f06f 0301 	mvn.w	r3, #1
 8013720:	e2a8      	b.n	8013c74 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	685b      	ldr	r3, [r3, #4]
 8013726:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013728:	23f0      	movs	r3, #240	; 0xf0
 801372a:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	891b      	ldrh	r3, [r3, #8]
 8013730:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013736:	e00c      	b.n	8013752 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801373a:	895b      	ldrh	r3, [r3, #10]
 801373c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801373e:	1ad3      	subs	r3, r2, r3
 8013740:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013744:	895b      	ldrh	r3, [r3, #10]
 8013746:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013748:	1ad3      	subs	r3, r2, r3
 801374a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013754:	2b00      	cmp	r3, #0
 8013756:	d004      	beq.n	8013762 <dhcp_parse_reply+0x6a>
 8013758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801375a:	895b      	ldrh	r3, [r3, #10]
 801375c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801375e:	429a      	cmp	r2, r3
 8013760:	d2ea      	bcs.n	8013738 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013764:	2b00      	cmp	r3, #0
 8013766:	d102      	bne.n	801376e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013768:	f06f 0301 	mvn.w	r3, #1
 801376c:	e282      	b.n	8013c74 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801376e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013770:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013772:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013774:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801377c:	e23a      	b.n	8013bf4 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801377e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013782:	4413      	add	r3, r2
 8013784:	781b      	ldrb	r3, [r3, #0]
 8013786:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013788:	2300      	movs	r3, #0
 801378a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801378e:	f04f 33ff 	mov.w	r3, #4294967295
 8013792:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013794:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013796:	3302      	adds	r3, #2
 8013798:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801379a:	8bfa      	ldrh	r2, [r7, #30]
 801379c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801379e:	429a      	cmp	r2, r3
 80137a0:	d202      	bcs.n	80137a8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80137a2:	f06f 0301 	mvn.w	r3, #1
 80137a6:	e265      	b.n	8013c74 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80137a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80137aa:	3301      	adds	r3, #1
 80137ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137ae:	8952      	ldrh	r2, [r2, #10]
 80137b0:	4293      	cmp	r3, r2
 80137b2:	da07      	bge.n	80137c4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80137b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80137b6:	3301      	adds	r3, #1
 80137b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80137ba:	4413      	add	r3, r2
 80137bc:	781b      	ldrb	r3, [r3, #0]
 80137be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80137c2:	e00b      	b.n	80137dc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80137c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d004      	beq.n	80137d6 <dhcp_parse_reply+0xde>
 80137cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	685b      	ldr	r3, [r3, #4]
 80137d2:	781b      	ldrb	r3, [r3, #0]
 80137d4:	e000      	b.n	80137d8 <dhcp_parse_reply+0xe0>
 80137d6:	2300      	movs	r3, #0
 80137d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80137dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80137e4:	7dfb      	ldrb	r3, [r7, #23]
 80137e6:	2b3b      	cmp	r3, #59	; 0x3b
 80137e8:	f200 812d 	bhi.w	8013a46 <dhcp_parse_reply+0x34e>
 80137ec:	a201      	add	r2, pc, #4	; (adr r2, 80137f4 <dhcp_parse_reply+0xfc>)
 80137ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137f2:	bf00      	nop
 80137f4:	080138e5 	.word	0x080138e5
 80137f8:	080138f5 	.word	0x080138f5
 80137fc:	08013a47 	.word	0x08013a47
 8013800:	08013917 	.word	0x08013917
 8013804:	08013a47 	.word	0x08013a47
 8013808:	08013a47 	.word	0x08013a47
 801380c:	08013a47 	.word	0x08013a47
 8013810:	08013a47 	.word	0x08013a47
 8013814:	08013a47 	.word	0x08013a47
 8013818:	08013a47 	.word	0x08013a47
 801381c:	08013a47 	.word	0x08013a47
 8013820:	08013a47 	.word	0x08013a47
 8013824:	08013a47 	.word	0x08013a47
 8013828:	08013a47 	.word	0x08013a47
 801382c:	08013a47 	.word	0x08013a47
 8013830:	08013a47 	.word	0x08013a47
 8013834:	08013a47 	.word	0x08013a47
 8013838:	08013a47 	.word	0x08013a47
 801383c:	08013a47 	.word	0x08013a47
 8013840:	08013a47 	.word	0x08013a47
 8013844:	08013a47 	.word	0x08013a47
 8013848:	08013a47 	.word	0x08013a47
 801384c:	08013a47 	.word	0x08013a47
 8013850:	08013a47 	.word	0x08013a47
 8013854:	08013a47 	.word	0x08013a47
 8013858:	08013a47 	.word	0x08013a47
 801385c:	08013a47 	.word	0x08013a47
 8013860:	08013a47 	.word	0x08013a47
 8013864:	08013a47 	.word	0x08013a47
 8013868:	08013a47 	.word	0x08013a47
 801386c:	08013a47 	.word	0x08013a47
 8013870:	08013a47 	.word	0x08013a47
 8013874:	08013a47 	.word	0x08013a47
 8013878:	08013a47 	.word	0x08013a47
 801387c:	08013a47 	.word	0x08013a47
 8013880:	08013a47 	.word	0x08013a47
 8013884:	08013a47 	.word	0x08013a47
 8013888:	08013a47 	.word	0x08013a47
 801388c:	08013a47 	.word	0x08013a47
 8013890:	08013a47 	.word	0x08013a47
 8013894:	08013a47 	.word	0x08013a47
 8013898:	08013a47 	.word	0x08013a47
 801389c:	08013a47 	.word	0x08013a47
 80138a0:	08013a47 	.word	0x08013a47
 80138a4:	08013a47 	.word	0x08013a47
 80138a8:	08013a47 	.word	0x08013a47
 80138ac:	08013a47 	.word	0x08013a47
 80138b0:	08013a47 	.word	0x08013a47
 80138b4:	08013a47 	.word	0x08013a47
 80138b8:	08013a47 	.word	0x08013a47
 80138bc:	08013a47 	.word	0x08013a47
 80138c0:	08013943 	.word	0x08013943
 80138c4:	08013965 	.word	0x08013965
 80138c8:	080139a1 	.word	0x080139a1
 80138cc:	080139c3 	.word	0x080139c3
 80138d0:	08013a47 	.word	0x08013a47
 80138d4:	08013a47 	.word	0x08013a47
 80138d8:	08013a47 	.word	0x08013a47
 80138dc:	080139e5 	.word	0x080139e5
 80138e0:	08013a25 	.word	0x08013a25
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80138e4:	2300      	movs	r3, #0
 80138e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80138ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80138f2:	e0ac      	b.n	8013a4e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80138f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138f8:	2b04      	cmp	r3, #4
 80138fa:	d009      	beq.n	8013910 <dhcp_parse_reply+0x218>
 80138fc:	4b43      	ldr	r3, [pc, #268]	; (8013a0c <dhcp_parse_reply+0x314>)
 80138fe:	f240 622e 	movw	r2, #1582	; 0x62e
 8013902:	4943      	ldr	r1, [pc, #268]	; (8013a10 <dhcp_parse_reply+0x318>)
 8013904:	4843      	ldr	r0, [pc, #268]	; (8013a14 <dhcp_parse_reply+0x31c>)
 8013906:	f002 ffef 	bl	80168e8 <iprintf>
 801390a:	f06f 0305 	mvn.w	r3, #5
 801390e:	e1b1      	b.n	8013c74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8013910:	2306      	movs	r3, #6
 8013912:	623b      	str	r3, [r7, #32]
        break;
 8013914:	e09b      	b.n	8013a4e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013916:	2304      	movs	r3, #4
 8013918:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801391c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013920:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013924:	429a      	cmp	r2, r3
 8013926:	d209      	bcs.n	801393c <dhcp_parse_reply+0x244>
 8013928:	4b38      	ldr	r3, [pc, #224]	; (8013a0c <dhcp_parse_reply+0x314>)
 801392a:	f240 6233 	movw	r2, #1587	; 0x633
 801392e:	493a      	ldr	r1, [pc, #232]	; (8013a18 <dhcp_parse_reply+0x320>)
 8013930:	4838      	ldr	r0, [pc, #224]	; (8013a14 <dhcp_parse_reply+0x31c>)
 8013932:	f002 ffd9 	bl	80168e8 <iprintf>
 8013936:	f06f 0305 	mvn.w	r3, #5
 801393a:	e19b      	b.n	8013c74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801393c:	2307      	movs	r3, #7
 801393e:	623b      	str	r3, [r7, #32]
        break;
 8013940:	e085      	b.n	8013a4e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013946:	2b04      	cmp	r3, #4
 8013948:	d009      	beq.n	801395e <dhcp_parse_reply+0x266>
 801394a:	4b30      	ldr	r3, [pc, #192]	; (8013a0c <dhcp_parse_reply+0x314>)
 801394c:	f240 6241 	movw	r2, #1601	; 0x641
 8013950:	492f      	ldr	r1, [pc, #188]	; (8013a10 <dhcp_parse_reply+0x318>)
 8013952:	4830      	ldr	r0, [pc, #192]	; (8013a14 <dhcp_parse_reply+0x31c>)
 8013954:	f002 ffc8 	bl	80168e8 <iprintf>
 8013958:	f06f 0305 	mvn.w	r3, #5
 801395c:	e18a      	b.n	8013c74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801395e:	2303      	movs	r3, #3
 8013960:	623b      	str	r3, [r7, #32]
        break;
 8013962:	e074      	b.n	8013a4e <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013968:	2b01      	cmp	r3, #1
 801396a:	d009      	beq.n	8013980 <dhcp_parse_reply+0x288>
 801396c:	4b27      	ldr	r3, [pc, #156]	; (8013a0c <dhcp_parse_reply+0x314>)
 801396e:	f240 624f 	movw	r2, #1615	; 0x64f
 8013972:	492a      	ldr	r1, [pc, #168]	; (8013a1c <dhcp_parse_reply+0x324>)
 8013974:	4827      	ldr	r0, [pc, #156]	; (8013a14 <dhcp_parse_reply+0x31c>)
 8013976:	f002 ffb7 	bl	80168e8 <iprintf>
 801397a:	f06f 0305 	mvn.w	r3, #5
 801397e:	e179      	b.n	8013c74 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013980:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013982:	2bf0      	cmp	r3, #240	; 0xf0
 8013984:	d009      	beq.n	801399a <dhcp_parse_reply+0x2a2>
 8013986:	4b21      	ldr	r3, [pc, #132]	; (8013a0c <dhcp_parse_reply+0x314>)
 8013988:	f240 6251 	movw	r2, #1617	; 0x651
 801398c:	4924      	ldr	r1, [pc, #144]	; (8013a20 <dhcp_parse_reply+0x328>)
 801398e:	4821      	ldr	r0, [pc, #132]	; (8013a14 <dhcp_parse_reply+0x31c>)
 8013990:	f002 ffaa 	bl	80168e8 <iprintf>
 8013994:	f06f 0305 	mvn.w	r3, #5
 8013998:	e16c      	b.n	8013c74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801399a:	2300      	movs	r3, #0
 801399c:	623b      	str	r3, [r7, #32]
        break;
 801399e:	e056      	b.n	8013a4e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80139a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139a4:	2b01      	cmp	r3, #1
 80139a6:	d009      	beq.n	80139bc <dhcp_parse_reply+0x2c4>
 80139a8:	4b18      	ldr	r3, [pc, #96]	; (8013a0c <dhcp_parse_reply+0x314>)
 80139aa:	f240 6255 	movw	r2, #1621	; 0x655
 80139ae:	491b      	ldr	r1, [pc, #108]	; (8013a1c <dhcp_parse_reply+0x324>)
 80139b0:	4818      	ldr	r0, [pc, #96]	; (8013a14 <dhcp_parse_reply+0x31c>)
 80139b2:	f002 ff99 	bl	80168e8 <iprintf>
 80139b6:	f06f 0305 	mvn.w	r3, #5
 80139ba:	e15b      	b.n	8013c74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80139bc:	2301      	movs	r3, #1
 80139be:	623b      	str	r3, [r7, #32]
        break;
 80139c0:	e045      	b.n	8013a4e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80139c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139c6:	2b04      	cmp	r3, #4
 80139c8:	d009      	beq.n	80139de <dhcp_parse_reply+0x2e6>
 80139ca:	4b10      	ldr	r3, [pc, #64]	; (8013a0c <dhcp_parse_reply+0x314>)
 80139cc:	f240 6259 	movw	r2, #1625	; 0x659
 80139d0:	490f      	ldr	r1, [pc, #60]	; (8013a10 <dhcp_parse_reply+0x318>)
 80139d2:	4810      	ldr	r0, [pc, #64]	; (8013a14 <dhcp_parse_reply+0x31c>)
 80139d4:	f002 ff88 	bl	80168e8 <iprintf>
 80139d8:	f06f 0305 	mvn.w	r3, #5
 80139dc:	e14a      	b.n	8013c74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80139de:	2302      	movs	r3, #2
 80139e0:	623b      	str	r3, [r7, #32]
        break;
 80139e2:	e034      	b.n	8013a4e <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80139e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139e8:	2b04      	cmp	r3, #4
 80139ea:	d009      	beq.n	8013a00 <dhcp_parse_reply+0x308>
 80139ec:	4b07      	ldr	r3, [pc, #28]	; (8013a0c <dhcp_parse_reply+0x314>)
 80139ee:	f240 625d 	movw	r2, #1629	; 0x65d
 80139f2:	4907      	ldr	r1, [pc, #28]	; (8013a10 <dhcp_parse_reply+0x318>)
 80139f4:	4807      	ldr	r0, [pc, #28]	; (8013a14 <dhcp_parse_reply+0x31c>)
 80139f6:	f002 ff77 	bl	80168e8 <iprintf>
 80139fa:	f06f 0305 	mvn.w	r3, #5
 80139fe:	e139      	b.n	8013c74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013a00:	2304      	movs	r3, #4
 8013a02:	623b      	str	r3, [r7, #32]
        break;
 8013a04:	e023      	b.n	8013a4e <dhcp_parse_reply+0x356>
 8013a06:	bf00      	nop
 8013a08:	20016e30 	.word	0x20016e30
 8013a0c:	0801a244 	.word	0x0801a244
 8013a10:	0801a4cc 	.word	0x0801a4cc
 8013a14:	0801a2a4 	.word	0x0801a2a4
 8013a18:	0801a4d8 	.word	0x0801a4d8
 8013a1c:	0801a4ec 	.word	0x0801a4ec
 8013a20:	0801a4f8 	.word	0x0801a4f8
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a28:	2b04      	cmp	r3, #4
 8013a2a:	d009      	beq.n	8013a40 <dhcp_parse_reply+0x348>
 8013a2c:	4b93      	ldr	r3, [pc, #588]	; (8013c7c <dhcp_parse_reply+0x584>)
 8013a2e:	f240 6261 	movw	r2, #1633	; 0x661
 8013a32:	4993      	ldr	r1, [pc, #588]	; (8013c80 <dhcp_parse_reply+0x588>)
 8013a34:	4893      	ldr	r0, [pc, #588]	; (8013c84 <dhcp_parse_reply+0x58c>)
 8013a36:	f002 ff57 	bl	80168e8 <iprintf>
 8013a3a:	f06f 0305 	mvn.w	r3, #5
 8013a3e:	e119      	b.n	8013c74 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8013a40:	2305      	movs	r3, #5
 8013a42:	623b      	str	r3, [r7, #32]
        break;
 8013a44:	e003      	b.n	8013a4e <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8013a46:	2300      	movs	r3, #0
 8013a48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8013a4c:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013a4e:	7dfb      	ldrb	r3, [r7, #23]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d103      	bne.n	8013a5c <dhcp_parse_reply+0x364>
      offset++;
 8013a54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013a56:	3301      	adds	r3, #1
 8013a58:	877b      	strh	r3, [r7, #58]	; 0x3a
 8013a5a:	e0a1      	b.n	8013ba0 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8013a5c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a62:	4413      	add	r3, r2
 8013a64:	3302      	adds	r3, #2
 8013a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013a6a:	db02      	blt.n	8013a72 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8013a6c:	f06f 0301 	mvn.w	r3, #1
 8013a70:	e100      	b.n	8013c74 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8013a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a76:	b29a      	uxth	r2, r3
 8013a78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013a7a:	4413      	add	r3, r2
 8013a7c:	b29b      	uxth	r3, r3
 8013a7e:	3302      	adds	r3, #2
 8013a80:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8013a82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	f000 808a 	beq.w	8013ba0 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013a90:	6a3b      	ldr	r3, [r7, #32]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	db02      	blt.n	8013a9c <dhcp_parse_reply+0x3a4>
 8013a96:	6a3b      	ldr	r3, [r7, #32]
 8013a98:	2b07      	cmp	r3, #7
 8013a9a:	dd06      	ble.n	8013aaa <dhcp_parse_reply+0x3b2>
 8013a9c:	4b77      	ldr	r3, [pc, #476]	; (8013c7c <dhcp_parse_reply+0x584>)
 8013a9e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8013aa2:	4979      	ldr	r1, [pc, #484]	; (8013c88 <dhcp_parse_reply+0x590>)
 8013aa4:	4877      	ldr	r0, [pc, #476]	; (8013c84 <dhcp_parse_reply+0x58c>)
 8013aa6:	f002 ff1f 	bl	80168e8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8013aaa:	4a78      	ldr	r2, [pc, #480]	; (8013c8c <dhcp_parse_reply+0x594>)
 8013aac:	6a3b      	ldr	r3, [r7, #32]
 8013aae:	4413      	add	r3, r2
 8013ab0:	781b      	ldrb	r3, [r3, #0]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d174      	bne.n	8013ba0 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8013ab6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013aba:	2b04      	cmp	r3, #4
 8013abc:	bf28      	it	cs
 8013abe:	2304      	movcs	r3, #4
 8013ac0:	b2db      	uxtb	r3, r3
 8013ac2:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013ac4:	8bfb      	ldrh	r3, [r7, #30]
 8013ac6:	8aba      	ldrh	r2, [r7, #20]
 8013ac8:	f107 0108 	add.w	r1, r7, #8
 8013acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ace:	f7f7 fcfd 	bl	800b4cc <pbuf_copy_partial>
 8013ad2:	4603      	mov	r3, r0
 8013ad4:	461a      	mov	r2, r3
 8013ad6:	8abb      	ldrh	r3, [r7, #20]
 8013ad8:	4293      	cmp	r3, r2
 8013ada:	d002      	beq.n	8013ae2 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8013adc:	f06f 0301 	mvn.w	r3, #1
 8013ae0:	e0c8      	b.n	8013c74 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8013ae2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013ae6:	2b04      	cmp	r3, #4
 8013ae8:	d933      	bls.n	8013b52 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013aea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013aee:	f003 0303 	and.w	r3, r3, #3
 8013af2:	b2db      	uxtb	r3, r3
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d009      	beq.n	8013b0c <dhcp_parse_reply+0x414>
 8013af8:	4b60      	ldr	r3, [pc, #384]	; (8013c7c <dhcp_parse_reply+0x584>)
 8013afa:	f240 6281 	movw	r2, #1665	; 0x681
 8013afe:	4964      	ldr	r1, [pc, #400]	; (8013c90 <dhcp_parse_reply+0x598>)
 8013b00:	4860      	ldr	r0, [pc, #384]	; (8013c84 <dhcp_parse_reply+0x58c>)
 8013b02:	f002 fef1 	bl	80168e8 <iprintf>
 8013b06:	f06f 0305 	mvn.w	r3, #5
 8013b0a:	e0b3      	b.n	8013c74 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8013b0c:	4a5f      	ldr	r2, [pc, #380]	; (8013c8c <dhcp_parse_reply+0x594>)
 8013b0e:	6a3b      	ldr	r3, [r7, #32]
 8013b10:	4413      	add	r3, r2
 8013b12:	2201      	movs	r2, #1
 8013b14:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013b16:	68bb      	ldr	r3, [r7, #8]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7f5 fefc 	bl	8009916 <lwip_htonl>
 8013b1e:	4601      	mov	r1, r0
 8013b20:	4a5c      	ldr	r2, [pc, #368]	; (8013c94 <dhcp_parse_reply+0x59c>)
 8013b22:	6a3b      	ldr	r3, [r7, #32]
 8013b24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8013b28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013b2c:	3b04      	subs	r3, #4
 8013b2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8013b32:	8bfb      	ldrh	r3, [r7, #30]
 8013b34:	3304      	adds	r3, #4
 8013b36:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8013b38:	8a7a      	ldrh	r2, [r7, #18]
 8013b3a:	8bfb      	ldrh	r3, [r7, #30]
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d202      	bcs.n	8013b46 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8013b40:	f06f 0301 	mvn.w	r3, #1
 8013b44:	e096      	b.n	8013c74 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8013b46:	8a7b      	ldrh	r3, [r7, #18]
 8013b48:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8013b4a:	6a3b      	ldr	r3, [r7, #32]
 8013b4c:	3301      	adds	r3, #1
 8013b4e:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8013b50:	e79e      	b.n	8013a90 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8013b52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013b56:	2b04      	cmp	r3, #4
 8013b58:	d106      	bne.n	8013b68 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7f5 feda 	bl	8009916 <lwip_htonl>
 8013b62:	4603      	mov	r3, r0
 8013b64:	60bb      	str	r3, [r7, #8]
 8013b66:	e011      	b.n	8013b8c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013b68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013b6c:	2b01      	cmp	r3, #1
 8013b6e:	d009      	beq.n	8013b84 <dhcp_parse_reply+0x48c>
 8013b70:	4b42      	ldr	r3, [pc, #264]	; (8013c7c <dhcp_parse_reply+0x584>)
 8013b72:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8013b76:	4948      	ldr	r1, [pc, #288]	; (8013c98 <dhcp_parse_reply+0x5a0>)
 8013b78:	4842      	ldr	r0, [pc, #264]	; (8013c84 <dhcp_parse_reply+0x58c>)
 8013b7a:	f002 feb5 	bl	80168e8 <iprintf>
 8013b7e:	f06f 0305 	mvn.w	r3, #5
 8013b82:	e077      	b.n	8013c74 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8013b84:	f107 0308 	add.w	r3, r7, #8
 8013b88:	781b      	ldrb	r3, [r3, #0]
 8013b8a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8013b8c:	4a3f      	ldr	r2, [pc, #252]	; (8013c8c <dhcp_parse_reply+0x594>)
 8013b8e:	6a3b      	ldr	r3, [r7, #32]
 8013b90:	4413      	add	r3, r2
 8013b92:	2201      	movs	r2, #1
 8013b94:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8013b96:	68ba      	ldr	r2, [r7, #8]
 8013b98:	493e      	ldr	r1, [pc, #248]	; (8013c94 <dhcp_parse_reply+0x59c>)
 8013b9a:	6a3b      	ldr	r3, [r7, #32]
 8013b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8013ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba2:	895b      	ldrh	r3, [r3, #10]
 8013ba4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d324      	bcc.n	8013bf4 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8013baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bac:	895b      	ldrh	r3, [r3, #10]
 8013bae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013bb0:	1ad3      	subs	r3, r2, r3
 8013bb2:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8013bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb6:	895b      	ldrh	r3, [r3, #10]
 8013bb8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013bba:	1ad3      	subs	r3, r2, r3
 8013bbc:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8013bbe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013bc0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d213      	bcs.n	8013bee <dhcp_parse_reply+0x4f6>
        q = q->next;
 8013bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d109      	bne.n	8013be6 <dhcp_parse_reply+0x4ee>
 8013bd2:	4b2a      	ldr	r3, [pc, #168]	; (8013c7c <dhcp_parse_reply+0x584>)
 8013bd4:	f240 629d 	movw	r2, #1693	; 0x69d
 8013bd8:	4930      	ldr	r1, [pc, #192]	; (8013c9c <dhcp_parse_reply+0x5a4>)
 8013bda:	482a      	ldr	r0, [pc, #168]	; (8013c84 <dhcp_parse_reply+0x58c>)
 8013bdc:	f002 fe84 	bl	80168e8 <iprintf>
 8013be0:	f06f 0305 	mvn.w	r3, #5
 8013be4:	e046      	b.n	8013c74 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8013be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013be8:	685b      	ldr	r3, [r3, #4]
 8013bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013bec:	e002      	b.n	8013bf4 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8013bee:	f06f 0301 	mvn.w	r3, #1
 8013bf2:	e03f      	b.n	8013c74 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d00a      	beq.n	8013c10 <dhcp_parse_reply+0x518>
 8013bfa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013bfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	d206      	bcs.n	8013c10 <dhcp_parse_reply+0x518>
 8013c02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c06:	4413      	add	r3, r2
 8013c08:	781b      	ldrb	r3, [r3, #0]
 8013c0a:	2bff      	cmp	r3, #255	; 0xff
 8013c0c:	f47f adb7 	bne.w	801377e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8013c10:	4b1e      	ldr	r3, [pc, #120]	; (8013c8c <dhcp_parse_reply+0x594>)
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d018      	beq.n	8013c4a <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013c18:	4b1e      	ldr	r3, [pc, #120]	; (8013c94 <dhcp_parse_reply+0x59c>)
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013c1e:	4b1b      	ldr	r3, [pc, #108]	; (8013c8c <dhcp_parse_reply+0x594>)
 8013c20:	2200      	movs	r2, #0
 8013c22:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	2b01      	cmp	r3, #1
 8013c28:	d102      	bne.n	8013c30 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8013c2a:	2301      	movs	r3, #1
 8013c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c2e:	e00c      	b.n	8013c4a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	2b02      	cmp	r3, #2
 8013c34:	d102      	bne.n	8013c3c <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8013c36:	2301      	movs	r3, #1
 8013c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8013c3a:	e006      	b.n	8013c4a <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	2b03      	cmp	r3, #3
 8013c40:	d103      	bne.n	8013c4a <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8013c42:	2301      	movs	r3, #1
 8013c44:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8013c46:	2301      	movs	r3, #1
 8013c48:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8013c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d006      	beq.n	8013c5e <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013c50:	2300      	movs	r3, #0
 8013c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8013c54:	236c      	movs	r3, #108	; 0x6c
 8013c56:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8013c58:	23ec      	movs	r3, #236	; 0xec
 8013c5a:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8013c5c:	e569      	b.n	8013732 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8013c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d006      	beq.n	8013c72 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8013c64:	2300      	movs	r3, #0
 8013c66:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8013c68:	232c      	movs	r3, #44	; 0x2c
 8013c6a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013c6c:	236c      	movs	r3, #108	; 0x6c
 8013c6e:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8013c70:	e55f      	b.n	8013732 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8013c72:	2300      	movs	r3, #0
}
 8013c74:	4618      	mov	r0, r3
 8013c76:	3740      	adds	r7, #64	; 0x40
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	bd80      	pop	{r7, pc}
 8013c7c:	0801a244 	.word	0x0801a244
 8013c80:	0801a4cc 	.word	0x0801a4cc
 8013c84:	0801a2a4 	.word	0x0801a2a4
 8013c88:	0801a510 	.word	0x0801a510
 8013c8c:	20016e30 	.word	0x20016e30
 8013c90:	0801a524 	.word	0x0801a524
 8013c94:	20016e38 	.word	0x20016e38
 8013c98:	0801a53c 	.word	0x0801a53c
 8013c9c:	0801a550 	.word	0x0801a550

08013ca0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b08a      	sub	sp, #40	; 0x28
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	60f8      	str	r0, [r7, #12]
 8013ca8:	60b9      	str	r1, [r7, #8]
 8013caa:	607a      	str	r2, [r7, #4]
 8013cac:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8013cae:	4b5f      	ldr	r3, [pc, #380]	; (8013e2c <dhcp_recv+0x18c>)
 8013cb0:	685b      	ldr	r3, [r3, #4]
 8013cb2:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013cb4:	6a3b      	ldr	r3, [r7, #32]
 8013cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cb8:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	685b      	ldr	r3, [r3, #4]
 8013cbe:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8013cc0:	69fb      	ldr	r3, [r7, #28]
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	f000 809d 	beq.w	8013e02 <dhcp_recv+0x162>
 8013cc8:	69fb      	ldr	r3, [r7, #28]
 8013cca:	791b      	ldrb	r3, [r3, #4]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	f000 8098 	beq.w	8013e02 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	895b      	ldrh	r3, [r3, #10]
 8013cd6:	2b2b      	cmp	r3, #43	; 0x2b
 8013cd8:	f240 8095 	bls.w	8013e06 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013cdc:	69bb      	ldr	r3, [r7, #24]
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	2b02      	cmp	r3, #2
 8013ce2:	f040 8092 	bne.w	8013e0a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013cec:	e012      	b.n	8013d14 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cf2:	6a3a      	ldr	r2, [r7, #32]
 8013cf4:	4413      	add	r3, r2
 8013cf6:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8013cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cfe:	69b9      	ldr	r1, [r7, #24]
 8013d00:	440b      	add	r3, r1
 8013d02:	7f1b      	ldrb	r3, [r3, #28]
 8013d04:	429a      	cmp	r2, r3
 8013d06:	f040 8082 	bne.w	8013e0e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013d0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d0e:	3301      	adds	r3, #1
 8013d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013d14:	6a3b      	ldr	r3, [r7, #32]
 8013d16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d1a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d203      	bcs.n	8013d2a <dhcp_recv+0x8a>
 8013d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d26:	2b05      	cmp	r3, #5
 8013d28:	d9e1      	bls.n	8013cee <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013d2a:	69bb      	ldr	r3, [r7, #24]
 8013d2c:	685b      	ldr	r3, [r3, #4]
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7f5 fdf1 	bl	8009916 <lwip_htonl>
 8013d34:	4602      	mov	r2, r0
 8013d36:	69fb      	ldr	r3, [r7, #28]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d169      	bne.n	8013e12 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8013d3e:	69f9      	ldr	r1, [r7, #28]
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f7ff fcd9 	bl	80136f8 <dhcp_parse_reply>
 8013d46:	4603      	mov	r3, r0
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d164      	bne.n	8013e16 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013d4c:	4b38      	ldr	r3, [pc, #224]	; (8013e30 <dhcp_recv+0x190>)
 8013d4e:	785b      	ldrb	r3, [r3, #1]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d062      	beq.n	8013e1a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	685b      	ldr	r3, [r3, #4]
 8013d58:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8013d5a:	4b36      	ldr	r3, [pc, #216]	; (8013e34 <dhcp_recv+0x194>)
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8013d60:	7cfb      	ldrb	r3, [r7, #19]
 8013d62:	2b05      	cmp	r3, #5
 8013d64:	d12a      	bne.n	8013dbc <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013d66:	69fb      	ldr	r3, [r7, #28]
 8013d68:	795b      	ldrb	r3, [r3, #5]
 8013d6a:	2b01      	cmp	r3, #1
 8013d6c:	d112      	bne.n	8013d94 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8013d6e:	6979      	ldr	r1, [r7, #20]
 8013d70:	6a38      	ldr	r0, [r7, #32]
 8013d72:	f7fe fdf9 	bl	8012968 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8013d76:	6a3b      	ldr	r3, [r7, #32]
 8013d78:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013d7c:	f003 0308 	and.w	r3, r3, #8
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d003      	beq.n	8013d8c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013d84:	6a38      	ldr	r0, [r7, #32]
 8013d86:	f7fe fb69 	bl	801245c <dhcp_check>
 8013d8a:	e047      	b.n	8013e1c <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013d8c:	6a38      	ldr	r0, [r7, #32]
 8013d8e:	f7ff f85b 	bl	8012e48 <dhcp_bind>
 8013d92:	e043      	b.n	8013e1c <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013d94:	69fb      	ldr	r3, [r7, #28]
 8013d96:	795b      	ldrb	r3, [r3, #5]
 8013d98:	2b03      	cmp	r3, #3
 8013d9a:	d007      	beq.n	8013dac <dhcp_recv+0x10c>
 8013d9c:	69fb      	ldr	r3, [r7, #28]
 8013d9e:	795b      	ldrb	r3, [r3, #5]
 8013da0:	2b04      	cmp	r3, #4
 8013da2:	d003      	beq.n	8013dac <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8013da4:	69fb      	ldr	r3, [r7, #28]
 8013da6:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013da8:	2b05      	cmp	r3, #5
 8013daa:	d137      	bne.n	8013e1c <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8013dac:	6979      	ldr	r1, [r7, #20]
 8013dae:	6a38      	ldr	r0, [r7, #32]
 8013db0:	f7fe fdda 	bl	8012968 <dhcp_handle_ack>
      dhcp_bind(netif);
 8013db4:	6a38      	ldr	r0, [r7, #32]
 8013db6:	f7ff f847 	bl	8012e48 <dhcp_bind>
 8013dba:	e02f      	b.n	8013e1c <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013dbc:	7cfb      	ldrb	r3, [r7, #19]
 8013dbe:	2b06      	cmp	r3, #6
 8013dc0:	d113      	bne.n	8013dea <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013dc2:	69fb      	ldr	r3, [r7, #28]
 8013dc4:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8013dc6:	2b03      	cmp	r3, #3
 8013dc8:	d00b      	beq.n	8013de2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013dca:	69fb      	ldr	r3, [r7, #28]
 8013dcc:	795b      	ldrb	r3, [r3, #5]
 8013dce:	2b01      	cmp	r3, #1
 8013dd0:	d007      	beq.n	8013de2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013dd2:	69fb      	ldr	r3, [r7, #28]
 8013dd4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013dd6:	2b04      	cmp	r3, #4
 8013dd8:	d003      	beq.n	8013de2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013dda:	69fb      	ldr	r3, [r7, #28]
 8013ddc:	795b      	ldrb	r3, [r3, #5]
 8013dde:	2b05      	cmp	r3, #5
 8013de0:	d103      	bne.n	8013dea <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8013de2:	6a38      	ldr	r0, [r7, #32]
 8013de4:	f7fe fb20 	bl	8012428 <dhcp_handle_nak>
 8013de8:	e018      	b.n	8013e1c <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8013dea:	7cfb      	ldrb	r3, [r7, #19]
 8013dec:	2b02      	cmp	r3, #2
 8013dee:	d108      	bne.n	8013e02 <dhcp_recv+0x162>
 8013df0:	69fb      	ldr	r3, [r7, #28]
 8013df2:	795b      	ldrb	r3, [r3, #5]
 8013df4:	2b06      	cmp	r3, #6
 8013df6:	d104      	bne.n	8013e02 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8013df8:	6979      	ldr	r1, [r7, #20]
 8013dfa:	6a38      	ldr	r0, [r7, #32]
 8013dfc:	f7fe fb62 	bl	80124c4 <dhcp_handle_offer>
 8013e00:	e00c      	b.n	8013e1c <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8013e02:	bf00      	nop
 8013e04:	e00a      	b.n	8013e1c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8013e06:	bf00      	nop
 8013e08:	e008      	b.n	8013e1c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8013e0a:	bf00      	nop
 8013e0c:	e006      	b.n	8013e1c <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8013e0e:	bf00      	nop
 8013e10:	e004      	b.n	8013e1c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8013e12:	bf00      	nop
 8013e14:	e002      	b.n	8013e1c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8013e16:	bf00      	nop
 8013e18:	e000      	b.n	8013e1c <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8013e1a:	bf00      	nop
  pbuf_free(p);
 8013e1c:	6878      	ldr	r0, [r7, #4]
 8013e1e:	f7f7 f94f 	bl	800b0c0 <pbuf_free>
}
 8013e22:	bf00      	nop
 8013e24:	3728      	adds	r7, #40	; 0x28
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd80      	pop	{r7, pc}
 8013e2a:	bf00      	nop
 8013e2c:	200136e0 	.word	0x200136e0
 8013e30:	20016e30 	.word	0x20016e30
 8013e34:	20016e38 	.word	0x20016e38

08013e38 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b088      	sub	sp, #32
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	60f8      	str	r0, [r7, #12]
 8013e40:	60b9      	str	r1, [r7, #8]
 8013e42:	603b      	str	r3, [r7, #0]
 8013e44:	4613      	mov	r3, r2
 8013e46:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d108      	bne.n	8013e60 <dhcp_create_msg+0x28>
 8013e4e:	4b5f      	ldr	r3, [pc, #380]	; (8013fcc <dhcp_create_msg+0x194>)
 8013e50:	f240 7269 	movw	r2, #1897	; 0x769
 8013e54:	495e      	ldr	r1, [pc, #376]	; (8013fd0 <dhcp_create_msg+0x198>)
 8013e56:	485f      	ldr	r0, [pc, #380]	; (8013fd4 <dhcp_create_msg+0x19c>)
 8013e58:	f002 fd46 	bl	80168e8 <iprintf>
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	e0b1      	b.n	8013fc4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d108      	bne.n	8013e78 <dhcp_create_msg+0x40>
 8013e66:	4b59      	ldr	r3, [pc, #356]	; (8013fcc <dhcp_create_msg+0x194>)
 8013e68:	f240 726a 	movw	r2, #1898	; 0x76a
 8013e6c:	495a      	ldr	r1, [pc, #360]	; (8013fd8 <dhcp_create_msg+0x1a0>)
 8013e6e:	4859      	ldr	r0, [pc, #356]	; (8013fd4 <dhcp_create_msg+0x19c>)
 8013e70:	f002 fd3a 	bl	80168e8 <iprintf>
 8013e74:	2300      	movs	r3, #0
 8013e76:	e0a5      	b.n	8013fc4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013e78:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e7c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8013e80:	2036      	movs	r0, #54	; 0x36
 8013e82:	f7f6 fe3d 	bl	800ab00 <pbuf_alloc>
 8013e86:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8013e88:	69bb      	ldr	r3, [r7, #24]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d101      	bne.n	8013e92 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8013e8e:	2300      	movs	r3, #0
 8013e90:	e098      	b.n	8013fc4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8013e92:	69bb      	ldr	r3, [r7, #24]
 8013e94:	895b      	ldrh	r3, [r3, #10]
 8013e96:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8013e9a:	d206      	bcs.n	8013eaa <dhcp_create_msg+0x72>
 8013e9c:	4b4b      	ldr	r3, [pc, #300]	; (8013fcc <dhcp_create_msg+0x194>)
 8013e9e:	f240 7272 	movw	r2, #1906	; 0x772
 8013ea2:	494e      	ldr	r1, [pc, #312]	; (8013fdc <dhcp_create_msg+0x1a4>)
 8013ea4:	484b      	ldr	r0, [pc, #300]	; (8013fd4 <dhcp_create_msg+0x19c>)
 8013ea6:	f002 fd1f 	bl	80168e8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013eaa:	79fb      	ldrb	r3, [r7, #7]
 8013eac:	2b03      	cmp	r3, #3
 8013eae:	d103      	bne.n	8013eb8 <dhcp_create_msg+0x80>
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	795b      	ldrb	r3, [r3, #5]
 8013eb4:	2b03      	cmp	r3, #3
 8013eb6:	d10d      	bne.n	8013ed4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	799b      	ldrb	r3, [r3, #6]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d105      	bne.n	8013ecc <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013ec0:	f002 fd2a 	bl	8016918 <rand>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	461a      	mov	r2, r3
 8013ec8:	4b45      	ldr	r3, [pc, #276]	; (8013fe0 <dhcp_create_msg+0x1a8>)
 8013eca:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8013ecc:	4b44      	ldr	r3, [pc, #272]	; (8013fe0 <dhcp_create_msg+0x1a8>)
 8013ece:	681a      	ldr	r2, [r3, #0]
 8013ed0:	68bb      	ldr	r3, [r7, #8]
 8013ed2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8013ed4:	69bb      	ldr	r3, [r7, #24]
 8013ed6:	685b      	ldr	r3, [r3, #4]
 8013ed8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8013eda:	f44f 729a 	mov.w	r2, #308	; 0x134
 8013ede:	2100      	movs	r1, #0
 8013ee0:	6978      	ldr	r0, [r7, #20]
 8013ee2:	f002 fcf8 	bl	80168d6 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8013ee6:	697b      	ldr	r3, [r7, #20]
 8013ee8:	2201      	movs	r2, #1
 8013eea:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	2201      	movs	r2, #1
 8013ef0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013ef8:	697b      	ldr	r3, [r7, #20]
 8013efa:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7f5 fd08 	bl	8009916 <lwip_htonl>
 8013f06:	4602      	mov	r2, r0
 8013f08:	697b      	ldr	r3, [r7, #20]
 8013f0a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013f0c:	79fb      	ldrb	r3, [r7, #7]
 8013f0e:	2b08      	cmp	r3, #8
 8013f10:	d010      	beq.n	8013f34 <dhcp_create_msg+0xfc>
 8013f12:	79fb      	ldrb	r3, [r7, #7]
 8013f14:	2b04      	cmp	r3, #4
 8013f16:	d00d      	beq.n	8013f34 <dhcp_create_msg+0xfc>
 8013f18:	79fb      	ldrb	r3, [r7, #7]
 8013f1a:	2b07      	cmp	r3, #7
 8013f1c:	d00a      	beq.n	8013f34 <dhcp_create_msg+0xfc>
 8013f1e:	79fb      	ldrb	r3, [r7, #7]
 8013f20:	2b03      	cmp	r3, #3
 8013f22:	d10c      	bne.n	8013f3e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013f28:	2b05      	cmp	r3, #5
 8013f2a:	d003      	beq.n	8013f34 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013f2c:	68bb      	ldr	r3, [r7, #8]
 8013f2e:	795b      	ldrb	r3, [r3, #5]
 8013f30:	2b04      	cmp	r3, #4
 8013f32:	d104      	bne.n	8013f3e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	3304      	adds	r3, #4
 8013f38:	681a      	ldr	r2, [r3, #0]
 8013f3a:	697b      	ldr	r3, [r7, #20]
 8013f3c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013f3e:	2300      	movs	r3, #0
 8013f40:	83fb      	strh	r3, [r7, #30]
 8013f42:	e00c      	b.n	8013f5e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8013f44:	8bfa      	ldrh	r2, [r7, #30]
 8013f46:	8bfb      	ldrh	r3, [r7, #30]
 8013f48:	68f9      	ldr	r1, [r7, #12]
 8013f4a:	440a      	add	r2, r1
 8013f4c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8013f50:	697a      	ldr	r2, [r7, #20]
 8013f52:	4413      	add	r3, r2
 8013f54:	460a      	mov	r2, r1
 8013f56:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013f58:	8bfb      	ldrh	r3, [r7, #30]
 8013f5a:	3301      	adds	r3, #1
 8013f5c:	83fb      	strh	r3, [r7, #30]
 8013f5e:	8bfb      	ldrh	r3, [r7, #30]
 8013f60:	2b05      	cmp	r3, #5
 8013f62:	d9ef      	bls.n	8013f44 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013f64:	697b      	ldr	r3, [r7, #20]
 8013f66:	2200      	movs	r2, #0
 8013f68:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013f6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8013f70:	2200      	movs	r2, #0
 8013f72:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8013f76:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8013f7a:	2200      	movs	r2, #0
 8013f7c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8013f80:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8013f84:	2200      	movs	r2, #0
 8013f86:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013f8a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f94:	2301      	movs	r3, #1
 8013f96:	2235      	movs	r2, #53	; 0x35
 8013f98:	2000      	movs	r0, #0
 8013f9a:	f7ff fadd 	bl	8013558 <dhcp_option>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013fa8:	79fa      	ldrb	r2, [r7, #7]
 8013faa:	8a7b      	ldrh	r3, [r7, #18]
 8013fac:	4618      	mov	r0, r3
 8013fae:	f7ff fb07 	bl	80135c0 <dhcp_option_byte>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8013fb6:	683b      	ldr	r3, [r7, #0]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d002      	beq.n	8013fc2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	8a7a      	ldrh	r2, [r7, #18]
 8013fc0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8013fc2:	69bb      	ldr	r3, [r7, #24]
}
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	3720      	adds	r7, #32
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}
 8013fcc:	0801a244 	.word	0x0801a244
 8013fd0:	0801a564 	.word	0x0801a564
 8013fd4:	0801a2a4 	.word	0x0801a2a4
 8013fd8:	0801a584 	.word	0x0801a584
 8013fdc:	0801a5a4 	.word	0x0801a5a4
 8013fe0:	200102a0 	.word	0x200102a0

08013fe4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b084      	sub	sp, #16
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	4603      	mov	r3, r0
 8013fec:	60b9      	str	r1, [r7, #8]
 8013fee:	607a      	str	r2, [r7, #4]
 8013ff0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8013ff2:	89fb      	ldrh	r3, [r7, #14]
 8013ff4:	1c5a      	adds	r2, r3, #1
 8013ff6:	81fa      	strh	r2, [r7, #14]
 8013ff8:	461a      	mov	r2, r3
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	4413      	add	r3, r2
 8013ffe:	22ff      	movs	r2, #255	; 0xff
 8014000:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014002:	e007      	b.n	8014014 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8014004:	89fb      	ldrh	r3, [r7, #14]
 8014006:	1c5a      	adds	r2, r3, #1
 8014008:	81fa      	strh	r2, [r7, #14]
 801400a:	461a      	mov	r2, r3
 801400c:	68bb      	ldr	r3, [r7, #8]
 801400e:	4413      	add	r3, r2
 8014010:	2200      	movs	r2, #0
 8014012:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8014014:	89fb      	ldrh	r3, [r7, #14]
 8014016:	2b43      	cmp	r3, #67	; 0x43
 8014018:	d904      	bls.n	8014024 <dhcp_option_trailer+0x40>
 801401a:	89fb      	ldrh	r3, [r7, #14]
 801401c:	f003 0303 	and.w	r3, r3, #3
 8014020:	2b00      	cmp	r3, #0
 8014022:	d002      	beq.n	801402a <dhcp_option_trailer+0x46>
 8014024:	89fb      	ldrh	r3, [r7, #14]
 8014026:	2b43      	cmp	r3, #67	; 0x43
 8014028:	d9ec      	bls.n	8014004 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801402a:	89fb      	ldrh	r3, [r7, #14]
 801402c:	33f0      	adds	r3, #240	; 0xf0
 801402e:	b29b      	uxth	r3, r3
 8014030:	4619      	mov	r1, r3
 8014032:	6878      	ldr	r0, [r7, #4]
 8014034:	f7f6 febe 	bl	800adb4 <pbuf_realloc>
}
 8014038:	bf00      	nop
 801403a:	3710      	adds	r7, #16
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014040:	b480      	push	{r7}
 8014042:	b085      	sub	sp, #20
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d017      	beq.n	801407e <dhcp_supplied_address+0x3e>
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014052:	2b00      	cmp	r3, #0
 8014054:	d013      	beq.n	801407e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801405a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	795b      	ldrb	r3, [r3, #5]
 8014060:	2b0a      	cmp	r3, #10
 8014062:	d007      	beq.n	8014074 <dhcp_supplied_address+0x34>
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	795b      	ldrb	r3, [r3, #5]
 8014068:	2b05      	cmp	r3, #5
 801406a:	d003      	beq.n	8014074 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801406c:	68fb      	ldr	r3, [r7, #12]
 801406e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014070:	2b04      	cmp	r3, #4
 8014072:	d101      	bne.n	8014078 <dhcp_supplied_address+0x38>
 8014074:	2301      	movs	r3, #1
 8014076:	e000      	b.n	801407a <dhcp_supplied_address+0x3a>
 8014078:	2300      	movs	r3, #0
 801407a:	b2db      	uxtb	r3, r3
 801407c:	e000      	b.n	8014080 <dhcp_supplied_address+0x40>
  }
  return 0;
 801407e:	2300      	movs	r3, #0
}
 8014080:	4618      	mov	r0, r3
 8014082:	3714      	adds	r7, #20
 8014084:	46bd      	mov	sp, r7
 8014086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408a:	4770      	bx	lr

0801408c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b082      	sub	sp, #8
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014094:	4915      	ldr	r1, [pc, #84]	; (80140ec <etharp_free_entry+0x60>)
 8014096:	687a      	ldr	r2, [r7, #4]
 8014098:	4613      	mov	r3, r2
 801409a:	005b      	lsls	r3, r3, #1
 801409c:	4413      	add	r3, r2
 801409e:	00db      	lsls	r3, r3, #3
 80140a0:	440b      	add	r3, r1
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d013      	beq.n	80140d0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80140a8:	4910      	ldr	r1, [pc, #64]	; (80140ec <etharp_free_entry+0x60>)
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	4613      	mov	r3, r2
 80140ae:	005b      	lsls	r3, r3, #1
 80140b0:	4413      	add	r3, r2
 80140b2:	00db      	lsls	r3, r3, #3
 80140b4:	440b      	add	r3, r1
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	4618      	mov	r0, r3
 80140ba:	f7f7 f801 	bl	800b0c0 <pbuf_free>
    arp_table[i].q = NULL;
 80140be:	490b      	ldr	r1, [pc, #44]	; (80140ec <etharp_free_entry+0x60>)
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	4613      	mov	r3, r2
 80140c4:	005b      	lsls	r3, r3, #1
 80140c6:	4413      	add	r3, r2
 80140c8:	00db      	lsls	r3, r3, #3
 80140ca:	440b      	add	r3, r1
 80140cc:	2200      	movs	r2, #0
 80140ce:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80140d0:	4906      	ldr	r1, [pc, #24]	; (80140ec <etharp_free_entry+0x60>)
 80140d2:	687a      	ldr	r2, [r7, #4]
 80140d4:	4613      	mov	r3, r2
 80140d6:	005b      	lsls	r3, r3, #1
 80140d8:	4413      	add	r3, r2
 80140da:	00db      	lsls	r3, r3, #3
 80140dc:	440b      	add	r3, r1
 80140de:	3314      	adds	r3, #20
 80140e0:	2200      	movs	r2, #0
 80140e2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80140e4:	bf00      	nop
 80140e6:	3708      	adds	r7, #8
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}
 80140ec:	200102a4 	.word	0x200102a4

080140f0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b082      	sub	sp, #8
 80140f4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140f6:	2300      	movs	r3, #0
 80140f8:	607b      	str	r3, [r7, #4]
 80140fa:	e096      	b.n	801422a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80140fc:	494f      	ldr	r1, [pc, #316]	; (801423c <etharp_tmr+0x14c>)
 80140fe:	687a      	ldr	r2, [r7, #4]
 8014100:	4613      	mov	r3, r2
 8014102:	005b      	lsls	r3, r3, #1
 8014104:	4413      	add	r3, r2
 8014106:	00db      	lsls	r3, r3, #3
 8014108:	440b      	add	r3, r1
 801410a:	3314      	adds	r3, #20
 801410c:	781b      	ldrb	r3, [r3, #0]
 801410e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014110:	78fb      	ldrb	r3, [r7, #3]
 8014112:	2b00      	cmp	r3, #0
 8014114:	f000 8086 	beq.w	8014224 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014118:	4948      	ldr	r1, [pc, #288]	; (801423c <etharp_tmr+0x14c>)
 801411a:	687a      	ldr	r2, [r7, #4]
 801411c:	4613      	mov	r3, r2
 801411e:	005b      	lsls	r3, r3, #1
 8014120:	4413      	add	r3, r2
 8014122:	00db      	lsls	r3, r3, #3
 8014124:	440b      	add	r3, r1
 8014126:	3312      	adds	r3, #18
 8014128:	881b      	ldrh	r3, [r3, #0]
 801412a:	3301      	adds	r3, #1
 801412c:	b298      	uxth	r0, r3
 801412e:	4943      	ldr	r1, [pc, #268]	; (801423c <etharp_tmr+0x14c>)
 8014130:	687a      	ldr	r2, [r7, #4]
 8014132:	4613      	mov	r3, r2
 8014134:	005b      	lsls	r3, r3, #1
 8014136:	4413      	add	r3, r2
 8014138:	00db      	lsls	r3, r3, #3
 801413a:	440b      	add	r3, r1
 801413c:	3312      	adds	r3, #18
 801413e:	4602      	mov	r2, r0
 8014140:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014142:	493e      	ldr	r1, [pc, #248]	; (801423c <etharp_tmr+0x14c>)
 8014144:	687a      	ldr	r2, [r7, #4]
 8014146:	4613      	mov	r3, r2
 8014148:	005b      	lsls	r3, r3, #1
 801414a:	4413      	add	r3, r2
 801414c:	00db      	lsls	r3, r3, #3
 801414e:	440b      	add	r3, r1
 8014150:	3312      	adds	r3, #18
 8014152:	881b      	ldrh	r3, [r3, #0]
 8014154:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014158:	d215      	bcs.n	8014186 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801415a:	4938      	ldr	r1, [pc, #224]	; (801423c <etharp_tmr+0x14c>)
 801415c:	687a      	ldr	r2, [r7, #4]
 801415e:	4613      	mov	r3, r2
 8014160:	005b      	lsls	r3, r3, #1
 8014162:	4413      	add	r3, r2
 8014164:	00db      	lsls	r3, r3, #3
 8014166:	440b      	add	r3, r1
 8014168:	3314      	adds	r3, #20
 801416a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801416c:	2b01      	cmp	r3, #1
 801416e:	d10e      	bne.n	801418e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014170:	4932      	ldr	r1, [pc, #200]	; (801423c <etharp_tmr+0x14c>)
 8014172:	687a      	ldr	r2, [r7, #4]
 8014174:	4613      	mov	r3, r2
 8014176:	005b      	lsls	r3, r3, #1
 8014178:	4413      	add	r3, r2
 801417a:	00db      	lsls	r3, r3, #3
 801417c:	440b      	add	r3, r1
 801417e:	3312      	adds	r3, #18
 8014180:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014182:	2b04      	cmp	r3, #4
 8014184:	d903      	bls.n	801418e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f7ff ff80 	bl	801408c <etharp_free_entry>
 801418c:	e04a      	b.n	8014224 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801418e:	492b      	ldr	r1, [pc, #172]	; (801423c <etharp_tmr+0x14c>)
 8014190:	687a      	ldr	r2, [r7, #4]
 8014192:	4613      	mov	r3, r2
 8014194:	005b      	lsls	r3, r3, #1
 8014196:	4413      	add	r3, r2
 8014198:	00db      	lsls	r3, r3, #3
 801419a:	440b      	add	r3, r1
 801419c:	3314      	adds	r3, #20
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	2b03      	cmp	r3, #3
 80141a2:	d10a      	bne.n	80141ba <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80141a4:	4925      	ldr	r1, [pc, #148]	; (801423c <etharp_tmr+0x14c>)
 80141a6:	687a      	ldr	r2, [r7, #4]
 80141a8:	4613      	mov	r3, r2
 80141aa:	005b      	lsls	r3, r3, #1
 80141ac:	4413      	add	r3, r2
 80141ae:	00db      	lsls	r3, r3, #3
 80141b0:	440b      	add	r3, r1
 80141b2:	3314      	adds	r3, #20
 80141b4:	2204      	movs	r2, #4
 80141b6:	701a      	strb	r2, [r3, #0]
 80141b8:	e034      	b.n	8014224 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80141ba:	4920      	ldr	r1, [pc, #128]	; (801423c <etharp_tmr+0x14c>)
 80141bc:	687a      	ldr	r2, [r7, #4]
 80141be:	4613      	mov	r3, r2
 80141c0:	005b      	lsls	r3, r3, #1
 80141c2:	4413      	add	r3, r2
 80141c4:	00db      	lsls	r3, r3, #3
 80141c6:	440b      	add	r3, r1
 80141c8:	3314      	adds	r3, #20
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	2b04      	cmp	r3, #4
 80141ce:	d10a      	bne.n	80141e6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80141d0:	491a      	ldr	r1, [pc, #104]	; (801423c <etharp_tmr+0x14c>)
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	4613      	mov	r3, r2
 80141d6:	005b      	lsls	r3, r3, #1
 80141d8:	4413      	add	r3, r2
 80141da:	00db      	lsls	r3, r3, #3
 80141dc:	440b      	add	r3, r1
 80141de:	3314      	adds	r3, #20
 80141e0:	2202      	movs	r2, #2
 80141e2:	701a      	strb	r2, [r3, #0]
 80141e4:	e01e      	b.n	8014224 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80141e6:	4915      	ldr	r1, [pc, #84]	; (801423c <etharp_tmr+0x14c>)
 80141e8:	687a      	ldr	r2, [r7, #4]
 80141ea:	4613      	mov	r3, r2
 80141ec:	005b      	lsls	r3, r3, #1
 80141ee:	4413      	add	r3, r2
 80141f0:	00db      	lsls	r3, r3, #3
 80141f2:	440b      	add	r3, r1
 80141f4:	3314      	adds	r3, #20
 80141f6:	781b      	ldrb	r3, [r3, #0]
 80141f8:	2b01      	cmp	r3, #1
 80141fa:	d113      	bne.n	8014224 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80141fc:	490f      	ldr	r1, [pc, #60]	; (801423c <etharp_tmr+0x14c>)
 80141fe:	687a      	ldr	r2, [r7, #4]
 8014200:	4613      	mov	r3, r2
 8014202:	005b      	lsls	r3, r3, #1
 8014204:	4413      	add	r3, r2
 8014206:	00db      	lsls	r3, r3, #3
 8014208:	440b      	add	r3, r1
 801420a:	3308      	adds	r3, #8
 801420c:	6818      	ldr	r0, [r3, #0]
 801420e:	687a      	ldr	r2, [r7, #4]
 8014210:	4613      	mov	r3, r2
 8014212:	005b      	lsls	r3, r3, #1
 8014214:	4413      	add	r3, r2
 8014216:	00db      	lsls	r3, r3, #3
 8014218:	4a08      	ldr	r2, [pc, #32]	; (801423c <etharp_tmr+0x14c>)
 801421a:	4413      	add	r3, r2
 801421c:	3304      	adds	r3, #4
 801421e:	4619      	mov	r1, r3
 8014220:	f000 fe72 	bl	8014f08 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	3301      	adds	r3, #1
 8014228:	607b      	str	r3, [r7, #4]
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	2b09      	cmp	r3, #9
 801422e:	f77f af65 	ble.w	80140fc <etharp_tmr+0xc>
      }
    }
  }
}
 8014232:	bf00      	nop
 8014234:	3708      	adds	r7, #8
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}
 801423a:	bf00      	nop
 801423c:	200102a4 	.word	0x200102a4

08014240 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b08a      	sub	sp, #40	; 0x28
 8014244:	af00      	add	r7, sp, #0
 8014246:	60f8      	str	r0, [r7, #12]
 8014248:	460b      	mov	r3, r1
 801424a:	607a      	str	r2, [r7, #4]
 801424c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801424e:	230a      	movs	r3, #10
 8014250:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014252:	230a      	movs	r3, #10
 8014254:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014256:	230a      	movs	r3, #10
 8014258:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801425a:	2300      	movs	r3, #0
 801425c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801425e:	230a      	movs	r3, #10
 8014260:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014262:	2300      	movs	r3, #0
 8014264:	83bb      	strh	r3, [r7, #28]
 8014266:	2300      	movs	r3, #0
 8014268:	837b      	strh	r3, [r7, #26]
 801426a:	2300      	movs	r3, #0
 801426c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801426e:	2300      	movs	r3, #0
 8014270:	843b      	strh	r3, [r7, #32]
 8014272:	e0ae      	b.n	80143d2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014274:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014278:	49a6      	ldr	r1, [pc, #664]	; (8014514 <etharp_find_entry+0x2d4>)
 801427a:	4613      	mov	r3, r2
 801427c:	005b      	lsls	r3, r3, #1
 801427e:	4413      	add	r3, r2
 8014280:	00db      	lsls	r3, r3, #3
 8014282:	440b      	add	r3, r1
 8014284:	3314      	adds	r3, #20
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801428a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801428e:	2b0a      	cmp	r3, #10
 8014290:	d105      	bne.n	801429e <etharp_find_entry+0x5e>
 8014292:	7dfb      	ldrb	r3, [r7, #23]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d102      	bne.n	801429e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014298:	8c3b      	ldrh	r3, [r7, #32]
 801429a:	847b      	strh	r3, [r7, #34]	; 0x22
 801429c:	e095      	b.n	80143ca <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801429e:	7dfb      	ldrb	r3, [r7, #23]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	f000 8092 	beq.w	80143ca <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80142a6:	7dfb      	ldrb	r3, [r7, #23]
 80142a8:	2b01      	cmp	r3, #1
 80142aa:	d009      	beq.n	80142c0 <etharp_find_entry+0x80>
 80142ac:	7dfb      	ldrb	r3, [r7, #23]
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d806      	bhi.n	80142c0 <etharp_find_entry+0x80>
 80142b2:	4b99      	ldr	r3, [pc, #612]	; (8014518 <etharp_find_entry+0x2d8>)
 80142b4:	f44f 7292 	mov.w	r2, #292	; 0x124
 80142b8:	4998      	ldr	r1, [pc, #608]	; (801451c <etharp_find_entry+0x2dc>)
 80142ba:	4899      	ldr	r0, [pc, #612]	; (8014520 <etharp_find_entry+0x2e0>)
 80142bc:	f002 fb14 	bl	80168e8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	d020      	beq.n	8014308 <etharp_find_entry+0xc8>
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	6819      	ldr	r1, [r3, #0]
 80142ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142ce:	4891      	ldr	r0, [pc, #580]	; (8014514 <etharp_find_entry+0x2d4>)
 80142d0:	4613      	mov	r3, r2
 80142d2:	005b      	lsls	r3, r3, #1
 80142d4:	4413      	add	r3, r2
 80142d6:	00db      	lsls	r3, r3, #3
 80142d8:	4403      	add	r3, r0
 80142da:	3304      	adds	r3, #4
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	4299      	cmp	r1, r3
 80142e0:	d112      	bne.n	8014308 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d00c      	beq.n	8014302 <etharp_find_entry+0xc2>
 80142e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142ec:	4989      	ldr	r1, [pc, #548]	; (8014514 <etharp_find_entry+0x2d4>)
 80142ee:	4613      	mov	r3, r2
 80142f0:	005b      	lsls	r3, r3, #1
 80142f2:	4413      	add	r3, r2
 80142f4:	00db      	lsls	r3, r3, #3
 80142f6:	440b      	add	r3, r1
 80142f8:	3308      	adds	r3, #8
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	687a      	ldr	r2, [r7, #4]
 80142fe:	429a      	cmp	r2, r3
 8014300:	d102      	bne.n	8014308 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014302:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014306:	e100      	b.n	801450a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014308:	7dfb      	ldrb	r3, [r7, #23]
 801430a:	2b01      	cmp	r3, #1
 801430c:	d140      	bne.n	8014390 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801430e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014312:	4980      	ldr	r1, [pc, #512]	; (8014514 <etharp_find_entry+0x2d4>)
 8014314:	4613      	mov	r3, r2
 8014316:	005b      	lsls	r3, r3, #1
 8014318:	4413      	add	r3, r2
 801431a:	00db      	lsls	r3, r3, #3
 801431c:	440b      	add	r3, r1
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d01a      	beq.n	801435a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014324:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014328:	497a      	ldr	r1, [pc, #488]	; (8014514 <etharp_find_entry+0x2d4>)
 801432a:	4613      	mov	r3, r2
 801432c:	005b      	lsls	r3, r3, #1
 801432e:	4413      	add	r3, r2
 8014330:	00db      	lsls	r3, r3, #3
 8014332:	440b      	add	r3, r1
 8014334:	3312      	adds	r3, #18
 8014336:	881b      	ldrh	r3, [r3, #0]
 8014338:	8bba      	ldrh	r2, [r7, #28]
 801433a:	429a      	cmp	r2, r3
 801433c:	d845      	bhi.n	80143ca <etharp_find_entry+0x18a>
            old_queue = i;
 801433e:	8c3b      	ldrh	r3, [r7, #32]
 8014340:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014342:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014346:	4973      	ldr	r1, [pc, #460]	; (8014514 <etharp_find_entry+0x2d4>)
 8014348:	4613      	mov	r3, r2
 801434a:	005b      	lsls	r3, r3, #1
 801434c:	4413      	add	r3, r2
 801434e:	00db      	lsls	r3, r3, #3
 8014350:	440b      	add	r3, r1
 8014352:	3312      	adds	r3, #18
 8014354:	881b      	ldrh	r3, [r3, #0]
 8014356:	83bb      	strh	r3, [r7, #28]
 8014358:	e037      	b.n	80143ca <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801435a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801435e:	496d      	ldr	r1, [pc, #436]	; (8014514 <etharp_find_entry+0x2d4>)
 8014360:	4613      	mov	r3, r2
 8014362:	005b      	lsls	r3, r3, #1
 8014364:	4413      	add	r3, r2
 8014366:	00db      	lsls	r3, r3, #3
 8014368:	440b      	add	r3, r1
 801436a:	3312      	adds	r3, #18
 801436c:	881b      	ldrh	r3, [r3, #0]
 801436e:	8b7a      	ldrh	r2, [r7, #26]
 8014370:	429a      	cmp	r2, r3
 8014372:	d82a      	bhi.n	80143ca <etharp_find_entry+0x18a>
            old_pending = i;
 8014374:	8c3b      	ldrh	r3, [r7, #32]
 8014376:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014378:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801437c:	4965      	ldr	r1, [pc, #404]	; (8014514 <etharp_find_entry+0x2d4>)
 801437e:	4613      	mov	r3, r2
 8014380:	005b      	lsls	r3, r3, #1
 8014382:	4413      	add	r3, r2
 8014384:	00db      	lsls	r3, r3, #3
 8014386:	440b      	add	r3, r1
 8014388:	3312      	adds	r3, #18
 801438a:	881b      	ldrh	r3, [r3, #0]
 801438c:	837b      	strh	r3, [r7, #26]
 801438e:	e01c      	b.n	80143ca <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014390:	7dfb      	ldrb	r3, [r7, #23]
 8014392:	2b01      	cmp	r3, #1
 8014394:	d919      	bls.n	80143ca <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014396:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801439a:	495e      	ldr	r1, [pc, #376]	; (8014514 <etharp_find_entry+0x2d4>)
 801439c:	4613      	mov	r3, r2
 801439e:	005b      	lsls	r3, r3, #1
 80143a0:	4413      	add	r3, r2
 80143a2:	00db      	lsls	r3, r3, #3
 80143a4:	440b      	add	r3, r1
 80143a6:	3312      	adds	r3, #18
 80143a8:	881b      	ldrh	r3, [r3, #0]
 80143aa:	8b3a      	ldrh	r2, [r7, #24]
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d80c      	bhi.n	80143ca <etharp_find_entry+0x18a>
            old_stable = i;
 80143b0:	8c3b      	ldrh	r3, [r7, #32]
 80143b2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80143b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143b8:	4956      	ldr	r1, [pc, #344]	; (8014514 <etharp_find_entry+0x2d4>)
 80143ba:	4613      	mov	r3, r2
 80143bc:	005b      	lsls	r3, r3, #1
 80143be:	4413      	add	r3, r2
 80143c0:	00db      	lsls	r3, r3, #3
 80143c2:	440b      	add	r3, r1
 80143c4:	3312      	adds	r3, #18
 80143c6:	881b      	ldrh	r3, [r3, #0]
 80143c8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80143ca:	8c3b      	ldrh	r3, [r7, #32]
 80143cc:	3301      	adds	r3, #1
 80143ce:	b29b      	uxth	r3, r3
 80143d0:	843b      	strh	r3, [r7, #32]
 80143d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80143d6:	2b09      	cmp	r3, #9
 80143d8:	f77f af4c 	ble.w	8014274 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80143dc:	7afb      	ldrb	r3, [r7, #11]
 80143de:	f003 0302 	and.w	r3, r3, #2
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d108      	bne.n	80143f8 <etharp_find_entry+0x1b8>
 80143e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80143ea:	2b0a      	cmp	r3, #10
 80143ec:	d107      	bne.n	80143fe <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80143ee:	7afb      	ldrb	r3, [r7, #11]
 80143f0:	f003 0301 	and.w	r3, r3, #1
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d102      	bne.n	80143fe <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80143f8:	f04f 33ff 	mov.w	r3, #4294967295
 80143fc:	e085      	b.n	801450a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80143fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014402:	2b09      	cmp	r3, #9
 8014404:	dc02      	bgt.n	801440c <etharp_find_entry+0x1cc>
    i = empty;
 8014406:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014408:	843b      	strh	r3, [r7, #32]
 801440a:	e039      	b.n	8014480 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801440c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014410:	2b09      	cmp	r3, #9
 8014412:	dc14      	bgt.n	801443e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014414:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014416:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014418:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801441c:	493d      	ldr	r1, [pc, #244]	; (8014514 <etharp_find_entry+0x2d4>)
 801441e:	4613      	mov	r3, r2
 8014420:	005b      	lsls	r3, r3, #1
 8014422:	4413      	add	r3, r2
 8014424:	00db      	lsls	r3, r3, #3
 8014426:	440b      	add	r3, r1
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d018      	beq.n	8014460 <etharp_find_entry+0x220>
 801442e:	4b3a      	ldr	r3, [pc, #232]	; (8014518 <etharp_find_entry+0x2d8>)
 8014430:	f240 126d 	movw	r2, #365	; 0x16d
 8014434:	493b      	ldr	r1, [pc, #236]	; (8014524 <etharp_find_entry+0x2e4>)
 8014436:	483a      	ldr	r0, [pc, #232]	; (8014520 <etharp_find_entry+0x2e0>)
 8014438:	f002 fa56 	bl	80168e8 <iprintf>
 801443c:	e010      	b.n	8014460 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801443e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014442:	2b09      	cmp	r3, #9
 8014444:	dc02      	bgt.n	801444c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014446:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014448:	843b      	strh	r3, [r7, #32]
 801444a:	e009      	b.n	8014460 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801444c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014450:	2b09      	cmp	r3, #9
 8014452:	dc02      	bgt.n	801445a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014454:	8bfb      	ldrh	r3, [r7, #30]
 8014456:	843b      	strh	r3, [r7, #32]
 8014458:	e002      	b.n	8014460 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801445a:	f04f 33ff 	mov.w	r3, #4294967295
 801445e:	e054      	b.n	801450a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014460:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014464:	2b09      	cmp	r3, #9
 8014466:	dd06      	ble.n	8014476 <etharp_find_entry+0x236>
 8014468:	4b2b      	ldr	r3, [pc, #172]	; (8014518 <etharp_find_entry+0x2d8>)
 801446a:	f240 127f 	movw	r2, #383	; 0x17f
 801446e:	492e      	ldr	r1, [pc, #184]	; (8014528 <etharp_find_entry+0x2e8>)
 8014470:	482b      	ldr	r0, [pc, #172]	; (8014520 <etharp_find_entry+0x2e0>)
 8014472:	f002 fa39 	bl	80168e8 <iprintf>
    etharp_free_entry(i);
 8014476:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801447a:	4618      	mov	r0, r3
 801447c:	f7ff fe06 	bl	801408c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014480:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014484:	2b09      	cmp	r3, #9
 8014486:	dd06      	ble.n	8014496 <etharp_find_entry+0x256>
 8014488:	4b23      	ldr	r3, [pc, #140]	; (8014518 <etharp_find_entry+0x2d8>)
 801448a:	f240 1283 	movw	r2, #387	; 0x183
 801448e:	4926      	ldr	r1, [pc, #152]	; (8014528 <etharp_find_entry+0x2e8>)
 8014490:	4823      	ldr	r0, [pc, #140]	; (8014520 <etharp_find_entry+0x2e0>)
 8014492:	f002 fa29 	bl	80168e8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014496:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801449a:	491e      	ldr	r1, [pc, #120]	; (8014514 <etharp_find_entry+0x2d4>)
 801449c:	4613      	mov	r3, r2
 801449e:	005b      	lsls	r3, r3, #1
 80144a0:	4413      	add	r3, r2
 80144a2:	00db      	lsls	r3, r3, #3
 80144a4:	440b      	add	r3, r1
 80144a6:	3314      	adds	r3, #20
 80144a8:	781b      	ldrb	r3, [r3, #0]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d006      	beq.n	80144bc <etharp_find_entry+0x27c>
 80144ae:	4b1a      	ldr	r3, [pc, #104]	; (8014518 <etharp_find_entry+0x2d8>)
 80144b0:	f240 1285 	movw	r2, #389	; 0x185
 80144b4:	491d      	ldr	r1, [pc, #116]	; (801452c <etharp_find_entry+0x2ec>)
 80144b6:	481a      	ldr	r0, [pc, #104]	; (8014520 <etharp_find_entry+0x2e0>)
 80144b8:	f002 fa16 	bl	80168e8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d00b      	beq.n	80144da <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80144c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	6819      	ldr	r1, [r3, #0]
 80144ca:	4812      	ldr	r0, [pc, #72]	; (8014514 <etharp_find_entry+0x2d4>)
 80144cc:	4613      	mov	r3, r2
 80144ce:	005b      	lsls	r3, r3, #1
 80144d0:	4413      	add	r3, r2
 80144d2:	00db      	lsls	r3, r3, #3
 80144d4:	4403      	add	r3, r0
 80144d6:	3304      	adds	r3, #4
 80144d8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80144da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144de:	490d      	ldr	r1, [pc, #52]	; (8014514 <etharp_find_entry+0x2d4>)
 80144e0:	4613      	mov	r3, r2
 80144e2:	005b      	lsls	r3, r3, #1
 80144e4:	4413      	add	r3, r2
 80144e6:	00db      	lsls	r3, r3, #3
 80144e8:	440b      	add	r3, r1
 80144ea:	3312      	adds	r3, #18
 80144ec:	2200      	movs	r2, #0
 80144ee:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80144f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144f4:	4907      	ldr	r1, [pc, #28]	; (8014514 <etharp_find_entry+0x2d4>)
 80144f6:	4613      	mov	r3, r2
 80144f8:	005b      	lsls	r3, r3, #1
 80144fa:	4413      	add	r3, r2
 80144fc:	00db      	lsls	r3, r3, #3
 80144fe:	440b      	add	r3, r1
 8014500:	3308      	adds	r3, #8
 8014502:	687a      	ldr	r2, [r7, #4]
 8014504:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014506:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801450a:	4618      	mov	r0, r3
 801450c:	3728      	adds	r7, #40	; 0x28
 801450e:	46bd      	mov	sp, r7
 8014510:	bd80      	pop	{r7, pc}
 8014512:	bf00      	nop
 8014514:	200102a4 	.word	0x200102a4
 8014518:	0801a5e4 	.word	0x0801a5e4
 801451c:	0801a61c 	.word	0x0801a61c
 8014520:	0801a65c 	.word	0x0801a65c
 8014524:	0801a684 	.word	0x0801a684
 8014528:	0801a69c 	.word	0x0801a69c
 801452c:	0801a6b0 	.word	0x0801a6b0

08014530 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b088      	sub	sp, #32
 8014534:	af02      	add	r7, sp, #8
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	607a      	str	r2, [r7, #4]
 801453c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014544:	2b06      	cmp	r3, #6
 8014546:	d006      	beq.n	8014556 <etharp_update_arp_entry+0x26>
 8014548:	4b48      	ldr	r3, [pc, #288]	; (801466c <etharp_update_arp_entry+0x13c>)
 801454a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801454e:	4948      	ldr	r1, [pc, #288]	; (8014670 <etharp_update_arp_entry+0x140>)
 8014550:	4848      	ldr	r0, [pc, #288]	; (8014674 <etharp_update_arp_entry+0x144>)
 8014552:	f002 f9c9 	bl	80168e8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014556:	68bb      	ldr	r3, [r7, #8]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d012      	beq.n	8014582 <etharp_update_arp_entry+0x52>
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d00e      	beq.n	8014582 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	68f9      	ldr	r1, [r7, #12]
 801456a:	4618      	mov	r0, r3
 801456c:	f001 f91e 	bl	80157ac <ip4_addr_isbroadcast_u32>
 8014570:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014572:	2b00      	cmp	r3, #0
 8014574:	d105      	bne.n	8014582 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014576:	68bb      	ldr	r3, [r7, #8]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801457e:	2be0      	cmp	r3, #224	; 0xe0
 8014580:	d102      	bne.n	8014588 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014582:	f06f 030f 	mvn.w	r3, #15
 8014586:	e06c      	b.n	8014662 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014588:	78fb      	ldrb	r3, [r7, #3]
 801458a:	68fa      	ldr	r2, [r7, #12]
 801458c:	4619      	mov	r1, r3
 801458e:	68b8      	ldr	r0, [r7, #8]
 8014590:	f7ff fe56 	bl	8014240 <etharp_find_entry>
 8014594:	4603      	mov	r3, r0
 8014596:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014598:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801459c:	2b00      	cmp	r3, #0
 801459e:	da02      	bge.n	80145a6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80145a0:	8afb      	ldrh	r3, [r7, #22]
 80145a2:	b25b      	sxtb	r3, r3
 80145a4:	e05d      	b.n	8014662 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80145a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145aa:	4933      	ldr	r1, [pc, #204]	; (8014678 <etharp_update_arp_entry+0x148>)
 80145ac:	4613      	mov	r3, r2
 80145ae:	005b      	lsls	r3, r3, #1
 80145b0:	4413      	add	r3, r2
 80145b2:	00db      	lsls	r3, r3, #3
 80145b4:	440b      	add	r3, r1
 80145b6:	3314      	adds	r3, #20
 80145b8:	2202      	movs	r2, #2
 80145ba:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80145bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145c0:	492d      	ldr	r1, [pc, #180]	; (8014678 <etharp_update_arp_entry+0x148>)
 80145c2:	4613      	mov	r3, r2
 80145c4:	005b      	lsls	r3, r3, #1
 80145c6:	4413      	add	r3, r2
 80145c8:	00db      	lsls	r3, r3, #3
 80145ca:	440b      	add	r3, r1
 80145cc:	3308      	adds	r3, #8
 80145ce:	68fa      	ldr	r2, [r7, #12]
 80145d0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80145d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145d6:	4613      	mov	r3, r2
 80145d8:	005b      	lsls	r3, r3, #1
 80145da:	4413      	add	r3, r2
 80145dc:	00db      	lsls	r3, r3, #3
 80145de:	3308      	adds	r3, #8
 80145e0:	4a25      	ldr	r2, [pc, #148]	; (8014678 <etharp_update_arp_entry+0x148>)
 80145e2:	4413      	add	r3, r2
 80145e4:	3304      	adds	r3, #4
 80145e6:	2206      	movs	r2, #6
 80145e8:	6879      	ldr	r1, [r7, #4]
 80145ea:	4618      	mov	r0, r3
 80145ec:	f002 f94f 	bl	801688e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80145f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80145f4:	4920      	ldr	r1, [pc, #128]	; (8014678 <etharp_update_arp_entry+0x148>)
 80145f6:	4613      	mov	r3, r2
 80145f8:	005b      	lsls	r3, r3, #1
 80145fa:	4413      	add	r3, r2
 80145fc:	00db      	lsls	r3, r3, #3
 80145fe:	440b      	add	r3, r1
 8014600:	3312      	adds	r3, #18
 8014602:	2200      	movs	r2, #0
 8014604:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014606:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801460a:	491b      	ldr	r1, [pc, #108]	; (8014678 <etharp_update_arp_entry+0x148>)
 801460c:	4613      	mov	r3, r2
 801460e:	005b      	lsls	r3, r3, #1
 8014610:	4413      	add	r3, r2
 8014612:	00db      	lsls	r3, r3, #3
 8014614:	440b      	add	r3, r1
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d021      	beq.n	8014660 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801461c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014620:	4915      	ldr	r1, [pc, #84]	; (8014678 <etharp_update_arp_entry+0x148>)
 8014622:	4613      	mov	r3, r2
 8014624:	005b      	lsls	r3, r3, #1
 8014626:	4413      	add	r3, r2
 8014628:	00db      	lsls	r3, r3, #3
 801462a:	440b      	add	r3, r1
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014630:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014634:	4910      	ldr	r1, [pc, #64]	; (8014678 <etharp_update_arp_entry+0x148>)
 8014636:	4613      	mov	r3, r2
 8014638:	005b      	lsls	r3, r3, #1
 801463a:	4413      	add	r3, r2
 801463c:	00db      	lsls	r3, r3, #3
 801463e:	440b      	add	r3, r1
 8014640:	2200      	movs	r2, #0
 8014642:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801464a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801464e:	9300      	str	r3, [sp, #0]
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	6939      	ldr	r1, [r7, #16]
 8014654:	68f8      	ldr	r0, [r7, #12]
 8014656:	f001 ffad 	bl	80165b4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801465a:	6938      	ldr	r0, [r7, #16]
 801465c:	f7f6 fd30 	bl	800b0c0 <pbuf_free>
  }
  return ERR_OK;
 8014660:	2300      	movs	r3, #0
}
 8014662:	4618      	mov	r0, r3
 8014664:	3718      	adds	r7, #24
 8014666:	46bd      	mov	sp, r7
 8014668:	bd80      	pop	{r7, pc}
 801466a:	bf00      	nop
 801466c:	0801a5e4 	.word	0x0801a5e4
 8014670:	0801a6dc 	.word	0x0801a6dc
 8014674:	0801a65c 	.word	0x0801a65c
 8014678:	200102a4 	.word	0x200102a4

0801467c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801467c:	b580      	push	{r7, lr}
 801467e:	b084      	sub	sp, #16
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014684:	2300      	movs	r3, #0
 8014686:	60fb      	str	r3, [r7, #12]
 8014688:	e01e      	b.n	80146c8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801468a:	4913      	ldr	r1, [pc, #76]	; (80146d8 <etharp_cleanup_netif+0x5c>)
 801468c:	68fa      	ldr	r2, [r7, #12]
 801468e:	4613      	mov	r3, r2
 8014690:	005b      	lsls	r3, r3, #1
 8014692:	4413      	add	r3, r2
 8014694:	00db      	lsls	r3, r3, #3
 8014696:	440b      	add	r3, r1
 8014698:	3314      	adds	r3, #20
 801469a:	781b      	ldrb	r3, [r3, #0]
 801469c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801469e:	7afb      	ldrb	r3, [r7, #11]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d00e      	beq.n	80146c2 <etharp_cleanup_netif+0x46>
 80146a4:	490c      	ldr	r1, [pc, #48]	; (80146d8 <etharp_cleanup_netif+0x5c>)
 80146a6:	68fa      	ldr	r2, [r7, #12]
 80146a8:	4613      	mov	r3, r2
 80146aa:	005b      	lsls	r3, r3, #1
 80146ac:	4413      	add	r3, r2
 80146ae:	00db      	lsls	r3, r3, #3
 80146b0:	440b      	add	r3, r1
 80146b2:	3308      	adds	r3, #8
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	687a      	ldr	r2, [r7, #4]
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d102      	bne.n	80146c2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80146bc:	68f8      	ldr	r0, [r7, #12]
 80146be:	f7ff fce5 	bl	801408c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	3301      	adds	r3, #1
 80146c6:	60fb      	str	r3, [r7, #12]
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	2b09      	cmp	r3, #9
 80146cc:	dddd      	ble.n	801468a <etharp_cleanup_netif+0xe>
    }
  }
}
 80146ce:	bf00      	nop
 80146d0:	3710      	adds	r7, #16
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bd80      	pop	{r7, pc}
 80146d6:	bf00      	nop
 80146d8:	200102a4 	.word	0x200102a4

080146dc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80146dc:	b5b0      	push	{r4, r5, r7, lr}
 80146de:	b08a      	sub	sp, #40	; 0x28
 80146e0:	af04      	add	r7, sp, #16
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80146e6:	683b      	ldr	r3, [r7, #0]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d107      	bne.n	80146fc <etharp_input+0x20>
 80146ec:	4b3f      	ldr	r3, [pc, #252]	; (80147ec <etharp_input+0x110>)
 80146ee:	f240 228a 	movw	r2, #650	; 0x28a
 80146f2:	493f      	ldr	r1, [pc, #252]	; (80147f0 <etharp_input+0x114>)
 80146f4:	483f      	ldr	r0, [pc, #252]	; (80147f4 <etharp_input+0x118>)
 80146f6:	f002 f8f7 	bl	80168e8 <iprintf>
 80146fa:	e074      	b.n	80147e6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	685b      	ldr	r3, [r3, #4]
 8014700:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014702:	693b      	ldr	r3, [r7, #16]
 8014704:	881b      	ldrh	r3, [r3, #0]
 8014706:	b29b      	uxth	r3, r3
 8014708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801470c:	d10c      	bne.n	8014728 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801470e:	693b      	ldr	r3, [r7, #16]
 8014710:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014712:	2b06      	cmp	r3, #6
 8014714:	d108      	bne.n	8014728 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801471a:	2b04      	cmp	r3, #4
 801471c:	d104      	bne.n	8014728 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801471e:	693b      	ldr	r3, [r7, #16]
 8014720:	885b      	ldrh	r3, [r3, #2]
 8014722:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014724:	2b08      	cmp	r3, #8
 8014726:	d003      	beq.n	8014730 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7f6 fcc9 	bl	800b0c0 <pbuf_free>
    return;
 801472e:	e05a      	b.n	80147e6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014730:	693b      	ldr	r3, [r7, #16]
 8014732:	330e      	adds	r3, #14
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014738:	693b      	ldr	r3, [r7, #16]
 801473a:	3318      	adds	r3, #24
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	3304      	adds	r3, #4
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d102      	bne.n	8014750 <etharp_input+0x74>
    for_us = 0;
 801474a:	2300      	movs	r3, #0
 801474c:	75fb      	strb	r3, [r7, #23]
 801474e:	e009      	b.n	8014764 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014750:	68ba      	ldr	r2, [r7, #8]
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	3304      	adds	r3, #4
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	429a      	cmp	r2, r3
 801475a:	bf0c      	ite	eq
 801475c:	2301      	moveq	r3, #1
 801475e:	2300      	movne	r3, #0
 8014760:	b2db      	uxtb	r3, r3
 8014762:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014764:	693b      	ldr	r3, [r7, #16]
 8014766:	f103 0208 	add.w	r2, r3, #8
 801476a:	7dfb      	ldrb	r3, [r7, #23]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d001      	beq.n	8014774 <etharp_input+0x98>
 8014770:	2301      	movs	r3, #1
 8014772:	e000      	b.n	8014776 <etharp_input+0x9a>
 8014774:	2302      	movs	r3, #2
 8014776:	f107 010c 	add.w	r1, r7, #12
 801477a:	6838      	ldr	r0, [r7, #0]
 801477c:	f7ff fed8 	bl	8014530 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014780:	693b      	ldr	r3, [r7, #16]
 8014782:	88db      	ldrh	r3, [r3, #6]
 8014784:	b29b      	uxth	r3, r3
 8014786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801478a:	d003      	beq.n	8014794 <etharp_input+0xb8>
 801478c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014790:	d01e      	beq.n	80147d0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014792:	e025      	b.n	80147e0 <etharp_input+0x104>
      if (for_us) {
 8014794:	7dfb      	ldrb	r3, [r7, #23]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d021      	beq.n	80147de <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80147a0:	693b      	ldr	r3, [r7, #16]
 80147a2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80147a6:	683b      	ldr	r3, [r7, #0]
 80147a8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80147b0:	693a      	ldr	r2, [r7, #16]
 80147b2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80147b4:	2102      	movs	r1, #2
 80147b6:	9103      	str	r1, [sp, #12]
 80147b8:	f107 010c 	add.w	r1, r7, #12
 80147bc:	9102      	str	r1, [sp, #8]
 80147be:	9201      	str	r2, [sp, #4]
 80147c0:	9300      	str	r3, [sp, #0]
 80147c2:	462b      	mov	r3, r5
 80147c4:	4622      	mov	r2, r4
 80147c6:	4601      	mov	r1, r0
 80147c8:	6838      	ldr	r0, [r7, #0]
 80147ca:	f000 faef 	bl	8014dac <etharp_raw>
      break;
 80147ce:	e006      	b.n	80147de <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80147d0:	f107 030c 	add.w	r3, r7, #12
 80147d4:	4619      	mov	r1, r3
 80147d6:	6838      	ldr	r0, [r7, #0]
 80147d8:	f7fe f9f2 	bl	8012bc0 <dhcp_arp_reply>
      break;
 80147dc:	e000      	b.n	80147e0 <etharp_input+0x104>
      break;
 80147de:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f7f6 fc6d 	bl	800b0c0 <pbuf_free>
}
 80147e6:	3718      	adds	r7, #24
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bdb0      	pop	{r4, r5, r7, pc}
 80147ec:	0801a5e4 	.word	0x0801a5e4
 80147f0:	0801a734 	.word	0x0801a734
 80147f4:	0801a65c 	.word	0x0801a65c

080147f8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b086      	sub	sp, #24
 80147fc:	af02      	add	r7, sp, #8
 80147fe:	60f8      	str	r0, [r7, #12]
 8014800:	60b9      	str	r1, [r7, #8]
 8014802:	4613      	mov	r3, r2
 8014804:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014806:	79fa      	ldrb	r2, [r7, #7]
 8014808:	4944      	ldr	r1, [pc, #272]	; (801491c <etharp_output_to_arp_index+0x124>)
 801480a:	4613      	mov	r3, r2
 801480c:	005b      	lsls	r3, r3, #1
 801480e:	4413      	add	r3, r2
 8014810:	00db      	lsls	r3, r3, #3
 8014812:	440b      	add	r3, r1
 8014814:	3314      	adds	r3, #20
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	2b01      	cmp	r3, #1
 801481a:	d806      	bhi.n	801482a <etharp_output_to_arp_index+0x32>
 801481c:	4b40      	ldr	r3, [pc, #256]	; (8014920 <etharp_output_to_arp_index+0x128>)
 801481e:	f240 22ef 	movw	r2, #751	; 0x2ef
 8014822:	4940      	ldr	r1, [pc, #256]	; (8014924 <etharp_output_to_arp_index+0x12c>)
 8014824:	4840      	ldr	r0, [pc, #256]	; (8014928 <etharp_output_to_arp_index+0x130>)
 8014826:	f002 f85f 	bl	80168e8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801482a:	79fa      	ldrb	r2, [r7, #7]
 801482c:	493b      	ldr	r1, [pc, #236]	; (801491c <etharp_output_to_arp_index+0x124>)
 801482e:	4613      	mov	r3, r2
 8014830:	005b      	lsls	r3, r3, #1
 8014832:	4413      	add	r3, r2
 8014834:	00db      	lsls	r3, r3, #3
 8014836:	440b      	add	r3, r1
 8014838:	3314      	adds	r3, #20
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	2b02      	cmp	r3, #2
 801483e:	d153      	bne.n	80148e8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014840:	79fa      	ldrb	r2, [r7, #7]
 8014842:	4936      	ldr	r1, [pc, #216]	; (801491c <etharp_output_to_arp_index+0x124>)
 8014844:	4613      	mov	r3, r2
 8014846:	005b      	lsls	r3, r3, #1
 8014848:	4413      	add	r3, r2
 801484a:	00db      	lsls	r3, r3, #3
 801484c:	440b      	add	r3, r1
 801484e:	3312      	adds	r3, #18
 8014850:	881b      	ldrh	r3, [r3, #0]
 8014852:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014856:	d919      	bls.n	801488c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014858:	79fa      	ldrb	r2, [r7, #7]
 801485a:	4613      	mov	r3, r2
 801485c:	005b      	lsls	r3, r3, #1
 801485e:	4413      	add	r3, r2
 8014860:	00db      	lsls	r3, r3, #3
 8014862:	4a2e      	ldr	r2, [pc, #184]	; (801491c <etharp_output_to_arp_index+0x124>)
 8014864:	4413      	add	r3, r2
 8014866:	3304      	adds	r3, #4
 8014868:	4619      	mov	r1, r3
 801486a:	68f8      	ldr	r0, [r7, #12]
 801486c:	f000 fb4c 	bl	8014f08 <etharp_request>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	d138      	bne.n	80148e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014876:	79fa      	ldrb	r2, [r7, #7]
 8014878:	4928      	ldr	r1, [pc, #160]	; (801491c <etharp_output_to_arp_index+0x124>)
 801487a:	4613      	mov	r3, r2
 801487c:	005b      	lsls	r3, r3, #1
 801487e:	4413      	add	r3, r2
 8014880:	00db      	lsls	r3, r3, #3
 8014882:	440b      	add	r3, r1
 8014884:	3314      	adds	r3, #20
 8014886:	2203      	movs	r2, #3
 8014888:	701a      	strb	r2, [r3, #0]
 801488a:	e02d      	b.n	80148e8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801488c:	79fa      	ldrb	r2, [r7, #7]
 801488e:	4923      	ldr	r1, [pc, #140]	; (801491c <etharp_output_to_arp_index+0x124>)
 8014890:	4613      	mov	r3, r2
 8014892:	005b      	lsls	r3, r3, #1
 8014894:	4413      	add	r3, r2
 8014896:	00db      	lsls	r3, r3, #3
 8014898:	440b      	add	r3, r1
 801489a:	3312      	adds	r3, #18
 801489c:	881b      	ldrh	r3, [r3, #0]
 801489e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80148a2:	d321      	bcc.n	80148e8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80148a4:	79fa      	ldrb	r2, [r7, #7]
 80148a6:	4613      	mov	r3, r2
 80148a8:	005b      	lsls	r3, r3, #1
 80148aa:	4413      	add	r3, r2
 80148ac:	00db      	lsls	r3, r3, #3
 80148ae:	4a1b      	ldr	r2, [pc, #108]	; (801491c <etharp_output_to_arp_index+0x124>)
 80148b0:	4413      	add	r3, r2
 80148b2:	1d19      	adds	r1, r3, #4
 80148b4:	79fa      	ldrb	r2, [r7, #7]
 80148b6:	4613      	mov	r3, r2
 80148b8:	005b      	lsls	r3, r3, #1
 80148ba:	4413      	add	r3, r2
 80148bc:	00db      	lsls	r3, r3, #3
 80148be:	3308      	adds	r3, #8
 80148c0:	4a16      	ldr	r2, [pc, #88]	; (801491c <etharp_output_to_arp_index+0x124>)
 80148c2:	4413      	add	r3, r2
 80148c4:	3304      	adds	r3, #4
 80148c6:	461a      	mov	r2, r3
 80148c8:	68f8      	ldr	r0, [r7, #12]
 80148ca:	f000 fafb 	bl	8014ec4 <etharp_request_dst>
 80148ce:	4603      	mov	r3, r0
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d109      	bne.n	80148e8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80148d4:	79fa      	ldrb	r2, [r7, #7]
 80148d6:	4911      	ldr	r1, [pc, #68]	; (801491c <etharp_output_to_arp_index+0x124>)
 80148d8:	4613      	mov	r3, r2
 80148da:	005b      	lsls	r3, r3, #1
 80148dc:	4413      	add	r3, r2
 80148de:	00db      	lsls	r3, r3, #3
 80148e0:	440b      	add	r3, r1
 80148e2:	3314      	adds	r3, #20
 80148e4:	2203      	movs	r2, #3
 80148e6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80148ee:	79fa      	ldrb	r2, [r7, #7]
 80148f0:	4613      	mov	r3, r2
 80148f2:	005b      	lsls	r3, r3, #1
 80148f4:	4413      	add	r3, r2
 80148f6:	00db      	lsls	r3, r3, #3
 80148f8:	3308      	adds	r3, #8
 80148fa:	4a08      	ldr	r2, [pc, #32]	; (801491c <etharp_output_to_arp_index+0x124>)
 80148fc:	4413      	add	r3, r2
 80148fe:	1d1a      	adds	r2, r3, #4
 8014900:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014904:	9300      	str	r3, [sp, #0]
 8014906:	4613      	mov	r3, r2
 8014908:	460a      	mov	r2, r1
 801490a:	68b9      	ldr	r1, [r7, #8]
 801490c:	68f8      	ldr	r0, [r7, #12]
 801490e:	f001 fe51 	bl	80165b4 <ethernet_output>
 8014912:	4603      	mov	r3, r0
}
 8014914:	4618      	mov	r0, r3
 8014916:	3710      	adds	r7, #16
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}
 801491c:	200102a4 	.word	0x200102a4
 8014920:	0801a5e4 	.word	0x0801a5e4
 8014924:	0801a754 	.word	0x0801a754
 8014928:	0801a65c 	.word	0x0801a65c

0801492c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b08a      	sub	sp, #40	; 0x28
 8014930:	af02      	add	r7, sp, #8
 8014932:	60f8      	str	r0, [r7, #12]
 8014934:	60b9      	str	r1, [r7, #8]
 8014936:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d106      	bne.n	8014950 <etharp_output+0x24>
 8014942:	4b73      	ldr	r3, [pc, #460]	; (8014b10 <etharp_output+0x1e4>)
 8014944:	f240 321e 	movw	r2, #798	; 0x31e
 8014948:	4972      	ldr	r1, [pc, #456]	; (8014b14 <etharp_output+0x1e8>)
 801494a:	4873      	ldr	r0, [pc, #460]	; (8014b18 <etharp_output+0x1ec>)
 801494c:	f001 ffcc 	bl	80168e8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	2b00      	cmp	r3, #0
 8014954:	d106      	bne.n	8014964 <etharp_output+0x38>
 8014956:	4b6e      	ldr	r3, [pc, #440]	; (8014b10 <etharp_output+0x1e4>)
 8014958:	f240 321f 	movw	r2, #799	; 0x31f
 801495c:	496f      	ldr	r1, [pc, #444]	; (8014b1c <etharp_output+0x1f0>)
 801495e:	486e      	ldr	r0, [pc, #440]	; (8014b18 <etharp_output+0x1ec>)
 8014960:	f001 ffc2 	bl	80168e8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d106      	bne.n	8014978 <etharp_output+0x4c>
 801496a:	4b69      	ldr	r3, [pc, #420]	; (8014b10 <etharp_output+0x1e4>)
 801496c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014970:	496b      	ldr	r1, [pc, #428]	; (8014b20 <etharp_output+0x1f4>)
 8014972:	4869      	ldr	r0, [pc, #420]	; (8014b18 <etharp_output+0x1ec>)
 8014974:	f001 ffb8 	bl	80168e8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	68f9      	ldr	r1, [r7, #12]
 801497e:	4618      	mov	r0, r3
 8014980:	f000 ff14 	bl	80157ac <ip4_addr_isbroadcast_u32>
 8014984:	4603      	mov	r3, r0
 8014986:	2b00      	cmp	r3, #0
 8014988:	d002      	beq.n	8014990 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801498a:	4b66      	ldr	r3, [pc, #408]	; (8014b24 <etharp_output+0x1f8>)
 801498c:	61fb      	str	r3, [r7, #28]
 801498e:	e0af      	b.n	8014af0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014998:	2be0      	cmp	r3, #224	; 0xe0
 801499a:	d118      	bne.n	80149ce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801499c:	2301      	movs	r3, #1
 801499e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80149a0:	2300      	movs	r3, #0
 80149a2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80149a4:	235e      	movs	r3, #94	; 0x5e
 80149a6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	3301      	adds	r3, #1
 80149ac:	781b      	ldrb	r3, [r3, #0]
 80149ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80149b2:	b2db      	uxtb	r3, r3
 80149b4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	3302      	adds	r3, #2
 80149ba:	781b      	ldrb	r3, [r3, #0]
 80149bc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	3303      	adds	r3, #3
 80149c2:	781b      	ldrb	r3, [r3, #0]
 80149c4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80149c6:	f107 0310 	add.w	r3, r7, #16
 80149ca:	61fb      	str	r3, [r7, #28]
 80149cc:	e090      	b.n	8014af0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	681a      	ldr	r2, [r3, #0]
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	3304      	adds	r3, #4
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	405a      	eors	r2, r3
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	3308      	adds	r3, #8
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	4013      	ands	r3, r2
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d012      	beq.n	8014a0c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80149ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80149f0:	4293      	cmp	r3, r2
 80149f2:	d00b      	beq.n	8014a0c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	330c      	adds	r3, #12
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d003      	beq.n	8014a06 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	330c      	adds	r3, #12
 8014a02:	61bb      	str	r3, [r7, #24]
 8014a04:	e002      	b.n	8014a0c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014a06:	f06f 0303 	mvn.w	r3, #3
 8014a0a:	e07d      	b.n	8014b08 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014a0c:	4b46      	ldr	r3, [pc, #280]	; (8014b28 <etharp_output+0x1fc>)
 8014a0e:	781b      	ldrb	r3, [r3, #0]
 8014a10:	4619      	mov	r1, r3
 8014a12:	4a46      	ldr	r2, [pc, #280]	; (8014b2c <etharp_output+0x200>)
 8014a14:	460b      	mov	r3, r1
 8014a16:	005b      	lsls	r3, r3, #1
 8014a18:	440b      	add	r3, r1
 8014a1a:	00db      	lsls	r3, r3, #3
 8014a1c:	4413      	add	r3, r2
 8014a1e:	3314      	adds	r3, #20
 8014a20:	781b      	ldrb	r3, [r3, #0]
 8014a22:	2b01      	cmp	r3, #1
 8014a24:	d925      	bls.n	8014a72 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014a26:	4b40      	ldr	r3, [pc, #256]	; (8014b28 <etharp_output+0x1fc>)
 8014a28:	781b      	ldrb	r3, [r3, #0]
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	4a3f      	ldr	r2, [pc, #252]	; (8014b2c <etharp_output+0x200>)
 8014a2e:	460b      	mov	r3, r1
 8014a30:	005b      	lsls	r3, r3, #1
 8014a32:	440b      	add	r3, r1
 8014a34:	00db      	lsls	r3, r3, #3
 8014a36:	4413      	add	r3, r2
 8014a38:	3308      	adds	r3, #8
 8014a3a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014a3c:	68fa      	ldr	r2, [r7, #12]
 8014a3e:	429a      	cmp	r2, r3
 8014a40:	d117      	bne.n	8014a72 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014a42:	69bb      	ldr	r3, [r7, #24]
 8014a44:	681a      	ldr	r2, [r3, #0]
 8014a46:	4b38      	ldr	r3, [pc, #224]	; (8014b28 <etharp_output+0x1fc>)
 8014a48:	781b      	ldrb	r3, [r3, #0]
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	4937      	ldr	r1, [pc, #220]	; (8014b2c <etharp_output+0x200>)
 8014a4e:	4603      	mov	r3, r0
 8014a50:	005b      	lsls	r3, r3, #1
 8014a52:	4403      	add	r3, r0
 8014a54:	00db      	lsls	r3, r3, #3
 8014a56:	440b      	add	r3, r1
 8014a58:	3304      	adds	r3, #4
 8014a5a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	d108      	bne.n	8014a72 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014a60:	4b31      	ldr	r3, [pc, #196]	; (8014b28 <etharp_output+0x1fc>)
 8014a62:	781b      	ldrb	r3, [r3, #0]
 8014a64:	461a      	mov	r2, r3
 8014a66:	68b9      	ldr	r1, [r7, #8]
 8014a68:	68f8      	ldr	r0, [r7, #12]
 8014a6a:	f7ff fec5 	bl	80147f8 <etharp_output_to_arp_index>
 8014a6e:	4603      	mov	r3, r0
 8014a70:	e04a      	b.n	8014b08 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014a72:	2300      	movs	r3, #0
 8014a74:	75fb      	strb	r3, [r7, #23]
 8014a76:	e031      	b.n	8014adc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014a78:	7dfa      	ldrb	r2, [r7, #23]
 8014a7a:	492c      	ldr	r1, [pc, #176]	; (8014b2c <etharp_output+0x200>)
 8014a7c:	4613      	mov	r3, r2
 8014a7e:	005b      	lsls	r3, r3, #1
 8014a80:	4413      	add	r3, r2
 8014a82:	00db      	lsls	r3, r3, #3
 8014a84:	440b      	add	r3, r1
 8014a86:	3314      	adds	r3, #20
 8014a88:	781b      	ldrb	r3, [r3, #0]
 8014a8a:	2b01      	cmp	r3, #1
 8014a8c:	d923      	bls.n	8014ad6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014a8e:	7dfa      	ldrb	r2, [r7, #23]
 8014a90:	4926      	ldr	r1, [pc, #152]	; (8014b2c <etharp_output+0x200>)
 8014a92:	4613      	mov	r3, r2
 8014a94:	005b      	lsls	r3, r3, #1
 8014a96:	4413      	add	r3, r2
 8014a98:	00db      	lsls	r3, r3, #3
 8014a9a:	440b      	add	r3, r1
 8014a9c:	3308      	adds	r3, #8
 8014a9e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014aa0:	68fa      	ldr	r2, [r7, #12]
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d117      	bne.n	8014ad6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014aa6:	69bb      	ldr	r3, [r7, #24]
 8014aa8:	6819      	ldr	r1, [r3, #0]
 8014aaa:	7dfa      	ldrb	r2, [r7, #23]
 8014aac:	481f      	ldr	r0, [pc, #124]	; (8014b2c <etharp_output+0x200>)
 8014aae:	4613      	mov	r3, r2
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	4413      	add	r3, r2
 8014ab4:	00db      	lsls	r3, r3, #3
 8014ab6:	4403      	add	r3, r0
 8014ab8:	3304      	adds	r3, #4
 8014aba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014abc:	4299      	cmp	r1, r3
 8014abe:	d10a      	bne.n	8014ad6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014ac0:	4a19      	ldr	r2, [pc, #100]	; (8014b28 <etharp_output+0x1fc>)
 8014ac2:	7dfb      	ldrb	r3, [r7, #23]
 8014ac4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014ac6:	7dfb      	ldrb	r3, [r7, #23]
 8014ac8:	461a      	mov	r2, r3
 8014aca:	68b9      	ldr	r1, [r7, #8]
 8014acc:	68f8      	ldr	r0, [r7, #12]
 8014ace:	f7ff fe93 	bl	80147f8 <etharp_output_to_arp_index>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	e018      	b.n	8014b08 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014ad6:	7dfb      	ldrb	r3, [r7, #23]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	75fb      	strb	r3, [r7, #23]
 8014adc:	7dfb      	ldrb	r3, [r7, #23]
 8014ade:	2b09      	cmp	r3, #9
 8014ae0:	d9ca      	bls.n	8014a78 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014ae2:	68ba      	ldr	r2, [r7, #8]
 8014ae4:	69b9      	ldr	r1, [r7, #24]
 8014ae6:	68f8      	ldr	r0, [r7, #12]
 8014ae8:	f000 f822 	bl	8014b30 <etharp_query>
 8014aec:	4603      	mov	r3, r0
 8014aee:	e00b      	b.n	8014b08 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014af6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014afa:	9300      	str	r3, [sp, #0]
 8014afc:	69fb      	ldr	r3, [r7, #28]
 8014afe:	68b9      	ldr	r1, [r7, #8]
 8014b00:	68f8      	ldr	r0, [r7, #12]
 8014b02:	f001 fd57 	bl	80165b4 <ethernet_output>
 8014b06:	4603      	mov	r3, r0
}
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3720      	adds	r7, #32
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}
 8014b10:	0801a5e4 	.word	0x0801a5e4
 8014b14:	0801a734 	.word	0x0801a734
 8014b18:	0801a65c 	.word	0x0801a65c
 8014b1c:	0801a784 	.word	0x0801a784
 8014b20:	0801a724 	.word	0x0801a724
 8014b24:	0803ad90 	.word	0x0803ad90
 8014b28:	20010394 	.word	0x20010394
 8014b2c:	200102a4 	.word	0x200102a4

08014b30 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b08c      	sub	sp, #48	; 0x30
 8014b34:	af02      	add	r7, sp, #8
 8014b36:	60f8      	str	r0, [r7, #12]
 8014b38:	60b9      	str	r1, [r7, #8]
 8014b3a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	332a      	adds	r3, #42	; 0x2a
 8014b40:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014b42:	23ff      	movs	r3, #255	; 0xff
 8014b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014b48:	2300      	movs	r3, #0
 8014b4a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	68f9      	ldr	r1, [r7, #12]
 8014b52:	4618      	mov	r0, r3
 8014b54:	f000 fe2a 	bl	80157ac <ip4_addr_isbroadcast_u32>
 8014b58:	4603      	mov	r3, r0
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d10c      	bne.n	8014b78 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014b5e:	68bb      	ldr	r3, [r7, #8]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b66:	2be0      	cmp	r3, #224	; 0xe0
 8014b68:	d006      	beq.n	8014b78 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d003      	beq.n	8014b78 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014b70:	68bb      	ldr	r3, [r7, #8]
 8014b72:	681b      	ldr	r3, [r3, #0]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d102      	bne.n	8014b7e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014b78:	f06f 030f 	mvn.w	r3, #15
 8014b7c:	e102      	b.n	8014d84 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014b7e:	68fa      	ldr	r2, [r7, #12]
 8014b80:	2101      	movs	r1, #1
 8014b82:	68b8      	ldr	r0, [r7, #8]
 8014b84:	f7ff fb5c 	bl	8014240 <etharp_find_entry>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014b8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	da02      	bge.n	8014b9a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014b94:	8a7b      	ldrh	r3, [r7, #18]
 8014b96:	b25b      	sxtb	r3, r3
 8014b98:	e0f4      	b.n	8014d84 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014b9a:	8a7b      	ldrh	r3, [r7, #18]
 8014b9c:	2b7e      	cmp	r3, #126	; 0x7e
 8014b9e:	d906      	bls.n	8014bae <etharp_query+0x7e>
 8014ba0:	4b7a      	ldr	r3, [pc, #488]	; (8014d8c <etharp_query+0x25c>)
 8014ba2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014ba6:	497a      	ldr	r1, [pc, #488]	; (8014d90 <etharp_query+0x260>)
 8014ba8:	487a      	ldr	r0, [pc, #488]	; (8014d94 <etharp_query+0x264>)
 8014baa:	f001 fe9d 	bl	80168e8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014bae:	8a7b      	ldrh	r3, [r7, #18]
 8014bb0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014bb2:	7c7a      	ldrb	r2, [r7, #17]
 8014bb4:	4978      	ldr	r1, [pc, #480]	; (8014d98 <etharp_query+0x268>)
 8014bb6:	4613      	mov	r3, r2
 8014bb8:	005b      	lsls	r3, r3, #1
 8014bba:	4413      	add	r3, r2
 8014bbc:	00db      	lsls	r3, r3, #3
 8014bbe:	440b      	add	r3, r1
 8014bc0:	3314      	adds	r3, #20
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d115      	bne.n	8014bf4 <etharp_query+0xc4>
    is_new_entry = 1;
 8014bc8:	2301      	movs	r3, #1
 8014bca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014bcc:	7c7a      	ldrb	r2, [r7, #17]
 8014bce:	4972      	ldr	r1, [pc, #456]	; (8014d98 <etharp_query+0x268>)
 8014bd0:	4613      	mov	r3, r2
 8014bd2:	005b      	lsls	r3, r3, #1
 8014bd4:	4413      	add	r3, r2
 8014bd6:	00db      	lsls	r3, r3, #3
 8014bd8:	440b      	add	r3, r1
 8014bda:	3314      	adds	r3, #20
 8014bdc:	2201      	movs	r2, #1
 8014bde:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014be0:	7c7a      	ldrb	r2, [r7, #17]
 8014be2:	496d      	ldr	r1, [pc, #436]	; (8014d98 <etharp_query+0x268>)
 8014be4:	4613      	mov	r3, r2
 8014be6:	005b      	lsls	r3, r3, #1
 8014be8:	4413      	add	r3, r2
 8014bea:	00db      	lsls	r3, r3, #3
 8014bec:	440b      	add	r3, r1
 8014bee:	3308      	adds	r3, #8
 8014bf0:	68fa      	ldr	r2, [r7, #12]
 8014bf2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014bf4:	7c7a      	ldrb	r2, [r7, #17]
 8014bf6:	4968      	ldr	r1, [pc, #416]	; (8014d98 <etharp_query+0x268>)
 8014bf8:	4613      	mov	r3, r2
 8014bfa:	005b      	lsls	r3, r3, #1
 8014bfc:	4413      	add	r3, r2
 8014bfe:	00db      	lsls	r3, r3, #3
 8014c00:	440b      	add	r3, r1
 8014c02:	3314      	adds	r3, #20
 8014c04:	781b      	ldrb	r3, [r3, #0]
 8014c06:	2b01      	cmp	r3, #1
 8014c08:	d011      	beq.n	8014c2e <etharp_query+0xfe>
 8014c0a:	7c7a      	ldrb	r2, [r7, #17]
 8014c0c:	4962      	ldr	r1, [pc, #392]	; (8014d98 <etharp_query+0x268>)
 8014c0e:	4613      	mov	r3, r2
 8014c10:	005b      	lsls	r3, r3, #1
 8014c12:	4413      	add	r3, r2
 8014c14:	00db      	lsls	r3, r3, #3
 8014c16:	440b      	add	r3, r1
 8014c18:	3314      	adds	r3, #20
 8014c1a:	781b      	ldrb	r3, [r3, #0]
 8014c1c:	2b01      	cmp	r3, #1
 8014c1e:	d806      	bhi.n	8014c2e <etharp_query+0xfe>
 8014c20:	4b5a      	ldr	r3, [pc, #360]	; (8014d8c <etharp_query+0x25c>)
 8014c22:	f240 32cf 	movw	r2, #975	; 0x3cf
 8014c26:	495d      	ldr	r1, [pc, #372]	; (8014d9c <etharp_query+0x26c>)
 8014c28:	485a      	ldr	r0, [pc, #360]	; (8014d94 <etharp_query+0x264>)
 8014c2a:	f001 fe5d 	bl	80168e8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014c2e:	6a3b      	ldr	r3, [r7, #32]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d102      	bne.n	8014c3a <etharp_query+0x10a>
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	d10c      	bne.n	8014c54 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014c3a:	68b9      	ldr	r1, [r7, #8]
 8014c3c:	68f8      	ldr	r0, [r7, #12]
 8014c3e:	f000 f963 	bl	8014f08 <etharp_request>
 8014c42:	4603      	mov	r3, r0
 8014c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d102      	bne.n	8014c54 <etharp_query+0x124>
      return result;
 8014c4e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014c52:	e097      	b.n	8014d84 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d106      	bne.n	8014c68 <etharp_query+0x138>
 8014c5a:	4b4c      	ldr	r3, [pc, #304]	; (8014d8c <etharp_query+0x25c>)
 8014c5c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014c60:	494f      	ldr	r1, [pc, #316]	; (8014da0 <etharp_query+0x270>)
 8014c62:	484c      	ldr	r0, [pc, #304]	; (8014d94 <etharp_query+0x264>)
 8014c64:	f001 fe40 	bl	80168e8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014c68:	7c7a      	ldrb	r2, [r7, #17]
 8014c6a:	494b      	ldr	r1, [pc, #300]	; (8014d98 <etharp_query+0x268>)
 8014c6c:	4613      	mov	r3, r2
 8014c6e:	005b      	lsls	r3, r3, #1
 8014c70:	4413      	add	r3, r2
 8014c72:	00db      	lsls	r3, r3, #3
 8014c74:	440b      	add	r3, r1
 8014c76:	3314      	adds	r3, #20
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	2b01      	cmp	r3, #1
 8014c7c:	d918      	bls.n	8014cb0 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014c7e:	4a49      	ldr	r2, [pc, #292]	; (8014da4 <etharp_query+0x274>)
 8014c80:	7c7b      	ldrb	r3, [r7, #17]
 8014c82:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014c84:	7c7a      	ldrb	r2, [r7, #17]
 8014c86:	4613      	mov	r3, r2
 8014c88:	005b      	lsls	r3, r3, #1
 8014c8a:	4413      	add	r3, r2
 8014c8c:	00db      	lsls	r3, r3, #3
 8014c8e:	3308      	adds	r3, #8
 8014c90:	4a41      	ldr	r2, [pc, #260]	; (8014d98 <etharp_query+0x268>)
 8014c92:	4413      	add	r3, r2
 8014c94:	1d1a      	adds	r2, r3, #4
 8014c96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c9a:	9300      	str	r3, [sp, #0]
 8014c9c:	4613      	mov	r3, r2
 8014c9e:	697a      	ldr	r2, [r7, #20]
 8014ca0:	6879      	ldr	r1, [r7, #4]
 8014ca2:	68f8      	ldr	r0, [r7, #12]
 8014ca4:	f001 fc86 	bl	80165b4 <ethernet_output>
 8014ca8:	4603      	mov	r3, r0
 8014caa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014cae:	e067      	b.n	8014d80 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014cb0:	7c7a      	ldrb	r2, [r7, #17]
 8014cb2:	4939      	ldr	r1, [pc, #228]	; (8014d98 <etharp_query+0x268>)
 8014cb4:	4613      	mov	r3, r2
 8014cb6:	005b      	lsls	r3, r3, #1
 8014cb8:	4413      	add	r3, r2
 8014cba:	00db      	lsls	r3, r3, #3
 8014cbc:	440b      	add	r3, r1
 8014cbe:	3314      	adds	r3, #20
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	2b01      	cmp	r3, #1
 8014cc4:	d15c      	bne.n	8014d80 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014cce:	e01c      	b.n	8014d0a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014cd0:	69fb      	ldr	r3, [r7, #28]
 8014cd2:	895a      	ldrh	r2, [r3, #10]
 8014cd4:	69fb      	ldr	r3, [r7, #28]
 8014cd6:	891b      	ldrh	r3, [r3, #8]
 8014cd8:	429a      	cmp	r2, r3
 8014cda:	d10a      	bne.n	8014cf2 <etharp_query+0x1c2>
 8014cdc:	69fb      	ldr	r3, [r7, #28]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d006      	beq.n	8014cf2 <etharp_query+0x1c2>
 8014ce4:	4b29      	ldr	r3, [pc, #164]	; (8014d8c <etharp_query+0x25c>)
 8014ce6:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014cea:	492f      	ldr	r1, [pc, #188]	; (8014da8 <etharp_query+0x278>)
 8014cec:	4829      	ldr	r0, [pc, #164]	; (8014d94 <etharp_query+0x264>)
 8014cee:	f001 fdfb 	bl	80168e8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014cf2:	69fb      	ldr	r3, [r7, #28]
 8014cf4:	7b1b      	ldrb	r3, [r3, #12]
 8014cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d002      	beq.n	8014d04 <etharp_query+0x1d4>
        copy_needed = 1;
 8014cfe:	2301      	movs	r3, #1
 8014d00:	61bb      	str	r3, [r7, #24]
        break;
 8014d02:	e005      	b.n	8014d10 <etharp_query+0x1e0>
      }
      p = p->next;
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014d0a:	69fb      	ldr	r3, [r7, #28]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d1df      	bne.n	8014cd0 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8014d10:	69bb      	ldr	r3, [r7, #24]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d007      	beq.n	8014d26 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014d16:	687a      	ldr	r2, [r7, #4]
 8014d18:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014d1c:	200e      	movs	r0, #14
 8014d1e:	f7f6 fc47 	bl	800b5b0 <pbuf_clone>
 8014d22:	61f8      	str	r0, [r7, #28]
 8014d24:	e004      	b.n	8014d30 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014d2a:	69f8      	ldr	r0, [r7, #28]
 8014d2c:	f7f6 fa6e 	bl	800b20c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014d30:	69fb      	ldr	r3, [r7, #28]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d021      	beq.n	8014d7a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014d36:	7c7a      	ldrb	r2, [r7, #17]
 8014d38:	4917      	ldr	r1, [pc, #92]	; (8014d98 <etharp_query+0x268>)
 8014d3a:	4613      	mov	r3, r2
 8014d3c:	005b      	lsls	r3, r3, #1
 8014d3e:	4413      	add	r3, r2
 8014d40:	00db      	lsls	r3, r3, #3
 8014d42:	440b      	add	r3, r1
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d00a      	beq.n	8014d60 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014d4a:	7c7a      	ldrb	r2, [r7, #17]
 8014d4c:	4912      	ldr	r1, [pc, #72]	; (8014d98 <etharp_query+0x268>)
 8014d4e:	4613      	mov	r3, r2
 8014d50:	005b      	lsls	r3, r3, #1
 8014d52:	4413      	add	r3, r2
 8014d54:	00db      	lsls	r3, r3, #3
 8014d56:	440b      	add	r3, r1
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7f6 f9b0 	bl	800b0c0 <pbuf_free>
      }
      arp_table[i].q = p;
 8014d60:	7c7a      	ldrb	r2, [r7, #17]
 8014d62:	490d      	ldr	r1, [pc, #52]	; (8014d98 <etharp_query+0x268>)
 8014d64:	4613      	mov	r3, r2
 8014d66:	005b      	lsls	r3, r3, #1
 8014d68:	4413      	add	r3, r2
 8014d6a:	00db      	lsls	r3, r3, #3
 8014d6c:	440b      	add	r3, r1
 8014d6e:	69fa      	ldr	r2, [r7, #28]
 8014d70:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014d72:	2300      	movs	r3, #0
 8014d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014d78:	e002      	b.n	8014d80 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014d7a:	23ff      	movs	r3, #255	; 0xff
 8014d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014d80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	3728      	adds	r7, #40	; 0x28
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}
 8014d8c:	0801a5e4 	.word	0x0801a5e4
 8014d90:	0801a790 	.word	0x0801a790
 8014d94:	0801a65c 	.word	0x0801a65c
 8014d98:	200102a4 	.word	0x200102a4
 8014d9c:	0801a7a0 	.word	0x0801a7a0
 8014da0:	0801a784 	.word	0x0801a784
 8014da4:	20010394 	.word	0x20010394
 8014da8:	0801a7c8 	.word	0x0801a7c8

08014dac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b08a      	sub	sp, #40	; 0x28
 8014db0:	af02      	add	r7, sp, #8
 8014db2:	60f8      	str	r0, [r7, #12]
 8014db4:	60b9      	str	r1, [r7, #8]
 8014db6:	607a      	str	r2, [r7, #4]
 8014db8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014dba:	2300      	movs	r3, #0
 8014dbc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d106      	bne.n	8014dd2 <etharp_raw+0x26>
 8014dc4:	4b3a      	ldr	r3, [pc, #232]	; (8014eb0 <etharp_raw+0x104>)
 8014dc6:	f240 4257 	movw	r2, #1111	; 0x457
 8014dca:	493a      	ldr	r1, [pc, #232]	; (8014eb4 <etharp_raw+0x108>)
 8014dcc:	483a      	ldr	r0, [pc, #232]	; (8014eb8 <etharp_raw+0x10c>)
 8014dce:	f001 fd8b 	bl	80168e8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014dd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014dd6:	211c      	movs	r1, #28
 8014dd8:	200e      	movs	r0, #14
 8014dda:	f7f5 fe91 	bl	800ab00 <pbuf_alloc>
 8014dde:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014de0:	69bb      	ldr	r3, [r7, #24]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d102      	bne.n	8014dec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014de6:	f04f 33ff 	mov.w	r3, #4294967295
 8014dea:	e05d      	b.n	8014ea8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014dec:	69bb      	ldr	r3, [r7, #24]
 8014dee:	895b      	ldrh	r3, [r3, #10]
 8014df0:	2b1b      	cmp	r3, #27
 8014df2:	d806      	bhi.n	8014e02 <etharp_raw+0x56>
 8014df4:	4b2e      	ldr	r3, [pc, #184]	; (8014eb0 <etharp_raw+0x104>)
 8014df6:	f240 4263 	movw	r2, #1123	; 0x463
 8014dfa:	4930      	ldr	r1, [pc, #192]	; (8014ebc <etharp_raw+0x110>)
 8014dfc:	482e      	ldr	r0, [pc, #184]	; (8014eb8 <etharp_raw+0x10c>)
 8014dfe:	f001 fd73 	bl	80168e8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014e02:	69bb      	ldr	r3, [r7, #24]
 8014e04:	685b      	ldr	r3, [r3, #4]
 8014e06:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014e08:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f7f4 fd6e 	bl	80098ec <lwip_htons>
 8014e10:	4603      	mov	r3, r0
 8014e12:	461a      	mov	r2, r3
 8014e14:	697b      	ldr	r3, [r7, #20]
 8014e16:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014e1e:	2b06      	cmp	r3, #6
 8014e20:	d006      	beq.n	8014e30 <etharp_raw+0x84>
 8014e22:	4b23      	ldr	r3, [pc, #140]	; (8014eb0 <etharp_raw+0x104>)
 8014e24:	f240 426a 	movw	r2, #1130	; 0x46a
 8014e28:	4925      	ldr	r1, [pc, #148]	; (8014ec0 <etharp_raw+0x114>)
 8014e2a:	4823      	ldr	r0, [pc, #140]	; (8014eb8 <etharp_raw+0x10c>)
 8014e2c:	f001 fd5c 	bl	80168e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014e30:	697b      	ldr	r3, [r7, #20]
 8014e32:	3308      	adds	r3, #8
 8014e34:	2206      	movs	r2, #6
 8014e36:	6839      	ldr	r1, [r7, #0]
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f001 fd28 	bl	801688e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014e3e:	697b      	ldr	r3, [r7, #20]
 8014e40:	3312      	adds	r3, #18
 8014e42:	2206      	movs	r2, #6
 8014e44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014e46:	4618      	mov	r0, r3
 8014e48:	f001 fd21 	bl	801688e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	330e      	adds	r3, #14
 8014e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e52:	6812      	ldr	r2, [r2, #0]
 8014e54:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	3318      	adds	r3, #24
 8014e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e5c:	6812      	ldr	r2, [r2, #0]
 8014e5e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	2200      	movs	r2, #0
 8014e64:	701a      	strb	r2, [r3, #0]
 8014e66:	2200      	movs	r2, #0
 8014e68:	f042 0201 	orr.w	r2, r2, #1
 8014e6c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014e6e:	697b      	ldr	r3, [r7, #20]
 8014e70:	2200      	movs	r2, #0
 8014e72:	f042 0208 	orr.w	r2, r2, #8
 8014e76:	709a      	strb	r2, [r3, #2]
 8014e78:	2200      	movs	r2, #0
 8014e7a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014e7c:	697b      	ldr	r3, [r7, #20]
 8014e7e:	2206      	movs	r2, #6
 8014e80:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014e82:	697b      	ldr	r3, [r7, #20]
 8014e84:	2204      	movs	r2, #4
 8014e86:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014e88:	f640 0306 	movw	r3, #2054	; 0x806
 8014e8c:	9300      	str	r3, [sp, #0]
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	68ba      	ldr	r2, [r7, #8]
 8014e92:	69b9      	ldr	r1, [r7, #24]
 8014e94:	68f8      	ldr	r0, [r7, #12]
 8014e96:	f001 fb8d 	bl	80165b4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014e9a:	69b8      	ldr	r0, [r7, #24]
 8014e9c:	f7f6 f910 	bl	800b0c0 <pbuf_free>
  p = NULL;
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014ea4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	3720      	adds	r7, #32
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}
 8014eb0:	0801a5e4 	.word	0x0801a5e4
 8014eb4:	0801a734 	.word	0x0801a734
 8014eb8:	0801a65c 	.word	0x0801a65c
 8014ebc:	0801a7e4 	.word	0x0801a7e4
 8014ec0:	0801a818 	.word	0x0801a818

08014ec4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b088      	sub	sp, #32
 8014ec8:	af04      	add	r7, sp, #16
 8014eca:	60f8      	str	r0, [r7, #12]
 8014ecc:	60b9      	str	r1, [r7, #8]
 8014ece:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014edc:	68fb      	ldr	r3, [r7, #12]
 8014ede:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014ee0:	2201      	movs	r2, #1
 8014ee2:	9203      	str	r2, [sp, #12]
 8014ee4:	68ba      	ldr	r2, [r7, #8]
 8014ee6:	9202      	str	r2, [sp, #8]
 8014ee8:	4a06      	ldr	r2, [pc, #24]	; (8014f04 <etharp_request_dst+0x40>)
 8014eea:	9201      	str	r2, [sp, #4]
 8014eec:	9300      	str	r3, [sp, #0]
 8014eee:	4603      	mov	r3, r0
 8014ef0:	687a      	ldr	r2, [r7, #4]
 8014ef2:	68f8      	ldr	r0, [r7, #12]
 8014ef4:	f7ff ff5a 	bl	8014dac <etharp_raw>
 8014ef8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014efa:	4618      	mov	r0, r3
 8014efc:	3710      	adds	r7, #16
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	0803ad98 	.word	0x0803ad98

08014f08 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	6078      	str	r0, [r7, #4]
 8014f10:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014f12:	4a05      	ldr	r2, [pc, #20]	; (8014f28 <etharp_request+0x20>)
 8014f14:	6839      	ldr	r1, [r7, #0]
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f7ff ffd4 	bl	8014ec4 <etharp_request_dst>
 8014f1c:	4603      	mov	r3, r0
}
 8014f1e:	4618      	mov	r0, r3
 8014f20:	3708      	adds	r7, #8
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}
 8014f26:	bf00      	nop
 8014f28:	0803ad90 	.word	0x0803ad90

08014f2c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b08e      	sub	sp, #56	; 0x38
 8014f30:	af04      	add	r7, sp, #16
 8014f32:	6078      	str	r0, [r7, #4]
 8014f34:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014f36:	4b79      	ldr	r3, [pc, #484]	; (801511c <icmp_input+0x1f0>)
 8014f38:	689b      	ldr	r3, [r3, #8]
 8014f3a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3e:	781b      	ldrb	r3, [r3, #0]
 8014f40:	f003 030f 	and.w	r3, r3, #15
 8014f44:	b2db      	uxtb	r3, r3
 8014f46:	009b      	lsls	r3, r3, #2
 8014f48:	b2db      	uxtb	r3, r3
 8014f4a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014f4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f4e:	2b13      	cmp	r3, #19
 8014f50:	f240 80cd 	bls.w	80150ee <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	895b      	ldrh	r3, [r3, #10]
 8014f58:	2b03      	cmp	r3, #3
 8014f5a:	f240 80ca 	bls.w	80150f2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	685b      	ldr	r3, [r3, #4]
 8014f62:	781b      	ldrb	r3, [r3, #0]
 8014f64:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014f68:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	f000 80b7 	beq.w	80150e0 <icmp_input+0x1b4>
 8014f72:	2b08      	cmp	r3, #8
 8014f74:	f040 80b7 	bne.w	80150e6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014f78:	4b69      	ldr	r3, [pc, #420]	; (8015120 <icmp_input+0x1f4>)
 8014f7a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014f7c:	4b67      	ldr	r3, [pc, #412]	; (801511c <icmp_input+0x1f0>)
 8014f7e:	695b      	ldr	r3, [r3, #20]
 8014f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f84:	2be0      	cmp	r3, #224	; 0xe0
 8014f86:	f000 80bb 	beq.w	8015100 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014f8a:	4b64      	ldr	r3, [pc, #400]	; (801511c <icmp_input+0x1f0>)
 8014f8c:	695a      	ldr	r2, [r3, #20]
 8014f8e:	4b63      	ldr	r3, [pc, #396]	; (801511c <icmp_input+0x1f0>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	4619      	mov	r1, r3
 8014f94:	4610      	mov	r0, r2
 8014f96:	f000 fc09 	bl	80157ac <ip4_addr_isbroadcast_u32>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	f040 80b1 	bne.w	8015104 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	891b      	ldrh	r3, [r3, #8]
 8014fa6:	2b07      	cmp	r3, #7
 8014fa8:	f240 80a5 	bls.w	80150f6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014fac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014fae:	330e      	adds	r3, #14
 8014fb0:	4619      	mov	r1, r3
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f7f5 ffee 	bl	800af94 <pbuf_add_header>
 8014fb8:	4603      	mov	r3, r0
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d04b      	beq.n	8015056 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	891a      	ldrh	r2, [r3, #8]
 8014fc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014fc4:	4413      	add	r3, r2
 8014fc6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	891b      	ldrh	r3, [r3, #8]
 8014fcc:	8b7a      	ldrh	r2, [r7, #26]
 8014fce:	429a      	cmp	r2, r3
 8014fd0:	f0c0 809a 	bcc.w	8015108 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014fd4:	8b7b      	ldrh	r3, [r7, #26]
 8014fd6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014fda:	4619      	mov	r1, r3
 8014fdc:	200e      	movs	r0, #14
 8014fde:	f7f5 fd8f 	bl	800ab00 <pbuf_alloc>
 8014fe2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	f000 8090 	beq.w	801510c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	895b      	ldrh	r3, [r3, #10]
 8014ff0:	461a      	mov	r2, r3
 8014ff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ff4:	3308      	adds	r3, #8
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	d203      	bcs.n	8015002 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014ffa:	6978      	ldr	r0, [r7, #20]
 8014ffc:	f7f6 f860 	bl	800b0c0 <pbuf_free>
          goto icmperr;
 8015000:	e085      	b.n	801510e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015002:	697b      	ldr	r3, [r7, #20]
 8015004:	685b      	ldr	r3, [r3, #4]
 8015006:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015008:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801500a:	4618      	mov	r0, r3
 801500c:	f001 fc3f 	bl	801688e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015010:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015012:	4619      	mov	r1, r3
 8015014:	6978      	ldr	r0, [r7, #20]
 8015016:	f7f5 ffcd 	bl	800afb4 <pbuf_remove_header>
 801501a:	4603      	mov	r3, r0
 801501c:	2b00      	cmp	r3, #0
 801501e:	d009      	beq.n	8015034 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015020:	4b40      	ldr	r3, [pc, #256]	; (8015124 <icmp_input+0x1f8>)
 8015022:	22b6      	movs	r2, #182	; 0xb6
 8015024:	4940      	ldr	r1, [pc, #256]	; (8015128 <icmp_input+0x1fc>)
 8015026:	4841      	ldr	r0, [pc, #260]	; (801512c <icmp_input+0x200>)
 8015028:	f001 fc5e 	bl	80168e8 <iprintf>
          pbuf_free(r);
 801502c:	6978      	ldr	r0, [r7, #20]
 801502e:	f7f6 f847 	bl	800b0c0 <pbuf_free>
          goto icmperr;
 8015032:	e06c      	b.n	801510e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015034:	6879      	ldr	r1, [r7, #4]
 8015036:	6978      	ldr	r0, [r7, #20]
 8015038:	f7f6 f976 	bl	800b328 <pbuf_copy>
 801503c:	4603      	mov	r3, r0
 801503e:	2b00      	cmp	r3, #0
 8015040:	d003      	beq.n	801504a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015042:	6978      	ldr	r0, [r7, #20]
 8015044:	f7f6 f83c 	bl	800b0c0 <pbuf_free>
          goto icmperr;
 8015048:	e061      	b.n	801510e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801504a:	6878      	ldr	r0, [r7, #4]
 801504c:	f7f6 f838 	bl	800b0c0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	607b      	str	r3, [r7, #4]
 8015054:	e00f      	b.n	8015076 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015056:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015058:	330e      	adds	r3, #14
 801505a:	4619      	mov	r1, r3
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f7f5 ffa9 	bl	800afb4 <pbuf_remove_header>
 8015062:	4603      	mov	r3, r0
 8015064:	2b00      	cmp	r3, #0
 8015066:	d006      	beq.n	8015076 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015068:	4b2e      	ldr	r3, [pc, #184]	; (8015124 <icmp_input+0x1f8>)
 801506a:	22c7      	movs	r2, #199	; 0xc7
 801506c:	4930      	ldr	r1, [pc, #192]	; (8015130 <icmp_input+0x204>)
 801506e:	482f      	ldr	r0, [pc, #188]	; (801512c <icmp_input+0x200>)
 8015070:	f001 fc3a 	bl	80168e8 <iprintf>
          goto icmperr;
 8015074:	e04b      	b.n	801510e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	685b      	ldr	r3, [r3, #4]
 801507a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801507c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801507e:	4619      	mov	r1, r3
 8015080:	6878      	ldr	r0, [r7, #4]
 8015082:	f7f5 ff87 	bl	800af94 <pbuf_add_header>
 8015086:	4603      	mov	r3, r0
 8015088:	2b00      	cmp	r3, #0
 801508a:	d12b      	bne.n	80150e4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015092:	69fb      	ldr	r3, [r7, #28]
 8015094:	681a      	ldr	r2, [r3, #0]
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801509a:	4b20      	ldr	r3, [pc, #128]	; (801511c <icmp_input+0x1f0>)
 801509c:	691a      	ldr	r2, [r3, #16]
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	2200      	movs	r2, #0
 80150a6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80150a8:	693b      	ldr	r3, [r7, #16]
 80150aa:	2200      	movs	r2, #0
 80150ac:	709a      	strb	r2, [r3, #2]
 80150ae:	2200      	movs	r2, #0
 80150b0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	22ff      	movs	r2, #255	; 0xff
 80150b6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	2200      	movs	r2, #0
 80150bc:	729a      	strb	r2, [r3, #10]
 80150be:	2200      	movs	r2, #0
 80150c0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	9302      	str	r3, [sp, #8]
 80150c6:	2301      	movs	r3, #1
 80150c8:	9301      	str	r3, [sp, #4]
 80150ca:	2300      	movs	r3, #0
 80150cc:	9300      	str	r3, [sp, #0]
 80150ce:	23ff      	movs	r3, #255	; 0xff
 80150d0:	2200      	movs	r2, #0
 80150d2:	69f9      	ldr	r1, [r7, #28]
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f000 fa91 	bl	80155fc <ip4_output_if>
 80150da:	4603      	mov	r3, r0
 80150dc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80150de:	e001      	b.n	80150e4 <icmp_input+0x1b8>
      break;
 80150e0:	bf00      	nop
 80150e2:	e000      	b.n	80150e6 <icmp_input+0x1ba>
      break;
 80150e4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f7f5 ffea 	bl	800b0c0 <pbuf_free>
  return;
 80150ec:	e013      	b.n	8015116 <icmp_input+0x1ea>
    goto lenerr;
 80150ee:	bf00      	nop
 80150f0:	e002      	b.n	80150f8 <icmp_input+0x1cc>
    goto lenerr;
 80150f2:	bf00      	nop
 80150f4:	e000      	b.n	80150f8 <icmp_input+0x1cc>
        goto lenerr;
 80150f6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80150f8:	6878      	ldr	r0, [r7, #4]
 80150fa:	f7f5 ffe1 	bl	800b0c0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80150fe:	e00a      	b.n	8015116 <icmp_input+0x1ea>
        goto icmperr;
 8015100:	bf00      	nop
 8015102:	e004      	b.n	801510e <icmp_input+0x1e2>
        goto icmperr;
 8015104:	bf00      	nop
 8015106:	e002      	b.n	801510e <icmp_input+0x1e2>
          goto icmperr;
 8015108:	bf00      	nop
 801510a:	e000      	b.n	801510e <icmp_input+0x1e2>
          goto icmperr;
 801510c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801510e:	6878      	ldr	r0, [r7, #4]
 8015110:	f7f5 ffd6 	bl	800b0c0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015114:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015116:	3728      	adds	r7, #40	; 0x28
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}
 801511c:	200136e0 	.word	0x200136e0
 8015120:	200136f4 	.word	0x200136f4
 8015124:	0801a85c 	.word	0x0801a85c
 8015128:	0801a894 	.word	0x0801a894
 801512c:	0801a8cc 	.word	0x0801a8cc
 8015130:	0801a8f4 	.word	0x0801a8f4

08015134 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b082      	sub	sp, #8
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	460b      	mov	r3, r1
 801513e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015140:	78fb      	ldrb	r3, [r7, #3]
 8015142:	461a      	mov	r2, r3
 8015144:	2103      	movs	r1, #3
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f000 f814 	bl	8015174 <icmp_send_response>
}
 801514c:	bf00      	nop
 801514e:	3708      	adds	r7, #8
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}

08015154 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b082      	sub	sp, #8
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
 801515c:	460b      	mov	r3, r1
 801515e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015160:	78fb      	ldrb	r3, [r7, #3]
 8015162:	461a      	mov	r2, r3
 8015164:	210b      	movs	r1, #11
 8015166:	6878      	ldr	r0, [r7, #4]
 8015168:	f000 f804 	bl	8015174 <icmp_send_response>
}
 801516c:	bf00      	nop
 801516e:	3708      	adds	r7, #8
 8015170:	46bd      	mov	sp, r7
 8015172:	bd80      	pop	{r7, pc}

08015174 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b08c      	sub	sp, #48	; 0x30
 8015178:	af04      	add	r7, sp, #16
 801517a:	6078      	str	r0, [r7, #4]
 801517c:	460b      	mov	r3, r1
 801517e:	70fb      	strb	r3, [r7, #3]
 8015180:	4613      	mov	r3, r2
 8015182:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015184:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015188:	2124      	movs	r1, #36	; 0x24
 801518a:	2022      	movs	r0, #34	; 0x22
 801518c:	f7f5 fcb8 	bl	800ab00 <pbuf_alloc>
 8015190:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015192:	69fb      	ldr	r3, [r7, #28]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d04c      	beq.n	8015232 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015198:	69fb      	ldr	r3, [r7, #28]
 801519a:	895b      	ldrh	r3, [r3, #10]
 801519c:	2b23      	cmp	r3, #35	; 0x23
 801519e:	d806      	bhi.n	80151ae <icmp_send_response+0x3a>
 80151a0:	4b26      	ldr	r3, [pc, #152]	; (801523c <icmp_send_response+0xc8>)
 80151a2:	f240 1269 	movw	r2, #361	; 0x169
 80151a6:	4926      	ldr	r1, [pc, #152]	; (8015240 <icmp_send_response+0xcc>)
 80151a8:	4826      	ldr	r0, [pc, #152]	; (8015244 <icmp_send_response+0xd0>)
 80151aa:	f001 fb9d 	bl	80168e8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	685b      	ldr	r3, [r3, #4]
 80151b2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80151b4:	69fb      	ldr	r3, [r7, #28]
 80151b6:	685b      	ldr	r3, [r3, #4]
 80151b8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80151ba:	697b      	ldr	r3, [r7, #20]
 80151bc:	78fa      	ldrb	r2, [r7, #3]
 80151be:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80151c0:	697b      	ldr	r3, [r7, #20]
 80151c2:	78ba      	ldrb	r2, [r7, #2]
 80151c4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80151c6:	697b      	ldr	r3, [r7, #20]
 80151c8:	2200      	movs	r2, #0
 80151ca:	711a      	strb	r2, [r3, #4]
 80151cc:	2200      	movs	r2, #0
 80151ce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80151d0:	697b      	ldr	r3, [r7, #20]
 80151d2:	2200      	movs	r2, #0
 80151d4:	719a      	strb	r2, [r3, #6]
 80151d6:	2200      	movs	r2, #0
 80151d8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80151da:	69fb      	ldr	r3, [r7, #28]
 80151dc:	685b      	ldr	r3, [r3, #4]
 80151de:	f103 0008 	add.w	r0, r3, #8
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	685b      	ldr	r3, [r3, #4]
 80151e6:	221c      	movs	r2, #28
 80151e8:	4619      	mov	r1, r3
 80151ea:	f001 fb50 	bl	801688e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80151ee:	69bb      	ldr	r3, [r7, #24]
 80151f0:	68db      	ldr	r3, [r3, #12]
 80151f2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80151f4:	f107 030c 	add.w	r3, r7, #12
 80151f8:	4618      	mov	r0, r3
 80151fa:	f000 f825 	bl	8015248 <ip4_route>
 80151fe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015200:	693b      	ldr	r3, [r7, #16]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d011      	beq.n	801522a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015206:	697b      	ldr	r3, [r7, #20]
 8015208:	2200      	movs	r2, #0
 801520a:	709a      	strb	r2, [r3, #2]
 801520c:	2200      	movs	r2, #0
 801520e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015210:	f107 020c 	add.w	r2, r7, #12
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	9302      	str	r3, [sp, #8]
 8015218:	2301      	movs	r3, #1
 801521a:	9301      	str	r3, [sp, #4]
 801521c:	2300      	movs	r3, #0
 801521e:	9300      	str	r3, [sp, #0]
 8015220:	23ff      	movs	r3, #255	; 0xff
 8015222:	2100      	movs	r1, #0
 8015224:	69f8      	ldr	r0, [r7, #28]
 8015226:	f000 f9e9 	bl	80155fc <ip4_output_if>
  }
  pbuf_free(q);
 801522a:	69f8      	ldr	r0, [r7, #28]
 801522c:	f7f5 ff48 	bl	800b0c0 <pbuf_free>
 8015230:	e000      	b.n	8015234 <icmp_send_response+0xc0>
    return;
 8015232:	bf00      	nop
}
 8015234:	3720      	adds	r7, #32
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}
 801523a:	bf00      	nop
 801523c:	0801a85c 	.word	0x0801a85c
 8015240:	0801a928 	.word	0x0801a928
 8015244:	0801a8cc 	.word	0x0801a8cc

08015248 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015248:	b480      	push	{r7}
 801524a:	b085      	sub	sp, #20
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015250:	4b33      	ldr	r3, [pc, #204]	; (8015320 <ip4_route+0xd8>)
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	60fb      	str	r3, [r7, #12]
 8015256:	e036      	b.n	80152c6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801525e:	f003 0301 	and.w	r3, r3, #1
 8015262:	b2db      	uxtb	r3, r3
 8015264:	2b00      	cmp	r3, #0
 8015266:	d02b      	beq.n	80152c0 <ip4_route+0x78>
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801526e:	089b      	lsrs	r3, r3, #2
 8015270:	f003 0301 	and.w	r3, r3, #1
 8015274:	b2db      	uxtb	r3, r3
 8015276:	2b00      	cmp	r3, #0
 8015278:	d022      	beq.n	80152c0 <ip4_route+0x78>
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	3304      	adds	r3, #4
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d01d      	beq.n	80152c0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	681a      	ldr	r2, [r3, #0]
 8015288:	68fb      	ldr	r3, [r7, #12]
 801528a:	3304      	adds	r3, #4
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	405a      	eors	r2, r3
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	3308      	adds	r3, #8
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	4013      	ands	r3, r2
 8015298:	2b00      	cmp	r3, #0
 801529a:	d101      	bne.n	80152a0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	e038      	b.n	8015312 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80152a6:	f003 0302 	and.w	r3, r3, #2
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d108      	bne.n	80152c0 <ip4_route+0x78>
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	681a      	ldr	r2, [r3, #0]
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	330c      	adds	r3, #12
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	429a      	cmp	r2, r3
 80152ba:	d101      	bne.n	80152c0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	e028      	b.n	8015312 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	60fb      	str	r3, [r7, #12]
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d1c5      	bne.n	8015258 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80152cc:	4b15      	ldr	r3, [pc, #84]	; (8015324 <ip4_route+0xdc>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d01a      	beq.n	801530a <ip4_route+0xc2>
 80152d4:	4b13      	ldr	r3, [pc, #76]	; (8015324 <ip4_route+0xdc>)
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80152dc:	f003 0301 	and.w	r3, r3, #1
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d012      	beq.n	801530a <ip4_route+0xc2>
 80152e4:	4b0f      	ldr	r3, [pc, #60]	; (8015324 <ip4_route+0xdc>)
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80152ec:	f003 0304 	and.w	r3, r3, #4
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d00a      	beq.n	801530a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80152f4:	4b0b      	ldr	r3, [pc, #44]	; (8015324 <ip4_route+0xdc>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	3304      	adds	r3, #4
 80152fa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d004      	beq.n	801530a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	b2db      	uxtb	r3, r3
 8015306:	2b7f      	cmp	r3, #127	; 0x7f
 8015308:	d101      	bne.n	801530e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801530a:	2300      	movs	r3, #0
 801530c:	e001      	b.n	8015312 <ip4_route+0xca>
  }

  return netif_default;
 801530e:	4b05      	ldr	r3, [pc, #20]	; (8015324 <ip4_route+0xdc>)
 8015310:	681b      	ldr	r3, [r3, #0]
}
 8015312:	4618      	mov	r0, r3
 8015314:	3714      	adds	r7, #20
 8015316:	46bd      	mov	sp, r7
 8015318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801531c:	4770      	bx	lr
 801531e:	bf00      	nop
 8015320:	20016e04 	.word	0x20016e04
 8015324:	20016e08 	.word	0x20016e08

08015328 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b082      	sub	sp, #8
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015336:	f003 0301 	and.w	r3, r3, #1
 801533a:	b2db      	uxtb	r3, r3
 801533c:	2b00      	cmp	r3, #0
 801533e:	d016      	beq.n	801536e <ip4_input_accept+0x46>
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	3304      	adds	r3, #4
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d011      	beq.n	801536e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801534a:	4b0b      	ldr	r3, [pc, #44]	; (8015378 <ip4_input_accept+0x50>)
 801534c:	695a      	ldr	r2, [r3, #20]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	3304      	adds	r3, #4
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	429a      	cmp	r2, r3
 8015356:	d008      	beq.n	801536a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015358:	4b07      	ldr	r3, [pc, #28]	; (8015378 <ip4_input_accept+0x50>)
 801535a:	695b      	ldr	r3, [r3, #20]
 801535c:	6879      	ldr	r1, [r7, #4]
 801535e:	4618      	mov	r0, r3
 8015360:	f000 fa24 	bl	80157ac <ip4_addr_isbroadcast_u32>
 8015364:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015366:	2b00      	cmp	r3, #0
 8015368:	d001      	beq.n	801536e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801536a:	2301      	movs	r3, #1
 801536c:	e000      	b.n	8015370 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801536e:	2300      	movs	r3, #0
}
 8015370:	4618      	mov	r0, r3
 8015372:	3708      	adds	r7, #8
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}
 8015378:	200136e0 	.word	0x200136e0

0801537c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b088      	sub	sp, #32
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015386:	2301      	movs	r3, #1
 8015388:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	685b      	ldr	r3, [r3, #4]
 801538e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015390:	69fb      	ldr	r3, [r7, #28]
 8015392:	781b      	ldrb	r3, [r3, #0]
 8015394:	091b      	lsrs	r3, r3, #4
 8015396:	b2db      	uxtb	r3, r3
 8015398:	2b04      	cmp	r3, #4
 801539a:	d004      	beq.n	80153a6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801539c:	6878      	ldr	r0, [r7, #4]
 801539e:	f7f5 fe8f 	bl	800b0c0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80153a2:	2300      	movs	r3, #0
 80153a4:	e121      	b.n	80155ea <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80153a6:	69fb      	ldr	r3, [r7, #28]
 80153a8:	781b      	ldrb	r3, [r3, #0]
 80153aa:	f003 030f 	and.w	r3, r3, #15
 80153ae:	b2db      	uxtb	r3, r3
 80153b0:	009b      	lsls	r3, r3, #2
 80153b2:	b2db      	uxtb	r3, r3
 80153b4:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80153b6:	69fb      	ldr	r3, [r7, #28]
 80153b8:	885b      	ldrh	r3, [r3, #2]
 80153ba:	b29b      	uxth	r3, r3
 80153bc:	4618      	mov	r0, r3
 80153be:	f7f4 fa95 	bl	80098ec <lwip_htons>
 80153c2:	4603      	mov	r3, r0
 80153c4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	891b      	ldrh	r3, [r3, #8]
 80153ca:	8a3a      	ldrh	r2, [r7, #16]
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d204      	bcs.n	80153da <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80153d0:	8a3b      	ldrh	r3, [r7, #16]
 80153d2:	4619      	mov	r1, r3
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f7f5 fced 	bl	800adb4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	895b      	ldrh	r3, [r3, #10]
 80153de:	8a7a      	ldrh	r2, [r7, #18]
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d807      	bhi.n	80153f4 <ip4_input+0x78>
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	891b      	ldrh	r3, [r3, #8]
 80153e8:	8a3a      	ldrh	r2, [r7, #16]
 80153ea:	429a      	cmp	r2, r3
 80153ec:	d802      	bhi.n	80153f4 <ip4_input+0x78>
 80153ee:	8a7b      	ldrh	r3, [r7, #18]
 80153f0:	2b13      	cmp	r3, #19
 80153f2:	d804      	bhi.n	80153fe <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f7f5 fe63 	bl	800b0c0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80153fa:	2300      	movs	r3, #0
 80153fc:	e0f5      	b.n	80155ea <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80153fe:	69fb      	ldr	r3, [r7, #28]
 8015400:	691b      	ldr	r3, [r3, #16]
 8015402:	4a7c      	ldr	r2, [pc, #496]	; (80155f4 <ip4_input+0x278>)
 8015404:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015406:	69fb      	ldr	r3, [r7, #28]
 8015408:	68db      	ldr	r3, [r3, #12]
 801540a:	4a7a      	ldr	r2, [pc, #488]	; (80155f4 <ip4_input+0x278>)
 801540c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801540e:	4b79      	ldr	r3, [pc, #484]	; (80155f4 <ip4_input+0x278>)
 8015410:	695b      	ldr	r3, [r3, #20]
 8015412:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015416:	2be0      	cmp	r3, #224	; 0xe0
 8015418:	d112      	bne.n	8015440 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015420:	f003 0301 	and.w	r3, r3, #1
 8015424:	b2db      	uxtb	r3, r3
 8015426:	2b00      	cmp	r3, #0
 8015428:	d007      	beq.n	801543a <ip4_input+0xbe>
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	3304      	adds	r3, #4
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d002      	beq.n	801543a <ip4_input+0xbe>
      netif = inp;
 8015434:	683b      	ldr	r3, [r7, #0]
 8015436:	61bb      	str	r3, [r7, #24]
 8015438:	e02a      	b.n	8015490 <ip4_input+0x114>
    } else {
      netif = NULL;
 801543a:	2300      	movs	r3, #0
 801543c:	61bb      	str	r3, [r7, #24]
 801543e:	e027      	b.n	8015490 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015440:	6838      	ldr	r0, [r7, #0]
 8015442:	f7ff ff71 	bl	8015328 <ip4_input_accept>
 8015446:	4603      	mov	r3, r0
 8015448:	2b00      	cmp	r3, #0
 801544a:	d002      	beq.n	8015452 <ip4_input+0xd6>
      netif = inp;
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	61bb      	str	r3, [r7, #24]
 8015450:	e01e      	b.n	8015490 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015452:	2300      	movs	r3, #0
 8015454:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015456:	4b67      	ldr	r3, [pc, #412]	; (80155f4 <ip4_input+0x278>)
 8015458:	695b      	ldr	r3, [r3, #20]
 801545a:	b2db      	uxtb	r3, r3
 801545c:	2b7f      	cmp	r3, #127	; 0x7f
 801545e:	d017      	beq.n	8015490 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015460:	4b65      	ldr	r3, [pc, #404]	; (80155f8 <ip4_input+0x27c>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	61bb      	str	r3, [r7, #24]
 8015466:	e00e      	b.n	8015486 <ip4_input+0x10a>
          if (netif == inp) {
 8015468:	69ba      	ldr	r2, [r7, #24]
 801546a:	683b      	ldr	r3, [r7, #0]
 801546c:	429a      	cmp	r2, r3
 801546e:	d006      	beq.n	801547e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015470:	69b8      	ldr	r0, [r7, #24]
 8015472:	f7ff ff59 	bl	8015328 <ip4_input_accept>
 8015476:	4603      	mov	r3, r0
 8015478:	2b00      	cmp	r3, #0
 801547a:	d108      	bne.n	801548e <ip4_input+0x112>
 801547c:	e000      	b.n	8015480 <ip4_input+0x104>
            continue;
 801547e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015480:	69bb      	ldr	r3, [r7, #24]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	61bb      	str	r3, [r7, #24]
 8015486:	69bb      	ldr	r3, [r7, #24]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d1ed      	bne.n	8015468 <ip4_input+0xec>
 801548c:	e000      	b.n	8015490 <ip4_input+0x114>
            break;
 801548e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015490:	69bb      	ldr	r3, [r7, #24]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d111      	bne.n	80154ba <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015496:	69fb      	ldr	r3, [r7, #28]
 8015498:	7a5b      	ldrb	r3, [r3, #9]
 801549a:	2b11      	cmp	r3, #17
 801549c:	d10d      	bne.n	80154ba <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801549e:	8a7b      	ldrh	r3, [r7, #18]
 80154a0:	69fa      	ldr	r2, [r7, #28]
 80154a2:	4413      	add	r3, r2
 80154a4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	885b      	ldrh	r3, [r3, #2]
 80154aa:	b29b      	uxth	r3, r3
 80154ac:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80154b0:	d103      	bne.n	80154ba <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80154b6:	2300      	movs	r3, #0
 80154b8:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80154ba:	697b      	ldr	r3, [r7, #20]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d017      	beq.n	80154f0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80154c0:	4b4c      	ldr	r3, [pc, #304]	; (80155f4 <ip4_input+0x278>)
 80154c2:	691b      	ldr	r3, [r3, #16]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d013      	beq.n	80154f0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80154c8:	4b4a      	ldr	r3, [pc, #296]	; (80155f4 <ip4_input+0x278>)
 80154ca:	691b      	ldr	r3, [r3, #16]
 80154cc:	6839      	ldr	r1, [r7, #0]
 80154ce:	4618      	mov	r0, r3
 80154d0:	f000 f96c 	bl	80157ac <ip4_addr_isbroadcast_u32>
 80154d4:	4603      	mov	r3, r0
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d105      	bne.n	80154e6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80154da:	4b46      	ldr	r3, [pc, #280]	; (80155f4 <ip4_input+0x278>)
 80154dc:	691b      	ldr	r3, [r3, #16]
 80154de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80154e2:	2be0      	cmp	r3, #224	; 0xe0
 80154e4:	d104      	bne.n	80154f0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	f7f5 fdea 	bl	800b0c0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80154ec:	2300      	movs	r3, #0
 80154ee:	e07c      	b.n	80155ea <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80154f0:	69bb      	ldr	r3, [r7, #24]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d104      	bne.n	8015500 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f7f5 fde2 	bl	800b0c0 <pbuf_free>
    return ERR_OK;
 80154fc:	2300      	movs	r3, #0
 80154fe:	e074      	b.n	80155ea <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015500:	69fb      	ldr	r3, [r7, #28]
 8015502:	88db      	ldrh	r3, [r3, #6]
 8015504:	b29b      	uxth	r3, r3
 8015506:	461a      	mov	r2, r3
 8015508:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801550c:	4013      	ands	r3, r2
 801550e:	2b00      	cmp	r3, #0
 8015510:	d00b      	beq.n	801552a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015512:	6878      	ldr	r0, [r7, #4]
 8015514:	f000 fc90 	bl	8015e38 <ip4_reass>
 8015518:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d101      	bne.n	8015524 <ip4_input+0x1a8>
      return ERR_OK;
 8015520:	2300      	movs	r3, #0
 8015522:	e062      	b.n	80155ea <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	685b      	ldr	r3, [r3, #4]
 8015528:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801552a:	4a32      	ldr	r2, [pc, #200]	; (80155f4 <ip4_input+0x278>)
 801552c:	69bb      	ldr	r3, [r7, #24]
 801552e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015530:	4a30      	ldr	r2, [pc, #192]	; (80155f4 <ip4_input+0x278>)
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015536:	4a2f      	ldr	r2, [pc, #188]	; (80155f4 <ip4_input+0x278>)
 8015538:	69fb      	ldr	r3, [r7, #28]
 801553a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801553c:	69fb      	ldr	r3, [r7, #28]
 801553e:	781b      	ldrb	r3, [r3, #0]
 8015540:	f003 030f 	and.w	r3, r3, #15
 8015544:	b2db      	uxtb	r3, r3
 8015546:	009b      	lsls	r3, r3, #2
 8015548:	b2db      	uxtb	r3, r3
 801554a:	b29a      	uxth	r2, r3
 801554c:	4b29      	ldr	r3, [pc, #164]	; (80155f4 <ip4_input+0x278>)
 801554e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015550:	8a7b      	ldrh	r3, [r7, #18]
 8015552:	4619      	mov	r1, r3
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f7f5 fd2d 	bl	800afb4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801555a:	69fb      	ldr	r3, [r7, #28]
 801555c:	7a5b      	ldrb	r3, [r3, #9]
 801555e:	2b06      	cmp	r3, #6
 8015560:	d009      	beq.n	8015576 <ip4_input+0x1fa>
 8015562:	2b11      	cmp	r3, #17
 8015564:	d002      	beq.n	801556c <ip4_input+0x1f0>
 8015566:	2b01      	cmp	r3, #1
 8015568:	d00a      	beq.n	8015580 <ip4_input+0x204>
 801556a:	e00e      	b.n	801558a <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801556c:	6839      	ldr	r1, [r7, #0]
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f7fc fad0 	bl	8011b14 <udp_input>
        break;
 8015574:	e026      	b.n	80155c4 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015576:	6839      	ldr	r1, [r7, #0]
 8015578:	6878      	ldr	r0, [r7, #4]
 801557a:	f7f7 fe7f 	bl	800d27c <tcp_input>
        break;
 801557e:	e021      	b.n	80155c4 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015580:	6839      	ldr	r1, [r7, #0]
 8015582:	6878      	ldr	r0, [r7, #4]
 8015584:	f7ff fcd2 	bl	8014f2c <icmp_input>
        break;
 8015588:	e01c      	b.n	80155c4 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801558a:	4b1a      	ldr	r3, [pc, #104]	; (80155f4 <ip4_input+0x278>)
 801558c:	695b      	ldr	r3, [r3, #20]
 801558e:	69b9      	ldr	r1, [r7, #24]
 8015590:	4618      	mov	r0, r3
 8015592:	f000 f90b 	bl	80157ac <ip4_addr_isbroadcast_u32>
 8015596:	4603      	mov	r3, r0
 8015598:	2b00      	cmp	r3, #0
 801559a:	d10f      	bne.n	80155bc <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801559c:	4b15      	ldr	r3, [pc, #84]	; (80155f4 <ip4_input+0x278>)
 801559e:	695b      	ldr	r3, [r3, #20]
 80155a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80155a4:	2be0      	cmp	r3, #224	; 0xe0
 80155a6:	d009      	beq.n	80155bc <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80155a8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80155ac:	4619      	mov	r1, r3
 80155ae:	6878      	ldr	r0, [r7, #4]
 80155b0:	f7f5 fd73 	bl	800b09a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80155b4:	2102      	movs	r1, #2
 80155b6:	6878      	ldr	r0, [r7, #4]
 80155b8:	f7ff fdbc 	bl	8015134 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80155bc:	6878      	ldr	r0, [r7, #4]
 80155be:	f7f5 fd7f 	bl	800b0c0 <pbuf_free>
        break;
 80155c2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80155c4:	4b0b      	ldr	r3, [pc, #44]	; (80155f4 <ip4_input+0x278>)
 80155c6:	2200      	movs	r2, #0
 80155c8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80155ca:	4b0a      	ldr	r3, [pc, #40]	; (80155f4 <ip4_input+0x278>)
 80155cc:	2200      	movs	r2, #0
 80155ce:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80155d0:	4b08      	ldr	r3, [pc, #32]	; (80155f4 <ip4_input+0x278>)
 80155d2:	2200      	movs	r2, #0
 80155d4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80155d6:	4b07      	ldr	r3, [pc, #28]	; (80155f4 <ip4_input+0x278>)
 80155d8:	2200      	movs	r2, #0
 80155da:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80155dc:	4b05      	ldr	r3, [pc, #20]	; (80155f4 <ip4_input+0x278>)
 80155de:	2200      	movs	r2, #0
 80155e0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80155e2:	4b04      	ldr	r3, [pc, #16]	; (80155f4 <ip4_input+0x278>)
 80155e4:	2200      	movs	r2, #0
 80155e6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80155e8:	2300      	movs	r3, #0
}
 80155ea:	4618      	mov	r0, r3
 80155ec:	3720      	adds	r7, #32
 80155ee:	46bd      	mov	sp, r7
 80155f0:	bd80      	pop	{r7, pc}
 80155f2:	bf00      	nop
 80155f4:	200136e0 	.word	0x200136e0
 80155f8:	20016e04 	.word	0x20016e04

080155fc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b08a      	sub	sp, #40	; 0x28
 8015600:	af04      	add	r7, sp, #16
 8015602:	60f8      	str	r0, [r7, #12]
 8015604:	60b9      	str	r1, [r7, #8]
 8015606:	607a      	str	r2, [r7, #4]
 8015608:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801560a:	68bb      	ldr	r3, [r7, #8]
 801560c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d009      	beq.n	8015628 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	2b00      	cmp	r3, #0
 8015618:	d003      	beq.n	8015622 <ip4_output_if+0x26>
 801561a:	68bb      	ldr	r3, [r7, #8]
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d102      	bne.n	8015628 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015624:	3304      	adds	r3, #4
 8015626:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015628:	78fa      	ldrb	r2, [r7, #3]
 801562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801562c:	9302      	str	r3, [sp, #8]
 801562e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015632:	9301      	str	r3, [sp, #4]
 8015634:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015638:	9300      	str	r3, [sp, #0]
 801563a:	4613      	mov	r3, r2
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	6979      	ldr	r1, [r7, #20]
 8015640:	68f8      	ldr	r0, [r7, #12]
 8015642:	f000 f805 	bl	8015650 <ip4_output_if_src>
 8015646:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015648:	4618      	mov	r0, r3
 801564a:	3718      	adds	r7, #24
 801564c:	46bd      	mov	sp, r7
 801564e:	bd80      	pop	{r7, pc}

08015650 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015650:	b580      	push	{r7, lr}
 8015652:	b088      	sub	sp, #32
 8015654:	af00      	add	r7, sp, #0
 8015656:	60f8      	str	r0, [r7, #12]
 8015658:	60b9      	str	r1, [r7, #8]
 801565a:	607a      	str	r2, [r7, #4]
 801565c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	7b9b      	ldrb	r3, [r3, #14]
 8015662:	2b01      	cmp	r3, #1
 8015664:	d006      	beq.n	8015674 <ip4_output_if_src+0x24>
 8015666:	4b4b      	ldr	r3, [pc, #300]	; (8015794 <ip4_output_if_src+0x144>)
 8015668:	f44f 7255 	mov.w	r2, #852	; 0x354
 801566c:	494a      	ldr	r1, [pc, #296]	; (8015798 <ip4_output_if_src+0x148>)
 801566e:	484b      	ldr	r0, [pc, #300]	; (801579c <ip4_output_if_src+0x14c>)
 8015670:	f001 f93a 	bl	80168e8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d060      	beq.n	801573c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801567a:	2314      	movs	r3, #20
 801567c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801567e:	2114      	movs	r1, #20
 8015680:	68f8      	ldr	r0, [r7, #12]
 8015682:	f7f5 fc87 	bl	800af94 <pbuf_add_header>
 8015686:	4603      	mov	r3, r0
 8015688:	2b00      	cmp	r3, #0
 801568a:	d002      	beq.n	8015692 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801568c:	f06f 0301 	mvn.w	r3, #1
 8015690:	e07c      	b.n	801578c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	685b      	ldr	r3, [r3, #4]
 8015696:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	895b      	ldrh	r3, [r3, #10]
 801569c:	2b13      	cmp	r3, #19
 801569e:	d806      	bhi.n	80156ae <ip4_output_if_src+0x5e>
 80156a0:	4b3c      	ldr	r3, [pc, #240]	; (8015794 <ip4_output_if_src+0x144>)
 80156a2:	f240 3289 	movw	r2, #905	; 0x389
 80156a6:	493e      	ldr	r1, [pc, #248]	; (80157a0 <ip4_output_if_src+0x150>)
 80156a8:	483c      	ldr	r0, [pc, #240]	; (801579c <ip4_output_if_src+0x14c>)
 80156aa:	f001 f91d 	bl	80168e8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80156ae:	69fb      	ldr	r3, [r7, #28]
 80156b0:	78fa      	ldrb	r2, [r7, #3]
 80156b2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80156ba:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	681a      	ldr	r2, [r3, #0]
 80156c0:	69fb      	ldr	r3, [r7, #28]
 80156c2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80156c4:	8b7b      	ldrh	r3, [r7, #26]
 80156c6:	089b      	lsrs	r3, r3, #2
 80156c8:	b29b      	uxth	r3, r3
 80156ca:	b2db      	uxtb	r3, r3
 80156cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156d0:	b2da      	uxtb	r2, r3
 80156d2:	69fb      	ldr	r3, [r7, #28]
 80156d4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80156d6:	69fb      	ldr	r3, [r7, #28]
 80156d8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80156dc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	891b      	ldrh	r3, [r3, #8]
 80156e2:	4618      	mov	r0, r3
 80156e4:	f7f4 f902 	bl	80098ec <lwip_htons>
 80156e8:	4603      	mov	r3, r0
 80156ea:	461a      	mov	r2, r3
 80156ec:	69fb      	ldr	r3, [r7, #28]
 80156ee:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80156f0:	69fb      	ldr	r3, [r7, #28]
 80156f2:	2200      	movs	r2, #0
 80156f4:	719a      	strb	r2, [r3, #6]
 80156f6:	2200      	movs	r2, #0
 80156f8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80156fa:	4b2a      	ldr	r3, [pc, #168]	; (80157a4 <ip4_output_if_src+0x154>)
 80156fc:	881b      	ldrh	r3, [r3, #0]
 80156fe:	4618      	mov	r0, r3
 8015700:	f7f4 f8f4 	bl	80098ec <lwip_htons>
 8015704:	4603      	mov	r3, r0
 8015706:	461a      	mov	r2, r3
 8015708:	69fb      	ldr	r3, [r7, #28]
 801570a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801570c:	4b25      	ldr	r3, [pc, #148]	; (80157a4 <ip4_output_if_src+0x154>)
 801570e:	881b      	ldrh	r3, [r3, #0]
 8015710:	3301      	adds	r3, #1
 8015712:	b29a      	uxth	r2, r3
 8015714:	4b23      	ldr	r3, [pc, #140]	; (80157a4 <ip4_output_if_src+0x154>)
 8015716:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d104      	bne.n	8015728 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801571e:	4b22      	ldr	r3, [pc, #136]	; (80157a8 <ip4_output_if_src+0x158>)
 8015720:	681a      	ldr	r2, [r3, #0]
 8015722:	69fb      	ldr	r3, [r7, #28]
 8015724:	60da      	str	r2, [r3, #12]
 8015726:	e003      	b.n	8015730 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	681a      	ldr	r2, [r3, #0]
 801572c:	69fb      	ldr	r3, [r7, #28]
 801572e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015730:	69fb      	ldr	r3, [r7, #28]
 8015732:	2200      	movs	r2, #0
 8015734:	729a      	strb	r2, [r3, #10]
 8015736:	2200      	movs	r2, #0
 8015738:	72da      	strb	r2, [r3, #11]
 801573a:	e00f      	b.n	801575c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	895b      	ldrh	r3, [r3, #10]
 8015740:	2b13      	cmp	r3, #19
 8015742:	d802      	bhi.n	801574a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015744:	f06f 0301 	mvn.w	r3, #1
 8015748:	e020      	b.n	801578c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	685b      	ldr	r3, [r3, #4]
 801574e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015750:	69fb      	ldr	r3, [r7, #28]
 8015752:	691b      	ldr	r3, [r3, #16]
 8015754:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015756:	f107 0314 	add.w	r3, r7, #20
 801575a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801575e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015760:	2b00      	cmp	r3, #0
 8015762:	d00c      	beq.n	801577e <ip4_output_if_src+0x12e>
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	891a      	ldrh	r2, [r3, #8]
 8015768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801576a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801576c:	429a      	cmp	r2, r3
 801576e:	d906      	bls.n	801577e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015770:	687a      	ldr	r2, [r7, #4]
 8015772:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015774:	68f8      	ldr	r0, [r7, #12]
 8015776:	f000 fd4b 	bl	8016210 <ip4_frag>
 801577a:	4603      	mov	r3, r0
 801577c:	e006      	b.n	801578c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015780:	695b      	ldr	r3, [r3, #20]
 8015782:	687a      	ldr	r2, [r7, #4]
 8015784:	68f9      	ldr	r1, [r7, #12]
 8015786:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015788:	4798      	blx	r3
 801578a:	4603      	mov	r3, r0
}
 801578c:	4618      	mov	r0, r3
 801578e:	3720      	adds	r7, #32
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}
 8015794:	0801a954 	.word	0x0801a954
 8015798:	0801a988 	.word	0x0801a988
 801579c:	0801a994 	.word	0x0801a994
 80157a0:	0801a9bc 	.word	0x0801a9bc
 80157a4:	20010396 	.word	0x20010396
 80157a8:	0803ad88 	.word	0x0803ad88

080157ac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80157ac:	b480      	push	{r7}
 80157ae:	b085      	sub	sp, #20
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
 80157b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157c0:	d002      	beq.n	80157c8 <ip4_addr_isbroadcast_u32+0x1c>
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d101      	bne.n	80157cc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80157c8:	2301      	movs	r3, #1
 80157ca:	e02a      	b.n	8015822 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80157d2:	f003 0302 	and.w	r3, r3, #2
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d101      	bne.n	80157de <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80157da:	2300      	movs	r3, #0
 80157dc:	e021      	b.n	8015822 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	3304      	adds	r3, #4
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	687a      	ldr	r2, [r7, #4]
 80157e6:	429a      	cmp	r2, r3
 80157e8:	d101      	bne.n	80157ee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80157ea:	2300      	movs	r3, #0
 80157ec:	e019      	b.n	8015822 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80157ee:	68fa      	ldr	r2, [r7, #12]
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	3304      	adds	r3, #4
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	405a      	eors	r2, r3
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	3308      	adds	r3, #8
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	4013      	ands	r3, r2
 8015800:	2b00      	cmp	r3, #0
 8015802:	d10d      	bne.n	8015820 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	3308      	adds	r3, #8
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	43da      	mvns	r2, r3
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015810:	683b      	ldr	r3, [r7, #0]
 8015812:	3308      	adds	r3, #8
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015818:	429a      	cmp	r2, r3
 801581a:	d101      	bne.n	8015820 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801581c:	2301      	movs	r3, #1
 801581e:	e000      	b.n	8015822 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015820:	2300      	movs	r3, #0
  }
}
 8015822:	4618      	mov	r0, r3
 8015824:	3714      	adds	r7, #20
 8015826:	46bd      	mov	sp, r7
 8015828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582c:	4770      	bx	lr
	...

08015830 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b084      	sub	sp, #16
 8015834:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015836:	2300      	movs	r3, #0
 8015838:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801583a:	4b12      	ldr	r3, [pc, #72]	; (8015884 <ip_reass_tmr+0x54>)
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015840:	e018      	b.n	8015874 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	7fdb      	ldrb	r3, [r3, #31]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d00b      	beq.n	8015862 <ip_reass_tmr+0x32>
      r->timer--;
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	7fdb      	ldrb	r3, [r3, #31]
 801584e:	3b01      	subs	r3, #1
 8015850:	b2da      	uxtb	r2, r3
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015856:	68fb      	ldr	r3, [r7, #12]
 8015858:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	60fb      	str	r3, [r7, #12]
 8015860:	e008      	b.n	8015874 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801586c:	68b9      	ldr	r1, [r7, #8]
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f000 f80a 	bl	8015888 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d1e3      	bne.n	8015842 <ip_reass_tmr+0x12>
    }
  }
}
 801587a:	bf00      	nop
 801587c:	3710      	adds	r7, #16
 801587e:	46bd      	mov	sp, r7
 8015880:	bd80      	pop	{r7, pc}
 8015882:	bf00      	nop
 8015884:	20010398 	.word	0x20010398

08015888 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015888:	b580      	push	{r7, lr}
 801588a:	b088      	sub	sp, #32
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
 8015890:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015892:	2300      	movs	r3, #0
 8015894:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015896:	683a      	ldr	r2, [r7, #0]
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	429a      	cmp	r2, r3
 801589c:	d105      	bne.n	80158aa <ip_reass_free_complete_datagram+0x22>
 801589e:	4b45      	ldr	r3, [pc, #276]	; (80159b4 <ip_reass_free_complete_datagram+0x12c>)
 80158a0:	22ab      	movs	r2, #171	; 0xab
 80158a2:	4945      	ldr	r1, [pc, #276]	; (80159b8 <ip_reass_free_complete_datagram+0x130>)
 80158a4:	4845      	ldr	r0, [pc, #276]	; (80159bc <ip_reass_free_complete_datagram+0x134>)
 80158a6:	f001 f81f 	bl	80168e8 <iprintf>
  if (prev != NULL) {
 80158aa:	683b      	ldr	r3, [r7, #0]
 80158ac:	2b00      	cmp	r3, #0
 80158ae:	d00a      	beq.n	80158c6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80158b0:	683b      	ldr	r3, [r7, #0]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	687a      	ldr	r2, [r7, #4]
 80158b6:	429a      	cmp	r2, r3
 80158b8:	d005      	beq.n	80158c6 <ip_reass_free_complete_datagram+0x3e>
 80158ba:	4b3e      	ldr	r3, [pc, #248]	; (80159b4 <ip_reass_free_complete_datagram+0x12c>)
 80158bc:	22ad      	movs	r2, #173	; 0xad
 80158be:	4940      	ldr	r1, [pc, #256]	; (80159c0 <ip_reass_free_complete_datagram+0x138>)
 80158c0:	483e      	ldr	r0, [pc, #248]	; (80159bc <ip_reass_free_complete_datagram+0x134>)
 80158c2:	f001 f811 	bl	80168e8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	685b      	ldr	r3, [r3, #4]
 80158ca:	685b      	ldr	r3, [r3, #4]
 80158cc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80158ce:	697b      	ldr	r3, [r7, #20]
 80158d0:	889b      	ldrh	r3, [r3, #4]
 80158d2:	b29b      	uxth	r3, r3
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d12a      	bne.n	801592e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	685b      	ldr	r3, [r3, #4]
 80158dc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	681a      	ldr	r2, [r3, #0]
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80158e6:	69bb      	ldr	r3, [r7, #24]
 80158e8:	6858      	ldr	r0, [r3, #4]
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	3308      	adds	r3, #8
 80158ee:	2214      	movs	r2, #20
 80158f0:	4619      	mov	r1, r3
 80158f2:	f000 ffcc 	bl	801688e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80158f6:	2101      	movs	r1, #1
 80158f8:	69b8      	ldr	r0, [r7, #24]
 80158fa:	f7ff fc2b 	bl	8015154 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80158fe:	69b8      	ldr	r0, [r7, #24]
 8015900:	f7f5 fc6c 	bl	800b1dc <pbuf_clen>
 8015904:	4603      	mov	r3, r0
 8015906:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015908:	8bfa      	ldrh	r2, [r7, #30]
 801590a:	8a7b      	ldrh	r3, [r7, #18]
 801590c:	4413      	add	r3, r2
 801590e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015912:	db05      	blt.n	8015920 <ip_reass_free_complete_datagram+0x98>
 8015914:	4b27      	ldr	r3, [pc, #156]	; (80159b4 <ip_reass_free_complete_datagram+0x12c>)
 8015916:	22bc      	movs	r2, #188	; 0xbc
 8015918:	492a      	ldr	r1, [pc, #168]	; (80159c4 <ip_reass_free_complete_datagram+0x13c>)
 801591a:	4828      	ldr	r0, [pc, #160]	; (80159bc <ip_reass_free_complete_datagram+0x134>)
 801591c:	f000 ffe4 	bl	80168e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015920:	8bfa      	ldrh	r2, [r7, #30]
 8015922:	8a7b      	ldrh	r3, [r7, #18]
 8015924:	4413      	add	r3, r2
 8015926:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015928:	69b8      	ldr	r0, [r7, #24]
 801592a:	f7f5 fbc9 	bl	800b0c0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	685b      	ldr	r3, [r3, #4]
 8015932:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015934:	e01f      	b.n	8015976 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015936:	69bb      	ldr	r3, [r7, #24]
 8015938:	685b      	ldr	r3, [r3, #4]
 801593a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801593c:	69bb      	ldr	r3, [r7, #24]
 801593e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015940:	697b      	ldr	r3, [r7, #20]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015946:	68f8      	ldr	r0, [r7, #12]
 8015948:	f7f5 fc48 	bl	800b1dc <pbuf_clen>
 801594c:	4603      	mov	r3, r0
 801594e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015950:	8bfa      	ldrh	r2, [r7, #30]
 8015952:	8a7b      	ldrh	r3, [r7, #18]
 8015954:	4413      	add	r3, r2
 8015956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801595a:	db05      	blt.n	8015968 <ip_reass_free_complete_datagram+0xe0>
 801595c:	4b15      	ldr	r3, [pc, #84]	; (80159b4 <ip_reass_free_complete_datagram+0x12c>)
 801595e:	22cc      	movs	r2, #204	; 0xcc
 8015960:	4918      	ldr	r1, [pc, #96]	; (80159c4 <ip_reass_free_complete_datagram+0x13c>)
 8015962:	4816      	ldr	r0, [pc, #88]	; (80159bc <ip_reass_free_complete_datagram+0x134>)
 8015964:	f000 ffc0 	bl	80168e8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015968:	8bfa      	ldrh	r2, [r7, #30]
 801596a:	8a7b      	ldrh	r3, [r7, #18]
 801596c:	4413      	add	r3, r2
 801596e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015970:	68f8      	ldr	r0, [r7, #12]
 8015972:	f7f5 fba5 	bl	800b0c0 <pbuf_free>
  while (p != NULL) {
 8015976:	69bb      	ldr	r3, [r7, #24]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d1dc      	bne.n	8015936 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801597c:	6839      	ldr	r1, [r7, #0]
 801597e:	6878      	ldr	r0, [r7, #4]
 8015980:	f000 f8c2 	bl	8015b08 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015984:	4b10      	ldr	r3, [pc, #64]	; (80159c8 <ip_reass_free_complete_datagram+0x140>)
 8015986:	881b      	ldrh	r3, [r3, #0]
 8015988:	8bfa      	ldrh	r2, [r7, #30]
 801598a:	429a      	cmp	r2, r3
 801598c:	d905      	bls.n	801599a <ip_reass_free_complete_datagram+0x112>
 801598e:	4b09      	ldr	r3, [pc, #36]	; (80159b4 <ip_reass_free_complete_datagram+0x12c>)
 8015990:	22d2      	movs	r2, #210	; 0xd2
 8015992:	490e      	ldr	r1, [pc, #56]	; (80159cc <ip_reass_free_complete_datagram+0x144>)
 8015994:	4809      	ldr	r0, [pc, #36]	; (80159bc <ip_reass_free_complete_datagram+0x134>)
 8015996:	f000 ffa7 	bl	80168e8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801599a:	4b0b      	ldr	r3, [pc, #44]	; (80159c8 <ip_reass_free_complete_datagram+0x140>)
 801599c:	881a      	ldrh	r2, [r3, #0]
 801599e:	8bfb      	ldrh	r3, [r7, #30]
 80159a0:	1ad3      	subs	r3, r2, r3
 80159a2:	b29a      	uxth	r2, r3
 80159a4:	4b08      	ldr	r3, [pc, #32]	; (80159c8 <ip_reass_free_complete_datagram+0x140>)
 80159a6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80159a8:	8bfb      	ldrh	r3, [r7, #30]
}
 80159aa:	4618      	mov	r0, r3
 80159ac:	3720      	adds	r7, #32
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}
 80159b2:	bf00      	nop
 80159b4:	0801a9ec 	.word	0x0801a9ec
 80159b8:	0801aa28 	.word	0x0801aa28
 80159bc:	0801aa34 	.word	0x0801aa34
 80159c0:	0801aa5c 	.word	0x0801aa5c
 80159c4:	0801aa70 	.word	0x0801aa70
 80159c8:	2001039c 	.word	0x2001039c
 80159cc:	0801aa90 	.word	0x0801aa90

080159d0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b08a      	sub	sp, #40	; 0x28
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
 80159d8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80159da:	2300      	movs	r3, #0
 80159dc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80159de:	2300      	movs	r3, #0
 80159e0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80159e2:	2300      	movs	r3, #0
 80159e4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80159e6:	2300      	movs	r3, #0
 80159e8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80159ea:	2300      	movs	r3, #0
 80159ec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80159ee:	4b28      	ldr	r3, [pc, #160]	; (8015a90 <ip_reass_remove_oldest_datagram+0xc0>)
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80159f4:	e030      	b.n	8015a58 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80159f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159f8:	695a      	ldr	r2, [r3, #20]
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	68db      	ldr	r3, [r3, #12]
 80159fe:	429a      	cmp	r2, r3
 8015a00:	d10c      	bne.n	8015a1c <ip_reass_remove_oldest_datagram+0x4c>
 8015a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a04:	699a      	ldr	r2, [r3, #24]
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	691b      	ldr	r3, [r3, #16]
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d106      	bne.n	8015a1c <ip_reass_remove_oldest_datagram+0x4c>
 8015a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a10:	899a      	ldrh	r2, [r3, #12]
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	889b      	ldrh	r3, [r3, #4]
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	d014      	beq.n	8015a46 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015a1c:	693b      	ldr	r3, [r7, #16]
 8015a1e:	3301      	adds	r3, #1
 8015a20:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015a22:	6a3b      	ldr	r3, [r7, #32]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d104      	bne.n	8015a32 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a2a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a2c:	69fb      	ldr	r3, [r7, #28]
 8015a2e:	61bb      	str	r3, [r7, #24]
 8015a30:	e009      	b.n	8015a46 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a34:	7fda      	ldrb	r2, [r3, #31]
 8015a36:	6a3b      	ldr	r3, [r7, #32]
 8015a38:	7fdb      	ldrb	r3, [r3, #31]
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d803      	bhi.n	8015a46 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a40:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015a42:	69fb      	ldr	r3, [r7, #28]
 8015a44:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d001      	beq.n	8015a52 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a50:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d1cb      	bne.n	80159f6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015a5e:	6a3b      	ldr	r3, [r7, #32]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d008      	beq.n	8015a76 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015a64:	69b9      	ldr	r1, [r7, #24]
 8015a66:	6a38      	ldr	r0, [r7, #32]
 8015a68:	f7ff ff0e 	bl	8015888 <ip_reass_free_complete_datagram>
 8015a6c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015a6e:	697a      	ldr	r2, [r7, #20]
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	4413      	add	r3, r2
 8015a74:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015a76:	697a      	ldr	r2, [r7, #20]
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	429a      	cmp	r2, r3
 8015a7c:	da02      	bge.n	8015a84 <ip_reass_remove_oldest_datagram+0xb4>
 8015a7e:	693b      	ldr	r3, [r7, #16]
 8015a80:	2b01      	cmp	r3, #1
 8015a82:	dcac      	bgt.n	80159de <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015a84:	697b      	ldr	r3, [r7, #20]
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	3728      	adds	r7, #40	; 0x28
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}
 8015a8e:	bf00      	nop
 8015a90:	20010398 	.word	0x20010398

08015a94 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b084      	sub	sp, #16
 8015a98:	af00      	add	r7, sp, #0
 8015a9a:	6078      	str	r0, [r7, #4]
 8015a9c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015a9e:	2004      	movs	r0, #4
 8015aa0:	f7f4 fc10 	bl	800a2c4 <memp_malloc>
 8015aa4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d110      	bne.n	8015ace <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015aac:	6839      	ldr	r1, [r7, #0]
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f7ff ff8e 	bl	80159d0 <ip_reass_remove_oldest_datagram>
 8015ab4:	4602      	mov	r2, r0
 8015ab6:	683b      	ldr	r3, [r7, #0]
 8015ab8:	4293      	cmp	r3, r2
 8015aba:	dc03      	bgt.n	8015ac4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015abc:	2004      	movs	r0, #4
 8015abe:	f7f4 fc01 	bl	800a2c4 <memp_malloc>
 8015ac2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d101      	bne.n	8015ace <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015aca:	2300      	movs	r3, #0
 8015acc:	e016      	b.n	8015afc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015ace:	2220      	movs	r2, #32
 8015ad0:	2100      	movs	r1, #0
 8015ad2:	68f8      	ldr	r0, [r7, #12]
 8015ad4:	f000 feff 	bl	80168d6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	220f      	movs	r2, #15
 8015adc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015ade:	4b09      	ldr	r3, [pc, #36]	; (8015b04 <ip_reass_enqueue_new_datagram+0x70>)
 8015ae0:	681a      	ldr	r2, [r3, #0]
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015ae6:	4a07      	ldr	r2, [pc, #28]	; (8015b04 <ip_reass_enqueue_new_datagram+0x70>)
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	3308      	adds	r3, #8
 8015af0:	2214      	movs	r2, #20
 8015af2:	6879      	ldr	r1, [r7, #4]
 8015af4:	4618      	mov	r0, r3
 8015af6:	f000 feca 	bl	801688e <memcpy>
  return ipr;
 8015afa:	68fb      	ldr	r3, [r7, #12]
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3710      	adds	r7, #16
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	20010398 	.word	0x20010398

08015b08 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b082      	sub	sp, #8
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
 8015b10:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015b12:	4b10      	ldr	r3, [pc, #64]	; (8015b54 <ip_reass_dequeue_datagram+0x4c>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	687a      	ldr	r2, [r7, #4]
 8015b18:	429a      	cmp	r2, r3
 8015b1a:	d104      	bne.n	8015b26 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	4a0c      	ldr	r2, [pc, #48]	; (8015b54 <ip_reass_dequeue_datagram+0x4c>)
 8015b22:	6013      	str	r3, [r2, #0]
 8015b24:	e00d      	b.n	8015b42 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d106      	bne.n	8015b3a <ip_reass_dequeue_datagram+0x32>
 8015b2c:	4b0a      	ldr	r3, [pc, #40]	; (8015b58 <ip_reass_dequeue_datagram+0x50>)
 8015b2e:	f240 1245 	movw	r2, #325	; 0x145
 8015b32:	490a      	ldr	r1, [pc, #40]	; (8015b5c <ip_reass_dequeue_datagram+0x54>)
 8015b34:	480a      	ldr	r0, [pc, #40]	; (8015b60 <ip_reass_dequeue_datagram+0x58>)
 8015b36:	f000 fed7 	bl	80168e8 <iprintf>
    prev->next = ipr->next;
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681a      	ldr	r2, [r3, #0]
 8015b3e:	683b      	ldr	r3, [r7, #0]
 8015b40:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015b42:	6879      	ldr	r1, [r7, #4]
 8015b44:	2004      	movs	r0, #4
 8015b46:	f7f4 fc0f 	bl	800a368 <memp_free>
}
 8015b4a:	bf00      	nop
 8015b4c:	3708      	adds	r7, #8
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	bd80      	pop	{r7, pc}
 8015b52:	bf00      	nop
 8015b54:	20010398 	.word	0x20010398
 8015b58:	0801a9ec 	.word	0x0801a9ec
 8015b5c:	0801aab4 	.word	0x0801aab4
 8015b60:	0801aa34 	.word	0x0801aa34

08015b64 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b08c      	sub	sp, #48	; 0x30
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	60f8      	str	r0, [r7, #12]
 8015b6c:	60b9      	str	r1, [r7, #8]
 8015b6e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015b70:	2300      	movs	r3, #0
 8015b72:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015b74:	2301      	movs	r3, #1
 8015b76:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015b78:	68bb      	ldr	r3, [r7, #8]
 8015b7a:	685b      	ldr	r3, [r3, #4]
 8015b7c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015b7e:	69fb      	ldr	r3, [r7, #28]
 8015b80:	885b      	ldrh	r3, [r3, #2]
 8015b82:	b29b      	uxth	r3, r3
 8015b84:	4618      	mov	r0, r3
 8015b86:	f7f3 feb1 	bl	80098ec <lwip_htons>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015b8e:	69fb      	ldr	r3, [r7, #28]
 8015b90:	781b      	ldrb	r3, [r3, #0]
 8015b92:	f003 030f 	and.w	r3, r3, #15
 8015b96:	b2db      	uxtb	r3, r3
 8015b98:	009b      	lsls	r3, r3, #2
 8015b9a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015b9c:	7e7b      	ldrb	r3, [r7, #25]
 8015b9e:	b29b      	uxth	r3, r3
 8015ba0:	8b7a      	ldrh	r2, [r7, #26]
 8015ba2:	429a      	cmp	r2, r3
 8015ba4:	d202      	bcs.n	8015bac <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8015baa:	e135      	b.n	8015e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015bac:	7e7b      	ldrb	r3, [r7, #25]
 8015bae:	b29b      	uxth	r3, r3
 8015bb0:	8b7a      	ldrh	r2, [r7, #26]
 8015bb2:	1ad3      	subs	r3, r2, r3
 8015bb4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015bb6:	69fb      	ldr	r3, [r7, #28]
 8015bb8:	88db      	ldrh	r3, [r3, #6]
 8015bba:	b29b      	uxth	r3, r3
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	f7f3 fe95 	bl	80098ec <lwip_htons>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015bc8:	b29b      	uxth	r3, r3
 8015bca:	00db      	lsls	r3, r3, #3
 8015bcc:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015bce:	68bb      	ldr	r3, [r7, #8]
 8015bd0:	685b      	ldr	r3, [r3, #4]
 8015bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	701a      	strb	r2, [r3, #0]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	705a      	strb	r2, [r3, #1]
 8015bde:	2200      	movs	r2, #0
 8015be0:	709a      	strb	r2, [r3, #2]
 8015be2:	2200      	movs	r2, #0
 8015be4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015be8:	8afa      	ldrh	r2, [r7, #22]
 8015bea:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015bec:	8afa      	ldrh	r2, [r7, #22]
 8015bee:	8b7b      	ldrh	r3, [r7, #26]
 8015bf0:	4413      	add	r3, r2
 8015bf2:	b29a      	uxth	r2, r3
 8015bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bf6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bfa:	88db      	ldrh	r3, [r3, #6]
 8015bfc:	b29b      	uxth	r3, r3
 8015bfe:	8afa      	ldrh	r2, [r7, #22]
 8015c00:	429a      	cmp	r2, r3
 8015c02:	d902      	bls.n	8015c0a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c04:	f04f 33ff 	mov.w	r3, #4294967295
 8015c08:	e106      	b.n	8015e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	685b      	ldr	r3, [r3, #4]
 8015c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8015c10:	e068      	b.n	8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c14:	685b      	ldr	r3, [r3, #4]
 8015c16:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c1a:	889b      	ldrh	r3, [r3, #4]
 8015c1c:	b29a      	uxth	r2, r3
 8015c1e:	693b      	ldr	r3, [r7, #16]
 8015c20:	889b      	ldrh	r3, [r3, #4]
 8015c22:	b29b      	uxth	r3, r3
 8015c24:	429a      	cmp	r2, r3
 8015c26:	d235      	bcs.n	8015c94 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c2c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d020      	beq.n	8015c76 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c36:	889b      	ldrh	r3, [r3, #4]
 8015c38:	b29a      	uxth	r2, r3
 8015c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c3c:	88db      	ldrh	r3, [r3, #6]
 8015c3e:	b29b      	uxth	r3, r3
 8015c40:	429a      	cmp	r2, r3
 8015c42:	d307      	bcc.n	8015c54 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c46:	88db      	ldrh	r3, [r3, #6]
 8015c48:	b29a      	uxth	r2, r3
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	889b      	ldrh	r3, [r3, #4]
 8015c4e:	b29b      	uxth	r3, r3
 8015c50:	429a      	cmp	r2, r3
 8015c52:	d902      	bls.n	8015c5a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c54:	f04f 33ff 	mov.w	r3, #4294967295
 8015c58:	e0de      	b.n	8015e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c5c:	68ba      	ldr	r2, [r7, #8]
 8015c5e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c62:	88db      	ldrh	r3, [r3, #6]
 8015c64:	b29a      	uxth	r2, r3
 8015c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c68:	889b      	ldrh	r3, [r3, #4]
 8015c6a:	b29b      	uxth	r3, r3
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d03d      	beq.n	8015cec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015c70:	2300      	movs	r3, #0
 8015c72:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015c74:	e03a      	b.n	8015cec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c78:	88db      	ldrh	r3, [r3, #6]
 8015c7a:	b29a      	uxth	r2, r3
 8015c7c:	693b      	ldr	r3, [r7, #16]
 8015c7e:	889b      	ldrh	r3, [r3, #4]
 8015c80:	b29b      	uxth	r3, r3
 8015c82:	429a      	cmp	r2, r3
 8015c84:	d902      	bls.n	8015c8c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015c86:	f04f 33ff 	mov.w	r3, #4294967295
 8015c8a:	e0c5      	b.n	8015e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	68ba      	ldr	r2, [r7, #8]
 8015c90:	605a      	str	r2, [r3, #4]
      break;
 8015c92:	e02b      	b.n	8015cec <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c96:	889b      	ldrh	r3, [r3, #4]
 8015c98:	b29a      	uxth	r2, r3
 8015c9a:	693b      	ldr	r3, [r7, #16]
 8015c9c:	889b      	ldrh	r3, [r3, #4]
 8015c9e:	b29b      	uxth	r3, r3
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d102      	bne.n	8015caa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ca8:	e0b6      	b.n	8015e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cac:	889b      	ldrh	r3, [r3, #4]
 8015cae:	b29a      	uxth	r2, r3
 8015cb0:	693b      	ldr	r3, [r7, #16]
 8015cb2:	88db      	ldrh	r3, [r3, #6]
 8015cb4:	b29b      	uxth	r3, r3
 8015cb6:	429a      	cmp	r2, r3
 8015cb8:	d202      	bcs.n	8015cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015cba:	f04f 33ff 	mov.w	r3, #4294967295
 8015cbe:	e0ab      	b.n	8015e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d009      	beq.n	8015cda <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc8:	88db      	ldrh	r3, [r3, #6]
 8015cca:	b29a      	uxth	r2, r3
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	889b      	ldrh	r3, [r3, #4]
 8015cd0:	b29b      	uxth	r3, r3
 8015cd2:	429a      	cmp	r2, r3
 8015cd4:	d001      	beq.n	8015cda <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015cda:	693b      	ldr	r3, [r7, #16]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015ce0:	693b      	ldr	r3, [r7, #16]
 8015ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d193      	bne.n	8015c12 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015cea:	e000      	b.n	8015cee <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015cec:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d12d      	bne.n	8015d50 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d01c      	beq.n	8015d34 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cfc:	88db      	ldrh	r3, [r3, #6]
 8015cfe:	b29a      	uxth	r2, r3
 8015d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d02:	889b      	ldrh	r3, [r3, #4]
 8015d04:	b29b      	uxth	r3, r3
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d906      	bls.n	8015d18 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015d0a:	4b45      	ldr	r3, [pc, #276]	; (8015e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d0c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015d10:	4944      	ldr	r1, [pc, #272]	; (8015e24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015d12:	4845      	ldr	r0, [pc, #276]	; (8015e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d14:	f000 fde8 	bl	80168e8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d1a:	68ba      	ldr	r2, [r7, #8]
 8015d1c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d20:	88db      	ldrh	r3, [r3, #6]
 8015d22:	b29a      	uxth	r2, r3
 8015d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d26:	889b      	ldrh	r3, [r3, #4]
 8015d28:	b29b      	uxth	r3, r3
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	d010      	beq.n	8015d50 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015d2e:	2300      	movs	r3, #0
 8015d30:	623b      	str	r3, [r7, #32]
 8015d32:	e00d      	b.n	8015d50 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	685b      	ldr	r3, [r3, #4]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d006      	beq.n	8015d4a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015d3c:	4b38      	ldr	r3, [pc, #224]	; (8015e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015d3e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8015d42:	493a      	ldr	r1, [pc, #232]	; (8015e2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015d44:	4838      	ldr	r0, [pc, #224]	; (8015e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015d46:	f000 fdcf 	bl	80168e8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	68ba      	ldr	r2, [r7, #8]
 8015d4e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d105      	bne.n	8015d62 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	7f9b      	ldrb	r3, [r3, #30]
 8015d5a:	f003 0301 	and.w	r3, r3, #1
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d059      	beq.n	8015e16 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015d62:	6a3b      	ldr	r3, [r7, #32]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d04f      	beq.n	8015e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	685b      	ldr	r3, [r3, #4]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d006      	beq.n	8015d7e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	685b      	ldr	r3, [r3, #4]
 8015d74:	685b      	ldr	r3, [r3, #4]
 8015d76:	889b      	ldrh	r3, [r3, #4]
 8015d78:	b29b      	uxth	r3, r3
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d002      	beq.n	8015d84 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	623b      	str	r3, [r7, #32]
 8015d82:	e041      	b.n	8015e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d86:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015d8e:	e012      	b.n	8015db6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d92:	685b      	ldr	r3, [r3, #4]
 8015d94:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d98:	88db      	ldrh	r3, [r3, #6]
 8015d9a:	b29a      	uxth	r2, r3
 8015d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d9e:	889b      	ldrh	r3, [r3, #4]
 8015da0:	b29b      	uxth	r3, r3
 8015da2:	429a      	cmp	r2, r3
 8015da4:	d002      	beq.n	8015dac <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015da6:	2300      	movs	r3, #0
 8015da8:	623b      	str	r3, [r7, #32]
            break;
 8015daa:	e007      	b.n	8015dbc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dae:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d1e9      	bne.n	8015d90 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015dbc:	6a3b      	ldr	r3, [r7, #32]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d022      	beq.n	8015e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	685b      	ldr	r3, [r3, #4]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d106      	bne.n	8015dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015dca:	4b15      	ldr	r3, [pc, #84]	; (8015e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015dcc:	f240 12df 	movw	r2, #479	; 0x1df
 8015dd0:	4917      	ldr	r1, [pc, #92]	; (8015e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015dd2:	4815      	ldr	r0, [pc, #84]	; (8015e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015dd4:	f000 fd88 	bl	80168e8 <iprintf>
          LWIP_ASSERT("sanity check",
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	685b      	ldr	r3, [r3, #4]
 8015ddc:	685b      	ldr	r3, [r3, #4]
 8015dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015de0:	429a      	cmp	r2, r3
 8015de2:	d106      	bne.n	8015df2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015de4:	4b0e      	ldr	r3, [pc, #56]	; (8015e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015de6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015dea:	4911      	ldr	r1, [pc, #68]	; (8015e30 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015dec:	480e      	ldr	r0, [pc, #56]	; (8015e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015dee:	f000 fd7b 	bl	80168e8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d006      	beq.n	8015e08 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015dfa:	4b09      	ldr	r3, [pc, #36]	; (8015e20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015dfc:	f240 12e3 	movw	r2, #483	; 0x1e3
 8015e00:	490c      	ldr	r1, [pc, #48]	; (8015e34 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015e02:	4809      	ldr	r0, [pc, #36]	; (8015e28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015e04:	f000 fd70 	bl	80168e8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015e08:	6a3b      	ldr	r3, [r7, #32]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	bf14      	ite	ne
 8015e0e:	2301      	movne	r3, #1
 8015e10:	2300      	moveq	r3, #0
 8015e12:	b2db      	uxtb	r3, r3
 8015e14:	e000      	b.n	8015e18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015e16:	2300      	movs	r3, #0
}
 8015e18:	4618      	mov	r0, r3
 8015e1a:	3730      	adds	r7, #48	; 0x30
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	bd80      	pop	{r7, pc}
 8015e20:	0801a9ec 	.word	0x0801a9ec
 8015e24:	0801aad0 	.word	0x0801aad0
 8015e28:	0801aa34 	.word	0x0801aa34
 8015e2c:	0801aaf0 	.word	0x0801aaf0
 8015e30:	0801ab28 	.word	0x0801ab28
 8015e34:	0801ab38 	.word	0x0801ab38

08015e38 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b08e      	sub	sp, #56	; 0x38
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	685b      	ldr	r3, [r3, #4]
 8015e44:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	f003 030f 	and.w	r3, r3, #15
 8015e4e:	b2db      	uxtb	r3, r3
 8015e50:	009b      	lsls	r3, r3, #2
 8015e52:	b2db      	uxtb	r3, r3
 8015e54:	2b14      	cmp	r3, #20
 8015e56:	f040 8167 	bne.w	8016128 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e5c:	88db      	ldrh	r3, [r3, #6]
 8015e5e:	b29b      	uxth	r3, r3
 8015e60:	4618      	mov	r0, r3
 8015e62:	f7f3 fd43 	bl	80098ec <lwip_htons>
 8015e66:	4603      	mov	r3, r0
 8015e68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015e6c:	b29b      	uxth	r3, r3
 8015e6e:	00db      	lsls	r3, r3, #3
 8015e70:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e74:	885b      	ldrh	r3, [r3, #2]
 8015e76:	b29b      	uxth	r3, r3
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f7f3 fd37 	bl	80098ec <lwip_htons>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e84:	781b      	ldrb	r3, [r3, #0]
 8015e86:	f003 030f 	and.w	r3, r3, #15
 8015e8a:	b2db      	uxtb	r3, r3
 8015e8c:	009b      	lsls	r3, r3, #2
 8015e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015e92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015e96:	b29b      	uxth	r3, r3
 8015e98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015e9a:	429a      	cmp	r2, r3
 8015e9c:	f0c0 8146 	bcc.w	801612c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015ea4:	b29b      	uxth	r3, r3
 8015ea6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ea8:	1ad3      	subs	r3, r2, r3
 8015eaa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015eac:	6878      	ldr	r0, [r7, #4]
 8015eae:	f7f5 f995 	bl	800b1dc <pbuf_clen>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015eb6:	4ba3      	ldr	r3, [pc, #652]	; (8016144 <ip4_reass+0x30c>)
 8015eb8:	881b      	ldrh	r3, [r3, #0]
 8015eba:	461a      	mov	r2, r3
 8015ebc:	8c3b      	ldrh	r3, [r7, #32]
 8015ebe:	4413      	add	r3, r2
 8015ec0:	2b0a      	cmp	r3, #10
 8015ec2:	dd10      	ble.n	8015ee6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015ec4:	8c3b      	ldrh	r3, [r7, #32]
 8015ec6:	4619      	mov	r1, r3
 8015ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015eca:	f7ff fd81 	bl	80159d0 <ip_reass_remove_oldest_datagram>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	f000 812d 	beq.w	8016130 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015ed6:	4b9b      	ldr	r3, [pc, #620]	; (8016144 <ip4_reass+0x30c>)
 8015ed8:	881b      	ldrh	r3, [r3, #0]
 8015eda:	461a      	mov	r2, r3
 8015edc:	8c3b      	ldrh	r3, [r7, #32]
 8015ede:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015ee0:	2b0a      	cmp	r3, #10
 8015ee2:	f300 8125 	bgt.w	8016130 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015ee6:	4b98      	ldr	r3, [pc, #608]	; (8016148 <ip4_reass+0x310>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	633b      	str	r3, [r7, #48]	; 0x30
 8015eec:	e015      	b.n	8015f1a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ef0:	695a      	ldr	r2, [r3, #20]
 8015ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef4:	68db      	ldr	r3, [r3, #12]
 8015ef6:	429a      	cmp	r2, r3
 8015ef8:	d10c      	bne.n	8015f14 <ip4_reass+0xdc>
 8015efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015efc:	699a      	ldr	r2, [r3, #24]
 8015efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f00:	691b      	ldr	r3, [r3, #16]
 8015f02:	429a      	cmp	r2, r3
 8015f04:	d106      	bne.n	8015f14 <ip4_reass+0xdc>
 8015f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f08:	899a      	ldrh	r2, [r3, #12]
 8015f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f0c:	889b      	ldrh	r3, [r3, #4]
 8015f0e:	b29b      	uxth	r3, r3
 8015f10:	429a      	cmp	r2, r3
 8015f12:	d006      	beq.n	8015f22 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	633b      	str	r3, [r7, #48]	; 0x30
 8015f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d1e6      	bne.n	8015eee <ip4_reass+0xb6>
 8015f20:	e000      	b.n	8015f24 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015f22:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d109      	bne.n	8015f3e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015f2a:	8c3b      	ldrh	r3, [r7, #32]
 8015f2c:	4619      	mov	r1, r3
 8015f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015f30:	f7ff fdb0 	bl	8015a94 <ip_reass_enqueue_new_datagram>
 8015f34:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d11c      	bne.n	8015f76 <ip4_reass+0x13e>
      goto nullreturn;
 8015f3c:	e0f9      	b.n	8016132 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f40:	88db      	ldrh	r3, [r3, #6]
 8015f42:	b29b      	uxth	r3, r3
 8015f44:	4618      	mov	r0, r3
 8015f46:	f7f3 fcd1 	bl	80098ec <lwip_htons>
 8015f4a:	4603      	mov	r3, r0
 8015f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d110      	bne.n	8015f76 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f56:	89db      	ldrh	r3, [r3, #14]
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7f3 fcc7 	bl	80098ec <lwip_htons>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d006      	beq.n	8015f76 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f6a:	3308      	adds	r3, #8
 8015f6c:	2214      	movs	r2, #20
 8015f6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015f70:	4618      	mov	r0, r3
 8015f72:	f000 fc8c 	bl	801688e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f78:	88db      	ldrh	r3, [r3, #6]
 8015f7a:	b29b      	uxth	r3, r3
 8015f7c:	f003 0320 	and.w	r3, r3, #32
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	bf0c      	ite	eq
 8015f84:	2301      	moveq	r3, #1
 8015f86:	2300      	movne	r3, #0
 8015f88:	b2db      	uxtb	r3, r3
 8015f8a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015f8c:	69fb      	ldr	r3, [r7, #28]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d00e      	beq.n	8015fb0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015f92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015f94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f96:	4413      	add	r3, r2
 8015f98:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015f9a:	8b7a      	ldrh	r2, [r7, #26]
 8015f9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	f0c0 80a0 	bcc.w	80160e4 <ip4_reass+0x2ac>
 8015fa4:	8b7b      	ldrh	r3, [r7, #26]
 8015fa6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015faa:	4293      	cmp	r3, r2
 8015fac:	f200 809a 	bhi.w	80160e4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015fb0:	69fa      	ldr	r2, [r7, #28]
 8015fb2:	6879      	ldr	r1, [r7, #4]
 8015fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fb6:	f7ff fdd5 	bl	8015b64 <ip_reass_chain_frag_into_datagram_and_validate>
 8015fba:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015fbc:	697b      	ldr	r3, [r7, #20]
 8015fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fc2:	f000 8091 	beq.w	80160e8 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015fc6:	4b5f      	ldr	r3, [pc, #380]	; (8016144 <ip4_reass+0x30c>)
 8015fc8:	881a      	ldrh	r2, [r3, #0]
 8015fca:	8c3b      	ldrh	r3, [r7, #32]
 8015fcc:	4413      	add	r3, r2
 8015fce:	b29a      	uxth	r2, r3
 8015fd0:	4b5c      	ldr	r3, [pc, #368]	; (8016144 <ip4_reass+0x30c>)
 8015fd2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015fd4:	69fb      	ldr	r3, [r7, #28]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d00d      	beq.n	8015ff6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015fda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015fde:	4413      	add	r3, r2
 8015fe0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fe4:	8a7a      	ldrh	r2, [r7, #18]
 8015fe6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fea:	7f9b      	ldrb	r3, [r3, #30]
 8015fec:	f043 0301 	orr.w	r3, r3, #1
 8015ff0:	b2da      	uxtb	r2, r3
 8015ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ff4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015ff6:	697b      	ldr	r3, [r7, #20]
 8015ff8:	2b01      	cmp	r3, #1
 8015ffa:	d171      	bne.n	80160e0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ffe:	8b9b      	ldrh	r3, [r3, #28]
 8016000:	3314      	adds	r3, #20
 8016002:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016006:	685b      	ldr	r3, [r3, #4]
 8016008:	685b      	ldr	r3, [r3, #4]
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016010:	685b      	ldr	r3, [r3, #4]
 8016012:	685b      	ldr	r3, [r3, #4]
 8016014:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016018:	3308      	adds	r3, #8
 801601a:	2214      	movs	r2, #20
 801601c:	4619      	mov	r1, r3
 801601e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016020:	f000 fc35 	bl	801688e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016024:	8a3b      	ldrh	r3, [r7, #16]
 8016026:	4618      	mov	r0, r3
 8016028:	f7f3 fc60 	bl	80098ec <lwip_htons>
 801602c:	4603      	mov	r3, r0
 801602e:	461a      	mov	r2, r3
 8016030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016032:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016036:	2200      	movs	r2, #0
 8016038:	719a      	strb	r2, [r3, #6]
 801603a:	2200      	movs	r2, #0
 801603c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016040:	2200      	movs	r2, #0
 8016042:	729a      	strb	r2, [r3, #10]
 8016044:	2200      	movs	r2, #0
 8016046:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801604a:	685b      	ldr	r3, [r3, #4]
 801604c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801604e:	e00d      	b.n	801606c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016052:	685b      	ldr	r3, [r3, #4]
 8016054:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016056:	2114      	movs	r1, #20
 8016058:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801605a:	f7f4 ffab 	bl	800afb4 <pbuf_remove_header>
      pbuf_cat(p, r);
 801605e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016060:	6878      	ldr	r0, [r7, #4]
 8016062:	f7f5 f8fb 	bl	800b25c <pbuf_cat>
      r = iprh->next_pbuf;
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801606e:	2b00      	cmp	r3, #0
 8016070:	d1ee      	bne.n	8016050 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016072:	4b35      	ldr	r3, [pc, #212]	; (8016148 <ip4_reass+0x310>)
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016078:	429a      	cmp	r2, r3
 801607a:	d102      	bne.n	8016082 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801607c:	2300      	movs	r3, #0
 801607e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016080:	e010      	b.n	80160a4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016082:	4b31      	ldr	r3, [pc, #196]	; (8016148 <ip4_reass+0x310>)
 8016084:	681b      	ldr	r3, [r3, #0]
 8016086:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016088:	e007      	b.n	801609a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801608a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016090:	429a      	cmp	r2, r3
 8016092:	d006      	beq.n	80160a2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	62fb      	str	r3, [r7, #44]	; 0x2c
 801609a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801609c:	2b00      	cmp	r3, #0
 801609e:	d1f4      	bne.n	801608a <ip4_reass+0x252>
 80160a0:	e000      	b.n	80160a4 <ip4_reass+0x26c>
          break;
 80160a2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80160a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80160a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160a8:	f7ff fd2e 	bl	8015b08 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f7f5 f895 	bl	800b1dc <pbuf_clen>
 80160b2:	4603      	mov	r3, r0
 80160b4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80160b6:	4b23      	ldr	r3, [pc, #140]	; (8016144 <ip4_reass+0x30c>)
 80160b8:	881b      	ldrh	r3, [r3, #0]
 80160ba:	8c3a      	ldrh	r2, [r7, #32]
 80160bc:	429a      	cmp	r2, r3
 80160be:	d906      	bls.n	80160ce <ip4_reass+0x296>
 80160c0:	4b22      	ldr	r3, [pc, #136]	; (801614c <ip4_reass+0x314>)
 80160c2:	f240 229b 	movw	r2, #667	; 0x29b
 80160c6:	4922      	ldr	r1, [pc, #136]	; (8016150 <ip4_reass+0x318>)
 80160c8:	4822      	ldr	r0, [pc, #136]	; (8016154 <ip4_reass+0x31c>)
 80160ca:	f000 fc0d 	bl	80168e8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80160ce:	4b1d      	ldr	r3, [pc, #116]	; (8016144 <ip4_reass+0x30c>)
 80160d0:	881a      	ldrh	r2, [r3, #0]
 80160d2:	8c3b      	ldrh	r3, [r7, #32]
 80160d4:	1ad3      	subs	r3, r2, r3
 80160d6:	b29a      	uxth	r2, r3
 80160d8:	4b1a      	ldr	r3, [pc, #104]	; (8016144 <ip4_reass+0x30c>)
 80160da:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	e02c      	b.n	801613a <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80160e0:	2300      	movs	r3, #0
 80160e2:	e02a      	b.n	801613a <ip4_reass+0x302>

nullreturn_ipr:
 80160e4:	bf00      	nop
 80160e6:	e000      	b.n	80160ea <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80160e8:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80160ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d106      	bne.n	80160fe <ip4_reass+0x2c6>
 80160f0:	4b16      	ldr	r3, [pc, #88]	; (801614c <ip4_reass+0x314>)
 80160f2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80160f6:	4918      	ldr	r1, [pc, #96]	; (8016158 <ip4_reass+0x320>)
 80160f8:	4816      	ldr	r0, [pc, #88]	; (8016154 <ip4_reass+0x31c>)
 80160fa:	f000 fbf5 	bl	80168e8 <iprintf>
  if (ipr->p == NULL) {
 80160fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016100:	685b      	ldr	r3, [r3, #4]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d114      	bne.n	8016130 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016106:	4b10      	ldr	r3, [pc, #64]	; (8016148 <ip4_reass+0x310>)
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801610c:	429a      	cmp	r2, r3
 801610e:	d006      	beq.n	801611e <ip4_reass+0x2e6>
 8016110:	4b0e      	ldr	r3, [pc, #56]	; (801614c <ip4_reass+0x314>)
 8016112:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016116:	4911      	ldr	r1, [pc, #68]	; (801615c <ip4_reass+0x324>)
 8016118:	480e      	ldr	r0, [pc, #56]	; (8016154 <ip4_reass+0x31c>)
 801611a:	f000 fbe5 	bl	80168e8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801611e:	2100      	movs	r1, #0
 8016120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016122:	f7ff fcf1 	bl	8015b08 <ip_reass_dequeue_datagram>
 8016126:	e004      	b.n	8016132 <ip4_reass+0x2fa>
    goto nullreturn;
 8016128:	bf00      	nop
 801612a:	e002      	b.n	8016132 <ip4_reass+0x2fa>
    goto nullreturn;
 801612c:	bf00      	nop
 801612e:	e000      	b.n	8016132 <ip4_reass+0x2fa>
  }

nullreturn:
 8016130:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016132:	6878      	ldr	r0, [r7, #4]
 8016134:	f7f4 ffc4 	bl	800b0c0 <pbuf_free>
  return NULL;
 8016138:	2300      	movs	r3, #0
}
 801613a:	4618      	mov	r0, r3
 801613c:	3738      	adds	r7, #56	; 0x38
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}
 8016142:	bf00      	nop
 8016144:	2001039c 	.word	0x2001039c
 8016148:	20010398 	.word	0x20010398
 801614c:	0801a9ec 	.word	0x0801a9ec
 8016150:	0801ab5c 	.word	0x0801ab5c
 8016154:	0801aa34 	.word	0x0801aa34
 8016158:	0801ab78 	.word	0x0801ab78
 801615c:	0801ab84 	.word	0x0801ab84

08016160 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016160:	b580      	push	{r7, lr}
 8016162:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016164:	2005      	movs	r0, #5
 8016166:	f7f4 f8ad 	bl	800a2c4 <memp_malloc>
 801616a:	4603      	mov	r3, r0
}
 801616c:	4618      	mov	r0, r3
 801616e:	bd80      	pop	{r7, pc}

08016170 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016170:	b580      	push	{r7, lr}
 8016172:	b082      	sub	sp, #8
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	2b00      	cmp	r3, #0
 801617c:	d106      	bne.n	801618c <ip_frag_free_pbuf_custom_ref+0x1c>
 801617e:	4b07      	ldr	r3, [pc, #28]	; (801619c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016180:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016184:	4906      	ldr	r1, [pc, #24]	; (80161a0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016186:	4807      	ldr	r0, [pc, #28]	; (80161a4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016188:	f000 fbae 	bl	80168e8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801618c:	6879      	ldr	r1, [r7, #4]
 801618e:	2005      	movs	r0, #5
 8016190:	f7f4 f8ea 	bl	800a368 <memp_free>
}
 8016194:	bf00      	nop
 8016196:	3708      	adds	r7, #8
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}
 801619c:	0801a9ec 	.word	0x0801a9ec
 80161a0:	0801aba4 	.word	0x0801aba4
 80161a4:	0801aa34 	.word	0x0801aa34

080161a8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b084      	sub	sp, #16
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d106      	bne.n	80161c8 <ipfrag_free_pbuf_custom+0x20>
 80161ba:	4b11      	ldr	r3, [pc, #68]	; (8016200 <ipfrag_free_pbuf_custom+0x58>)
 80161bc:	f240 22ce 	movw	r2, #718	; 0x2ce
 80161c0:	4910      	ldr	r1, [pc, #64]	; (8016204 <ipfrag_free_pbuf_custom+0x5c>)
 80161c2:	4811      	ldr	r0, [pc, #68]	; (8016208 <ipfrag_free_pbuf_custom+0x60>)
 80161c4:	f000 fb90 	bl	80168e8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80161c8:	68fa      	ldr	r2, [r7, #12]
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	429a      	cmp	r2, r3
 80161ce:	d006      	beq.n	80161de <ipfrag_free_pbuf_custom+0x36>
 80161d0:	4b0b      	ldr	r3, [pc, #44]	; (8016200 <ipfrag_free_pbuf_custom+0x58>)
 80161d2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80161d6:	490d      	ldr	r1, [pc, #52]	; (801620c <ipfrag_free_pbuf_custom+0x64>)
 80161d8:	480b      	ldr	r0, [pc, #44]	; (8016208 <ipfrag_free_pbuf_custom+0x60>)
 80161da:	f000 fb85 	bl	80168e8 <iprintf>
  if (pcr->original != NULL) {
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	695b      	ldr	r3, [r3, #20]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d004      	beq.n	80161f0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	695b      	ldr	r3, [r3, #20]
 80161ea:	4618      	mov	r0, r3
 80161ec:	f7f4 ff68 	bl	800b0c0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80161f0:	68f8      	ldr	r0, [r7, #12]
 80161f2:	f7ff ffbd 	bl	8016170 <ip_frag_free_pbuf_custom_ref>
}
 80161f6:	bf00      	nop
 80161f8:	3710      	adds	r7, #16
 80161fa:	46bd      	mov	sp, r7
 80161fc:	bd80      	pop	{r7, pc}
 80161fe:	bf00      	nop
 8016200:	0801a9ec 	.word	0x0801a9ec
 8016204:	0801abb0 	.word	0x0801abb0
 8016208:	0801aa34 	.word	0x0801aa34
 801620c:	0801abbc 	.word	0x0801abbc

08016210 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016210:	b580      	push	{r7, lr}
 8016212:	b094      	sub	sp, #80	; 0x50
 8016214:	af02      	add	r7, sp, #8
 8016216:	60f8      	str	r0, [r7, #12]
 8016218:	60b9      	str	r1, [r7, #8]
 801621a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801621c:	2300      	movs	r3, #0
 801621e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016222:	68bb      	ldr	r3, [r7, #8]
 8016224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016226:	3b14      	subs	r3, #20
 8016228:	2b00      	cmp	r3, #0
 801622a:	da00      	bge.n	801622e <ip4_frag+0x1e>
 801622c:	3307      	adds	r3, #7
 801622e:	10db      	asrs	r3, r3, #3
 8016230:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016232:	2314      	movs	r3, #20
 8016234:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	685b      	ldr	r3, [r3, #4]
 801623a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801623c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801623e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016242:	781b      	ldrb	r3, [r3, #0]
 8016244:	f003 030f 	and.w	r3, r3, #15
 8016248:	b2db      	uxtb	r3, r3
 801624a:	009b      	lsls	r3, r3, #2
 801624c:	b2db      	uxtb	r3, r3
 801624e:	2b14      	cmp	r3, #20
 8016250:	d002      	beq.n	8016258 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016252:	f06f 0305 	mvn.w	r3, #5
 8016256:	e10f      	b.n	8016478 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	895b      	ldrh	r3, [r3, #10]
 801625c:	2b13      	cmp	r3, #19
 801625e:	d809      	bhi.n	8016274 <ip4_frag+0x64>
 8016260:	4b87      	ldr	r3, [pc, #540]	; (8016480 <ip4_frag+0x270>)
 8016262:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016266:	4987      	ldr	r1, [pc, #540]	; (8016484 <ip4_frag+0x274>)
 8016268:	4887      	ldr	r0, [pc, #540]	; (8016488 <ip4_frag+0x278>)
 801626a:	f000 fb3d 	bl	80168e8 <iprintf>
 801626e:	f06f 0305 	mvn.w	r3, #5
 8016272:	e101      	b.n	8016478 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016276:	88db      	ldrh	r3, [r3, #6]
 8016278:	b29b      	uxth	r3, r3
 801627a:	4618      	mov	r0, r3
 801627c:	f7f3 fb36 	bl	80098ec <lwip_htons>
 8016280:	4603      	mov	r3, r0
 8016282:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016284:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016286:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801628a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801628e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016290:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016294:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	891b      	ldrh	r3, [r3, #8]
 801629a:	3b14      	subs	r3, #20
 801629c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80162a0:	e0e0      	b.n	8016464 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80162a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80162a4:	00db      	lsls	r3, r3, #3
 80162a6:	b29b      	uxth	r3, r3
 80162a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162ac:	4293      	cmp	r3, r2
 80162ae:	bf28      	it	cs
 80162b0:	4613      	movcs	r3, r2
 80162b2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80162b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80162b8:	2114      	movs	r1, #20
 80162ba:	200e      	movs	r0, #14
 80162bc:	f7f4 fc20 	bl	800ab00 <pbuf_alloc>
 80162c0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80162c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	f000 80d4 	beq.w	8016472 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80162ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162cc:	895b      	ldrh	r3, [r3, #10]
 80162ce:	2b13      	cmp	r3, #19
 80162d0:	d806      	bhi.n	80162e0 <ip4_frag+0xd0>
 80162d2:	4b6b      	ldr	r3, [pc, #428]	; (8016480 <ip4_frag+0x270>)
 80162d4:	f240 3225 	movw	r2, #805	; 0x325
 80162d8:	496c      	ldr	r1, [pc, #432]	; (801648c <ip4_frag+0x27c>)
 80162da:	486b      	ldr	r0, [pc, #428]	; (8016488 <ip4_frag+0x278>)
 80162dc:	f000 fb04 	bl	80168e8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80162e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162e2:	685b      	ldr	r3, [r3, #4]
 80162e4:	2214      	movs	r2, #20
 80162e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80162e8:	4618      	mov	r0, r3
 80162ea:	f000 fad0 	bl	801688e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80162ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f0:	685b      	ldr	r3, [r3, #4]
 80162f2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80162f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80162f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80162fa:	e064      	b.n	80163c6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	895a      	ldrh	r2, [r3, #10]
 8016300:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016302:	1ad3      	subs	r3, r2, r3
 8016304:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	895b      	ldrh	r3, [r3, #10]
 801630a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801630c:	429a      	cmp	r2, r3
 801630e:	d906      	bls.n	801631e <ip4_frag+0x10e>
 8016310:	4b5b      	ldr	r3, [pc, #364]	; (8016480 <ip4_frag+0x270>)
 8016312:	f240 322d 	movw	r2, #813	; 0x32d
 8016316:	495e      	ldr	r1, [pc, #376]	; (8016490 <ip4_frag+0x280>)
 8016318:	485b      	ldr	r0, [pc, #364]	; (8016488 <ip4_frag+0x278>)
 801631a:	f000 fae5 	bl	80168e8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801631e:	8bfa      	ldrh	r2, [r7, #30]
 8016320:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016324:	4293      	cmp	r3, r2
 8016326:	bf28      	it	cs
 8016328:	4613      	movcs	r3, r2
 801632a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801632e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016332:	2b00      	cmp	r3, #0
 8016334:	d105      	bne.n	8016342 <ip4_frag+0x132>
        poff = 0;
 8016336:	2300      	movs	r3, #0
 8016338:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	60fb      	str	r3, [r7, #12]
        continue;
 8016340:	e041      	b.n	80163c6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016342:	f7ff ff0d 	bl	8016160 <ip_frag_alloc_pbuf_custom_ref>
 8016346:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016348:	69bb      	ldr	r3, [r7, #24]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d103      	bne.n	8016356 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801634e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016350:	f7f4 feb6 	bl	800b0c0 <pbuf_free>
        goto memerr;
 8016354:	e08e      	b.n	8016474 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016356:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801635c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801635e:	4413      	add	r3, r2
 8016360:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016364:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016368:	9201      	str	r2, [sp, #4]
 801636a:	9300      	str	r3, [sp, #0]
 801636c:	4603      	mov	r3, r0
 801636e:	2241      	movs	r2, #65	; 0x41
 8016370:	2000      	movs	r0, #0
 8016372:	f7f4 fceb 	bl	800ad4c <pbuf_alloced_custom>
 8016376:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016378:	697b      	ldr	r3, [r7, #20]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d106      	bne.n	801638c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801637e:	69b8      	ldr	r0, [r7, #24]
 8016380:	f7ff fef6 	bl	8016170 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016384:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016386:	f7f4 fe9b 	bl	800b0c0 <pbuf_free>
        goto memerr;
 801638a:	e073      	b.n	8016474 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 801638c:	68f8      	ldr	r0, [r7, #12]
 801638e:	f7f4 ff3d 	bl	800b20c <pbuf_ref>
      pcr->original = p;
 8016392:	69bb      	ldr	r3, [r7, #24]
 8016394:	68fa      	ldr	r2, [r7, #12]
 8016396:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016398:	69bb      	ldr	r3, [r7, #24]
 801639a:	4a3e      	ldr	r2, [pc, #248]	; (8016494 <ip4_frag+0x284>)
 801639c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801639e:	6979      	ldr	r1, [r7, #20]
 80163a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80163a2:	f7f4 ff5b 	bl	800b25c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80163a6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80163aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80163ae:	1ad3      	subs	r3, r2, r3
 80163b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80163b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d004      	beq.n	80163c6 <ip4_frag+0x1b6>
        poff = 0;
 80163bc:	2300      	movs	r3, #0
 80163be:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80163c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d196      	bne.n	80162fc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80163ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80163d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80163d4:	4413      	add	r3, r2
 80163d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80163d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80163dc:	68bb      	ldr	r3, [r7, #8]
 80163de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80163e0:	3b14      	subs	r3, #20
 80163e2:	429a      	cmp	r2, r3
 80163e4:	bfd4      	ite	le
 80163e6:	2301      	movle	r3, #1
 80163e8:	2300      	movgt	r3, #0
 80163ea:	b2db      	uxtb	r3, r3
 80163ec:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80163ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80163f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80163f8:	6a3b      	ldr	r3, [r7, #32]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d002      	beq.n	8016404 <ip4_frag+0x1f4>
 80163fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016400:	2b00      	cmp	r3, #0
 8016402:	d003      	beq.n	801640c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016404:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016406:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801640a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801640c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801640e:	4618      	mov	r0, r3
 8016410:	f7f3 fa6c 	bl	80098ec <lwip_htons>
 8016414:	4603      	mov	r3, r0
 8016416:	461a      	mov	r2, r3
 8016418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801641a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801641c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801641e:	3314      	adds	r3, #20
 8016420:	b29b      	uxth	r3, r3
 8016422:	4618      	mov	r0, r3
 8016424:	f7f3 fa62 	bl	80098ec <lwip_htons>
 8016428:	4603      	mov	r3, r0
 801642a:	461a      	mov	r2, r3
 801642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801642e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016432:	2200      	movs	r2, #0
 8016434:	729a      	strb	r2, [r3, #10]
 8016436:	2200      	movs	r2, #0
 8016438:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801643a:	68bb      	ldr	r3, [r7, #8]
 801643c:	695b      	ldr	r3, [r3, #20]
 801643e:	687a      	ldr	r2, [r7, #4]
 8016440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016442:	68b8      	ldr	r0, [r7, #8]
 8016444:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016446:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016448:	f7f4 fe3a 	bl	800b0c0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801644c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016450:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016452:	1ad3      	subs	r3, r2, r3
 8016454:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016458:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801645c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801645e:	4413      	add	r3, r2
 8016460:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016464:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016468:	2b00      	cmp	r3, #0
 801646a:	f47f af1a 	bne.w	80162a2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801646e:	2300      	movs	r3, #0
 8016470:	e002      	b.n	8016478 <ip4_frag+0x268>
      goto memerr;
 8016472:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016474:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016478:	4618      	mov	r0, r3
 801647a:	3748      	adds	r7, #72	; 0x48
 801647c:	46bd      	mov	sp, r7
 801647e:	bd80      	pop	{r7, pc}
 8016480:	0801a9ec 	.word	0x0801a9ec
 8016484:	0801abc8 	.word	0x0801abc8
 8016488:	0801aa34 	.word	0x0801aa34
 801648c:	0801abe4 	.word	0x0801abe4
 8016490:	0801ac04 	.word	0x0801ac04
 8016494:	080161a9 	.word	0x080161a9

08016498 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b086      	sub	sp, #24
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
 80164a0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80164a2:	230e      	movs	r3, #14
 80164a4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	895b      	ldrh	r3, [r3, #10]
 80164aa:	2b0e      	cmp	r3, #14
 80164ac:	d96e      	bls.n	801658c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	7bdb      	ldrb	r3, [r3, #15]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d106      	bne.n	80164c4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80164b6:	683b      	ldr	r3, [r7, #0]
 80164b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80164bc:	3301      	adds	r3, #1
 80164be:	b2da      	uxtb	r2, r3
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	685b      	ldr	r3, [r3, #4]
 80164c8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	7b1a      	ldrb	r2, [r3, #12]
 80164ce:	7b5b      	ldrb	r3, [r3, #13]
 80164d0:	021b      	lsls	r3, r3, #8
 80164d2:	4313      	orrs	r3, r2
 80164d4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80164d6:	693b      	ldr	r3, [r7, #16]
 80164d8:	781b      	ldrb	r3, [r3, #0]
 80164da:	f003 0301 	and.w	r3, r3, #1
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d023      	beq.n	801652a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80164e2:	693b      	ldr	r3, [r7, #16]
 80164e4:	781b      	ldrb	r3, [r3, #0]
 80164e6:	2b01      	cmp	r3, #1
 80164e8:	d10f      	bne.n	801650a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80164ea:	693b      	ldr	r3, [r7, #16]
 80164ec:	785b      	ldrb	r3, [r3, #1]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d11b      	bne.n	801652a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80164f2:	693b      	ldr	r3, [r7, #16]
 80164f4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80164f6:	2b5e      	cmp	r3, #94	; 0x5e
 80164f8:	d117      	bne.n	801652a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	7b5b      	ldrb	r3, [r3, #13]
 80164fe:	f043 0310 	orr.w	r3, r3, #16
 8016502:	b2da      	uxtb	r2, r3
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	735a      	strb	r2, [r3, #13]
 8016508:	e00f      	b.n	801652a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801650a:	693b      	ldr	r3, [r7, #16]
 801650c:	2206      	movs	r2, #6
 801650e:	4928      	ldr	r1, [pc, #160]	; (80165b0 <ethernet_input+0x118>)
 8016510:	4618      	mov	r0, r3
 8016512:	f000 f9ad 	bl	8016870 <memcmp>
 8016516:	4603      	mov	r3, r0
 8016518:	2b00      	cmp	r3, #0
 801651a:	d106      	bne.n	801652a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	7b5b      	ldrb	r3, [r3, #13]
 8016520:	f043 0308 	orr.w	r3, r3, #8
 8016524:	b2da      	uxtb	r2, r3
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801652a:	89fb      	ldrh	r3, [r7, #14]
 801652c:	2b08      	cmp	r3, #8
 801652e:	d003      	beq.n	8016538 <ethernet_input+0xa0>
 8016530:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016534:	d014      	beq.n	8016560 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016536:	e032      	b.n	801659e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016538:	683b      	ldr	r3, [r7, #0]
 801653a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801653e:	f003 0308 	and.w	r3, r3, #8
 8016542:	2b00      	cmp	r3, #0
 8016544:	d024      	beq.n	8016590 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016546:	8afb      	ldrh	r3, [r7, #22]
 8016548:	4619      	mov	r1, r3
 801654a:	6878      	ldr	r0, [r7, #4]
 801654c:	f7f4 fd32 	bl	800afb4 <pbuf_remove_header>
 8016550:	4603      	mov	r3, r0
 8016552:	2b00      	cmp	r3, #0
 8016554:	d11e      	bne.n	8016594 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016556:	6839      	ldr	r1, [r7, #0]
 8016558:	6878      	ldr	r0, [r7, #4]
 801655a:	f7fe ff0f 	bl	801537c <ip4_input>
      break;
 801655e:	e013      	b.n	8016588 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016560:	683b      	ldr	r3, [r7, #0]
 8016562:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016566:	f003 0308 	and.w	r3, r3, #8
 801656a:	2b00      	cmp	r3, #0
 801656c:	d014      	beq.n	8016598 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801656e:	8afb      	ldrh	r3, [r7, #22]
 8016570:	4619      	mov	r1, r3
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f7f4 fd1e 	bl	800afb4 <pbuf_remove_header>
 8016578:	4603      	mov	r3, r0
 801657a:	2b00      	cmp	r3, #0
 801657c:	d10e      	bne.n	801659c <ethernet_input+0x104>
        etharp_input(p, netif);
 801657e:	6839      	ldr	r1, [r7, #0]
 8016580:	6878      	ldr	r0, [r7, #4]
 8016582:	f7fe f8ab 	bl	80146dc <etharp_input>
      break;
 8016586:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016588:	2300      	movs	r3, #0
 801658a:	e00c      	b.n	80165a6 <ethernet_input+0x10e>
    goto free_and_return;
 801658c:	bf00      	nop
 801658e:	e006      	b.n	801659e <ethernet_input+0x106>
        goto free_and_return;
 8016590:	bf00      	nop
 8016592:	e004      	b.n	801659e <ethernet_input+0x106>
        goto free_and_return;
 8016594:	bf00      	nop
 8016596:	e002      	b.n	801659e <ethernet_input+0x106>
        goto free_and_return;
 8016598:	bf00      	nop
 801659a:	e000      	b.n	801659e <ethernet_input+0x106>
        goto free_and_return;
 801659c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801659e:	6878      	ldr	r0, [r7, #4]
 80165a0:	f7f4 fd8e 	bl	800b0c0 <pbuf_free>
  return ERR_OK;
 80165a4:	2300      	movs	r3, #0
}
 80165a6:	4618      	mov	r0, r3
 80165a8:	3718      	adds	r7, #24
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
 80165ae:	bf00      	nop
 80165b0:	0803ad90 	.word	0x0803ad90

080165b4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b086      	sub	sp, #24
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	60f8      	str	r0, [r7, #12]
 80165bc:	60b9      	str	r1, [r7, #8]
 80165be:	607a      	str	r2, [r7, #4]
 80165c0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80165c2:	8c3b      	ldrh	r3, [r7, #32]
 80165c4:	4618      	mov	r0, r3
 80165c6:	f7f3 f991 	bl	80098ec <lwip_htons>
 80165ca:	4603      	mov	r3, r0
 80165cc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80165ce:	210e      	movs	r1, #14
 80165d0:	68b8      	ldr	r0, [r7, #8]
 80165d2:	f7f4 fcdf 	bl	800af94 <pbuf_add_header>
 80165d6:	4603      	mov	r3, r0
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d125      	bne.n	8016628 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80165dc:	68bb      	ldr	r3, [r7, #8]
 80165de:	685b      	ldr	r3, [r3, #4]
 80165e0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80165e2:	693b      	ldr	r3, [r7, #16]
 80165e4:	8afa      	ldrh	r2, [r7, #22]
 80165e6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80165e8:	693b      	ldr	r3, [r7, #16]
 80165ea:	2206      	movs	r2, #6
 80165ec:	6839      	ldr	r1, [r7, #0]
 80165ee:	4618      	mov	r0, r3
 80165f0:	f000 f94d 	bl	801688e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80165f4:	693b      	ldr	r3, [r7, #16]
 80165f6:	3306      	adds	r3, #6
 80165f8:	2206      	movs	r2, #6
 80165fa:	6879      	ldr	r1, [r7, #4]
 80165fc:	4618      	mov	r0, r3
 80165fe:	f000 f946 	bl	801688e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016608:	2b06      	cmp	r3, #6
 801660a:	d006      	beq.n	801661a <ethernet_output+0x66>
 801660c:	4b0a      	ldr	r3, [pc, #40]	; (8016638 <ethernet_output+0x84>)
 801660e:	f240 1233 	movw	r2, #307	; 0x133
 8016612:	490a      	ldr	r1, [pc, #40]	; (801663c <ethernet_output+0x88>)
 8016614:	480a      	ldr	r0, [pc, #40]	; (8016640 <ethernet_output+0x8c>)
 8016616:	f000 f967 	bl	80168e8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	699b      	ldr	r3, [r3, #24]
 801661e:	68b9      	ldr	r1, [r7, #8]
 8016620:	68f8      	ldr	r0, [r7, #12]
 8016622:	4798      	blx	r3
 8016624:	4603      	mov	r3, r0
 8016626:	e002      	b.n	801662e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016628:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801662a:	f06f 0301 	mvn.w	r3, #1
}
 801662e:	4618      	mov	r0, r3
 8016630:	3718      	adds	r7, #24
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	0801ac14 	.word	0x0801ac14
 801663c:	0801ac4c 	.word	0x0801ac4c
 8016640:	0801ac80 	.word	0x0801ac80

08016644 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b082      	sub	sp, #8
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
 801664c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	2200      	movs	r2, #0
 8016652:	2104      	movs	r1, #4
 8016654:	4618      	mov	r0, r3
 8016656:	f7ee fd7f 	bl	8005158 <osMessageQueueNew>
 801665a:	4602      	mov	r2, r0
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	2b00      	cmp	r3, #0
 8016666:	d102      	bne.n	801666e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016668:	f04f 33ff 	mov.w	r3, #4294967295
 801666c:	e000      	b.n	8016670 <sys_mbox_new+0x2c>

  return ERR_OK;
 801666e:	2300      	movs	r3, #0
}
 8016670:	4618      	mov	r0, r3
 8016672:	3708      	adds	r7, #8
 8016674:	46bd      	mov	sp, r7
 8016676:	bd80      	pop	{r7, pc}

08016678 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b084      	sub	sp, #16
 801667c:	af00      	add	r7, sp, #0
 801667e:	6078      	str	r0, [r7, #4]
 8016680:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	6818      	ldr	r0, [r3, #0]
 8016686:	4639      	mov	r1, r7
 8016688:	2300      	movs	r3, #0
 801668a:	2200      	movs	r2, #0
 801668c:	f7ee fdea 	bl	8005264 <osMessageQueuePut>
 8016690:	4603      	mov	r3, r0
 8016692:	2b00      	cmp	r3, #0
 8016694:	d102      	bne.n	801669c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016696:	2300      	movs	r3, #0
 8016698:	73fb      	strb	r3, [r7, #15]
 801669a:	e001      	b.n	80166a0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801669c:	23ff      	movs	r3, #255	; 0xff
 801669e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80166a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80166a4:	4618      	mov	r0, r3
 80166a6:	3710      	adds	r7, #16
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}

080166ac <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b086      	sub	sp, #24
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	60f8      	str	r0, [r7, #12]
 80166b4:	60b9      	str	r1, [r7, #8]
 80166b6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80166b8:	f7ee f9ae 	bl	8004a18 <osKernelGetTickCount>
 80166bc:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d013      	beq.n	80166ec <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	6818      	ldr	r0, [r3, #0]
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2200      	movs	r2, #0
 80166cc:	68b9      	ldr	r1, [r7, #8]
 80166ce:	f7ee fe3d 	bl	800534c <osMessageQueueGet>
 80166d2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80166d4:	693b      	ldr	r3, [r7, #16]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d105      	bne.n	80166e6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80166da:	f7ee f99d 	bl	8004a18 <osKernelGetTickCount>
 80166de:	4602      	mov	r2, r0
 80166e0:	697b      	ldr	r3, [r7, #20]
 80166e2:	1ad3      	subs	r3, r2, r3
 80166e4:	e00f      	b.n	8016706 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80166e6:	f04f 33ff 	mov.w	r3, #4294967295
 80166ea:	e00c      	b.n	8016706 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80166ec:	68fb      	ldr	r3, [r7, #12]
 80166ee:	6818      	ldr	r0, [r3, #0]
 80166f0:	f04f 33ff 	mov.w	r3, #4294967295
 80166f4:	2200      	movs	r2, #0
 80166f6:	68b9      	ldr	r1, [r7, #8]
 80166f8:	f7ee fe28 	bl	800534c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80166fc:	f7ee f98c 	bl	8004a18 <osKernelGetTickCount>
 8016700:	4602      	mov	r2, r0
 8016702:	697b      	ldr	r3, [r7, #20]
 8016704:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016706:	4618      	mov	r0, r3
 8016708:	3718      	adds	r7, #24
 801670a:	46bd      	mov	sp, r7
 801670c:	bd80      	pop	{r7, pc}

0801670e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801670e:	b480      	push	{r7}
 8016710:	b083      	sub	sp, #12
 8016712:	af00      	add	r7, sp, #0
 8016714:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d101      	bne.n	8016722 <sys_mbox_valid+0x14>
    return 0;
 801671e:	2300      	movs	r3, #0
 8016720:	e000      	b.n	8016724 <sys_mbox_valid+0x16>
  else
    return 1;
 8016722:	2301      	movs	r3, #1
}
 8016724:	4618      	mov	r0, r3
 8016726:	370c      	adds	r7, #12
 8016728:	46bd      	mov	sp, r7
 801672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801672e:	4770      	bx	lr

08016730 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016734:	2000      	movs	r0, #0
 8016736:	f7ee fa6b 	bl	8004c10 <osMutexNew>
 801673a:	4602      	mov	r2, r0
 801673c:	4b01      	ldr	r3, [pc, #4]	; (8016744 <sys_init+0x14>)
 801673e:	601a      	str	r2, [r3, #0]
#endif
}
 8016740:	bf00      	nop
 8016742:	bd80      	pop	{r7, pc}
 8016744:	20016e5c 	.word	0x20016e5c

08016748 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016748:	b580      	push	{r7, lr}
 801674a:	b082      	sub	sp, #8
 801674c:	af00      	add	r7, sp, #0
 801674e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016750:	2000      	movs	r0, #0
 8016752:	f7ee fa5d 	bl	8004c10 <osMutexNew>
 8016756:	4602      	mov	r2, r0
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d102      	bne.n	801676a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016764:	f04f 33ff 	mov.w	r3, #4294967295
 8016768:	e000      	b.n	801676c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801676a:	2300      	movs	r3, #0
}
 801676c:	4618      	mov	r0, r3
 801676e:	3708      	adds	r7, #8
 8016770:	46bd      	mov	sp, r7
 8016772:	bd80      	pop	{r7, pc}

08016774 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b082      	sub	sp, #8
 8016778:	af00      	add	r7, sp, #0
 801677a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	f04f 31ff 	mov.w	r1, #4294967295
 8016784:	4618      	mov	r0, r3
 8016786:	f7ee fadd 	bl	8004d44 <osMutexAcquire>
#endif
}
 801678a:	bf00      	nop
 801678c:	3708      	adds	r7, #8
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}

08016792 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016792:	b580      	push	{r7, lr}
 8016794:	b082      	sub	sp, #8
 8016796:	af00      	add	r7, sp, #0
 8016798:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	4618      	mov	r0, r3
 80167a0:	f7ee fb2e 	bl	8004e00 <osMutexRelease>
}
 80167a4:	bf00      	nop
 80167a6:	3708      	adds	r7, #8
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}

080167ac <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b08e      	sub	sp, #56	; 0x38
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	60f8      	str	r0, [r7, #12]
 80167b4:	60b9      	str	r1, [r7, #8]
 80167b6:	607a      	str	r2, [r7, #4]
 80167b8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80167ba:	f107 0314 	add.w	r3, r7, #20
 80167be:	2224      	movs	r2, #36	; 0x24
 80167c0:	2100      	movs	r1, #0
 80167c2:	4618      	mov	r0, r3
 80167c4:	f000 f887 	bl	80168d6 <memset>
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	617b      	str	r3, [r7, #20]
 80167cc:	683b      	ldr	r3, [r7, #0]
 80167ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80167d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80167d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80167d4:	f107 0314 	add.w	r3, r7, #20
 80167d8:	461a      	mov	r2, r3
 80167da:	6879      	ldr	r1, [r7, #4]
 80167dc:	68b8      	ldr	r0, [r7, #8]
 80167de:	f7ee f943 	bl	8004a68 <osThreadNew>
 80167e2:	4603      	mov	r3, r0
#endif
}
 80167e4:	4618      	mov	r0, r3
 80167e6:	3738      	adds	r7, #56	; 0x38
 80167e8:	46bd      	mov	sp, r7
 80167ea:	bd80      	pop	{r7, pc}

080167ec <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80167f0:	4b04      	ldr	r3, [pc, #16]	; (8016804 <sys_arch_protect+0x18>)
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	f04f 31ff 	mov.w	r1, #4294967295
 80167f8:	4618      	mov	r0, r3
 80167fa:	f7ee faa3 	bl	8004d44 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80167fe:	2301      	movs	r3, #1
}
 8016800:	4618      	mov	r0, r3
 8016802:	bd80      	pop	{r7, pc}
 8016804:	20016e5c 	.word	0x20016e5c

08016808 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b082      	sub	sp, #8
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016810:	4b04      	ldr	r3, [pc, #16]	; (8016824 <sys_arch_unprotect+0x1c>)
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	4618      	mov	r0, r3
 8016816:	f7ee faf3 	bl	8004e00 <osMutexRelease>
}
 801681a:	bf00      	nop
 801681c:	3708      	adds	r7, #8
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}
 8016822:	bf00      	nop
 8016824:	20016e5c 	.word	0x20016e5c

08016828 <__libc_init_array>:
 8016828:	b570      	push	{r4, r5, r6, lr}
 801682a:	4e0d      	ldr	r6, [pc, #52]	; (8016860 <__libc_init_array+0x38>)
 801682c:	4c0d      	ldr	r4, [pc, #52]	; (8016864 <__libc_init_array+0x3c>)
 801682e:	1ba4      	subs	r4, r4, r6
 8016830:	10a4      	asrs	r4, r4, #2
 8016832:	2500      	movs	r5, #0
 8016834:	42a5      	cmp	r5, r4
 8016836:	d109      	bne.n	801684c <__libc_init_array+0x24>
 8016838:	4e0b      	ldr	r6, [pc, #44]	; (8016868 <__libc_init_array+0x40>)
 801683a:	4c0c      	ldr	r4, [pc, #48]	; (801686c <__libc_init_array+0x44>)
 801683c:	f001 f934 	bl	8017aa8 <_init>
 8016840:	1ba4      	subs	r4, r4, r6
 8016842:	10a4      	asrs	r4, r4, #2
 8016844:	2500      	movs	r5, #0
 8016846:	42a5      	cmp	r5, r4
 8016848:	d105      	bne.n	8016856 <__libc_init_array+0x2e>
 801684a:	bd70      	pop	{r4, r5, r6, pc}
 801684c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016850:	4798      	blx	r3
 8016852:	3501      	adds	r5, #1
 8016854:	e7ee      	b.n	8016834 <__libc_init_array+0xc>
 8016856:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801685a:	4798      	blx	r3
 801685c:	3501      	adds	r5, #1
 801685e:	e7f2      	b.n	8016846 <__libc_init_array+0x1e>
 8016860:	0803ae40 	.word	0x0803ae40
 8016864:	0803ae40 	.word	0x0803ae40
 8016868:	0803ae40 	.word	0x0803ae40
 801686c:	0803ae44 	.word	0x0803ae44

08016870 <memcmp>:
 8016870:	b530      	push	{r4, r5, lr}
 8016872:	2400      	movs	r4, #0
 8016874:	42a2      	cmp	r2, r4
 8016876:	d101      	bne.n	801687c <memcmp+0xc>
 8016878:	2000      	movs	r0, #0
 801687a:	e007      	b.n	801688c <memcmp+0x1c>
 801687c:	5d03      	ldrb	r3, [r0, r4]
 801687e:	3401      	adds	r4, #1
 8016880:	190d      	adds	r5, r1, r4
 8016882:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8016886:	42ab      	cmp	r3, r5
 8016888:	d0f4      	beq.n	8016874 <memcmp+0x4>
 801688a:	1b58      	subs	r0, r3, r5
 801688c:	bd30      	pop	{r4, r5, pc}

0801688e <memcpy>:
 801688e:	b510      	push	{r4, lr}
 8016890:	1e43      	subs	r3, r0, #1
 8016892:	440a      	add	r2, r1
 8016894:	4291      	cmp	r1, r2
 8016896:	d100      	bne.n	801689a <memcpy+0xc>
 8016898:	bd10      	pop	{r4, pc}
 801689a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801689e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80168a2:	e7f7      	b.n	8016894 <memcpy+0x6>

080168a4 <memmove>:
 80168a4:	4288      	cmp	r0, r1
 80168a6:	b510      	push	{r4, lr}
 80168a8:	eb01 0302 	add.w	r3, r1, r2
 80168ac:	d807      	bhi.n	80168be <memmove+0x1a>
 80168ae:	1e42      	subs	r2, r0, #1
 80168b0:	4299      	cmp	r1, r3
 80168b2:	d00a      	beq.n	80168ca <memmove+0x26>
 80168b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80168b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80168bc:	e7f8      	b.n	80168b0 <memmove+0xc>
 80168be:	4283      	cmp	r3, r0
 80168c0:	d9f5      	bls.n	80168ae <memmove+0xa>
 80168c2:	1881      	adds	r1, r0, r2
 80168c4:	1ad2      	subs	r2, r2, r3
 80168c6:	42d3      	cmn	r3, r2
 80168c8:	d100      	bne.n	80168cc <memmove+0x28>
 80168ca:	bd10      	pop	{r4, pc}
 80168cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80168d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80168d4:	e7f7      	b.n	80168c6 <memmove+0x22>

080168d6 <memset>:
 80168d6:	4402      	add	r2, r0
 80168d8:	4603      	mov	r3, r0
 80168da:	4293      	cmp	r3, r2
 80168dc:	d100      	bne.n	80168e0 <memset+0xa>
 80168de:	4770      	bx	lr
 80168e0:	f803 1b01 	strb.w	r1, [r3], #1
 80168e4:	e7f9      	b.n	80168da <memset+0x4>
	...

080168e8 <iprintf>:
 80168e8:	b40f      	push	{r0, r1, r2, r3}
 80168ea:	4b0a      	ldr	r3, [pc, #40]	; (8016914 <iprintf+0x2c>)
 80168ec:	b513      	push	{r0, r1, r4, lr}
 80168ee:	681c      	ldr	r4, [r3, #0]
 80168f0:	b124      	cbz	r4, 80168fc <iprintf+0x14>
 80168f2:	69a3      	ldr	r3, [r4, #24]
 80168f4:	b913      	cbnz	r3, 80168fc <iprintf+0x14>
 80168f6:	4620      	mov	r0, r4
 80168f8:	f000 f8c2 	bl	8016a80 <__sinit>
 80168fc:	ab05      	add	r3, sp, #20
 80168fe:	9a04      	ldr	r2, [sp, #16]
 8016900:	68a1      	ldr	r1, [r4, #8]
 8016902:	9301      	str	r3, [sp, #4]
 8016904:	4620      	mov	r0, r4
 8016906:	f000 fb71 	bl	8016fec <_vfiprintf_r>
 801690a:	b002      	add	sp, #8
 801690c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016910:	b004      	add	sp, #16
 8016912:	4770      	bx	lr
 8016914:	20000020 	.word	0x20000020

08016918 <rand>:
 8016918:	b538      	push	{r3, r4, r5, lr}
 801691a:	4b13      	ldr	r3, [pc, #76]	; (8016968 <rand+0x50>)
 801691c:	681c      	ldr	r4, [r3, #0]
 801691e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016920:	b97b      	cbnz	r3, 8016942 <rand+0x2a>
 8016922:	2018      	movs	r0, #24
 8016924:	f000 f936 	bl	8016b94 <malloc>
 8016928:	4a10      	ldr	r2, [pc, #64]	; (801696c <rand+0x54>)
 801692a:	4b11      	ldr	r3, [pc, #68]	; (8016970 <rand+0x58>)
 801692c:	63a0      	str	r0, [r4, #56]	; 0x38
 801692e:	e9c0 2300 	strd	r2, r3, [r0]
 8016932:	4b10      	ldr	r3, [pc, #64]	; (8016974 <rand+0x5c>)
 8016934:	6083      	str	r3, [r0, #8]
 8016936:	230b      	movs	r3, #11
 8016938:	8183      	strh	r3, [r0, #12]
 801693a:	2201      	movs	r2, #1
 801693c:	2300      	movs	r3, #0
 801693e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016942:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016944:	480c      	ldr	r0, [pc, #48]	; (8016978 <rand+0x60>)
 8016946:	690a      	ldr	r2, [r1, #16]
 8016948:	694b      	ldr	r3, [r1, #20]
 801694a:	4c0c      	ldr	r4, [pc, #48]	; (801697c <rand+0x64>)
 801694c:	4350      	muls	r0, r2
 801694e:	fb04 0003 	mla	r0, r4, r3, r0
 8016952:	fba2 2304 	umull	r2, r3, r2, r4
 8016956:	4403      	add	r3, r0
 8016958:	1c54      	adds	r4, r2, #1
 801695a:	f143 0500 	adc.w	r5, r3, #0
 801695e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8016962:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8016966:	bd38      	pop	{r3, r4, r5, pc}
 8016968:	20000020 	.word	0x20000020
 801696c:	abcd330e 	.word	0xabcd330e
 8016970:	e66d1234 	.word	0xe66d1234
 8016974:	0005deec 	.word	0x0005deec
 8016978:	5851f42d 	.word	0x5851f42d
 801697c:	4c957f2d 	.word	0x4c957f2d

08016980 <strchr>:
 8016980:	b2c9      	uxtb	r1, r1
 8016982:	4603      	mov	r3, r0
 8016984:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016988:	b11a      	cbz	r2, 8016992 <strchr+0x12>
 801698a:	428a      	cmp	r2, r1
 801698c:	d1f9      	bne.n	8016982 <strchr+0x2>
 801698e:	4618      	mov	r0, r3
 8016990:	4770      	bx	lr
 8016992:	2900      	cmp	r1, #0
 8016994:	bf18      	it	ne
 8016996:	2300      	movne	r3, #0
 8016998:	e7f9      	b.n	801698e <strchr+0xe>

0801699a <strncmp>:
 801699a:	b510      	push	{r4, lr}
 801699c:	b16a      	cbz	r2, 80169ba <strncmp+0x20>
 801699e:	3901      	subs	r1, #1
 80169a0:	1884      	adds	r4, r0, r2
 80169a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80169a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80169aa:	4293      	cmp	r3, r2
 80169ac:	d103      	bne.n	80169b6 <strncmp+0x1c>
 80169ae:	42a0      	cmp	r0, r4
 80169b0:	d001      	beq.n	80169b6 <strncmp+0x1c>
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d1f5      	bne.n	80169a2 <strncmp+0x8>
 80169b6:	1a98      	subs	r0, r3, r2
 80169b8:	bd10      	pop	{r4, pc}
 80169ba:	4610      	mov	r0, r2
 80169bc:	e7fc      	b.n	80169b8 <strncmp+0x1e>
	...

080169c0 <_vsiprintf_r>:
 80169c0:	b500      	push	{lr}
 80169c2:	b09b      	sub	sp, #108	; 0x6c
 80169c4:	9100      	str	r1, [sp, #0]
 80169c6:	9104      	str	r1, [sp, #16]
 80169c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80169cc:	9105      	str	r1, [sp, #20]
 80169ce:	9102      	str	r1, [sp, #8]
 80169d0:	4905      	ldr	r1, [pc, #20]	; (80169e8 <_vsiprintf_r+0x28>)
 80169d2:	9103      	str	r1, [sp, #12]
 80169d4:	4669      	mov	r1, sp
 80169d6:	f000 f9e7 	bl	8016da8 <_svfiprintf_r>
 80169da:	9b00      	ldr	r3, [sp, #0]
 80169dc:	2200      	movs	r2, #0
 80169de:	701a      	strb	r2, [r3, #0]
 80169e0:	b01b      	add	sp, #108	; 0x6c
 80169e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80169e6:	bf00      	nop
 80169e8:	ffff0208 	.word	0xffff0208

080169ec <vsiprintf>:
 80169ec:	4613      	mov	r3, r2
 80169ee:	460a      	mov	r2, r1
 80169f0:	4601      	mov	r1, r0
 80169f2:	4802      	ldr	r0, [pc, #8]	; (80169fc <vsiprintf+0x10>)
 80169f4:	6800      	ldr	r0, [r0, #0]
 80169f6:	f7ff bfe3 	b.w	80169c0 <_vsiprintf_r>
 80169fa:	bf00      	nop
 80169fc:	20000020 	.word	0x20000020

08016a00 <std>:
 8016a00:	2300      	movs	r3, #0
 8016a02:	b510      	push	{r4, lr}
 8016a04:	4604      	mov	r4, r0
 8016a06:	e9c0 3300 	strd	r3, r3, [r0]
 8016a0a:	6083      	str	r3, [r0, #8]
 8016a0c:	8181      	strh	r1, [r0, #12]
 8016a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8016a10:	81c2      	strh	r2, [r0, #14]
 8016a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016a16:	6183      	str	r3, [r0, #24]
 8016a18:	4619      	mov	r1, r3
 8016a1a:	2208      	movs	r2, #8
 8016a1c:	305c      	adds	r0, #92	; 0x5c
 8016a1e:	f7ff ff5a 	bl	80168d6 <memset>
 8016a22:	4b05      	ldr	r3, [pc, #20]	; (8016a38 <std+0x38>)
 8016a24:	6263      	str	r3, [r4, #36]	; 0x24
 8016a26:	4b05      	ldr	r3, [pc, #20]	; (8016a3c <std+0x3c>)
 8016a28:	62a3      	str	r3, [r4, #40]	; 0x28
 8016a2a:	4b05      	ldr	r3, [pc, #20]	; (8016a40 <std+0x40>)
 8016a2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016a2e:	4b05      	ldr	r3, [pc, #20]	; (8016a44 <std+0x44>)
 8016a30:	6224      	str	r4, [r4, #32]
 8016a32:	6323      	str	r3, [r4, #48]	; 0x30
 8016a34:	bd10      	pop	{r4, pc}
 8016a36:	bf00      	nop
 8016a38:	08017549 	.word	0x08017549
 8016a3c:	0801756b 	.word	0x0801756b
 8016a40:	080175a3 	.word	0x080175a3
 8016a44:	080175c7 	.word	0x080175c7

08016a48 <_cleanup_r>:
 8016a48:	4901      	ldr	r1, [pc, #4]	; (8016a50 <_cleanup_r+0x8>)
 8016a4a:	f000 b885 	b.w	8016b58 <_fwalk_reent>
 8016a4e:	bf00      	nop
 8016a50:	080178a1 	.word	0x080178a1

08016a54 <__sfmoreglue>:
 8016a54:	b570      	push	{r4, r5, r6, lr}
 8016a56:	1e4a      	subs	r2, r1, #1
 8016a58:	2568      	movs	r5, #104	; 0x68
 8016a5a:	4355      	muls	r5, r2
 8016a5c:	460e      	mov	r6, r1
 8016a5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016a62:	f000 f8ed 	bl	8016c40 <_malloc_r>
 8016a66:	4604      	mov	r4, r0
 8016a68:	b140      	cbz	r0, 8016a7c <__sfmoreglue+0x28>
 8016a6a:	2100      	movs	r1, #0
 8016a6c:	e9c0 1600 	strd	r1, r6, [r0]
 8016a70:	300c      	adds	r0, #12
 8016a72:	60a0      	str	r0, [r4, #8]
 8016a74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016a78:	f7ff ff2d 	bl	80168d6 <memset>
 8016a7c:	4620      	mov	r0, r4
 8016a7e:	bd70      	pop	{r4, r5, r6, pc}

08016a80 <__sinit>:
 8016a80:	6983      	ldr	r3, [r0, #24]
 8016a82:	b510      	push	{r4, lr}
 8016a84:	4604      	mov	r4, r0
 8016a86:	bb33      	cbnz	r3, 8016ad6 <__sinit+0x56>
 8016a88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016a8c:	6503      	str	r3, [r0, #80]	; 0x50
 8016a8e:	4b12      	ldr	r3, [pc, #72]	; (8016ad8 <__sinit+0x58>)
 8016a90:	4a12      	ldr	r2, [pc, #72]	; (8016adc <__sinit+0x5c>)
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	6282      	str	r2, [r0, #40]	; 0x28
 8016a96:	4298      	cmp	r0, r3
 8016a98:	bf04      	itt	eq
 8016a9a:	2301      	moveq	r3, #1
 8016a9c:	6183      	streq	r3, [r0, #24]
 8016a9e:	f000 f81f 	bl	8016ae0 <__sfp>
 8016aa2:	6060      	str	r0, [r4, #4]
 8016aa4:	4620      	mov	r0, r4
 8016aa6:	f000 f81b 	bl	8016ae0 <__sfp>
 8016aaa:	60a0      	str	r0, [r4, #8]
 8016aac:	4620      	mov	r0, r4
 8016aae:	f000 f817 	bl	8016ae0 <__sfp>
 8016ab2:	2200      	movs	r2, #0
 8016ab4:	60e0      	str	r0, [r4, #12]
 8016ab6:	2104      	movs	r1, #4
 8016ab8:	6860      	ldr	r0, [r4, #4]
 8016aba:	f7ff ffa1 	bl	8016a00 <std>
 8016abe:	2201      	movs	r2, #1
 8016ac0:	2109      	movs	r1, #9
 8016ac2:	68a0      	ldr	r0, [r4, #8]
 8016ac4:	f7ff ff9c 	bl	8016a00 <std>
 8016ac8:	2202      	movs	r2, #2
 8016aca:	2112      	movs	r1, #18
 8016acc:	68e0      	ldr	r0, [r4, #12]
 8016ace:	f7ff ff97 	bl	8016a00 <std>
 8016ad2:	2301      	movs	r3, #1
 8016ad4:	61a3      	str	r3, [r4, #24]
 8016ad6:	bd10      	pop	{r4, pc}
 8016ad8:	0803ada0 	.word	0x0803ada0
 8016adc:	08016a49 	.word	0x08016a49

08016ae0 <__sfp>:
 8016ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ae2:	4b1b      	ldr	r3, [pc, #108]	; (8016b50 <__sfp+0x70>)
 8016ae4:	681e      	ldr	r6, [r3, #0]
 8016ae6:	69b3      	ldr	r3, [r6, #24]
 8016ae8:	4607      	mov	r7, r0
 8016aea:	b913      	cbnz	r3, 8016af2 <__sfp+0x12>
 8016aec:	4630      	mov	r0, r6
 8016aee:	f7ff ffc7 	bl	8016a80 <__sinit>
 8016af2:	3648      	adds	r6, #72	; 0x48
 8016af4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016af8:	3b01      	subs	r3, #1
 8016afa:	d503      	bpl.n	8016b04 <__sfp+0x24>
 8016afc:	6833      	ldr	r3, [r6, #0]
 8016afe:	b133      	cbz	r3, 8016b0e <__sfp+0x2e>
 8016b00:	6836      	ldr	r6, [r6, #0]
 8016b02:	e7f7      	b.n	8016af4 <__sfp+0x14>
 8016b04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016b08:	b16d      	cbz	r5, 8016b26 <__sfp+0x46>
 8016b0a:	3468      	adds	r4, #104	; 0x68
 8016b0c:	e7f4      	b.n	8016af8 <__sfp+0x18>
 8016b0e:	2104      	movs	r1, #4
 8016b10:	4638      	mov	r0, r7
 8016b12:	f7ff ff9f 	bl	8016a54 <__sfmoreglue>
 8016b16:	6030      	str	r0, [r6, #0]
 8016b18:	2800      	cmp	r0, #0
 8016b1a:	d1f1      	bne.n	8016b00 <__sfp+0x20>
 8016b1c:	230c      	movs	r3, #12
 8016b1e:	603b      	str	r3, [r7, #0]
 8016b20:	4604      	mov	r4, r0
 8016b22:	4620      	mov	r0, r4
 8016b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b26:	4b0b      	ldr	r3, [pc, #44]	; (8016b54 <__sfp+0x74>)
 8016b28:	6665      	str	r5, [r4, #100]	; 0x64
 8016b2a:	e9c4 5500 	strd	r5, r5, [r4]
 8016b2e:	60a5      	str	r5, [r4, #8]
 8016b30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8016b34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016b38:	2208      	movs	r2, #8
 8016b3a:	4629      	mov	r1, r5
 8016b3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016b40:	f7ff fec9 	bl	80168d6 <memset>
 8016b44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016b48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016b4c:	e7e9      	b.n	8016b22 <__sfp+0x42>
 8016b4e:	bf00      	nop
 8016b50:	0803ada0 	.word	0x0803ada0
 8016b54:	ffff0001 	.word	0xffff0001

08016b58 <_fwalk_reent>:
 8016b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b5c:	4680      	mov	r8, r0
 8016b5e:	4689      	mov	r9, r1
 8016b60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016b64:	2600      	movs	r6, #0
 8016b66:	b914      	cbnz	r4, 8016b6e <_fwalk_reent+0x16>
 8016b68:	4630      	mov	r0, r6
 8016b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016b72:	3f01      	subs	r7, #1
 8016b74:	d501      	bpl.n	8016b7a <_fwalk_reent+0x22>
 8016b76:	6824      	ldr	r4, [r4, #0]
 8016b78:	e7f5      	b.n	8016b66 <_fwalk_reent+0xe>
 8016b7a:	89ab      	ldrh	r3, [r5, #12]
 8016b7c:	2b01      	cmp	r3, #1
 8016b7e:	d907      	bls.n	8016b90 <_fwalk_reent+0x38>
 8016b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016b84:	3301      	adds	r3, #1
 8016b86:	d003      	beq.n	8016b90 <_fwalk_reent+0x38>
 8016b88:	4629      	mov	r1, r5
 8016b8a:	4640      	mov	r0, r8
 8016b8c:	47c8      	blx	r9
 8016b8e:	4306      	orrs	r6, r0
 8016b90:	3568      	adds	r5, #104	; 0x68
 8016b92:	e7ee      	b.n	8016b72 <_fwalk_reent+0x1a>

08016b94 <malloc>:
 8016b94:	4b02      	ldr	r3, [pc, #8]	; (8016ba0 <malloc+0xc>)
 8016b96:	4601      	mov	r1, r0
 8016b98:	6818      	ldr	r0, [r3, #0]
 8016b9a:	f000 b851 	b.w	8016c40 <_malloc_r>
 8016b9e:	bf00      	nop
 8016ba0:	20000020 	.word	0x20000020

08016ba4 <_free_r>:
 8016ba4:	b538      	push	{r3, r4, r5, lr}
 8016ba6:	4605      	mov	r5, r0
 8016ba8:	2900      	cmp	r1, #0
 8016baa:	d045      	beq.n	8016c38 <_free_r+0x94>
 8016bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016bb0:	1f0c      	subs	r4, r1, #4
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	bfb8      	it	lt
 8016bb6:	18e4      	addlt	r4, r4, r3
 8016bb8:	f000 ff12 	bl	80179e0 <__malloc_lock>
 8016bbc:	4a1f      	ldr	r2, [pc, #124]	; (8016c3c <_free_r+0x98>)
 8016bbe:	6813      	ldr	r3, [r2, #0]
 8016bc0:	4610      	mov	r0, r2
 8016bc2:	b933      	cbnz	r3, 8016bd2 <_free_r+0x2e>
 8016bc4:	6063      	str	r3, [r4, #4]
 8016bc6:	6014      	str	r4, [r2, #0]
 8016bc8:	4628      	mov	r0, r5
 8016bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016bce:	f000 bf08 	b.w	80179e2 <__malloc_unlock>
 8016bd2:	42a3      	cmp	r3, r4
 8016bd4:	d90c      	bls.n	8016bf0 <_free_r+0x4c>
 8016bd6:	6821      	ldr	r1, [r4, #0]
 8016bd8:	1862      	adds	r2, r4, r1
 8016bda:	4293      	cmp	r3, r2
 8016bdc:	bf04      	itt	eq
 8016bde:	681a      	ldreq	r2, [r3, #0]
 8016be0:	685b      	ldreq	r3, [r3, #4]
 8016be2:	6063      	str	r3, [r4, #4]
 8016be4:	bf04      	itt	eq
 8016be6:	1852      	addeq	r2, r2, r1
 8016be8:	6022      	streq	r2, [r4, #0]
 8016bea:	6004      	str	r4, [r0, #0]
 8016bec:	e7ec      	b.n	8016bc8 <_free_r+0x24>
 8016bee:	4613      	mov	r3, r2
 8016bf0:	685a      	ldr	r2, [r3, #4]
 8016bf2:	b10a      	cbz	r2, 8016bf8 <_free_r+0x54>
 8016bf4:	42a2      	cmp	r2, r4
 8016bf6:	d9fa      	bls.n	8016bee <_free_r+0x4a>
 8016bf8:	6819      	ldr	r1, [r3, #0]
 8016bfa:	1858      	adds	r0, r3, r1
 8016bfc:	42a0      	cmp	r0, r4
 8016bfe:	d10b      	bne.n	8016c18 <_free_r+0x74>
 8016c00:	6820      	ldr	r0, [r4, #0]
 8016c02:	4401      	add	r1, r0
 8016c04:	1858      	adds	r0, r3, r1
 8016c06:	4282      	cmp	r2, r0
 8016c08:	6019      	str	r1, [r3, #0]
 8016c0a:	d1dd      	bne.n	8016bc8 <_free_r+0x24>
 8016c0c:	6810      	ldr	r0, [r2, #0]
 8016c0e:	6852      	ldr	r2, [r2, #4]
 8016c10:	605a      	str	r2, [r3, #4]
 8016c12:	4401      	add	r1, r0
 8016c14:	6019      	str	r1, [r3, #0]
 8016c16:	e7d7      	b.n	8016bc8 <_free_r+0x24>
 8016c18:	d902      	bls.n	8016c20 <_free_r+0x7c>
 8016c1a:	230c      	movs	r3, #12
 8016c1c:	602b      	str	r3, [r5, #0]
 8016c1e:	e7d3      	b.n	8016bc8 <_free_r+0x24>
 8016c20:	6820      	ldr	r0, [r4, #0]
 8016c22:	1821      	adds	r1, r4, r0
 8016c24:	428a      	cmp	r2, r1
 8016c26:	bf04      	itt	eq
 8016c28:	6811      	ldreq	r1, [r2, #0]
 8016c2a:	6852      	ldreq	r2, [r2, #4]
 8016c2c:	6062      	str	r2, [r4, #4]
 8016c2e:	bf04      	itt	eq
 8016c30:	1809      	addeq	r1, r1, r0
 8016c32:	6021      	streq	r1, [r4, #0]
 8016c34:	605c      	str	r4, [r3, #4]
 8016c36:	e7c7      	b.n	8016bc8 <_free_r+0x24>
 8016c38:	bd38      	pop	{r3, r4, r5, pc}
 8016c3a:	bf00      	nop
 8016c3c:	200103a0 	.word	0x200103a0

08016c40 <_malloc_r>:
 8016c40:	b570      	push	{r4, r5, r6, lr}
 8016c42:	1ccd      	adds	r5, r1, #3
 8016c44:	f025 0503 	bic.w	r5, r5, #3
 8016c48:	3508      	adds	r5, #8
 8016c4a:	2d0c      	cmp	r5, #12
 8016c4c:	bf38      	it	cc
 8016c4e:	250c      	movcc	r5, #12
 8016c50:	2d00      	cmp	r5, #0
 8016c52:	4606      	mov	r6, r0
 8016c54:	db01      	blt.n	8016c5a <_malloc_r+0x1a>
 8016c56:	42a9      	cmp	r1, r5
 8016c58:	d903      	bls.n	8016c62 <_malloc_r+0x22>
 8016c5a:	230c      	movs	r3, #12
 8016c5c:	6033      	str	r3, [r6, #0]
 8016c5e:	2000      	movs	r0, #0
 8016c60:	bd70      	pop	{r4, r5, r6, pc}
 8016c62:	f000 febd 	bl	80179e0 <__malloc_lock>
 8016c66:	4a21      	ldr	r2, [pc, #132]	; (8016cec <_malloc_r+0xac>)
 8016c68:	6814      	ldr	r4, [r2, #0]
 8016c6a:	4621      	mov	r1, r4
 8016c6c:	b991      	cbnz	r1, 8016c94 <_malloc_r+0x54>
 8016c6e:	4c20      	ldr	r4, [pc, #128]	; (8016cf0 <_malloc_r+0xb0>)
 8016c70:	6823      	ldr	r3, [r4, #0]
 8016c72:	b91b      	cbnz	r3, 8016c7c <_malloc_r+0x3c>
 8016c74:	4630      	mov	r0, r6
 8016c76:	f000 fc57 	bl	8017528 <_sbrk_r>
 8016c7a:	6020      	str	r0, [r4, #0]
 8016c7c:	4629      	mov	r1, r5
 8016c7e:	4630      	mov	r0, r6
 8016c80:	f000 fc52 	bl	8017528 <_sbrk_r>
 8016c84:	1c43      	adds	r3, r0, #1
 8016c86:	d124      	bne.n	8016cd2 <_malloc_r+0x92>
 8016c88:	230c      	movs	r3, #12
 8016c8a:	6033      	str	r3, [r6, #0]
 8016c8c:	4630      	mov	r0, r6
 8016c8e:	f000 fea8 	bl	80179e2 <__malloc_unlock>
 8016c92:	e7e4      	b.n	8016c5e <_malloc_r+0x1e>
 8016c94:	680b      	ldr	r3, [r1, #0]
 8016c96:	1b5b      	subs	r3, r3, r5
 8016c98:	d418      	bmi.n	8016ccc <_malloc_r+0x8c>
 8016c9a:	2b0b      	cmp	r3, #11
 8016c9c:	d90f      	bls.n	8016cbe <_malloc_r+0x7e>
 8016c9e:	600b      	str	r3, [r1, #0]
 8016ca0:	50cd      	str	r5, [r1, r3]
 8016ca2:	18cc      	adds	r4, r1, r3
 8016ca4:	4630      	mov	r0, r6
 8016ca6:	f000 fe9c 	bl	80179e2 <__malloc_unlock>
 8016caa:	f104 000b 	add.w	r0, r4, #11
 8016cae:	1d23      	adds	r3, r4, #4
 8016cb0:	f020 0007 	bic.w	r0, r0, #7
 8016cb4:	1ac3      	subs	r3, r0, r3
 8016cb6:	d0d3      	beq.n	8016c60 <_malloc_r+0x20>
 8016cb8:	425a      	negs	r2, r3
 8016cba:	50e2      	str	r2, [r4, r3]
 8016cbc:	e7d0      	b.n	8016c60 <_malloc_r+0x20>
 8016cbe:	428c      	cmp	r4, r1
 8016cc0:	684b      	ldr	r3, [r1, #4]
 8016cc2:	bf16      	itet	ne
 8016cc4:	6063      	strne	r3, [r4, #4]
 8016cc6:	6013      	streq	r3, [r2, #0]
 8016cc8:	460c      	movne	r4, r1
 8016cca:	e7eb      	b.n	8016ca4 <_malloc_r+0x64>
 8016ccc:	460c      	mov	r4, r1
 8016cce:	6849      	ldr	r1, [r1, #4]
 8016cd0:	e7cc      	b.n	8016c6c <_malloc_r+0x2c>
 8016cd2:	1cc4      	adds	r4, r0, #3
 8016cd4:	f024 0403 	bic.w	r4, r4, #3
 8016cd8:	42a0      	cmp	r0, r4
 8016cda:	d005      	beq.n	8016ce8 <_malloc_r+0xa8>
 8016cdc:	1a21      	subs	r1, r4, r0
 8016cde:	4630      	mov	r0, r6
 8016ce0:	f000 fc22 	bl	8017528 <_sbrk_r>
 8016ce4:	3001      	adds	r0, #1
 8016ce6:	d0cf      	beq.n	8016c88 <_malloc_r+0x48>
 8016ce8:	6025      	str	r5, [r4, #0]
 8016cea:	e7db      	b.n	8016ca4 <_malloc_r+0x64>
 8016cec:	200103a0 	.word	0x200103a0
 8016cf0:	200103a4 	.word	0x200103a4

08016cf4 <__ssputs_r>:
 8016cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cf8:	688e      	ldr	r6, [r1, #8]
 8016cfa:	429e      	cmp	r6, r3
 8016cfc:	4682      	mov	sl, r0
 8016cfe:	460c      	mov	r4, r1
 8016d00:	4690      	mov	r8, r2
 8016d02:	4699      	mov	r9, r3
 8016d04:	d837      	bhi.n	8016d76 <__ssputs_r+0x82>
 8016d06:	898a      	ldrh	r2, [r1, #12]
 8016d08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016d0c:	d031      	beq.n	8016d72 <__ssputs_r+0x7e>
 8016d0e:	6825      	ldr	r5, [r4, #0]
 8016d10:	6909      	ldr	r1, [r1, #16]
 8016d12:	1a6f      	subs	r7, r5, r1
 8016d14:	6965      	ldr	r5, [r4, #20]
 8016d16:	2302      	movs	r3, #2
 8016d18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d1c:	fb95 f5f3 	sdiv	r5, r5, r3
 8016d20:	f109 0301 	add.w	r3, r9, #1
 8016d24:	443b      	add	r3, r7
 8016d26:	429d      	cmp	r5, r3
 8016d28:	bf38      	it	cc
 8016d2a:	461d      	movcc	r5, r3
 8016d2c:	0553      	lsls	r3, r2, #21
 8016d2e:	d530      	bpl.n	8016d92 <__ssputs_r+0x9e>
 8016d30:	4629      	mov	r1, r5
 8016d32:	f7ff ff85 	bl	8016c40 <_malloc_r>
 8016d36:	4606      	mov	r6, r0
 8016d38:	b950      	cbnz	r0, 8016d50 <__ssputs_r+0x5c>
 8016d3a:	230c      	movs	r3, #12
 8016d3c:	f8ca 3000 	str.w	r3, [sl]
 8016d40:	89a3      	ldrh	r3, [r4, #12]
 8016d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d46:	81a3      	strh	r3, [r4, #12]
 8016d48:	f04f 30ff 	mov.w	r0, #4294967295
 8016d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d50:	463a      	mov	r2, r7
 8016d52:	6921      	ldr	r1, [r4, #16]
 8016d54:	f7ff fd9b 	bl	801688e <memcpy>
 8016d58:	89a3      	ldrh	r3, [r4, #12]
 8016d5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d62:	81a3      	strh	r3, [r4, #12]
 8016d64:	6126      	str	r6, [r4, #16]
 8016d66:	6165      	str	r5, [r4, #20]
 8016d68:	443e      	add	r6, r7
 8016d6a:	1bed      	subs	r5, r5, r7
 8016d6c:	6026      	str	r6, [r4, #0]
 8016d6e:	60a5      	str	r5, [r4, #8]
 8016d70:	464e      	mov	r6, r9
 8016d72:	454e      	cmp	r6, r9
 8016d74:	d900      	bls.n	8016d78 <__ssputs_r+0x84>
 8016d76:	464e      	mov	r6, r9
 8016d78:	4632      	mov	r2, r6
 8016d7a:	4641      	mov	r1, r8
 8016d7c:	6820      	ldr	r0, [r4, #0]
 8016d7e:	f7ff fd91 	bl	80168a4 <memmove>
 8016d82:	68a3      	ldr	r3, [r4, #8]
 8016d84:	1b9b      	subs	r3, r3, r6
 8016d86:	60a3      	str	r3, [r4, #8]
 8016d88:	6823      	ldr	r3, [r4, #0]
 8016d8a:	441e      	add	r6, r3
 8016d8c:	6026      	str	r6, [r4, #0]
 8016d8e:	2000      	movs	r0, #0
 8016d90:	e7dc      	b.n	8016d4c <__ssputs_r+0x58>
 8016d92:	462a      	mov	r2, r5
 8016d94:	f000 fe26 	bl	80179e4 <_realloc_r>
 8016d98:	4606      	mov	r6, r0
 8016d9a:	2800      	cmp	r0, #0
 8016d9c:	d1e2      	bne.n	8016d64 <__ssputs_r+0x70>
 8016d9e:	6921      	ldr	r1, [r4, #16]
 8016da0:	4650      	mov	r0, sl
 8016da2:	f7ff feff 	bl	8016ba4 <_free_r>
 8016da6:	e7c8      	b.n	8016d3a <__ssputs_r+0x46>

08016da8 <_svfiprintf_r>:
 8016da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dac:	461d      	mov	r5, r3
 8016dae:	898b      	ldrh	r3, [r1, #12]
 8016db0:	061f      	lsls	r7, r3, #24
 8016db2:	b09d      	sub	sp, #116	; 0x74
 8016db4:	4680      	mov	r8, r0
 8016db6:	460c      	mov	r4, r1
 8016db8:	4616      	mov	r6, r2
 8016dba:	d50f      	bpl.n	8016ddc <_svfiprintf_r+0x34>
 8016dbc:	690b      	ldr	r3, [r1, #16]
 8016dbe:	b96b      	cbnz	r3, 8016ddc <_svfiprintf_r+0x34>
 8016dc0:	2140      	movs	r1, #64	; 0x40
 8016dc2:	f7ff ff3d 	bl	8016c40 <_malloc_r>
 8016dc6:	6020      	str	r0, [r4, #0]
 8016dc8:	6120      	str	r0, [r4, #16]
 8016dca:	b928      	cbnz	r0, 8016dd8 <_svfiprintf_r+0x30>
 8016dcc:	230c      	movs	r3, #12
 8016dce:	f8c8 3000 	str.w	r3, [r8]
 8016dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8016dd6:	e0c8      	b.n	8016f6a <_svfiprintf_r+0x1c2>
 8016dd8:	2340      	movs	r3, #64	; 0x40
 8016dda:	6163      	str	r3, [r4, #20]
 8016ddc:	2300      	movs	r3, #0
 8016dde:	9309      	str	r3, [sp, #36]	; 0x24
 8016de0:	2320      	movs	r3, #32
 8016de2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016de6:	2330      	movs	r3, #48	; 0x30
 8016de8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016dec:	9503      	str	r5, [sp, #12]
 8016dee:	f04f 0b01 	mov.w	fp, #1
 8016df2:	4637      	mov	r7, r6
 8016df4:	463d      	mov	r5, r7
 8016df6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016dfa:	b10b      	cbz	r3, 8016e00 <_svfiprintf_r+0x58>
 8016dfc:	2b25      	cmp	r3, #37	; 0x25
 8016dfe:	d13e      	bne.n	8016e7e <_svfiprintf_r+0xd6>
 8016e00:	ebb7 0a06 	subs.w	sl, r7, r6
 8016e04:	d00b      	beq.n	8016e1e <_svfiprintf_r+0x76>
 8016e06:	4653      	mov	r3, sl
 8016e08:	4632      	mov	r2, r6
 8016e0a:	4621      	mov	r1, r4
 8016e0c:	4640      	mov	r0, r8
 8016e0e:	f7ff ff71 	bl	8016cf4 <__ssputs_r>
 8016e12:	3001      	adds	r0, #1
 8016e14:	f000 80a4 	beq.w	8016f60 <_svfiprintf_r+0x1b8>
 8016e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e1a:	4453      	add	r3, sl
 8016e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e1e:	783b      	ldrb	r3, [r7, #0]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	f000 809d 	beq.w	8016f60 <_svfiprintf_r+0x1b8>
 8016e26:	2300      	movs	r3, #0
 8016e28:	f04f 32ff 	mov.w	r2, #4294967295
 8016e2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e30:	9304      	str	r3, [sp, #16]
 8016e32:	9307      	str	r3, [sp, #28]
 8016e34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e38:	931a      	str	r3, [sp, #104]	; 0x68
 8016e3a:	462f      	mov	r7, r5
 8016e3c:	2205      	movs	r2, #5
 8016e3e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016e42:	4850      	ldr	r0, [pc, #320]	; (8016f84 <_svfiprintf_r+0x1dc>)
 8016e44:	f7e9 f9ec 	bl	8000220 <memchr>
 8016e48:	9b04      	ldr	r3, [sp, #16]
 8016e4a:	b9d0      	cbnz	r0, 8016e82 <_svfiprintf_r+0xda>
 8016e4c:	06d9      	lsls	r1, r3, #27
 8016e4e:	bf44      	itt	mi
 8016e50:	2220      	movmi	r2, #32
 8016e52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e56:	071a      	lsls	r2, r3, #28
 8016e58:	bf44      	itt	mi
 8016e5a:	222b      	movmi	r2, #43	; 0x2b
 8016e5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e60:	782a      	ldrb	r2, [r5, #0]
 8016e62:	2a2a      	cmp	r2, #42	; 0x2a
 8016e64:	d015      	beq.n	8016e92 <_svfiprintf_r+0xea>
 8016e66:	9a07      	ldr	r2, [sp, #28]
 8016e68:	462f      	mov	r7, r5
 8016e6a:	2000      	movs	r0, #0
 8016e6c:	250a      	movs	r5, #10
 8016e6e:	4639      	mov	r1, r7
 8016e70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e74:	3b30      	subs	r3, #48	; 0x30
 8016e76:	2b09      	cmp	r3, #9
 8016e78:	d94d      	bls.n	8016f16 <_svfiprintf_r+0x16e>
 8016e7a:	b1b8      	cbz	r0, 8016eac <_svfiprintf_r+0x104>
 8016e7c:	e00f      	b.n	8016e9e <_svfiprintf_r+0xf6>
 8016e7e:	462f      	mov	r7, r5
 8016e80:	e7b8      	b.n	8016df4 <_svfiprintf_r+0x4c>
 8016e82:	4a40      	ldr	r2, [pc, #256]	; (8016f84 <_svfiprintf_r+0x1dc>)
 8016e84:	1a80      	subs	r0, r0, r2
 8016e86:	fa0b f000 	lsl.w	r0, fp, r0
 8016e8a:	4318      	orrs	r0, r3
 8016e8c:	9004      	str	r0, [sp, #16]
 8016e8e:	463d      	mov	r5, r7
 8016e90:	e7d3      	b.n	8016e3a <_svfiprintf_r+0x92>
 8016e92:	9a03      	ldr	r2, [sp, #12]
 8016e94:	1d11      	adds	r1, r2, #4
 8016e96:	6812      	ldr	r2, [r2, #0]
 8016e98:	9103      	str	r1, [sp, #12]
 8016e9a:	2a00      	cmp	r2, #0
 8016e9c:	db01      	blt.n	8016ea2 <_svfiprintf_r+0xfa>
 8016e9e:	9207      	str	r2, [sp, #28]
 8016ea0:	e004      	b.n	8016eac <_svfiprintf_r+0x104>
 8016ea2:	4252      	negs	r2, r2
 8016ea4:	f043 0302 	orr.w	r3, r3, #2
 8016ea8:	9207      	str	r2, [sp, #28]
 8016eaa:	9304      	str	r3, [sp, #16]
 8016eac:	783b      	ldrb	r3, [r7, #0]
 8016eae:	2b2e      	cmp	r3, #46	; 0x2e
 8016eb0:	d10c      	bne.n	8016ecc <_svfiprintf_r+0x124>
 8016eb2:	787b      	ldrb	r3, [r7, #1]
 8016eb4:	2b2a      	cmp	r3, #42	; 0x2a
 8016eb6:	d133      	bne.n	8016f20 <_svfiprintf_r+0x178>
 8016eb8:	9b03      	ldr	r3, [sp, #12]
 8016eba:	1d1a      	adds	r2, r3, #4
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	9203      	str	r2, [sp, #12]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	bfb8      	it	lt
 8016ec4:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ec8:	3702      	adds	r7, #2
 8016eca:	9305      	str	r3, [sp, #20]
 8016ecc:	4d2e      	ldr	r5, [pc, #184]	; (8016f88 <_svfiprintf_r+0x1e0>)
 8016ece:	7839      	ldrb	r1, [r7, #0]
 8016ed0:	2203      	movs	r2, #3
 8016ed2:	4628      	mov	r0, r5
 8016ed4:	f7e9 f9a4 	bl	8000220 <memchr>
 8016ed8:	b138      	cbz	r0, 8016eea <_svfiprintf_r+0x142>
 8016eda:	2340      	movs	r3, #64	; 0x40
 8016edc:	1b40      	subs	r0, r0, r5
 8016ede:	fa03 f000 	lsl.w	r0, r3, r0
 8016ee2:	9b04      	ldr	r3, [sp, #16]
 8016ee4:	4303      	orrs	r3, r0
 8016ee6:	3701      	adds	r7, #1
 8016ee8:	9304      	str	r3, [sp, #16]
 8016eea:	7839      	ldrb	r1, [r7, #0]
 8016eec:	4827      	ldr	r0, [pc, #156]	; (8016f8c <_svfiprintf_r+0x1e4>)
 8016eee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ef2:	2206      	movs	r2, #6
 8016ef4:	1c7e      	adds	r6, r7, #1
 8016ef6:	f7e9 f993 	bl	8000220 <memchr>
 8016efa:	2800      	cmp	r0, #0
 8016efc:	d038      	beq.n	8016f70 <_svfiprintf_r+0x1c8>
 8016efe:	4b24      	ldr	r3, [pc, #144]	; (8016f90 <_svfiprintf_r+0x1e8>)
 8016f00:	bb13      	cbnz	r3, 8016f48 <_svfiprintf_r+0x1a0>
 8016f02:	9b03      	ldr	r3, [sp, #12]
 8016f04:	3307      	adds	r3, #7
 8016f06:	f023 0307 	bic.w	r3, r3, #7
 8016f0a:	3308      	adds	r3, #8
 8016f0c:	9303      	str	r3, [sp, #12]
 8016f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f10:	444b      	add	r3, r9
 8016f12:	9309      	str	r3, [sp, #36]	; 0x24
 8016f14:	e76d      	b.n	8016df2 <_svfiprintf_r+0x4a>
 8016f16:	fb05 3202 	mla	r2, r5, r2, r3
 8016f1a:	2001      	movs	r0, #1
 8016f1c:	460f      	mov	r7, r1
 8016f1e:	e7a6      	b.n	8016e6e <_svfiprintf_r+0xc6>
 8016f20:	2300      	movs	r3, #0
 8016f22:	3701      	adds	r7, #1
 8016f24:	9305      	str	r3, [sp, #20]
 8016f26:	4619      	mov	r1, r3
 8016f28:	250a      	movs	r5, #10
 8016f2a:	4638      	mov	r0, r7
 8016f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f30:	3a30      	subs	r2, #48	; 0x30
 8016f32:	2a09      	cmp	r2, #9
 8016f34:	d903      	bls.n	8016f3e <_svfiprintf_r+0x196>
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d0c8      	beq.n	8016ecc <_svfiprintf_r+0x124>
 8016f3a:	9105      	str	r1, [sp, #20]
 8016f3c:	e7c6      	b.n	8016ecc <_svfiprintf_r+0x124>
 8016f3e:	fb05 2101 	mla	r1, r5, r1, r2
 8016f42:	2301      	movs	r3, #1
 8016f44:	4607      	mov	r7, r0
 8016f46:	e7f0      	b.n	8016f2a <_svfiprintf_r+0x182>
 8016f48:	ab03      	add	r3, sp, #12
 8016f4a:	9300      	str	r3, [sp, #0]
 8016f4c:	4622      	mov	r2, r4
 8016f4e:	4b11      	ldr	r3, [pc, #68]	; (8016f94 <_svfiprintf_r+0x1ec>)
 8016f50:	a904      	add	r1, sp, #16
 8016f52:	4640      	mov	r0, r8
 8016f54:	f3af 8000 	nop.w
 8016f58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016f5c:	4681      	mov	r9, r0
 8016f5e:	d1d6      	bne.n	8016f0e <_svfiprintf_r+0x166>
 8016f60:	89a3      	ldrh	r3, [r4, #12]
 8016f62:	065b      	lsls	r3, r3, #25
 8016f64:	f53f af35 	bmi.w	8016dd2 <_svfiprintf_r+0x2a>
 8016f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f6a:	b01d      	add	sp, #116	; 0x74
 8016f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f70:	ab03      	add	r3, sp, #12
 8016f72:	9300      	str	r3, [sp, #0]
 8016f74:	4622      	mov	r2, r4
 8016f76:	4b07      	ldr	r3, [pc, #28]	; (8016f94 <_svfiprintf_r+0x1ec>)
 8016f78:	a904      	add	r1, sp, #16
 8016f7a:	4640      	mov	r0, r8
 8016f7c:	f000 f9c2 	bl	8017304 <_printf_i>
 8016f80:	e7ea      	b.n	8016f58 <_svfiprintf_r+0x1b0>
 8016f82:	bf00      	nop
 8016f84:	0803ae04 	.word	0x0803ae04
 8016f88:	0803ae0a 	.word	0x0803ae0a
 8016f8c:	0803ae0e 	.word	0x0803ae0e
 8016f90:	00000000 	.word	0x00000000
 8016f94:	08016cf5 	.word	0x08016cf5

08016f98 <__sfputc_r>:
 8016f98:	6893      	ldr	r3, [r2, #8]
 8016f9a:	3b01      	subs	r3, #1
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	b410      	push	{r4}
 8016fa0:	6093      	str	r3, [r2, #8]
 8016fa2:	da08      	bge.n	8016fb6 <__sfputc_r+0x1e>
 8016fa4:	6994      	ldr	r4, [r2, #24]
 8016fa6:	42a3      	cmp	r3, r4
 8016fa8:	db01      	blt.n	8016fae <__sfputc_r+0x16>
 8016faa:	290a      	cmp	r1, #10
 8016fac:	d103      	bne.n	8016fb6 <__sfputc_r+0x1e>
 8016fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fb2:	f000 bb0d 	b.w	80175d0 <__swbuf_r>
 8016fb6:	6813      	ldr	r3, [r2, #0]
 8016fb8:	1c58      	adds	r0, r3, #1
 8016fba:	6010      	str	r0, [r2, #0]
 8016fbc:	7019      	strb	r1, [r3, #0]
 8016fbe:	4608      	mov	r0, r1
 8016fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016fc4:	4770      	bx	lr

08016fc6 <__sfputs_r>:
 8016fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016fc8:	4606      	mov	r6, r0
 8016fca:	460f      	mov	r7, r1
 8016fcc:	4614      	mov	r4, r2
 8016fce:	18d5      	adds	r5, r2, r3
 8016fd0:	42ac      	cmp	r4, r5
 8016fd2:	d101      	bne.n	8016fd8 <__sfputs_r+0x12>
 8016fd4:	2000      	movs	r0, #0
 8016fd6:	e007      	b.n	8016fe8 <__sfputs_r+0x22>
 8016fd8:	463a      	mov	r2, r7
 8016fda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016fde:	4630      	mov	r0, r6
 8016fe0:	f7ff ffda 	bl	8016f98 <__sfputc_r>
 8016fe4:	1c43      	adds	r3, r0, #1
 8016fe6:	d1f3      	bne.n	8016fd0 <__sfputs_r+0xa>
 8016fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016fec <_vfiprintf_r>:
 8016fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ff0:	460c      	mov	r4, r1
 8016ff2:	b09d      	sub	sp, #116	; 0x74
 8016ff4:	4617      	mov	r7, r2
 8016ff6:	461d      	mov	r5, r3
 8016ff8:	4606      	mov	r6, r0
 8016ffa:	b118      	cbz	r0, 8017004 <_vfiprintf_r+0x18>
 8016ffc:	6983      	ldr	r3, [r0, #24]
 8016ffe:	b90b      	cbnz	r3, 8017004 <_vfiprintf_r+0x18>
 8017000:	f7ff fd3e 	bl	8016a80 <__sinit>
 8017004:	4b7c      	ldr	r3, [pc, #496]	; (80171f8 <_vfiprintf_r+0x20c>)
 8017006:	429c      	cmp	r4, r3
 8017008:	d158      	bne.n	80170bc <_vfiprintf_r+0xd0>
 801700a:	6874      	ldr	r4, [r6, #4]
 801700c:	89a3      	ldrh	r3, [r4, #12]
 801700e:	0718      	lsls	r0, r3, #28
 8017010:	d55e      	bpl.n	80170d0 <_vfiprintf_r+0xe4>
 8017012:	6923      	ldr	r3, [r4, #16]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d05b      	beq.n	80170d0 <_vfiprintf_r+0xe4>
 8017018:	2300      	movs	r3, #0
 801701a:	9309      	str	r3, [sp, #36]	; 0x24
 801701c:	2320      	movs	r3, #32
 801701e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017022:	2330      	movs	r3, #48	; 0x30
 8017024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017028:	9503      	str	r5, [sp, #12]
 801702a:	f04f 0b01 	mov.w	fp, #1
 801702e:	46b8      	mov	r8, r7
 8017030:	4645      	mov	r5, r8
 8017032:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017036:	b10b      	cbz	r3, 801703c <_vfiprintf_r+0x50>
 8017038:	2b25      	cmp	r3, #37	; 0x25
 801703a:	d154      	bne.n	80170e6 <_vfiprintf_r+0xfa>
 801703c:	ebb8 0a07 	subs.w	sl, r8, r7
 8017040:	d00b      	beq.n	801705a <_vfiprintf_r+0x6e>
 8017042:	4653      	mov	r3, sl
 8017044:	463a      	mov	r2, r7
 8017046:	4621      	mov	r1, r4
 8017048:	4630      	mov	r0, r6
 801704a:	f7ff ffbc 	bl	8016fc6 <__sfputs_r>
 801704e:	3001      	adds	r0, #1
 8017050:	f000 80c2 	beq.w	80171d8 <_vfiprintf_r+0x1ec>
 8017054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017056:	4453      	add	r3, sl
 8017058:	9309      	str	r3, [sp, #36]	; 0x24
 801705a:	f898 3000 	ldrb.w	r3, [r8]
 801705e:	2b00      	cmp	r3, #0
 8017060:	f000 80ba 	beq.w	80171d8 <_vfiprintf_r+0x1ec>
 8017064:	2300      	movs	r3, #0
 8017066:	f04f 32ff 	mov.w	r2, #4294967295
 801706a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801706e:	9304      	str	r3, [sp, #16]
 8017070:	9307      	str	r3, [sp, #28]
 8017072:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017076:	931a      	str	r3, [sp, #104]	; 0x68
 8017078:	46a8      	mov	r8, r5
 801707a:	2205      	movs	r2, #5
 801707c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8017080:	485e      	ldr	r0, [pc, #376]	; (80171fc <_vfiprintf_r+0x210>)
 8017082:	f7e9 f8cd 	bl	8000220 <memchr>
 8017086:	9b04      	ldr	r3, [sp, #16]
 8017088:	bb78      	cbnz	r0, 80170ea <_vfiprintf_r+0xfe>
 801708a:	06d9      	lsls	r1, r3, #27
 801708c:	bf44      	itt	mi
 801708e:	2220      	movmi	r2, #32
 8017090:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017094:	071a      	lsls	r2, r3, #28
 8017096:	bf44      	itt	mi
 8017098:	222b      	movmi	r2, #43	; 0x2b
 801709a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801709e:	782a      	ldrb	r2, [r5, #0]
 80170a0:	2a2a      	cmp	r2, #42	; 0x2a
 80170a2:	d02a      	beq.n	80170fa <_vfiprintf_r+0x10e>
 80170a4:	9a07      	ldr	r2, [sp, #28]
 80170a6:	46a8      	mov	r8, r5
 80170a8:	2000      	movs	r0, #0
 80170aa:	250a      	movs	r5, #10
 80170ac:	4641      	mov	r1, r8
 80170ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80170b2:	3b30      	subs	r3, #48	; 0x30
 80170b4:	2b09      	cmp	r3, #9
 80170b6:	d969      	bls.n	801718c <_vfiprintf_r+0x1a0>
 80170b8:	b360      	cbz	r0, 8017114 <_vfiprintf_r+0x128>
 80170ba:	e024      	b.n	8017106 <_vfiprintf_r+0x11a>
 80170bc:	4b50      	ldr	r3, [pc, #320]	; (8017200 <_vfiprintf_r+0x214>)
 80170be:	429c      	cmp	r4, r3
 80170c0:	d101      	bne.n	80170c6 <_vfiprintf_r+0xda>
 80170c2:	68b4      	ldr	r4, [r6, #8]
 80170c4:	e7a2      	b.n	801700c <_vfiprintf_r+0x20>
 80170c6:	4b4f      	ldr	r3, [pc, #316]	; (8017204 <_vfiprintf_r+0x218>)
 80170c8:	429c      	cmp	r4, r3
 80170ca:	bf08      	it	eq
 80170cc:	68f4      	ldreq	r4, [r6, #12]
 80170ce:	e79d      	b.n	801700c <_vfiprintf_r+0x20>
 80170d0:	4621      	mov	r1, r4
 80170d2:	4630      	mov	r0, r6
 80170d4:	f000 fae0 	bl	8017698 <__swsetup_r>
 80170d8:	2800      	cmp	r0, #0
 80170da:	d09d      	beq.n	8017018 <_vfiprintf_r+0x2c>
 80170dc:	f04f 30ff 	mov.w	r0, #4294967295
 80170e0:	b01d      	add	sp, #116	; 0x74
 80170e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170e6:	46a8      	mov	r8, r5
 80170e8:	e7a2      	b.n	8017030 <_vfiprintf_r+0x44>
 80170ea:	4a44      	ldr	r2, [pc, #272]	; (80171fc <_vfiprintf_r+0x210>)
 80170ec:	1a80      	subs	r0, r0, r2
 80170ee:	fa0b f000 	lsl.w	r0, fp, r0
 80170f2:	4318      	orrs	r0, r3
 80170f4:	9004      	str	r0, [sp, #16]
 80170f6:	4645      	mov	r5, r8
 80170f8:	e7be      	b.n	8017078 <_vfiprintf_r+0x8c>
 80170fa:	9a03      	ldr	r2, [sp, #12]
 80170fc:	1d11      	adds	r1, r2, #4
 80170fe:	6812      	ldr	r2, [r2, #0]
 8017100:	9103      	str	r1, [sp, #12]
 8017102:	2a00      	cmp	r2, #0
 8017104:	db01      	blt.n	801710a <_vfiprintf_r+0x11e>
 8017106:	9207      	str	r2, [sp, #28]
 8017108:	e004      	b.n	8017114 <_vfiprintf_r+0x128>
 801710a:	4252      	negs	r2, r2
 801710c:	f043 0302 	orr.w	r3, r3, #2
 8017110:	9207      	str	r2, [sp, #28]
 8017112:	9304      	str	r3, [sp, #16]
 8017114:	f898 3000 	ldrb.w	r3, [r8]
 8017118:	2b2e      	cmp	r3, #46	; 0x2e
 801711a:	d10e      	bne.n	801713a <_vfiprintf_r+0x14e>
 801711c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017120:	2b2a      	cmp	r3, #42	; 0x2a
 8017122:	d138      	bne.n	8017196 <_vfiprintf_r+0x1aa>
 8017124:	9b03      	ldr	r3, [sp, #12]
 8017126:	1d1a      	adds	r2, r3, #4
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	9203      	str	r2, [sp, #12]
 801712c:	2b00      	cmp	r3, #0
 801712e:	bfb8      	it	lt
 8017130:	f04f 33ff 	movlt.w	r3, #4294967295
 8017134:	f108 0802 	add.w	r8, r8, #2
 8017138:	9305      	str	r3, [sp, #20]
 801713a:	4d33      	ldr	r5, [pc, #204]	; (8017208 <_vfiprintf_r+0x21c>)
 801713c:	f898 1000 	ldrb.w	r1, [r8]
 8017140:	2203      	movs	r2, #3
 8017142:	4628      	mov	r0, r5
 8017144:	f7e9 f86c 	bl	8000220 <memchr>
 8017148:	b140      	cbz	r0, 801715c <_vfiprintf_r+0x170>
 801714a:	2340      	movs	r3, #64	; 0x40
 801714c:	1b40      	subs	r0, r0, r5
 801714e:	fa03 f000 	lsl.w	r0, r3, r0
 8017152:	9b04      	ldr	r3, [sp, #16]
 8017154:	4303      	orrs	r3, r0
 8017156:	f108 0801 	add.w	r8, r8, #1
 801715a:	9304      	str	r3, [sp, #16]
 801715c:	f898 1000 	ldrb.w	r1, [r8]
 8017160:	482a      	ldr	r0, [pc, #168]	; (801720c <_vfiprintf_r+0x220>)
 8017162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017166:	2206      	movs	r2, #6
 8017168:	f108 0701 	add.w	r7, r8, #1
 801716c:	f7e9 f858 	bl	8000220 <memchr>
 8017170:	2800      	cmp	r0, #0
 8017172:	d037      	beq.n	80171e4 <_vfiprintf_r+0x1f8>
 8017174:	4b26      	ldr	r3, [pc, #152]	; (8017210 <_vfiprintf_r+0x224>)
 8017176:	bb1b      	cbnz	r3, 80171c0 <_vfiprintf_r+0x1d4>
 8017178:	9b03      	ldr	r3, [sp, #12]
 801717a:	3307      	adds	r3, #7
 801717c:	f023 0307 	bic.w	r3, r3, #7
 8017180:	3308      	adds	r3, #8
 8017182:	9303      	str	r3, [sp, #12]
 8017184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017186:	444b      	add	r3, r9
 8017188:	9309      	str	r3, [sp, #36]	; 0x24
 801718a:	e750      	b.n	801702e <_vfiprintf_r+0x42>
 801718c:	fb05 3202 	mla	r2, r5, r2, r3
 8017190:	2001      	movs	r0, #1
 8017192:	4688      	mov	r8, r1
 8017194:	e78a      	b.n	80170ac <_vfiprintf_r+0xc0>
 8017196:	2300      	movs	r3, #0
 8017198:	f108 0801 	add.w	r8, r8, #1
 801719c:	9305      	str	r3, [sp, #20]
 801719e:	4619      	mov	r1, r3
 80171a0:	250a      	movs	r5, #10
 80171a2:	4640      	mov	r0, r8
 80171a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171a8:	3a30      	subs	r2, #48	; 0x30
 80171aa:	2a09      	cmp	r2, #9
 80171ac:	d903      	bls.n	80171b6 <_vfiprintf_r+0x1ca>
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d0c3      	beq.n	801713a <_vfiprintf_r+0x14e>
 80171b2:	9105      	str	r1, [sp, #20]
 80171b4:	e7c1      	b.n	801713a <_vfiprintf_r+0x14e>
 80171b6:	fb05 2101 	mla	r1, r5, r1, r2
 80171ba:	2301      	movs	r3, #1
 80171bc:	4680      	mov	r8, r0
 80171be:	e7f0      	b.n	80171a2 <_vfiprintf_r+0x1b6>
 80171c0:	ab03      	add	r3, sp, #12
 80171c2:	9300      	str	r3, [sp, #0]
 80171c4:	4622      	mov	r2, r4
 80171c6:	4b13      	ldr	r3, [pc, #76]	; (8017214 <_vfiprintf_r+0x228>)
 80171c8:	a904      	add	r1, sp, #16
 80171ca:	4630      	mov	r0, r6
 80171cc:	f3af 8000 	nop.w
 80171d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80171d4:	4681      	mov	r9, r0
 80171d6:	d1d5      	bne.n	8017184 <_vfiprintf_r+0x198>
 80171d8:	89a3      	ldrh	r3, [r4, #12]
 80171da:	065b      	lsls	r3, r3, #25
 80171dc:	f53f af7e 	bmi.w	80170dc <_vfiprintf_r+0xf0>
 80171e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80171e2:	e77d      	b.n	80170e0 <_vfiprintf_r+0xf4>
 80171e4:	ab03      	add	r3, sp, #12
 80171e6:	9300      	str	r3, [sp, #0]
 80171e8:	4622      	mov	r2, r4
 80171ea:	4b0a      	ldr	r3, [pc, #40]	; (8017214 <_vfiprintf_r+0x228>)
 80171ec:	a904      	add	r1, sp, #16
 80171ee:	4630      	mov	r0, r6
 80171f0:	f000 f888 	bl	8017304 <_printf_i>
 80171f4:	e7ec      	b.n	80171d0 <_vfiprintf_r+0x1e4>
 80171f6:	bf00      	nop
 80171f8:	0803adc4 	.word	0x0803adc4
 80171fc:	0803ae04 	.word	0x0803ae04
 8017200:	0803ade4 	.word	0x0803ade4
 8017204:	0803ada4 	.word	0x0803ada4
 8017208:	0803ae0a 	.word	0x0803ae0a
 801720c:	0803ae0e 	.word	0x0803ae0e
 8017210:	00000000 	.word	0x00000000
 8017214:	08016fc7 	.word	0x08016fc7

08017218 <_printf_common>:
 8017218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801721c:	4691      	mov	r9, r2
 801721e:	461f      	mov	r7, r3
 8017220:	688a      	ldr	r2, [r1, #8]
 8017222:	690b      	ldr	r3, [r1, #16]
 8017224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017228:	4293      	cmp	r3, r2
 801722a:	bfb8      	it	lt
 801722c:	4613      	movlt	r3, r2
 801722e:	f8c9 3000 	str.w	r3, [r9]
 8017232:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017236:	4606      	mov	r6, r0
 8017238:	460c      	mov	r4, r1
 801723a:	b112      	cbz	r2, 8017242 <_printf_common+0x2a>
 801723c:	3301      	adds	r3, #1
 801723e:	f8c9 3000 	str.w	r3, [r9]
 8017242:	6823      	ldr	r3, [r4, #0]
 8017244:	0699      	lsls	r1, r3, #26
 8017246:	bf42      	ittt	mi
 8017248:	f8d9 3000 	ldrmi.w	r3, [r9]
 801724c:	3302      	addmi	r3, #2
 801724e:	f8c9 3000 	strmi.w	r3, [r9]
 8017252:	6825      	ldr	r5, [r4, #0]
 8017254:	f015 0506 	ands.w	r5, r5, #6
 8017258:	d107      	bne.n	801726a <_printf_common+0x52>
 801725a:	f104 0a19 	add.w	sl, r4, #25
 801725e:	68e3      	ldr	r3, [r4, #12]
 8017260:	f8d9 2000 	ldr.w	r2, [r9]
 8017264:	1a9b      	subs	r3, r3, r2
 8017266:	42ab      	cmp	r3, r5
 8017268:	dc28      	bgt.n	80172bc <_printf_common+0xa4>
 801726a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801726e:	6822      	ldr	r2, [r4, #0]
 8017270:	3300      	adds	r3, #0
 8017272:	bf18      	it	ne
 8017274:	2301      	movne	r3, #1
 8017276:	0692      	lsls	r2, r2, #26
 8017278:	d42d      	bmi.n	80172d6 <_printf_common+0xbe>
 801727a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801727e:	4639      	mov	r1, r7
 8017280:	4630      	mov	r0, r6
 8017282:	47c0      	blx	r8
 8017284:	3001      	adds	r0, #1
 8017286:	d020      	beq.n	80172ca <_printf_common+0xb2>
 8017288:	6823      	ldr	r3, [r4, #0]
 801728a:	68e5      	ldr	r5, [r4, #12]
 801728c:	f8d9 2000 	ldr.w	r2, [r9]
 8017290:	f003 0306 	and.w	r3, r3, #6
 8017294:	2b04      	cmp	r3, #4
 8017296:	bf08      	it	eq
 8017298:	1aad      	subeq	r5, r5, r2
 801729a:	68a3      	ldr	r3, [r4, #8]
 801729c:	6922      	ldr	r2, [r4, #16]
 801729e:	bf0c      	ite	eq
 80172a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80172a4:	2500      	movne	r5, #0
 80172a6:	4293      	cmp	r3, r2
 80172a8:	bfc4      	itt	gt
 80172aa:	1a9b      	subgt	r3, r3, r2
 80172ac:	18ed      	addgt	r5, r5, r3
 80172ae:	f04f 0900 	mov.w	r9, #0
 80172b2:	341a      	adds	r4, #26
 80172b4:	454d      	cmp	r5, r9
 80172b6:	d11a      	bne.n	80172ee <_printf_common+0xd6>
 80172b8:	2000      	movs	r0, #0
 80172ba:	e008      	b.n	80172ce <_printf_common+0xb6>
 80172bc:	2301      	movs	r3, #1
 80172be:	4652      	mov	r2, sl
 80172c0:	4639      	mov	r1, r7
 80172c2:	4630      	mov	r0, r6
 80172c4:	47c0      	blx	r8
 80172c6:	3001      	adds	r0, #1
 80172c8:	d103      	bne.n	80172d2 <_printf_common+0xba>
 80172ca:	f04f 30ff 	mov.w	r0, #4294967295
 80172ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172d2:	3501      	adds	r5, #1
 80172d4:	e7c3      	b.n	801725e <_printf_common+0x46>
 80172d6:	18e1      	adds	r1, r4, r3
 80172d8:	1c5a      	adds	r2, r3, #1
 80172da:	2030      	movs	r0, #48	; 0x30
 80172dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80172e0:	4422      	add	r2, r4
 80172e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80172e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80172ea:	3302      	adds	r3, #2
 80172ec:	e7c5      	b.n	801727a <_printf_common+0x62>
 80172ee:	2301      	movs	r3, #1
 80172f0:	4622      	mov	r2, r4
 80172f2:	4639      	mov	r1, r7
 80172f4:	4630      	mov	r0, r6
 80172f6:	47c0      	blx	r8
 80172f8:	3001      	adds	r0, #1
 80172fa:	d0e6      	beq.n	80172ca <_printf_common+0xb2>
 80172fc:	f109 0901 	add.w	r9, r9, #1
 8017300:	e7d8      	b.n	80172b4 <_printf_common+0x9c>
	...

08017304 <_printf_i>:
 8017304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017308:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801730c:	460c      	mov	r4, r1
 801730e:	7e09      	ldrb	r1, [r1, #24]
 8017310:	b085      	sub	sp, #20
 8017312:	296e      	cmp	r1, #110	; 0x6e
 8017314:	4617      	mov	r7, r2
 8017316:	4606      	mov	r6, r0
 8017318:	4698      	mov	r8, r3
 801731a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801731c:	f000 80b3 	beq.w	8017486 <_printf_i+0x182>
 8017320:	d822      	bhi.n	8017368 <_printf_i+0x64>
 8017322:	2963      	cmp	r1, #99	; 0x63
 8017324:	d036      	beq.n	8017394 <_printf_i+0x90>
 8017326:	d80a      	bhi.n	801733e <_printf_i+0x3a>
 8017328:	2900      	cmp	r1, #0
 801732a:	f000 80b9 	beq.w	80174a0 <_printf_i+0x19c>
 801732e:	2958      	cmp	r1, #88	; 0x58
 8017330:	f000 8083 	beq.w	801743a <_printf_i+0x136>
 8017334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017338:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801733c:	e032      	b.n	80173a4 <_printf_i+0xa0>
 801733e:	2964      	cmp	r1, #100	; 0x64
 8017340:	d001      	beq.n	8017346 <_printf_i+0x42>
 8017342:	2969      	cmp	r1, #105	; 0x69
 8017344:	d1f6      	bne.n	8017334 <_printf_i+0x30>
 8017346:	6820      	ldr	r0, [r4, #0]
 8017348:	6813      	ldr	r3, [r2, #0]
 801734a:	0605      	lsls	r5, r0, #24
 801734c:	f103 0104 	add.w	r1, r3, #4
 8017350:	d52a      	bpl.n	80173a8 <_printf_i+0xa4>
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	6011      	str	r1, [r2, #0]
 8017356:	2b00      	cmp	r3, #0
 8017358:	da03      	bge.n	8017362 <_printf_i+0x5e>
 801735a:	222d      	movs	r2, #45	; 0x2d
 801735c:	425b      	negs	r3, r3
 801735e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8017362:	486f      	ldr	r0, [pc, #444]	; (8017520 <_printf_i+0x21c>)
 8017364:	220a      	movs	r2, #10
 8017366:	e039      	b.n	80173dc <_printf_i+0xd8>
 8017368:	2973      	cmp	r1, #115	; 0x73
 801736a:	f000 809d 	beq.w	80174a8 <_printf_i+0x1a4>
 801736e:	d808      	bhi.n	8017382 <_printf_i+0x7e>
 8017370:	296f      	cmp	r1, #111	; 0x6f
 8017372:	d020      	beq.n	80173b6 <_printf_i+0xb2>
 8017374:	2970      	cmp	r1, #112	; 0x70
 8017376:	d1dd      	bne.n	8017334 <_printf_i+0x30>
 8017378:	6823      	ldr	r3, [r4, #0]
 801737a:	f043 0320 	orr.w	r3, r3, #32
 801737e:	6023      	str	r3, [r4, #0]
 8017380:	e003      	b.n	801738a <_printf_i+0x86>
 8017382:	2975      	cmp	r1, #117	; 0x75
 8017384:	d017      	beq.n	80173b6 <_printf_i+0xb2>
 8017386:	2978      	cmp	r1, #120	; 0x78
 8017388:	d1d4      	bne.n	8017334 <_printf_i+0x30>
 801738a:	2378      	movs	r3, #120	; 0x78
 801738c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017390:	4864      	ldr	r0, [pc, #400]	; (8017524 <_printf_i+0x220>)
 8017392:	e055      	b.n	8017440 <_printf_i+0x13c>
 8017394:	6813      	ldr	r3, [r2, #0]
 8017396:	1d19      	adds	r1, r3, #4
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	6011      	str	r1, [r2, #0]
 801739c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80173a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80173a4:	2301      	movs	r3, #1
 80173a6:	e08c      	b.n	80174c2 <_printf_i+0x1be>
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	6011      	str	r1, [r2, #0]
 80173ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80173b0:	bf18      	it	ne
 80173b2:	b21b      	sxthne	r3, r3
 80173b4:	e7cf      	b.n	8017356 <_printf_i+0x52>
 80173b6:	6813      	ldr	r3, [r2, #0]
 80173b8:	6825      	ldr	r5, [r4, #0]
 80173ba:	1d18      	adds	r0, r3, #4
 80173bc:	6010      	str	r0, [r2, #0]
 80173be:	0628      	lsls	r0, r5, #24
 80173c0:	d501      	bpl.n	80173c6 <_printf_i+0xc2>
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	e002      	b.n	80173cc <_printf_i+0xc8>
 80173c6:	0668      	lsls	r0, r5, #25
 80173c8:	d5fb      	bpl.n	80173c2 <_printf_i+0xbe>
 80173ca:	881b      	ldrh	r3, [r3, #0]
 80173cc:	4854      	ldr	r0, [pc, #336]	; (8017520 <_printf_i+0x21c>)
 80173ce:	296f      	cmp	r1, #111	; 0x6f
 80173d0:	bf14      	ite	ne
 80173d2:	220a      	movne	r2, #10
 80173d4:	2208      	moveq	r2, #8
 80173d6:	2100      	movs	r1, #0
 80173d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80173dc:	6865      	ldr	r5, [r4, #4]
 80173de:	60a5      	str	r5, [r4, #8]
 80173e0:	2d00      	cmp	r5, #0
 80173e2:	f2c0 8095 	blt.w	8017510 <_printf_i+0x20c>
 80173e6:	6821      	ldr	r1, [r4, #0]
 80173e8:	f021 0104 	bic.w	r1, r1, #4
 80173ec:	6021      	str	r1, [r4, #0]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d13d      	bne.n	801746e <_printf_i+0x16a>
 80173f2:	2d00      	cmp	r5, #0
 80173f4:	f040 808e 	bne.w	8017514 <_printf_i+0x210>
 80173f8:	4665      	mov	r5, ip
 80173fa:	2a08      	cmp	r2, #8
 80173fc:	d10b      	bne.n	8017416 <_printf_i+0x112>
 80173fe:	6823      	ldr	r3, [r4, #0]
 8017400:	07db      	lsls	r3, r3, #31
 8017402:	d508      	bpl.n	8017416 <_printf_i+0x112>
 8017404:	6923      	ldr	r3, [r4, #16]
 8017406:	6862      	ldr	r2, [r4, #4]
 8017408:	429a      	cmp	r2, r3
 801740a:	bfde      	ittt	le
 801740c:	2330      	movle	r3, #48	; 0x30
 801740e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017412:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017416:	ebac 0305 	sub.w	r3, ip, r5
 801741a:	6123      	str	r3, [r4, #16]
 801741c:	f8cd 8000 	str.w	r8, [sp]
 8017420:	463b      	mov	r3, r7
 8017422:	aa03      	add	r2, sp, #12
 8017424:	4621      	mov	r1, r4
 8017426:	4630      	mov	r0, r6
 8017428:	f7ff fef6 	bl	8017218 <_printf_common>
 801742c:	3001      	adds	r0, #1
 801742e:	d14d      	bne.n	80174cc <_printf_i+0x1c8>
 8017430:	f04f 30ff 	mov.w	r0, #4294967295
 8017434:	b005      	add	sp, #20
 8017436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801743a:	4839      	ldr	r0, [pc, #228]	; (8017520 <_printf_i+0x21c>)
 801743c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8017440:	6813      	ldr	r3, [r2, #0]
 8017442:	6821      	ldr	r1, [r4, #0]
 8017444:	1d1d      	adds	r5, r3, #4
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	6015      	str	r5, [r2, #0]
 801744a:	060a      	lsls	r2, r1, #24
 801744c:	d50b      	bpl.n	8017466 <_printf_i+0x162>
 801744e:	07ca      	lsls	r2, r1, #31
 8017450:	bf44      	itt	mi
 8017452:	f041 0120 	orrmi.w	r1, r1, #32
 8017456:	6021      	strmi	r1, [r4, #0]
 8017458:	b91b      	cbnz	r3, 8017462 <_printf_i+0x15e>
 801745a:	6822      	ldr	r2, [r4, #0]
 801745c:	f022 0220 	bic.w	r2, r2, #32
 8017460:	6022      	str	r2, [r4, #0]
 8017462:	2210      	movs	r2, #16
 8017464:	e7b7      	b.n	80173d6 <_printf_i+0xd2>
 8017466:	064d      	lsls	r5, r1, #25
 8017468:	bf48      	it	mi
 801746a:	b29b      	uxthmi	r3, r3
 801746c:	e7ef      	b.n	801744e <_printf_i+0x14a>
 801746e:	4665      	mov	r5, ip
 8017470:	fbb3 f1f2 	udiv	r1, r3, r2
 8017474:	fb02 3311 	mls	r3, r2, r1, r3
 8017478:	5cc3      	ldrb	r3, [r0, r3]
 801747a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801747e:	460b      	mov	r3, r1
 8017480:	2900      	cmp	r1, #0
 8017482:	d1f5      	bne.n	8017470 <_printf_i+0x16c>
 8017484:	e7b9      	b.n	80173fa <_printf_i+0xf6>
 8017486:	6813      	ldr	r3, [r2, #0]
 8017488:	6825      	ldr	r5, [r4, #0]
 801748a:	6961      	ldr	r1, [r4, #20]
 801748c:	1d18      	adds	r0, r3, #4
 801748e:	6010      	str	r0, [r2, #0]
 8017490:	0628      	lsls	r0, r5, #24
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	d501      	bpl.n	801749a <_printf_i+0x196>
 8017496:	6019      	str	r1, [r3, #0]
 8017498:	e002      	b.n	80174a0 <_printf_i+0x19c>
 801749a:	066a      	lsls	r2, r5, #25
 801749c:	d5fb      	bpl.n	8017496 <_printf_i+0x192>
 801749e:	8019      	strh	r1, [r3, #0]
 80174a0:	2300      	movs	r3, #0
 80174a2:	6123      	str	r3, [r4, #16]
 80174a4:	4665      	mov	r5, ip
 80174a6:	e7b9      	b.n	801741c <_printf_i+0x118>
 80174a8:	6813      	ldr	r3, [r2, #0]
 80174aa:	1d19      	adds	r1, r3, #4
 80174ac:	6011      	str	r1, [r2, #0]
 80174ae:	681d      	ldr	r5, [r3, #0]
 80174b0:	6862      	ldr	r2, [r4, #4]
 80174b2:	2100      	movs	r1, #0
 80174b4:	4628      	mov	r0, r5
 80174b6:	f7e8 feb3 	bl	8000220 <memchr>
 80174ba:	b108      	cbz	r0, 80174c0 <_printf_i+0x1bc>
 80174bc:	1b40      	subs	r0, r0, r5
 80174be:	6060      	str	r0, [r4, #4]
 80174c0:	6863      	ldr	r3, [r4, #4]
 80174c2:	6123      	str	r3, [r4, #16]
 80174c4:	2300      	movs	r3, #0
 80174c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80174ca:	e7a7      	b.n	801741c <_printf_i+0x118>
 80174cc:	6923      	ldr	r3, [r4, #16]
 80174ce:	462a      	mov	r2, r5
 80174d0:	4639      	mov	r1, r7
 80174d2:	4630      	mov	r0, r6
 80174d4:	47c0      	blx	r8
 80174d6:	3001      	adds	r0, #1
 80174d8:	d0aa      	beq.n	8017430 <_printf_i+0x12c>
 80174da:	6823      	ldr	r3, [r4, #0]
 80174dc:	079b      	lsls	r3, r3, #30
 80174de:	d413      	bmi.n	8017508 <_printf_i+0x204>
 80174e0:	68e0      	ldr	r0, [r4, #12]
 80174e2:	9b03      	ldr	r3, [sp, #12]
 80174e4:	4298      	cmp	r0, r3
 80174e6:	bfb8      	it	lt
 80174e8:	4618      	movlt	r0, r3
 80174ea:	e7a3      	b.n	8017434 <_printf_i+0x130>
 80174ec:	2301      	movs	r3, #1
 80174ee:	464a      	mov	r2, r9
 80174f0:	4639      	mov	r1, r7
 80174f2:	4630      	mov	r0, r6
 80174f4:	47c0      	blx	r8
 80174f6:	3001      	adds	r0, #1
 80174f8:	d09a      	beq.n	8017430 <_printf_i+0x12c>
 80174fa:	3501      	adds	r5, #1
 80174fc:	68e3      	ldr	r3, [r4, #12]
 80174fe:	9a03      	ldr	r2, [sp, #12]
 8017500:	1a9b      	subs	r3, r3, r2
 8017502:	42ab      	cmp	r3, r5
 8017504:	dcf2      	bgt.n	80174ec <_printf_i+0x1e8>
 8017506:	e7eb      	b.n	80174e0 <_printf_i+0x1dc>
 8017508:	2500      	movs	r5, #0
 801750a:	f104 0919 	add.w	r9, r4, #25
 801750e:	e7f5      	b.n	80174fc <_printf_i+0x1f8>
 8017510:	2b00      	cmp	r3, #0
 8017512:	d1ac      	bne.n	801746e <_printf_i+0x16a>
 8017514:	7803      	ldrb	r3, [r0, #0]
 8017516:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801751a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801751e:	e76c      	b.n	80173fa <_printf_i+0xf6>
 8017520:	0803ae15 	.word	0x0803ae15
 8017524:	0803ae26 	.word	0x0803ae26

08017528 <_sbrk_r>:
 8017528:	b538      	push	{r3, r4, r5, lr}
 801752a:	4c06      	ldr	r4, [pc, #24]	; (8017544 <_sbrk_r+0x1c>)
 801752c:	2300      	movs	r3, #0
 801752e:	4605      	mov	r5, r0
 8017530:	4608      	mov	r0, r1
 8017532:	6023      	str	r3, [r4, #0]
 8017534:	f7e9 fb66 	bl	8000c04 <_sbrk>
 8017538:	1c43      	adds	r3, r0, #1
 801753a:	d102      	bne.n	8017542 <_sbrk_r+0x1a>
 801753c:	6823      	ldr	r3, [r4, #0]
 801753e:	b103      	cbz	r3, 8017542 <_sbrk_r+0x1a>
 8017540:	602b      	str	r3, [r5, #0]
 8017542:	bd38      	pop	{r3, r4, r5, pc}
 8017544:	20016e58 	.word	0x20016e58

08017548 <__sread>:
 8017548:	b510      	push	{r4, lr}
 801754a:	460c      	mov	r4, r1
 801754c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017550:	f000 fa6e 	bl	8017a30 <_read_r>
 8017554:	2800      	cmp	r0, #0
 8017556:	bfab      	itete	ge
 8017558:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801755a:	89a3      	ldrhlt	r3, [r4, #12]
 801755c:	181b      	addge	r3, r3, r0
 801755e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017562:	bfac      	ite	ge
 8017564:	6563      	strge	r3, [r4, #84]	; 0x54
 8017566:	81a3      	strhlt	r3, [r4, #12]
 8017568:	bd10      	pop	{r4, pc}

0801756a <__swrite>:
 801756a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801756e:	461f      	mov	r7, r3
 8017570:	898b      	ldrh	r3, [r1, #12]
 8017572:	05db      	lsls	r3, r3, #23
 8017574:	4605      	mov	r5, r0
 8017576:	460c      	mov	r4, r1
 8017578:	4616      	mov	r6, r2
 801757a:	d505      	bpl.n	8017588 <__swrite+0x1e>
 801757c:	2302      	movs	r3, #2
 801757e:	2200      	movs	r2, #0
 8017580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017584:	f000 f9b6 	bl	80178f4 <_lseek_r>
 8017588:	89a3      	ldrh	r3, [r4, #12]
 801758a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801758e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017592:	81a3      	strh	r3, [r4, #12]
 8017594:	4632      	mov	r2, r6
 8017596:	463b      	mov	r3, r7
 8017598:	4628      	mov	r0, r5
 801759a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801759e:	f000 b869 	b.w	8017674 <_write_r>

080175a2 <__sseek>:
 80175a2:	b510      	push	{r4, lr}
 80175a4:	460c      	mov	r4, r1
 80175a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175aa:	f000 f9a3 	bl	80178f4 <_lseek_r>
 80175ae:	1c43      	adds	r3, r0, #1
 80175b0:	89a3      	ldrh	r3, [r4, #12]
 80175b2:	bf15      	itete	ne
 80175b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80175b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80175ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80175be:	81a3      	strheq	r3, [r4, #12]
 80175c0:	bf18      	it	ne
 80175c2:	81a3      	strhne	r3, [r4, #12]
 80175c4:	bd10      	pop	{r4, pc}

080175c6 <__sclose>:
 80175c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175ca:	f000 b8d3 	b.w	8017774 <_close_r>
	...

080175d0 <__swbuf_r>:
 80175d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175d2:	460e      	mov	r6, r1
 80175d4:	4614      	mov	r4, r2
 80175d6:	4605      	mov	r5, r0
 80175d8:	b118      	cbz	r0, 80175e2 <__swbuf_r+0x12>
 80175da:	6983      	ldr	r3, [r0, #24]
 80175dc:	b90b      	cbnz	r3, 80175e2 <__swbuf_r+0x12>
 80175de:	f7ff fa4f 	bl	8016a80 <__sinit>
 80175e2:	4b21      	ldr	r3, [pc, #132]	; (8017668 <__swbuf_r+0x98>)
 80175e4:	429c      	cmp	r4, r3
 80175e6:	d12a      	bne.n	801763e <__swbuf_r+0x6e>
 80175e8:	686c      	ldr	r4, [r5, #4]
 80175ea:	69a3      	ldr	r3, [r4, #24]
 80175ec:	60a3      	str	r3, [r4, #8]
 80175ee:	89a3      	ldrh	r3, [r4, #12]
 80175f0:	071a      	lsls	r2, r3, #28
 80175f2:	d52e      	bpl.n	8017652 <__swbuf_r+0x82>
 80175f4:	6923      	ldr	r3, [r4, #16]
 80175f6:	b363      	cbz	r3, 8017652 <__swbuf_r+0x82>
 80175f8:	6923      	ldr	r3, [r4, #16]
 80175fa:	6820      	ldr	r0, [r4, #0]
 80175fc:	1ac0      	subs	r0, r0, r3
 80175fe:	6963      	ldr	r3, [r4, #20]
 8017600:	b2f6      	uxtb	r6, r6
 8017602:	4283      	cmp	r3, r0
 8017604:	4637      	mov	r7, r6
 8017606:	dc04      	bgt.n	8017612 <__swbuf_r+0x42>
 8017608:	4621      	mov	r1, r4
 801760a:	4628      	mov	r0, r5
 801760c:	f000 f948 	bl	80178a0 <_fflush_r>
 8017610:	bb28      	cbnz	r0, 801765e <__swbuf_r+0x8e>
 8017612:	68a3      	ldr	r3, [r4, #8]
 8017614:	3b01      	subs	r3, #1
 8017616:	60a3      	str	r3, [r4, #8]
 8017618:	6823      	ldr	r3, [r4, #0]
 801761a:	1c5a      	adds	r2, r3, #1
 801761c:	6022      	str	r2, [r4, #0]
 801761e:	701e      	strb	r6, [r3, #0]
 8017620:	6963      	ldr	r3, [r4, #20]
 8017622:	3001      	adds	r0, #1
 8017624:	4283      	cmp	r3, r0
 8017626:	d004      	beq.n	8017632 <__swbuf_r+0x62>
 8017628:	89a3      	ldrh	r3, [r4, #12]
 801762a:	07db      	lsls	r3, r3, #31
 801762c:	d519      	bpl.n	8017662 <__swbuf_r+0x92>
 801762e:	2e0a      	cmp	r6, #10
 8017630:	d117      	bne.n	8017662 <__swbuf_r+0x92>
 8017632:	4621      	mov	r1, r4
 8017634:	4628      	mov	r0, r5
 8017636:	f000 f933 	bl	80178a0 <_fflush_r>
 801763a:	b190      	cbz	r0, 8017662 <__swbuf_r+0x92>
 801763c:	e00f      	b.n	801765e <__swbuf_r+0x8e>
 801763e:	4b0b      	ldr	r3, [pc, #44]	; (801766c <__swbuf_r+0x9c>)
 8017640:	429c      	cmp	r4, r3
 8017642:	d101      	bne.n	8017648 <__swbuf_r+0x78>
 8017644:	68ac      	ldr	r4, [r5, #8]
 8017646:	e7d0      	b.n	80175ea <__swbuf_r+0x1a>
 8017648:	4b09      	ldr	r3, [pc, #36]	; (8017670 <__swbuf_r+0xa0>)
 801764a:	429c      	cmp	r4, r3
 801764c:	bf08      	it	eq
 801764e:	68ec      	ldreq	r4, [r5, #12]
 8017650:	e7cb      	b.n	80175ea <__swbuf_r+0x1a>
 8017652:	4621      	mov	r1, r4
 8017654:	4628      	mov	r0, r5
 8017656:	f000 f81f 	bl	8017698 <__swsetup_r>
 801765a:	2800      	cmp	r0, #0
 801765c:	d0cc      	beq.n	80175f8 <__swbuf_r+0x28>
 801765e:	f04f 37ff 	mov.w	r7, #4294967295
 8017662:	4638      	mov	r0, r7
 8017664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017666:	bf00      	nop
 8017668:	0803adc4 	.word	0x0803adc4
 801766c:	0803ade4 	.word	0x0803ade4
 8017670:	0803ada4 	.word	0x0803ada4

08017674 <_write_r>:
 8017674:	b538      	push	{r3, r4, r5, lr}
 8017676:	4c07      	ldr	r4, [pc, #28]	; (8017694 <_write_r+0x20>)
 8017678:	4605      	mov	r5, r0
 801767a:	4608      	mov	r0, r1
 801767c:	4611      	mov	r1, r2
 801767e:	2200      	movs	r2, #0
 8017680:	6022      	str	r2, [r4, #0]
 8017682:	461a      	mov	r2, r3
 8017684:	f7e9 fa6d 	bl	8000b62 <_write>
 8017688:	1c43      	adds	r3, r0, #1
 801768a:	d102      	bne.n	8017692 <_write_r+0x1e>
 801768c:	6823      	ldr	r3, [r4, #0]
 801768e:	b103      	cbz	r3, 8017692 <_write_r+0x1e>
 8017690:	602b      	str	r3, [r5, #0]
 8017692:	bd38      	pop	{r3, r4, r5, pc}
 8017694:	20016e58 	.word	0x20016e58

08017698 <__swsetup_r>:
 8017698:	4b32      	ldr	r3, [pc, #200]	; (8017764 <__swsetup_r+0xcc>)
 801769a:	b570      	push	{r4, r5, r6, lr}
 801769c:	681d      	ldr	r5, [r3, #0]
 801769e:	4606      	mov	r6, r0
 80176a0:	460c      	mov	r4, r1
 80176a2:	b125      	cbz	r5, 80176ae <__swsetup_r+0x16>
 80176a4:	69ab      	ldr	r3, [r5, #24]
 80176a6:	b913      	cbnz	r3, 80176ae <__swsetup_r+0x16>
 80176a8:	4628      	mov	r0, r5
 80176aa:	f7ff f9e9 	bl	8016a80 <__sinit>
 80176ae:	4b2e      	ldr	r3, [pc, #184]	; (8017768 <__swsetup_r+0xd0>)
 80176b0:	429c      	cmp	r4, r3
 80176b2:	d10f      	bne.n	80176d4 <__swsetup_r+0x3c>
 80176b4:	686c      	ldr	r4, [r5, #4]
 80176b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80176ba:	b29a      	uxth	r2, r3
 80176bc:	0715      	lsls	r5, r2, #28
 80176be:	d42c      	bmi.n	801771a <__swsetup_r+0x82>
 80176c0:	06d0      	lsls	r0, r2, #27
 80176c2:	d411      	bmi.n	80176e8 <__swsetup_r+0x50>
 80176c4:	2209      	movs	r2, #9
 80176c6:	6032      	str	r2, [r6, #0]
 80176c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176cc:	81a3      	strh	r3, [r4, #12]
 80176ce:	f04f 30ff 	mov.w	r0, #4294967295
 80176d2:	e03e      	b.n	8017752 <__swsetup_r+0xba>
 80176d4:	4b25      	ldr	r3, [pc, #148]	; (801776c <__swsetup_r+0xd4>)
 80176d6:	429c      	cmp	r4, r3
 80176d8:	d101      	bne.n	80176de <__swsetup_r+0x46>
 80176da:	68ac      	ldr	r4, [r5, #8]
 80176dc:	e7eb      	b.n	80176b6 <__swsetup_r+0x1e>
 80176de:	4b24      	ldr	r3, [pc, #144]	; (8017770 <__swsetup_r+0xd8>)
 80176e0:	429c      	cmp	r4, r3
 80176e2:	bf08      	it	eq
 80176e4:	68ec      	ldreq	r4, [r5, #12]
 80176e6:	e7e6      	b.n	80176b6 <__swsetup_r+0x1e>
 80176e8:	0751      	lsls	r1, r2, #29
 80176ea:	d512      	bpl.n	8017712 <__swsetup_r+0x7a>
 80176ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80176ee:	b141      	cbz	r1, 8017702 <__swsetup_r+0x6a>
 80176f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176f4:	4299      	cmp	r1, r3
 80176f6:	d002      	beq.n	80176fe <__swsetup_r+0x66>
 80176f8:	4630      	mov	r0, r6
 80176fa:	f7ff fa53 	bl	8016ba4 <_free_r>
 80176fe:	2300      	movs	r3, #0
 8017700:	6363      	str	r3, [r4, #52]	; 0x34
 8017702:	89a3      	ldrh	r3, [r4, #12]
 8017704:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017708:	81a3      	strh	r3, [r4, #12]
 801770a:	2300      	movs	r3, #0
 801770c:	6063      	str	r3, [r4, #4]
 801770e:	6923      	ldr	r3, [r4, #16]
 8017710:	6023      	str	r3, [r4, #0]
 8017712:	89a3      	ldrh	r3, [r4, #12]
 8017714:	f043 0308 	orr.w	r3, r3, #8
 8017718:	81a3      	strh	r3, [r4, #12]
 801771a:	6923      	ldr	r3, [r4, #16]
 801771c:	b94b      	cbnz	r3, 8017732 <__swsetup_r+0x9a>
 801771e:	89a3      	ldrh	r3, [r4, #12]
 8017720:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017728:	d003      	beq.n	8017732 <__swsetup_r+0x9a>
 801772a:	4621      	mov	r1, r4
 801772c:	4630      	mov	r0, r6
 801772e:	f000 f917 	bl	8017960 <__smakebuf_r>
 8017732:	89a2      	ldrh	r2, [r4, #12]
 8017734:	f012 0301 	ands.w	r3, r2, #1
 8017738:	d00c      	beq.n	8017754 <__swsetup_r+0xbc>
 801773a:	2300      	movs	r3, #0
 801773c:	60a3      	str	r3, [r4, #8]
 801773e:	6963      	ldr	r3, [r4, #20]
 8017740:	425b      	negs	r3, r3
 8017742:	61a3      	str	r3, [r4, #24]
 8017744:	6923      	ldr	r3, [r4, #16]
 8017746:	b953      	cbnz	r3, 801775e <__swsetup_r+0xc6>
 8017748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801774c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8017750:	d1ba      	bne.n	80176c8 <__swsetup_r+0x30>
 8017752:	bd70      	pop	{r4, r5, r6, pc}
 8017754:	0792      	lsls	r2, r2, #30
 8017756:	bf58      	it	pl
 8017758:	6963      	ldrpl	r3, [r4, #20]
 801775a:	60a3      	str	r3, [r4, #8]
 801775c:	e7f2      	b.n	8017744 <__swsetup_r+0xac>
 801775e:	2000      	movs	r0, #0
 8017760:	e7f7      	b.n	8017752 <__swsetup_r+0xba>
 8017762:	bf00      	nop
 8017764:	20000020 	.word	0x20000020
 8017768:	0803adc4 	.word	0x0803adc4
 801776c:	0803ade4 	.word	0x0803ade4
 8017770:	0803ada4 	.word	0x0803ada4

08017774 <_close_r>:
 8017774:	b538      	push	{r3, r4, r5, lr}
 8017776:	4c06      	ldr	r4, [pc, #24]	; (8017790 <_close_r+0x1c>)
 8017778:	2300      	movs	r3, #0
 801777a:	4605      	mov	r5, r0
 801777c:	4608      	mov	r0, r1
 801777e:	6023      	str	r3, [r4, #0]
 8017780:	f7e9 fa0b 	bl	8000b9a <_close>
 8017784:	1c43      	adds	r3, r0, #1
 8017786:	d102      	bne.n	801778e <_close_r+0x1a>
 8017788:	6823      	ldr	r3, [r4, #0]
 801778a:	b103      	cbz	r3, 801778e <_close_r+0x1a>
 801778c:	602b      	str	r3, [r5, #0]
 801778e:	bd38      	pop	{r3, r4, r5, pc}
 8017790:	20016e58 	.word	0x20016e58

08017794 <__sflush_r>:
 8017794:	898a      	ldrh	r2, [r1, #12]
 8017796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801779a:	4605      	mov	r5, r0
 801779c:	0710      	lsls	r0, r2, #28
 801779e:	460c      	mov	r4, r1
 80177a0:	d458      	bmi.n	8017854 <__sflush_r+0xc0>
 80177a2:	684b      	ldr	r3, [r1, #4]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	dc05      	bgt.n	80177b4 <__sflush_r+0x20>
 80177a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	dc02      	bgt.n	80177b4 <__sflush_r+0x20>
 80177ae:	2000      	movs	r0, #0
 80177b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80177b6:	2e00      	cmp	r6, #0
 80177b8:	d0f9      	beq.n	80177ae <__sflush_r+0x1a>
 80177ba:	2300      	movs	r3, #0
 80177bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80177c0:	682f      	ldr	r7, [r5, #0]
 80177c2:	6a21      	ldr	r1, [r4, #32]
 80177c4:	602b      	str	r3, [r5, #0]
 80177c6:	d032      	beq.n	801782e <__sflush_r+0x9a>
 80177c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80177ca:	89a3      	ldrh	r3, [r4, #12]
 80177cc:	075a      	lsls	r2, r3, #29
 80177ce:	d505      	bpl.n	80177dc <__sflush_r+0x48>
 80177d0:	6863      	ldr	r3, [r4, #4]
 80177d2:	1ac0      	subs	r0, r0, r3
 80177d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80177d6:	b10b      	cbz	r3, 80177dc <__sflush_r+0x48>
 80177d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80177da:	1ac0      	subs	r0, r0, r3
 80177dc:	2300      	movs	r3, #0
 80177de:	4602      	mov	r2, r0
 80177e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80177e2:	6a21      	ldr	r1, [r4, #32]
 80177e4:	4628      	mov	r0, r5
 80177e6:	47b0      	blx	r6
 80177e8:	1c43      	adds	r3, r0, #1
 80177ea:	89a3      	ldrh	r3, [r4, #12]
 80177ec:	d106      	bne.n	80177fc <__sflush_r+0x68>
 80177ee:	6829      	ldr	r1, [r5, #0]
 80177f0:	291d      	cmp	r1, #29
 80177f2:	d848      	bhi.n	8017886 <__sflush_r+0xf2>
 80177f4:	4a29      	ldr	r2, [pc, #164]	; (801789c <__sflush_r+0x108>)
 80177f6:	40ca      	lsrs	r2, r1
 80177f8:	07d6      	lsls	r6, r2, #31
 80177fa:	d544      	bpl.n	8017886 <__sflush_r+0xf2>
 80177fc:	2200      	movs	r2, #0
 80177fe:	6062      	str	r2, [r4, #4]
 8017800:	04d9      	lsls	r1, r3, #19
 8017802:	6922      	ldr	r2, [r4, #16]
 8017804:	6022      	str	r2, [r4, #0]
 8017806:	d504      	bpl.n	8017812 <__sflush_r+0x7e>
 8017808:	1c42      	adds	r2, r0, #1
 801780a:	d101      	bne.n	8017810 <__sflush_r+0x7c>
 801780c:	682b      	ldr	r3, [r5, #0]
 801780e:	b903      	cbnz	r3, 8017812 <__sflush_r+0x7e>
 8017810:	6560      	str	r0, [r4, #84]	; 0x54
 8017812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017814:	602f      	str	r7, [r5, #0]
 8017816:	2900      	cmp	r1, #0
 8017818:	d0c9      	beq.n	80177ae <__sflush_r+0x1a>
 801781a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801781e:	4299      	cmp	r1, r3
 8017820:	d002      	beq.n	8017828 <__sflush_r+0x94>
 8017822:	4628      	mov	r0, r5
 8017824:	f7ff f9be 	bl	8016ba4 <_free_r>
 8017828:	2000      	movs	r0, #0
 801782a:	6360      	str	r0, [r4, #52]	; 0x34
 801782c:	e7c0      	b.n	80177b0 <__sflush_r+0x1c>
 801782e:	2301      	movs	r3, #1
 8017830:	4628      	mov	r0, r5
 8017832:	47b0      	blx	r6
 8017834:	1c41      	adds	r1, r0, #1
 8017836:	d1c8      	bne.n	80177ca <__sflush_r+0x36>
 8017838:	682b      	ldr	r3, [r5, #0]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d0c5      	beq.n	80177ca <__sflush_r+0x36>
 801783e:	2b1d      	cmp	r3, #29
 8017840:	d001      	beq.n	8017846 <__sflush_r+0xb2>
 8017842:	2b16      	cmp	r3, #22
 8017844:	d101      	bne.n	801784a <__sflush_r+0xb6>
 8017846:	602f      	str	r7, [r5, #0]
 8017848:	e7b1      	b.n	80177ae <__sflush_r+0x1a>
 801784a:	89a3      	ldrh	r3, [r4, #12]
 801784c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017850:	81a3      	strh	r3, [r4, #12]
 8017852:	e7ad      	b.n	80177b0 <__sflush_r+0x1c>
 8017854:	690f      	ldr	r7, [r1, #16]
 8017856:	2f00      	cmp	r7, #0
 8017858:	d0a9      	beq.n	80177ae <__sflush_r+0x1a>
 801785a:	0793      	lsls	r3, r2, #30
 801785c:	680e      	ldr	r6, [r1, #0]
 801785e:	bf08      	it	eq
 8017860:	694b      	ldreq	r3, [r1, #20]
 8017862:	600f      	str	r7, [r1, #0]
 8017864:	bf18      	it	ne
 8017866:	2300      	movne	r3, #0
 8017868:	eba6 0807 	sub.w	r8, r6, r7
 801786c:	608b      	str	r3, [r1, #8]
 801786e:	f1b8 0f00 	cmp.w	r8, #0
 8017872:	dd9c      	ble.n	80177ae <__sflush_r+0x1a>
 8017874:	4643      	mov	r3, r8
 8017876:	463a      	mov	r2, r7
 8017878:	6a21      	ldr	r1, [r4, #32]
 801787a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801787c:	4628      	mov	r0, r5
 801787e:	47b0      	blx	r6
 8017880:	2800      	cmp	r0, #0
 8017882:	dc06      	bgt.n	8017892 <__sflush_r+0xfe>
 8017884:	89a3      	ldrh	r3, [r4, #12]
 8017886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801788a:	81a3      	strh	r3, [r4, #12]
 801788c:	f04f 30ff 	mov.w	r0, #4294967295
 8017890:	e78e      	b.n	80177b0 <__sflush_r+0x1c>
 8017892:	4407      	add	r7, r0
 8017894:	eba8 0800 	sub.w	r8, r8, r0
 8017898:	e7e9      	b.n	801786e <__sflush_r+0xda>
 801789a:	bf00      	nop
 801789c:	20400001 	.word	0x20400001

080178a0 <_fflush_r>:
 80178a0:	b538      	push	{r3, r4, r5, lr}
 80178a2:	690b      	ldr	r3, [r1, #16]
 80178a4:	4605      	mov	r5, r0
 80178a6:	460c      	mov	r4, r1
 80178a8:	b1db      	cbz	r3, 80178e2 <_fflush_r+0x42>
 80178aa:	b118      	cbz	r0, 80178b4 <_fflush_r+0x14>
 80178ac:	6983      	ldr	r3, [r0, #24]
 80178ae:	b90b      	cbnz	r3, 80178b4 <_fflush_r+0x14>
 80178b0:	f7ff f8e6 	bl	8016a80 <__sinit>
 80178b4:	4b0c      	ldr	r3, [pc, #48]	; (80178e8 <_fflush_r+0x48>)
 80178b6:	429c      	cmp	r4, r3
 80178b8:	d109      	bne.n	80178ce <_fflush_r+0x2e>
 80178ba:	686c      	ldr	r4, [r5, #4]
 80178bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80178c0:	b17b      	cbz	r3, 80178e2 <_fflush_r+0x42>
 80178c2:	4621      	mov	r1, r4
 80178c4:	4628      	mov	r0, r5
 80178c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80178ca:	f7ff bf63 	b.w	8017794 <__sflush_r>
 80178ce:	4b07      	ldr	r3, [pc, #28]	; (80178ec <_fflush_r+0x4c>)
 80178d0:	429c      	cmp	r4, r3
 80178d2:	d101      	bne.n	80178d8 <_fflush_r+0x38>
 80178d4:	68ac      	ldr	r4, [r5, #8]
 80178d6:	e7f1      	b.n	80178bc <_fflush_r+0x1c>
 80178d8:	4b05      	ldr	r3, [pc, #20]	; (80178f0 <_fflush_r+0x50>)
 80178da:	429c      	cmp	r4, r3
 80178dc:	bf08      	it	eq
 80178de:	68ec      	ldreq	r4, [r5, #12]
 80178e0:	e7ec      	b.n	80178bc <_fflush_r+0x1c>
 80178e2:	2000      	movs	r0, #0
 80178e4:	bd38      	pop	{r3, r4, r5, pc}
 80178e6:	bf00      	nop
 80178e8:	0803adc4 	.word	0x0803adc4
 80178ec:	0803ade4 	.word	0x0803ade4
 80178f0:	0803ada4 	.word	0x0803ada4

080178f4 <_lseek_r>:
 80178f4:	b538      	push	{r3, r4, r5, lr}
 80178f6:	4c07      	ldr	r4, [pc, #28]	; (8017914 <_lseek_r+0x20>)
 80178f8:	4605      	mov	r5, r0
 80178fa:	4608      	mov	r0, r1
 80178fc:	4611      	mov	r1, r2
 80178fe:	2200      	movs	r2, #0
 8017900:	6022      	str	r2, [r4, #0]
 8017902:	461a      	mov	r2, r3
 8017904:	f7e9 f970 	bl	8000be8 <_lseek>
 8017908:	1c43      	adds	r3, r0, #1
 801790a:	d102      	bne.n	8017912 <_lseek_r+0x1e>
 801790c:	6823      	ldr	r3, [r4, #0]
 801790e:	b103      	cbz	r3, 8017912 <_lseek_r+0x1e>
 8017910:	602b      	str	r3, [r5, #0]
 8017912:	bd38      	pop	{r3, r4, r5, pc}
 8017914:	20016e58 	.word	0x20016e58

08017918 <__swhatbuf_r>:
 8017918:	b570      	push	{r4, r5, r6, lr}
 801791a:	460e      	mov	r6, r1
 801791c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017920:	2900      	cmp	r1, #0
 8017922:	b096      	sub	sp, #88	; 0x58
 8017924:	4614      	mov	r4, r2
 8017926:	461d      	mov	r5, r3
 8017928:	da07      	bge.n	801793a <__swhatbuf_r+0x22>
 801792a:	2300      	movs	r3, #0
 801792c:	602b      	str	r3, [r5, #0]
 801792e:	89b3      	ldrh	r3, [r6, #12]
 8017930:	061a      	lsls	r2, r3, #24
 8017932:	d410      	bmi.n	8017956 <__swhatbuf_r+0x3e>
 8017934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017938:	e00e      	b.n	8017958 <__swhatbuf_r+0x40>
 801793a:	466a      	mov	r2, sp
 801793c:	f000 f88a 	bl	8017a54 <_fstat_r>
 8017940:	2800      	cmp	r0, #0
 8017942:	dbf2      	blt.n	801792a <__swhatbuf_r+0x12>
 8017944:	9a01      	ldr	r2, [sp, #4]
 8017946:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801794a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801794e:	425a      	negs	r2, r3
 8017950:	415a      	adcs	r2, r3
 8017952:	602a      	str	r2, [r5, #0]
 8017954:	e7ee      	b.n	8017934 <__swhatbuf_r+0x1c>
 8017956:	2340      	movs	r3, #64	; 0x40
 8017958:	2000      	movs	r0, #0
 801795a:	6023      	str	r3, [r4, #0]
 801795c:	b016      	add	sp, #88	; 0x58
 801795e:	bd70      	pop	{r4, r5, r6, pc}

08017960 <__smakebuf_r>:
 8017960:	898b      	ldrh	r3, [r1, #12]
 8017962:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017964:	079d      	lsls	r5, r3, #30
 8017966:	4606      	mov	r6, r0
 8017968:	460c      	mov	r4, r1
 801796a:	d507      	bpl.n	801797c <__smakebuf_r+0x1c>
 801796c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017970:	6023      	str	r3, [r4, #0]
 8017972:	6123      	str	r3, [r4, #16]
 8017974:	2301      	movs	r3, #1
 8017976:	6163      	str	r3, [r4, #20]
 8017978:	b002      	add	sp, #8
 801797a:	bd70      	pop	{r4, r5, r6, pc}
 801797c:	ab01      	add	r3, sp, #4
 801797e:	466a      	mov	r2, sp
 8017980:	f7ff ffca 	bl	8017918 <__swhatbuf_r>
 8017984:	9900      	ldr	r1, [sp, #0]
 8017986:	4605      	mov	r5, r0
 8017988:	4630      	mov	r0, r6
 801798a:	f7ff f959 	bl	8016c40 <_malloc_r>
 801798e:	b948      	cbnz	r0, 80179a4 <__smakebuf_r+0x44>
 8017990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017994:	059a      	lsls	r2, r3, #22
 8017996:	d4ef      	bmi.n	8017978 <__smakebuf_r+0x18>
 8017998:	f023 0303 	bic.w	r3, r3, #3
 801799c:	f043 0302 	orr.w	r3, r3, #2
 80179a0:	81a3      	strh	r3, [r4, #12]
 80179a2:	e7e3      	b.n	801796c <__smakebuf_r+0xc>
 80179a4:	4b0d      	ldr	r3, [pc, #52]	; (80179dc <__smakebuf_r+0x7c>)
 80179a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80179a8:	89a3      	ldrh	r3, [r4, #12]
 80179aa:	6020      	str	r0, [r4, #0]
 80179ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80179b0:	81a3      	strh	r3, [r4, #12]
 80179b2:	9b00      	ldr	r3, [sp, #0]
 80179b4:	6163      	str	r3, [r4, #20]
 80179b6:	9b01      	ldr	r3, [sp, #4]
 80179b8:	6120      	str	r0, [r4, #16]
 80179ba:	b15b      	cbz	r3, 80179d4 <__smakebuf_r+0x74>
 80179bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179c0:	4630      	mov	r0, r6
 80179c2:	f000 f859 	bl	8017a78 <_isatty_r>
 80179c6:	b128      	cbz	r0, 80179d4 <__smakebuf_r+0x74>
 80179c8:	89a3      	ldrh	r3, [r4, #12]
 80179ca:	f023 0303 	bic.w	r3, r3, #3
 80179ce:	f043 0301 	orr.w	r3, r3, #1
 80179d2:	81a3      	strh	r3, [r4, #12]
 80179d4:	89a3      	ldrh	r3, [r4, #12]
 80179d6:	431d      	orrs	r5, r3
 80179d8:	81a5      	strh	r5, [r4, #12]
 80179da:	e7cd      	b.n	8017978 <__smakebuf_r+0x18>
 80179dc:	08016a49 	.word	0x08016a49

080179e0 <__malloc_lock>:
 80179e0:	4770      	bx	lr

080179e2 <__malloc_unlock>:
 80179e2:	4770      	bx	lr

080179e4 <_realloc_r>:
 80179e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179e6:	4607      	mov	r7, r0
 80179e8:	4614      	mov	r4, r2
 80179ea:	460e      	mov	r6, r1
 80179ec:	b921      	cbnz	r1, 80179f8 <_realloc_r+0x14>
 80179ee:	4611      	mov	r1, r2
 80179f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80179f4:	f7ff b924 	b.w	8016c40 <_malloc_r>
 80179f8:	b922      	cbnz	r2, 8017a04 <_realloc_r+0x20>
 80179fa:	f7ff f8d3 	bl	8016ba4 <_free_r>
 80179fe:	4625      	mov	r5, r4
 8017a00:	4628      	mov	r0, r5
 8017a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a04:	f000 f848 	bl	8017a98 <_malloc_usable_size_r>
 8017a08:	42a0      	cmp	r0, r4
 8017a0a:	d20f      	bcs.n	8017a2c <_realloc_r+0x48>
 8017a0c:	4621      	mov	r1, r4
 8017a0e:	4638      	mov	r0, r7
 8017a10:	f7ff f916 	bl	8016c40 <_malloc_r>
 8017a14:	4605      	mov	r5, r0
 8017a16:	2800      	cmp	r0, #0
 8017a18:	d0f2      	beq.n	8017a00 <_realloc_r+0x1c>
 8017a1a:	4631      	mov	r1, r6
 8017a1c:	4622      	mov	r2, r4
 8017a1e:	f7fe ff36 	bl	801688e <memcpy>
 8017a22:	4631      	mov	r1, r6
 8017a24:	4638      	mov	r0, r7
 8017a26:	f7ff f8bd 	bl	8016ba4 <_free_r>
 8017a2a:	e7e9      	b.n	8017a00 <_realloc_r+0x1c>
 8017a2c:	4635      	mov	r5, r6
 8017a2e:	e7e7      	b.n	8017a00 <_realloc_r+0x1c>

08017a30 <_read_r>:
 8017a30:	b538      	push	{r3, r4, r5, lr}
 8017a32:	4c07      	ldr	r4, [pc, #28]	; (8017a50 <_read_r+0x20>)
 8017a34:	4605      	mov	r5, r0
 8017a36:	4608      	mov	r0, r1
 8017a38:	4611      	mov	r1, r2
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	6022      	str	r2, [r4, #0]
 8017a3e:	461a      	mov	r2, r3
 8017a40:	f7e9 f872 	bl	8000b28 <_read>
 8017a44:	1c43      	adds	r3, r0, #1
 8017a46:	d102      	bne.n	8017a4e <_read_r+0x1e>
 8017a48:	6823      	ldr	r3, [r4, #0]
 8017a4a:	b103      	cbz	r3, 8017a4e <_read_r+0x1e>
 8017a4c:	602b      	str	r3, [r5, #0]
 8017a4e:	bd38      	pop	{r3, r4, r5, pc}
 8017a50:	20016e58 	.word	0x20016e58

08017a54 <_fstat_r>:
 8017a54:	b538      	push	{r3, r4, r5, lr}
 8017a56:	4c07      	ldr	r4, [pc, #28]	; (8017a74 <_fstat_r+0x20>)
 8017a58:	2300      	movs	r3, #0
 8017a5a:	4605      	mov	r5, r0
 8017a5c:	4608      	mov	r0, r1
 8017a5e:	4611      	mov	r1, r2
 8017a60:	6023      	str	r3, [r4, #0]
 8017a62:	f7e9 f8a6 	bl	8000bb2 <_fstat>
 8017a66:	1c43      	adds	r3, r0, #1
 8017a68:	d102      	bne.n	8017a70 <_fstat_r+0x1c>
 8017a6a:	6823      	ldr	r3, [r4, #0]
 8017a6c:	b103      	cbz	r3, 8017a70 <_fstat_r+0x1c>
 8017a6e:	602b      	str	r3, [r5, #0]
 8017a70:	bd38      	pop	{r3, r4, r5, pc}
 8017a72:	bf00      	nop
 8017a74:	20016e58 	.word	0x20016e58

08017a78 <_isatty_r>:
 8017a78:	b538      	push	{r3, r4, r5, lr}
 8017a7a:	4c06      	ldr	r4, [pc, #24]	; (8017a94 <_isatty_r+0x1c>)
 8017a7c:	2300      	movs	r3, #0
 8017a7e:	4605      	mov	r5, r0
 8017a80:	4608      	mov	r0, r1
 8017a82:	6023      	str	r3, [r4, #0]
 8017a84:	f7e9 f8a5 	bl	8000bd2 <_isatty>
 8017a88:	1c43      	adds	r3, r0, #1
 8017a8a:	d102      	bne.n	8017a92 <_isatty_r+0x1a>
 8017a8c:	6823      	ldr	r3, [r4, #0]
 8017a8e:	b103      	cbz	r3, 8017a92 <_isatty_r+0x1a>
 8017a90:	602b      	str	r3, [r5, #0]
 8017a92:	bd38      	pop	{r3, r4, r5, pc}
 8017a94:	20016e58 	.word	0x20016e58

08017a98 <_malloc_usable_size_r>:
 8017a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a9c:	1f18      	subs	r0, r3, #4
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	bfbc      	itt	lt
 8017aa2:	580b      	ldrlt	r3, [r1, r0]
 8017aa4:	18c0      	addlt	r0, r0, r3
 8017aa6:	4770      	bx	lr

08017aa8 <_init>:
 8017aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aaa:	bf00      	nop
 8017aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017aae:	bc08      	pop	{r3}
 8017ab0:	469e      	mov	lr, r3
 8017ab2:	4770      	bx	lr

08017ab4 <_fini>:
 8017ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ab6:	bf00      	nop
 8017ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017aba:	bc08      	pop	{r3}
 8017abc:	469e      	mov	lr, r3
 8017abe:	4770      	bx	lr

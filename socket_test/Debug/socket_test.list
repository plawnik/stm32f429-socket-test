
socket_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a5e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000898c  0801a794  0801a794  0002a794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023120  08023120  00040084  2**0
                  CONTENTS
  4 .ARM          00000008  08023120  08023120  00033120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023128  08023128  00040084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023128  08023128  00033128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802312c  0802312c  0003312c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08023130  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016ddc  20000084  080231b4  00040084  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20016e60  080231b4  00046e60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a2ca  00000000  00000000  000400b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000828f  00000000  00000000  0008a37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002500  00000000  00000000  00092610  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002328  00000000  00000000  00094b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036592  00000000  00000000  00096e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f600  00000000  00000000  000cd3ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001011b9  00000000  00000000  000fc9ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001fdb83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fcc  00000000  00000000  001fdc00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801a77c 	.word	0x0801a77c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	0801a77c 	.word	0x0801a77c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
	return 0;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005e4:	f000 fd74 	bl	80010d0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e8:	f000 f818 	bl	800061c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ec:	f000 f8aa 	bl	8000744 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80005f0:	f000 f87e 	bl	80006f0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80005f4:	f004 fa3a 	bl	8004a6c <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80005f8:	4a05      	ldr	r2, [pc, #20]	; (8000610 <main+0x30>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <main+0x34>)
 80005fe:	f004 fac7 	bl	8004b90 <osThreadNew>
 8000602:	4602      	mov	r2, r0
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <main+0x38>)
 8000606:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000608:	f004 fa64 	bl	8004ad4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800060c:	e7fe      	b.n	800060c <main+0x2c>
 800060e:	bf00      	nop
 8000610:	0801e41c 	.word	0x0801e41c
 8000614:	0800094d 	.word	0x0800094d
 8000618:	200103a8 	.word	0x200103a8

0800061c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f018 ff95 	bl	801955a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000690:	23a8      	movs	r3, #168	; 0xa8
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 f9c5 	bl	8002a30 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
		Error_Handler();
 80006ac:	f000 f9ba 	bl	8000a24 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2105      	movs	r1, #5
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fc1e 	bl	8002f10 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
		Error_Handler();
 80006da:	f000 f9a3 	bl	8000a24 <Error_Handler>
	}
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART3_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART3_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART3_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART3_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART3_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000728:	f003 f854 	bl	80037d4 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000732:	f000 f977 	bl	8000a24 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200103ac 	.word	0x200103ac
 8000740:	40004800 	.word	0x40004800

08000744 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4b4b      	ldr	r3, [pc, #300]	; (800088c <MX_GPIO_Init+0x148>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a4a      	ldr	r2, [pc, #296]	; (800088c <MX_GPIO_Init+0x148>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b48      	ldr	r3, [pc, #288]	; (800088c <MX_GPIO_Init+0x148>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b44      	ldr	r3, [pc, #272]	; (800088c <MX_GPIO_Init+0x148>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a43      	ldr	r2, [pc, #268]	; (800088c <MX_GPIO_Init+0x148>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <MX_GPIO_Init+0x148>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b3d      	ldr	r3, [pc, #244]	; (800088c <MX_GPIO_Init+0x148>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a3c      	ldr	r2, [pc, #240]	; (800088c <MX_GPIO_Init+0x148>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b3a      	ldr	r3, [pc, #232]	; (800088c <MX_GPIO_Init+0x148>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b36      	ldr	r3, [pc, #216]	; (800088c <MX_GPIO_Init+0x148>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a35      	ldr	r2, [pc, #212]	; (800088c <MX_GPIO_Init+0x148>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <MX_GPIO_Init+0x148>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_GPIO_Init+0x148>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2e      	ldr	r2, [pc, #184]	; (800088c <MX_GPIO_Init+0x148>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_GPIO_Init+0x148>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <MX_GPIO_Init+0x148>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a27      	ldr	r2, [pc, #156]	; (800088c <MX_GPIO_Init+0x148>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_GPIO_Init+0x148>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f244 0181 	movw	r1, #16513	; 0x4081
 8000808:	4821      	ldr	r0, [pc, #132]	; (8000890 <MX_GPIO_Init+0x14c>)
 800080a:	f002 f8f7 	bl	80029fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 800080e:	2200      	movs	r2, #0
 8000810:	2140      	movs	r1, #64	; 0x40
 8000812:	4820      	ldr	r0, [pc, #128]	; (8000894 <MX_GPIO_Init+0x150>)
 8000814:	f002 f8f2 	bl	80029fc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_GPIO_Init+0x154>)
 8000820:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	481b      	ldr	r0, [pc, #108]	; (800089c <MX_GPIO_Init+0x158>)
 800082e:	f001 ff3b 	bl	80026a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000832:	f244 0381 	movw	r3, #16513	; 0x4081
 8000836:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_GPIO_Init+0x14c>)
 800084c:	f001 ff2c 	bl	80026a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000850:	2340      	movs	r3, #64	; 0x40
 8000852:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <MX_GPIO_Init+0x150>)
 8000868:	f001 ff1e 	bl	80026a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_GPIO_Init+0x150>)
 8000880:	f001 ff12 	bl	80026a8 <HAL_GPIO_Init>

}
 8000884:	bf00      	nop
 8000886:	3730      	adds	r7, #48	; 0x30
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400
 8000894:	40021800 	.word	0x40021800
 8000898:	10110000 	.word	0x10110000
 800089c:	40020800 	.word	0x40020800

080008a0 <http_server_netconn_serve>:
		"<html><head><title>Congrats!</title></head><body><h1>Welcome to our lwIP HTTP server!</h1><p>This is a small test page, served by httpserver-netconn.</body></html>";

char task_desc_buf[256];

/** Serve one HTTP connection accepted in the http thread */
static void http_server_netconn_serve(struct netconn *conn) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af02      	add	r7, sp, #8
 80008a6:	6078      	str	r0, [r7, #4]
	u16_t buflen;
	err_t err;

	/* Read the data from the port, blocking if nothing yet there.
	 We assume the request (the part we care about) is in one netbuf */
	err = netconn_recv(conn, &inbuf);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f008 ff88 	bl	80097c4 <netconn_recv>
 80008b4:	4603      	mov	r3, r0
 80008b6:	75fb      	strb	r3, [r7, #23]

	if (err == ERR_OK) {
 80008b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d135      	bne.n	800092c <http_server_netconn_serve+0x8c>
		netbuf_data(inbuf, (void**) &buf, &buflen);
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	f107 020a 	add.w	r2, r7, #10
 80008c6:	f107 010c 	add.w	r1, r7, #12
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00a fd0e 	bl	800b2ec <netbuf_data>

		/* Is this an HTTP GET command? (only check the first 5 chars, since
		 there are other formats for GET, and we're keeping it very simple )*/
		if (buflen >= 5 && buf[0] == 'G' && buf[1] == 'E' && buf[2] == 'T'
 80008d0:	897b      	ldrh	r3, [r7, #10]
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	d92a      	bls.n	800092c <http_server_netconn_serve+0x8c>
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b47      	cmp	r3, #71	; 0x47
 80008dc:	d126      	bne.n	800092c <http_server_netconn_serve+0x8c>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3301      	adds	r3, #1
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b45      	cmp	r3, #69	; 0x45
 80008e6:	d121      	bne.n	800092c <http_server_netconn_serve+0x8c>
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3302      	adds	r3, #2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b54      	cmp	r3, #84	; 0x54
 80008f0:	d11c      	bne.n	800092c <http_server_netconn_serve+0x8c>
				&& buf[3] == ' ' && buf[4] == '/') {
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3303      	adds	r3, #3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b20      	cmp	r3, #32
 80008fa:	d117      	bne.n	800092c <http_server_netconn_serve+0x8c>
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3304      	adds	r3, #4
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b2f      	cmp	r3, #47	; 0x2f
 8000904:	d112      	bne.n	800092c <http_server_netconn_serve+0x8c>

			/* Send the HTML header
			 * subtract 1 from the size, since we dont send the \0 in the string
			 * NETCONN_NOCOPY: our data is const static, so no need to copy it
			 */
			vTaskGetRunTimeStats(task_desc_buf); //TODO:
 8000906:	480f      	ldr	r0, [pc, #60]	; (8000944 <http_server_netconn_serve+0xa4>)
 8000908:	f007 fbd2 	bl	80080b0 <vTaskGetRunTimeStats>
			netconn_write(conn, http_html_hdr, sizeof(http_html_hdr) - 1,
 800090c:	2300      	movs	r3, #0
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2300      	movs	r3, #0
 8000912:	222c      	movs	r2, #44	; 0x2c
 8000914:	490c      	ldr	r1, [pc, #48]	; (8000948 <http_server_netconn_serve+0xa8>)
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f008 ffce 	bl	80098b8 <netconn_write_partly>
					NETCONN_NOCOPY);

			/* Send our HTML page */
			netconn_write(conn, task_desc_buf, sizeof(task_desc_buf) - 1,
 800091c:	2300      	movs	r3, #0
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2300      	movs	r3, #0
 8000922:	22ff      	movs	r2, #255	; 0xff
 8000924:	4907      	ldr	r1, [pc, #28]	; (8000944 <http_server_netconn_serve+0xa4>)
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f008 ffc6 	bl	80098b8 <netconn_write_partly>
					NETCONN_NOCOPY);
		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f009 f8c5 	bl	8009abc <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
	 so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	4618      	mov	r0, r3
 8000936:	f00a fcb9 	bl	800b2ac <netbuf_delete>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200103ec 	.word	0x200103ec
 8000948:	0801e440 	.word	0x0801e440

0800094c <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 8000954:	f003 fbea 	bl	800412c <MX_LWIP_Init>
	/* USER CODE BEGIN 5 */

	UartTaskInit(&huart3);
 8000958:	4825      	ldr	r0, [pc, #148]	; (80009f0 <StartDefaultTask+0xa4>)
 800095a:	f000 faf9 	bl	8000f50 <UartTaskInit>
	StartDhcpTask();
 800095e:	f000 fa33 	bl	8000dc8 <StartDhcpTask>
	while (GetDhcpState() != DHCP_ADDRESS_ASSIGNED )
 8000962:	e002      	b.n	800096a <StartDefaultTask+0x1e>
		osDelay(100);
 8000964:	2064      	movs	r0, #100	; 0x64
 8000966:	f004 f9b9 	bl	8004cdc <osDelay>
	while (GetDhcpState() != DHCP_ADDRESS_ASSIGNED )
 800096a:	f000 fae5 	bl	8000f38 <GetDhcpState>
 800096e:	4603      	mov	r3, r0
 8000970:	2b03      	cmp	r3, #3
 8000972:	d1f7      	bne.n	8000964 <StartDefaultTask+0x18>
	httpd_init();
 8000974:	f00b fcb2 	bl	800c2dc <httpd_init>
	// sewer http
	struct netconn *conn, *newconn;
	err_t err;

	/* Create a new TCP connection handle */
	conn = netconn_new(NETCONN_TCP);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2010      	movs	r0, #16
 800097e:	f008 fbfb 	bl	8009178 <netconn_new_with_proto_and_callback>
 8000982:	6178      	str	r0, [r7, #20]
	LWIP_ERROR("http_server: invalid conn", (conn != NULL), return;);
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d107      	bne.n	800099a <StartDefaultTask+0x4e>
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <StartDefaultTask+0xa8>)
 800098c:	f44f 72ae 	mov.w	r2, #348	; 0x15c
 8000990:	4919      	ldr	r1, [pc, #100]	; (80009f8 <StartDefaultTask+0xac>)
 8000992:	481a      	ldr	r0, [pc, #104]	; (80009fc <StartDefaultTask+0xb0>)
 8000994:	f018 fdea 	bl	801956c <iprintf>
 8000998:	e027      	b.n	80009ea <StartDefaultTask+0x9e>

	/* Bind to port 80 (HTTP) with default IP address */
	netconn_bind(conn, NULL, 443);
 800099a:	f240 12bb 	movw	r2, #443	; 0x1bb
 800099e:	2100      	movs	r1, #0
 80009a0:	6978      	ldr	r0, [r7, #20]
 80009a2:	f008 fca3 	bl	80092ec <netconn_bind>

	/* Put the connection into LISTEN state */
	netconn_listen(conn);
 80009a6:	21ff      	movs	r1, #255	; 0xff
 80009a8:	6978      	ldr	r0, [r7, #20]
 80009aa:	f008 fcd7 	bl	800935c <netconn_listen_with_backlog>


	do {

		err = netconn_accept(conn, &newconn);
 80009ae:	f107 030c 	add.w	r3, r7, #12
 80009b2:	4619      	mov	r1, r3
 80009b4:	6978      	ldr	r0, [r7, #20]
 80009b6:	f008 fcfd 	bl	80093b4 <netconn_accept>
 80009ba:	4603      	mov	r3, r0
 80009bc:	74fb      	strb	r3, [r7, #19]
		if (err == ERR_OK) {
 80009be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d107      	bne.n	80009d6 <StartDefaultTask+0x8a>
			http_server_netconn_serve(newconn);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff ff69 	bl	80008a0 <http_server_netconn_serve>
			netconn_delete(newconn);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f008 fc6f 	bl	80092b4 <netconn_delete>
		}
	} while (err == ERR_OK);LWIP_DEBUGF(HTTPD_DEBUG,
 80009d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d0e7      	beq.n	80009ae <StartDefaultTask+0x62>
			("http_server_netconn_thread: netconn_accept received error %d, shutting down",
					err));
	netconn_close(conn);
 80009de:	6978      	ldr	r0, [r7, #20]
 80009e0:	f009 f86c 	bl	8009abc <netconn_close>
	netconn_delete(conn);
 80009e4:	6978      	ldr	r0, [r7, #20]
 80009e6:	f008 fc65 	bl	80092b4 <netconn_delete>
	/* USER CODE END 5 */
}
 80009ea:	3718      	adds	r7, #24
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200103ac 	.word	0x200103ac
 80009f4:	0801a7a0 	.word	0x0801a7a0
 80009f8:	0801a7b4 	.word	0x0801a7b4
 80009fc:	0801a7d0 	.word	0x0801a7d0

08000a00 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM10) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d101      	bne.n	8000a16 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a12:	f000 fb7f 	bl	8001114 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40014400 	.word	0x40014400

08000a24 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <HAL_MspInit+0x78>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a1a      	ldr	r2, [pc, #104]	; (8000aac <HAL_MspInit+0x78>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b18      	ldr	r3, [pc, #96]	; (8000aac <HAL_MspInit+0x78>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_MspInit+0x78>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a13      	ldr	r2, [pc, #76]	; (8000aac <HAL_MspInit+0x78>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <HAL_MspInit+0x78>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 10, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	210a      	movs	r1, #10
 8000a76:	f06f 000b 	mvn.w	r0, #11
 8000a7a:	f000 fc45 	bl	8001308 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 10, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	210a      	movs	r1, #10
 8000a82:	f06f 000a 	mvn.w	r0, #10
 8000a86:	f000 fc3f 	bl	8001308 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 10, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	210a      	movs	r1, #10
 8000a8e:	f06f 0009 	mvn.w	r0, #9
 8000a92:	f000 fc39 	bl	8001308 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 10, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	210a      	movs	r1, #10
 8000a9a:	f06f 0003 	mvn.w	r0, #3
 8000a9e:	f000 fc33 	bl	8001308 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_UART_MspInit+0x84>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d12c      	bne.n	8000b2c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_UART_MspInit+0x8c>)
 8000b28:	f001 fdbe 	bl	80026a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3728      	adds	r7, #40	; 0x28
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40004800 	.word	0x40004800
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020c00 	.word	0x40020c00

08000b40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08c      	sub	sp, #48	; 0x30
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2019      	movs	r0, #25
 8000b56:	f000 fbd7 	bl	8001308 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b5a:	2019      	movs	r0, #25
 8000b5c:	f000 fbf0 	bl	8001340 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <HAL_InitTick+0xa4>)
 8000b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b68:	4a1e      	ldr	r2, [pc, #120]	; (8000be4 <HAL_InitTick+0xa4>)
 8000b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b70:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <HAL_InitTick+0xa4>)
 8000b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b7c:	f107 0210 	add.w	r2, r7, #16
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f002 fbb4 	bl	80032f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b8c:	f002 fb9e 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 8000b90:	4603      	mov	r3, r0
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b98:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <HAL_InitTick+0xa8>)
 8000b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9e:	0c9b      	lsrs	r3, r3, #18
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_InitTick+0xac>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <HAL_InitTick+0xb0>)
 8000ba8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <HAL_InitTick+0xac>)
 8000bac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bb0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_InitTick+0xac>)
 8000bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_InitTick+0xac>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_InitTick+0xac>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <HAL_InitTick+0xac>)
 8000bc6:	f002 fbc7 	bl	8003358 <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d104      	bne.n	8000bda <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <HAL_InitTick+0xac>)
 8000bd2:	f002 fbf6 	bl	80033c2 <HAL_TIM_Base_Start_IT>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3730      	adds	r7, #48	; 0x30
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40023800 	.word	0x40023800
 8000be8:	431bde83 	.word	0x431bde83
 8000bec:	200104ec 	.word	0x200104ec
 8000bf0:	40014400 	.word	0x40014400

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c2e:	f002 fbec 	bl	800340a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200104ec 	.word	0x200104ec

08000c3c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c40:	4802      	ldr	r0, [pc, #8]	; (8000c4c <ETH_IRQHandler+0x10>)
 8000c42:	f000 ff71 	bl	8001b28 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20011e84 	.word	0x20011e84

08000c50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	e00a      	b.n	8000c78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c62:	f3af 8000 	nop.w
 8000c66:	4601      	mov	r1, r0
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60ba      	str	r2, [r7, #8]
 8000c6e:	b2ca      	uxtb	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf0      	blt.n	8000c62 <_read+0x12>
	}

return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e009      	b.n	8000cb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf1      	blt.n	8000c9c <_write+0x12>
	}
	return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cea:	605a      	str	r2, [r3, #4]
	return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_isatty>:

int _isatty(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
	return 1;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	; (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d205      	bcs.n	8000d68 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <_sbrk+0x6c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	371c      	adds	r7, #28
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	20030000 	.word	0x20030000
 8000d8c:	00004000 	.word	0x00004000
 8000d90:	200000a0 	.word	0x200000a0
 8000d94:	20016e60 	.word	0x20016e60
 8000d98:	20016e58 	.word	0x20016e58

08000d9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <SystemInit+0x28>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <SystemInit+0x28>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SystemInit+0x28>)
 8000db2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000db6:	609a      	str	r2, [r3, #8]
#endif
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <StartDhcpTask>:
		(osPriority_t) osPriorityNormal, .stack_size = 1024 * 4 };

void Dhcp_thread(void *argument);
void Dhcp_process(void const *argument);

void StartDhcpTask() {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	dhcpTaskHandle = osThreadNew(Dhcp_thread, NULL, &dhcpTask_attributes);
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <StartDhcpTask+0x18>)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <StartDhcpTask+0x1c>)
 8000dd2:	f003 fedd 	bl	8004b90 <osThreadNew>
 8000dd6:	4602      	mov	r2, r0
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <StartDhcpTask+0x20>)
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	0801e488 	.word	0x0801e488
 8000de4:	08000ded 	.word	0x08000ded
 8000de8:	2001052c 	.word	0x2001052c

08000dec <Dhcp_thread>:

void Dhcp_thread(void *argument) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	while (1) {
		Dhcp_process(&gnetif);
 8000df4:	4801      	ldr	r0, [pc, #4]	; (8000dfc <Dhcp_thread+0x10>)
 8000df6:	f000 f803 	bl	8000e00 <Dhcp_process>
 8000dfa:	e7fb      	b.n	8000df4 <Dhcp_thread+0x8>
 8000dfc:	20010570 	.word	0x20010570

08000e00 <Dhcp_process>:

	}
}

void Dhcp_process(void const *argument) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	6078      	str	r0, [r7, #4]
	struct netif *netif = (struct netif*) argument;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	61bb      	str	r3, [r7, #24]
	ip_addr_t ipaddr;
	ip_addr_t netmask;
	ip_addr_t gw;
	struct dhcp *dhcp;

	UartDbg("Starting DHCP...\n\r");
 8000e0c:	4841      	ldr	r0, [pc, #260]	; (8000f14 <Dhcp_process+0x114>)
 8000e0e:	f000 f8e7 	bl	8000fe0 <UartDbg>
	if (netif_is_up(netif)){
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d006      	beq.n	8000e30 <Dhcp_process+0x30>
	    DHCP_state = DHCP_START;
 8000e22:	4b3d      	ldr	r3, [pc, #244]	; (8000f18 <Dhcp_process+0x118>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
		UartDbg("Ethernet link up!\n\r");
 8000e28:	483c      	ldr	r0, [pc, #240]	; (8000f1c <Dhcp_process+0x11c>)
 8000e2a:	f000 f8d9 	bl	8000fe0 <UartDbg>
 8000e2e:	e005      	b.n	8000e3c <Dhcp_process+0x3c>
	}
	else {
	    DHCP_state = DHCP_LINK_DOWN;
 8000e30:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <Dhcp_process+0x118>)
 8000e32:	2205      	movs	r2, #5
 8000e34:	701a      	strb	r2, [r3, #0]
		UartDbg("Ethernet link down!\n\r");
 8000e36:	483a      	ldr	r0, [pc, #232]	; (8000f20 <Dhcp_process+0x120>)
 8000e38:	f000 f8d2 	bl	8000fe0 <UartDbg>
	}

	for (;;) {
		switch (DHCP_state) {
 8000e3c:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <Dhcp_process+0x118>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d017      	beq.n	8000e76 <Dhcp_process+0x76>
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	d057      	beq.n	8000efa <Dhcp_process+0xfa>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d000      	beq.n	8000e50 <Dhcp_process+0x50>
			dhcp_stop(netif);
			DHCP_state = DHCP_OFF;
		}
			break;
		default:
			break;
 8000e4e:	e05c      	b.n	8000f0a <Dhcp_process+0x10a>
			UartDbg("Waiting for IP address...\n\r");
 8000e50:	4834      	ldr	r0, [pc, #208]	; (8000f24 <Dhcp_process+0x124>)
 8000e52:	f000 f8c5 	bl	8000fe0 <UartDbg>
			ip_addr_set_zero_ip4(&netif->ip_addr);
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
			ip_addr_set_zero_ip4(&netif->netmask);
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
			ip_addr_set_zero_ip4(&netif->gw);
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
			dhcp_start(netif);
 8000e68:	69b8      	ldr	r0, [r7, #24]
 8000e6a:	f014 fb5b 	bl	8015524 <dhcp_start>
			DHCP_state = DHCP_WAIT_ADDRESS;
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <Dhcp_process+0x118>)
 8000e70:	2202      	movs	r2, #2
 8000e72:	701a      	strb	r2, [r3, #0]
			break;
 8000e74:	e049      	b.n	8000f0a <Dhcp_process+0x10a>
			if (dhcp_supplied_address(netif)) {
 8000e76:	69b8      	ldr	r0, [r7, #24]
 8000e78:	f015 fe60 	bl	8016b3c <dhcp_supplied_address>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d015      	beq.n	8000eae <Dhcp_process+0xae>
				DHCP_state = DHCP_ADDRESS_ASSIGNED;
 8000e82:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <Dhcp_process+0x118>)
 8000e84:	2203      	movs	r2, #3
 8000e86:	701a      	strb	r2, [r3, #0]
				uint32_t temp_ip = dhcp->offered_ip_addr.addr;
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	617b      	str	r3, [r7, #20]
				UartDbg("IP address assigned by a DHCP server: [%03d.%03d.%03d.%03d]\n\r",
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	b2d9      	uxtb	r1, r3
					temp_ip&0xFF, (temp_ip>>8)&0xFF, (temp_ip>>16)&0xFF, (temp_ip>>24)&0xFF);
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	0a1b      	lsrs	r3, r3, #8
				UartDbg("IP address assigned by a DHCP server: [%03d.%03d.%03d.%03d]\n\r",
 8000e96:	b2da      	uxtb	r2, r3
					temp_ip&0xFF, (temp_ip>>8)&0xFF, (temp_ip>>16)&0xFF, (temp_ip>>24)&0xFF);
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	0c1b      	lsrs	r3, r3, #16
				UartDbg("IP address assigned by a DHCP server: [%03d.%03d.%03d.%03d]\n\r",
 8000e9c:	b2d8      	uxtb	r0, r3
					temp_ip&0xFF, (temp_ip>>8)&0xFF, (temp_ip>>16)&0xFF, (temp_ip>>24)&0xFF);
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	0e1b      	lsrs	r3, r3, #24
				UartDbg("IP address assigned by a DHCP server: [%03d.%03d.%03d.%03d]\n\r",
 8000ea2:	9300      	str	r3, [sp, #0]
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	4820      	ldr	r0, [pc, #128]	; (8000f28 <Dhcp_process+0x128>)
 8000ea8:	f000 f89a 	bl	8000fe0 <UartDbg>
			break;
 8000eac:	e02c      	b.n	8000f08 <Dhcp_process+0x108>
				dhcp = (struct dhcp*) netif_get_client_data(netif,
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb2:	61fb      	str	r3, [r7, #28]
				if (dhcp->tries > MAX_DHCP_TRIES) {
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	799b      	ldrb	r3, [r3, #6]
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d925      	bls.n	8000f08 <Dhcp_process+0x108>
					DHCP_state = DHCP_TIMEOUT;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <Dhcp_process+0x118>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	701a      	strb	r2, [r3, #0]
					dhcp_stop(netif);
 8000ec2:	69b8      	ldr	r0, [r7, #24]
 8000ec4:	f015 f8a0 	bl	8016008 <dhcp_stop>
					IP_ADDR4(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <Dhcp_process+0x12c>)
 8000eca:	613b      	str	r3, [r7, #16]
					IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1,
 8000ecc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000ed0:	60fb      	str	r3, [r7, #12]
					IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <Dhcp_process+0x130>)
 8000ed4:	60bb      	str	r3, [r7, #8]
					netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask),
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	f107 020c 	add.w	r2, r7, #12
 8000ede:	f107 0110 	add.w	r1, r7, #16
 8000ee2:	69b8      	ldr	r0, [r7, #24]
 8000ee4:	f00c f8fa 	bl	800d0dc <netif_set_addr>
					UartDbg("Timeout, set to static IP address [%03d.%03d.%03d.%03d]\n\r",IP_ADDR0,
 8000ee8:	230a      	movs	r3, #10
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2308      	movs	r3, #8
 8000eee:	22a8      	movs	r2, #168	; 0xa8
 8000ef0:	21c0      	movs	r1, #192	; 0xc0
 8000ef2:	4810      	ldr	r0, [pc, #64]	; (8000f34 <Dhcp_process+0x134>)
 8000ef4:	f000 f874 	bl	8000fe0 <UartDbg>
			break;
 8000ef8:	e006      	b.n	8000f08 <Dhcp_process+0x108>
			dhcp_stop(netif);
 8000efa:	69b8      	ldr	r0, [r7, #24]
 8000efc:	f015 f884 	bl	8016008 <dhcp_stop>
			DHCP_state = DHCP_OFF;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <Dhcp_process+0x118>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	701a      	strb	r2, [r3, #0]
			break;
 8000f06:	e000      	b.n	8000f0a <Dhcp_process+0x10a>
			break;
 8000f08:	bf00      	nop
		}
		/* wait 250 ms */
		osDelay(250);
 8000f0a:	20fa      	movs	r0, #250	; 0xfa
 8000f0c:	f003 fee6 	bl	8004cdc <osDelay>
		switch (DHCP_state) {
 8000f10:	e794      	b.n	8000e3c <Dhcp_process+0x3c>
 8000f12:	bf00      	nop
 8000f14:	0801a804 	.word	0x0801a804
 8000f18:	20010530 	.word	0x20010530
 8000f1c:	0801a818 	.word	0x0801a818
 8000f20:	0801a82c 	.word	0x0801a82c
 8000f24:	0801a844 	.word	0x0801a844
 8000f28:	0801a860 	.word	0x0801a860
 8000f2c:	0a08a8c0 	.word	0x0a08a8c0
 8000f30:	0108a8c0 	.word	0x0108a8c0
 8000f34:	0801a8a0 	.word	0x0801a8a0

08000f38 <GetDhcpState>:
	}
}


int GetDhcpState(void){
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
	return DHCP_state;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <GetDhcpState+0x14>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2db      	uxtb	r3, r3
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	20010530 	.word	0x20010530

08000f50 <UartTaskInit>:
//osThreadId uartTaskHandle;



// init uart send task
void UartTaskInit(UART_HandleTypeDef *uart_handle) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  dbg_uart = uart_handle;
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <UartTaskInit+0x38>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  uart_messages = xQueueCreate(32, sizeof(uint8_t*));
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2104      	movs	r1, #4
 8000f62:	2020      	movs	r0, #32
 8000f64:	f004 fd59 	bl	8005a1a <xQueueGenericCreate>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <UartTaskInit+0x3c>)
 8000f6c:	601a      	str	r2, [r3, #0]
  // fix to use with freertoss V2 api
  uartTaskHandle = osThreadNew(StartUartTask, NULL, &uartTask_attributes);
 8000f6e:	4a08      	ldr	r2, [pc, #32]	; (8000f90 <UartTaskInit+0x40>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4808      	ldr	r0, [pc, #32]	; (8000f94 <UartTaskInit+0x44>)
 8000f74:	f003 fe0c 	bl	8004b90 <osThreadNew>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <UartTaskInit+0x48>)
 8000f7c:	601a      	str	r2, [r3, #0]
  //osThreadDef(uartTask, StartUartTask, UART_TASK_PRIORITY, 0, 1024);
  //uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20010534 	.word	0x20010534
 8000f8c:	2001053c 	.word	0x2001053c
 8000f90:	0801e4ac 	.word	0x0801e4ac
 8000f94:	0800101d 	.word	0x0800101d
 8000f98:	20010538 	.word	0x20010538

08000f9c <vprint>:

// sprintf implementation to easy use
void vprint(const char *fmt, va_list argp) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  char *txt;
  txt = pvPortMalloc(100);
 8000fa6:	2064      	movs	r0, #100	; 0x64
 8000fa8:	f007 fef2 	bl	8008d90 <pvPortMalloc>
 8000fac:	4603      	mov	r3, r0
 8000fae:	60fb      	str	r3, [r7, #12]
  if (0 < vsprintf(txt, fmt, argp)) // build string
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f018 fb82 	bl	80196c0 <vsiprintf>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	dd07      	ble.n	8000fd2 <vprint+0x36>
  {
    xQueueSend(uart_messages,&txt,0);
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <vprint+0x40>)
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	f107 010c 	add.w	r1, r7, #12
 8000fca:	2300      	movs	r3, #0
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f004 fea1 	bl	8005d14 <xQueueGenericSend>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2001053c 	.word	0x2001053c

08000fe0 <UartDbg>:

// caller to send data funtion
void UartDbg(const char *fmt, ...) // custom printf() function
{
 8000fe0:	b40f      	push	{r0, r1, r2, r3}
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
  vTaskSuspendAll();
 8000fe8:	f006 f956 	bl	8007298 <vTaskSuspendAll>
  va_list argp;
  va_start(argp, fmt);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	607b      	str	r3, [r7, #4]
  vprint(fmt, argp);
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	6938      	ldr	r0, [r7, #16]
 8000ff6:	f7ff ffd1 	bl	8000f9c <vprint>
  va_end(argp);
  vTaskResume(uartTaskHandle);// resume main sending task
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <UartDbg+0x38>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f006 f886 	bl	8007110 <vTaskResume>
  xTaskResumeAll();
 8001004:	f006 f956 	bl	80072b4 <xTaskResumeAll>

}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001012:	b004      	add	sp, #16
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20010538 	.word	0x20010538

0800101c <StartUartTask>:

// main sending task
void StartUartTask(void *argument) {
 800101c:	b5b0      	push	{r4, r5, r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  // set priority to lower value, when task init finished
  vTaskPrioritySet(NULL,UART_TASK_PRIORITY);
 8001024:	2119      	movs	r1, #25
 8001026:	2000      	movs	r0, #0
 8001028:	f005 ff32 	bl	8006e90 <vTaskPrioritySet>
  uint8_t *mes=NULL;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  while (1) {
    while (xQueueReceive(uart_messages, &mes, 0) == pdTRUE) {
 8001030:	e011      	b.n	8001056 <StartUartTask+0x3a>
      // DMA version not working when LWIP init func is called,
      // probably problem with static allocation for lwip task
      // or disabling DMA module for ETH interface init
      //while(!(dbg_uart->gState == HAL_UART_STATE_READY)) { }
      //HAL_UART_Transmit_DMA(dbg_uart, (uint8_t*)mes, strlen((char*)mes));
      HAL_UART_Transmit(dbg_uart, (uint8_t*)mes, strlen((char*)mes), 10);
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <StartUartTask+0x58>)
 8001034:	681c      	ldr	r4, [r3, #0]
 8001036:	68fd      	ldr	r5, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f8e2 	bl	8000204 <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	230a      	movs	r3, #10
 8001046:	4629      	mov	r1, r5
 8001048:	4620      	mov	r0, r4
 800104a:	f002 fc10 	bl	800386e <HAL_UART_Transmit>
      vPortFree(mes);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4618      	mov	r0, r3
 8001052:	f007 ff5f 	bl	8008f14 <vPortFree>
    while (xQueueReceive(uart_messages, &mes, 0) == pdTRUE) {
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <StartUartTask+0x5c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f107 010c 	add.w	r1, r7, #12
 800105e:	2200      	movs	r2, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f005 f86f 	bl	8006144 <xQueueReceive>
 8001066:	4603      	mov	r3, r0
 8001068:	2b01      	cmp	r3, #1
 800106a:	d0e2      	beq.n	8001032 <StartUartTask+0x16>
    }
    vTaskSuspend(NULL); // sleep this task
 800106c:	2000      	movs	r0, #0
 800106e:	f005 ffab 	bl	8006fc8 <vTaskSuspend>
    while (xQueueReceive(uart_messages, &mes, 0) == pdTRUE) {
 8001072:	e7f0      	b.n	8001056 <StartUartTask+0x3a>
 8001074:	20010534 	.word	0x20010534
 8001078:	2001053c 	.word	0x2001053c

0800107c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800107c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001080:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001082:	e003      	b.n	800108c <LoopCopyDataInit>

08001084 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001086:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001088:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800108a:	3104      	adds	r1, #4

0800108c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800108c:	480b      	ldr	r0, [pc, #44]	; (80010bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001090:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001092:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001094:	d3f6      	bcc.n	8001084 <CopyDataInit>
  ldr  r2, =_sbss
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001098:	e002      	b.n	80010a0 <LoopFillZerobss>

0800109a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800109a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800109c:	f842 3b04 	str.w	r3, [r2], #4

080010a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010a0:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010a4:	d3f9      	bcc.n	800109a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010a6:	f7ff fe79 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010aa:	f018 f9ff 	bl	80194ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ae:	f7ff fa97 	bl	80005e0 <main>
  bx  lr    
 80010b2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010b4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80010b8:	08023130 	.word	0x08023130
  ldr  r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010c0:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80010c4:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80010c8:	20016e60 	.word	0x20016e60

080010cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010d4:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_Init+0x40>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <HAL_Init+0x40>)
 80010da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_Init+0x40>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_Init+0x40>)
 80010e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_Init+0x40>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a07      	ldr	r2, [pc, #28]	; (8001110 <HAL_Init+0x40>)
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f8:	2003      	movs	r0, #3
 80010fa:	f000 f8fa 	bl	80012f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fd1e 	bl	8000b40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001104:	f7ff fc96 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023c00 	.word	0x40023c00

08001114 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <HAL_IncTick+0x20>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	461a      	mov	r2, r3
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_IncTick+0x24>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4413      	add	r3, r2
 8001124:	4a04      	ldr	r2, [pc, #16]	; (8001138 <HAL_IncTick+0x24>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008
 8001138:	20010540 	.word	0x20010540

0800113c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return uwTick;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <HAL_GetTick+0x14>)
 8001142:	681b      	ldr	r3, [r3, #0]
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20010540 	.word	0x20010540

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800115c:	f7ff ffee 	bl	800113c <HAL_GetTick>
 8001160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800116c:	d005      	beq.n	800117a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <HAL_Delay+0x40>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	4413      	add	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117a:	bf00      	nop
 800117c:	f7ff ffde 	bl	800113c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	429a      	cmp	r2, r3
 800118a:	d8f7      	bhi.n	800117c <HAL_Delay+0x28>
  {
  }
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000008 	.word	0x20000008

08001198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	db0b      	blt.n	8001226 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 021f 	and.w	r2, r3, #31
 8001214:	4907      	ldr	r1, [pc, #28]	; (8001234 <__NVIC_EnableIRQ+0x38>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2001      	movs	r0, #1
 800121e:	fa00 f202 	lsl.w	r2, r0, r2
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
         );
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff4c 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131a:	f7ff ff61 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 800131e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ffb1 	bl	800128c <NVIC_EncodePriority>
 800132a:	4602      	mov	r2, r0
 800132c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff80 	bl	8001238 <__NVIC_SetPriority>
}
 8001338:	bf00      	nop
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff54 	bl	80011fc <__NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800136c:	4baa      	ldr	r3, [pc, #680]	; (8001618 <HAL_ETH_Init+0x2bc>)
 800136e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e185      	b.n	800168e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f002 ff3c 	bl	8004214 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	4b9e      	ldr	r3, [pc, #632]	; (800161c <HAL_ETH_Init+0x2c0>)
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	4a9d      	ldr	r2, [pc, #628]	; (800161c <HAL_ETH_Init+0x2c0>)
 80013a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013aa:	6453      	str	r3, [r2, #68]	; 0x44
 80013ac:	4b9b      	ldr	r3, [pc, #620]	; (800161c <HAL_ETH_Init+0x2c0>)
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013b8:	4b99      	ldr	r3, [pc, #612]	; (8001620 <HAL_ETH_Init+0x2c4>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	4a98      	ldr	r2, [pc, #608]	; (8001620 <HAL_ETH_Init+0x2c4>)
 80013be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013c2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013c4:	4b96      	ldr	r3, [pc, #600]	; (8001620 <HAL_ETH_Init+0x2c4>)
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4994      	ldr	r1, [pc, #592]	; (8001620 <HAL_ETH_Init+0x2c4>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f042 0201 	orr.w	r2, r2, #1
 80013e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013ea:	f7ff fea7 	bl	800113c <HAL_GetTick>
 80013ee:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013f0:	e011      	b.n	8001416 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80013f2:	f7ff fea3 	bl	800113c <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001400:	d909      	bls.n	8001416 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2203      	movs	r2, #3
 8001406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e13b      	b.n	800168e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1e4      	bne.n	80013f2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	f023 031c 	bic.w	r3, r3, #28
 8001436:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001438:	f001 ff28 	bl	800328c <HAL_RCC_GetHCLKFreq>
 800143c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	4a78      	ldr	r2, [pc, #480]	; (8001624 <HAL_ETH_Init+0x2c8>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d908      	bls.n	8001458 <HAL_ETH_Init+0xfc>
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4a77      	ldr	r2, [pc, #476]	; (8001628 <HAL_ETH_Init+0x2cc>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d804      	bhi.n	8001458 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	61fb      	str	r3, [r7, #28]
 8001456:	e027      	b.n	80014a8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	4a73      	ldr	r2, [pc, #460]	; (8001628 <HAL_ETH_Init+0x2cc>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d908      	bls.n	8001472 <HAL_ETH_Init+0x116>
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	4a72      	ldr	r2, [pc, #456]	; (800162c <HAL_ETH_Init+0x2d0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d804      	bhi.n	8001472 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f043 030c 	orr.w	r3, r3, #12
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	e01a      	b.n	80014a8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	4a6d      	ldr	r2, [pc, #436]	; (800162c <HAL_ETH_Init+0x2d0>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d903      	bls.n	8001482 <HAL_ETH_Init+0x126>
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4a6c      	ldr	r2, [pc, #432]	; (8001630 <HAL_ETH_Init+0x2d4>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d911      	bls.n	80014a6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4a6a      	ldr	r2, [pc, #424]	; (8001630 <HAL_ETH_Init+0x2d4>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d908      	bls.n	800149c <HAL_ETH_Init+0x140>
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4a69      	ldr	r2, [pc, #420]	; (8001634 <HAL_ETH_Init+0x2d8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d804      	bhi.n	800149c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	61fb      	str	r3, [r7, #28]
 800149a:	e005      	b.n	80014a8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	e000      	b.n	80014a8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80014a6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80014b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014b4:	2100      	movs	r1, #0
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fc19 	bl	8001cee <HAL_ETH_WritePHYRegister>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00b      	beq.n	80014da <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80014c6:	6939      	ldr	r1, [r7, #16]
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 fdcf 	bl	800206c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e0d9      	b.n	800168e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80014da:	20ff      	movs	r0, #255	; 0xff
 80014dc:	f7ff fe3a 	bl	8001154 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80a7 	beq.w	8001638 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80014ea:	f7ff fe27 	bl	800113c <HAL_GetTick>
 80014ee:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	461a      	mov	r2, r3
 80014f6:	2101      	movs	r1, #1
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 fb90 	bl	8001c1e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80014fe:	f7ff fe1d 	bl	800113c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d90f      	bls.n	8001530 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001514:	6939      	ldr	r1, [r7, #16]
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 fda8 	bl	800206c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e0ae      	b.n	800168e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0da      	beq.n	80014f0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800153a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800153e:	2100      	movs	r1, #0
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 fbd4 	bl	8001cee <HAL_ETH_WritePHYRegister>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00b      	beq.n	8001564 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001550:	6939      	ldr	r1, [r7, #16]
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 fd8a 	bl	800206c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001560:	2301      	movs	r3, #1
 8001562:	e094      	b.n	800168e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001564:	f7ff fdea 	bl	800113c <HAL_GetTick>
 8001568:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	461a      	mov	r2, r3
 8001570:	2101      	movs	r1, #1
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fb53 	bl	8001c1e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001578:	f7ff fde0 	bl	800113c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	; 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d90f      	bls.n	80015aa <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800158e:	6939      	ldr	r1, [r7, #16]
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 fd6b 	bl	800206c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e071      	b.n	800168e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f003 0320 	and.w	r3, r3, #32
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0da      	beq.n	800156a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	461a      	mov	r2, r3
 80015ba:	211f      	movs	r1, #31
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fb2e 	bl	8001c1e <HAL_ETH_ReadPHYRegister>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00b      	beq.n	80015e0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015cc:	6939      	ldr	r1, [r7, #16]
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 fd4c 	bl	800206c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015dc:	2301      	movs	r3, #1
 80015de:	e056      	b.n	800168e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d004      	beq.n	80015f4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	e002      	b.n	80015fa <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	e037      	b.n	800167c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	e032      	b.n	800167c <HAL_ETH_Init+0x320>
 8001616:	bf00      	nop
 8001618:	03938700 	.word	0x03938700
 800161c:	40023800 	.word	0x40023800
 8001620:	40013800 	.word	0x40013800
 8001624:	01312cff 	.word	0x01312cff
 8001628:	02160ebf 	.word	0x02160ebf
 800162c:	039386ff 	.word	0x039386ff
 8001630:	05f5e0ff 	.word	0x05f5e0ff
 8001634:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	08db      	lsrs	r3, r3, #3
 800163e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001648:	4313      	orrs	r3, r2
 800164a:	b29b      	uxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	2100      	movs	r1, #0
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fb4c 	bl	8001cee <HAL_ETH_WritePHYRegister>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00b      	beq.n	8001674 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001660:	6939      	ldr	r1, [r7, #16]
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f000 fd02 	bl	800206c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e00c      	b.n	800168e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001674:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001678:	f7ff fd6c 	bl	8001154 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800167c:	6939      	ldr	r1, [r7, #16]
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fcf4 	bl	800206c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop

08001698 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_ETH_DMATxDescListInit+0x20>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e052      	b.n	800175e <HAL_ETH_DMATxDescListInit+0xc6>
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2202      	movs	r2, #2
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	e030      	b.n	8001736 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	015b      	lsls	r3, r3, #5
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	4413      	add	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016e4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016ec:	fb02 f303 	mul.w	r3, r2, r3
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	4413      	add	r3, r2
 80016f4:	461a      	mov	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d105      	bne.n	800170e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	3b01      	subs	r3, #1
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	d208      	bcs.n	800172a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3301      	adds	r3, #1
 800171c:	015b      	lsls	r3, r3, #5
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	4413      	add	r3, r2
 8001722:	461a      	mov	r2, r3
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	e002      	b.n	8001730 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3301      	adds	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d3ca      	bcc.n	80016d4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001748:	3310      	adds	r3, #16
 800174a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	371c      	adds	r7, #28
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800176a:	b480      	push	{r7}
 800176c:	b087      	sub	sp, #28
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001782:	2b01      	cmp	r3, #1
 8001784:	d101      	bne.n	800178a <HAL_ETH_DMARxDescListInit+0x20>
 8001786:	2302      	movs	r3, #2
 8001788:	e056      	b.n	8001838 <HAL_ETH_DMARxDescListInit+0xce>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2202      	movs	r2, #2
 8001796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
 80017a4:	e034      	b.n	8001810 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	015b      	lsls	r3, r3, #5
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	4413      	add	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017b6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017be:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017c6:	fb02 f303 	mul.w	r3, r2, r3
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	461a      	mov	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d208      	bcs.n	8001804 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	015b      	lsls	r3, r3, #5
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	4413      	add	r3, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	e002      	b.n	800180a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001804:	68ba      	ldr	r2, [r7, #8]
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d3c6      	bcc.n	80017a6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001822:	330c      	adds	r3, #12
 8001824:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_ETH_TransmitFrame+0x24>
 8001864:	2302      	movs	r3, #2
 8001866:	e0cd      	b.n	8001a04 <HAL_ETH_TransmitFrame+0x1c0>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2202      	movs	r2, #2
 8001874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d109      	bne.n	8001892 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800188e:	2301      	movs	r3, #1
 8001890:	e0b8      	b.n	8001a04 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	da09      	bge.n	80018b0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2212      	movs	r2, #18
 80018a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0a9      	b.n	8001a04 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d915      	bls.n	80018e6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	4a54      	ldr	r2, [pc, #336]	; (8001a10 <HAL_ETH_TransmitFrame+0x1cc>)
 80018be:	fba2 2303 	umull	r2, r3, r2, r3
 80018c2:	0a9b      	lsrs	r3, r3, #10
 80018c4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	4b51      	ldr	r3, [pc, #324]	; (8001a10 <HAL_ETH_TransmitFrame+0x1cc>)
 80018ca:	fba3 1302 	umull	r1, r3, r3, r2
 80018ce:	0a9b      	lsrs	r3, r3, #10
 80018d0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	3301      	adds	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e001      	b.n	80018ea <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80018e6:	2301      	movs	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d11c      	bne.n	800192a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80018fe:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800190a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800191a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	461a      	mov	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
 8001928:	e04b      	b.n	80019c2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	e044      	b.n	80019ba <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800193e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d107      	bne.n	8001956 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001954:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800195e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	3b01      	subs	r3, #1
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	429a      	cmp	r2, r3
 8001968:	d116      	bne.n	8001998 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001978:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	4a25      	ldr	r2, [pc, #148]	; (8001a14 <HAL_ETH_TransmitFrame+0x1d0>)
 800197e:	fb02 f203 	mul.w	r2, r2, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	4413      	add	r3, r2
 8001986:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800198a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001996:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019a6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	461a      	mov	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	3301      	adds	r3, #1
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d3b6      	bcc.n	8001930 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ca:	3314      	adds	r3, #20
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00d      	beq.n	80019f2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019de:	3314      	adds	r3, #20
 80019e0:	2204      	movs	r2, #4
 80019e2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ec:	3304      	adds	r3, #4
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	ac02b00b 	.word	0xac02b00b
 8001a14:	fffffa0c 	.word	0xfffffa0c

08001a18 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e074      	b.n	8001b1c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a42:	e05a      	b.n	8001afa <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	3301      	adds	r3, #1
 8001a48:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a58:	d10d      	bne.n	8001a76 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
 8001a74:	e041      	b.n	8001afa <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10b      	bne.n	8001a9c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a88:	1c5a      	adds	r2, r3, #1
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	461a      	mov	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
 8001a9a:	e02e      	b.n	8001afa <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d103      	bne.n	8001abe <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	0c1b      	lsrs	r3, r3, #16
 8001ac6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001aca:	1f1a      	subs	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e010      	b.n	8001b1c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db02      	blt.n	8001b0a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d99c      	bls.n	8001a44 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b38:	3314      	adds	r3, #20
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b40:	2b40      	cmp	r3, #64	; 0x40
 8001b42:	d112      	bne.n	8001b6a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f002 fc33 	bl	80043b0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b52:	3314      	adds	r3, #20
 8001b54:	2240      	movs	r2, #64	; 0x40
 8001b56:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b68:	e01b      	b.n	8001ba2 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b72:	3314      	adds	r3, #20
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d111      	bne.n	8001ba2 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f839 	bl	8001bf6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8c:	3314      	adds	r3, #20
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2201      	movs	r2, #1
 8001b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001baa:	3314      	adds	r3, #20
 8001bac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001bb0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bba:	3314      	adds	r3, #20
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bc6:	d112      	bne.n	8001bee <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f81e 	bl	8001c0a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd6:	3314      	adds	r3, #20
 8001bd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bdc:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b086      	sub	sp, #24
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	460b      	mov	r3, r1
 8001c28:	607a      	str	r2, [r7, #4]
 8001c2a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b82      	cmp	r3, #130	; 0x82
 8001c3e:	d101      	bne.n	8001c44 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c40:	2302      	movs	r3, #2
 8001c42:	e050      	b.n	8001ce6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2282      	movs	r2, #130	; 0x82
 8001c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 031c 	and.w	r3, r3, #28
 8001c5a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8a1b      	ldrh	r3, [r3, #16]
 8001c60:	02db      	lsls	r3, r3, #11
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001c6a:	897b      	ldrh	r3, [r7, #10]
 8001c6c:	019b      	lsls	r3, r3, #6
 8001c6e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f023 0302 	bic.w	r3, r3, #2
 8001c7e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c90:	f7ff fa54 	bl	800113c <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c96:	e015      	b.n	8001cc4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001c98:	f7ff fa50 	bl	800113c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca6:	d309      	bcc.n	8001cbc <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e014      	b.n	8001ce6 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1e4      	bne.n	8001c98 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	60f8      	str	r0, [r7, #12]
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b42      	cmp	r3, #66	; 0x42
 8001d0e:	d101      	bne.n	8001d14 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
 8001d12:	e04e      	b.n	8001db2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2242      	movs	r2, #66	; 0x42
 8001d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f003 031c 	and.w	r3, r3, #28
 8001d2a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8a1b      	ldrh	r3, [r3, #16]
 8001d30:	02db      	lsls	r3, r3, #11
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d3a:	897b      	ldrh	r3, [r7, #10]
 8001d3c:	019b      	lsls	r3, r3, #6
 8001d3e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d6a:	f7ff f9e7 	bl	800113c <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d70:	e015      	b.n	8001d9e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001d72:	f7ff f9e3 	bl	800113c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	d309      	bcc.n	8001d96 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e00d      	b.n	8001db2 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e4      	bne.n	8001d72 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_ETH_Start+0x16>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e01f      	b.n	8001e10 <HAL_ETH_Start+0x56>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fb45 	bl	8002470 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fb7c 	bl	80024e4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fc13 	bl	8002618 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 fbb0 	bl	8002558 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fbdd 	bl	80025b8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d101      	bne.n	8001e2e <HAL_ETH_Stop+0x16>
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	e01f      	b.n	8001e6e <HAL_ETH_Stop+0x56>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2202      	movs	r2, #2
 8001e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fba2 	bl	8002588 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fbcf 	bl	80025e8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 fb67 	bl	800251e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 fbe1 	bl	8002618 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fb27 	bl	80024aa <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_ETH_ConfigMAC+0x1c>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e0e4      	b.n	800205e <HAL_ETH_ConfigMAC+0x1e6>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 80b1 	beq.w	800200e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4b6c      	ldr	r3, [pc, #432]	; (8002068 <HAL_ETH_ConfigMAC+0x1f0>)
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001ec4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001eca:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001ed0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001ed6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001edc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001ee2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001ee8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001eee:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001ef4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001efa:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001f00:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001f06:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7ff f918 	bl	8001154 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f34:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001f3a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001f40:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001f46:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001f4c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001f52:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001f5e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001f60:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f7ff f8f2 	bl	8001154 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f80:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f8a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001fa8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001fae:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001fb4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001fba:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001fc0:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68fa      	ldr	r2, [r7, #12]
 8001fce:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd8:	2001      	movs	r0, #1
 8001fda:	f7ff f8bb 	bl	8001154 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ffe:	2001      	movs	r0, #1
 8002000:	f7ff f8a8 	bl	8001154 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	61da      	str	r2, [r3, #28]
 800200c:	e01e      	b.n	800204c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800201c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800203e:	2001      	movs	r0, #1
 8002040:	f7ff f888 	bl	8001154 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	ff20810f 	.word	0xff20810f

0800206c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b0b0      	sub	sp, #192	; 0xc0
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002088:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002090:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002092:	2300      	movs	r3, #0
 8002094:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800209a:	2300      	movs	r3, #0
 800209c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800209e:	2300      	movs	r3, #0
 80020a0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d103      	bne.n	80020ba <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80020b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020b6:	663b      	str	r3, [r7, #96]	; 0x60
 80020b8:	e001      	b.n	80020be <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80020be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020c8:	2300      	movs	r3, #0
 80020ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80020d8:	2340      	movs	r3, #64	; 0x40
 80020da:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80020dc:	2300      	movs	r3, #0
 80020de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80020f4:	2300      	movs	r3, #0
 80020f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002140:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002144:	4bac      	ldr	r3, [pc, #688]	; (80023f8 <ETH_MACDMAConfig+0x38c>)
 8002146:	4013      	ands	r3, r2
 8002148:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800214c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800214e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002150:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002154:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002158:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800215e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002160:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002162:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002166:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800216c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800216e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002170:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002174:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002176:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002178:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800217a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800217c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800217e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002180:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002182:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002194:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021a0:	2001      	movs	r0, #1
 80021a2:	f7fe ffd7 	bl	8001154 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021ae:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021b0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80021b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021b4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80021b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80021b8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80021ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80021be:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80021c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80021c4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80021c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80021ca:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80021cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80021d0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80021d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80021dc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80021de:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f7fe ffb2 	bl	8001154 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021f8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002202:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800220c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002218:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800221c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002220:	4013      	ands	r3, r2
 8002222:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002226:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800222a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800222c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002230:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002232:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002236:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002238:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800223c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800223e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002242:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002244:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002248:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800224a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800225c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002268:	2001      	movs	r0, #1
 800226a:	f7fe ff73 	bl	8001154 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002276:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002278:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800227c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002292:	2001      	movs	r0, #1
 8002294:	f7fe ff5e 	bl	8001154 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022a0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80022a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022aa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80022b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022b4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80022c2:	2300      	movs	r3, #0
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80022c6:	2304      	movs	r3, #4
 80022c8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80022ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80022d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80022d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022da:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80022dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022e0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80022e2:	2380      	movs	r3, #128	; 0x80
 80022e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80022ea:	2300      	movs	r3, #0
 80022ec:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f6:	3318      	adds	r3, #24
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80022fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002302:	4b3e      	ldr	r3, [pc, #248]	; (80023fc <ETH_MACDMAConfig+0x390>)
 8002304:	4013      	ands	r3, r2
 8002306:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800230a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800230c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800230e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002310:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002312:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002314:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002316:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002318:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800231a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800231c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800231e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002320:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002322:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002326:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002328:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800232a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800232c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233e:	3318      	adds	r3, #24
 8002340:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002344:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234e:	3318      	adds	r3, #24
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002356:	2001      	movs	r0, #1
 8002358:	f7fe fefc 	bl	8001154 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002364:	3318      	adds	r3, #24
 8002366:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800236a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800236c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800236e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002370:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002374:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002378:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800237a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800237c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800237e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002380:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002382:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002386:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002394:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a4:	2001      	movs	r0, #1
 80023a6:	f7fe fed5 	bl	8001154 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023b6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d10f      	bne.n	80023e0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c8:	331c      	adds	r3, #28
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	331c      	adds	r3, #28
 80023de:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	461a      	mov	r2, r3
 80023e6:	2100      	movs	r1, #0
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f809 	bl	8002400 <ETH_MACAddressConfig>
}
 80023ee:	bf00      	nop
 80023f0:	37c0      	adds	r7, #192	; 0xc0
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	ff20810f 	.word	0xff20810f
 80023fc:	f8de3f23 	.word	0xf8de3f23

08002400 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3305      	adds	r3, #5
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	3204      	adds	r2, #4
 8002418:	7812      	ldrb	r2, [r2, #0]
 800241a:	4313      	orrs	r3, r2
 800241c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <ETH_MACAddressConfig+0x68>)
 8002422:	4413      	add	r3, r2
 8002424:	461a      	mov	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3303      	adds	r3, #3
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	061a      	lsls	r2, r3, #24
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3302      	adds	r3, #2
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	041b      	lsls	r3, r3, #16
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3301      	adds	r3, #1
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	4313      	orrs	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	7812      	ldrb	r2, [r2, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <ETH_MACAddressConfig+0x6c>)
 8002452:	4413      	add	r3, r2
 8002454:	461a      	mov	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	6013      	str	r3, [r2, #0]
}
 800245a:	bf00      	nop
 800245c:	371c      	adds	r7, #28
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40028040 	.word	0x40028040
 800246c:	40028044 	.word	0x40028044

08002470 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0208 	orr.w	r2, r2, #8
 800248a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002494:	2001      	movs	r0, #1
 8002496:	f000 f8e9 	bl	800266c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	601a      	str	r2, [r3, #0]
}
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0208 	bic.w	r2, r2, #8
 80024c4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f000 f8cc 	bl	800266c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	601a      	str	r2, [r3, #0]
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0204 	orr.w	r2, r2, #4
 80024fe:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002508:	2001      	movs	r0, #1
 800250a:	f000 f8af 	bl	800266c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	601a      	str	r2, [r3, #0]
}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0204 	bic.w	r2, r2, #4
 8002538:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002542:	2001      	movs	r0, #1
 8002544:	f000 f892 	bl	800266c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	601a      	str	r2, [r3, #0]
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002568:	3318      	adds	r3, #24
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002578:	3318      	adds	r3, #24
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002598:	3318      	adds	r3, #24
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a8:	3318      	adds	r3, #24
 80025aa:	601a      	str	r2, [r3, #0]
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c8:	3318      	adds	r3, #24
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0202 	orr.w	r2, r2, #2
 80025d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d8:	3318      	adds	r3, #24
 80025da:	601a      	str	r2, [r3, #0]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f8:	3318      	adds	r3, #24
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0202 	bic.w	r2, r2, #2
 8002604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002608:	3318      	adds	r3, #24
 800260a:	601a      	str	r2, [r3, #0]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800262c:	3318      	adds	r3, #24
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263c:	3318      	adds	r3, #24
 800263e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002648:	3318      	adds	r3, #24
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800264e:	2001      	movs	r0, #1
 8002650:	f000 f80c 	bl	800266c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800265e:	3318      	adds	r3, #24
 8002660:	601a      	str	r2, [r3, #0]
}
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002674:	4b0a      	ldr	r3, [pc, #40]	; (80026a0 <ETH_Delay+0x34>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <ETH_Delay+0x38>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	0a5b      	lsrs	r3, r3, #9
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002688:	bf00      	nop
  } 
  while (Delay --);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	1e5a      	subs	r2, r3, #1
 800268e:	60fa      	str	r2, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1f9      	bne.n	8002688 <ETH_Delay+0x1c>
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	20000000 	.word	0x20000000
 80026a4:	10624dd3 	.word	0x10624dd3

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	e177      	b.n	80029b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	697a      	ldr	r2, [r7, #20]
 80026d4:	4013      	ands	r3, r2
 80026d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	429a      	cmp	r2, r3
 80026de:	f040 8166 	bne.w	80029ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d00b      	beq.n	8002702 <HAL_GPIO_Init+0x5a>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d007      	beq.n	8002702 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026f6:	2b11      	cmp	r3, #17
 80026f8:	d003      	beq.n	8002702 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b12      	cmp	r3, #18
 8002700:	d130      	bne.n	8002764 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002738:	2201      	movs	r2, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	091b      	lsrs	r3, r3, #4
 800274e:	f003 0201 	and.w	r2, r3, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	2203      	movs	r2, #3
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0xfc>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b12      	cmp	r3, #18
 80027a2:	d123      	bne.n	80027ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	08da      	lsrs	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3208      	adds	r2, #8
 80027ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	220f      	movs	r2, #15
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	08da      	lsrs	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	3208      	adds	r2, #8
 80027e6:	69b9      	ldr	r1, [r7, #24]
 80027e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	2203      	movs	r2, #3
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 0203 	and.w	r2, r3, #3
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80c0 	beq.w	80029ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	4b65      	ldr	r3, [pc, #404]	; (80029c8 <HAL_GPIO_Init+0x320>)
 8002834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002836:	4a64      	ldr	r2, [pc, #400]	; (80029c8 <HAL_GPIO_Init+0x320>)
 8002838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800283c:	6453      	str	r3, [r2, #68]	; 0x44
 800283e:	4b62      	ldr	r3, [pc, #392]	; (80029c8 <HAL_GPIO_Init+0x320>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284a:	4a60      	ldr	r2, [pc, #384]	; (80029cc <HAL_GPIO_Init+0x324>)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	089b      	lsrs	r3, r3, #2
 8002850:	3302      	adds	r3, #2
 8002852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a57      	ldr	r2, [pc, #348]	; (80029d0 <HAL_GPIO_Init+0x328>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d037      	beq.n	80028e6 <HAL_GPIO_Init+0x23e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a56      	ldr	r2, [pc, #344]	; (80029d4 <HAL_GPIO_Init+0x32c>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d031      	beq.n	80028e2 <HAL_GPIO_Init+0x23a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a55      	ldr	r2, [pc, #340]	; (80029d8 <HAL_GPIO_Init+0x330>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d02b      	beq.n	80028de <HAL_GPIO_Init+0x236>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a54      	ldr	r2, [pc, #336]	; (80029dc <HAL_GPIO_Init+0x334>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d025      	beq.n	80028da <HAL_GPIO_Init+0x232>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a53      	ldr	r2, [pc, #332]	; (80029e0 <HAL_GPIO_Init+0x338>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d01f      	beq.n	80028d6 <HAL_GPIO_Init+0x22e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a52      	ldr	r2, [pc, #328]	; (80029e4 <HAL_GPIO_Init+0x33c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d019      	beq.n	80028d2 <HAL_GPIO_Init+0x22a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a51      	ldr	r2, [pc, #324]	; (80029e8 <HAL_GPIO_Init+0x340>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d013      	beq.n	80028ce <HAL_GPIO_Init+0x226>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a50      	ldr	r2, [pc, #320]	; (80029ec <HAL_GPIO_Init+0x344>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d00d      	beq.n	80028ca <HAL_GPIO_Init+0x222>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4f      	ldr	r2, [pc, #316]	; (80029f0 <HAL_GPIO_Init+0x348>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d007      	beq.n	80028c6 <HAL_GPIO_Init+0x21e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4e      	ldr	r2, [pc, #312]	; (80029f4 <HAL_GPIO_Init+0x34c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_GPIO_Init+0x21a>
 80028be:	2309      	movs	r3, #9
 80028c0:	e012      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028c2:	230a      	movs	r3, #10
 80028c4:	e010      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028c6:	2308      	movs	r3, #8
 80028c8:	e00e      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028ca:	2307      	movs	r3, #7
 80028cc:	e00c      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028ce:	2306      	movs	r3, #6
 80028d0:	e00a      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028d2:	2305      	movs	r3, #5
 80028d4:	e008      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028d6:	2304      	movs	r3, #4
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028da:	2303      	movs	r3, #3
 80028dc:	e004      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028de:	2302      	movs	r3, #2
 80028e0:	e002      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <HAL_GPIO_Init+0x240>
 80028e6:	2300      	movs	r3, #0
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f002 0203 	and.w	r2, r2, #3
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	4093      	lsls	r3, r2
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f8:	4934      	ldr	r1, [pc, #208]	; (80029cc <HAL_GPIO_Init+0x324>)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	089b      	lsrs	r3, r3, #2
 80028fe:	3302      	adds	r3, #2
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002906:	4b3c      	ldr	r3, [pc, #240]	; (80029f8 <HAL_GPIO_Init+0x350>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800292a:	4a33      	ldr	r2, [pc, #204]	; (80029f8 <HAL_GPIO_Init+0x350>)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002930:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <HAL_GPIO_Init+0x350>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002954:	4a28      	ldr	r2, [pc, #160]	; (80029f8 <HAL_GPIO_Init+0x350>)
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800295a:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_GPIO_Init+0x350>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4313      	orrs	r3, r2
 800297c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800297e:	4a1e      	ldr	r2, [pc, #120]	; (80029f8 <HAL_GPIO_Init+0x350>)
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002984:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <HAL_GPIO_Init+0x350>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d003      	beq.n	80029a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029a8:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <HAL_GPIO_Init+0x350>)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3301      	adds	r3, #1
 80029b2:	61fb      	str	r3, [r7, #28]
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	2b0f      	cmp	r3, #15
 80029b8:	f67f ae84 	bls.w	80026c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029bc:	bf00      	nop
 80029be:	3724      	adds	r7, #36	; 0x24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40013800 	.word	0x40013800
 80029d0:	40020000 	.word	0x40020000
 80029d4:	40020400 	.word	0x40020400
 80029d8:	40020800 	.word	0x40020800
 80029dc:	40020c00 	.word	0x40020c00
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40021400 	.word	0x40021400
 80029e8:	40021800 	.word	0x40021800
 80029ec:	40021c00 	.word	0x40021c00
 80029f0:	40022000 	.word	0x40022000
 80029f4:	40022400 	.word	0x40022400
 80029f8:	40013c00 	.word	0x40013c00

080029fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	807b      	strh	r3, [r7, #2]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a0c:	787b      	ldrb	r3, [r7, #1]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a12:	887a      	ldrh	r2, [r7, #2]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a18:	e003      	b.n	8002a22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a1a:	887b      	ldrh	r3, [r7, #2]
 8002a1c:	041a      	lsls	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	619a      	str	r2, [r3, #24]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e25b      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d075      	beq.n	8002b3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a4e:	4ba3      	ldr	r3, [pc, #652]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d00c      	beq.n	8002a74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5a:	4ba0      	ldr	r3, [pc, #640]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d112      	bne.n	8002a8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a66:	4b9d      	ldr	r3, [pc, #628]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a72:	d10b      	bne.n	8002a8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	4b99      	ldr	r3, [pc, #612]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d05b      	beq.n	8002b38 <HAL_RCC_OscConfig+0x108>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d157      	bne.n	8002b38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e236      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a94:	d106      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x74>
 8002a96:	4b91      	ldr	r3, [pc, #580]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a90      	ldr	r2, [pc, #576]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa0:	6013      	str	r3, [r2, #0]
 8002aa2:	e01d      	b.n	8002ae0 <HAL_RCC_OscConfig+0xb0>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x98>
 8002aae:	4b8b      	ldr	r3, [pc, #556]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a8a      	ldr	r2, [pc, #552]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b88      	ldr	r3, [pc, #544]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a87      	ldr	r2, [pc, #540]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e00b      	b.n	8002ae0 <HAL_RCC_OscConfig+0xb0>
 8002ac8:	4b84      	ldr	r3, [pc, #528]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a83      	ldr	r2, [pc, #524]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b81      	ldr	r3, [pc, #516]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a80      	ldr	r2, [pc, #512]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d013      	beq.n	8002b10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fb28 	bl	800113c <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af0:	f7fe fb24 	bl	800113c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b64      	cmp	r3, #100	; 0x64
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e1fb      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	4b76      	ldr	r3, [pc, #472]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0xc0>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b10:	f7fe fb14 	bl	800113c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b18:	f7fe fb10 	bl	800113c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b64      	cmp	r3, #100	; 0x64
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e1e7      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2a:	4b6c      	ldr	r3, [pc, #432]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0xe8>
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d063      	beq.n	8002c0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b46:	4b65      	ldr	r3, [pc, #404]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b52:	4b62      	ldr	r3, [pc, #392]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d11c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b5e:	4b5f      	ldr	r3, [pc, #380]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d116      	bne.n	8002b98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	4b5c      	ldr	r3, [pc, #368]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_RCC_OscConfig+0x152>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d001      	beq.n	8002b82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e1bb      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b82:	4b56      	ldr	r3, [pc, #344]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4952      	ldr	r1, [pc, #328]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b96:	e03a      	b.n	8002c0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d020      	beq.n	8002be2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba0:	4b4f      	ldr	r3, [pc, #316]	; (8002ce0 <HAL_RCC_OscConfig+0x2b0>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7fe fac9 	bl	800113c <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bae:	f7fe fac5 	bl	800113c <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e19c      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc0:	4b46      	ldr	r3, [pc, #280]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bcc:	4b43      	ldr	r3, [pc, #268]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4940      	ldr	r1, [pc, #256]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	600b      	str	r3, [r1, #0]
 8002be0:	e015      	b.n	8002c0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be2:	4b3f      	ldr	r3, [pc, #252]	; (8002ce0 <HAL_RCC_OscConfig+0x2b0>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7fe faa8 	bl	800113c <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf0:	f7fe faa4 	bl	800113c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e17b      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c02:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f0      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d030      	beq.n	8002c7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d016      	beq.n	8002c50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c22:	4b30      	ldr	r3, [pc, #192]	; (8002ce4 <HAL_RCC_OscConfig+0x2b4>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c28:	f7fe fa88 	bl	800113c <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c30:	f7fe fa84 	bl	800113c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e15b      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c42:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x200>
 8002c4e:	e015      	b.n	8002c7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c50:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_RCC_OscConfig+0x2b4>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c56:	f7fe fa71 	bl	800113c <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c5e:	f7fe fa6d 	bl	800113c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e144      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c70:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1f0      	bne.n	8002c5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a0 	beq.w	8002dca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c8e:	4b13      	ldr	r3, [pc, #76]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10f      	bne.n	8002cba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	4a0e      	ldr	r2, [pc, #56]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_OscConfig+0x2b8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d121      	bne.n	8002d0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <HAL_RCC_OscConfig+0x2b8>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <HAL_RCC_OscConfig+0x2b8>)
 8002ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd2:	f7fe fa33 	bl	800113c <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd8:	e011      	b.n	8002cfe <HAL_RCC_OscConfig+0x2ce>
 8002cda:	bf00      	nop
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	42470000 	.word	0x42470000
 8002ce4:	42470e80 	.word	0x42470e80
 8002ce8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cec:	f7fe fa26 	bl	800113c <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e0fd      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	4b81      	ldr	r3, [pc, #516]	; (8002f04 <HAL_RCC_OscConfig+0x4d4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d106      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2f0>
 8002d12:	4b7d      	ldr	r3, [pc, #500]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	4a7c      	ldr	r2, [pc, #496]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d1e:	e01c      	b.n	8002d5a <HAL_RCC_OscConfig+0x32a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b05      	cmp	r3, #5
 8002d26:	d10c      	bne.n	8002d42 <HAL_RCC_OscConfig+0x312>
 8002d28:	4b77      	ldr	r3, [pc, #476]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2c:	4a76      	ldr	r2, [pc, #472]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	6713      	str	r3, [r2, #112]	; 0x70
 8002d34:	4b74      	ldr	r3, [pc, #464]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	4a73      	ldr	r2, [pc, #460]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002d40:	e00b      	b.n	8002d5a <HAL_RCC_OscConfig+0x32a>
 8002d42:	4b71      	ldr	r3, [pc, #452]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d46:	4a70      	ldr	r2, [pc, #448]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d4e:	4b6e      	ldr	r3, [pc, #440]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a6d      	ldr	r2, [pc, #436]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002d54:	f023 0304 	bic.w	r3, r3, #4
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d015      	beq.n	8002d8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d62:	f7fe f9eb 	bl	800113c <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fe f9e7 	bl	800113c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e0bc      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0ee      	beq.n	8002d6a <HAL_RCC_OscConfig+0x33a>
 8002d8c:	e014      	b.n	8002db8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8e:	f7fe f9d5 	bl	800113c <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d94:	e00a      	b.n	8002dac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d96:	f7fe f9d1 	bl	800113c <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e0a6      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dac:	4b56      	ldr	r3, [pc, #344]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1ee      	bne.n	8002d96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d105      	bne.n	8002dca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbe:	4b52      	ldr	r3, [pc, #328]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a51      	ldr	r2, [pc, #324]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002dc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 8092 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd4:	4b4c      	ldr	r3, [pc, #304]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d05c      	beq.n	8002e9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d141      	bne.n	8002e6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de8:	4b48      	ldr	r3, [pc, #288]	; (8002f0c <HAL_RCC_OscConfig+0x4dc>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7fe f9a5 	bl	800113c <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df6:	f7fe f9a1 	bl	800113c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e078      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e08:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d1f0      	bne.n	8002df6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	019b      	lsls	r3, r3, #6
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	085b      	lsrs	r3, r3, #1
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e36:	061b      	lsls	r3, r3, #24
 8002e38:	4933      	ldr	r1, [pc, #204]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e3e:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <HAL_RCC_OscConfig+0x4dc>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe f97a 	bl	800113c <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe f976 	bl	800113c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e04d      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5e:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f0      	beq.n	8002e4c <HAL_RCC_OscConfig+0x41c>
 8002e6a:	e045      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6c:	4b27      	ldr	r3, [pc, #156]	; (8002f0c <HAL_RCC_OscConfig+0x4dc>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fe f963 	bl	800113c <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe f95f 	bl	800113c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e036      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8c:	4b1e      	ldr	r3, [pc, #120]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f0      	bne.n	8002e7a <HAL_RCC_OscConfig+0x44a>
 8002e98:	e02e      	b.n	8002ef8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e029      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ea6:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <HAL_RCC_OscConfig+0x4d8>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d11c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d115      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ece:	4013      	ands	r3, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d10d      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d106      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d001      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40007000 	.word	0x40007000
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	42470060 	.word	0x42470060

08002f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0cc      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f24:	4b68      	ldr	r3, [pc, #416]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d90c      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b65      	ldr	r3, [pc, #404]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b63      	ldr	r3, [pc, #396]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0b8      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f64:	4b59      	ldr	r3, [pc, #356]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a58      	ldr	r2, [pc, #352]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f7c:	4b53      	ldr	r3, [pc, #332]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a52      	ldr	r2, [pc, #328]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f88:	4b50      	ldr	r3, [pc, #320]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	494d      	ldr	r1, [pc, #308]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d044      	beq.n	8003030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b47      	ldr	r3, [pc, #284]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d119      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e07f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fce:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e06f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fde:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e067      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fee:	4b37      	ldr	r3, [pc, #220]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4934      	ldr	r1, [pc, #208]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003000:	f7fe f89c 	bl	800113c <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003008:	f7fe f898 	bl	800113c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	; 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e04f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 020c 	and.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	429a      	cmp	r2, r3
 800302e:	d1eb      	bne.n	8003008 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003030:	4b25      	ldr	r3, [pc, #148]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d20c      	bcs.n	8003058 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e032      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4916      	ldr	r1, [pc, #88]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003082:	4b12      	ldr	r3, [pc, #72]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	490e      	ldr	r1, [pc, #56]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003096:	f000 f821 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800309a:	4601      	mov	r1, r0
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	4a0a      	ldr	r2, [pc, #40]	; (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	5cd3      	ldrb	r3, [r2, r3]
 80030aa:	fa21 f303 	lsr.w	r3, r1, r3
 80030ae:	4a09      	ldr	r2, [pc, #36]	; (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fd fd42 	bl	8000b40 <HAL_InitTick>

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023c00 	.word	0x40023c00
 80030cc:	40023800 	.word	0x40023800
 80030d0:	0801e470 	.word	0x0801e470
 80030d4:	20000000 	.word	0x20000000
 80030d8:	20000004 	.word	0x20000004

080030dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	2300      	movs	r3, #0
 80030ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f2:	4b63      	ldr	r3, [pc, #396]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 030c 	and.w	r3, r3, #12
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d007      	beq.n	800310e <HAL_RCC_GetSysClockFreq+0x32>
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d008      	beq.n	8003114 <HAL_RCC_GetSysClockFreq+0x38>
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 80b4 	bne.w	8003270 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003108:	4b5e      	ldr	r3, [pc, #376]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800310a:	60bb      	str	r3, [r7, #8]
       break;
 800310c:	e0b3      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800310e:	4b5e      	ldr	r3, [pc, #376]	; (8003288 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003110:	60bb      	str	r3, [r7, #8]
      break;
 8003112:	e0b0      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003114:	4b5a      	ldr	r3, [pc, #360]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800311c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800311e:	4b58      	ldr	r3, [pc, #352]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d04a      	beq.n	80031c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800312a:	4b55      	ldr	r3, [pc, #340]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	099b      	lsrs	r3, r3, #6
 8003130:	f04f 0400 	mov.w	r4, #0
 8003134:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	ea03 0501 	and.w	r5, r3, r1
 8003140:	ea04 0602 	and.w	r6, r4, r2
 8003144:	4629      	mov	r1, r5
 8003146:	4632      	mov	r2, r6
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	f04f 0400 	mov.w	r4, #0
 8003150:	0154      	lsls	r4, r2, #5
 8003152:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003156:	014b      	lsls	r3, r1, #5
 8003158:	4619      	mov	r1, r3
 800315a:	4622      	mov	r2, r4
 800315c:	1b49      	subs	r1, r1, r5
 800315e:	eb62 0206 	sbc.w	r2, r2, r6
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	f04f 0400 	mov.w	r4, #0
 800316a:	0194      	lsls	r4, r2, #6
 800316c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003170:	018b      	lsls	r3, r1, #6
 8003172:	1a5b      	subs	r3, r3, r1
 8003174:	eb64 0402 	sbc.w	r4, r4, r2
 8003178:	f04f 0100 	mov.w	r1, #0
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	00e2      	lsls	r2, r4, #3
 8003182:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003186:	00d9      	lsls	r1, r3, #3
 8003188:	460b      	mov	r3, r1
 800318a:	4614      	mov	r4, r2
 800318c:	195b      	adds	r3, r3, r5
 800318e:	eb44 0406 	adc.w	r4, r4, r6
 8003192:	f04f 0100 	mov.w	r1, #0
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	0262      	lsls	r2, r4, #9
 800319c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80031a0:	0259      	lsls	r1, r3, #9
 80031a2:	460b      	mov	r3, r1
 80031a4:	4614      	mov	r4, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	4621      	mov	r1, r4
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f04f 0400 	mov.w	r4, #0
 80031b0:	461a      	mov	r2, r3
 80031b2:	4623      	mov	r3, r4
 80031b4:	f7fd f884 	bl	80002c0 <__aeabi_uldivmod>
 80031b8:	4603      	mov	r3, r0
 80031ba:	460c      	mov	r4, r1
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	e049      	b.n	8003254 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c0:	4b2f      	ldr	r3, [pc, #188]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	099b      	lsrs	r3, r3, #6
 80031c6:	f04f 0400 	mov.w	r4, #0
 80031ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	ea03 0501 	and.w	r5, r3, r1
 80031d6:	ea04 0602 	and.w	r6, r4, r2
 80031da:	4629      	mov	r1, r5
 80031dc:	4632      	mov	r2, r6
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	f04f 0400 	mov.w	r4, #0
 80031e6:	0154      	lsls	r4, r2, #5
 80031e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031ec:	014b      	lsls	r3, r1, #5
 80031ee:	4619      	mov	r1, r3
 80031f0:	4622      	mov	r2, r4
 80031f2:	1b49      	subs	r1, r1, r5
 80031f4:	eb62 0206 	sbc.w	r2, r2, r6
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	f04f 0400 	mov.w	r4, #0
 8003200:	0194      	lsls	r4, r2, #6
 8003202:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003206:	018b      	lsls	r3, r1, #6
 8003208:	1a5b      	subs	r3, r3, r1
 800320a:	eb64 0402 	sbc.w	r4, r4, r2
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	00e2      	lsls	r2, r4, #3
 8003218:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800321c:	00d9      	lsls	r1, r3, #3
 800321e:	460b      	mov	r3, r1
 8003220:	4614      	mov	r4, r2
 8003222:	195b      	adds	r3, r3, r5
 8003224:	eb44 0406 	adc.w	r4, r4, r6
 8003228:	f04f 0100 	mov.w	r1, #0
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	02a2      	lsls	r2, r4, #10
 8003232:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003236:	0299      	lsls	r1, r3, #10
 8003238:	460b      	mov	r3, r1
 800323a:	4614      	mov	r4, r2
 800323c:	4618      	mov	r0, r3
 800323e:	4621      	mov	r1, r4
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f04f 0400 	mov.w	r4, #0
 8003246:	461a      	mov	r2, r3
 8003248:	4623      	mov	r3, r4
 800324a:	f7fd f839 	bl	80002c0 <__aeabi_uldivmod>
 800324e:	4603      	mov	r3, r0
 8003250:	460c      	mov	r4, r1
 8003252:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	0c1b      	lsrs	r3, r3, #16
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	3301      	adds	r3, #1
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	60bb      	str	r3, [r7, #8]
      break;
 800326e:	e002      	b.n	8003276 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003272:	60bb      	str	r3, [r7, #8]
      break;
 8003274:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003276:	68bb      	ldr	r3, [r7, #8]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003280:	40023800 	.word	0x40023800
 8003284:	00f42400 	.word	0x00f42400
 8003288:	007a1200 	.word	0x007a1200

0800328c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003290:	4b03      	ldr	r3, [pc, #12]	; (80032a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000000 	.word	0x20000000

080032a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032a8:	f7ff fff0 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032ac:	4601      	mov	r1, r0
 80032ae:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	0a9b      	lsrs	r3, r3, #10
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	4a03      	ldr	r2, [pc, #12]	; (80032c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032ba:	5cd3      	ldrb	r3, [r2, r3]
 80032bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40023800 	.word	0x40023800
 80032c8:	0801e480 	.word	0x0801e480

080032cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032d0:	f7ff ffdc 	bl	800328c <HAL_RCC_GetHCLKFreq>
 80032d4:	4601      	mov	r1, r0
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	0b5b      	lsrs	r3, r3, #13
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4a03      	ldr	r2, [pc, #12]	; (80032f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e2:	5cd3      	ldrb	r3, [r2, r3]
 80032e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40023800 	.word	0x40023800
 80032f0:	0801e480 	.word	0x0801e480

080032f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	220f      	movs	r2, #15
 8003302:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003310:	4b0f      	ldr	r3, [pc, #60]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_RCC_GetClockConfig+0x5c>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	08db      	lsrs	r3, r3, #3
 800332e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <HAL_RCC_GetClockConfig+0x60>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 020f 	and.w	r2, r3, #15
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	40023c00 	.word	0x40023c00

08003358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e01d      	b.n	80033a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d106      	bne.n	8003384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f815 	bl	80033ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	4619      	mov	r1, r3
 8003396:	4610      	mov	r0, r2
 8003398:	f000 f968 	bl	800366c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr

080033c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033c2:	b480      	push	{r7}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b06      	cmp	r3, #6
 80033ea:	d007      	beq.n	80033fc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	d122      	bne.n	8003466 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b02      	cmp	r3, #2
 800342c:	d11b      	bne.n	8003466 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f06f 0202 	mvn.w	r2, #2
 8003436:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f8ee 	bl	800362e <HAL_TIM_IC_CaptureCallback>
 8003452:	e005      	b.n	8003460 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f8e0 	bl	800361a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f8f1 	bl	8003642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d122      	bne.n	80034ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b04      	cmp	r3, #4
 8003480:	d11b      	bne.n	80034ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f06f 0204 	mvn.w	r2, #4
 800348a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f8c4 	bl	800362e <HAL_TIM_IC_CaptureCallback>
 80034a6:	e005      	b.n	80034b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f8b6 	bl	800361a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f8c7 	bl	8003642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d122      	bne.n	800350e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f003 0308 	and.w	r3, r3, #8
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11b      	bne.n	800350e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f06f 0208 	mvn.w	r2, #8
 80034de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2204      	movs	r2, #4
 80034e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f89a 	bl	800362e <HAL_TIM_IC_CaptureCallback>
 80034fa:	e005      	b.n	8003508 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f88c 	bl	800361a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 f89d 	bl	8003642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b10      	cmp	r3, #16
 800351a:	d122      	bne.n	8003562 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b10      	cmp	r3, #16
 8003528:	d11b      	bne.n	8003562 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f06f 0210 	mvn.w	r2, #16
 8003532:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2208      	movs	r2, #8
 8003538:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f870 	bl	800362e <HAL_TIM_IC_CaptureCallback>
 800354e:	e005      	b.n	800355c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f862 	bl	800361a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f873 	bl	8003642 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b01      	cmp	r3, #1
 800356e:	d10e      	bne.n	800358e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d107      	bne.n	800358e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f06f 0201 	mvn.w	r2, #1
 8003586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f7fd fa39 	bl	8000a00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d10e      	bne.n	80035ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b80      	cmp	r3, #128	; 0x80
 80035a8:	d107      	bne.n	80035ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f903 	bl	80037c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d10e      	bne.n	80035e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	d107      	bne.n	80035e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f838 	bl	8003656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d10e      	bne.n	8003612 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	2b20      	cmp	r3, #32
 8003600:	d107      	bne.n	8003612 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f06f 0220 	mvn.w	r2, #32
 800360a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 f8cd 	bl	80037ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a40      	ldr	r2, [pc, #256]	; (8003780 <TIM_Base_SetConfig+0x114>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d013      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d00f      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a3d      	ldr	r2, [pc, #244]	; (8003784 <TIM_Base_SetConfig+0x118>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00b      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a3c      	ldr	r2, [pc, #240]	; (8003788 <TIM_Base_SetConfig+0x11c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d007      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a3b      	ldr	r2, [pc, #236]	; (800378c <TIM_Base_SetConfig+0x120>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_Base_SetConfig+0x40>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a3a      	ldr	r2, [pc, #232]	; (8003790 <TIM_Base_SetConfig+0x124>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d108      	bne.n	80036be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a2f      	ldr	r2, [pc, #188]	; (8003780 <TIM_Base_SetConfig+0x114>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d02b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036cc:	d027      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a2c      	ldr	r2, [pc, #176]	; (8003784 <TIM_Base_SetConfig+0x118>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d023      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a2b      	ldr	r2, [pc, #172]	; (8003788 <TIM_Base_SetConfig+0x11c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01f      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a2a      	ldr	r2, [pc, #168]	; (800378c <TIM_Base_SetConfig+0x120>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a29      	ldr	r2, [pc, #164]	; (8003790 <TIM_Base_SetConfig+0x124>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d017      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a28      	ldr	r2, [pc, #160]	; (8003794 <TIM_Base_SetConfig+0x128>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a27      	ldr	r2, [pc, #156]	; (8003798 <TIM_Base_SetConfig+0x12c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00f      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a26      	ldr	r2, [pc, #152]	; (800379c <TIM_Base_SetConfig+0x130>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00b      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a25      	ldr	r2, [pc, #148]	; (80037a0 <TIM_Base_SetConfig+0x134>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d007      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a24      	ldr	r2, [pc, #144]	; (80037a4 <TIM_Base_SetConfig+0x138>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d003      	beq.n	800371e <TIM_Base_SetConfig+0xb2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a23      	ldr	r2, [pc, #140]	; (80037a8 <TIM_Base_SetConfig+0x13c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d108      	bne.n	8003730 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003724:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a0a      	ldr	r2, [pc, #40]	; (8003780 <TIM_Base_SetConfig+0x114>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_Base_SetConfig+0xf8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <TIM_Base_SetConfig+0x124>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d103      	bne.n	800376c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	615a      	str	r2, [r3, #20]
}
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40010000 	.word	0x40010000
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800
 800378c:	40000c00 	.word	0x40000c00
 8003790:	40010400 	.word	0x40010400
 8003794:	40014000 	.word	0x40014000
 8003798:	40014400 	.word	0x40014400
 800379c:	40014800 	.word	0x40014800
 80037a0:	40001800 	.word	0x40001800
 80037a4:	40001c00 	.word	0x40001c00
 80037a8:	40002000 	.word	0x40002000

080037ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e03f      	b.n	8003866 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd f958 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2224      	movs	r2, #36	; 0x24
 8003804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f90b 	bl	8003a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800382c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800383c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800384c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b088      	sub	sp, #32
 8003872:	af02      	add	r7, sp, #8
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b20      	cmp	r3, #32
 800388c:	f040 8083 	bne.w	8003996 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d002      	beq.n	800389c <HAL_UART_Transmit+0x2e>
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e07b      	b.n	8003998 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_UART_Transmit+0x40>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e074      	b.n	8003998 <HAL_UART_Transmit+0x12a>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2221      	movs	r2, #33	; 0x21
 80038c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80038c4:	f7fd fc3a 	bl	800113c <HAL_GetTick>
 80038c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	88fa      	ldrh	r2, [r7, #6]
 80038ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	88fa      	ldrh	r2, [r7, #6]
 80038d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80038de:	e042      	b.n	8003966 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f6:	d122      	bne.n	800393e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2200      	movs	r2, #0
 8003900:	2180      	movs	r1, #128	; 0x80
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 f84c 	bl	80039a0 <UART_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e042      	b.n	8003998 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003924:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d103      	bne.n	8003936 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3302      	adds	r3, #2
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	e017      	b.n	8003966 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	3301      	adds	r3, #1
 800393a:	60bb      	str	r3, [r7, #8]
 800393c:	e013      	b.n	8003966 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f000 f829 	bl	80039a0 <UART_WaitOnFlagUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e01f      	b.n	8003998 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	60ba      	str	r2, [r7, #8]
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1b7      	bne.n	80038e0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2200      	movs	r2, #0
 8003978:	2140      	movs	r1, #64	; 0x40
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f810 	bl	80039a0 <UART_WaitOnFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e006      	b.n	8003998 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3718      	adds	r7, #24
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b0:	e02c      	b.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d028      	beq.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d007      	beq.n	80039d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80039c0:	f7fd fbbc 	bl	800113c <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d21d      	bcs.n	8003a0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695a      	ldr	r2, [r3, #20]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e00f      	b.n	8003a2c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4013      	ands	r3, r2
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d0c3      	beq.n	80039b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003a76:	f023 030c 	bic.w	r3, r3, #12
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6812      	ldr	r2, [r2, #0]
 8003a7e:	68f9      	ldr	r1, [r7, #12]
 8003a80:	430b      	orrs	r3, r1
 8003a82:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa2:	f040 818b 	bne.w	8003dbc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4ac1      	ldr	r2, [pc, #772]	; (8003db0 <UART_SetConfig+0x37c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d005      	beq.n	8003abc <UART_SetConfig+0x88>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4abf      	ldr	r2, [pc, #764]	; (8003db4 <UART_SetConfig+0x380>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	f040 80bd 	bne.w	8003c36 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003abc:	f7ff fc06 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 8003ac0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	461d      	mov	r5, r3
 8003ac6:	f04f 0600 	mov.w	r6, #0
 8003aca:	46a8      	mov	r8, r5
 8003acc:	46b1      	mov	r9, r6
 8003ace:	eb18 0308 	adds.w	r3, r8, r8
 8003ad2:	eb49 0409 	adc.w	r4, r9, r9
 8003ad6:	4698      	mov	r8, r3
 8003ad8:	46a1      	mov	r9, r4
 8003ada:	eb18 0805 	adds.w	r8, r8, r5
 8003ade:	eb49 0906 	adc.w	r9, r9, r6
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003aee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003af2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003af6:	4688      	mov	r8, r1
 8003af8:	4691      	mov	r9, r2
 8003afa:	eb18 0005 	adds.w	r0, r8, r5
 8003afe:	eb49 0106 	adc.w	r1, r9, r6
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	461d      	mov	r5, r3
 8003b08:	f04f 0600 	mov.w	r6, #0
 8003b0c:	196b      	adds	r3, r5, r5
 8003b0e:	eb46 0406 	adc.w	r4, r6, r6
 8003b12:	461a      	mov	r2, r3
 8003b14:	4623      	mov	r3, r4
 8003b16:	f7fc fbd3 	bl	80002c0 <__aeabi_uldivmod>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	461a      	mov	r2, r3
 8003b20:	4ba5      	ldr	r3, [pc, #660]	; (8003db8 <UART_SetConfig+0x384>)
 8003b22:	fba3 2302 	umull	r2, r3, r3, r2
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	461d      	mov	r5, r3
 8003b30:	f04f 0600 	mov.w	r6, #0
 8003b34:	46a9      	mov	r9, r5
 8003b36:	46b2      	mov	sl, r6
 8003b38:	eb19 0309 	adds.w	r3, r9, r9
 8003b3c:	eb4a 040a 	adc.w	r4, sl, sl
 8003b40:	4699      	mov	r9, r3
 8003b42:	46a2      	mov	sl, r4
 8003b44:	eb19 0905 	adds.w	r9, r9, r5
 8003b48:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b4c:	f04f 0100 	mov.w	r1, #0
 8003b50:	f04f 0200 	mov.w	r2, #0
 8003b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b60:	4689      	mov	r9, r1
 8003b62:	4692      	mov	sl, r2
 8003b64:	eb19 0005 	adds.w	r0, r9, r5
 8003b68:	eb4a 0106 	adc.w	r1, sl, r6
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	461d      	mov	r5, r3
 8003b72:	f04f 0600 	mov.w	r6, #0
 8003b76:	196b      	adds	r3, r5, r5
 8003b78:	eb46 0406 	adc.w	r4, r6, r6
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4623      	mov	r3, r4
 8003b80:	f7fc fb9e 	bl	80002c0 <__aeabi_uldivmod>
 8003b84:	4603      	mov	r3, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4b8b      	ldr	r3, [pc, #556]	; (8003db8 <UART_SetConfig+0x384>)
 8003b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	2164      	movs	r1, #100	; 0x64
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	3332      	adds	r3, #50	; 0x32
 8003b9e:	4a86      	ldr	r2, [pc, #536]	; (8003db8 <UART_SetConfig+0x384>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bac:	4498      	add	r8, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	461d      	mov	r5, r3
 8003bb2:	f04f 0600 	mov.w	r6, #0
 8003bb6:	46a9      	mov	r9, r5
 8003bb8:	46b2      	mov	sl, r6
 8003bba:	eb19 0309 	adds.w	r3, r9, r9
 8003bbe:	eb4a 040a 	adc.w	r4, sl, sl
 8003bc2:	4699      	mov	r9, r3
 8003bc4:	46a2      	mov	sl, r4
 8003bc6:	eb19 0905 	adds.w	r9, r9, r5
 8003bca:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bce:	f04f 0100 	mov.w	r1, #0
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003be2:	4689      	mov	r9, r1
 8003be4:	4692      	mov	sl, r2
 8003be6:	eb19 0005 	adds.w	r0, r9, r5
 8003bea:	eb4a 0106 	adc.w	r1, sl, r6
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	461d      	mov	r5, r3
 8003bf4:	f04f 0600 	mov.w	r6, #0
 8003bf8:	196b      	adds	r3, r5, r5
 8003bfa:	eb46 0406 	adc.w	r4, r6, r6
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4623      	mov	r3, r4
 8003c02:	f7fc fb5d 	bl	80002c0 <__aeabi_uldivmod>
 8003c06:	4603      	mov	r3, r0
 8003c08:	460c      	mov	r4, r1
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4b6a      	ldr	r3, [pc, #424]	; (8003db8 <UART_SetConfig+0x384>)
 8003c0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	2164      	movs	r1, #100	; 0x64
 8003c16:	fb01 f303 	mul.w	r3, r1, r3
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	3332      	adds	r3, #50	; 0x32
 8003c20:	4a65      	ldr	r2, [pc, #404]	; (8003db8 <UART_SetConfig+0x384>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	f003 0207 	and.w	r2, r3, #7
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4442      	add	r2, r8
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	e26f      	b.n	8004116 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c36:	f7ff fb35 	bl	80032a4 <HAL_RCC_GetPCLK1Freq>
 8003c3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	461d      	mov	r5, r3
 8003c40:	f04f 0600 	mov.w	r6, #0
 8003c44:	46a8      	mov	r8, r5
 8003c46:	46b1      	mov	r9, r6
 8003c48:	eb18 0308 	adds.w	r3, r8, r8
 8003c4c:	eb49 0409 	adc.w	r4, r9, r9
 8003c50:	4698      	mov	r8, r3
 8003c52:	46a1      	mov	r9, r4
 8003c54:	eb18 0805 	adds.w	r8, r8, r5
 8003c58:	eb49 0906 	adc.w	r9, r9, r6
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c68:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c6c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c70:	4688      	mov	r8, r1
 8003c72:	4691      	mov	r9, r2
 8003c74:	eb18 0005 	adds.w	r0, r8, r5
 8003c78:	eb49 0106 	adc.w	r1, r9, r6
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	461d      	mov	r5, r3
 8003c82:	f04f 0600 	mov.w	r6, #0
 8003c86:	196b      	adds	r3, r5, r5
 8003c88:	eb46 0406 	adc.w	r4, r6, r6
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4623      	mov	r3, r4
 8003c90:	f7fc fb16 	bl	80002c0 <__aeabi_uldivmod>
 8003c94:	4603      	mov	r3, r0
 8003c96:	460c      	mov	r4, r1
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <UART_SetConfig+0x384>)
 8003c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca0:	095b      	lsrs	r3, r3, #5
 8003ca2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	461d      	mov	r5, r3
 8003caa:	f04f 0600 	mov.w	r6, #0
 8003cae:	46a9      	mov	r9, r5
 8003cb0:	46b2      	mov	sl, r6
 8003cb2:	eb19 0309 	adds.w	r3, r9, r9
 8003cb6:	eb4a 040a 	adc.w	r4, sl, sl
 8003cba:	4699      	mov	r9, r3
 8003cbc:	46a2      	mov	sl, r4
 8003cbe:	eb19 0905 	adds.w	r9, r9, r5
 8003cc2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cda:	4689      	mov	r9, r1
 8003cdc:	4692      	mov	sl, r2
 8003cde:	eb19 0005 	adds.w	r0, r9, r5
 8003ce2:	eb4a 0106 	adc.w	r1, sl, r6
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	461d      	mov	r5, r3
 8003cec:	f04f 0600 	mov.w	r6, #0
 8003cf0:	196b      	adds	r3, r5, r5
 8003cf2:	eb46 0406 	adc.w	r4, r6, r6
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	4623      	mov	r3, r4
 8003cfa:	f7fc fae1 	bl	80002c0 <__aeabi_uldivmod>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	460c      	mov	r4, r1
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b2c      	ldr	r3, [pc, #176]	; (8003db8 <UART_SetConfig+0x384>)
 8003d06:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	2164      	movs	r1, #100	; 0x64
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	3332      	adds	r3, #50	; 0x32
 8003d18:	4a27      	ldr	r2, [pc, #156]	; (8003db8 <UART_SetConfig+0x384>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d26:	4498      	add	r8, r3
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	f04f 0600 	mov.w	r6, #0
 8003d30:	46a9      	mov	r9, r5
 8003d32:	46b2      	mov	sl, r6
 8003d34:	eb19 0309 	adds.w	r3, r9, r9
 8003d38:	eb4a 040a 	adc.w	r4, sl, sl
 8003d3c:	4699      	mov	r9, r3
 8003d3e:	46a2      	mov	sl, r4
 8003d40:	eb19 0905 	adds.w	r9, r9, r5
 8003d44:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d48:	f04f 0100 	mov.w	r1, #0
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d5c:	4689      	mov	r9, r1
 8003d5e:	4692      	mov	sl, r2
 8003d60:	eb19 0005 	adds.w	r0, r9, r5
 8003d64:	eb4a 0106 	adc.w	r1, sl, r6
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	461d      	mov	r5, r3
 8003d6e:	f04f 0600 	mov.w	r6, #0
 8003d72:	196b      	adds	r3, r5, r5
 8003d74:	eb46 0406 	adc.w	r4, r6, r6
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4623      	mov	r3, r4
 8003d7c:	f7fc faa0 	bl	80002c0 <__aeabi_uldivmod>
 8003d80:	4603      	mov	r3, r0
 8003d82:	460c      	mov	r4, r1
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <UART_SetConfig+0x384>)
 8003d88:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	2164      	movs	r1, #100	; 0x64
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	3332      	adds	r3, #50	; 0x32
 8003d9a:	4a07      	ldr	r2, [pc, #28]	; (8003db8 <UART_SetConfig+0x384>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	f003 0207 	and.w	r2, r3, #7
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4442      	add	r2, r8
 8003dac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003dae:	e1b2      	b.n	8004116 <UART_SetConfig+0x6e2>
 8003db0:	40011000 	.word	0x40011000
 8003db4:	40011400 	.word	0x40011400
 8003db8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4ad7      	ldr	r2, [pc, #860]	; (8004120 <UART_SetConfig+0x6ec>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d005      	beq.n	8003dd2 <UART_SetConfig+0x39e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4ad6      	ldr	r2, [pc, #856]	; (8004124 <UART_SetConfig+0x6f0>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	f040 80d1 	bne.w	8003f74 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dd2:	f7ff fa7b 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 8003dd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	469a      	mov	sl, r3
 8003ddc:	f04f 0b00 	mov.w	fp, #0
 8003de0:	46d0      	mov	r8, sl
 8003de2:	46d9      	mov	r9, fp
 8003de4:	eb18 0308 	adds.w	r3, r8, r8
 8003de8:	eb49 0409 	adc.w	r4, r9, r9
 8003dec:	4698      	mov	r8, r3
 8003dee:	46a1      	mov	r9, r4
 8003df0:	eb18 080a 	adds.w	r8, r8, sl
 8003df4:	eb49 090b 	adc.w	r9, r9, fp
 8003df8:	f04f 0100 	mov.w	r1, #0
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e0c:	4688      	mov	r8, r1
 8003e0e:	4691      	mov	r9, r2
 8003e10:	eb1a 0508 	adds.w	r5, sl, r8
 8003e14:	eb4b 0609 	adc.w	r6, fp, r9
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	f04f 0400 	mov.w	r4, #0
 8003e2a:	0094      	lsls	r4, r2, #2
 8003e2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e30:	008b      	lsls	r3, r1, #2
 8003e32:	461a      	mov	r2, r3
 8003e34:	4623      	mov	r3, r4
 8003e36:	4628      	mov	r0, r5
 8003e38:	4631      	mov	r1, r6
 8003e3a:	f7fc fa41 	bl	80002c0 <__aeabi_uldivmod>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	460c      	mov	r4, r1
 8003e42:	461a      	mov	r2, r3
 8003e44:	4bb8      	ldr	r3, [pc, #736]	; (8004128 <UART_SetConfig+0x6f4>)
 8003e46:	fba3 2302 	umull	r2, r3, r3, r2
 8003e4a:	095b      	lsrs	r3, r3, #5
 8003e4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	469b      	mov	fp, r3
 8003e54:	f04f 0c00 	mov.w	ip, #0
 8003e58:	46d9      	mov	r9, fp
 8003e5a:	46e2      	mov	sl, ip
 8003e5c:	eb19 0309 	adds.w	r3, r9, r9
 8003e60:	eb4a 040a 	adc.w	r4, sl, sl
 8003e64:	4699      	mov	r9, r3
 8003e66:	46a2      	mov	sl, r4
 8003e68:	eb19 090b 	adds.w	r9, r9, fp
 8003e6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e70:	f04f 0100 	mov.w	r1, #0
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e84:	4689      	mov	r9, r1
 8003e86:	4692      	mov	sl, r2
 8003e88:	eb1b 0509 	adds.w	r5, fp, r9
 8003e8c:	eb4c 060a 	adc.w	r6, ip, sl
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4619      	mov	r1, r3
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	f04f 0400 	mov.w	r4, #0
 8003ea2:	0094      	lsls	r4, r2, #2
 8003ea4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ea8:	008b      	lsls	r3, r1, #2
 8003eaa:	461a      	mov	r2, r3
 8003eac:	4623      	mov	r3, r4
 8003eae:	4628      	mov	r0, r5
 8003eb0:	4631      	mov	r1, r6
 8003eb2:	f7fc fa05 	bl	80002c0 <__aeabi_uldivmod>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	460c      	mov	r4, r1
 8003eba:	461a      	mov	r2, r3
 8003ebc:	4b9a      	ldr	r3, [pc, #616]	; (8004128 <UART_SetConfig+0x6f4>)
 8003ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	2164      	movs	r1, #100	; 0x64
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	3332      	adds	r3, #50	; 0x32
 8003ed0:	4a95      	ldr	r2, [pc, #596]	; (8004128 <UART_SetConfig+0x6f4>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003edc:	4498      	add	r8, r3
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	469b      	mov	fp, r3
 8003ee2:	f04f 0c00 	mov.w	ip, #0
 8003ee6:	46d9      	mov	r9, fp
 8003ee8:	46e2      	mov	sl, ip
 8003eea:	eb19 0309 	adds.w	r3, r9, r9
 8003eee:	eb4a 040a 	adc.w	r4, sl, sl
 8003ef2:	4699      	mov	r9, r3
 8003ef4:	46a2      	mov	sl, r4
 8003ef6:	eb19 090b 	adds.w	r9, r9, fp
 8003efa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f12:	4689      	mov	r9, r1
 8003f14:	4692      	mov	sl, r2
 8003f16:	eb1b 0509 	adds.w	r5, fp, r9
 8003f1a:	eb4c 060a 	adc.w	r6, ip, sl
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	4619      	mov	r1, r3
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	f04f 0400 	mov.w	r4, #0
 8003f30:	0094      	lsls	r4, r2, #2
 8003f32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f36:	008b      	lsls	r3, r1, #2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	4631      	mov	r1, r6
 8003f40:	f7fc f9be 	bl	80002c0 <__aeabi_uldivmod>
 8003f44:	4603      	mov	r3, r0
 8003f46:	460c      	mov	r4, r1
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b77      	ldr	r3, [pc, #476]	; (8004128 <UART_SetConfig+0x6f4>)
 8003f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	2164      	movs	r1, #100	; 0x64
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	3332      	adds	r3, #50	; 0x32
 8003f5e:	4a72      	ldr	r2, [pc, #456]	; (8004128 <UART_SetConfig+0x6f4>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	f003 020f 	and.w	r2, r3, #15
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4442      	add	r2, r8
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	e0d0      	b.n	8004116 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f74:	f7ff f996 	bl	80032a4 <HAL_RCC_GetPCLK1Freq>
 8003f78:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	469a      	mov	sl, r3
 8003f7e:	f04f 0b00 	mov.w	fp, #0
 8003f82:	46d0      	mov	r8, sl
 8003f84:	46d9      	mov	r9, fp
 8003f86:	eb18 0308 	adds.w	r3, r8, r8
 8003f8a:	eb49 0409 	adc.w	r4, r9, r9
 8003f8e:	4698      	mov	r8, r3
 8003f90:	46a1      	mov	r9, r4
 8003f92:	eb18 080a 	adds.w	r8, r8, sl
 8003f96:	eb49 090b 	adc.w	r9, r9, fp
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fa6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003faa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fae:	4688      	mov	r8, r1
 8003fb0:	4691      	mov	r9, r2
 8003fb2:	eb1a 0508 	adds.w	r5, sl, r8
 8003fb6:	eb4b 0609 	adc.w	r6, fp, r9
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	f04f 0400 	mov.w	r4, #0
 8003fcc:	0094      	lsls	r4, r2, #2
 8003fce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fd2:	008b      	lsls	r3, r1, #2
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	4623      	mov	r3, r4
 8003fd8:	4628      	mov	r0, r5
 8003fda:	4631      	mov	r1, r6
 8003fdc:	f7fc f970 	bl	80002c0 <__aeabi_uldivmod>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	460c      	mov	r4, r1
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b50      	ldr	r3, [pc, #320]	; (8004128 <UART_SetConfig+0x6f4>)
 8003fe8:	fba3 2302 	umull	r2, r3, r3, r2
 8003fec:	095b      	lsrs	r3, r3, #5
 8003fee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	469b      	mov	fp, r3
 8003ff6:	f04f 0c00 	mov.w	ip, #0
 8003ffa:	46d9      	mov	r9, fp
 8003ffc:	46e2      	mov	sl, ip
 8003ffe:	eb19 0309 	adds.w	r3, r9, r9
 8004002:	eb4a 040a 	adc.w	r4, sl, sl
 8004006:	4699      	mov	r9, r3
 8004008:	46a2      	mov	sl, r4
 800400a:	eb19 090b 	adds.w	r9, r9, fp
 800400e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004012:	f04f 0100 	mov.w	r1, #0
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800401e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004022:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004026:	4689      	mov	r9, r1
 8004028:	4692      	mov	sl, r2
 800402a:	eb1b 0509 	adds.w	r5, fp, r9
 800402e:	eb4c 060a 	adc.w	r6, ip, sl
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	4619      	mov	r1, r3
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	f04f 0400 	mov.w	r4, #0
 8004044:	0094      	lsls	r4, r2, #2
 8004046:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800404a:	008b      	lsls	r3, r1, #2
 800404c:	461a      	mov	r2, r3
 800404e:	4623      	mov	r3, r4
 8004050:	4628      	mov	r0, r5
 8004052:	4631      	mov	r1, r6
 8004054:	f7fc f934 	bl	80002c0 <__aeabi_uldivmod>
 8004058:	4603      	mov	r3, r0
 800405a:	460c      	mov	r4, r1
 800405c:	461a      	mov	r2, r3
 800405e:	4b32      	ldr	r3, [pc, #200]	; (8004128 <UART_SetConfig+0x6f4>)
 8004060:	fba3 1302 	umull	r1, r3, r3, r2
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	2164      	movs	r1, #100	; 0x64
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	3332      	adds	r3, #50	; 0x32
 8004072:	4a2d      	ldr	r2, [pc, #180]	; (8004128 <UART_SetConfig+0x6f4>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407e:	4498      	add	r8, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	469b      	mov	fp, r3
 8004084:	f04f 0c00 	mov.w	ip, #0
 8004088:	46d9      	mov	r9, fp
 800408a:	46e2      	mov	sl, ip
 800408c:	eb19 0309 	adds.w	r3, r9, r9
 8004090:	eb4a 040a 	adc.w	r4, sl, sl
 8004094:	4699      	mov	r9, r3
 8004096:	46a2      	mov	sl, r4
 8004098:	eb19 090b 	adds.w	r9, r9, fp
 800409c:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040b4:	4689      	mov	r9, r1
 80040b6:	4692      	mov	sl, r2
 80040b8:	eb1b 0509 	adds.w	r5, fp, r9
 80040bc:	eb4c 060a 	adc.w	r6, ip, sl
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4619      	mov	r1, r3
 80040c6:	f04f 0200 	mov.w	r2, #0
 80040ca:	f04f 0300 	mov.w	r3, #0
 80040ce:	f04f 0400 	mov.w	r4, #0
 80040d2:	0094      	lsls	r4, r2, #2
 80040d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040d8:	008b      	lsls	r3, r1, #2
 80040da:	461a      	mov	r2, r3
 80040dc:	4623      	mov	r3, r4
 80040de:	4628      	mov	r0, r5
 80040e0:	4631      	mov	r1, r6
 80040e2:	f7fc f8ed 	bl	80002c0 <__aeabi_uldivmod>
 80040e6:	4603      	mov	r3, r0
 80040e8:	460c      	mov	r4, r1
 80040ea:	461a      	mov	r2, r3
 80040ec:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <UART_SetConfig+0x6f4>)
 80040ee:	fba3 1302 	umull	r1, r3, r3, r2
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	2164      	movs	r1, #100	; 0x64
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	3332      	adds	r3, #50	; 0x32
 8004100:	4a09      	ldr	r2, [pc, #36]	; (8004128 <UART_SetConfig+0x6f4>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	f003 020f 	and.w	r2, r3, #15
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4442      	add	r2, r8
 8004112:	609a      	str	r2, [r3, #8]
}
 8004114:	e7ff      	b.n	8004116 <UART_SetConfig+0x6e2>
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004120:	40011000 	.word	0x40011000
 8004124:	40011400 	.word	0x40011400
 8004128:	51eb851f 	.word	0x51eb851f

0800412c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004132:	2100      	movs	r1, #0
 8004134:	2000      	movs	r0, #0
 8004136:	f007 fa8d 	bl	800b654 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800413a:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <MX_LWIP_Init+0xb8>)
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8004140:	4b29      	ldr	r3, [pc, #164]	; (80041e8 <MX_LWIP_Init+0xbc>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8004146:	4b29      	ldr	r3, [pc, #164]	; (80041ec <MX_LWIP_Init+0xc0>)
 8004148:	2200      	movs	r2, #0
 800414a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800414c:	4b28      	ldr	r3, [pc, #160]	; (80041f0 <MX_LWIP_Init+0xc4>)
 800414e:	9302      	str	r3, [sp, #8]
 8004150:	4b28      	ldr	r3, [pc, #160]	; (80041f4 <MX_LWIP_Init+0xc8>)
 8004152:	9301      	str	r3, [sp, #4]
 8004154:	2300      	movs	r3, #0
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	4b24      	ldr	r3, [pc, #144]	; (80041ec <MX_LWIP_Init+0xc0>)
 800415a:	4a23      	ldr	r2, [pc, #140]	; (80041e8 <MX_LWIP_Init+0xbc>)
 800415c:	4921      	ldr	r1, [pc, #132]	; (80041e4 <MX_LWIP_Init+0xb8>)
 800415e:	4826      	ldr	r0, [pc, #152]	; (80041f8 <MX_LWIP_Init+0xcc>)
 8004160:	f008 fe4c 	bl	800cdfc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004164:	4824      	ldr	r0, [pc, #144]	; (80041f8 <MX_LWIP_Init+0xcc>)
 8004166:	f009 f803 	bl	800d170 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800416a:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <MX_LWIP_Init+0xcc>)
 800416c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800417c:	481e      	ldr	r0, [pc, #120]	; (80041f8 <MX_LWIP_Init+0xcc>)
 800417e:	f009 f807 	bl	800d190 <netif_set_up>
 8004182:	e002      	b.n	800418a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004184:	481c      	ldr	r0, [pc, #112]	; (80041f8 <MX_LWIP_Init+0xcc>)
 8004186:	f009 f86f 	bl	800d268 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800418a:	491c      	ldr	r1, [pc, #112]	; (80041fc <MX_LWIP_Init+0xd0>)
 800418c:	481a      	ldr	r0, [pc, #104]	; (80041f8 <MX_LWIP_Init+0xcc>)
 800418e:	f009 f905 	bl	800d39c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8004192:	2200      	movs	r2, #0
 8004194:	2101      	movs	r1, #1
 8004196:	2001      	movs	r0, #1
 8004198:	f000 ff16 	bl	8004fc8 <osSemaphoreNew>
 800419c:	4602      	mov	r2, r0
 800419e:	4b18      	ldr	r3, [pc, #96]	; (8004200 <MX_LWIP_Init+0xd4>)
 80041a0:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 80041a2:	4b18      	ldr	r3, [pc, #96]	; (8004204 <MX_LWIP_Init+0xd8>)
 80041a4:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <MX_LWIP_Init+0xcc>)
 80041a6:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80041a8:	4b15      	ldr	r3, [pc, #84]	; (8004200 <MX_LWIP_Init+0xd4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a15      	ldr	r2, [pc, #84]	; (8004204 <MX_LWIP_Init+0xd8>)
 80041ae:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80041b0:	2224      	movs	r2, #36	; 0x24
 80041b2:	2100      	movs	r1, #0
 80041b4:	4814      	ldr	r0, [pc, #80]	; (8004208 <MX_LWIP_Init+0xdc>)
 80041b6:	f015 f9d0 	bl	801955a <memset>
  attributes.name = "LinkThr";
 80041ba:	4b13      	ldr	r3, [pc, #76]	; (8004208 <MX_LWIP_Init+0xdc>)
 80041bc:	4a13      	ldr	r2, [pc, #76]	; (800420c <MX_LWIP_Init+0xe0>)
 80041be:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80041c0:	4b11      	ldr	r3, [pc, #68]	; (8004208 <MX_LWIP_Init+0xdc>)
 80041c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041c6:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <MX_LWIP_Init+0xdc>)
 80041ca:	2210      	movs	r2, #16
 80041cc:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 80041ce:	4a0e      	ldr	r2, [pc, #56]	; (8004208 <MX_LWIP_Init+0xdc>)
 80041d0:	490c      	ldr	r1, [pc, #48]	; (8004204 <MX_LWIP_Init+0xd8>)
 80041d2:	480f      	ldr	r0, [pc, #60]	; (8004210 <MX_LWIP_Init+0xe4>)
 80041d4:	f000 fcdc 	bl	8004b90 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80041d8:	4807      	ldr	r0, [pc, #28]	; (80041f8 <MX_LWIP_Init+0xcc>)
 80041da:	f011 f9a3 	bl	8015524 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80041de:	bf00      	nop
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	200105a8 	.word	0x200105a8
 80041e8:	200105ac 	.word	0x200105ac
 80041ec:	200105b0 	.word	0x200105b0
 80041f0:	0800b565 	.word	0x0800b565
 80041f4:	0800486d 	.word	0x0800486d
 80041f8:	20010570 	.word	0x20010570
 80041fc:	08004951 	.word	0x08004951
 8004200:	200000a4 	.word	0x200000a4
 8004204:	20010544 	.word	0x20010544
 8004208:	2001054c 	.word	0x2001054c
 800420c:	0801a8e8 	.word	0x0801a8e8
 8004210:	080048d9 	.word	0x080048d9

08004214 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08e      	sub	sp, #56	; 0x38
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800421c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	609a      	str	r2, [r3, #8]
 8004228:	60da      	str	r2, [r3, #12]
 800422a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a59      	ldr	r2, [pc, #356]	; (8004398 <HAL_ETH_MspInit+0x184>)
 8004232:	4293      	cmp	r3, r2
 8004234:	f040 80ac 	bne.w	8004390 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004238:	2300      	movs	r3, #0
 800423a:	623b      	str	r3, [r7, #32]
 800423c:	4b57      	ldr	r3, [pc, #348]	; (800439c <HAL_ETH_MspInit+0x188>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	4a56      	ldr	r2, [pc, #344]	; (800439c <HAL_ETH_MspInit+0x188>)
 8004242:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004246:	6313      	str	r3, [r2, #48]	; 0x30
 8004248:	4b54      	ldr	r3, [pc, #336]	; (800439c <HAL_ETH_MspInit+0x188>)
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004250:	623b      	str	r3, [r7, #32]
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	4b50      	ldr	r3, [pc, #320]	; (800439c <HAL_ETH_MspInit+0x188>)
 800425a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425c:	4a4f      	ldr	r2, [pc, #316]	; (800439c <HAL_ETH_MspInit+0x188>)
 800425e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004262:	6313      	str	r3, [r2, #48]	; 0x30
 8004264:	4b4d      	ldr	r3, [pc, #308]	; (800439c <HAL_ETH_MspInit+0x188>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004268:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800426c:	61fb      	str	r3, [r7, #28]
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	2300      	movs	r3, #0
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	4b49      	ldr	r3, [pc, #292]	; (800439c <HAL_ETH_MspInit+0x188>)
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	4a48      	ldr	r2, [pc, #288]	; (800439c <HAL_ETH_MspInit+0x188>)
 800427a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800427e:	6313      	str	r3, [r2, #48]	; 0x30
 8004280:	4b46      	ldr	r3, [pc, #280]	; (800439c <HAL_ETH_MspInit+0x188>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004288:	61bb      	str	r3, [r7, #24]
 800428a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	4b42      	ldr	r3, [pc, #264]	; (800439c <HAL_ETH_MspInit+0x188>)
 8004292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004294:	4a41      	ldr	r2, [pc, #260]	; (800439c <HAL_ETH_MspInit+0x188>)
 8004296:	f043 0304 	orr.w	r3, r3, #4
 800429a:	6313      	str	r3, [r2, #48]	; 0x30
 800429c:	4b3f      	ldr	r3, [pc, #252]	; (800439c <HAL_ETH_MspInit+0x188>)
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	f003 0304 	and.w	r3, r3, #4
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	4b3b      	ldr	r3, [pc, #236]	; (800439c <HAL_ETH_MspInit+0x188>)
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	4a3a      	ldr	r2, [pc, #232]	; (800439c <HAL_ETH_MspInit+0x188>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6313      	str	r3, [r2, #48]	; 0x30
 80042b8:	4b38      	ldr	r3, [pc, #224]	; (800439c <HAL_ETH_MspInit+0x188>)
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	4b34      	ldr	r3, [pc, #208]	; (800439c <HAL_ETH_MspInit+0x188>)
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	4a33      	ldr	r2, [pc, #204]	; (800439c <HAL_ETH_MspInit+0x188>)
 80042ce:	f043 0302 	orr.w	r3, r3, #2
 80042d2:	6313      	str	r3, [r2, #48]	; 0x30
 80042d4:	4b31      	ldr	r3, [pc, #196]	; (800439c <HAL_ETH_MspInit+0x188>)
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	4b2d      	ldr	r3, [pc, #180]	; (800439c <HAL_ETH_MspInit+0x188>)
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	4a2c      	ldr	r2, [pc, #176]	; (800439c <HAL_ETH_MspInit+0x188>)
 80042ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ee:	6313      	str	r3, [r2, #48]	; 0x30
 80042f0:	4b2a      	ldr	r3, [pc, #168]	; (800439c <HAL_ETH_MspInit+0x188>)
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80042fc:	2332      	movs	r3, #50	; 0x32
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004300:	2302      	movs	r3, #2
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004304:	2300      	movs	r3, #0
 8004306:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004308:	2303      	movs	r3, #3
 800430a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800430c:	230b      	movs	r3, #11
 800430e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004310:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004314:	4619      	mov	r1, r3
 8004316:	4822      	ldr	r0, [pc, #136]	; (80043a0 <HAL_ETH_MspInit+0x18c>)
 8004318:	f7fe f9c6 	bl	80026a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800431c:	2386      	movs	r3, #134	; 0x86
 800431e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004320:	2302      	movs	r3, #2
 8004322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	2300      	movs	r3, #0
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004328:	2303      	movs	r3, #3
 800432a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800432c:	230b      	movs	r3, #11
 800432e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004334:	4619      	mov	r1, r3
 8004336:	481b      	ldr	r0, [pc, #108]	; (80043a4 <HAL_ETH_MspInit+0x190>)
 8004338:	f7fe f9b6 	bl	80026a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800433c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004342:	2302      	movs	r3, #2
 8004344:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004346:	2300      	movs	r3, #0
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800434a:	2303      	movs	r3, #3
 800434c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800434e:	230b      	movs	r3, #11
 8004350:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004356:	4619      	mov	r1, r3
 8004358:	4813      	ldr	r0, [pc, #76]	; (80043a8 <HAL_ETH_MspInit+0x194>)
 800435a:	f7fe f9a5 	bl	80026a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800435e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004364:	2302      	movs	r3, #2
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004368:	2300      	movs	r3, #0
 800436a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800436c:	2303      	movs	r3, #3
 800436e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004370:	230b      	movs	r3, #11
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004378:	4619      	mov	r1, r3
 800437a:	480c      	ldr	r0, [pc, #48]	; (80043ac <HAL_ETH_MspInit+0x198>)
 800437c:	f7fe f994 	bl	80026a8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 10, 0);
 8004380:	2200      	movs	r2, #0
 8004382:	210a      	movs	r1, #10
 8004384:	203d      	movs	r0, #61	; 0x3d
 8004386:	f7fc ffbf 	bl	8001308 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800438a:	203d      	movs	r0, #61	; 0x3d
 800438c:	f7fc ffd8 	bl	8001340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004390:	bf00      	nop
 8004392:	3738      	adds	r7, #56	; 0x38
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40028000 	.word	0x40028000
 800439c:	40023800 	.word	0x40023800
 80043a0:	40020800 	.word	0x40020800
 80043a4:	40020000 	.word	0x40020000
 80043a8:	40020400 	.word	0x40020400
 80043ac:	40021800 	.word	0x40021800

080043b0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <HAL_ETH_RxCpltCallback+0x1c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 ff07 	bl	80051d0 <osSemaphoreRelease>
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	200000a8 	.word	0x200000a8

080043d0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b090      	sub	sp, #64	; 0x40
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80043dc:	4b59      	ldr	r3, [pc, #356]	; (8004544 <low_level_init+0x174>)
 80043de:	4a5a      	ldr	r2, [pc, #360]	; (8004548 <low_level_init+0x178>)
 80043e0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80043e2:	4b58      	ldr	r3, [pc, #352]	; (8004544 <low_level_init+0x174>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80043e8:	4b56      	ldr	r3, [pc, #344]	; (8004544 <low_level_init+0x174>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80043ee:	2300      	movs	r3, #0
 80043f0:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 80043f2:	2380      	movs	r3, #128	; 0x80
 80043f4:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 80043f6:	23e1      	movs	r3, #225	; 0xe1
 80043f8:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 80043fe:	2300      	movs	r3, #0
 8004400:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8004402:	2300      	movs	r3, #0
 8004404:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8004406:	4a4f      	ldr	r2, [pc, #316]	; (8004544 <low_level_init+0x174>)
 8004408:	f107 030c 	add.w	r3, r7, #12
 800440c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800440e:	4b4d      	ldr	r3, [pc, #308]	; (8004544 <low_level_init+0x174>)
 8004410:	2201      	movs	r2, #1
 8004412:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004414:	4b4b      	ldr	r3, [pc, #300]	; (8004544 <low_level_init+0x174>)
 8004416:	2200      	movs	r2, #0
 8004418:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800441a:	4b4a      	ldr	r3, [pc, #296]	; (8004544 <low_level_init+0x174>)
 800441c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004420:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004422:	4848      	ldr	r0, [pc, #288]	; (8004544 <low_level_init+0x174>)
 8004424:	f7fc ff9a 	bl	800135c <HAL_ETH_Init>
 8004428:	4603      	mov	r3, r0
 800442a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800442e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004432:	2b00      	cmp	r3, #0
 8004434:	d108      	bne.n	8004448 <low_level_init+0x78>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800443c:	f043 0304 	orr.w	r3, r3, #4
 8004440:	b2da      	uxtb	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004448:	2304      	movs	r3, #4
 800444a:	4a40      	ldr	r2, [pc, #256]	; (800454c <low_level_init+0x17c>)
 800444c:	4940      	ldr	r1, [pc, #256]	; (8004550 <low_level_init+0x180>)
 800444e:	483d      	ldr	r0, [pc, #244]	; (8004544 <low_level_init+0x174>)
 8004450:	f7fd f922 	bl	8001698 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004454:	2304      	movs	r3, #4
 8004456:	4a3f      	ldr	r2, [pc, #252]	; (8004554 <low_level_init+0x184>)
 8004458:	493f      	ldr	r1, [pc, #252]	; (8004558 <low_level_init+0x188>)
 800445a:	483a      	ldr	r0, [pc, #232]	; (8004544 <low_level_init+0x174>)
 800445c:	f7fd f985 	bl	800176a <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2206      	movs	r2, #6
 8004464:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004468:	4b36      	ldr	r3, [pc, #216]	; (8004544 <low_level_init+0x174>)
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	781a      	ldrb	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004474:	4b33      	ldr	r3, [pc, #204]	; (8004544 <low_level_init+0x174>)
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	785a      	ldrb	r2, [r3, #1]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004480:	4b30      	ldr	r3, [pc, #192]	; (8004544 <low_level_init+0x174>)
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	789a      	ldrb	r2, [r3, #2]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800448c:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <low_level_init+0x174>)
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	78da      	ldrb	r2, [r3, #3]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004498:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <low_level_init+0x174>)
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	791a      	ldrb	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80044a4:	4b27      	ldr	r3, [pc, #156]	; (8004544 <low_level_init+0x174>)
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	795a      	ldrb	r2, [r3, #5]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80044b6:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044be:	f043 030a 	orr.w	r3, r3, #10
 80044c2:	b2da      	uxtb	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80044ca:	2200      	movs	r2, #0
 80044cc:	2101      	movs	r1, #1
 80044ce:	2001      	movs	r0, #1
 80044d0:	f000 fd7a 	bl	8004fc8 <osSemaphoreNew>
 80044d4:	4602      	mov	r2, r0
 80044d6:	4b21      	ldr	r3, [pc, #132]	; (800455c <low_level_init+0x18c>)
 80044d8:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80044da:	f107 0314 	add.w	r3, r7, #20
 80044de:	2224      	movs	r2, #36	; 0x24
 80044e0:	2100      	movs	r1, #0
 80044e2:	4618      	mov	r0, r3
 80044e4:	f015 f839 	bl	801955a <memset>
  attributes.name = "EthIf";
 80044e8:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <low_level_init+0x190>)
 80044ea:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80044ec:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 80044f2:	2330      	movs	r3, #48	; 0x30
 80044f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 80044f6:	f107 0314 	add.w	r3, r7, #20
 80044fa:	461a      	mov	r2, r3
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4819      	ldr	r0, [pc, #100]	; (8004564 <low_level_init+0x194>)
 8004500:	f000 fb46 	bl	8004b90 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004504:	480f      	ldr	r0, [pc, #60]	; (8004544 <low_level_init+0x174>)
 8004506:	f7fd fc58 	bl	8001dba <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800450a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800450e:	461a      	mov	r2, r3
 8004510:	211d      	movs	r1, #29
 8004512:	480c      	ldr	r0, [pc, #48]	; (8004544 <low_level_init+0x174>)
 8004514:	f7fd fb83 	bl	8001c1e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	f043 030b 	orr.w	r3, r3, #11
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	461a      	mov	r2, r3
 8004524:	211d      	movs	r1, #29
 8004526:	4807      	ldr	r0, [pc, #28]	; (8004544 <low_level_init+0x174>)
 8004528:	f7fd fbe1 	bl	8001cee <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800452c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004530:	461a      	mov	r2, r3
 8004532:	211d      	movs	r1, #29
 8004534:	4803      	ldr	r0, [pc, #12]	; (8004544 <low_level_init+0x174>)
 8004536:	f7fd fb72 	bl	8001c1e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800453a:	bf00      	nop
 800453c:	3740      	adds	r7, #64	; 0x40
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20011e84 	.word	0x20011e84
 8004548:	40028000 	.word	0x40028000
 800454c:	20011ecc 	.word	0x20011ecc
 8004550:	200105b4 	.word	0x200105b4
 8004554:	20010634 	.word	0x20010634
 8004558:	20011e04 	.word	0x20011e04
 800455c:	200000a8 	.word	0x200000a8
 8004560:	0801a8f0 	.word	0x0801a8f0
 8004564:	0800480d 	.word	0x0800480d

08004568 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	; 0x28
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004572:	4b4b      	ldr	r3, [pc, #300]	; (80046a0 <low_level_output+0x138>)
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800457e:	2300      	movs	r3, #0
 8004580:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004582:	2300      	movs	r3, #0
 8004584:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800458a:	4b45      	ldr	r3, [pc, #276]	; (80046a0 <low_level_output+0x138>)
 800458c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004590:	2300      	movs	r3, #0
 8004592:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	623b      	str	r3, [r7, #32]
 8004598:	e05a      	b.n	8004650 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	da03      	bge.n	80045aa <low_level_output+0x42>
      {
        errval = ERR_USE;
 80045a2:	23f8      	movs	r3, #248	; 0xf8
 80045a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80045a8:	e05c      	b.n	8004664 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80045aa:	6a3b      	ldr	r3, [r7, #32]
 80045ac:	895b      	ldrh	r3, [r3, #10]
 80045ae:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80045b4:	e02f      	b.n	8004616 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	18d0      	adds	r0, r2, r3
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	18d1      	adds	r1, r2, r3
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80045ca:	3304      	adds	r3, #4
 80045cc:	461a      	mov	r2, r3
 80045ce:	f014 ffa0 	bl	8019512 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	da03      	bge.n	80045e8 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80045e0:	23f8      	movs	r3, #248	; 0xf8
 80045e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80045e6:	e03d      	b.n	8004664 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80045f8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004604:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004610:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	4413      	add	r3, r2
 800461c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004620:	4293      	cmp	r3, r2
 8004622:	d8c8      	bhi.n	80045b6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	18d0      	adds	r0, r2, r3
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4413      	add	r3, r2
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4619      	mov	r1, r3
 8004636:	f014 ff6c 	bl	8019512 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4413      	add	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	623b      	str	r3, [r7, #32]
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1a1      	bne.n	800459a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004656:	6979      	ldr	r1, [r7, #20]
 8004658:	4811      	ldr	r0, [pc, #68]	; (80046a0 <low_level_output+0x138>)
 800465a:	f7fd f8f3 	bl	8001844 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004664:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <low_level_output+0x138>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466c:	3314      	adds	r3, #20
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00d      	beq.n	8004694 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004678:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <low_level_output+0x138>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004680:	3314      	adds	r3, #20
 8004682:	2220      	movs	r2, #32
 8004684:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <low_level_output+0x138>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468e:	3304      	adds	r3, #4
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004698:	4618      	mov	r0, r3
 800469a:	3728      	adds	r7, #40	; 0x28
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	20011e84 	.word	0x20011e84

080046a4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08c      	sub	sp, #48	; 0x30
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80046ac:	2300      	movs	r3, #0
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80046c4:	2300      	movs	r3, #0
 80046c6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80046c8:	484f      	ldr	r0, [pc, #316]	; (8004808 <low_level_input+0x164>)
 80046ca:	f7fd f9a5 	bl	8001a18 <HAL_ETH_GetReceivedFrame_IT>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <low_level_input+0x34>

    return NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e092      	b.n	80047fe <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80046d8:	4b4b      	ldr	r3, [pc, #300]	; (8004808 <low_level_input+0x164>)
 80046da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046dc:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80046de:	4b4a      	ldr	r3, [pc, #296]	; (8004808 <low_level_input+0x164>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80046e4:	89fb      	ldrh	r3, [r7, #14]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d007      	beq.n	80046fa <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80046ea:	89fb      	ldrh	r3, [r7, #14]
 80046ec:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80046f0:	4619      	mov	r1, r3
 80046f2:	2000      	movs	r0, #0
 80046f4:	f008 ff1c 	bl	800d530 <pbuf_alloc>
 80046f8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d04b      	beq.n	8004798 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004700:	4b41      	ldr	r3, [pc, #260]	; (8004808 <low_level_input+0x164>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	62bb      	str	r3, [r7, #40]	; 0x28
 800470e:	e040      	b.n	8004792 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	895b      	ldrh	r3, [r3, #10]
 8004714:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800471a:	e021      	b.n	8004760 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	18d0      	adds	r0, r2, r3
 8004724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	18d1      	adds	r1, r2, r3
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004730:	3304      	adds	r3, #4
 8004732:	461a      	mov	r2, r3
 8004734:	f014 feed 	bl	8019512 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	4413      	add	r3, r2
 800474a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800474e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800475a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800476a:	4293      	cmp	r3, r2
 800476c:	d8d6      	bhi.n	800471c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	18d0      	adds	r0, r2, r3
 8004776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	4413      	add	r3, r2
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4619      	mov	r1, r3
 8004780:	f014 fec7 	bl	8019512 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	4413      	add	r3, r2
 800478a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1bb      	bne.n	8004710 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004798:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <low_level_input+0x164>)
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800479e:	2300      	movs	r3, #0
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	e00b      	b.n	80047bc <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80047b0:	6a3b      	ldr	r3, [r7, #32]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3301      	adds	r3, #1
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	4b12      	ldr	r3, [pc, #72]	; (8004808 <low_level_input+0x164>)
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d3ee      	bcc.n	80047a4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80047c6:	4b10      	ldr	r3, [pc, #64]	; (8004808 <low_level_input+0x164>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80047cc:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <low_level_input+0x164>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d4:	3314      	adds	r3, #20
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00d      	beq.n	80047fc <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <low_level_input+0x164>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e8:	3314      	adds	r3, #20
 80047ea:	2280      	movs	r2, #128	; 0x80
 80047ec:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80047ee:	4b06      	ldr	r3, [pc, #24]	; (8004808 <low_level_input+0x164>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f6:	3308      	adds	r3, #8
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
  }
  return p;
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3730      	adds	r7, #48	; 0x30
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20011e84 	.word	0x20011e84

0800480c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004818:	4b12      	ldr	r3, [pc, #72]	; (8004864 <ethernetif_input+0x58>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f04f 31ff 	mov.w	r1, #4294967295
 8004820:	4618      	mov	r0, r3
 8004822:	f000 fc6f 	bl	8005104 <osSemaphoreAcquire>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f5      	bne.n	8004818 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800482c:	480e      	ldr	r0, [pc, #56]	; (8004868 <ethernetif_input+0x5c>)
 800482e:	f014 fde3 	bl	80193f8 <sys_mutex_lock>
        p = low_level_input( netif );
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7ff ff36 	bl	80046a4 <low_level_input>
 8004838:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	68f9      	ldr	r1, [r7, #12]
 8004846:	68b8      	ldr	r0, [r7, #8]
 8004848:	4798      	blx	r3
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004850:	68b8      	ldr	r0, [r7, #8]
 8004852:	f009 f94d 	bl	800daf0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004856:	4804      	ldr	r0, [pc, #16]	; (8004868 <ethernetif_input+0x5c>)
 8004858:	f014 fddd 	bl	8019416 <sys_mutex_unlock>
      } while(p!=NULL);
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1e4      	bne.n	800482c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004862:	e7d9      	b.n	8004818 <ethernetif_input+0xc>
 8004864:	200000a8 	.word	0x200000a8
 8004868:	200136dc 	.word	0x200136dc

0800486c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <ethernetif_init+0x1c>
 800487a:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <ethernetif_init+0x48>)
 800487c:	f44f 720e 	mov.w	r2, #568	; 0x238
 8004880:	490d      	ldr	r1, [pc, #52]	; (80048b8 <ethernetif_init+0x4c>)
 8004882:	480e      	ldr	r0, [pc, #56]	; (80048bc <ethernetif_init+0x50>)
 8004884:	f014 fe72 	bl	801956c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2273      	movs	r2, #115	; 0x73
 800488c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2274      	movs	r2, #116	; 0x74
 8004894:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <ethernetif_init+0x54>)
 800489c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a08      	ldr	r2, [pc, #32]	; (80048c4 <ethernetif_init+0x58>)
 80048a2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff fd93 	bl	80043d0 <low_level_init>

  return ERR_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	0801a8f8 	.word	0x0801a8f8
 80048b8:	0801a914 	.word	0x0801a914
 80048bc:	0801a924 	.word	0x0801a924
 80048c0:	08017429 	.word	0x08017429
 80048c4:	08004569 	.word	0x08004569

080048c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80048cc:	f7fc fc36 	bl	800113c <HAL_GetTick>
 80048d0:	4603      	mov	r3, r0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	bd80      	pop	{r7, pc}
	...

080048d8 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80048e8:	f107 0308 	add.w	r3, r7, #8
 80048ec:	461a      	mov	r2, r3
 80048ee:	2101      	movs	r1, #1
 80048f0:	4816      	ldr	r0, [pc, #88]	; (800494c <ethernetif_set_link+0x74>)
 80048f2:	f7fd f994 	bl	8001c1e <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d108      	bne.n	8004920 <ethernetif_set_link+0x48>
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f008 fcd7 	bl	800d2cc <netif_set_link_up>
 800491e:	e011      	b.n	8004944 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d007      	beq.n	8004944 <ethernetif_set_link+0x6c>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d104      	bne.n	8004944 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f008 fcfc 	bl	800d33c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004944:	20c8      	movs	r0, #200	; 0xc8
 8004946:	f000 f9c9 	bl	8004cdc <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800494a:	e7cd      	b.n	80048e8 <ethernetif_set_link+0x10>
 800494c:	20011e84 	.word	0x20011e84

08004950 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d05d      	beq.n	8004a2e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004972:	4b34      	ldr	r3, [pc, #208]	; (8004a44 <ethernetif_update_config+0xf4>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d03f      	beq.n	80049fa <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800497a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800497e:	2100      	movs	r1, #0
 8004980:	4830      	ldr	r0, [pc, #192]	; (8004a44 <ethernetif_update_config+0xf4>)
 8004982:	f7fd f9b4 	bl	8001cee <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004986:	f7fc fbd9 	bl	800113c <HAL_GetTick>
 800498a:	4603      	mov	r3, r0
 800498c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800498e:	f107 0308 	add.w	r3, r7, #8
 8004992:	461a      	mov	r2, r3
 8004994:	2101      	movs	r1, #1
 8004996:	482b      	ldr	r0, [pc, #172]	; (8004a44 <ethernetif_update_config+0xf4>)
 8004998:	f7fd f941 	bl	8001c1e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800499c:	f7fc fbce 	bl	800113c <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049aa:	d828      	bhi.n	80049fe <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0eb      	beq.n	800498e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80049b6:	f107 0308 	add.w	r3, r7, #8
 80049ba:	461a      	mov	r2, r3
 80049bc:	211f      	movs	r1, #31
 80049be:	4821      	ldr	r0, [pc, #132]	; (8004a44 <ethernetif_update_config+0xf4>)
 80049c0:	f7fd f92d 	bl	8001c1e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 0310 	and.w	r3, r3, #16
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80049ce:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <ethernetif_update_config+0xf4>)
 80049d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	e002      	b.n	80049de <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80049d8:	4b1a      	ldr	r3, [pc, #104]	; (8004a44 <ethernetif_update_config+0xf4>)
 80049da:	2200      	movs	r2, #0
 80049dc:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80049e8:	4b16      	ldr	r3, [pc, #88]	; (8004a44 <ethernetif_update_config+0xf4>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	609a      	str	r2, [r3, #8]
 80049ee:	e016      	b.n	8004a1e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80049f0:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <ethernetif_update_config+0xf4>)
 80049f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049f6:	609a      	str	r2, [r3, #8]
 80049f8:	e011      	b.n	8004a1e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80049fa:	bf00      	nop
 80049fc:	e000      	b.n	8004a00 <ethernetif_update_config+0xb0>
          goto error;
 80049fe:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004a00:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <ethernetif_update_config+0xf4>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	08db      	lsrs	r3, r3, #3
 8004a06:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004a08:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <ethernetif_update_config+0xf4>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004a10:	4313      	orrs	r3, r2
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	2100      	movs	r1, #0
 8004a18:	480a      	ldr	r0, [pc, #40]	; (8004a44 <ethernetif_update_config+0xf4>)
 8004a1a:	f7fd f968 	bl	8001cee <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4808      	ldr	r0, [pc, #32]	; (8004a44 <ethernetif_update_config+0xf4>)
 8004a22:	f7fd fa29 	bl	8001e78 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004a26:	4807      	ldr	r0, [pc, #28]	; (8004a44 <ethernetif_update_config+0xf4>)
 8004a28:	f7fd f9c7 	bl	8001dba <HAL_ETH_Start>
 8004a2c:	e002      	b.n	8004a34 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004a2e:	4805      	ldr	r0, [pc, #20]	; (8004a44 <ethernetif_update_config+0xf4>)
 8004a30:	f7fd f9f2 	bl	8001e18 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f807 	bl	8004a48 <ethernetif_notify_conn_changed>
}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20011e84 	.word	0x20011e84

08004a48 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a72:	f3ef 8305 	mrs	r3, IPSR
 8004a76:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10f      	bne.n	8004a9e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004a82:	607b      	str	r3, [r7, #4]
  return(result);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d105      	bne.n	8004a96 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a8e:	603b      	str	r3, [r7, #0]
  return(result);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d007      	beq.n	8004aa6 <osKernelInitialize+0x3a>
 8004a96:	4b0e      	ldr	r3, [pc, #56]	; (8004ad0 <osKernelInitialize+0x64>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d103      	bne.n	8004aa6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004a9e:	f06f 0305 	mvn.w	r3, #5
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	e00c      	b.n	8004ac0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <osKernelInitialize+0x64>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d105      	bne.n	8004aba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004aae:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <osKernelInitialize+0x64>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	e002      	b.n	8004ac0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004aba:	f04f 33ff 	mov.w	r3, #4294967295
 8004abe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	200000ac 	.word	0x200000ac

08004ad4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ada:	f3ef 8305 	mrs	r3, IPSR
 8004ade:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10f      	bne.n	8004b06 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aea:	607b      	str	r3, [r7, #4]
  return(result);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d105      	bne.n	8004afe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004af2:	f3ef 8311 	mrs	r3, BASEPRI
 8004af6:	603b      	str	r3, [r7, #0]
  return(result);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d007      	beq.n	8004b0e <osKernelStart+0x3a>
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <osKernelStart+0x68>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d103      	bne.n	8004b0e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004b06:	f06f 0305 	mvn.w	r3, #5
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e010      	b.n	8004b30 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <osKernelStart+0x68>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d109      	bne.n	8004b2a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b16:	f7ff ffa1 	bl	8004a5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b1a:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <osKernelStart+0x68>)
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b20:	f002 fb54 	bl	80071cc <vTaskStartScheduler>
      stat = osOK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	e002      	b.n	8004b30 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b30:	68fb      	ldr	r3, [r7, #12]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	200000ac 	.word	0x200000ac

08004b40 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b46:	f3ef 8305 	mrs	r3, IPSR
 8004b4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10f      	bne.n	8004b72 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b52:	f3ef 8310 	mrs	r3, PRIMASK
 8004b56:	607b      	str	r3, [r7, #4]
  return(result);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d105      	bne.n	8004b6a <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8004b62:	603b      	str	r3, [r7, #0]
  return(result);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <osKernelGetTickCount+0x3a>
 8004b6a:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <osKernelGetTickCount+0x4c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d103      	bne.n	8004b7a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004b72:	f002 fc4b 	bl	800740c <xTaskGetTickCountFromISR>
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	e002      	b.n	8004b80 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8004b7a:	f002 fc37 	bl	80073ec <xTaskGetTickCount>
 8004b7e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004b80:	68fb      	ldr	r3, [r7, #12]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	200000ac 	.word	0x200000ac

08004b90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b090      	sub	sp, #64	; 0x40
 8004b94:	af04      	add	r7, sp, #16
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ba0:	f3ef 8305 	mrs	r3, IPSR
 8004ba4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ba6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f040 808f 	bne.w	8004ccc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bae:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bba:	f3ef 8311 	mrs	r3, BASEPRI
 8004bbe:	617b      	str	r3, [r7, #20]
  return(result);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <osThreadNew+0x3e>
 8004bc6:	4b44      	ldr	r3, [pc, #272]	; (8004cd8 <osThreadNew+0x148>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d07e      	beq.n	8004ccc <osThreadNew+0x13c>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d07b      	beq.n	8004ccc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004bd4:	2380      	movs	r3, #128	; 0x80
 8004bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004bd8:	2318      	movs	r3, #24
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004be0:	f04f 33ff 	mov.w	r3, #4294967295
 8004be4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d045      	beq.n	8004c78 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <osThreadNew+0x6a>
        name = attr->name;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d008      	beq.n	8004c20 <osThreadNew+0x90>
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	2b38      	cmp	r3, #56	; 0x38
 8004c12:	d805      	bhi.n	8004c20 <osThreadNew+0x90>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <osThreadNew+0x94>
        return (NULL);
 8004c20:	2300      	movs	r3, #0
 8004c22:	e054      	b.n	8004cce <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	089b      	lsrs	r3, r3, #2
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00e      	beq.n	8004c5a <osThreadNew+0xca>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	2b5f      	cmp	r3, #95	; 0x5f
 8004c42:	d90a      	bls.n	8004c5a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d006      	beq.n	8004c5a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <osThreadNew+0xca>
        mem = 1;
 8004c54:	2301      	movs	r3, #1
 8004c56:	623b      	str	r3, [r7, #32]
 8004c58:	e010      	b.n	8004c7c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10c      	bne.n	8004c7c <osThreadNew+0xec>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d108      	bne.n	8004c7c <osThreadNew+0xec>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d104      	bne.n	8004c7c <osThreadNew+0xec>
          mem = 0;
 8004c72:	2300      	movs	r3, #0
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	e001      	b.n	8004c7c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d110      	bne.n	8004ca4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c8a:	9202      	str	r2, [sp, #8]
 8004c8c:	9301      	str	r3, [sp, #4]
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f001 febf 	bl	8006a1c <xTaskCreateStatic>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	e013      	b.n	8004ccc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d110      	bne.n	8004ccc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	f107 0310 	add.w	r3, r7, #16
 8004cb2:	9301      	str	r3, [sp, #4]
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f001 ff07 	bl	8006ad0 <xTaskCreate>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d001      	beq.n	8004ccc <osThreadNew+0x13c>
          hTask = NULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ccc:	693b      	ldr	r3, [r7, #16]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3730      	adds	r7, #48	; 0x30
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	200000ac 	.word	0x200000ac

08004cdc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ce4:	f3ef 8305 	mrs	r3, IPSR
 8004ce8:	613b      	str	r3, [r7, #16]
  return(result);
 8004cea:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10f      	bne.n	8004d10 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d105      	bne.n	8004d08 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8004d00:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <osDelay+0x3c>
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <osDelay+0x58>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d103      	bne.n	8004d18 <osDelay+0x3c>
    stat = osErrorISR;
 8004d10:	f06f 0305 	mvn.w	r3, #5
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e007      	b.n	8004d28 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d002      	beq.n	8004d28 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f002 f81a 	bl	8006d5c <vTaskDelay>
    }
  }

  return (stat);
 8004d28:	697b      	ldr	r3, [r7, #20]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	200000ac 	.word	0x200000ac

08004d38 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	; 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d44:	f3ef 8305 	mrs	r3, IPSR
 8004d48:	613b      	str	r3, [r7, #16]
  return(result);
 8004d4a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f040 8085 	bne.w	8004e5c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d52:	f3ef 8310 	mrs	r3, PRIMASK
 8004d56:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d105      	bne.n	8004d6a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d5e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d62:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <osMutexNew+0x3a>
 8004d6a:	4b3f      	ldr	r3, [pc, #252]	; (8004e68 <osMutexNew+0x130>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d074      	beq.n	8004e5c <osMutexNew+0x124>
    if (attr != NULL) {
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d003      	beq.n	8004d80 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	623b      	str	r3, [r7, #32]
 8004d7e:	e001      	b.n	8004d84 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <osMutexNew+0x5c>
      rmtx = 1U;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	e001      	b.n	8004d98 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d15c      	bne.n	8004e5c <osMutexNew+0x124>
      mem = -1;
 8004da2:	f04f 33ff 	mov.w	r3, #4294967295
 8004da6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d015      	beq.n	8004dda <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <osMutexNew+0x8c>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b4f      	cmp	r3, #79	; 0x4f
 8004dbc:	d902      	bls.n	8004dc4 <osMutexNew+0x8c>
          mem = 1;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	e00c      	b.n	8004dde <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d108      	bne.n	8004dde <osMutexNew+0xa6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d104      	bne.n	8004dde <osMutexNew+0xa6>
            mem = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	e001      	b.n	8004dde <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d112      	bne.n	8004e0a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	4619      	mov	r1, r3
 8004df0:	2004      	movs	r0, #4
 8004df2:	f000 fea6 	bl	8005b42 <xQueueCreateMutexStatic>
 8004df6:	6278      	str	r0, [r7, #36]	; 0x24
 8004df8:	e016      	b.n	8004e28 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	4619      	mov	r1, r3
 8004e00:	2001      	movs	r0, #1
 8004e02:	f000 fe9e 	bl	8005b42 <xQueueCreateMutexStatic>
 8004e06:	6278      	str	r0, [r7, #36]	; 0x24
 8004e08:	e00e      	b.n	8004e28 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10b      	bne.n	8004e28 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004e16:	2004      	movs	r0, #4
 8004e18:	f000 fe7b 	bl	8005b12 <xQueueCreateMutex>
 8004e1c:	6278      	str	r0, [r7, #36]	; 0x24
 8004e1e:	e003      	b.n	8004e28 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004e20:	2001      	movs	r0, #1
 8004e22:	f000 fe76 	bl	8005b12 <xQueueCreateMutex>
 8004e26:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00c      	beq.n	8004e48 <osMutexNew+0x110>
        if (attr != NULL) {
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <osMutexNew+0x104>
          name = attr->name;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	e001      	b.n	8004e40 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004e40:	6979      	ldr	r1, [r7, #20]
 8004e42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e44:	f001 fd64 	bl	8006910 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d006      	beq.n	8004e5c <osMutexNew+0x124>
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d003      	beq.n	8004e5c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	f043 0301 	orr.w	r3, r3, #1
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3728      	adds	r7, #40	; 0x28
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	200000ac 	.word	0x200000ac

08004e6c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f023 0301 	bic.w	r3, r3, #1
 8004e7c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e8a:	f3ef 8305 	mrs	r3, IPSR
 8004e8e:	613b      	str	r3, [r7, #16]
  return(result);
 8004e90:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10f      	bne.n	8004eb6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e96:	f3ef 8310 	mrs	r3, PRIMASK
 8004e9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d105      	bne.n	8004eae <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ea6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <osMutexAcquire+0x52>
 8004eae:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <osMutexAcquire+0xb8>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d103      	bne.n	8004ebe <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004eb6:	f06f 0305 	mvn.w	r3, #5
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	e02c      	b.n	8004f18 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d103      	bne.n	8004ecc <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004ec4:	f06f 0303 	mvn.w	r3, #3
 8004ec8:	61fb      	str	r3, [r7, #28]
 8004eca:	e025      	b.n	8004f18 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d011      	beq.n	8004ef6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004ed2:	6839      	ldr	r1, [r7, #0]
 8004ed4:	69b8      	ldr	r0, [r7, #24]
 8004ed6:	f000 fe82 	bl	8005bde <xQueueTakeMutexRecursive>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d01b      	beq.n	8004f18 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004ee6:	f06f 0301 	mvn.w	r3, #1
 8004eea:	61fb      	str	r3, [r7, #28]
 8004eec:	e014      	b.n	8004f18 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004eee:	f06f 0302 	mvn.w	r3, #2
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	e010      	b.n	8004f18 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004ef6:	6839      	ldr	r1, [r7, #0]
 8004ef8:	69b8      	ldr	r0, [r7, #24]
 8004efa:	f001 f9ff 	bl	80062fc <xQueueSemaphoreTake>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d009      	beq.n	8004f18 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004f0a:	f06f 0301 	mvn.w	r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	e002      	b.n	8004f18 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004f12:	f06f 0302 	mvn.w	r3, #2
 8004f16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004f18:	69fb      	ldr	r3, [r7, #28]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	200000ac 	.word	0x200000ac

08004f28 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b088      	sub	sp, #32
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f023 0301 	bic.w	r3, r3, #1
 8004f36:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f44:	f3ef 8305 	mrs	r3, IPSR
 8004f48:	613b      	str	r3, [r7, #16]
  return(result);
 8004f4a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10f      	bne.n	8004f70 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f50:	f3ef 8310 	mrs	r3, PRIMASK
 8004f54:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d105      	bne.n	8004f68 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f60:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d007      	beq.n	8004f78 <osMutexRelease+0x50>
 8004f68:	4b16      	ldr	r3, [pc, #88]	; (8004fc4 <osMutexRelease+0x9c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d103      	bne.n	8004f78 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004f70:	f06f 0305 	mvn.w	r3, #5
 8004f74:	61fb      	str	r3, [r7, #28]
 8004f76:	e01f      	b.n	8004fb8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004f7e:	f06f 0303 	mvn.w	r3, #3
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e018      	b.n	8004fb8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d009      	beq.n	8004fa0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004f8c:	69b8      	ldr	r0, [r7, #24]
 8004f8e:	f000 fdf3 	bl	8005b78 <xQueueGiveMutexRecursive>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d00f      	beq.n	8004fb8 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004f98:	f06f 0302 	mvn.w	r3, #2
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	e00b      	b.n	8004fb8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	69b8      	ldr	r0, [r7, #24]
 8004fa8:	f000 feb4 	bl	8005d14 <xQueueGenericSend>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d002      	beq.n	8004fb8 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004fb2:	f06f 0302 	mvn.w	r3, #2
 8004fb6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004fb8:	69fb      	ldr	r3, [r7, #28]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3720      	adds	r7, #32
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	200000ac 	.word	0x200000ac

08004fc8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b08c      	sub	sp, #48	; 0x30
 8004fcc:	af02      	add	r7, sp, #8
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fd8:	f3ef 8305 	mrs	r3, IPSR
 8004fdc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fde:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f040 8087 	bne.w	80050f4 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fea:	617b      	str	r3, [r7, #20]
  return(result);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d105      	bne.n	8004ffe <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ff2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff6:	613b      	str	r3, [r7, #16]
  return(result);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <osSemaphoreNew+0x3e>
 8004ffe:	4b40      	ldr	r3, [pc, #256]	; (8005100 <osSemaphoreNew+0x138>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d076      	beq.n	80050f4 <osSemaphoreNew+0x12c>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d073      	beq.n	80050f4 <osSemaphoreNew+0x12c>
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	429a      	cmp	r2, r3
 8005012:	d86f      	bhi.n	80050f4 <osSemaphoreNew+0x12c>
    mem = -1;
 8005014:	f04f 33ff 	mov.w	r3, #4294967295
 8005018:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d015      	beq.n	800504c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d006      	beq.n	8005036 <osSemaphoreNew+0x6e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2b4f      	cmp	r3, #79	; 0x4f
 800502e:	d902      	bls.n	8005036 <osSemaphoreNew+0x6e>
        mem = 1;
 8005030:	2301      	movs	r3, #1
 8005032:	623b      	str	r3, [r7, #32]
 8005034:	e00c      	b.n	8005050 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d108      	bne.n	8005050 <osSemaphoreNew+0x88>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d104      	bne.n	8005050 <osSemaphoreNew+0x88>
          mem = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	623b      	str	r3, [r7, #32]
 800504a:	e001      	b.n	8005050 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800504c:	2300      	movs	r3, #0
 800504e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005056:	d04d      	beq.n	80050f4 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d129      	bne.n	80050b2 <osSemaphoreNew+0xea>
        if (mem == 1) {
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d10b      	bne.n	800507c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	2303      	movs	r3, #3
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	4613      	mov	r3, r2
 800506e:	2200      	movs	r2, #0
 8005070:	2100      	movs	r1, #0
 8005072:	2001      	movs	r0, #1
 8005074:	f000 fc5e 	bl	8005934 <xQueueGenericCreateStatic>
 8005078:	6278      	str	r0, [r7, #36]	; 0x24
 800507a:	e005      	b.n	8005088 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800507c:	2203      	movs	r2, #3
 800507e:	2100      	movs	r1, #0
 8005080:	2001      	movs	r0, #1
 8005082:	f000 fcca 	bl	8005a1a <xQueueGenericCreate>
 8005086:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	d022      	beq.n	80050d4 <osSemaphoreNew+0x10c>
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01f      	beq.n	80050d4 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005094:	2300      	movs	r3, #0
 8005096:	2200      	movs	r2, #0
 8005098:	2100      	movs	r1, #0
 800509a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800509c:	f000 fe3a 	bl	8005d14 <xQueueGenericSend>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d016      	beq.n	80050d4 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80050a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050a8:	f001 fae7 	bl	800667a <vQueueDelete>
            hSemaphore = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
 80050b0:	e010      	b.n	80050d4 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d108      	bne.n	80050ca <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	461a      	mov	r2, r3
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 fdc1 	bl	8005c48 <xQueueCreateCountingSemaphoreStatic>
 80050c6:	6278      	str	r0, [r7, #36]	; 0x24
 80050c8:	e004      	b.n	80050d4 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 fdf0 	bl	8005cb2 <xQueueCreateCountingSemaphore>
 80050d2:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00c      	beq.n	80050f4 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <osSemaphoreNew+0x120>
          name = attr->name;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	61fb      	str	r3, [r7, #28]
 80050e6:	e001      	b.n	80050ec <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80050ec:	69f9      	ldr	r1, [r7, #28]
 80050ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050f0:	f001 fc0e 	bl	8006910 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3728      	adds	r7, #40	; 0x28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	200000ac 	.word	0x200000ac

08005104 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005104:	b580      	push	{r7, lr}
 8005106:	b088      	sub	sp, #32
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d103      	bne.n	8005124 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800511c:	f06f 0303 	mvn.w	r3, #3
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	e04b      	b.n	80051bc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005124:	f3ef 8305 	mrs	r3, IPSR
 8005128:	617b      	str	r3, [r7, #20]
  return(result);
 800512a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10f      	bne.n	8005150 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005130:	f3ef 8310 	mrs	r3, PRIMASK
 8005134:	613b      	str	r3, [r7, #16]
  return(result);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d105      	bne.n	8005148 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800513c:	f3ef 8311 	mrs	r3, BASEPRI
 8005140:	60fb      	str	r3, [r7, #12]
  return(result);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d026      	beq.n	8005196 <osSemaphoreAcquire+0x92>
 8005148:	4b1f      	ldr	r3, [pc, #124]	; (80051c8 <osSemaphoreAcquire+0xc4>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d122      	bne.n	8005196 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005156:	f06f 0303 	mvn.w	r3, #3
 800515a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800515c:	e02d      	b.n	80051ba <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800515e:	2300      	movs	r3, #0
 8005160:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005162:	f107 0308 	add.w	r3, r7, #8
 8005166:	461a      	mov	r2, r3
 8005168:	2100      	movs	r1, #0
 800516a:	69b8      	ldr	r0, [r7, #24]
 800516c:	f001 f9ce 	bl	800650c <xQueueReceiveFromISR>
 8005170:	4603      	mov	r3, r0
 8005172:	2b01      	cmp	r3, #1
 8005174:	d003      	beq.n	800517e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005176:	f06f 0302 	mvn.w	r3, #2
 800517a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800517c:	e01d      	b.n	80051ba <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d01a      	beq.n	80051ba <osSemaphoreAcquire+0xb6>
 8005184:	4b11      	ldr	r3, [pc, #68]	; (80051cc <osSemaphoreAcquire+0xc8>)
 8005186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005194:	e011      	b.n	80051ba <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005196:	6839      	ldr	r1, [r7, #0]
 8005198:	69b8      	ldr	r0, [r7, #24]
 800519a:	f001 f8af 	bl	80062fc <xQueueSemaphoreTake>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d00b      	beq.n	80051bc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80051aa:	f06f 0301 	mvn.w	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
 80051b0:	e004      	b.n	80051bc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80051b2:	f06f 0302 	mvn.w	r3, #2
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	e000      	b.n	80051bc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80051ba:	bf00      	nop
      }
    }
  }

  return (stat);
 80051bc:	69fb      	ldr	r3, [r7, #28]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	200000ac 	.word	0x200000ac
 80051cc:	e000ed04 	.word	0xe000ed04

080051d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80051dc:	2300      	movs	r3, #0
 80051de:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d103      	bne.n	80051ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80051e6:	f06f 0303 	mvn.w	r3, #3
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	e03e      	b.n	800526c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ee:	f3ef 8305 	mrs	r3, IPSR
 80051f2:	617b      	str	r3, [r7, #20]
  return(result);
 80051f4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10f      	bne.n	800521a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fa:	f3ef 8310 	mrs	r3, PRIMASK
 80051fe:	613b      	str	r3, [r7, #16]
  return(result);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d105      	bne.n	8005212 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005206:	f3ef 8311 	mrs	r3, BASEPRI
 800520a:	60fb      	str	r3, [r7, #12]
  return(result);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01e      	beq.n	8005250 <osSemaphoreRelease+0x80>
 8005212:	4b19      	ldr	r3, [pc, #100]	; (8005278 <osSemaphoreRelease+0xa8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b02      	cmp	r3, #2
 8005218:	d11a      	bne.n	8005250 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800521a:	2300      	movs	r3, #0
 800521c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800521e:	f107 0308 	add.w	r3, r7, #8
 8005222:	4619      	mov	r1, r3
 8005224:	69b8      	ldr	r0, [r7, #24]
 8005226:	f000 ff03 	bl	8006030 <xQueueGiveFromISR>
 800522a:	4603      	mov	r3, r0
 800522c:	2b01      	cmp	r3, #1
 800522e:	d003      	beq.n	8005238 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005230:	f06f 0302 	mvn.w	r3, #2
 8005234:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005236:	e018      	b.n	800526a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d015      	beq.n	800526a <osSemaphoreRelease+0x9a>
 800523e:	4b0f      	ldr	r3, [pc, #60]	; (800527c <osSemaphoreRelease+0xac>)
 8005240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800524e:	e00c      	b.n	800526a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005250:	2300      	movs	r3, #0
 8005252:	2200      	movs	r2, #0
 8005254:	2100      	movs	r1, #0
 8005256:	69b8      	ldr	r0, [r7, #24]
 8005258:	f000 fd5c 	bl	8005d14 <xQueueGenericSend>
 800525c:	4603      	mov	r3, r0
 800525e:	2b01      	cmp	r3, #1
 8005260:	d004      	beq.n	800526c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005262:	f06f 0302 	mvn.w	r3, #2
 8005266:	61fb      	str	r3, [r7, #28]
 8005268:	e000      	b.n	800526c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800526a:	bf00      	nop
    }
  }

  return (stat);
 800526c:	69fb      	ldr	r3, [r7, #28]
}
 800526e:	4618      	mov	r0, r3
 8005270:	3720      	adds	r7, #32
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	200000ac 	.word	0x200000ac
 800527c:	e000ed04 	.word	0xe000ed04

08005280 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800528c:	f3ef 8305 	mrs	r3, IPSR
 8005290:	617b      	str	r3, [r7, #20]
  return(result);
 8005292:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10f      	bne.n	80052b8 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005298:	f3ef 8310 	mrs	r3, PRIMASK
 800529c:	613b      	str	r3, [r7, #16]
  return(result);
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d105      	bne.n	80052b0 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80052a4:	f3ef 8311 	mrs	r3, BASEPRI
 80052a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d007      	beq.n	80052c0 <osSemaphoreDelete+0x40>
 80052b0:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <osSemaphoreDelete+0x68>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d103      	bne.n	80052c0 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 80052b8:	f06f 0305 	mvn.w	r3, #5
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	e00e      	b.n	80052de <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d103      	bne.n	80052ce <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 80052c6:	f06f 0303 	mvn.w	r3, #3
 80052ca:	61fb      	str	r3, [r7, #28]
 80052cc:	e007      	b.n	80052de <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80052ce:	69b8      	ldr	r0, [r7, #24]
 80052d0:	f001 fb46 	bl	8006960 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 80052d8:	69b8      	ldr	r0, [r7, #24]
 80052da:	f001 f9ce 	bl	800667a <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80052de:	69fb      	ldr	r3, [r7, #28]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3720      	adds	r7, #32
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	200000ac 	.word	0x200000ac

080052ec <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08c      	sub	sp, #48	; 0x30
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052fc:	f3ef 8305 	mrs	r3, IPSR
 8005300:	61bb      	str	r3, [r7, #24]
  return(result);
 8005302:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005304:	2b00      	cmp	r3, #0
 8005306:	d170      	bne.n	80053ea <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005308:	f3ef 8310 	mrs	r3, PRIMASK
 800530c:	617b      	str	r3, [r7, #20]
  return(result);
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d105      	bne.n	8005320 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005314:	f3ef 8311 	mrs	r3, BASEPRI
 8005318:	613b      	str	r3, [r7, #16]
  return(result);
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <osMessageQueueNew+0x3c>
 8005320:	4b34      	ldr	r3, [pc, #208]	; (80053f4 <osMessageQueueNew+0x108>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b02      	cmp	r3, #2
 8005326:	d060      	beq.n	80053ea <osMessageQueueNew+0xfe>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d05d      	beq.n	80053ea <osMessageQueueNew+0xfe>
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d05a      	beq.n	80053ea <osMessageQueueNew+0xfe>
    mem = -1;
 8005334:	f04f 33ff 	mov.w	r3, #4294967295
 8005338:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d029      	beq.n	8005394 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d012      	beq.n	800536e <osMessageQueueNew+0x82>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2b4f      	cmp	r3, #79	; 0x4f
 800534e:	d90e      	bls.n	800536e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00a      	beq.n	800536e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	695a      	ldr	r2, [r3, #20]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	429a      	cmp	r2, r3
 8005366:	d302      	bcc.n	800536e <osMessageQueueNew+0x82>
        mem = 1;
 8005368:	2301      	movs	r3, #1
 800536a:	623b      	str	r3, [r7, #32]
 800536c:	e014      	b.n	8005398 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d110      	bne.n	8005398 <osMessageQueueNew+0xac>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10c      	bne.n	8005398 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005382:	2b00      	cmp	r3, #0
 8005384:	d108      	bne.n	8005398 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <osMessageQueueNew+0xac>
          mem = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	623b      	str	r3, [r7, #32]
 8005392:	e001      	b.n	8005398 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d10c      	bne.n	80053b8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691a      	ldr	r2, [r3, #16]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6899      	ldr	r1, [r3, #8]
 80053a6:	2300      	movs	r3, #0
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	460b      	mov	r3, r1
 80053ac:	68b9      	ldr	r1, [r7, #8]
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 fac0 	bl	8005934 <xQueueGenericCreateStatic>
 80053b4:	6278      	str	r0, [r7, #36]	; 0x24
 80053b6:	e008      	b.n	80053ca <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d105      	bne.n	80053ca <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80053be:	2200      	movs	r2, #0
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 fb29 	bl	8005a1a <xQueueGenericCreate>
 80053c8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00c      	beq.n	80053ea <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <osMessageQueueNew+0xf2>
        name = attr->name;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	61fb      	str	r3, [r7, #28]
 80053dc:	e001      	b.n	80053e2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80053e2:	69f9      	ldr	r1, [r7, #28]
 80053e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053e6:	f001 fa93 	bl	8006910 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3728      	adds	r7, #40	; 0x28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	200000ac 	.word	0x200000ac

080053f8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	; 0x28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	4613      	mov	r3, r2
 8005406:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800540c:	2300      	movs	r3, #0
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005410:	f3ef 8305 	mrs	r3, IPSR
 8005414:	61fb      	str	r3, [r7, #28]
  return(result);
 8005416:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10f      	bne.n	800543c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800541c:	f3ef 8310 	mrs	r3, PRIMASK
 8005420:	61bb      	str	r3, [r7, #24]
  return(result);
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d105      	bne.n	8005434 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005428:	f3ef 8311 	mrs	r3, BASEPRI
 800542c:	617b      	str	r3, [r7, #20]
  return(result);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d02c      	beq.n	800548e <osMessageQueuePut+0x96>
 8005434:	4b28      	ldr	r3, [pc, #160]	; (80054d8 <osMessageQueuePut+0xe0>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b02      	cmp	r3, #2
 800543a:	d128      	bne.n	800548e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <osMessageQueuePut+0x56>
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <osMessageQueuePut+0x56>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800544e:	f06f 0303 	mvn.w	r3, #3
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005454:	e039      	b.n	80054ca <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005456:	2300      	movs	r3, #0
 8005458:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800545a:	f107 0210 	add.w	r2, r7, #16
 800545e:	2300      	movs	r3, #0
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	6a38      	ldr	r0, [r7, #32]
 8005464:	f000 fd50 	bl	8005f08 <xQueueGenericSendFromISR>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d003      	beq.n	8005476 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800546e:	f06f 0302 	mvn.w	r3, #2
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005474:	e029      	b.n	80054ca <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d026      	beq.n	80054ca <osMessageQueuePut+0xd2>
 800547c:	4b17      	ldr	r3, [pc, #92]	; (80054dc <osMessageQueuePut+0xe4>)
 800547e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005482:	601a      	str	r2, [r3, #0]
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800548c:	e01d      	b.n	80054ca <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <osMessageQueuePut+0xa2>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800549a:	f06f 0303 	mvn.w	r3, #3
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
 80054a0:	e014      	b.n	80054cc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80054a2:	2300      	movs	r3, #0
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	68b9      	ldr	r1, [r7, #8]
 80054a8:	6a38      	ldr	r0, [r7, #32]
 80054aa:	f000 fc33 	bl	8005d14 <xQueueGenericSend>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d00b      	beq.n	80054cc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80054ba:	f06f 0301 	mvn.w	r3, #1
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
 80054c0:	e004      	b.n	80054cc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80054c2:	f06f 0302 	mvn.w	r3, #2
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
 80054c8:	e000      	b.n	80054cc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054ca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3728      	adds	r7, #40	; 0x28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	200000ac 	.word	0x200000ac
 80054dc:	e000ed04 	.word	0xe000ed04

080054e0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	; 0x28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054f6:	f3ef 8305 	mrs	r3, IPSR
 80054fa:	61fb      	str	r3, [r7, #28]
  return(result);
 80054fc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10f      	bne.n	8005522 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005502:	f3ef 8310 	mrs	r3, PRIMASK
 8005506:	61bb      	str	r3, [r7, #24]
  return(result);
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d105      	bne.n	800551a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800550e:	f3ef 8311 	mrs	r3, BASEPRI
 8005512:	617b      	str	r3, [r7, #20]
  return(result);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d02c      	beq.n	8005574 <osMessageQueueGet+0x94>
 800551a:	4b28      	ldr	r3, [pc, #160]	; (80055bc <osMessageQueueGet+0xdc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d128      	bne.n	8005574 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <osMessageQueueGet+0x54>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <osMessageQueueGet+0x54>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005534:	f06f 0303 	mvn.w	r3, #3
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800553a:	e038      	b.n	80055ae <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005540:	f107 0310 	add.w	r3, r7, #16
 8005544:	461a      	mov	r2, r3
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	6a38      	ldr	r0, [r7, #32]
 800554a:	f000 ffdf 	bl	800650c <xQueueReceiveFromISR>
 800554e:	4603      	mov	r3, r0
 8005550:	2b01      	cmp	r3, #1
 8005552:	d003      	beq.n	800555c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005554:	f06f 0302 	mvn.w	r3, #2
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800555a:	e028      	b.n	80055ae <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d025      	beq.n	80055ae <osMessageQueueGet+0xce>
 8005562:	4b17      	ldr	r3, [pc, #92]	; (80055c0 <osMessageQueueGet+0xe0>)
 8005564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005572:	e01c      	b.n	80055ae <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <osMessageQueueGet+0xa0>
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d103      	bne.n	8005588 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005580:	f06f 0303 	mvn.w	r3, #3
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
 8005586:	e013      	b.n	80055b0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	6a38      	ldr	r0, [r7, #32]
 800558e:	f000 fdd9 	bl	8006144 <xQueueReceive>
 8005592:	4603      	mov	r3, r0
 8005594:	2b01      	cmp	r3, #1
 8005596:	d00b      	beq.n	80055b0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800559e:	f06f 0301 	mvn.w	r3, #1
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
 80055a4:	e004      	b.n	80055b0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80055a6:	f06f 0302 	mvn.w	r3, #2
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
 80055ac:	e000      	b.n	80055b0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055ae:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3728      	adds	r7, #40	; 0x28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	200000ac 	.word	0x200000ac
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <osMessageQueueGetCount+0x18>
    count = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
 80055da:	e01e      	b.n	800561a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055dc:	f3ef 8305 	mrs	r3, IPSR
 80055e0:	617b      	str	r3, [r7, #20]
  return(result);
 80055e2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10f      	bne.n	8005608 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e8:	f3ef 8310 	mrs	r3, PRIMASK
 80055ec:	613b      	str	r3, [r7, #16]
  return(result);
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d105      	bne.n	8005600 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80055f4:	f3ef 8311 	mrs	r3, BASEPRI
 80055f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <osMessageQueueGetCount+0x4e>
 8005600:	4b08      	ldr	r3, [pc, #32]	; (8005624 <osMessageQueueGetCount+0x60>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d104      	bne.n	8005612 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005608:	69b8      	ldr	r0, [r7, #24]
 800560a:	f001 f819 	bl	8006640 <uxQueueMessagesWaitingFromISR>
 800560e:	61f8      	str	r0, [r7, #28]
 8005610:	e003      	b.n	800561a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005612:	69b8      	ldr	r0, [r7, #24]
 8005614:	f000 fff7 	bl	8006606 <uxQueueMessagesWaiting>
 8005618:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800561a:	69fb      	ldr	r3, [r7, #28]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3720      	adds	r7, #32
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	200000ac 	.word	0x200000ac

08005628 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005628:	b580      	push	{r7, lr}
 800562a:	b088      	sub	sp, #32
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005634:	f3ef 8305 	mrs	r3, IPSR
 8005638:	617b      	str	r3, [r7, #20]
  return(result);
 800563a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10f      	bne.n	8005660 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005640:	f3ef 8310 	mrs	r3, PRIMASK
 8005644:	613b      	str	r3, [r7, #16]
  return(result);
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d105      	bne.n	8005658 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800564c:	f3ef 8311 	mrs	r3, BASEPRI
 8005650:	60fb      	str	r3, [r7, #12]
  return(result);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <osMessageQueueDelete+0x40>
 8005658:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <osMessageQueueDelete+0x68>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d103      	bne.n	8005668 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 8005660:	f06f 0305 	mvn.w	r3, #5
 8005664:	61fb      	str	r3, [r7, #28]
 8005666:	e00e      	b.n	8005686 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d103      	bne.n	8005676 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800566e:	f06f 0303 	mvn.w	r3, #3
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	e007      	b.n	8005686 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005676:	69b8      	ldr	r0, [r7, #24]
 8005678:	f001 f972 	bl	8006960 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800567c:	2300      	movs	r3, #0
 800567e:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8005680:	69b8      	ldr	r0, [r7, #24]
 8005682:	f000 fffa 	bl	800667a <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005686:	69fb      	ldr	r3, [r7, #28]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3720      	adds	r7, #32
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	200000ac 	.word	0x200000ac

08005694 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4a07      	ldr	r2, [pc, #28]	; (80056c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80056a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4a06      	ldr	r2, [pc, #24]	; (80056c4 <vApplicationGetIdleTaskMemory+0x30>)
 80056aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2280      	movs	r2, #128	; 0x80
 80056b0:	601a      	str	r2, [r3, #0]
}
 80056b2:	bf00      	nop
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	200000b0 	.word	0x200000b0
 80056c4:	20000110 	.word	0x20000110

080056c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4a07      	ldr	r2, [pc, #28]	; (80056f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80056d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4a06      	ldr	r2, [pc, #24]	; (80056f8 <vApplicationGetTimerTaskMemory+0x30>)
 80056de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056e6:	601a      	str	r2, [r3, #0]
}
 80056e8:	bf00      	nop
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	20000310 	.word	0x20000310
 80056f8:	20000370 	.word	0x20000370

080056fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f103 0208 	add.w	r2, r3, #8
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f04f 32ff 	mov.w	r2, #4294967295
 8005714:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f103 0208 	add.w	r2, r3, #8
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f103 0208 	add.w	r2, r3, #8
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	683a      	ldr	r2, [r7, #0]
 8005780:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	601a      	str	r2, [r3, #0]
}
 8005792:	bf00      	nop
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
 80057a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d103      	bne.n	80057be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	e00c      	b.n	80057d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3308      	adds	r3, #8
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	e002      	b.n	80057cc <vListInsert+0x2e>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d2f6      	bcs.n	80057c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	683a      	ldr	r2, [r7, #0]
 80057f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	601a      	str	r2, [r3, #0]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	6892      	ldr	r2, [r2, #8]
 8005826:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6852      	ldr	r2, [r2, #4]
 8005830:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	d103      	bne.n	8005844 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	1e5a      	subs	r2, r3, #1
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3714      	adds	r7, #20
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	e7fe      	b.n	800588a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800588c:	f003 f966 	bl	8008b5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005898:	68f9      	ldr	r1, [r7, #12]
 800589a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800589c:	fb01 f303 	mul.w	r3, r1, r3
 80058a0:	441a      	add	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058bc:	3b01      	subs	r3, #1
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	441a      	add	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	22ff      	movs	r2, #255	; 0xff
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	22ff      	movs	r2, #255	; 0xff
 80058d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d114      	bne.n	800590c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d01a      	beq.n	8005920 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	3310      	adds	r3, #16
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 ffac 	bl	800784c <xTaskRemoveFromEventList>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d012      	beq.n	8005920 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058fa:	4b0d      	ldr	r3, [pc, #52]	; (8005930 <xQueueGenericReset+0xcc>)
 80058fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	f3bf 8f6f 	isb	sy
 800590a:	e009      	b.n	8005920 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3310      	adds	r3, #16
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff fef3 	bl	80056fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3324      	adds	r3, #36	; 0x24
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff feee 	bl	80056fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005920:	f003 f94a 	bl	8008bb8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005924:	2301      	movs	r3, #1
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08e      	sub	sp, #56	; 0x38
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <xQueueGenericCreateStatic+0x28>
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	62bb      	str	r3, [r7, #40]	; 0x28
 800595a:	e7fe      	b.n	800595a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <xQueueGenericCreateStatic+0x42>
 8005962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005966:	f383 8811 	msr	BASEPRI, r3
 800596a:	f3bf 8f6f 	isb	sy
 800596e:	f3bf 8f4f 	dsb	sy
 8005972:	627b      	str	r3, [r7, #36]	; 0x24
 8005974:	e7fe      	b.n	8005974 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <xQueueGenericCreateStatic+0x4e>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <xQueueGenericCreateStatic+0x52>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <xQueueGenericCreateStatic+0x54>
 8005986:	2300      	movs	r3, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d109      	bne.n	80059a0 <xQueueGenericCreateStatic+0x6c>
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	623b      	str	r3, [r7, #32]
 800599e:	e7fe      	b.n	800599e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <xQueueGenericCreateStatic+0x78>
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <xQueueGenericCreateStatic+0x7c>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <xQueueGenericCreateStatic+0x7e>
 80059b0:	2300      	movs	r3, #0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <xQueueGenericCreateStatic+0x96>
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	61fb      	str	r3, [r7, #28]
 80059c8:	e7fe      	b.n	80059c8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80059ca:	2350      	movs	r3, #80	; 0x50
 80059cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b50      	cmp	r3, #80	; 0x50
 80059d2:	d009      	beq.n	80059e8 <xQueueGenericCreateStatic+0xb4>
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	e7fe      	b.n	80059e6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00d      	beq.n	8005a10 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059fc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	4613      	mov	r3, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f844 	bl	8005a98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3730      	adds	r7, #48	; 0x30
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b08a      	sub	sp, #40	; 0x28
 8005a1e:	af02      	add	r7, sp, #8
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	4613      	mov	r3, r2
 8005a26:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <xQueueGenericCreate+0x28>
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	613b      	str	r3, [r7, #16]
 8005a40:	e7fe      	b.n	8005a40 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d102      	bne.n	8005a4e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	e004      	b.n	8005a58 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	fb02 f303 	mul.w	r3, r2, r3
 8005a56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	3350      	adds	r3, #80	; 0x50
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f003 f997 	bl	8008d90 <pvPortMalloc>
 8005a62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d011      	beq.n	8005a8e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	3350      	adds	r3, #80	; 0x50
 8005a72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a7c:	79fa      	ldrb	r2, [r7, #7]
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	4613      	mov	r3, r2
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 f805 	bl	8005a98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a8e:	69bb      	ldr	r3, [r7, #24]
	}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3720      	adds	r7, #32
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
 8005aa4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d103      	bne.n	8005ab4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	e002      	b.n	8005aba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	69b8      	ldr	r0, [r7, #24]
 8005aca:	f7ff fecb 	bl	8005864 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	78fa      	ldrb	r2, [r7, #3]
 8005ad2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005ad6:	bf00      	nop
 8005ad8:	3710      	adds	r7, #16
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}

08005ade <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b082      	sub	sp, #8
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00e      	beq.n	8005b0a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005afe:	2300      	movs	r3, #0
 8005b00:	2200      	movs	r2, #0
 8005b02:	2100      	movs	r1, #0
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f905 	bl	8005d14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005b0a:	bf00      	nop
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b086      	sub	sp, #24
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	4603      	mov	r3, r0
 8005b1a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	2300      	movs	r3, #0
 8005b22:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	461a      	mov	r2, r3
 8005b28:	6939      	ldr	r1, [r7, #16]
 8005b2a:	6978      	ldr	r0, [r7, #20]
 8005b2c:	f7ff ff75 	bl	8005a1a <xQueueGenericCreate>
 8005b30:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff ffd3 	bl	8005ade <prvInitialiseMutex>

		return xNewQueue;
 8005b38:	68fb      	ldr	r3, [r7, #12]
	}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b088      	sub	sp, #32
 8005b46:	af02      	add	r7, sp, #8
 8005b48:	4603      	mov	r3, r0
 8005b4a:	6039      	str	r1, [r7, #0]
 8005b4c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	2300      	movs	r3, #0
 8005b54:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	6939      	ldr	r1, [r7, #16]
 8005b60:	6978      	ldr	r0, [r7, #20]
 8005b62:	f7ff fee7 	bl	8005934 <xQueueGenericCreateStatic>
 8005b66:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7ff ffb8 	bl	8005ade <prvInitialiseMutex>

		return xNewQueue;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
	}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d109      	bne.n	8005b9e <xQueueGiveMutexRecursive+0x26>
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e7fe      	b.n	8005b9c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	689c      	ldr	r4, [r3, #8]
 8005ba2:	f002 f8dd 	bl	8007d60 <xTaskGetCurrentTaskHandle>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	429c      	cmp	r4, r3
 8005baa:	d111      	bne.n	8005bd0 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	1e5a      	subs	r2, r3, #1
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d105      	bne.n	8005bca <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	6938      	ldr	r0, [r7, #16]
 8005bc6:	f000 f8a5 	bl	8005d14 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	e001      	b.n	8005bd4 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005bd4:	697b      	ldr	r3, [r7, #20]
	}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	371c      	adds	r7, #28
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd90      	pop	{r4, r7, pc}

08005bde <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005bde:	b590      	push	{r4, r7, lr}
 8005be0:	b087      	sub	sp, #28
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <xQueueTakeMutexRecursive+0x28>
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e7fe      	b.n	8005c04 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	689c      	ldr	r4, [r3, #8]
 8005c0a:	f002 f8a9 	bl	8007d60 <xTaskGetCurrentTaskHandle>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	429c      	cmp	r4, r3
 8005c12:	d107      	bne.n	8005c24 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e00c      	b.n	8005c3e <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6938      	ldr	r0, [r7, #16]
 8005c28:	f000 fb68 	bl	80062fc <xQueueSemaphoreTake>
 8005c2c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d004      	beq.n	8005c3e <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	1c5a      	adds	r2, r3, #1
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005c3e:	697b      	ldr	r3, [r7, #20]
	}
 8005c40:	4618      	mov	r0, r3
 8005c42:	371c      	adds	r7, #28
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd90      	pop	{r4, r7, pc}

08005c48 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b08a      	sub	sp, #40	; 0x28
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d109      	bne.n	8005c6e <xQueueCreateCountingSemaphoreStatic+0x26>
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	e7fe      	b.n	8005c6c <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d909      	bls.n	8005c8a <xQueueCreateCountingSemaphoreStatic+0x42>
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	e7fe      	b.n	8005c88 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	2100      	movs	r1, #0
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff fe4d 	bl	8005934 <xQueueGenericCreateStatic>
 8005c9a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ca8:	69fb      	ldr	r3, [r7, #28]
	}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3720      	adds	r7, #32
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b086      	sub	sp, #24
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <xQueueCreateCountingSemaphore+0x24>
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	613b      	str	r3, [r7, #16]
 8005cd4:	e7fe      	b.n	8005cd4 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d909      	bls.n	8005cf2 <xQueueCreateCountingSemaphore+0x40>
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e7fe      	b.n	8005cf0 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7ff fe8f 	bl	8005a1a <xQueueGenericCreate>
 8005cfc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d0a:	697b      	ldr	r3, [r7, #20]
	}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08e      	sub	sp, #56	; 0x38
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d22:	2300      	movs	r3, #0
 8005d24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d109      	bne.n	8005d44 <xQueueGenericSend+0x30>
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d42:	e7fe      	b.n	8005d42 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d103      	bne.n	8005d52 <xQueueGenericSend+0x3e>
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <xQueueGenericSend+0x42>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <xQueueGenericSend+0x44>
 8005d56:	2300      	movs	r3, #0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d109      	bne.n	8005d70 <xQueueGenericSend+0x5c>
 8005d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d60:	f383 8811 	msr	BASEPRI, r3
 8005d64:	f3bf 8f6f 	isb	sy
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d6e:	e7fe      	b.n	8005d6e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d103      	bne.n	8005d7e <xQueueGenericSend+0x6a>
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d101      	bne.n	8005d82 <xQueueGenericSend+0x6e>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <xQueueGenericSend+0x70>
 8005d82:	2300      	movs	r3, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d109      	bne.n	8005d9c <xQueueGenericSend+0x88>
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	623b      	str	r3, [r7, #32]
 8005d9a:	e7fe      	b.n	8005d9a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d9c:	f001 fff0 	bl	8007d80 <xTaskGetSchedulerState>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <xQueueGenericSend+0x98>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d101      	bne.n	8005db0 <xQueueGenericSend+0x9c>
 8005dac:	2301      	movs	r3, #1
 8005dae:	e000      	b.n	8005db2 <xQueueGenericSend+0x9e>
 8005db0:	2300      	movs	r3, #0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <xQueueGenericSend+0xb6>
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	e7fe      	b.n	8005dc8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dca:	f002 fec7 	bl	8008b5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d302      	bcc.n	8005de0 <xQueueGenericSend+0xcc>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d129      	bne.n	8005e34 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005de0:	683a      	ldr	r2, [r7, #0]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005de6:	f000 fc82 	bl	80066ee <prvCopyDataToQueue>
 8005dea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d010      	beq.n	8005e16 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	3324      	adds	r3, #36	; 0x24
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f001 fd27 	bl	800784c <xTaskRemoveFromEventList>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d013      	beq.n	8005e2c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e04:	4b3f      	ldr	r3, [pc, #252]	; (8005f04 <xQueueGenericSend+0x1f0>)
 8005e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	e00a      	b.n	8005e2c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d007      	beq.n	8005e2c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e1c:	4b39      	ldr	r3, [pc, #228]	; (8005f04 <xQueueGenericSend+0x1f0>)
 8005e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e2c:	f002 fec4 	bl	8008bb8 <vPortExitCritical>
				return pdPASS;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e063      	b.n	8005efc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d103      	bne.n	8005e42 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e3a:	f002 febd 	bl	8008bb8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e05c      	b.n	8005efc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d106      	bne.n	8005e56 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e48:	f107 0314 	add.w	r3, r7, #20
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f001 fd5f 	bl	8007910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e52:	2301      	movs	r3, #1
 8005e54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e56:	f002 feaf 	bl	8008bb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e5a:	f001 fa1d 	bl	8007298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e5e:	f002 fe7d 	bl	8008b5c <vPortEnterCritical>
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e68:	b25b      	sxtb	r3, r3
 8005e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6e:	d103      	bne.n	8005e78 <xQueueGenericSend+0x164>
 8005e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e7e:	b25b      	sxtb	r3, r3
 8005e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e84:	d103      	bne.n	8005e8e <xQueueGenericSend+0x17a>
 8005e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e8e:	f002 fe93 	bl	8008bb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e92:	1d3a      	adds	r2, r7, #4
 8005e94:	f107 0314 	add.w	r3, r7, #20
 8005e98:	4611      	mov	r1, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 fd4e 	bl	800793c <xTaskCheckForTimeOut>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d124      	bne.n	8005ef0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ea6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ea8:	f000 fd19 	bl	80068de <prvIsQueueFull>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d018      	beq.n	8005ee4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	3310      	adds	r3, #16
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f001 fc78 	bl	80077b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ec2:	f000 fca4 	bl	800680e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ec6:	f001 f9f5 	bl	80072b4 <xTaskResumeAll>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f47f af7c 	bne.w	8005dca <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005ed2:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <xQueueGenericSend+0x1f0>)
 8005ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed8:	601a      	str	r2, [r3, #0]
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	e772      	b.n	8005dca <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ee6:	f000 fc92 	bl	800680e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005eea:	f001 f9e3 	bl	80072b4 <xTaskResumeAll>
 8005eee:	e76c      	b.n	8005dca <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ef2:	f000 fc8c 	bl	800680e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ef6:	f001 f9dd 	bl	80072b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005efa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3738      	adds	r7, #56	; 0x38
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	e000ed04 	.word	0xe000ed04

08005f08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08e      	sub	sp, #56	; 0x38
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d109      	bne.n	8005f34 <xQueueGenericSendFromISR+0x2c>
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24
 8005f32:	e7fe      	b.n	8005f32 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d103      	bne.n	8005f42 <xQueueGenericSendFromISR+0x3a>
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d101      	bne.n	8005f46 <xQueueGenericSendFromISR+0x3e>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e000      	b.n	8005f48 <xQueueGenericSendFromISR+0x40>
 8005f46:	2300      	movs	r3, #0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d109      	bne.n	8005f60 <xQueueGenericSendFromISR+0x58>
 8005f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f50:	f383 8811 	msr	BASEPRI, r3
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	f3bf 8f4f 	dsb	sy
 8005f5c:	623b      	str	r3, [r7, #32]
 8005f5e:	e7fe      	b.n	8005f5e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2b02      	cmp	r3, #2
 8005f64:	d103      	bne.n	8005f6e <xQueueGenericSendFromISR+0x66>
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d101      	bne.n	8005f72 <xQueueGenericSendFromISR+0x6a>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <xQueueGenericSendFromISR+0x6c>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <xQueueGenericSendFromISR+0x84>
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	e7fe      	b.n	8005f8a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f8c:	f002 fec2 	bl	8008d14 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f90:	f3ef 8211 	mrs	r2, BASEPRI
 8005f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	61ba      	str	r2, [r7, #24]
 8005fa6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005fa8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d302      	bcc.n	8005fbe <xQueueGenericSendFromISR+0xb6>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d12c      	bne.n	8006018 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	68b9      	ldr	r1, [r7, #8]
 8005fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fce:	f000 fb8e 	bl	80066ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005fd2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fda:	d112      	bne.n	8006002 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d016      	beq.n	8006012 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	3324      	adds	r3, #36	; 0x24
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f001 fc2f 	bl	800784c <xTaskRemoveFromEventList>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00e      	beq.n	8006012 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00b      	beq.n	8006012 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	e007      	b.n	8006012 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006002:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006006:	3301      	adds	r3, #1
 8006008:	b2db      	uxtb	r3, r3
 800600a:	b25a      	sxtb	r2, r3
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006012:	2301      	movs	r3, #1
 8006014:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006016:	e001      	b.n	800601c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006018:	2300      	movs	r3, #0
 800601a:	637b      	str	r3, [r7, #52]	; 0x34
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006028:	4618      	mov	r0, r3
 800602a:	3738      	adds	r7, #56	; 0x38
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08e      	sub	sp, #56	; 0x38
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	2b00      	cmp	r3, #0
 8006042:	d109      	bne.n	8006058 <xQueueGiveFromISR+0x28>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	623b      	str	r3, [r7, #32]
 8006056:	e7fe      	b.n	8006056 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605c:	2b00      	cmp	r3, #0
 800605e:	d009      	beq.n	8006074 <xQueueGiveFromISR+0x44>
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	61fb      	str	r3, [r7, #28]
 8006072:	e7fe      	b.n	8006072 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <xQueueGiveFromISR+0x54>
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d101      	bne.n	8006088 <xQueueGiveFromISR+0x58>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <xQueueGiveFromISR+0x5a>
 8006088:	2300      	movs	r3, #0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d109      	bne.n	80060a2 <xQueueGiveFromISR+0x72>
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	61bb      	str	r3, [r7, #24]
 80060a0:	e7fe      	b.n	80060a0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060a2:	f002 fe37 	bl	8008d14 <vPortValidateInterruptPriority>
	__asm volatile
 80060a6:	f3ef 8211 	mrs	r2, BASEPRI
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	617a      	str	r2, [r7, #20]
 80060bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80060be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80060c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d22b      	bcs.n	800612a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80060e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d112      	bne.n	8006114 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d016      	beq.n	8006124 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	3324      	adds	r3, #36	; 0x24
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 fba6 	bl	800784c <xTaskRemoveFromEventList>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00e      	beq.n	8006124 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00b      	beq.n	8006124 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2201      	movs	r2, #1
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e007      	b.n	8006124 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006118:	3301      	adds	r3, #1
 800611a:	b2db      	uxtb	r3, r3
 800611c:	b25a      	sxtb	r2, r3
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006124:	2301      	movs	r3, #1
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
 8006128:	e001      	b.n	800612e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800612a:	2300      	movs	r3, #0
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800613a:	4618      	mov	r0, r3
 800613c:	3738      	adds	r7, #56	; 0x38
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08c      	sub	sp, #48	; 0x30
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006150:	2300      	movs	r3, #0
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615a:	2b00      	cmp	r3, #0
 800615c:	d109      	bne.n	8006172 <xQueueReceive+0x2e>
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	623b      	str	r3, [r7, #32]
 8006170:	e7fe      	b.n	8006170 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d103      	bne.n	8006180 <xQueueReceive+0x3c>
 8006178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <xQueueReceive+0x40>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <xQueueReceive+0x42>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d109      	bne.n	800619e <xQueueReceive+0x5a>
 800618a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	61fb      	str	r3, [r7, #28]
 800619c:	e7fe      	b.n	800619c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800619e:	f001 fdef 	bl	8007d80 <xTaskGetSchedulerState>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d102      	bne.n	80061ae <xQueueReceive+0x6a>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <xQueueReceive+0x6e>
 80061ae:	2301      	movs	r3, #1
 80061b0:	e000      	b.n	80061b4 <xQueueReceive+0x70>
 80061b2:	2300      	movs	r3, #0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d109      	bne.n	80061cc <xQueueReceive+0x88>
 80061b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	61bb      	str	r3, [r7, #24]
 80061ca:	e7fe      	b.n	80061ca <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80061cc:	f002 fcc6 	bl	8008b5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01f      	beq.n	800621c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e0:	f000 faef 	bl	80067c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	1e5a      	subs	r2, r3, #1
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00f      	beq.n	8006214 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f6:	3310      	adds	r3, #16
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 fb27 	bl	800784c <xTaskRemoveFromEventList>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d007      	beq.n	8006214 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006204:	4b3c      	ldr	r3, [pc, #240]	; (80062f8 <xQueueReceive+0x1b4>)
 8006206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006214:	f002 fcd0 	bl	8008bb8 <vPortExitCritical>
				return pdPASS;
 8006218:	2301      	movs	r3, #1
 800621a:	e069      	b.n	80062f0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d103      	bne.n	800622a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006222:	f002 fcc9 	bl	8008bb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006226:	2300      	movs	r3, #0
 8006228:	e062      	b.n	80062f0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800622a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d106      	bne.n	800623e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006230:	f107 0310 	add.w	r3, r7, #16
 8006234:	4618      	mov	r0, r3
 8006236:	f001 fb6b 	bl	8007910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800623a:	2301      	movs	r3, #1
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800623e:	f002 fcbb 	bl	8008bb8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006242:	f001 f829 	bl	8007298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006246:	f002 fc89 	bl	8008b5c <vPortEnterCritical>
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006250:	b25b      	sxtb	r3, r3
 8006252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006256:	d103      	bne.n	8006260 <xQueueReceive+0x11c>
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006266:	b25b      	sxtb	r3, r3
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d103      	bne.n	8006276 <xQueueReceive+0x132>
 800626e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006270:	2200      	movs	r2, #0
 8006272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006276:	f002 fc9f 	bl	8008bb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800627a:	1d3a      	adds	r2, r7, #4
 800627c:	f107 0310 	add.w	r3, r7, #16
 8006280:	4611      	mov	r1, r2
 8006282:	4618      	mov	r0, r3
 8006284:	f001 fb5a 	bl	800793c <xTaskCheckForTimeOut>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d123      	bne.n	80062d6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800628e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006290:	f000 fb0f 	bl	80068b2 <prvIsQueueEmpty>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d017      	beq.n	80062ca <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	3324      	adds	r3, #36	; 0x24
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	4611      	mov	r1, r2
 80062a2:	4618      	mov	r0, r3
 80062a4:	f001 fa84 	bl	80077b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062aa:	f000 fab0 	bl	800680e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062ae:	f001 f801 	bl	80072b4 <xTaskResumeAll>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d189      	bne.n	80061cc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80062b8:	4b0f      	ldr	r3, [pc, #60]	; (80062f8 <xQueueReceive+0x1b4>)
 80062ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	f3bf 8f6f 	isb	sy
 80062c8:	e780      	b.n	80061cc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80062ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062cc:	f000 fa9f 	bl	800680e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062d0:	f000 fff0 	bl	80072b4 <xTaskResumeAll>
 80062d4:	e77a      	b.n	80061cc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80062d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d8:	f000 fa99 	bl	800680e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062dc:	f000 ffea 	bl	80072b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062e2:	f000 fae6 	bl	80068b2 <prvIsQueueEmpty>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f43f af6f 	beq.w	80061cc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3730      	adds	r7, #48	; 0x30
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	e000ed04 	.word	0xe000ed04

080062fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b08e      	sub	sp, #56	; 0x38
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006306:	2300      	movs	r3, #0
 8006308:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800630e:	2300      	movs	r3, #0
 8006310:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	2b00      	cmp	r3, #0
 8006316:	d109      	bne.n	800632c <xQueueSemaphoreTake+0x30>
 8006318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	623b      	str	r3, [r7, #32]
 800632a:	e7fe      	b.n	800632a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d009      	beq.n	8006348 <xQueueSemaphoreTake+0x4c>
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	61fb      	str	r3, [r7, #28]
 8006346:	e7fe      	b.n	8006346 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006348:	f001 fd1a 	bl	8007d80 <xTaskGetSchedulerState>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d102      	bne.n	8006358 <xQueueSemaphoreTake+0x5c>
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <xQueueSemaphoreTake+0x60>
 8006358:	2301      	movs	r3, #1
 800635a:	e000      	b.n	800635e <xQueueSemaphoreTake+0x62>
 800635c:	2300      	movs	r3, #0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d109      	bne.n	8006376 <xQueueSemaphoreTake+0x7a>
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	61bb      	str	r3, [r7, #24]
 8006374:	e7fe      	b.n	8006374 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006376:	f002 fbf1 	bl	8008b5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	2b00      	cmp	r3, #0
 8006384:	d024      	beq.n	80063d0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	1e5a      	subs	r2, r3, #1
 800638a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d104      	bne.n	80063a0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006396:	f001 ff0f 	bl	80081b8 <pvTaskIncrementMutexHeldCount>
 800639a:	4602      	mov	r2, r0
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00f      	beq.n	80063c8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	3310      	adds	r3, #16
 80063ac:	4618      	mov	r0, r3
 80063ae:	f001 fa4d 	bl	800784c <xTaskRemoveFromEventList>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d007      	beq.n	80063c8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063b8:	4b53      	ldr	r3, [pc, #332]	; (8006508 <xQueueSemaphoreTake+0x20c>)
 80063ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063c8:	f002 fbf6 	bl	8008bb8 <vPortExitCritical>
				return pdPASS;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e096      	b.n	80064fe <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d110      	bne.n	80063f8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80063d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <xQueueSemaphoreTake+0xf4>
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	e7fe      	b.n	80063ee <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80063f0:	f002 fbe2 	bl	8008bb8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063f4:	2300      	movs	r3, #0
 80063f6:	e082      	b.n	80064fe <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063fe:	f107 030c 	add.w	r3, r7, #12
 8006402:	4618      	mov	r0, r3
 8006404:	f001 fa84 	bl	8007910 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006408:	2301      	movs	r3, #1
 800640a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800640c:	f002 fbd4 	bl	8008bb8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006410:	f000 ff42 	bl	8007298 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006414:	f002 fba2 	bl	8008b5c <vPortEnterCritical>
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800641e:	b25b      	sxtb	r3, r3
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006424:	d103      	bne.n	800642e <xQueueSemaphoreTake+0x132>
 8006426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006434:	b25b      	sxtb	r3, r3
 8006436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643a:	d103      	bne.n	8006444 <xQueueSemaphoreTake+0x148>
 800643c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006444:	f002 fbb8 	bl	8008bb8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006448:	463a      	mov	r2, r7
 800644a:	f107 030c 	add.w	r3, r7, #12
 800644e:	4611      	mov	r1, r2
 8006450:	4618      	mov	r0, r3
 8006452:	f001 fa73 	bl	800793c <xTaskCheckForTimeOut>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d132      	bne.n	80064c2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800645c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800645e:	f000 fa28 	bl	80068b2 <prvIsQueueEmpty>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d026      	beq.n	80064b6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d109      	bne.n	8006484 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006470:	f002 fb74 	bl	8008b5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	4618      	mov	r0, r3
 800647a:	f001 fc9f 	bl	8007dbc <xTaskPriorityInherit>
 800647e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006480:	f002 fb9a 	bl	8008bb8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	3324      	adds	r3, #36	; 0x24
 8006488:	683a      	ldr	r2, [r7, #0]
 800648a:	4611      	mov	r1, r2
 800648c:	4618      	mov	r0, r3
 800648e:	f001 f98f 	bl	80077b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006492:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006494:	f000 f9bb 	bl	800680e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006498:	f000 ff0c 	bl	80072b4 <xTaskResumeAll>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	f47f af69 	bne.w	8006376 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80064a4:	4b18      	ldr	r3, [pc, #96]	; (8006508 <xQueueSemaphoreTake+0x20c>)
 80064a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064aa:	601a      	str	r2, [r3, #0]
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	e75f      	b.n	8006376 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80064b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064b8:	f000 f9a9 	bl	800680e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064bc:	f000 fefa 	bl	80072b4 <xTaskResumeAll>
 80064c0:	e759      	b.n	8006376 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80064c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064c4:	f000 f9a3 	bl	800680e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064c8:	f000 fef4 	bl	80072b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ce:	f000 f9f0 	bl	80068b2 <prvIsQueueEmpty>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f43f af4e 	beq.w	8006376 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00d      	beq.n	80064fc <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80064e0:	f002 fb3c 	bl	8008b5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80064e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064e6:	f000 f8ea 	bl	80066be <prvGetDisinheritPriorityAfterTimeout>
 80064ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064f2:	4618      	mov	r0, r3
 80064f4:	f001 fd36 	bl	8007f64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80064f8:	f002 fb5e 	bl	8008bb8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80064fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3738      	adds	r7, #56	; 0x38
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	e000ed04 	.word	0xe000ed04

0800650c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b08e      	sub	sp, #56	; 0x38
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	2b00      	cmp	r3, #0
 8006520:	d109      	bne.n	8006536 <xQueueReceiveFromISR+0x2a>
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	623b      	str	r3, [r7, #32]
 8006534:	e7fe      	b.n	8006534 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d103      	bne.n	8006544 <xQueueReceiveFromISR+0x38>
 800653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	2b00      	cmp	r3, #0
 8006542:	d101      	bne.n	8006548 <xQueueReceiveFromISR+0x3c>
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <xQueueReceiveFromISR+0x3e>
 8006548:	2300      	movs	r3, #0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d109      	bne.n	8006562 <xQueueReceiveFromISR+0x56>
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	61fb      	str	r3, [r7, #28]
 8006560:	e7fe      	b.n	8006560 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006562:	f002 fbd7 	bl	8008d14 <vPortValidateInterruptPriority>
	__asm volatile
 8006566:	f3ef 8211 	mrs	r2, BASEPRI
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	61ba      	str	r2, [r7, #24]
 800657c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800657e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006586:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658a:	2b00      	cmp	r3, #0
 800658c:	d02f      	beq.n	80065ee <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006598:	68b9      	ldr	r1, [r7, #8]
 800659a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800659c:	f000 f911 	bl	80067c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	1e5a      	subs	r2, r3, #1
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80065a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b0:	d112      	bne.n	80065d8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d016      	beq.n	80065e8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	3310      	adds	r3, #16
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 f944 	bl	800784c <xTaskRemoveFromEventList>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00e      	beq.n	80065e8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00b      	beq.n	80065e8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	e007      	b.n	80065e8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80065d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065dc:	3301      	adds	r3, #1
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	b25a      	sxtb	r2, r3
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80065e8:	2301      	movs	r3, #1
 80065ea:	637b      	str	r3, [r7, #52]	; 0x34
 80065ec:	e001      	b.n	80065f2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	637b      	str	r3, [r7, #52]	; 0x34
 80065f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3738      	adds	r7, #56	; 0x38
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d109      	bne.n	8006628 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8006614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	60bb      	str	r3, [r7, #8]
 8006626:	e7fe      	b.n	8006626 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8006628:	f002 fa98 	bl	8008b5c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006632:	f002 fac1 	bl	8008bb8 <vPortExitCritical>

	return uxReturn;
 8006636:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d109      	bne.n	8006666 <uxQueueMessagesWaitingFromISR+0x26>
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	e7fe      	b.n	8006664 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800666c:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800666e:	4618      	mov	r0, r3
 8006670:	371c      	adds	r7, #28
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b084      	sub	sp, #16
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d109      	bne.n	80066a0 <vQueueDelete+0x26>
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	60bb      	str	r3, [r7, #8]
 800669e:	e7fe      	b.n	800669e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 f95d 	bl	8006960 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d102      	bne.n	80066b6 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f002 fc2f 	bl	8008f14 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80066b6:	bf00      	nop
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d006      	beq.n	80066dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80066d8:	60fb      	str	r3, [r7, #12]
 80066da:	e001      	b.n	80066e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80066e0:	68fb      	ldr	r3, [r7, #12]
	}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b086      	sub	sp, #24
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006702:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10d      	bne.n	8006728 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d14d      	bne.n	80067b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	4618      	mov	r0, r3
 800671a:	f001 fbb7 	bl	8007e8c <xTaskPriorityDisinherit>
 800671e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	609a      	str	r2, [r3, #8]
 8006726:	e043      	b.n	80067b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d119      	bne.n	8006762 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6858      	ldr	r0, [r3, #4]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006736:	461a      	mov	r2, r3
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	f012 feea 	bl	8019512 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006746:	441a      	add	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	429a      	cmp	r2, r3
 8006756:	d32b      	bcc.n	80067b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	605a      	str	r2, [r3, #4]
 8006760:	e026      	b.n	80067b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68d8      	ldr	r0, [r3, #12]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	461a      	mov	r2, r3
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	f012 fed0 	bl	8019512 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	425b      	negs	r3, r3
 800677c:	441a      	add	r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	68da      	ldr	r2, [r3, #12]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d207      	bcs.n	800679e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006796:	425b      	negs	r3, r3
 8006798:	441a      	add	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d105      	bne.n	80067b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1c5a      	adds	r2, r3, #1
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80067b8:	697b      	ldr	r3, [r7, #20]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d018      	beq.n	8006806 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	441a      	add	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d303      	bcc.n	80067f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	68d9      	ldr	r1, [r3, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	461a      	mov	r2, r3
 8006800:	6838      	ldr	r0, [r7, #0]
 8006802:	f012 fe86 	bl	8019512 <memcpy>
	}
}
 8006806:	bf00      	nop
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006816:	f002 f9a1 	bl	8008b5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006820:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006822:	e011      	b.n	8006848 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d012      	beq.n	8006852 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3324      	adds	r3, #36	; 0x24
 8006830:	4618      	mov	r0, r3
 8006832:	f001 f80b 	bl	800784c <xTaskRemoveFromEventList>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800683c:	f001 f8de 	bl	80079fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
 8006842:	3b01      	subs	r3, #1
 8006844:	b2db      	uxtb	r3, r3
 8006846:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800684c:	2b00      	cmp	r3, #0
 800684e:	dce9      	bgt.n	8006824 <prvUnlockQueue+0x16>
 8006850:	e000      	b.n	8006854 <prvUnlockQueue+0x46>
					break;
 8006852:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	22ff      	movs	r2, #255	; 0xff
 8006858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800685c:	f002 f9ac 	bl	8008bb8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006860:	f002 f97c 	bl	8008b5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800686a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800686c:	e011      	b.n	8006892 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d012      	beq.n	800689c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3310      	adds	r3, #16
 800687a:	4618      	mov	r0, r3
 800687c:	f000 ffe6 	bl	800784c <xTaskRemoveFromEventList>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006886:	f001 f8b9 	bl	80079fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800688a:	7bbb      	ldrb	r3, [r7, #14]
 800688c:	3b01      	subs	r3, #1
 800688e:	b2db      	uxtb	r3, r3
 8006890:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006892:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006896:	2b00      	cmp	r3, #0
 8006898:	dce9      	bgt.n	800686e <prvUnlockQueue+0x60>
 800689a:	e000      	b.n	800689e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800689c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	22ff      	movs	r2, #255	; 0xff
 80068a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068a6:	f002 f987 	bl	8008bb8 <vPortExitCritical>
}
 80068aa:	bf00      	nop
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068ba:	f002 f94f 	bl	8008b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068c6:	2301      	movs	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	e001      	b.n	80068d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068d0:	f002 f972 	bl	8008bb8 <vPortExitCritical>

	return xReturn;
 80068d4:	68fb      	ldr	r3, [r7, #12]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068e6:	f002 f939 	bl	8008b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d102      	bne.n	80068fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068f6:	2301      	movs	r3, #1
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	e001      	b.n	8006900 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006900:	f002 f95a 	bl	8008bb8 <vPortExitCritical>

	return xReturn;
 8006904:	68fb      	ldr	r3, [r7, #12]
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800691a:	2300      	movs	r3, #0
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	e014      	b.n	800694a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006920:	4a0e      	ldr	r2, [pc, #56]	; (800695c <vQueueAddToRegistry+0x4c>)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10b      	bne.n	8006944 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800692c:	490b      	ldr	r1, [pc, #44]	; (800695c <vQueueAddToRegistry+0x4c>)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006936:	4a09      	ldr	r2, [pc, #36]	; (800695c <vQueueAddToRegistry+0x4c>)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	4413      	add	r3, r2
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006942:	e005      	b.n	8006950 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b07      	cmp	r3, #7
 800694e:	d9e7      	bls.n	8006920 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006950:	bf00      	nop
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	2001369c 	.word	0x2001369c

08006960 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006968:	2300      	movs	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	e016      	b.n	800699c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800696e:	4a10      	ldr	r2, [pc, #64]	; (80069b0 <vQueueUnregisterQueue+0x50>)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	4413      	add	r3, r2
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	429a      	cmp	r2, r3
 800697c:	d10b      	bne.n	8006996 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800697e:	4a0c      	ldr	r2, [pc, #48]	; (80069b0 <vQueueUnregisterQueue+0x50>)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2100      	movs	r1, #0
 8006984:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006988:	4a09      	ldr	r2, [pc, #36]	; (80069b0 <vQueueUnregisterQueue+0x50>)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	4413      	add	r3, r2
 8006990:	2200      	movs	r2, #0
 8006992:	605a      	str	r2, [r3, #4]
				break;
 8006994:	e005      	b.n	80069a2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3301      	adds	r3, #1
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b07      	cmp	r3, #7
 80069a0:	d9e5      	bls.n	800696e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	2001369c 	.word	0x2001369c

080069b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069c4:	f002 f8ca 	bl	8008b5c <vPortEnterCritical>
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069ce:	b25b      	sxtb	r3, r3
 80069d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d4:	d103      	bne.n	80069de <vQueueWaitForMessageRestricted+0x2a>
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069e4:	b25b      	sxtb	r3, r3
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	d103      	bne.n	80069f4 <vQueueWaitForMessageRestricted+0x40>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069f4:	f002 f8e0 	bl	8008bb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d106      	bne.n	8006a0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	3324      	adds	r3, #36	; 0x24
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	68b9      	ldr	r1, [r7, #8]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fef5 	bl	80077f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a0e:	6978      	ldr	r0, [r7, #20]
 8006a10:	f7ff fefd 	bl	800680e <prvUnlockQueue>
	}
 8006a14:	bf00      	nop
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08e      	sub	sp, #56	; 0x38
 8006a20:	af04      	add	r7, sp, #16
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
 8006a28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d109      	bne.n	8006a44 <xTaskCreateStatic+0x28>
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	623b      	str	r3, [r7, #32]
 8006a42:	e7fe      	b.n	8006a42 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <xTaskCreateStatic+0x42>
 8006a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	61fb      	str	r3, [r7, #28]
 8006a5c:	e7fe      	b.n	8006a5c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a5e:	2360      	movs	r3, #96	; 0x60
 8006a60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	2b60      	cmp	r3, #96	; 0x60
 8006a66:	d009      	beq.n	8006a7c <xTaskCreateStatic+0x60>
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	e7fe      	b.n	8006a7a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01e      	beq.n	8006ac2 <xTaskCreateStatic+0xa6>
 8006a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01b      	beq.n	8006ac2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9303      	str	r3, [sp, #12]
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	9302      	str	r3, [sp, #8]
 8006aa4:	f107 0314 	add.w	r3, r7, #20
 8006aa8:	9301      	str	r3, [sp, #4]
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f850 	bl	8006b5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006abc:	f000 f8de 	bl	8006c7c <prvAddNewTaskToReadyList>
 8006ac0:	e001      	b.n	8006ac6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ac6:	697b      	ldr	r3, [r7, #20]
	}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3728      	adds	r7, #40	; 0x28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08c      	sub	sp, #48	; 0x30
 8006ad4:	af04      	add	r7, sp, #16
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	4613      	mov	r3, r2
 8006ade:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ae0:	88fb      	ldrh	r3, [r7, #6]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f002 f953 	bl	8008d90 <pvPortMalloc>
 8006aea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00e      	beq.n	8006b10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006af2:	2060      	movs	r0, #96	; 0x60
 8006af4:	f002 f94c 	bl	8008d90 <pvPortMalloc>
 8006af8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	631a      	str	r2, [r3, #48]	; 0x30
 8006b06:	e005      	b.n	8006b14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b08:	6978      	ldr	r0, [r7, #20]
 8006b0a:	f002 fa03 	bl	8008f14 <vPortFree>
 8006b0e:	e001      	b.n	8006b14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d017      	beq.n	8006b4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b22:	88fa      	ldrh	r2, [r7, #6]
 8006b24:	2300      	movs	r3, #0
 8006b26:	9303      	str	r3, [sp, #12]
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	9302      	str	r3, [sp, #8]
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f80e 	bl	8006b5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b3e:	69f8      	ldr	r0, [r7, #28]
 8006b40:	f000 f89c 	bl	8006c7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b44:	2301      	movs	r3, #1
 8006b46:	61bb      	str	r3, [r7, #24]
 8006b48:	e002      	b.n	8006b50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b50:	69bb      	ldr	r3, [r7, #24]
	}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3720      	adds	r7, #32
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b088      	sub	sp, #32
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	607a      	str	r2, [r7, #4]
 8006b66:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	461a      	mov	r2, r3
 8006b72:	21a5      	movs	r1, #165	; 0xa5
 8006b74:	f012 fcf1 	bl	801955a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b82:	3b01      	subs	r3, #1
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	f023 0307 	bic.w	r3, r3, #7
 8006b90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d009      	beq.n	8006bb0 <prvInitialiseNewTask+0x56>
 8006b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba0:	f383 8811 	msr	BASEPRI, r3
 8006ba4:	f3bf 8f6f 	isb	sy
 8006ba8:	f3bf 8f4f 	dsb	sy
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	e7fe      	b.n	8006bae <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01f      	beq.n	8006bf6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61fb      	str	r3, [r7, #28]
 8006bba:	e012      	b.n	8006be2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bbc:	68ba      	ldr	r2, [r7, #8]
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	7819      	ldrb	r1, [r3, #0]
 8006bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	3334      	adds	r3, #52	; 0x34
 8006bcc:	460a      	mov	r2, r1
 8006bce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d006      	beq.n	8006bea <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	3301      	adds	r3, #1
 8006be0:	61fb      	str	r3, [r7, #28]
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	2b0f      	cmp	r3, #15
 8006be6:	d9e9      	bls.n	8006bbc <prvInitialiseNewTask+0x62>
 8006be8:	e000      	b.n	8006bec <prvInitialiseNewTask+0x92>
			{
				break;
 8006bea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bf4:	e003      	b.n	8006bfe <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	2b37      	cmp	r3, #55	; 0x37
 8006c02:	d901      	bls.n	8006c08 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c04:	2337      	movs	r3, #55	; 0x37
 8006c06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	2200      	movs	r2, #0
 8006c18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe fd8c 	bl	800573c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c26:	3318      	adds	r3, #24
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fe fd87 	bl	800573c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	2200      	movs	r2, #0
 8006c48:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c58:	683a      	ldr	r2, [r7, #0]
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	69b8      	ldr	r0, [r7, #24]
 8006c5e:	f001 fe59 	bl	8008914 <pxPortInitialiseStack>
 8006c62:	4602      	mov	r2, r0
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c72:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c74:	bf00      	nop
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c84:	f001 ff6a 	bl	8008b5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c88:	4b2d      	ldr	r3, [pc, #180]	; (8006d40 <prvAddNewTaskToReadyList+0xc4>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	4a2c      	ldr	r2, [pc, #176]	; (8006d40 <prvAddNewTaskToReadyList+0xc4>)
 8006c90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c92:	4b2c      	ldr	r3, [pc, #176]	; (8006d44 <prvAddNewTaskToReadyList+0xc8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d109      	bne.n	8006cae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c9a:	4a2a      	ldr	r2, [pc, #168]	; (8006d44 <prvAddNewTaskToReadyList+0xc8>)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ca0:	4b27      	ldr	r3, [pc, #156]	; (8006d40 <prvAddNewTaskToReadyList+0xc4>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d110      	bne.n	8006cca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ca8:	f000 fecc 	bl	8007a44 <prvInitialiseTaskLists>
 8006cac:	e00d      	b.n	8006cca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cae:	4b26      	ldr	r3, [pc, #152]	; (8006d48 <prvAddNewTaskToReadyList+0xcc>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d109      	bne.n	8006cca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cb6:	4b23      	ldr	r3, [pc, #140]	; (8006d44 <prvAddNewTaskToReadyList+0xc8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d802      	bhi.n	8006cca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cc4:	4a1f      	ldr	r2, [pc, #124]	; (8006d44 <prvAddNewTaskToReadyList+0xc8>)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cca:	4b20      	ldr	r3, [pc, #128]	; (8006d4c <prvAddNewTaskToReadyList+0xd0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	4a1e      	ldr	r2, [pc, #120]	; (8006d4c <prvAddNewTaskToReadyList+0xd0>)
 8006cd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cd4:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <prvAddNewTaskToReadyList+0xd0>)
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce0:	4b1b      	ldr	r3, [pc, #108]	; (8006d50 <prvAddNewTaskToReadyList+0xd4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d903      	bls.n	8006cf0 <prvAddNewTaskToReadyList+0x74>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cec:	4a18      	ldr	r2, [pc, #96]	; (8006d50 <prvAddNewTaskToReadyList+0xd4>)
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4413      	add	r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4a15      	ldr	r2, [pc, #84]	; (8006d54 <prvAddNewTaskToReadyList+0xd8>)
 8006cfe:	441a      	add	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3304      	adds	r3, #4
 8006d04:	4619      	mov	r1, r3
 8006d06:	4610      	mov	r0, r2
 8006d08:	f7fe fd25 	bl	8005756 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d0c:	f001 ff54 	bl	8008bb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d10:	4b0d      	ldr	r3, [pc, #52]	; (8006d48 <prvAddNewTaskToReadyList+0xcc>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00e      	beq.n	8006d36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d18:	4b0a      	ldr	r3, [pc, #40]	; (8006d44 <prvAddNewTaskToReadyList+0xc8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d207      	bcs.n	8006d36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d26:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <prvAddNewTaskToReadyList+0xdc>)
 8006d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000c44 	.word	0x20000c44
 8006d44:	20000770 	.word	0x20000770
 8006d48:	20000c50 	.word	0x20000c50
 8006d4c:	20000c60 	.word	0x20000c60
 8006d50:	20000c4c 	.word	0x20000c4c
 8006d54:	20000774 	.word	0x20000774
 8006d58:	e000ed04 	.word	0xe000ed04

08006d5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d016      	beq.n	8006d9c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d6e:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <vTaskDelay+0x60>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d009      	beq.n	8006d8a <vTaskDelay+0x2e>
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	60bb      	str	r3, [r7, #8]
 8006d88:	e7fe      	b.n	8006d88 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006d8a:	f000 fa85 	bl	8007298 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d8e:	2100      	movs	r1, #0
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 fa25 	bl	80081e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d96:	f000 fa8d 	bl	80072b4 <xTaskResumeAll>
 8006d9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d107      	bne.n	8006db2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006da2:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <vTaskDelay+0x64>)
 8006da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006db2:	bf00      	nop
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000c6c 	.word	0x20000c6c
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d109      	bne.n	8006dea <eTaskGetState+0x26>
 8006dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	60bb      	str	r3, [r7, #8]
 8006de8:	e7fe      	b.n	8006de8 <eTaskGetState+0x24>

		if( pxTCB == pxCurrentTCB )
 8006dea:	4b24      	ldr	r3, [pc, #144]	; (8006e7c <eTaskGetState+0xb8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d102      	bne.n	8006dfa <eTaskGetState+0x36>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006df4:	2300      	movs	r3, #0
 8006df6:	77fb      	strb	r3, [r7, #31]
 8006df8:	e03a      	b.n	8006e70 <eTaskGetState+0xac>
		}
		else
		{
			taskENTER_CRITICAL();
 8006dfa:	f001 feaf 	bl	8008b5c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006e04:	4b1e      	ldr	r3, [pc, #120]	; (8006e80 <eTaskGetState+0xbc>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8006e0a:	4b1e      	ldr	r3, [pc, #120]	; (8006e84 <eTaskGetState+0xc0>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006e10:	f001 fed2 	bl	8008bb8 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d003      	beq.n	8006e24 <eTaskGetState+0x60>
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d102      	bne.n	8006e2a <eTaskGetState+0x66>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006e24:	2302      	movs	r3, #2
 8006e26:	77fb      	strb	r3, [r7, #31]
 8006e28:	e022      	b.n	8006e70 <eTaskGetState+0xac>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	4a16      	ldr	r2, [pc, #88]	; (8006e88 <eTaskGetState+0xc4>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d112      	bne.n	8006e58 <eTaskGetState+0x94>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10b      	bne.n	8006e52 <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006e3a:	69bb      	ldr	r3, [r7, #24]
 8006e3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	d102      	bne.n	8006e4c <eTaskGetState+0x88>
							{
								eReturn = eBlocked;
 8006e46:	2302      	movs	r3, #2
 8006e48:	77fb      	strb	r3, [r7, #31]
 8006e4a:	e011      	b.n	8006e70 <eTaskGetState+0xac>
							}
							else
							{
								eReturn = eSuspended;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	77fb      	strb	r3, [r7, #31]
 8006e50:	e00e      	b.n	8006e70 <eTaskGetState+0xac>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8006e52:	2302      	movs	r3, #2
 8006e54:	77fb      	strb	r3, [r7, #31]
 8006e56:	e00b      	b.n	8006e70 <eTaskGetState+0xac>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	4a0c      	ldr	r2, [pc, #48]	; (8006e8c <eTaskGetState+0xc8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d002      	beq.n	8006e66 <eTaskGetState+0xa2>
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d102      	bne.n	8006e6c <eTaskGetState+0xa8>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006e66:	2304      	movs	r3, #4
 8006e68:	77fb      	strb	r3, [r7, #31]
 8006e6a:	e001      	b.n	8006e70 <eTaskGetState+0xac>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8006e70:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006e72:	4618      	mov	r0, r3
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	20000770 	.word	0x20000770
 8006e80:	20000bfc 	.word	0x20000bfc
 8006e84:	20000c00 	.word	0x20000c00
 8006e88:	20000c30 	.word	0x20000c30
 8006e8c:	20000c18 	.word	0x20000c18

08006e90 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	2b37      	cmp	r3, #55	; 0x37
 8006ea2:	d909      	bls.n	8006eb8 <vTaskPrioritySet+0x28>
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	60fb      	str	r3, [r7, #12]
 8006eb6:	e7fe      	b.n	8006eb6 <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b37      	cmp	r3, #55	; 0x37
 8006ebc:	d901      	bls.n	8006ec2 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ebe:	2337      	movs	r3, #55	; 0x37
 8006ec0:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8006ec2:	f001 fe4b 	bl	8008b5c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <vTaskPrioritySet+0x42>
 8006ecc:	4b3a      	ldr	r3, [pc, #232]	; (8006fb8 <vTaskPrioritySet+0x128>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	e000      	b.n	8006ed4 <vTaskPrioritySet+0x44>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eda:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d063      	beq.n	8006fac <vTaskPrioritySet+0x11c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d90d      	bls.n	8006f08 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8006eec:	4b32      	ldr	r3, [pc, #200]	; (8006fb8 <vTaskPrioritySet+0x128>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d00f      	beq.n	8006f16 <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8006ef6:	4b30      	ldr	r3, [pc, #192]	; (8006fb8 <vTaskPrioritySet+0x128>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d309      	bcc.n	8006f16 <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 8006f02:	2301      	movs	r3, #1
 8006f04:	61fb      	str	r3, [r7, #28]
 8006f06:	e006      	b.n	8006f16 <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8006f08:	4b2b      	ldr	r3, [pc, #172]	; (8006fb8 <vTaskPrioritySet+0x128>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	69ba      	ldr	r2, [r7, #24]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d101      	bne.n	8006f16 <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8006f12:	2301      	movs	r3, #1
 8006f14:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f1a:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d102      	bne.n	8006f2e <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8006f28:	69bb      	ldr	r3, [r7, #24]
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8006f2e:	69bb      	ldr	r3, [r7, #24]
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	db04      	blt.n	8006f46 <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	6959      	ldr	r1, [r3, #20]
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4a19      	ldr	r2, [pc, #100]	; (8006fbc <vTaskPrioritySet+0x12c>)
 8006f56:	4413      	add	r3, r2
 8006f58:	4299      	cmp	r1, r3
 8006f5a:	d11c      	bne.n	8006f96 <vTaskPrioritySet+0x106>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fe fc55 	bl	8005810 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f6a:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <vTaskPrioritySet+0x130>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d903      	bls.n	8006f7a <vTaskPrioritySet+0xea>
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	4a12      	ldr	r2, [pc, #72]	; (8006fc0 <vTaskPrioritySet+0x130>)
 8006f78:	6013      	str	r3, [r2, #0]
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4a0d      	ldr	r2, [pc, #52]	; (8006fbc <vTaskPrioritySet+0x12c>)
 8006f88:	441a      	add	r2, r3
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4610      	mov	r0, r2
 8006f92:	f7fe fbe0 	bl	8005756 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d007      	beq.n	8006fac <vTaskPrioritySet+0x11c>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <vTaskPrioritySet+0x134>)
 8006f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8006fac:	f001 fe04 	bl	8008bb8 <vPortExitCritical>
	}
 8006fb0:	bf00      	nop
 8006fb2:	3720      	adds	r7, #32
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20000770 	.word	0x20000770
 8006fbc:	20000774 	.word	0x20000774
 8006fc0:	20000c4c 	.word	0x20000c4c
 8006fc4:	e000ed04 	.word	0xe000ed04

08006fc8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006fd0:	f001 fdc4 	bl	8008b5c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d102      	bne.n	8006fe0 <vTaskSuspend+0x18>
 8006fda:	4b2f      	ldr	r3, [pc, #188]	; (8007098 <vTaskSuspend+0xd0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	e000      	b.n	8006fe2 <vTaskSuspend+0x1a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f7fe fc11 	bl	8005810 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	3318      	adds	r3, #24
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fe fc08 	bl	8005810 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	3304      	adds	r3, #4
 8007004:	4619      	mov	r1, r3
 8007006:	4825      	ldr	r0, [pc, #148]	; (800709c <vTaskSuspend+0xd4>)
 8007008:	f7fe fba5 	bl	8005756 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b01      	cmp	r3, #1
 8007016:	d103      	bne.n	8007020 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8007020:	f001 fdca 	bl	8008bb8 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8007024:	4b1e      	ldr	r3, [pc, #120]	; (80070a0 <vTaskSuspend+0xd8>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800702c:	f001 fd96 	bl	8008b5c <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8007030:	f000 fe76 	bl	8007d20 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8007034:	f001 fdc0 	bl	8008bb8 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8007038:	4b17      	ldr	r3, [pc, #92]	; (8007098 <vTaskSuspend+0xd0>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	429a      	cmp	r2, r3
 8007040:	d126      	bne.n	8007090 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 8007042:	4b17      	ldr	r3, [pc, #92]	; (80070a0 <vTaskSuspend+0xd8>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d016      	beq.n	8007078 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800704a:	4b16      	ldr	r3, [pc, #88]	; (80070a4 <vTaskSuspend+0xdc>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d009      	beq.n	8007066 <vTaskSuspend+0x9e>
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	60bb      	str	r3, [r7, #8]
 8007064:	e7fe      	b.n	8007064 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8007066:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <vTaskSuspend+0xe0>)
 8007068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007076:	e00b      	b.n	8007090 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007078:	4b08      	ldr	r3, [pc, #32]	; (800709c <vTaskSuspend+0xd4>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	4b0b      	ldr	r3, [pc, #44]	; (80070ac <vTaskSuspend+0xe4>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d103      	bne.n	800708c <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8007084:	4b04      	ldr	r3, [pc, #16]	; (8007098 <vTaskSuspend+0xd0>)
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
	}
 800708a:	e001      	b.n	8007090 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 800708c:	f000 fb18 	bl	80076c0 <vTaskSwitchContext>
	}
 8007090:	bf00      	nop
 8007092:	3710      	adds	r7, #16
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	20000770 	.word	0x20000770
 800709c:	20000c30 	.word	0x20000c30
 80070a0:	20000c50 	.word	0x20000c50
 80070a4:	20000c6c 	.word	0x20000c6c
 80070a8:	e000ed04 	.word	0xe000ed04
 80070ac:	20000c44 	.word	0x20000c44

080070b0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80070b8:	2300      	movs	r3, #0
 80070ba:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d109      	bne.n	80070da <prvTaskIsTaskSuspended+0x2a>
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	e7fe      	b.n	80070d8 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	4a0a      	ldr	r2, [pc, #40]	; (8007108 <prvTaskIsTaskSuspended+0x58>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d10a      	bne.n	80070fa <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e8:	4a08      	ldr	r2, [pc, #32]	; (800710c <prvTaskIsTaskSuspended+0x5c>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d005      	beq.n	80070fa <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 80070f6:	2301      	movs	r3, #1
 80070f8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80070fa:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80070fc:	4618      	mov	r0, r3
 80070fe:	371c      	adds	r7, #28
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	20000c30 	.word	0x20000c30
 800710c:	20000c04 	.word	0x20000c04

08007110 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <vTaskResume+0x26>
 8007122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	60bb      	str	r3, [r7, #8]
 8007134:	e7fe      	b.n	8007134 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8007136:	4b21      	ldr	r3, [pc, #132]	; (80071bc <vTaskResume+0xac>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	429a      	cmp	r2, r3
 800713e:	d038      	beq.n	80071b2 <vTaskResume+0xa2>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d035      	beq.n	80071b2 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8007146:	f001 fd09 	bl	8008b5c <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f7ff ffb0 	bl	80070b0 <prvTaskIsTaskSuspended>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d02b      	beq.n	80071ae <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	3304      	adds	r3, #4
 800715a:	4618      	mov	r0, r3
 800715c:	f7fe fb58 	bl	8005810 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007164:	4b16      	ldr	r3, [pc, #88]	; (80071c0 <vTaskResume+0xb0>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d903      	bls.n	8007174 <vTaskResume+0x64>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	4a13      	ldr	r2, [pc, #76]	; (80071c0 <vTaskResume+0xb0>)
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007178:	4613      	mov	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4a10      	ldr	r2, [pc, #64]	; (80071c4 <vTaskResume+0xb4>)
 8007182:	441a      	add	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	3304      	adds	r3, #4
 8007188:	4619      	mov	r1, r3
 800718a:	4610      	mov	r0, r2
 800718c:	f7fe fae3 	bl	8005756 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007194:	4b09      	ldr	r3, [pc, #36]	; (80071bc <vTaskResume+0xac>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719a:	429a      	cmp	r2, r3
 800719c:	d307      	bcc.n	80071ae <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800719e:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <vTaskResume+0xb8>)
 80071a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80071ae:	f001 fd03 	bl	8008bb8 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80071b2:	bf00      	nop
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	20000770 	.word	0x20000770
 80071c0:	20000c4c 	.word	0x20000c4c
 80071c4:	20000774 	.word	0x20000774
 80071c8:	e000ed04 	.word	0xe000ed04

080071cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08a      	sub	sp, #40	; 0x28
 80071d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80071da:	463a      	mov	r2, r7
 80071dc:	1d39      	adds	r1, r7, #4
 80071de:	f107 0308 	add.w	r3, r7, #8
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fe fa56 	bl	8005694 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	9202      	str	r2, [sp, #8]
 80071f0:	9301      	str	r3, [sp, #4]
 80071f2:	2300      	movs	r3, #0
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	2300      	movs	r3, #0
 80071f8:	460a      	mov	r2, r1
 80071fa:	4921      	ldr	r1, [pc, #132]	; (8007280 <vTaskStartScheduler+0xb4>)
 80071fc:	4821      	ldr	r0, [pc, #132]	; (8007284 <vTaskStartScheduler+0xb8>)
 80071fe:	f7ff fc0d 	bl	8006a1c <xTaskCreateStatic>
 8007202:	4602      	mov	r2, r0
 8007204:	4b20      	ldr	r3, [pc, #128]	; (8007288 <vTaskStartScheduler+0xbc>)
 8007206:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007208:	4b1f      	ldr	r3, [pc, #124]	; (8007288 <vTaskStartScheduler+0xbc>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007210:	2301      	movs	r3, #1
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	e001      	b.n	800721a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007216:	2300      	movs	r3, #0
 8007218:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d102      	bne.n	8007226 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007220:	f001 f832 	bl	8008288 <xTimerCreateTimerTask>
 8007224:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d117      	bne.n	800725c <vTaskStartScheduler+0x90>
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <vTaskStartScheduler+0xc0>)
 8007240:	f04f 32ff 	mov.w	r2, #4294967295
 8007244:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007246:	4b12      	ldr	r3, [pc, #72]	; (8007290 <vTaskStartScheduler+0xc4>)
 8007248:	2201      	movs	r2, #1
 800724a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800724c:	4b11      	ldr	r3, [pc, #68]	; (8007294 <vTaskStartScheduler+0xc8>)
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007252:	f7f9 f9b5 	bl	80005c0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007256:	f001 fbe3 	bl	8008a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800725a:	e00d      	b.n	8007278 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007262:	d109      	bne.n	8007278 <vTaskStartScheduler+0xac>
 8007264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007268:	f383 8811 	msr	BASEPRI, r3
 800726c:	f3bf 8f6f 	isb	sy
 8007270:	f3bf 8f4f 	dsb	sy
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	e7fe      	b.n	8007276 <vTaskStartScheduler+0xaa>
}
 8007278:	bf00      	nop
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	0801a94c 	.word	0x0801a94c
 8007284:	08007a15 	.word	0x08007a15
 8007288:	20000c68 	.word	0x20000c68
 800728c:	20000c64 	.word	0x20000c64
 8007290:	20000c50 	.word	0x20000c50
 8007294:	20000c48 	.word	0x20000c48

08007298 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800729c:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <vTaskSuspendAll+0x18>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3301      	adds	r3, #1
 80072a2:	4a03      	ldr	r2, [pc, #12]	; (80072b0 <vTaskSuspendAll+0x18>)
 80072a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80072a6:	bf00      	nop
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	20000c6c 	.word	0x20000c6c

080072b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80072c2:	4b41      	ldr	r3, [pc, #260]	; (80073c8 <xTaskResumeAll+0x114>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d109      	bne.n	80072de <xTaskResumeAll+0x2a>
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	e7fe      	b.n	80072dc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80072de:	f001 fc3d 	bl	8008b5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80072e2:	4b39      	ldr	r3, [pc, #228]	; (80073c8 <xTaskResumeAll+0x114>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	4a37      	ldr	r2, [pc, #220]	; (80073c8 <xTaskResumeAll+0x114>)
 80072ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ec:	4b36      	ldr	r3, [pc, #216]	; (80073c8 <xTaskResumeAll+0x114>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d162      	bne.n	80073ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80072f4:	4b35      	ldr	r3, [pc, #212]	; (80073cc <xTaskResumeAll+0x118>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d05e      	beq.n	80073ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072fc:	e02f      	b.n	800735e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072fe:	4b34      	ldr	r3, [pc, #208]	; (80073d0 <xTaskResumeAll+0x11c>)
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3318      	adds	r3, #24
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe fa80 	bl	8005810 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3304      	adds	r3, #4
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe fa7b 	bl	8005810 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731e:	4b2d      	ldr	r3, [pc, #180]	; (80073d4 <xTaskResumeAll+0x120>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d903      	bls.n	800732e <xTaskResumeAll+0x7a>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732a:	4a2a      	ldr	r2, [pc, #168]	; (80073d4 <xTaskResumeAll+0x120>)
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4a27      	ldr	r2, [pc, #156]	; (80073d8 <xTaskResumeAll+0x124>)
 800733c:	441a      	add	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3304      	adds	r3, #4
 8007342:	4619      	mov	r1, r3
 8007344:	4610      	mov	r0, r2
 8007346:	f7fe fa06 	bl	8005756 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734e:	4b23      	ldr	r3, [pc, #140]	; (80073dc <xTaskResumeAll+0x128>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	429a      	cmp	r2, r3
 8007356:	d302      	bcc.n	800735e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007358:	4b21      	ldr	r3, [pc, #132]	; (80073e0 <xTaskResumeAll+0x12c>)
 800735a:	2201      	movs	r2, #1
 800735c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800735e:	4b1c      	ldr	r3, [pc, #112]	; (80073d0 <xTaskResumeAll+0x11c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1cb      	bne.n	80072fe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800736c:	f000 fcd8 	bl	8007d20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007370:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <xTaskResumeAll+0x130>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d010      	beq.n	800739e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800737c:	f000 f8e8 	bl	8007550 <xTaskIncrementTick>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d002      	beq.n	800738c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007386:	4b16      	ldr	r3, [pc, #88]	; (80073e0 <xTaskResumeAll+0x12c>)
 8007388:	2201      	movs	r2, #1
 800738a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3b01      	subs	r3, #1
 8007390:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1f1      	bne.n	800737c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007398:	4b12      	ldr	r3, [pc, #72]	; (80073e4 <xTaskResumeAll+0x130>)
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800739e:	4b10      	ldr	r3, [pc, #64]	; (80073e0 <xTaskResumeAll+0x12c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d009      	beq.n	80073ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80073a6:	2301      	movs	r3, #1
 80073a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80073aa:	4b0f      	ldr	r3, [pc, #60]	; (80073e8 <xTaskResumeAll+0x134>)
 80073ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80073ba:	f001 fbfd 	bl	8008bb8 <vPortExitCritical>

	return xAlreadyYielded;
 80073be:	68bb      	ldr	r3, [r7, #8]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	20000c6c 	.word	0x20000c6c
 80073cc:	20000c44 	.word	0x20000c44
 80073d0:	20000c04 	.word	0x20000c04
 80073d4:	20000c4c 	.word	0x20000c4c
 80073d8:	20000774 	.word	0x20000774
 80073dc:	20000770 	.word	0x20000770
 80073e0:	20000c58 	.word	0x20000c58
 80073e4:	20000c54 	.word	0x20000c54
 80073e8:	e000ed04 	.word	0xe000ed04

080073ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80073f2:	4b05      	ldr	r3, [pc, #20]	; (8007408 <xTaskGetTickCount+0x1c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80073f8:	687b      	ldr	r3, [r7, #4]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	20000c48 	.word	0x20000c48

0800740c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007412:	f001 fc7f 	bl	8008d14 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007416:	2300      	movs	r3, #0
 8007418:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800741a:	4b04      	ldr	r3, [pc, #16]	; (800742c <xTaskGetTickCountFromISR+0x20>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007420:	683b      	ldr	r3, [r7, #0]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20000c48 	.word	0x20000c48

08007430 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800743c:	2300      	movs	r3, #0
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	2338      	movs	r3, #56	; 0x38
 8007442:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8007444:	f7ff ff28 	bl	8007298 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8007448:	4b3b      	ldr	r3, [pc, #236]	; (8007538 <uxTaskGetSystemState+0x108>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	429a      	cmp	r2, r3
 8007450:	d36a      	bcc.n	8007528 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	3b01      	subs	r3, #1
 8007456:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	4613      	mov	r3, r2
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	461a      	mov	r2, r3
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	1898      	adds	r0, r3, r2
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	4a32      	ldr	r2, [pc, #200]	; (800753c <uxTaskGetSystemState+0x10c>)
 8007474:	4413      	add	r3, r2
 8007476:	2201      	movs	r2, #1
 8007478:	4619      	mov	r1, r3
 800747a:	f000 fbb5 	bl	8007be8 <prvListTasksWithinSingleList>
 800747e:	4602      	mov	r2, r0
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	4413      	add	r3, r2
 8007484:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1e2      	bne.n	8007452 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	4613      	mov	r3, r2
 8007490:	00db      	lsls	r3, r3, #3
 8007492:	4413      	add	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	461a      	mov	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	1898      	adds	r0, r3, r2
 800749c:	4b28      	ldr	r3, [pc, #160]	; (8007540 <uxTaskGetSystemState+0x110>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2202      	movs	r2, #2
 80074a2:	4619      	mov	r1, r3
 80074a4:	f000 fba0 	bl	8007be8 <prvListTasksWithinSingleList>
 80074a8:	4602      	mov	r2, r0
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	4413      	add	r3, r2
 80074ae:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	4613      	mov	r3, r2
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	4413      	add	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	461a      	mov	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	1898      	adds	r0, r3, r2
 80074c0:	4b20      	ldr	r3, [pc, #128]	; (8007544 <uxTaskGetSystemState+0x114>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2202      	movs	r2, #2
 80074c6:	4619      	mov	r1, r3
 80074c8:	f000 fb8e 	bl	8007be8 <prvListTasksWithinSingleList>
 80074cc:	4602      	mov	r2, r0
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	4413      	add	r3, r2
 80074d2:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	4613      	mov	r3, r2
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	4413      	add	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	461a      	mov	r2, r3
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	4413      	add	r3, r2
 80074e4:	2204      	movs	r2, #4
 80074e6:	4918      	ldr	r1, [pc, #96]	; (8007548 <uxTaskGetSystemState+0x118>)
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fb7d 	bl	8007be8 <prvListTasksWithinSingleList>
 80074ee:	4602      	mov	r2, r0
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	4413      	add	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4613      	mov	r3, r2
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	4413      	add	r3, r2
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	461a      	mov	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4413      	add	r3, r2
 8007506:	2203      	movs	r2, #3
 8007508:	4910      	ldr	r1, [pc, #64]	; (800754c <uxTaskGetSystemState+0x11c>)
 800750a:	4618      	mov	r0, r3
 800750c:	f000 fb6c 	bl	8007be8 <prvListTasksWithinSingleList>
 8007510:	4602      	mov	r2, r0
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	4413      	add	r3, r2
 8007516:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d004      	beq.n	8007528 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800751e:	f7f9 f856 	bl	80005ce <getRunTimeCounterValue>
 8007522:	4602      	mov	r2, r0
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8007528:	f7ff fec4 	bl	80072b4 <xTaskResumeAll>

		return uxTask;
 800752c:	697b      	ldr	r3, [r7, #20]
	}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20000c44 	.word	0x20000c44
 800753c:	20000774 	.word	0x20000774
 8007540:	20000bfc 	.word	0x20000bfc
 8007544:	20000c00 	.word	0x20000c00
 8007548:	20000c18 	.word	0x20000c18
 800754c:	20000c30 	.word	0x20000c30

08007550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800755a:	4b4e      	ldr	r3, [pc, #312]	; (8007694 <xTaskIncrementTick+0x144>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	f040 8088 	bne.w	8007674 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007564:	4b4c      	ldr	r3, [pc, #304]	; (8007698 <xTaskIncrementTick+0x148>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3301      	adds	r3, #1
 800756a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800756c:	4a4a      	ldr	r2, [pc, #296]	; (8007698 <xTaskIncrementTick+0x148>)
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d11f      	bne.n	80075b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007578:	4b48      	ldr	r3, [pc, #288]	; (800769c <xTaskIncrementTick+0x14c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <xTaskIncrementTick+0x46>
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	603b      	str	r3, [r7, #0]
 8007594:	e7fe      	b.n	8007594 <xTaskIncrementTick+0x44>
 8007596:	4b41      	ldr	r3, [pc, #260]	; (800769c <xTaskIncrementTick+0x14c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	4b40      	ldr	r3, [pc, #256]	; (80076a0 <xTaskIncrementTick+0x150>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a3e      	ldr	r2, [pc, #248]	; (800769c <xTaskIncrementTick+0x14c>)
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	4a3e      	ldr	r2, [pc, #248]	; (80076a0 <xTaskIncrementTick+0x150>)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	4b3e      	ldr	r3, [pc, #248]	; (80076a4 <xTaskIncrementTick+0x154>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3301      	adds	r3, #1
 80075b0:	4a3c      	ldr	r2, [pc, #240]	; (80076a4 <xTaskIncrementTick+0x154>)
 80075b2:	6013      	str	r3, [r2, #0]
 80075b4:	f000 fbb4 	bl	8007d20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80075b8:	4b3b      	ldr	r3, [pc, #236]	; (80076a8 <xTaskIncrementTick+0x158>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d349      	bcc.n	8007656 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075c2:	4b36      	ldr	r3, [pc, #216]	; (800769c <xTaskIncrementTick+0x14c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d104      	bne.n	80075d6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075cc:	4b36      	ldr	r3, [pc, #216]	; (80076a8 <xTaskIncrementTick+0x158>)
 80075ce:	f04f 32ff 	mov.w	r2, #4294967295
 80075d2:	601a      	str	r2, [r3, #0]
					break;
 80075d4:	e03f      	b.n	8007656 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d6:	4b31      	ldr	r3, [pc, #196]	; (800769c <xTaskIncrementTick+0x14c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d203      	bcs.n	80075f6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80075ee:	4a2e      	ldr	r2, [pc, #184]	; (80076a8 <xTaskIncrementTick+0x158>)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80075f4:	e02f      	b.n	8007656 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe f908 	bl	8005810 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007604:	2b00      	cmp	r3, #0
 8007606:	d004      	beq.n	8007612 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	3318      	adds	r3, #24
 800760c:	4618      	mov	r0, r3
 800760e:	f7fe f8ff 	bl	8005810 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007616:	4b25      	ldr	r3, [pc, #148]	; (80076ac <xTaskIncrementTick+0x15c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d903      	bls.n	8007626 <xTaskIncrementTick+0xd6>
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007622:	4a22      	ldr	r2, [pc, #136]	; (80076ac <xTaskIncrementTick+0x15c>)
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762a:	4613      	mov	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4a1f      	ldr	r2, [pc, #124]	; (80076b0 <xTaskIncrementTick+0x160>)
 8007634:	441a      	add	r2, r3
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	3304      	adds	r3, #4
 800763a:	4619      	mov	r1, r3
 800763c:	4610      	mov	r0, r2
 800763e:	f7fe f88a 	bl	8005756 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007646:	4b1b      	ldr	r3, [pc, #108]	; (80076b4 <xTaskIncrementTick+0x164>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	429a      	cmp	r2, r3
 800764e:	d3b8      	bcc.n	80075c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007650:	2301      	movs	r3, #1
 8007652:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007654:	e7b5      	b.n	80075c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007656:	4b17      	ldr	r3, [pc, #92]	; (80076b4 <xTaskIncrementTick+0x164>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765c:	4914      	ldr	r1, [pc, #80]	; (80076b0 <xTaskIncrementTick+0x160>)
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	440b      	add	r3, r1
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d907      	bls.n	800767e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800766e:	2301      	movs	r3, #1
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	e004      	b.n	800767e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007674:	4b10      	ldr	r3, [pc, #64]	; (80076b8 <xTaskIncrementTick+0x168>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3301      	adds	r3, #1
 800767a:	4a0f      	ldr	r2, [pc, #60]	; (80076b8 <xTaskIncrementTick+0x168>)
 800767c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800767e:	4b0f      	ldr	r3, [pc, #60]	; (80076bc <xTaskIncrementTick+0x16c>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007686:	2301      	movs	r3, #1
 8007688:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800768a:	697b      	ldr	r3, [r7, #20]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	20000c6c 	.word	0x20000c6c
 8007698:	20000c48 	.word	0x20000c48
 800769c:	20000bfc 	.word	0x20000bfc
 80076a0:	20000c00 	.word	0x20000c00
 80076a4:	20000c5c 	.word	0x20000c5c
 80076a8:	20000c64 	.word	0x20000c64
 80076ac:	20000c4c 	.word	0x20000c4c
 80076b0:	20000774 	.word	0x20000774
 80076b4:	20000770 	.word	0x20000770
 80076b8:	20000c54 	.word	0x20000c54
 80076bc:	20000c58 	.word	0x20000c58

080076c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80076c6:	4b33      	ldr	r3, [pc, #204]	; (8007794 <vTaskSwitchContext+0xd4>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80076ce:	4b32      	ldr	r3, [pc, #200]	; (8007798 <vTaskSwitchContext+0xd8>)
 80076d0:	2201      	movs	r2, #1
 80076d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80076d4:	e059      	b.n	800778a <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 80076d6:	4b30      	ldr	r3, [pc, #192]	; (8007798 <vTaskSwitchContext+0xd8>)
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80076dc:	f7f8 ff77 	bl	80005ce <getRunTimeCounterValue>
 80076e0:	4602      	mov	r2, r0
 80076e2:	4b2e      	ldr	r3, [pc, #184]	; (800779c <vTaskSwitchContext+0xdc>)
 80076e4:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80076e6:	4b2d      	ldr	r3, [pc, #180]	; (800779c <vTaskSwitchContext+0xdc>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	4b2d      	ldr	r3, [pc, #180]	; (80077a0 <vTaskSwitchContext+0xe0>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d909      	bls.n	8007706 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80076f2:	4b2c      	ldr	r3, [pc, #176]	; (80077a4 <vTaskSwitchContext+0xe4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80076f8:	4a28      	ldr	r2, [pc, #160]	; (800779c <vTaskSwitchContext+0xdc>)
 80076fa:	6810      	ldr	r0, [r2, #0]
 80076fc:	4a28      	ldr	r2, [pc, #160]	; (80077a0 <vTaskSwitchContext+0xe0>)
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	1a82      	subs	r2, r0, r2
 8007702:	440a      	add	r2, r1
 8007704:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007706:	4b25      	ldr	r3, [pc, #148]	; (800779c <vTaskSwitchContext+0xdc>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a25      	ldr	r2, [pc, #148]	; (80077a0 <vTaskSwitchContext+0xe0>)
 800770c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800770e:	4b26      	ldr	r3, [pc, #152]	; (80077a8 <vTaskSwitchContext+0xe8>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	e00f      	b.n	8007736 <vTaskSwitchContext+0x76>
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d109      	bne.n	8007730 <vTaskSwitchContext+0x70>
 800771c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	607b      	str	r3, [r7, #4]
 800772e:	e7fe      	b.n	800772e <vTaskSwitchContext+0x6e>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	3b01      	subs	r3, #1
 8007734:	60fb      	str	r3, [r7, #12]
 8007736:	491d      	ldr	r1, [pc, #116]	; (80077ac <vTaskSwitchContext+0xec>)
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4613      	mov	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4413      	add	r3, r2
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	440b      	add	r3, r1
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0e5      	beq.n	8007716 <vTaskSwitchContext+0x56>
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	4613      	mov	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4a15      	ldr	r2, [pc, #84]	; (80077ac <vTaskSwitchContext+0xec>)
 8007756:	4413      	add	r3, r2
 8007758:	60bb      	str	r3, [r7, #8]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	605a      	str	r2, [r3, #4]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	3308      	adds	r3, #8
 800776c:	429a      	cmp	r2, r3
 800776e:	d104      	bne.n	800777a <vTaskSwitchContext+0xba>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	605a      	str	r2, [r3, #4]
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	4a08      	ldr	r2, [pc, #32]	; (80077a4 <vTaskSwitchContext+0xe4>)
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	4a08      	ldr	r2, [pc, #32]	; (80077a8 <vTaskSwitchContext+0xe8>)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6013      	str	r3, [r2, #0]
}
 800778a:	bf00      	nop
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	20000c6c 	.word	0x20000c6c
 8007798:	20000c58 	.word	0x20000c58
 800779c:	20000c74 	.word	0x20000c74
 80077a0:	20000c70 	.word	0x20000c70
 80077a4:	20000770 	.word	0x20000770
 80077a8:	20000c4c 	.word	0x20000c4c
 80077ac:	20000774 	.word	0x20000774

080077b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d109      	bne.n	80077d4 <vTaskPlaceOnEventList+0x24>
 80077c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c4:	f383 8811 	msr	BASEPRI, r3
 80077c8:	f3bf 8f6f 	isb	sy
 80077cc:	f3bf 8f4f 	dsb	sy
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	e7fe      	b.n	80077d2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077d4:	4b07      	ldr	r3, [pc, #28]	; (80077f4 <vTaskPlaceOnEventList+0x44>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	3318      	adds	r3, #24
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7fd ffde 	bl	800579e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80077e2:	2101      	movs	r1, #1
 80077e4:	6838      	ldr	r0, [r7, #0]
 80077e6:	f000 fcfb 	bl	80081e0 <prvAddCurrentTaskToDelayedList>
}
 80077ea:	bf00      	nop
 80077ec:	3710      	adds	r7, #16
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	20000770 	.word	0x20000770

080077f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d109      	bne.n	800781e <vTaskPlaceOnEventListRestricted+0x26>
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	e7fe      	b.n	800781c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800781e:	4b0a      	ldr	r3, [pc, #40]	; (8007848 <vTaskPlaceOnEventListRestricted+0x50>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3318      	adds	r3, #24
 8007824:	4619      	mov	r1, r3
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f7fd ff95 	bl	8005756 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007832:	f04f 33ff 	mov.w	r3, #4294967295
 8007836:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007838:	6879      	ldr	r1, [r7, #4]
 800783a:	68b8      	ldr	r0, [r7, #8]
 800783c:	f000 fcd0 	bl	80081e0 <prvAddCurrentTaskToDelayedList>
	}
 8007840:	bf00      	nop
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000770 	.word	0x20000770

0800784c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d109      	bne.n	8007876 <xTaskRemoveFromEventList+0x2a>
 8007862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	e7fe      	b.n	8007874 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	3318      	adds	r3, #24
 800787a:	4618      	mov	r0, r3
 800787c:	f7fd ffc8 	bl	8005810 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007880:	4b1d      	ldr	r3, [pc, #116]	; (80078f8 <xTaskRemoveFromEventList+0xac>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d11d      	bne.n	80078c4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	3304      	adds	r3, #4
 800788c:	4618      	mov	r0, r3
 800788e:	f7fd ffbf 	bl	8005810 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007896:	4b19      	ldr	r3, [pc, #100]	; (80078fc <xTaskRemoveFromEventList+0xb0>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	429a      	cmp	r2, r3
 800789c:	d903      	bls.n	80078a6 <xTaskRemoveFromEventList+0x5a>
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	4a16      	ldr	r2, [pc, #88]	; (80078fc <xTaskRemoveFromEventList+0xb0>)
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078aa:	4613      	mov	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4a13      	ldr	r2, [pc, #76]	; (8007900 <xTaskRemoveFromEventList+0xb4>)
 80078b4:	441a      	add	r2, r3
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	3304      	adds	r3, #4
 80078ba:	4619      	mov	r1, r3
 80078bc:	4610      	mov	r0, r2
 80078be:	f7fd ff4a 	bl	8005756 <vListInsertEnd>
 80078c2:	e005      	b.n	80078d0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	3318      	adds	r3, #24
 80078c8:	4619      	mov	r1, r3
 80078ca:	480e      	ldr	r0, [pc, #56]	; (8007904 <xTaskRemoveFromEventList+0xb8>)
 80078cc:	f7fd ff43 	bl	8005756 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d4:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <xTaskRemoveFromEventList+0xbc>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078da:	429a      	cmp	r2, r3
 80078dc:	d905      	bls.n	80078ea <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078de:	2301      	movs	r3, #1
 80078e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078e2:	4b0a      	ldr	r3, [pc, #40]	; (800790c <xTaskRemoveFromEventList+0xc0>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	e001      	b.n	80078ee <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078ee:	697b      	ldr	r3, [r7, #20]
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3718      	adds	r7, #24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20000c6c 	.word	0x20000c6c
 80078fc:	20000c4c 	.word	0x20000c4c
 8007900:	20000774 	.word	0x20000774
 8007904:	20000c04 	.word	0x20000c04
 8007908:	20000770 	.word	0x20000770
 800790c:	20000c58 	.word	0x20000c58

08007910 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007918:	4b06      	ldr	r3, [pc, #24]	; (8007934 <vTaskInternalSetTimeOutState+0x24>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007920:	4b05      	ldr	r3, [pc, #20]	; (8007938 <vTaskInternalSetTimeOutState+0x28>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	605a      	str	r2, [r3, #4]
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	20000c5c 	.word	0x20000c5c
 8007938:	20000c48 	.word	0x20000c48

0800793c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b088      	sub	sp, #32
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d109      	bne.n	8007960 <xTaskCheckForTimeOut+0x24>
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	613b      	str	r3, [r7, #16]
 800795e:	e7fe      	b.n	800795e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d109      	bne.n	800797a <xTaskCheckForTimeOut+0x3e>
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	60fb      	str	r3, [r7, #12]
 8007978:	e7fe      	b.n	8007978 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800797a:	f001 f8ef 	bl	8008b5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800797e:	4b1d      	ldr	r3, [pc, #116]	; (80079f4 <xTaskCheckForTimeOut+0xb8>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007996:	d102      	bne.n	800799e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007998:	2300      	movs	r3, #0
 800799a:	61fb      	str	r3, [r7, #28]
 800799c:	e023      	b.n	80079e6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <xTaskCheckForTimeOut+0xbc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d007      	beq.n	80079ba <xTaskCheckForTimeOut+0x7e>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d302      	bcc.n	80079ba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079b4:	2301      	movs	r3, #1
 80079b6:	61fb      	str	r3, [r7, #28]
 80079b8:	e015      	b.n	80079e6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	697a      	ldr	r2, [r7, #20]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d20b      	bcs.n	80079dc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	1ad2      	subs	r2, r2, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f7ff ff9d 	bl	8007910 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	61fb      	str	r3, [r7, #28]
 80079da:	e004      	b.n	80079e6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2200      	movs	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079e2:	2301      	movs	r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079e6:	f001 f8e7 	bl	8008bb8 <vPortExitCritical>

	return xReturn;
 80079ea:	69fb      	ldr	r3, [r7, #28]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3720      	adds	r7, #32
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20000c48 	.word	0x20000c48
 80079f8:	20000c5c 	.word	0x20000c5c

080079fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a00:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <vTaskMissedYield+0x14>)
 8007a02:	2201      	movs	r2, #1
 8007a04:	601a      	str	r2, [r3, #0]
}
 8007a06:	bf00      	nop
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr
 8007a10:	20000c58 	.word	0x20000c58

08007a14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a1c:	f000 f852 	bl	8007ac4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a20:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <prvIdleTask+0x28>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d9f9      	bls.n	8007a1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a28:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <prvIdleTask+0x2c>)
 8007a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a2e:	601a      	str	r2, [r3, #0]
 8007a30:	f3bf 8f4f 	dsb	sy
 8007a34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a38:	e7f0      	b.n	8007a1c <prvIdleTask+0x8>
 8007a3a:	bf00      	nop
 8007a3c:	20000774 	.word	0x20000774
 8007a40:	e000ed04 	.word	0xe000ed04

08007a44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	607b      	str	r3, [r7, #4]
 8007a4e:	e00c      	b.n	8007a6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	4613      	mov	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4a12      	ldr	r2, [pc, #72]	; (8007aa4 <prvInitialiseTaskLists+0x60>)
 8007a5c:	4413      	add	r3, r2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fd fe4c 	bl	80056fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	3301      	adds	r3, #1
 8007a68:	607b      	str	r3, [r7, #4]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2b37      	cmp	r3, #55	; 0x37
 8007a6e:	d9ef      	bls.n	8007a50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a70:	480d      	ldr	r0, [pc, #52]	; (8007aa8 <prvInitialiseTaskLists+0x64>)
 8007a72:	f7fd fe43 	bl	80056fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a76:	480d      	ldr	r0, [pc, #52]	; (8007aac <prvInitialiseTaskLists+0x68>)
 8007a78:	f7fd fe40 	bl	80056fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a7c:	480c      	ldr	r0, [pc, #48]	; (8007ab0 <prvInitialiseTaskLists+0x6c>)
 8007a7e:	f7fd fe3d 	bl	80056fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a82:	480c      	ldr	r0, [pc, #48]	; (8007ab4 <prvInitialiseTaskLists+0x70>)
 8007a84:	f7fd fe3a 	bl	80056fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a88:	480b      	ldr	r0, [pc, #44]	; (8007ab8 <prvInitialiseTaskLists+0x74>)
 8007a8a:	f7fd fe37 	bl	80056fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a8e:	4b0b      	ldr	r3, [pc, #44]	; (8007abc <prvInitialiseTaskLists+0x78>)
 8007a90:	4a05      	ldr	r2, [pc, #20]	; (8007aa8 <prvInitialiseTaskLists+0x64>)
 8007a92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a94:	4b0a      	ldr	r3, [pc, #40]	; (8007ac0 <prvInitialiseTaskLists+0x7c>)
 8007a96:	4a05      	ldr	r2, [pc, #20]	; (8007aac <prvInitialiseTaskLists+0x68>)
 8007a98:	601a      	str	r2, [r3, #0]
}
 8007a9a:	bf00      	nop
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	bf00      	nop
 8007aa4:	20000774 	.word	0x20000774
 8007aa8:	20000bd4 	.word	0x20000bd4
 8007aac:	20000be8 	.word	0x20000be8
 8007ab0:	20000c04 	.word	0x20000c04
 8007ab4:	20000c18 	.word	0x20000c18
 8007ab8:	20000c30 	.word	0x20000c30
 8007abc:	20000bfc 	.word	0x20000bfc
 8007ac0:	20000c00 	.word	0x20000c00

08007ac4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007aca:	e019      	b.n	8007b00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007acc:	f001 f846 	bl	8008b5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad0:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <prvCheckTasksWaitingTermination+0x4c>)
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	3304      	adds	r3, #4
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fd fe97 	bl	8005810 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ae2:	4b0c      	ldr	r3, [pc, #48]	; (8007b14 <prvCheckTasksWaitingTermination+0x50>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	4a0a      	ldr	r2, [pc, #40]	; (8007b14 <prvCheckTasksWaitingTermination+0x50>)
 8007aea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007aec:	4b0a      	ldr	r3, [pc, #40]	; (8007b18 <prvCheckTasksWaitingTermination+0x54>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	4a09      	ldr	r2, [pc, #36]	; (8007b18 <prvCheckTasksWaitingTermination+0x54>)
 8007af4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007af6:	f001 f85f 	bl	8008bb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f8e2 	bl	8007cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b00:	4b05      	ldr	r3, [pc, #20]	; (8007b18 <prvCheckTasksWaitingTermination+0x54>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e1      	bne.n	8007acc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b08:	bf00      	nop
 8007b0a:	3708      	adds	r7, #8
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	20000c18 	.word	0x20000c18
 8007b14:	20000c44 	.word	0x20000c44
 8007b18:	20000c2c 	.word	0x20000c2c

08007b1c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d102      	bne.n	8007b36 <vTaskGetInfo+0x1a>
 8007b30:	4b2c      	ldr	r3, [pc, #176]	; (8007be4 <vTaskGetInfo+0xc8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	e000      	b.n	8007b38 <vTaskGetInfo+0x1c>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8007b72:	78fb      	ldrb	r3, [r7, #3]
 8007b74:	2b05      	cmp	r3, #5
 8007b76:	d01a      	beq.n	8007bae <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8007b78:	4b1a      	ldr	r3, [pc, #104]	; (8007be4 <vTaskGetInfo+0xc8>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d103      	bne.n	8007b8a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2200      	movs	r2, #0
 8007b86:	731a      	strb	r2, [r3, #12]
 8007b88:	e018      	b.n	8007bbc <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	78fa      	ldrb	r2, [r7, #3]
 8007b8e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8007b90:	78fb      	ldrb	r3, [r7, #3]
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d112      	bne.n	8007bbc <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8007b96:	f7ff fb7f 	bl	8007298 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8007ba8:	f7ff fb84 	bl	80072b4 <xTaskResumeAll>
 8007bac:	e006      	b.n	8007bbc <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8007bae:	6978      	ldr	r0, [r7, #20]
 8007bb0:	f7ff f908 	bl	8006dc4 <eTaskGetState>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d009      	beq.n	8007bd6 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 f860 	bl	8007c8c <prvTaskCheckFreeStackSpace>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	461a      	mov	r2, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8007bd4:	e002      	b.n	8007bdc <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	841a      	strh	r2, [r3, #32]
	}
 8007bdc:	bf00      	nop
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	20000770 	.word	0x20000770

08007be8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08a      	sub	sp, #40	; 0x28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d03f      	beq.n	8007c82 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	623b      	str	r3, [r7, #32]
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	605a      	str	r2, [r3, #4]
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	3308      	adds	r3, #8
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d104      	bne.n	8007c26 <prvListTasksWithinSingleList+0x3e>
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	605a      	str	r2, [r3, #4]
 8007c26:	6a3b      	ldr	r3, [r7, #32]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	61bb      	str	r3, [r7, #24]
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	605a      	str	r2, [r3, #4]
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	685a      	ldr	r2, [r3, #4]
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	3308      	adds	r3, #8
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d104      	bne.n	8007c52 <prvListTasksWithinSingleList+0x6a>
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	605a      	str	r2, [r3, #4]
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8007c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5c:	4613      	mov	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	4413      	add	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	461a      	mov	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	1899      	adds	r1, r3, r2
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	6978      	ldr	r0, [r7, #20]
 8007c70:	f7ff ff54 	bl	8007b1c <vTaskGetInfo>
				uxTask++;
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	3301      	adds	r3, #1
 8007c78:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d1d5      	bne.n	8007c2e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3728      	adds	r7, #40	; 0x28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007c98:	e005      	b.n	8007ca6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2ba5      	cmp	r3, #165	; 0xa5
 8007cac:	d0f5      	beq.n	8007c9a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	089b      	lsrs	r3, r3, #2
 8007cb2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	b29b      	uxth	r3, r3
	}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3714      	adds	r7, #20
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d108      	bne.n	8007ce8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f001 f91a 	bl	8008f14 <vPortFree>
				vPortFree( pxTCB );
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f001 f917 	bl	8008f14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ce6:	e017      	b.n	8007d18 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d103      	bne.n	8007cfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f001 f90e 	bl	8008f14 <vPortFree>
	}
 8007cf8:	e00e      	b.n	8007d18 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d009      	beq.n	8007d18 <prvDeleteTCB+0x54>
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	e7fe      	b.n	8007d16 <prvDeleteTCB+0x52>
	}
 8007d18:	bf00      	nop
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d26:	4b0c      	ldr	r3, [pc, #48]	; (8007d58 <prvResetNextTaskUnblockTime+0x38>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d104      	bne.n	8007d3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d30:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <prvResetNextTaskUnblockTime+0x3c>)
 8007d32:	f04f 32ff 	mov.w	r2, #4294967295
 8007d36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d38:	e008      	b.n	8007d4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d3a:	4b07      	ldr	r3, [pc, #28]	; (8007d58 <prvResetNextTaskUnblockTime+0x38>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	4a04      	ldr	r2, [pc, #16]	; (8007d5c <prvResetNextTaskUnblockTime+0x3c>)
 8007d4a:	6013      	str	r3, [r2, #0]
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	20000bfc 	.word	0x20000bfc
 8007d5c:	20000c64 	.word	0x20000c64

08007d60 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007d66:	4b05      	ldr	r3, [pc, #20]	; (8007d7c <xTaskGetCurrentTaskHandle+0x1c>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007d6c:	687b      	ldr	r3, [r7, #4]
	}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	370c      	adds	r7, #12
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	20000770 	.word	0x20000770

08007d80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d86:	4b0b      	ldr	r3, [pc, #44]	; (8007db4 <xTaskGetSchedulerState+0x34>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d102      	bne.n	8007d94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	607b      	str	r3, [r7, #4]
 8007d92:	e008      	b.n	8007da6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d94:	4b08      	ldr	r3, [pc, #32]	; (8007db8 <xTaskGetSchedulerState+0x38>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d102      	bne.n	8007da2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d9c:	2302      	movs	r3, #2
 8007d9e:	607b      	str	r3, [r7, #4]
 8007da0:	e001      	b.n	8007da6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007da2:	2300      	movs	r3, #0
 8007da4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007da6:	687b      	ldr	r3, [r7, #4]
	}
 8007da8:	4618      	mov	r0, r3
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr
 8007db4:	20000c50 	.word	0x20000c50
 8007db8:	20000c6c 	.word	0x20000c6c

08007dbc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d051      	beq.n	8007e76 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dd6:	4b2a      	ldr	r3, [pc, #168]	; (8007e80 <xTaskPriorityInherit+0xc4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d241      	bcs.n	8007e64 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	db06      	blt.n	8007df6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007de8:	4b25      	ldr	r3, [pc, #148]	; (8007e80 <xTaskPriorityInherit+0xc4>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	6959      	ldr	r1, [r3, #20]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfe:	4613      	mov	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4a1f      	ldr	r2, [pc, #124]	; (8007e84 <xTaskPriorityInherit+0xc8>)
 8007e08:	4413      	add	r3, r2
 8007e0a:	4299      	cmp	r1, r3
 8007e0c:	d122      	bne.n	8007e54 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	3304      	adds	r3, #4
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fd fcfc 	bl	8005810 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e18:	4b19      	ldr	r3, [pc, #100]	; (8007e80 <xTaskPriorityInherit+0xc4>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e26:	4b18      	ldr	r3, [pc, #96]	; (8007e88 <xTaskPriorityInherit+0xcc>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d903      	bls.n	8007e36 <xTaskPriorityInherit+0x7a>
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e32:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <xTaskPriorityInherit+0xcc>)
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	4413      	add	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4a10      	ldr	r2, [pc, #64]	; (8007e84 <xTaskPriorityInherit+0xc8>)
 8007e44:	441a      	add	r2, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	f7fd fc82 	bl	8005756 <vListInsertEnd>
 8007e52:	e004      	b.n	8007e5e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e54:	4b0a      	ldr	r3, [pc, #40]	; (8007e80 <xTaskPriorityInherit+0xc4>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	e008      	b.n	8007e76 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e68:	4b05      	ldr	r3, [pc, #20]	; (8007e80 <xTaskPriorityInherit+0xc4>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d201      	bcs.n	8007e76 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007e72:	2301      	movs	r3, #1
 8007e74:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e76:	68fb      	ldr	r3, [r7, #12]
	}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	20000770 	.word	0x20000770
 8007e84:	20000774 	.word	0x20000774
 8007e88:	20000c4c 	.word	0x20000c4c

08007e8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d054      	beq.n	8007f4c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ea2:	4b2d      	ldr	r3, [pc, #180]	; (8007f58 <xTaskPriorityDisinherit+0xcc>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d009      	beq.n	8007ec0 <xTaskPriorityDisinherit+0x34>
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	60fb      	str	r3, [r7, #12]
 8007ebe:	e7fe      	b.n	8007ebe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d109      	bne.n	8007edc <xTaskPriorityDisinherit+0x50>
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	60bb      	str	r3, [r7, #8]
 8007eda:	e7fe      	b.n	8007eda <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ee0:	1e5a      	subs	r2, r3, #1
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d02c      	beq.n	8007f4c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d128      	bne.n	8007f4c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	3304      	adds	r3, #4
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fd fc86 	bl	8005810 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f1c:	4b0f      	ldr	r3, [pc, #60]	; (8007f5c <xTaskPriorityDisinherit+0xd0>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d903      	bls.n	8007f2c <xTaskPriorityDisinherit+0xa0>
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	4a0c      	ldr	r2, [pc, #48]	; (8007f5c <xTaskPriorityDisinherit+0xd0>)
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f30:	4613      	mov	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4a09      	ldr	r2, [pc, #36]	; (8007f60 <xTaskPriorityDisinherit+0xd4>)
 8007f3a:	441a      	add	r2, r3
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	4619      	mov	r1, r3
 8007f42:	4610      	mov	r0, r2
 8007f44:	f7fd fc07 	bl	8005756 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f4c:	697b      	ldr	r3, [r7, #20]
	}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20000770 	.word	0x20000770
 8007f5c:	20000c4c 	.word	0x20000c4c
 8007f60:	20000774 	.word	0x20000774

08007f64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b088      	sub	sp, #32
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007f72:	2301      	movs	r3, #1
 8007f74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d068      	beq.n	800804e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d109      	bne.n	8007f98 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	e7fe      	b.n	8007f96 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d902      	bls.n	8007fa8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	61fb      	str	r3, [r7, #28]
 8007fa6:	e002      	b.n	8007fae <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007fae:	69bb      	ldr	r3, [r7, #24]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d04a      	beq.n	800804e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d145      	bne.n	800804e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007fc2:	4b25      	ldr	r3, [pc, #148]	; (8008058 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d109      	bne.n	8007fe0 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8007fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd0:	f383 8811 	msr	BASEPRI, r3
 8007fd4:	f3bf 8f6f 	isb	sy
 8007fd8:	f3bf 8f4f 	dsb	sy
 8007fdc:	60bb      	str	r3, [r7, #8]
 8007fde:	e7fe      	b.n	8007fde <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	699b      	ldr	r3, [r3, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	db04      	blt.n	8007ffe <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	6959      	ldr	r1, [r3, #20]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4a13      	ldr	r2, [pc, #76]	; (800805c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800800e:	4413      	add	r3, r2
 8008010:	4299      	cmp	r1, r3
 8008012:	d11c      	bne.n	800804e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	3304      	adds	r3, #4
 8008018:	4618      	mov	r0, r3
 800801a:	f7fd fbf9 	bl	8005810 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008022:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	429a      	cmp	r2, r3
 8008028:	d903      	bls.n	8008032 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802e:	4a0c      	ldr	r2, [pc, #48]	; (8008060 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008030:	6013      	str	r3, [r2, #0]
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008036:	4613      	mov	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4a07      	ldr	r2, [pc, #28]	; (800805c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008040:	441a      	add	r2, r3
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	3304      	adds	r3, #4
 8008046:	4619      	mov	r1, r3
 8008048:	4610      	mov	r0, r2
 800804a:	f7fd fb84 	bl	8005756 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800804e:	bf00      	nop
 8008050:	3720      	adds	r7, #32
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	20000770 	.word	0x20000770
 800805c:	20000774 	.word	0x20000774
 8008060:	20000c4c 	.word	0x20000c4c

08008064 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f011 faf4 	bl	801965e <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7f8 f8c4 	bl	8000204 <strlen>
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	e007      	b.n	8008090 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4413      	add	r3, r2
 8008086:	2220      	movs	r2, #32
 8008088:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3301      	adds	r3, #1
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2b0e      	cmp	r3, #14
 8008094:	d9f4      	bls.n	8008080 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4413      	add	r3, r2
 800809c:	2200      	movs	r2, #0
 800809e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4413      	add	r3, r2
	}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
	...

080080b0 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80080be:	4b3a      	ldr	r3, [pc, #232]	; (80081a8 <vTaskGetRunTimeStats+0xf8>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80080c4:	4b38      	ldr	r3, [pc, #224]	; (80081a8 <vTaskGetRunTimeStats+0xf8>)
 80080c6:	681a      	ldr	r2, [r3, #0]
 80080c8:	4613      	mov	r3, r2
 80080ca:	00db      	lsls	r3, r3, #3
 80080cc:	4413      	add	r3, r2
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 fe5d 	bl	8008d90 <pvPortMalloc>
 80080d6:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d05f      	beq.n	800819e <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80080de:	f107 030c 	add.w	r3, r7, #12
 80080e2:	461a      	mov	r2, r3
 80080e4:	69b9      	ldr	r1, [r7, #24]
 80080e6:	6978      	ldr	r0, [r7, #20]
 80080e8:	f7ff f9a2 	bl	8007430 <uxTaskGetSystemState>
 80080ec:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4a2e      	ldr	r2, [pc, #184]	; (80081ac <vTaskGetRunTimeStats+0xfc>)
 80080f2:	fba2 2303 	umull	r2, r3, r2, r3
 80080f6:	095b      	lsrs	r3, r3, #5
 80080f8:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d04b      	beq.n	8008198 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8008100:	2300      	movs	r3, #0
 8008102:	61fb      	str	r3, [r7, #28]
 8008104:	e044      	b.n	8008190 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8008106:	69fa      	ldr	r2, [r7, #28]
 8008108:	4613      	mov	r3, r2
 800810a:	00db      	lsls	r3, r3, #3
 800810c:	4413      	add	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	461a      	mov	r2, r3
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	4413      	add	r3, r2
 8008116:	699a      	ldr	r2, [r3, #24]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	fbb2 f3f3 	udiv	r3, r2, r3
 800811e:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8008120:	69fa      	ldr	r2, [r7, #28]
 8008122:	4613      	mov	r3, r2
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	4413      	add	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	461a      	mov	r2, r3
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	4413      	add	r3, r2
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7ff ff95 	bl	8008064 <prvWriteNameToBuffer>
 800813a:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00e      	beq.n	8008160 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8008142:	69fa      	ldr	r2, [r7, #28]
 8008144:	4613      	mov	r3, r2
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	461a      	mov	r2, r3
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	4413      	add	r3, r2
 8008152:	699a      	ldr	r2, [r3, #24]
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	4916      	ldr	r1, [pc, #88]	; (80081b0 <vTaskGetRunTimeStats+0x100>)
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f011 fa53 	bl	8019604 <siprintf>
 800815e:	e00d      	b.n	800817c <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8008160:	69fa      	ldr	r2, [r7, #28]
 8008162:	4613      	mov	r3, r2
 8008164:	00db      	lsls	r3, r3, #3
 8008166:	4413      	add	r3, r2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	461a      	mov	r2, r3
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	4413      	add	r3, r2
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	461a      	mov	r2, r3
 8008174:	490f      	ldr	r1, [pc, #60]	; (80081b4 <vTaskGetRunTimeStats+0x104>)
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f011 fa44 	bl	8019604 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7f8 f841 	bl	8000204 <strlen>
 8008182:	4602      	mov	r2, r0
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4413      	add	r3, r2
 8008188:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	3301      	adds	r3, #1
 800818e:	61fb      	str	r3, [r7, #28]
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	429a      	cmp	r2, r3
 8008196:	d3b6      	bcc.n	8008106 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8008198:	6978      	ldr	r0, [r7, #20]
 800819a:	f000 febb 	bl	8008f14 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800819e:	bf00      	nop
 80081a0:	3720      	adds	r7, #32
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20000c44 	.word	0x20000c44
 80081ac:	51eb851f 	.word	0x51eb851f
 80081b0:	0801a964 	.word	0x0801a964
 80081b4:	0801a970 	.word	0x0801a970

080081b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80081bc:	4b07      	ldr	r3, [pc, #28]	; (80081dc <pvTaskIncrementMutexHeldCount+0x24>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d004      	beq.n	80081ce <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80081c4:	4b05      	ldr	r3, [pc, #20]	; (80081dc <pvTaskIncrementMutexHeldCount+0x24>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80081ca:	3201      	adds	r2, #1
 80081cc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80081ce:	4b03      	ldr	r3, [pc, #12]	; (80081dc <pvTaskIncrementMutexHeldCount+0x24>)
 80081d0:	681b      	ldr	r3, [r3, #0]
	}
 80081d2:	4618      	mov	r0, r3
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	20000770 	.word	0x20000770

080081e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081ea:	4b21      	ldr	r3, [pc, #132]	; (8008270 <prvAddCurrentTaskToDelayedList+0x90>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081f0:	4b20      	ldr	r3, [pc, #128]	; (8008274 <prvAddCurrentTaskToDelayedList+0x94>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3304      	adds	r3, #4
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fd fb0a 	bl	8005810 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008202:	d10a      	bne.n	800821a <prvAddCurrentTaskToDelayedList+0x3a>
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d007      	beq.n	800821a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800820a:	4b1a      	ldr	r3, [pc, #104]	; (8008274 <prvAddCurrentTaskToDelayedList+0x94>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3304      	adds	r3, #4
 8008210:	4619      	mov	r1, r3
 8008212:	4819      	ldr	r0, [pc, #100]	; (8008278 <prvAddCurrentTaskToDelayedList+0x98>)
 8008214:	f7fd fa9f 	bl	8005756 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008218:	e026      	b.n	8008268 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4413      	add	r3, r2
 8008220:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008222:	4b14      	ldr	r3, [pc, #80]	; (8008274 <prvAddCurrentTaskToDelayedList+0x94>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	429a      	cmp	r2, r3
 8008230:	d209      	bcs.n	8008246 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008232:	4b12      	ldr	r3, [pc, #72]	; (800827c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b0f      	ldr	r3, [pc, #60]	; (8008274 <prvAddCurrentTaskToDelayedList+0x94>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3304      	adds	r3, #4
 800823c:	4619      	mov	r1, r3
 800823e:	4610      	mov	r0, r2
 8008240:	f7fd faad 	bl	800579e <vListInsert>
}
 8008244:	e010      	b.n	8008268 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008246:	4b0e      	ldr	r3, [pc, #56]	; (8008280 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <prvAddCurrentTaskToDelayedList+0x94>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3304      	adds	r3, #4
 8008250:	4619      	mov	r1, r3
 8008252:	4610      	mov	r0, r2
 8008254:	f7fd faa3 	bl	800579e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008258:	4b0a      	ldr	r3, [pc, #40]	; (8008284 <prvAddCurrentTaskToDelayedList+0xa4>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	429a      	cmp	r2, r3
 8008260:	d202      	bcs.n	8008268 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008262:	4a08      	ldr	r2, [pc, #32]	; (8008284 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	6013      	str	r3, [r2, #0]
}
 8008268:	bf00      	nop
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20000c48 	.word	0x20000c48
 8008274:	20000770 	.word	0x20000770
 8008278:	20000c30 	.word	0x20000c30
 800827c:	20000c00 	.word	0x20000c00
 8008280:	20000bfc 	.word	0x20000bfc
 8008284:	20000c64 	.word	0x20000c64

08008288 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b08a      	sub	sp, #40	; 0x28
 800828c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800828e:	2300      	movs	r3, #0
 8008290:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008292:	f000 faff 	bl	8008894 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008296:	4b1c      	ldr	r3, [pc, #112]	; (8008308 <xTimerCreateTimerTask+0x80>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d021      	beq.n	80082e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082a6:	1d3a      	adds	r2, r7, #4
 80082a8:	f107 0108 	add.w	r1, r7, #8
 80082ac:	f107 030c 	add.w	r3, r7, #12
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fd fa09 	bl	80056c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	9202      	str	r2, [sp, #8]
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	2302      	movs	r3, #2
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	2300      	movs	r3, #0
 80082c6:	460a      	mov	r2, r1
 80082c8:	4910      	ldr	r1, [pc, #64]	; (800830c <xTimerCreateTimerTask+0x84>)
 80082ca:	4811      	ldr	r0, [pc, #68]	; (8008310 <xTimerCreateTimerTask+0x88>)
 80082cc:	f7fe fba6 	bl	8006a1c <xTaskCreateStatic>
 80082d0:	4602      	mov	r2, r0
 80082d2:	4b10      	ldr	r3, [pc, #64]	; (8008314 <xTimerCreateTimerTask+0x8c>)
 80082d4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082d6:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <xTimerCreateTimerTask+0x8c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082de:	2301      	movs	r3, #1
 80082e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d109      	bne.n	80082fc <xTimerCreateTimerTask+0x74>
 80082e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ec:	f383 8811 	msr	BASEPRI, r3
 80082f0:	f3bf 8f6f 	isb	sy
 80082f4:	f3bf 8f4f 	dsb	sy
 80082f8:	613b      	str	r3, [r7, #16]
 80082fa:	e7fe      	b.n	80082fa <xTimerCreateTimerTask+0x72>
	return xReturn;
 80082fc:	697b      	ldr	r3, [r7, #20]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000ca8 	.word	0x20000ca8
 800830c:	0801a97c 	.word	0x0801a97c
 8008310:	08008449 	.word	0x08008449
 8008314:	20000cac 	.word	0x20000cac

08008318 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	; 0x28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008326:	2300      	movs	r3, #0
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d109      	bne.n	8008344 <xTimerGenericCommand+0x2c>
 8008330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	623b      	str	r3, [r7, #32]
 8008342:	e7fe      	b.n	8008342 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008344:	4b19      	ldr	r3, [pc, #100]	; (80083ac <xTimerGenericCommand+0x94>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d02a      	beq.n	80083a2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2b05      	cmp	r3, #5
 800835c:	dc18      	bgt.n	8008390 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800835e:	f7ff fd0f 	bl	8007d80 <xTaskGetSchedulerState>
 8008362:	4603      	mov	r3, r0
 8008364:	2b02      	cmp	r3, #2
 8008366:	d109      	bne.n	800837c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008368:	4b10      	ldr	r3, [pc, #64]	; (80083ac <xTimerGenericCommand+0x94>)
 800836a:	6818      	ldr	r0, [r3, #0]
 800836c:	f107 0110 	add.w	r1, r7, #16
 8008370:	2300      	movs	r3, #0
 8008372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008374:	f7fd fcce 	bl	8005d14 <xQueueGenericSend>
 8008378:	6278      	str	r0, [r7, #36]	; 0x24
 800837a:	e012      	b.n	80083a2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800837c:	4b0b      	ldr	r3, [pc, #44]	; (80083ac <xTimerGenericCommand+0x94>)
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	f107 0110 	add.w	r1, r7, #16
 8008384:	2300      	movs	r3, #0
 8008386:	2200      	movs	r2, #0
 8008388:	f7fd fcc4 	bl	8005d14 <xQueueGenericSend>
 800838c:	6278      	str	r0, [r7, #36]	; 0x24
 800838e:	e008      	b.n	80083a2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008390:	4b06      	ldr	r3, [pc, #24]	; (80083ac <xTimerGenericCommand+0x94>)
 8008392:	6818      	ldr	r0, [r3, #0]
 8008394:	f107 0110 	add.w	r1, r7, #16
 8008398:	2300      	movs	r3, #0
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	f7fd fdb4 	bl	8005f08 <xQueueGenericSendFromISR>
 80083a0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3728      	adds	r7, #40	; 0x28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20000ca8 	.word	0x20000ca8

080083b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ba:	4b22      	ldr	r3, [pc, #136]	; (8008444 <prvProcessExpiredTimer+0x94>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fd fa21 	bl	8005810 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d021      	beq.n	8008420 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	699a      	ldr	r2, [r3, #24]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	18d1      	adds	r1, r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	6978      	ldr	r0, [r7, #20]
 80083ea:	f000 f8d1 	bl	8008590 <prvInsertTimerInActiveList>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d01e      	beq.n	8008432 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083f4:	2300      	movs	r3, #0
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	2300      	movs	r3, #0
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	2100      	movs	r1, #0
 80083fe:	6978      	ldr	r0, [r7, #20]
 8008400:	f7ff ff8a 	bl	8008318 <xTimerGenericCommand>
 8008404:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d112      	bne.n	8008432 <prvProcessExpiredTimer+0x82>
 800840c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	60fb      	str	r3, [r7, #12]
 800841e:	e7fe      	b.n	800841e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008426:	f023 0301 	bic.w	r3, r3, #1
 800842a:	b2da      	uxtb	r2, r3
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	6978      	ldr	r0, [r7, #20]
 8008438:	4798      	blx	r3
}
 800843a:	bf00      	nop
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	20000ca0 	.word	0x20000ca0

08008448 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008450:	f107 0308 	add.w	r3, r7, #8
 8008454:	4618      	mov	r0, r3
 8008456:	f000 f857 	bl	8008508 <prvGetNextExpireTime>
 800845a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	4619      	mov	r1, r3
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f000 f803 	bl	800846c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008466:	f000 f8d5 	bl	8008614 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800846a:	e7f1      	b.n	8008450 <prvTimerTask+0x8>

0800846c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008476:	f7fe ff0f 	bl	8007298 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800847a:	f107 0308 	add.w	r3, r7, #8
 800847e:	4618      	mov	r0, r3
 8008480:	f000 f866 	bl	8008550 <prvSampleTimeNow>
 8008484:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d130      	bne.n	80084ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10a      	bne.n	80084a8 <prvProcessTimerOrBlockTask+0x3c>
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	429a      	cmp	r2, r3
 8008498:	d806      	bhi.n	80084a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800849a:	f7fe ff0b 	bl	80072b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800849e:	68f9      	ldr	r1, [r7, #12]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f7ff ff85 	bl	80083b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084a6:	e024      	b.n	80084f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d008      	beq.n	80084c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084ae:	4b13      	ldr	r3, [pc, #76]	; (80084fc <prvProcessTimerOrBlockTask+0x90>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <prvProcessTimerOrBlockTask+0x50>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e000      	b.n	80084be <prvProcessTimerOrBlockTask+0x52>
 80084bc:	2300      	movs	r3, #0
 80084be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084c0:	4b0f      	ldr	r3, [pc, #60]	; (8008500 <prvProcessTimerOrBlockTask+0x94>)
 80084c2:	6818      	ldr	r0, [r3, #0]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	4619      	mov	r1, r3
 80084ce:	f7fe fa71 	bl	80069b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084d2:	f7fe feef 	bl	80072b4 <xTaskResumeAll>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084dc:	4b09      	ldr	r3, [pc, #36]	; (8008504 <prvProcessTimerOrBlockTask+0x98>)
 80084de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084e2:	601a      	str	r2, [r3, #0]
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	f3bf 8f6f 	isb	sy
}
 80084ec:	e001      	b.n	80084f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084ee:	f7fe fee1 	bl	80072b4 <xTaskResumeAll>
}
 80084f2:	bf00      	nop
 80084f4:	3710      	adds	r7, #16
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop
 80084fc:	20000ca4 	.word	0x20000ca4
 8008500:	20000ca8 	.word	0x20000ca8
 8008504:	e000ed04 	.word	0xe000ed04

08008508 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008510:	4b0e      	ldr	r3, [pc, #56]	; (800854c <prvGetNextExpireTime+0x44>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <prvGetNextExpireTime+0x16>
 800851a:	2201      	movs	r2, #1
 800851c:	e000      	b.n	8008520 <prvGetNextExpireTime+0x18>
 800851e:	2200      	movs	r2, #0
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d105      	bne.n	8008538 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800852c:	4b07      	ldr	r3, [pc, #28]	; (800854c <prvGetNextExpireTime+0x44>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	e001      	b.n	800853c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800853c:	68fb      	ldr	r3, [r7, #12]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	20000ca0 	.word	0x20000ca0

08008550 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008558:	f7fe ff48 	bl	80073ec <xTaskGetTickCount>
 800855c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800855e:	4b0b      	ldr	r3, [pc, #44]	; (800858c <prvSampleTimeNow+0x3c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	429a      	cmp	r2, r3
 8008566:	d205      	bcs.n	8008574 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008568:	f000 f930 	bl	80087cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	601a      	str	r2, [r3, #0]
 8008572:	e002      	b.n	800857a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800857a:	4a04      	ldr	r2, [pc, #16]	; (800858c <prvSampleTimeNow+0x3c>)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008580:	68fb      	ldr	r3, [r7, #12]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20000cb0 	.word	0x20000cb0

08008590 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b086      	sub	sp, #24
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
 800859c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800859e:	2300      	movs	r3, #0
 80085a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d812      	bhi.n	80085dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	1ad2      	subs	r2, r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d302      	bcc.n	80085ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085c4:	2301      	movs	r3, #1
 80085c6:	617b      	str	r3, [r7, #20]
 80085c8:	e01b      	b.n	8008602 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085ca:	4b10      	ldr	r3, [pc, #64]	; (800860c <prvInsertTimerInActiveList+0x7c>)
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3304      	adds	r3, #4
 80085d2:	4619      	mov	r1, r3
 80085d4:	4610      	mov	r0, r2
 80085d6:	f7fd f8e2 	bl	800579e <vListInsert>
 80085da:	e012      	b.n	8008602 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d206      	bcs.n	80085f2 <prvInsertTimerInActiveList+0x62>
 80085e4:	68ba      	ldr	r2, [r7, #8]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d302      	bcc.n	80085f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085ec:	2301      	movs	r3, #1
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	e007      	b.n	8008602 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085f2:	4b07      	ldr	r3, [pc, #28]	; (8008610 <prvInsertTimerInActiveList+0x80>)
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3304      	adds	r3, #4
 80085fa:	4619      	mov	r1, r3
 80085fc:	4610      	mov	r0, r2
 80085fe:	f7fd f8ce 	bl	800579e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008602:	697b      	ldr	r3, [r7, #20]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3718      	adds	r7, #24
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	20000ca4 	.word	0x20000ca4
 8008610:	20000ca0 	.word	0x20000ca0

08008614 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b08e      	sub	sp, #56	; 0x38
 8008618:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800861a:	e0c6      	b.n	80087aa <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	da17      	bge.n	8008652 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008622:	1d3b      	adds	r3, r7, #4
 8008624:	3304      	adds	r3, #4
 8008626:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d109      	bne.n	8008642 <prvProcessReceivedCommands+0x2e>
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	61fb      	str	r3, [r7, #28]
 8008640:	e7fe      	b.n	8008640 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008648:	6850      	ldr	r0, [r2, #4]
 800864a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800864c:	6892      	ldr	r2, [r2, #8]
 800864e:	4611      	mov	r1, r2
 8008650:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	f2c0 80a7 	blt.w	80087a8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d004      	beq.n	8008670 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	3304      	adds	r3, #4
 800866a:	4618      	mov	r0, r3
 800866c:	f7fd f8d0 	bl	8005810 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008670:	463b      	mov	r3, r7
 8008672:	4618      	mov	r0, r3
 8008674:	f7ff ff6c 	bl	8008550 <prvSampleTimeNow>
 8008678:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b09      	cmp	r3, #9
 800867e:	f200 8094 	bhi.w	80087aa <prvProcessReceivedCommands+0x196>
 8008682:	a201      	add	r2, pc, #4	; (adr r2, 8008688 <prvProcessReceivedCommands+0x74>)
 8008684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008688:	080086b1 	.word	0x080086b1
 800868c:	080086b1 	.word	0x080086b1
 8008690:	080086b1 	.word	0x080086b1
 8008694:	08008723 	.word	0x08008723
 8008698:	08008737 	.word	0x08008737
 800869c:	0800877f 	.word	0x0800877f
 80086a0:	080086b1 	.word	0x080086b1
 80086a4:	080086b1 	.word	0x080086b1
 80086a8:	08008723 	.word	0x08008723
 80086ac:	08008737 	.word	0x08008737
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086b6:	f043 0301 	orr.w	r3, r3, #1
 80086ba:	b2da      	uxtb	r2, r3
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	18d1      	adds	r1, r2, r3
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086d0:	f7ff ff5e 	bl	8008590 <prvInsertTimerInActiveList>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d067      	beq.n	80087aa <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086e8:	f003 0304 	and.w	r3, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d05c      	beq.n	80087aa <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	699b      	ldr	r3, [r3, #24]
 80086f6:	441a      	add	r2, r3
 80086f8:	2300      	movs	r3, #0
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	2300      	movs	r3, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008702:	f7ff fe09 	bl	8008318 <xTimerGenericCommand>
 8008706:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d14d      	bne.n	80087aa <prvProcessReceivedCommands+0x196>
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	61bb      	str	r3, [r7, #24]
 8008720:	e7fe      	b.n	8008720 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008728:	f023 0301 	bic.w	r3, r3, #1
 800872c:	b2da      	uxtb	r2, r3
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008734:	e039      	b.n	80087aa <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800873c:	f043 0301 	orr.w	r3, r3, #1
 8008740:	b2da      	uxtb	r2, r3
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d109      	bne.n	800876a <prvProcessReceivedCommands+0x156>
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	617b      	str	r3, [r7, #20]
 8008768:	e7fe      	b.n	8008768 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800876a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876c:	699a      	ldr	r2, [r3, #24]
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	18d1      	adds	r1, r2, r3
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008778:	f7ff ff0a 	bl	8008590 <prvInsertTimerInActiveList>
					break;
 800877c:	e015      	b.n	80087aa <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008784:	f003 0302 	and.w	r3, r3, #2
 8008788:	2b00      	cmp	r3, #0
 800878a:	d103      	bne.n	8008794 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800878c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800878e:	f000 fbc1 	bl	8008f14 <vPortFree>
 8008792:	e00a      	b.n	80087aa <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800879a:	f023 0301 	bic.w	r3, r3, #1
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087a6:	e000      	b.n	80087aa <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80087a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087aa:	4b07      	ldr	r3, [pc, #28]	; (80087c8 <prvProcessReceivedCommands+0x1b4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	1d39      	adds	r1, r7, #4
 80087b0:	2200      	movs	r2, #0
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fd fcc6 	bl	8006144 <xQueueReceive>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f47f af2e 	bne.w	800861c <prvProcessReceivedCommands+0x8>
	}
}
 80087c0:	bf00      	nop
 80087c2:	3730      	adds	r7, #48	; 0x30
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20000ca8 	.word	0x20000ca8

080087cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b088      	sub	sp, #32
 80087d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087d2:	e047      	b.n	8008864 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087d4:	4b2d      	ldr	r3, [pc, #180]	; (800888c <prvSwitchTimerLists+0xc0>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087de:	4b2b      	ldr	r3, [pc, #172]	; (800888c <prvSwitchTimerLists+0xc0>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fd f80f 	bl	8005810 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008800:	f003 0304 	and.w	r3, r3, #4
 8008804:	2b00      	cmp	r3, #0
 8008806:	d02d      	beq.n	8008864 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	693a      	ldr	r2, [r7, #16]
 800880e:	4413      	add	r3, r2
 8008810:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	429a      	cmp	r2, r3
 8008818:	d90e      	bls.n	8008838 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008826:	4b19      	ldr	r3, [pc, #100]	; (800888c <prvSwitchTimerLists+0xc0>)
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	3304      	adds	r3, #4
 800882e:	4619      	mov	r1, r3
 8008830:	4610      	mov	r0, r2
 8008832:	f7fc ffb4 	bl	800579e <vListInsert>
 8008836:	e015      	b.n	8008864 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008838:	2300      	movs	r3, #0
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	2300      	movs	r3, #0
 800883e:	693a      	ldr	r2, [r7, #16]
 8008840:	2100      	movs	r1, #0
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f7ff fd68 	bl	8008318 <xTimerGenericCommand>
 8008848:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d109      	bne.n	8008864 <prvSwitchTimerLists+0x98>
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	603b      	str	r3, [r7, #0]
 8008862:	e7fe      	b.n	8008862 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008864:	4b09      	ldr	r3, [pc, #36]	; (800888c <prvSwitchTimerLists+0xc0>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1b2      	bne.n	80087d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800886e:	4b07      	ldr	r3, [pc, #28]	; (800888c <prvSwitchTimerLists+0xc0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008874:	4b06      	ldr	r3, [pc, #24]	; (8008890 <prvSwitchTimerLists+0xc4>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a04      	ldr	r2, [pc, #16]	; (800888c <prvSwitchTimerLists+0xc0>)
 800887a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800887c:	4a04      	ldr	r2, [pc, #16]	; (8008890 <prvSwitchTimerLists+0xc4>)
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	6013      	str	r3, [r2, #0]
}
 8008882:	bf00      	nop
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	20000ca0 	.word	0x20000ca0
 8008890:	20000ca4 	.word	0x20000ca4

08008894 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800889a:	f000 f95f 	bl	8008b5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800889e:	4b15      	ldr	r3, [pc, #84]	; (80088f4 <prvCheckForValidListAndQueue+0x60>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d120      	bne.n	80088e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088a6:	4814      	ldr	r0, [pc, #80]	; (80088f8 <prvCheckForValidListAndQueue+0x64>)
 80088a8:	f7fc ff28 	bl	80056fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088ac:	4813      	ldr	r0, [pc, #76]	; (80088fc <prvCheckForValidListAndQueue+0x68>)
 80088ae:	f7fc ff25 	bl	80056fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088b2:	4b13      	ldr	r3, [pc, #76]	; (8008900 <prvCheckForValidListAndQueue+0x6c>)
 80088b4:	4a10      	ldr	r2, [pc, #64]	; (80088f8 <prvCheckForValidListAndQueue+0x64>)
 80088b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088b8:	4b12      	ldr	r3, [pc, #72]	; (8008904 <prvCheckForValidListAndQueue+0x70>)
 80088ba:	4a10      	ldr	r2, [pc, #64]	; (80088fc <prvCheckForValidListAndQueue+0x68>)
 80088bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088be:	2300      	movs	r3, #0
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	4b11      	ldr	r3, [pc, #68]	; (8008908 <prvCheckForValidListAndQueue+0x74>)
 80088c4:	4a11      	ldr	r2, [pc, #68]	; (800890c <prvCheckForValidListAndQueue+0x78>)
 80088c6:	2110      	movs	r1, #16
 80088c8:	200a      	movs	r0, #10
 80088ca:	f7fd f833 	bl	8005934 <xQueueGenericCreateStatic>
 80088ce:	4602      	mov	r2, r0
 80088d0:	4b08      	ldr	r3, [pc, #32]	; (80088f4 <prvCheckForValidListAndQueue+0x60>)
 80088d2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088d4:	4b07      	ldr	r3, [pc, #28]	; (80088f4 <prvCheckForValidListAndQueue+0x60>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088dc:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <prvCheckForValidListAndQueue+0x60>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	490b      	ldr	r1, [pc, #44]	; (8008910 <prvCheckForValidListAndQueue+0x7c>)
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe f814 	bl	8006910 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088e8:	f000 f966 	bl	8008bb8 <vPortExitCritical>
}
 80088ec:	bf00      	nop
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20000ca8 	.word	0x20000ca8
 80088f8:	20000c78 	.word	0x20000c78
 80088fc:	20000c8c 	.word	0x20000c8c
 8008900:	20000ca0 	.word	0x20000ca0
 8008904:	20000ca4 	.word	0x20000ca4
 8008908:	20000d54 	.word	0x20000d54
 800890c:	20000cb4 	.word	0x20000cb4
 8008910:	0801a984 	.word	0x0801a984

08008914 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3b04      	subs	r3, #4
 8008924:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800892c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3b04      	subs	r3, #4
 8008932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f023 0201 	bic.w	r2, r3, #1
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3b04      	subs	r3, #4
 8008942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008944:	4a0c      	ldr	r2, [pc, #48]	; (8008978 <pxPortInitialiseStack+0x64>)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3b14      	subs	r3, #20
 800894e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3b04      	subs	r3, #4
 800895a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f06f 0202 	mvn.w	r2, #2
 8008962:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3b20      	subs	r3, #32
 8008968:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800896a:	68fb      	ldr	r3, [r7, #12]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	0800897d 	.word	0x0800897d

0800897c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008986:	4b11      	ldr	r3, [pc, #68]	; (80089cc <prvTaskExitError+0x50>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898e:	d009      	beq.n	80089a4 <prvTaskExitError+0x28>
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	e7fe      	b.n	80089a2 <prvTaskExitError+0x26>
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089b6:	bf00      	nop
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0fc      	beq.n	80089b8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089be:	bf00      	nop
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	2000000c 	.word	0x2000000c

080089d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089d0:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <pxCurrentTCBConst2>)
 80089d2:	6819      	ldr	r1, [r3, #0]
 80089d4:	6808      	ldr	r0, [r1, #0]
 80089d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089da:	f380 8809 	msr	PSP, r0
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f04f 0000 	mov.w	r0, #0
 80089e6:	f380 8811 	msr	BASEPRI, r0
 80089ea:	4770      	bx	lr
 80089ec:	f3af 8000 	nop.w

080089f0 <pxCurrentTCBConst2>:
 80089f0:	20000770 	.word	0x20000770
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop

080089f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089f8:	4808      	ldr	r0, [pc, #32]	; (8008a1c <prvPortStartFirstTask+0x24>)
 80089fa:	6800      	ldr	r0, [r0, #0]
 80089fc:	6800      	ldr	r0, [r0, #0]
 80089fe:	f380 8808 	msr	MSP, r0
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f380 8814 	msr	CONTROL, r0
 8008a0a:	b662      	cpsie	i
 8008a0c:	b661      	cpsie	f
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	df00      	svc	0
 8008a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a1a:	bf00      	nop
 8008a1c:	e000ed08 	.word	0xe000ed08

08008a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a26:	4b44      	ldr	r3, [pc, #272]	; (8008b38 <xPortStartScheduler+0x118>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a44      	ldr	r2, [pc, #272]	; (8008b3c <xPortStartScheduler+0x11c>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d109      	bne.n	8008a44 <xPortStartScheduler+0x24>
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	613b      	str	r3, [r7, #16]
 8008a42:	e7fe      	b.n	8008a42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a44:	4b3c      	ldr	r3, [pc, #240]	; (8008b38 <xPortStartScheduler+0x118>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a3d      	ldr	r2, [pc, #244]	; (8008b40 <xPortStartScheduler+0x120>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d109      	bne.n	8008a62 <xPortStartScheduler+0x42>
 8008a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	e7fe      	b.n	8008a60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a62:	4b38      	ldr	r3, [pc, #224]	; (8008b44 <xPortStartScheduler+0x124>)
 8008a64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	22ff      	movs	r2, #255	; 0xff
 8008a72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a7c:	78fb      	ldrb	r3, [r7, #3]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	4b30      	ldr	r3, [pc, #192]	; (8008b48 <xPortStartScheduler+0x128>)
 8008a88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a8a:	4b30      	ldr	r3, [pc, #192]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008a8c:	2207      	movs	r2, #7
 8008a8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a90:	e009      	b.n	8008aa6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008a92:	4b2e      	ldr	r3, [pc, #184]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	4a2c      	ldr	r2, [pc, #176]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008a9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aa6:	78fb      	ldrb	r3, [r7, #3]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aae:	2b80      	cmp	r3, #128	; 0x80
 8008ab0:	d0ef      	beq.n	8008a92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ab2:	4b26      	ldr	r3, [pc, #152]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f1c3 0307 	rsb	r3, r3, #7
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d009      	beq.n	8008ad2 <xPortStartScheduler+0xb2>
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	60bb      	str	r3, [r7, #8]
 8008ad0:	e7fe      	b.n	8008ad0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ad2:	4b1e      	ldr	r3, [pc, #120]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	4a1c      	ldr	r2, [pc, #112]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008ada:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008adc:	4b1b      	ldr	r3, [pc, #108]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ae4:	4a19      	ldr	r2, [pc, #100]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008ae6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008af0:	4b17      	ldr	r3, [pc, #92]	; (8008b50 <xPortStartScheduler+0x130>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a16      	ldr	r2, [pc, #88]	; (8008b50 <xPortStartScheduler+0x130>)
 8008af6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008afa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008afc:	4b14      	ldr	r3, [pc, #80]	; (8008b50 <xPortStartScheduler+0x130>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a13      	ldr	r2, [pc, #76]	; (8008b50 <xPortStartScheduler+0x130>)
 8008b02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b08:	f000 f8d6 	bl	8008cb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b0c:	4b11      	ldr	r3, [pc, #68]	; (8008b54 <xPortStartScheduler+0x134>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b12:	f000 f8f5 	bl	8008d00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b16:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <xPortStartScheduler+0x138>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a0f      	ldr	r2, [pc, #60]	; (8008b58 <xPortStartScheduler+0x138>)
 8008b1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b22:	f7ff ff69 	bl	80089f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b26:	f7fe fdcb 	bl	80076c0 <vTaskSwitchContext>
	prvTaskExitError();
 8008b2a:	f7ff ff27 	bl	800897c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	e000ed00 	.word	0xe000ed00
 8008b3c:	410fc271 	.word	0x410fc271
 8008b40:	410fc270 	.word	0x410fc270
 8008b44:	e000e400 	.word	0xe000e400
 8008b48:	20000da4 	.word	0x20000da4
 8008b4c:	20000da8 	.word	0x20000da8
 8008b50:	e000ed20 	.word	0xe000ed20
 8008b54:	2000000c 	.word	0x2000000c
 8008b58:	e000ef34 	.word	0xe000ef34

08008b5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b74:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <vPortEnterCritical+0x54>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	4a0d      	ldr	r2, [pc, #52]	; (8008bb0 <vPortEnterCritical+0x54>)
 8008b7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b7e:	4b0c      	ldr	r3, [pc, #48]	; (8008bb0 <vPortEnterCritical+0x54>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d10e      	bne.n	8008ba4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b86:	4b0b      	ldr	r3, [pc, #44]	; (8008bb4 <vPortEnterCritical+0x58>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d009      	beq.n	8008ba4 <vPortEnterCritical+0x48>
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	603b      	str	r3, [r7, #0]
 8008ba2:	e7fe      	b.n	8008ba2 <vPortEnterCritical+0x46>
	}
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	2000000c 	.word	0x2000000c
 8008bb4:	e000ed04 	.word	0xe000ed04

08008bb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bbe:	4b11      	ldr	r3, [pc, #68]	; (8008c04 <vPortExitCritical+0x4c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d109      	bne.n	8008bda <vPortExitCritical+0x22>
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	607b      	str	r3, [r7, #4]
 8008bd8:	e7fe      	b.n	8008bd8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008bda:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <vPortExitCritical+0x4c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3b01      	subs	r3, #1
 8008be0:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <vPortExitCritical+0x4c>)
 8008be2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008be4:	4b07      	ldr	r3, [pc, #28]	; (8008c04 <vPortExitCritical+0x4c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d104      	bne.n	8008bf6 <vPortExitCritical+0x3e>
 8008bec:	2300      	movs	r3, #0
 8008bee:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	2000000c 	.word	0x2000000c
	...

08008c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c10:	f3ef 8009 	mrs	r0, PSP
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	4b15      	ldr	r3, [pc, #84]	; (8008c70 <pxCurrentTCBConst>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	f01e 0f10 	tst.w	lr, #16
 8008c20:	bf08      	it	eq
 8008c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2a:	6010      	str	r0, [r2, #0]
 8008c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c34:	f380 8811 	msr	BASEPRI, r0
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f7fe fd3e 	bl	80076c0 <vTaskSwitchContext>
 8008c44:	f04f 0000 	mov.w	r0, #0
 8008c48:	f380 8811 	msr	BASEPRI, r0
 8008c4c:	bc09      	pop	{r0, r3}
 8008c4e:	6819      	ldr	r1, [r3, #0]
 8008c50:	6808      	ldr	r0, [r1, #0]
 8008c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c56:	f01e 0f10 	tst.w	lr, #16
 8008c5a:	bf08      	it	eq
 8008c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c60:	f380 8809 	msr	PSP, r0
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	f3af 8000 	nop.w

08008c70 <pxCurrentTCBConst>:
 8008c70:	20000770 	.word	0x20000770
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop

08008c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c90:	f7fe fc5e 	bl	8007550 <xTaskIncrementTick>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c9a:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <SysTick_Handler+0x3c>)
 8008c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	e000ed04 	.word	0xe000ed04

08008cb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cbc:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <vPortSetupTimerInterrupt+0x34>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cc2:	4b0b      	ldr	r3, [pc, #44]	; (8008cf0 <vPortSetupTimerInterrupt+0x38>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cc8:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <vPortSetupTimerInterrupt+0x3c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a0a      	ldr	r2, [pc, #40]	; (8008cf8 <vPortSetupTimerInterrupt+0x40>)
 8008cce:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd2:	099b      	lsrs	r3, r3, #6
 8008cd4:	4a09      	ldr	r2, [pc, #36]	; (8008cfc <vPortSetupTimerInterrupt+0x44>)
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cda:	4b04      	ldr	r3, [pc, #16]	; (8008cec <vPortSetupTimerInterrupt+0x34>)
 8008cdc:	2207      	movs	r2, #7
 8008cde:	601a      	str	r2, [r3, #0]
}
 8008ce0:	bf00      	nop
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	e000e010 	.word	0xe000e010
 8008cf0:	e000e018 	.word	0xe000e018
 8008cf4:	20000000 	.word	0x20000000
 8008cf8:	10624dd3 	.word	0x10624dd3
 8008cfc:	e000e014 	.word	0xe000e014

08008d00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d10 <vPortEnableVFP+0x10>
 8008d04:	6801      	ldr	r1, [r0, #0]
 8008d06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d0a:	6001      	str	r1, [r0, #0]
 8008d0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d0e:	bf00      	nop
 8008d10:	e000ed88 	.word	0xe000ed88

08008d14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d1a:	f3ef 8305 	mrs	r3, IPSR
 8008d1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b0f      	cmp	r3, #15
 8008d24:	d913      	bls.n	8008d4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d26:	4a16      	ldr	r2, [pc, #88]	; (8008d80 <vPortValidateInterruptPriority+0x6c>)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d30:	4b14      	ldr	r3, [pc, #80]	; (8008d84 <vPortValidateInterruptPriority+0x70>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	7afa      	ldrb	r2, [r7, #11]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d209      	bcs.n	8008d4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	607b      	str	r3, [r7, #4]
 8008d4c:	e7fe      	b.n	8008d4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d4e:	4b0e      	ldr	r3, [pc, #56]	; (8008d88 <vPortValidateInterruptPriority+0x74>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d56:	4b0d      	ldr	r3, [pc, #52]	; (8008d8c <vPortValidateInterruptPriority+0x78>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d909      	bls.n	8008d72 <vPortValidateInterruptPriority+0x5e>
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	e7fe      	b.n	8008d70 <vPortValidateInterruptPriority+0x5c>
	}
 8008d72:	bf00      	nop
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	e000e3f0 	.word	0xe000e3f0
 8008d84:	20000da4 	.word	0x20000da4
 8008d88:	e000ed0c 	.word	0xe000ed0c
 8008d8c:	20000da8 	.word	0x20000da8

08008d90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08a      	sub	sp, #40	; 0x28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d9c:	f7fe fa7c 	bl	8007298 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008da0:	4b57      	ldr	r3, [pc, #348]	; (8008f00 <pvPortMalloc+0x170>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008da8:	f000 f90c 	bl	8008fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008dac:	4b55      	ldr	r3, [pc, #340]	; (8008f04 <pvPortMalloc+0x174>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4013      	ands	r3, r2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f040 808c 	bne.w	8008ed2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01c      	beq.n	8008dfa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f003 0307 	and.w	r3, r3, #7
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d013      	beq.n	8008dfa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f023 0307 	bic.w	r3, r3, #7
 8008dd8:	3308      	adds	r3, #8
 8008dda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d009      	beq.n	8008dfa <pvPortMalloc+0x6a>
 8008de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	617b      	str	r3, [r7, #20]
 8008df8:	e7fe      	b.n	8008df8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d068      	beq.n	8008ed2 <pvPortMalloc+0x142>
 8008e00:	4b41      	ldr	r3, [pc, #260]	; (8008f08 <pvPortMalloc+0x178>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d863      	bhi.n	8008ed2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e0a:	4b40      	ldr	r3, [pc, #256]	; (8008f0c <pvPortMalloc+0x17c>)
 8008e0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e0e:	4b3f      	ldr	r3, [pc, #252]	; (8008f0c <pvPortMalloc+0x17c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e14:	e004      	b.n	8008e20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d903      	bls.n	8008e32 <pvPortMalloc+0xa2>
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1f1      	bne.n	8008e16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e32:	4b33      	ldr	r3, [pc, #204]	; (8008f00 <pvPortMalloc+0x170>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d04a      	beq.n	8008ed2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2208      	movs	r2, #8
 8008e42:	4413      	add	r3, r2
 8008e44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	6a3b      	ldr	r3, [r7, #32]
 8008e4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	1ad2      	subs	r2, r2, r3
 8008e56:	2308      	movs	r3, #8
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d91e      	bls.n	8008e9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4413      	add	r3, r2
 8008e64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d009      	beq.n	8008e84 <pvPortMalloc+0xf4>
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	613b      	str	r3, [r7, #16]
 8008e82:	e7fe      	b.n	8008e82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	1ad2      	subs	r2, r2, r3
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e96:	69b8      	ldr	r0, [r7, #24]
 8008e98:	f000 f8f6 	bl	8009088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e9c:	4b1a      	ldr	r3, [pc, #104]	; (8008f08 <pvPortMalloc+0x178>)
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	4a18      	ldr	r2, [pc, #96]	; (8008f08 <pvPortMalloc+0x178>)
 8008ea8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008eaa:	4b17      	ldr	r3, [pc, #92]	; (8008f08 <pvPortMalloc+0x178>)
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	4b18      	ldr	r3, [pc, #96]	; (8008f10 <pvPortMalloc+0x180>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d203      	bcs.n	8008ebe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008eb6:	4b14      	ldr	r3, [pc, #80]	; (8008f08 <pvPortMalloc+0x178>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a15      	ldr	r2, [pc, #84]	; (8008f10 <pvPortMalloc+0x180>)
 8008ebc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	4b10      	ldr	r3, [pc, #64]	; (8008f04 <pvPortMalloc+0x174>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ed2:	f7fe f9ef 	bl	80072b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	f003 0307 	and.w	r3, r3, #7
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d009      	beq.n	8008ef4 <pvPortMalloc+0x164>
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	e7fe      	b.n	8008ef2 <pvPortMalloc+0x162>
	return pvReturn;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3728      	adds	r7, #40	; 0x28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	2000fdb4 	.word	0x2000fdb4
 8008f04:	2000fdc0 	.word	0x2000fdc0
 8008f08:	2000fdb8 	.word	0x2000fdb8
 8008f0c:	2000fdac 	.word	0x2000fdac
 8008f10:	2000fdbc 	.word	0x2000fdbc

08008f14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d046      	beq.n	8008fb4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f26:	2308      	movs	r3, #8
 8008f28:	425b      	negs	r3, r3
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	4b20      	ldr	r3, [pc, #128]	; (8008fbc <vPortFree+0xa8>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d109      	bne.n	8008f56 <vPortFree+0x42>
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	e7fe      	b.n	8008f54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d009      	beq.n	8008f72 <vPortFree+0x5e>
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	60bb      	str	r3, [r7, #8]
 8008f70:	e7fe      	b.n	8008f70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	4b11      	ldr	r3, [pc, #68]	; (8008fbc <vPortFree+0xa8>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d019      	beq.n	8008fb4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d115      	bne.n	8008fb4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <vPortFree+0xa8>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	43db      	mvns	r3, r3
 8008f92:	401a      	ands	r2, r3
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f98:	f7fe f97e 	bl	8007298 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <vPortFree+0xac>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	4a06      	ldr	r2, [pc, #24]	; (8008fc0 <vPortFree+0xac>)
 8008fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008faa:	6938      	ldr	r0, [r7, #16]
 8008fac:	f000 f86c 	bl	8009088 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008fb0:	f7fe f980 	bl	80072b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fb4:	bf00      	nop
 8008fb6:	3718      	adds	r7, #24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	2000fdc0 	.word	0x2000fdc0
 8008fc0:	2000fdb8 	.word	0x2000fdb8

08008fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fd0:	4b27      	ldr	r3, [pc, #156]	; (8009070 <prvHeapInit+0xac>)
 8008fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00c      	beq.n	8008ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3307      	adds	r3, #7
 8008fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	4a1f      	ldr	r2, [pc, #124]	; (8009070 <prvHeapInit+0xac>)
 8008ff4:	4413      	add	r3, r2
 8008ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ffc:	4a1d      	ldr	r2, [pc, #116]	; (8009074 <prvHeapInit+0xb0>)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009002:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <prvHeapInit+0xb0>)
 8009004:	2200      	movs	r2, #0
 8009006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009010:	2208      	movs	r2, #8
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0307 	bic.w	r3, r3, #7
 800901e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4a15      	ldr	r2, [pc, #84]	; (8009078 <prvHeapInit+0xb4>)
 8009024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <prvHeapInit+0xb4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2200      	movs	r2, #0
 800902c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800902e:	4b12      	ldr	r3, [pc, #72]	; (8009078 <prvHeapInit+0xb4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	1ad2      	subs	r2, r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <prvHeapInit+0xb4>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	4a0a      	ldr	r2, [pc, #40]	; (800907c <prvHeapInit+0xb8>)
 8009052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	4a09      	ldr	r2, [pc, #36]	; (8009080 <prvHeapInit+0xbc>)
 800905a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800905c:	4b09      	ldr	r3, [pc, #36]	; (8009084 <prvHeapInit+0xc0>)
 800905e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009062:	601a      	str	r2, [r3, #0]
}
 8009064:	bf00      	nop
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	20000dac 	.word	0x20000dac
 8009074:	2000fdac 	.word	0x2000fdac
 8009078:	2000fdb4 	.word	0x2000fdb4
 800907c:	2000fdbc 	.word	0x2000fdbc
 8009080:	2000fdb8 	.word	0x2000fdb8
 8009084:	2000fdc0 	.word	0x2000fdc0

08009088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009090:	4b28      	ldr	r3, [pc, #160]	; (8009134 <prvInsertBlockIntoFreeList+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	e002      	b.n	800909c <prvInsertBlockIntoFreeList+0x14>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d8f7      	bhi.n	8009096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	4413      	add	r3, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d108      	bne.n	80090ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	441a      	add	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	441a      	add	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d118      	bne.n	8009110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4b15      	ldr	r3, [pc, #84]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d00d      	beq.n	8009106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	441a      	add	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	e008      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	e003      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	429a      	cmp	r2, r3
 800911e:	d002      	beq.n	8009126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009126:	bf00      	nop
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	2000fdac 	.word	0x2000fdac
 8009138:	2000fdb4 	.word	0x2000fdb4

0800913c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	330c      	adds	r3, #12
 800914c:	461a      	mov	r2, r3
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f002 fa69 	bl	800b628 <tcpip_send_msg_wait_sem>
 8009156:	4603      	mov	r3, r0
 8009158:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800915a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d103      	bne.n	800916a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009168:	e001      	b.n	800916e <netconn_apimsg+0x32>
  }
  return err;
 800916a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
	...

08009178 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b08c      	sub	sp, #48	; 0x30
 800917c:	af00      	add	r7, sp, #0
 800917e:	4603      	mov	r3, r0
 8009180:	603a      	str	r2, [r7, #0]
 8009182:	71fb      	strb	r3, [r7, #7]
 8009184:	460b      	mov	r3, r1
 8009186:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	6839      	ldr	r1, [r7, #0]
 800918c:	4618      	mov	r0, r3
 800918e:	f001 f91f 	bl	800a3d0 <netconn_alloc>
 8009192:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009196:	2b00      	cmp	r3, #0
 8009198:	d054      	beq.n	8009244 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800919a:	79bb      	ldrb	r3, [r7, #6]
 800919c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80091a2:	f107 0308 	add.w	r3, r7, #8
 80091a6:	4619      	mov	r1, r3
 80091a8:	4829      	ldr	r0, [pc, #164]	; (8009250 <netconn_new_with_proto_and_callback+0xd8>)
 80091aa:	f7ff ffc7 	bl	800913c <netconn_apimsg>
 80091ae:	4603      	mov	r3, r0
 80091b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80091b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d043      	beq.n	8009244 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80091bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d005      	beq.n	80091d0 <netconn_new_with_proto_and_callback+0x58>
 80091c4:	4b23      	ldr	r3, [pc, #140]	; (8009254 <netconn_new_with_proto_and_callback+0xdc>)
 80091c6:	22a3      	movs	r2, #163	; 0xa3
 80091c8:	4923      	ldr	r1, [pc, #140]	; (8009258 <netconn_new_with_proto_and_callback+0xe0>)
 80091ca:	4824      	ldr	r0, [pc, #144]	; (800925c <netconn_new_with_proto_and_callback+0xe4>)
 80091cc:	f010 f9ce 	bl	801956c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80091d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d2:	3310      	adds	r3, #16
 80091d4:	4618      	mov	r0, r3
 80091d6:	f010 f841 	bl	801925c <sys_mbox_valid>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d105      	bne.n	80091ec <netconn_new_with_proto_and_callback+0x74>
 80091e0:	4b1c      	ldr	r3, [pc, #112]	; (8009254 <netconn_new_with_proto_and_callback+0xdc>)
 80091e2:	22a4      	movs	r2, #164	; 0xa4
 80091e4:	491e      	ldr	r1, [pc, #120]	; (8009260 <netconn_new_with_proto_and_callback+0xe8>)
 80091e6:	481d      	ldr	r0, [pc, #116]	; (800925c <netconn_new_with_proto_and_callback+0xe4>)
 80091e8:	f010 f9c0 	bl	801956c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80091ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ee:	3314      	adds	r3, #20
 80091f0:	4618      	mov	r0, r3
 80091f2:	f010 f833 	bl	801925c <sys_mbox_valid>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d005      	beq.n	8009208 <netconn_new_with_proto_and_callback+0x90>
 80091fc:	4b15      	ldr	r3, [pc, #84]	; (8009254 <netconn_new_with_proto_and_callback+0xdc>)
 80091fe:	22a6      	movs	r2, #166	; 0xa6
 8009200:	4918      	ldr	r1, [pc, #96]	; (8009264 <netconn_new_with_proto_and_callback+0xec>)
 8009202:	4816      	ldr	r0, [pc, #88]	; (800925c <netconn_new_with_proto_and_callback+0xe4>)
 8009204:	f010 f9b2 	bl	801956c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	330c      	adds	r3, #12
 800920c:	4618      	mov	r0, r3
 800920e:	f010 f8b3 	bl	8019378 <sys_sem_valid>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d105      	bne.n	8009224 <netconn_new_with_proto_and_callback+0xac>
 8009218:	4b0e      	ldr	r3, [pc, #56]	; (8009254 <netconn_new_with_proto_and_callback+0xdc>)
 800921a:	22a9      	movs	r2, #169	; 0xa9
 800921c:	4912      	ldr	r1, [pc, #72]	; (8009268 <netconn_new_with_proto_and_callback+0xf0>)
 800921e:	480f      	ldr	r0, [pc, #60]	; (800925c <netconn_new_with_proto_and_callback+0xe4>)
 8009220:	f010 f9a4 	bl	801956c <iprintf>
      sys_sem_free(&conn->op_completed);
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	330c      	adds	r3, #12
 8009228:	4618      	mov	r0, r3
 800922a:	f010 f898 	bl	801935e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800922e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009230:	3310      	adds	r3, #16
 8009232:	4618      	mov	r0, r3
 8009234:	f00f ff9e 	bl	8019174 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800923a:	2007      	movs	r0, #7
 800923c:	f003 fdac 	bl	800cd98 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009240:	2300      	movs	r3, #0
 8009242:	e000      	b.n	8009246 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009246:	4618      	mov	r0, r3
 8009248:	3730      	adds	r7, #48	; 0x30
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
 800924e:	bf00      	nop
 8009250:	0800a3a5 	.word	0x0800a3a5
 8009254:	0801a98c 	.word	0x0801a98c
 8009258:	0801a9c0 	.word	0x0801a9c0
 800925c:	0801a9e4 	.word	0x0801a9e4
 8009260:	0801aa0c 	.word	0x0801aa0c
 8009264:	0801aa24 	.word	0x0801aa24
 8009268:	0801aa48 	.word	0x0801aa48

0800926c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b08c      	sub	sp, #48	; 0x30
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	e014      	b.n	80092a8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009282:	2329      	movs	r3, #41	; 0x29
 8009284:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009286:	f107 030c 	add.w	r3, r7, #12
 800928a:	4619      	mov	r1, r3
 800928c:	4808      	ldr	r0, [pc, #32]	; (80092b0 <netconn_prepare_delete+0x44>)
 800928e:	f7ff ff55 	bl	800913c <netconn_apimsg>
 8009292:	4603      	mov	r3, r0
 8009294:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009298:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800929c:	2b00      	cmp	r3, #0
 800929e:	d002      	beq.n	80092a6 <netconn_prepare_delete+0x3a>
    return err;
 80092a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80092a4:	e000      	b.n	80092a8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3730      	adds	r7, #48	; 0x30
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	0800a909 	.word	0x0800a909

080092b4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <netconn_delete+0x12>
    return ERR_OK;
 80092c2:	2300      	movs	r3, #0
 80092c4:	e00d      	b.n	80092e2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7ff ffd0 	bl	800926c <netconn_prepare_delete>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80092d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d102      	bne.n	80092de <netconn_delete+0x2a>
    netconn_free(conn);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f001 f8e7 	bl	800a4ac <netconn_free>
  }
  return err;
 80092de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3710      	adds	r7, #16
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
	...

080092ec <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b08e      	sub	sp, #56	; 0x38
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	60f8      	str	r0, [r7, #12]
 80092f4:	60b9      	str	r1, [r7, #8]
 80092f6:	4613      	mov	r3, r2
 80092f8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d109      	bne.n	8009314 <netconn_bind+0x28>
 8009300:	4b11      	ldr	r3, [pc, #68]	; (8009348 <netconn_bind+0x5c>)
 8009302:	f44f 729c 	mov.w	r2, #312	; 0x138
 8009306:	4911      	ldr	r1, [pc, #68]	; (800934c <netconn_bind+0x60>)
 8009308:	4811      	ldr	r0, [pc, #68]	; (8009350 <netconn_bind+0x64>)
 800930a:	f010 f92f 	bl	801956c <iprintf>
 800930e:	f06f 030f 	mvn.w	r3, #15
 8009312:	e015      	b.n	8009340 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d101      	bne.n	800931e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800931a:	4b0e      	ldr	r3, [pc, #56]	; (8009354 <netconn_bind+0x68>)
 800931c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009326:	88fb      	ldrh	r3, [r7, #6]
 8009328:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800932a:	f107 0314 	add.w	r3, r7, #20
 800932e:	4619      	mov	r1, r3
 8009330:	4809      	ldr	r0, [pc, #36]	; (8009358 <netconn_bind+0x6c>)
 8009332:	f7ff ff03 	bl	800913c <netconn_apimsg>
 8009336:	4603      	mov	r3, r0
 8009338:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800933c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009340:	4618      	mov	r0, r3
 8009342:	3738      	adds	r7, #56	; 0x38
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	0801a98c 	.word	0x0801a98c
 800934c:	0801aac4 	.word	0x0801aac4
 8009350:	0801a9e4 	.word	0x0801a9e4
 8009354:	08023070 	.word	0x08023070
 8009358:	0800aad1 	.word	0x0800aad1

0800935c <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b08c      	sub	sp, #48	; 0x30
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	460b      	mov	r3, r1
 8009366:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d109      	bne.n	8009382 <netconn_listen_with_backlog+0x26>
 800936e:	4b0d      	ldr	r3, [pc, #52]	; (80093a4 <netconn_listen_with_backlog+0x48>)
 8009370:	f240 12bb 	movw	r2, #443	; 0x1bb
 8009374:	490c      	ldr	r1, [pc, #48]	; (80093a8 <netconn_listen_with_backlog+0x4c>)
 8009376:	480d      	ldr	r0, [pc, #52]	; (80093ac <netconn_listen_with_backlog+0x50>)
 8009378:	f010 f8f8 	bl	801956c <iprintf>
 800937c:	f06f 030f 	mvn.w	r3, #15
 8009380:	e00c      	b.n	800939c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8009386:	f107 030c 	add.w	r3, r7, #12
 800938a:	4619      	mov	r1, r3
 800938c:	4808      	ldr	r0, [pc, #32]	; (80093b0 <netconn_listen_with_backlog+0x54>)
 800938e:	f7ff fed5 	bl	800913c <netconn_apimsg>
 8009392:	4603      	mov	r3, r0
 8009394:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009398:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800939c:	4618      	mov	r0, r3
 800939e:	3730      	adds	r7, #48	; 0x30
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	0801a98c 	.word	0x0801a98c
 80093a8:	0801ab44 	.word	0x0801ab44
 80093ac:	0801a9e4 	.word	0x0801a9e4
 80093b0:	0800ab49 	.word	0x0800ab49

080093b4 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d109      	bne.n	80093d8 <netconn_accept+0x24>
 80093c4:	4b3d      	ldr	r3, [pc, #244]	; (80094bc <netconn_accept+0x108>)
 80093c6:	f240 12e1 	movw	r2, #481	; 0x1e1
 80093ca:	493d      	ldr	r1, [pc, #244]	; (80094c0 <netconn_accept+0x10c>)
 80093cc:	483d      	ldr	r0, [pc, #244]	; (80094c4 <netconn_accept+0x110>)
 80093ce:	f010 f8cd 	bl	801956c <iprintf>
 80093d2:	f06f 030f 	mvn.w	r3, #15
 80093d6:	e06c      	b.n	80094b2 <netconn_accept+0xfe>
  *new_conn = NULL;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d109      	bne.n	80093f8 <netconn_accept+0x44>
 80093e4:	4b35      	ldr	r3, [pc, #212]	; (80094bc <netconn_accept+0x108>)
 80093e6:	f240 12e3 	movw	r2, #483	; 0x1e3
 80093ea:	4937      	ldr	r1, [pc, #220]	; (80094c8 <netconn_accept+0x114>)
 80093ec:	4835      	ldr	r0, [pc, #212]	; (80094c4 <netconn_accept+0x110>)
 80093ee:	f010 f8bd 	bl	801956c <iprintf>
 80093f2:	f06f 030f 	mvn.w	r3, #15
 80093f6:	e05c      	b.n	80094b2 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fb6c 	bl	8009ad6 <netconn_err>
 80093fe:	4603      	mov	r3, r0
 8009400:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8009402:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800940a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800940e:	e050      	b.n	80094b2 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	3314      	adds	r3, #20
 8009414:	4618      	mov	r0, r3
 8009416:	f00f ff21 	bl	801925c <sys_mbox_valid>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d005      	beq.n	800942c <netconn_accept+0x78>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	7f1b      	ldrb	r3, [r3, #28]
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	2b00      	cmp	r3, #0
 800942a:	d002      	beq.n	8009432 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800942c:	f06f 030e 	mvn.w	r3, #14
 8009430:	e03f      	b.n	80094b2 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	7f1b      	ldrb	r3, [r3, #28]
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00e      	beq.n	800945c <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	3314      	adds	r3, #20
 8009442:	f107 020c 	add.w	r2, r7, #12
 8009446:	4611      	mov	r1, r2
 8009448:	4618      	mov	r0, r3
 800944a:	f00f fef0 	bl	801922e <sys_arch_mbox_tryfetch>
 800944e:	4603      	mov	r3, r0
 8009450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009454:	d10a      	bne.n	800946c <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8009456:	f06f 0306 	mvn.w	r3, #6
 800945a:	e02a      	b.n	80094b2 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	3314      	adds	r3, #20
 8009460:	f107 010c 	add.w	r1, r7, #12
 8009464:	2200      	movs	r2, #0
 8009466:	4618      	mov	r0, r3
 8009468:	f00f feb0 	bl	80191cc <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009470:	2b00      	cmp	r3, #0
 8009472:	d005      	beq.n	8009480 <netconn_accept+0xcc>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009478:	2200      	movs	r2, #0
 800947a:	2101      	movs	r1, #1
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f107 0213 	add.w	r2, r7, #19
 8009486:	4611      	mov	r1, r2
 8009488:	4618      	mov	r0, r3
 800948a:	f000 fb71 	bl	8009b70 <lwip_netconn_is_err_msg>
 800948e:	4603      	mov	r3, r0
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009494:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009498:	e00b      	b.n	80094b2 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80094a0:	f06f 030e 	mvn.w	r3, #14
 80094a4:	e005      	b.n	80094b2 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	697a      	ldr	r2, [r7, #20]
 80094ae:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80094b0:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	0801a98c 	.word	0x0801a98c
 80094c0:	0801ab64 	.word	0x0801ab64
 80094c4:	0801a9e4 	.word	0x0801a9e4
 80094c8:	0801ab84 	.word	0x0801ab84

080094cc <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b088      	sub	sp, #32
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	4613      	mov	r3, r2
 80094d8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d109      	bne.n	80094f8 <netconn_recv_data+0x2c>
 80094e4:	4b58      	ldr	r3, [pc, #352]	; (8009648 <netconn_recv_data+0x17c>)
 80094e6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80094ea:	4958      	ldr	r1, [pc, #352]	; (800964c <netconn_recv_data+0x180>)
 80094ec:	4858      	ldr	r0, [pc, #352]	; (8009650 <netconn_recv_data+0x184>)
 80094ee:	f010 f83d 	bl	801956c <iprintf>
 80094f2:	f06f 030f 	mvn.w	r3, #15
 80094f6:	e0a2      	b.n	800963e <netconn_recv_data+0x172>
  *new_buf = NULL;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2200      	movs	r2, #0
 80094fc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d109      	bne.n	8009518 <netconn_recv_data+0x4c>
 8009504:	4b50      	ldr	r3, [pc, #320]	; (8009648 <netconn_recv_data+0x17c>)
 8009506:	f240 224a 	movw	r2, #586	; 0x24a
 800950a:	4952      	ldr	r1, [pc, #328]	; (8009654 <netconn_recv_data+0x188>)
 800950c:	4850      	ldr	r0, [pc, #320]	; (8009650 <netconn_recv_data+0x184>)
 800950e:	f010 f82d 	bl	801956c <iprintf>
 8009512:	f06f 030f 	mvn.w	r3, #15
 8009516:	e092      	b.n	800963e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3310      	adds	r3, #16
 800951c:	4618      	mov	r0, r3
 800951e:	f00f fe9d 	bl	801925c <sys_mbox_valid>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d10e      	bne.n	8009546 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 fad4 	bl	8009ad6 <netconn_err>
 800952e:	4603      	mov	r3, r0
 8009530:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009532:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d002      	beq.n	8009540 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800953a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800953e:	e07e      	b.n	800963e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009540:	f06f 030a 	mvn.w	r3, #10
 8009544:	e07b      	b.n	800963e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	7f1b      	ldrb	r3, [r3, #28]
 800954a:	f003 0302 	and.w	r3, r3, #2
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10f      	bne.n	8009572 <netconn_recv_data+0xa6>
 8009552:	79fb      	ldrb	r3, [r7, #7]
 8009554:	f003 0304 	and.w	r3, r3, #4
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10a      	bne.n	8009572 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	7f1b      	ldrb	r3, [r3, #28]
 8009560:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009564:	2b00      	cmp	r3, #0
 8009566:	d104      	bne.n	8009572 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d023      	beq.n	80095ba <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3310      	adds	r3, #16
 8009576:	f107 0218 	add.w	r2, r7, #24
 800957a:	4611      	mov	r1, r2
 800957c:	4618      	mov	r0, r3
 800957e:	f00f fe56 	bl	801922e <sys_arch_mbox_tryfetch>
 8009582:	4603      	mov	r3, r0
 8009584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009588:	d11f      	bne.n	80095ca <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 faa3 	bl	8009ad6 <netconn_err>
 8009590:	4603      	mov	r3, r0
 8009592:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009594:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d002      	beq.n	80095a2 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800959c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80095a0:	e04d      	b.n	800963e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	7f1b      	ldrb	r3, [r3, #28]
 80095a6:	f003 0301 	and.w	r3, r3, #1
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d002      	beq.n	80095b4 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80095ae:	f06f 030a 	mvn.w	r3, #10
 80095b2:	e044      	b.n	800963e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80095b4:	f06f 0306 	mvn.w	r3, #6
 80095b8:	e041      	b.n	800963e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3310      	adds	r3, #16
 80095be:	f107 0118 	add.w	r1, r7, #24
 80095c2:	2200      	movs	r2, #0
 80095c4:	4618      	mov	r0, r3
 80095c6:	f00f fe01 	bl	80191cc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095d2:	2b10      	cmp	r3, #16
 80095d4:	d117      	bne.n	8009606 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	f107 0217 	add.w	r2, r7, #23
 80095dc:	4611      	mov	r1, r2
 80095de:	4618      	mov	r0, r3
 80095e0:	f000 fac6 	bl	8009b70 <lwip_netconn_is_err_msg>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d009      	beq.n	80095fe <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80095ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095ee:	f113 0f0f 	cmn.w	r3, #15
 80095f2:	d101      	bne.n	80095f8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	e022      	b.n	800963e <netconn_recv_data+0x172>
      }
      return err;
 80095f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80095fc:	e01f      	b.n	800963e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	891b      	ldrh	r3, [r3, #8]
 8009602:	83fb      	strh	r3, [r7, #30]
 8009604:	e00d      	b.n	8009622 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d106      	bne.n	800961a <netconn_recv_data+0x14e>
 800960c:	4b0e      	ldr	r3, [pc, #56]	; (8009648 <netconn_recv_data+0x17c>)
 800960e:	f240 2291 	movw	r2, #657	; 0x291
 8009612:	4911      	ldr	r1, [pc, #68]	; (8009658 <netconn_recv_data+0x18c>)
 8009614:	480e      	ldr	r0, [pc, #56]	; (8009650 <netconn_recv_data+0x184>)
 8009616:	f00f ffa9 	bl	801956c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	891b      	ldrh	r3, [r3, #8]
 8009620:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009626:	2b00      	cmp	r3, #0
 8009628:	d005      	beq.n	8009636 <netconn_recv_data+0x16a>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	8bfa      	ldrh	r2, [r7, #30]
 8009630:	2101      	movs	r1, #1
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3720      	adds	r7, #32
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	0801a98c 	.word	0x0801a98c
 800964c:	0801aba4 	.word	0x0801aba4
 8009650:	0801a9e4 	.word	0x0801a9e4
 8009654:	0801abc4 	.word	0x0801abc4
 8009658:	0801abe0 	.word	0x0801abe0

0800965c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d005      	beq.n	800967a <netconn_tcp_recvd_msg+0x1e>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009676:	2b10      	cmp	r3, #16
 8009678:	d009      	beq.n	800968e <netconn_tcp_recvd_msg+0x32>
 800967a:	4b0c      	ldr	r3, [pc, #48]	; (80096ac <netconn_tcp_recvd_msg+0x50>)
 800967c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8009680:	490b      	ldr	r1, [pc, #44]	; (80096b0 <netconn_tcp_recvd_msg+0x54>)
 8009682:	480c      	ldr	r0, [pc, #48]	; (80096b4 <netconn_tcp_recvd_msg+0x58>)
 8009684:	f00f ff72 	bl	801956c <iprintf>
 8009688:	f06f 030f 	mvn.w	r3, #15
 800968c:	e00a      	b.n	80096a4 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	4806      	ldr	r0, [pc, #24]	; (80096b8 <netconn_tcp_recvd_msg+0x5c>)
 800969e:	f7ff fd4d 	bl	800913c <netconn_apimsg>
 80096a2:	4603      	mov	r3, r0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	0801a98c 	.word	0x0801a98c
 80096b0:	0801abec 	.word	0x0801abec
 80096b4:	0801a9e4 	.word	0x0801a9e4
 80096b8:	0800ac79 	.word	0x0800ac79

080096bc <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b090      	sub	sp, #64	; 0x40
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4613      	mov	r3, r2
 80096c8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3310      	adds	r3, #16
 80096ce:	4618      	mov	r0, r3
 80096d0:	f00f fdc4 	bl	801925c <sys_mbox_valid>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d102      	bne.n	80096e0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80096da:	f06f 030a 	mvn.w	r3, #10
 80096de:	e06d      	b.n	80097bc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	7f1b      	ldrb	r3, [r3, #28]
 80096e4:	b25b      	sxtb	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	da07      	bge.n	80096fa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	7f1b      	ldrb	r3, [r3, #28]
 80096ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80096f8:	e039      	b.n	800976e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	461a      	mov	r2, r3
 80096fe:	68b9      	ldr	r1, [r7, #8]
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f7ff fee3 	bl	80094cc <netconn_recv_data>
 8009706:	4603      	mov	r3, r0
 8009708:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800970c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009714:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009718:	e050      	b.n	80097bc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009720:	79fb      	ldrb	r3, [r7, #7]
 8009722:	f003 0308 	and.w	r3, r3, #8
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10e      	bne.n	8009748 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	2b00      	cmp	r3, #0
 800972e:	d002      	beq.n	8009736 <netconn_recv_data_tcp+0x7a>
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	891b      	ldrh	r3, [r3, #8]
 8009734:	e000      	b.n	8009738 <netconn_recv_data_tcp+0x7c>
 8009736:	2301      	movs	r3, #1
 8009738:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800973a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800973c:	f107 0214 	add.w	r2, r7, #20
 8009740:	4619      	mov	r1, r3
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7ff ff8a 	bl	800965c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	2b00      	cmp	r3, #0
 800974c:	d134      	bne.n	80097b8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800974e:	79fb      	ldrb	r3, [r7, #7]
 8009750:	f003 0310 	and.w	r3, r3, #16
 8009754:	2b00      	cmp	r3, #0
 8009756:	d009      	beq.n	800976c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	7f1b      	ldrb	r3, [r3, #28]
 800975c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009760:	b2da      	uxtb	r2, r3
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009766:	f06f 0306 	mvn.w	r3, #6
 800976a:	e027      	b.n	80097bc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800976c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	2b00      	cmp	r3, #0
 8009774:	d005      	beq.n	8009782 <netconn_recv_data_tcp+0xc6>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977a:	2200      	movs	r2, #0
 800977c:	2101      	movs	r1, #1
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10f      	bne.n	80097aa <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f000 f9a3 	bl	8009ad6 <netconn_err>
 8009790:	4603      	mov	r3, r0
 8009792:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009796:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800979a:	2b00      	cmp	r3, #0
 800979c:	d002      	beq.n	80097a4 <netconn_recv_data_tcp+0xe8>
          return err;
 800979e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80097a2:	e00b      	b.n	80097bc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80097a4:	f06f 030d 	mvn.w	r3, #13
 80097a8:	e008      	b.n	80097bc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80097aa:	2101      	movs	r1, #1
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 f955 	bl	8009a5c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80097b2:	f06f 030e 	mvn.w	r3, #14
 80097b6:	e001      	b.n	80097bc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80097b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3740      	adds	r7, #64	; 0x40
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b086      	sub	sp, #24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d109      	bne.n	80097ec <netconn_recv+0x28>
 80097d8:	4b32      	ldr	r3, [pc, #200]	; (80098a4 <netconn_recv+0xe0>)
 80097da:	f240 3263 	movw	r2, #867	; 0x363
 80097de:	4932      	ldr	r1, [pc, #200]	; (80098a8 <netconn_recv+0xe4>)
 80097e0:	4832      	ldr	r0, [pc, #200]	; (80098ac <netconn_recv+0xe8>)
 80097e2:	f00f fec3 	bl	801956c <iprintf>
 80097e6:	f06f 030f 	mvn.w	r3, #15
 80097ea:	e056      	b.n	800989a <netconn_recv+0xd6>
  *new_buf = NULL;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2200      	movs	r2, #0
 80097f0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d109      	bne.n	800980c <netconn_recv+0x48>
 80097f8:	4b2a      	ldr	r3, [pc, #168]	; (80098a4 <netconn_recv+0xe0>)
 80097fa:	f240 3265 	movw	r2, #869	; 0x365
 80097fe:	492c      	ldr	r1, [pc, #176]	; (80098b0 <netconn_recv+0xec>)
 8009800:	482a      	ldr	r0, [pc, #168]	; (80098ac <netconn_recv+0xe8>)
 8009802:	f00f feb3 	bl	801956c <iprintf>
 8009806:	f06f 030f 	mvn.w	r3, #15
 800980a:	e046      	b.n	800989a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009814:	2b10      	cmp	r3, #16
 8009816:	d13a      	bne.n	800988e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800981c:	2006      	movs	r0, #6
 800981e:	f003 fa69 	bl	800ccf4 <memp_malloc>
 8009822:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d102      	bne.n	8009830 <netconn_recv+0x6c>
      return ERR_MEM;
 800982a:	f04f 33ff 	mov.w	r3, #4294967295
 800982e:	e034      	b.n	800989a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009830:	f107 030c 	add.w	r3, r7, #12
 8009834:	2200      	movs	r2, #0
 8009836:	4619      	mov	r1, r3
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f7ff ff3f 	bl	80096bc <netconn_recv_data_tcp>
 800983e:	4603      	mov	r3, r0
 8009840:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009842:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d006      	beq.n	8009858 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800984a:	6979      	ldr	r1, [r7, #20]
 800984c:	2006      	movs	r0, #6
 800984e:	f003 faa3 	bl	800cd98 <memp_free>
      return err;
 8009852:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009856:	e020      	b.n	800989a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d106      	bne.n	800986c <netconn_recv+0xa8>
 800985e:	4b11      	ldr	r3, [pc, #68]	; (80098a4 <netconn_recv+0xe0>)
 8009860:	f240 3279 	movw	r2, #889	; 0x379
 8009864:	4913      	ldr	r1, [pc, #76]	; (80098b4 <netconn_recv+0xf0>)
 8009866:	4811      	ldr	r0, [pc, #68]	; (80098ac <netconn_recv+0xe8>)
 8009868:	f00f fe80 	bl	801956c <iprintf>

    buf->p = p;
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2200      	movs	r2, #0
 800987c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2200      	movs	r2, #0
 8009882:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	e005      	b.n	800989a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800988e:	2200      	movs	r2, #0
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff fe1a 	bl	80094cc <netconn_recv_data>
 8009898:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	0801a98c 	.word	0x0801a98c
 80098a8:	0801aba4 	.word	0x0801aba4
 80098ac:	0801a9e4 	.word	0x0801a9e4
 80098b0:	0801abc4 	.word	0x0801abc4
 80098b4:	0801ac3c 	.word	0x0801ac3c

080098b8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b088      	sub	sp, #32
 80098bc:	af02      	add	r7, sp, #8
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80098ce:	78fa      	ldrb	r2, [r7, #3]
 80098d0:	f107 0110 	add.w	r1, r7, #16
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	9300      	str	r3, [sp, #0]
 80098d8:	4613      	mov	r3, r2
 80098da:	2201      	movs	r2, #1
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 f805 	bl	80098ec <netconn_write_vectors_partly>
 80098e2:	4603      	mov	r3, r0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b092      	sub	sp, #72	; 0x48
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	4611      	mov	r1, r2
 80098f8:	461a      	mov	r2, r3
 80098fa:	460b      	mov	r3, r1
 80098fc:	80fb      	strh	r3, [r7, #6]
 80098fe:	4613      	mov	r3, r2
 8009900:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d109      	bne.n	800991c <netconn_write_vectors_partly+0x30>
 8009908:	4b4e      	ldr	r3, [pc, #312]	; (8009a44 <netconn_write_vectors_partly+0x158>)
 800990a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800990e:	494e      	ldr	r1, [pc, #312]	; (8009a48 <netconn_write_vectors_partly+0x15c>)
 8009910:	484e      	ldr	r0, [pc, #312]	; (8009a4c <netconn_write_vectors_partly+0x160>)
 8009912:	f00f fe2b 	bl	801956c <iprintf>
 8009916:	f06f 030f 	mvn.w	r3, #15
 800991a:	e08e      	b.n	8009a3a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009924:	2b10      	cmp	r3, #16
 8009926:	d009      	beq.n	800993c <netconn_write_vectors_partly+0x50>
 8009928:	4b46      	ldr	r3, [pc, #280]	; (8009a44 <netconn_write_vectors_partly+0x158>)
 800992a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800992e:	4948      	ldr	r1, [pc, #288]	; (8009a50 <netconn_write_vectors_partly+0x164>)
 8009930:	4846      	ldr	r0, [pc, #280]	; (8009a4c <netconn_write_vectors_partly+0x160>)
 8009932:	f00f fe1b 	bl	801956c <iprintf>
 8009936:	f06f 0305 	mvn.w	r3, #5
 800993a:	e07e      	b.n	8009a3a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	7f1b      	ldrb	r3, [r3, #28]
 8009940:	f003 0302 	and.w	r3, r3, #2
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <netconn_write_vectors_partly+0x66>
 8009948:	797b      	ldrb	r3, [r7, #5]
 800994a:	f003 0304 	and.w	r3, r3, #4
 800994e:	2b00      	cmp	r3, #0
 8009950:	d001      	beq.n	8009956 <netconn_write_vectors_partly+0x6a>
 8009952:	2301      	movs	r3, #1
 8009954:	e000      	b.n	8009958 <netconn_write_vectors_partly+0x6c>
 8009956:	2300      	movs	r3, #0
 8009958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800995c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009960:	2b00      	cmp	r3, #0
 8009962:	d005      	beq.n	8009970 <netconn_write_vectors_partly+0x84>
 8009964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009966:	2b00      	cmp	r3, #0
 8009968:	d102      	bne.n	8009970 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800996a:	f06f 0305 	mvn.w	r3, #5
 800996e:	e064      	b.n	8009a3a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009970:	2300      	movs	r3, #0
 8009972:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009974:	2300      	movs	r3, #0
 8009976:	643b      	str	r3, [r7, #64]	; 0x40
 8009978:	e015      	b.n	80099a6 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800997a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800997c:	00db      	lsls	r3, r3, #3
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	4413      	add	r3, r2
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009986:	4413      	add	r3, r2
 8009988:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800998a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800998c:	00db      	lsls	r3, r3, #3
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	4413      	add	r3, r2
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009996:	429a      	cmp	r2, r3
 8009998:	d202      	bcs.n	80099a0 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800999a:	f06f 0305 	mvn.w	r3, #5
 800999e:	e04c      	b.n	8009a3a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80099a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099a2:	3301      	adds	r3, #1
 80099a4:	643b      	str	r3, [r7, #64]	; 0x40
 80099a6:	88fb      	ldrh	r3, [r7, #6]
 80099a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099aa:	429a      	cmp	r2, r3
 80099ac:	dbe5      	blt.n	800997a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 80099ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d101      	bne.n	80099b8 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	e040      	b.n	8009a3a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 80099b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	da0a      	bge.n	80099d4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80099be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d102      	bne.n	80099ca <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 80099c4:	f06f 0305 	mvn.w	r3, #5
 80099c8:	e037      	b.n	8009a3a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80099ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80099ce:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80099d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80099dc:	88fb      	ldrh	r3, [r7, #6]
 80099de:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80099e4:	797b      	ldrb	r3, [r7, #5]
 80099e6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80099ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ec:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80099f2:	f107 0314 	add.w	r3, r7, #20
 80099f6:	4619      	mov	r1, r3
 80099f8:	4816      	ldr	r0, [pc, #88]	; (8009a54 <netconn_write_vectors_partly+0x168>)
 80099fa:	f7ff fb9f 	bl	800913c <netconn_apimsg>
 80099fe:	4603      	mov	r3, r0
 8009a00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009a04:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d114      	bne.n	8009a36 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a16:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009a18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d006      	beq.n	8009a36 <netconn_write_vectors_partly+0x14a>
 8009a28:	4b06      	ldr	r3, [pc, #24]	; (8009a44 <netconn_write_vectors_partly+0x158>)
 8009a2a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009a2e:	490a      	ldr	r1, [pc, #40]	; (8009a58 <netconn_write_vectors_partly+0x16c>)
 8009a30:	4806      	ldr	r0, [pc, #24]	; (8009a4c <netconn_write_vectors_partly+0x160>)
 8009a32:	f00f fd9b 	bl	801956c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009a36:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3748      	adds	r7, #72	; 0x48
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	0801a98c 	.word	0x0801a98c
 8009a48:	0801ac64 	.word	0x0801ac64
 8009a4c:	0801a9e4 	.word	0x0801a9e4
 8009a50:	0801ac80 	.word	0x0801ac80
 8009a54:	0800b07d 	.word	0x0800b07d
 8009a58:	0801aca4 	.word	0x0801aca4

08009a5c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08c      	sub	sp, #48	; 0x30
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	460b      	mov	r3, r1
 8009a66:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d109      	bne.n	8009a82 <netconn_close_shutdown+0x26>
 8009a6e:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <netconn_close_shutdown+0x50>)
 8009a70:	f240 4247 	movw	r2, #1095	; 0x447
 8009a74:	490e      	ldr	r1, [pc, #56]	; (8009ab0 <netconn_close_shutdown+0x54>)
 8009a76:	480f      	ldr	r0, [pc, #60]	; (8009ab4 <netconn_close_shutdown+0x58>)
 8009a78:	f00f fd78 	bl	801956c <iprintf>
 8009a7c:	f06f 030f 	mvn.w	r3, #15
 8009a80:	e010      	b.n	8009aa4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009a86:	78fb      	ldrb	r3, [r7, #3]
 8009a88:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009a8a:	2329      	movs	r3, #41	; 0x29
 8009a8c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009a8e:	f107 030c 	add.w	r3, r7, #12
 8009a92:	4619      	mov	r1, r3
 8009a94:	4808      	ldr	r0, [pc, #32]	; (8009ab8 <netconn_close_shutdown+0x5c>)
 8009a96:	f7ff fb51 	bl	800913c <netconn_apimsg>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009aa0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3730      	adds	r7, #48	; 0x30
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	0801a98c 	.word	0x0801a98c
 8009ab0:	0801acc8 	.word	0x0801acc8
 8009ab4:	0801a9e4 	.word	0x0801a9e4
 8009ab8:	0800b195 	.word	0x0800b195

08009abc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009ac4:	2103      	movs	r1, #3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff ffc8 	bl	8009a5c <netconn_close_shutdown>
 8009acc:	4603      	mov	r3, r0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b084      	sub	sp, #16
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d101      	bne.n	8009ae8 <netconn_err+0x12>
    return ERR_OK;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	e00d      	b.n	8009b04 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009ae8:	f00f fcc2 	bl	8019470 <sys_arch_protect>
 8009aec:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	7a1b      	ldrb	r3, [r3, #8]
 8009af2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f00f fcc6 	bl	801948c <sys_arch_unprotect>
  return err;
 8009b00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b1a:	f113 0f0e 	cmn.w	r3, #14
 8009b1e:	d008      	beq.n	8009b32 <lwip_netconn_err_to_msg+0x26>
 8009b20:	f113 0f0d 	cmn.w	r3, #13
 8009b24:	d003      	beq.n	8009b2e <lwip_netconn_err_to_msg+0x22>
 8009b26:	f113 0f0f 	cmn.w	r3, #15
 8009b2a:	d004      	beq.n	8009b36 <lwip_netconn_err_to_msg+0x2a>
 8009b2c:	e005      	b.n	8009b3a <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009b2e:	4b0a      	ldr	r3, [pc, #40]	; (8009b58 <lwip_netconn_err_to_msg+0x4c>)
 8009b30:	e00e      	b.n	8009b50 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009b32:	4b0a      	ldr	r3, [pc, #40]	; (8009b5c <lwip_netconn_err_to_msg+0x50>)
 8009b34:	e00c      	b.n	8009b50 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009b36:	4b0a      	ldr	r3, [pc, #40]	; (8009b60 <lwip_netconn_err_to_msg+0x54>)
 8009b38:	e00a      	b.n	8009b50 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d005      	beq.n	8009b4e <lwip_netconn_err_to_msg+0x42>
 8009b42:	4b08      	ldr	r3, [pc, #32]	; (8009b64 <lwip_netconn_err_to_msg+0x58>)
 8009b44:	227d      	movs	r2, #125	; 0x7d
 8009b46:	4908      	ldr	r1, [pc, #32]	; (8009b68 <lwip_netconn_err_to_msg+0x5c>)
 8009b48:	4808      	ldr	r0, [pc, #32]	; (8009b6c <lwip_netconn_err_to_msg+0x60>)
 8009b4a:	f00f fd0f 	bl	801956c <iprintf>
      return NULL;
 8009b4e:	2300      	movs	r3, #0
  }
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	0801e4d0 	.word	0x0801e4d0
 8009b5c:	0801e4d1 	.word	0x0801e4d1
 8009b60:	0801e4d2 	.word	0x0801e4d2
 8009b64:	0801ace4 	.word	0x0801ace4
 8009b68:	0801ad18 	.word	0x0801ad18
 8009b6c:	0801ad28 	.word	0x0801ad28

08009b70 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d105      	bne.n	8009b8c <lwip_netconn_is_err_msg+0x1c>
 8009b80:	4b12      	ldr	r3, [pc, #72]	; (8009bcc <lwip_netconn_is_err_msg+0x5c>)
 8009b82:	2285      	movs	r2, #133	; 0x85
 8009b84:	4912      	ldr	r1, [pc, #72]	; (8009bd0 <lwip_netconn_is_err_msg+0x60>)
 8009b86:	4813      	ldr	r0, [pc, #76]	; (8009bd4 <lwip_netconn_is_err_msg+0x64>)
 8009b88:	f00f fcf0 	bl	801956c <iprintf>

  if (msg == &netconn_aborted) {
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a12      	ldr	r2, [pc, #72]	; (8009bd8 <lwip_netconn_is_err_msg+0x68>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d104      	bne.n	8009b9e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	22f3      	movs	r2, #243	; 0xf3
 8009b98:	701a      	strb	r2, [r3, #0]
    return 1;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e012      	b.n	8009bc4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4a0e      	ldr	r2, [pc, #56]	; (8009bdc <lwip_netconn_is_err_msg+0x6c>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d104      	bne.n	8009bb0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	22f2      	movs	r2, #242	; 0xf2
 8009baa:	701a      	strb	r2, [r3, #0]
    return 1;
 8009bac:	2301      	movs	r3, #1
 8009bae:	e009      	b.n	8009bc4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a0b      	ldr	r2, [pc, #44]	; (8009be0 <lwip_netconn_is_err_msg+0x70>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d104      	bne.n	8009bc2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	22f1      	movs	r2, #241	; 0xf1
 8009bbc:	701a      	strb	r2, [r3, #0]
    return 1;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e000      	b.n	8009bc4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009bc2:	2300      	movs	r3, #0
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	0801ace4 	.word	0x0801ace4
 8009bd0:	0801ad50 	.word	0x0801ad50
 8009bd4:	0801ad28 	.word	0x0801ad28
 8009bd8:	0801e4d0 	.word	0x0801e4d0
 8009bdc:	0801e4d1 	.word	0x0801e4d1
 8009be0:	0801e4d2 	.word	0x0801e4d2

08009be4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
 8009bf0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d105      	bne.n	8009c04 <recv_udp+0x20>
 8009bf8:	4b34      	ldr	r3, [pc, #208]	; (8009ccc <recv_udp+0xe8>)
 8009bfa:	22e5      	movs	r2, #229	; 0xe5
 8009bfc:	4934      	ldr	r1, [pc, #208]	; (8009cd0 <recv_udp+0xec>)
 8009bfe:	4835      	ldr	r0, [pc, #212]	; (8009cd4 <recv_udp+0xf0>)
 8009c00:	f00f fcb4 	bl	801956c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d105      	bne.n	8009c16 <recv_udp+0x32>
 8009c0a:	4b30      	ldr	r3, [pc, #192]	; (8009ccc <recv_udp+0xe8>)
 8009c0c:	22e6      	movs	r2, #230	; 0xe6
 8009c0e:	4932      	ldr	r1, [pc, #200]	; (8009cd8 <recv_udp+0xf4>)
 8009c10:	4830      	ldr	r0, [pc, #192]	; (8009cd4 <recv_udp+0xf0>)
 8009c12:	f00f fcab 	bl	801956c <iprintf>
  conn = (struct netconn *)arg;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d103      	bne.n	8009c28 <recv_udp+0x44>
    pbuf_free(p);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f003 ff65 	bl	800daf0 <pbuf_free>
    return;
 8009c26:	e04d      	b.n	8009cc4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d005      	beq.n	8009c3e <recv_udp+0x5a>
 8009c32:	4b26      	ldr	r3, [pc, #152]	; (8009ccc <recv_udp+0xe8>)
 8009c34:	22ee      	movs	r2, #238	; 0xee
 8009c36:	4929      	ldr	r1, [pc, #164]	; (8009cdc <recv_udp+0xf8>)
 8009c38:	4826      	ldr	r0, [pc, #152]	; (8009cd4 <recv_udp+0xf0>)
 8009c3a:	f00f fc97 	bl	801956c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	3310      	adds	r3, #16
 8009c42:	4618      	mov	r0, r3
 8009c44:	f00f fb0a 	bl	801925c <sys_mbox_valid>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d103      	bne.n	8009c56 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f003 ff4e 	bl	800daf0 <pbuf_free>
    return;
 8009c54:	e036      	b.n	8009cc4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009c56:	2006      	movs	r0, #6
 8009c58:	f003 f84c 	bl	800ccf4 <memp_malloc>
 8009c5c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d103      	bne.n	8009c6c <recv_udp+0x88>
    pbuf_free(p);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f003 ff43 	bl	800daf0 <pbuf_free>
    return;
 8009c6a:	e02b      	b.n	8009cc4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <recv_udp+0xa0>
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	e000      	b.n	8009c86 <recv_udp+0xa2>
 8009c84:	2300      	movs	r3, #0
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009c8e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	891b      	ldrh	r3, [r3, #8]
 8009c94:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	3310      	adds	r3, #16
 8009c9a:	69b9      	ldr	r1, [r7, #24]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f00f fa7b 	bl	8019198 <sys_mbox_trypost>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d003      	beq.n	8009cb0 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009ca8:	69b8      	ldr	r0, [r7, #24]
 8009caa:	f001 faff 	bl	800b2ac <netbuf_delete>
    return;
 8009cae:	e009      	b.n	8009cc4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d005      	beq.n	8009cc4 <recv_udp+0xe0>
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbc:	8afa      	ldrh	r2, [r7, #22]
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	69f8      	ldr	r0, [r7, #28]
 8009cc2:	4798      	blx	r3
  }
}
 8009cc4:	3720      	adds	r7, #32
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	0801ace4 	.word	0x0801ace4
 8009cd0:	0801ad5c 	.word	0x0801ad5c
 8009cd4:	0801ad28 	.word	0x0801ad28
 8009cd8:	0801ad80 	.word	0x0801ad80
 8009cdc:	0801ada0 	.word	0x0801ada0

08009ce0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b088      	sub	sp, #32
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
 8009cec:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d106      	bne.n	8009d02 <recv_tcp+0x22>
 8009cf4:	4b36      	ldr	r3, [pc, #216]	; (8009dd0 <recv_tcp+0xf0>)
 8009cf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009cfa:	4936      	ldr	r1, [pc, #216]	; (8009dd4 <recv_tcp+0xf4>)
 8009cfc:	4836      	ldr	r0, [pc, #216]	; (8009dd8 <recv_tcp+0xf8>)
 8009cfe:	f00f fc35 	bl	801956c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d106      	bne.n	8009d16 <recv_tcp+0x36>
 8009d08:	4b31      	ldr	r3, [pc, #196]	; (8009dd0 <recv_tcp+0xf0>)
 8009d0a:	f240 122d 	movw	r2, #301	; 0x12d
 8009d0e:	4933      	ldr	r1, [pc, #204]	; (8009ddc <recv_tcp+0xfc>)
 8009d10:	4831      	ldr	r0, [pc, #196]	; (8009dd8 <recv_tcp+0xf8>)
 8009d12:	f00f fc2b 	bl	801956c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d006      	beq.n	8009d2c <recv_tcp+0x4c>
 8009d1e:	4b2c      	ldr	r3, [pc, #176]	; (8009dd0 <recv_tcp+0xf0>)
 8009d20:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009d24:	492e      	ldr	r1, [pc, #184]	; (8009de0 <recv_tcp+0x100>)
 8009d26:	482c      	ldr	r0, [pc, #176]	; (8009dd8 <recv_tcp+0xf8>)
 8009d28:	f00f fc20 	bl	801956c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d102      	bne.n	8009d3c <recv_tcp+0x5c>
    return ERR_VAL;
 8009d36:	f06f 0305 	mvn.w	r3, #5
 8009d3a:	e045      	b.n	8009dc8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	68ba      	ldr	r2, [r7, #8]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d006      	beq.n	8009d54 <recv_tcp+0x74>
 8009d46:	4b22      	ldr	r3, [pc, #136]	; (8009dd0 <recv_tcp+0xf0>)
 8009d48:	f240 1235 	movw	r2, #309	; 0x135
 8009d4c:	4925      	ldr	r1, [pc, #148]	; (8009de4 <recv_tcp+0x104>)
 8009d4e:	4822      	ldr	r0, [pc, #136]	; (8009dd8 <recv_tcp+0xf8>)
 8009d50:	f00f fc0c 	bl	801956c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	3310      	adds	r3, #16
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f00f fa7f 	bl	801925c <sys_mbox_valid>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d10d      	bne.n	8009d80 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d008      	beq.n	8009d7c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	891b      	ldrh	r3, [r3, #8]
 8009d6e:	4619      	mov	r1, r3
 8009d70:	68b8      	ldr	r0, [r7, #8]
 8009d72:	f004 fe8d 	bl	800ea90 <tcp_recved>
      pbuf_free(p);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f003 feba 	bl	800daf0 <pbuf_free>
    }
    return ERR_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	e023      	b.n	8009dc8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d005      	beq.n	8009d92 <recv_tcp+0xb2>
    msg = p;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	891b      	ldrh	r3, [r3, #8]
 8009d8e:	83fb      	strh	r3, [r7, #30]
 8009d90:	e003      	b.n	8009d9a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009d92:	4b15      	ldr	r3, [pc, #84]	; (8009de8 <recv_tcp+0x108>)
 8009d94:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	3310      	adds	r3, #16
 8009d9e:	69b9      	ldr	r1, [r7, #24]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f00f f9f9 	bl	8019198 <sys_mbox_trypost>
 8009da6:	4603      	mov	r3, r0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009dac:	f04f 33ff 	mov.w	r3, #4294967295
 8009db0:	e00a      	b.n	8009dc8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d005      	beq.n	8009dc6 <recv_tcp+0xe6>
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbe:	8bfa      	ldrh	r2, [r7, #30]
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	6978      	ldr	r0, [r7, #20]
 8009dc4:	4798      	blx	r3
  }

  return ERR_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3720      	adds	r7, #32
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	0801ace4 	.word	0x0801ace4
 8009dd4:	0801adc0 	.word	0x0801adc0
 8009dd8:	0801ad28 	.word	0x0801ad28
 8009ddc:	0801ade4 	.word	0x0801ade4
 8009de0:	0801ae04 	.word	0x0801ae04
 8009de4:	0801ae1c 	.word	0x0801ae1c
 8009de8:	0801e4d2 	.word	0x0801e4d2

08009dec <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d106      	bne.n	8009e0e <poll_tcp+0x22>
 8009e00:	4b29      	ldr	r3, [pc, #164]	; (8009ea8 <poll_tcp+0xbc>)
 8009e02:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009e06:	4929      	ldr	r1, [pc, #164]	; (8009eac <poll_tcp+0xc0>)
 8009e08:	4829      	ldr	r0, [pc, #164]	; (8009eb0 <poll_tcp+0xc4>)
 8009e0a:	f00f fbaf 	bl	801956c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	785b      	ldrb	r3, [r3, #1]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d104      	bne.n	8009e20 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009e16:	2101      	movs	r1, #1
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 ff63 	bl	800ace4 <lwip_netconn_do_writemore>
 8009e1e:	e016      	b.n	8009e4e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	785b      	ldrb	r3, [r3, #1]
 8009e24:	2b04      	cmp	r3, #4
 8009e26:	d112      	bne.n	8009e4e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a1b      	ldr	r3, [r3, #32]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00a      	beq.n	8009e46 <poll_tcp+0x5a>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6a1b      	ldr	r3, [r3, #32]
 8009e34:	7a5b      	ldrb	r3, [r3, #9]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d005      	beq.n	8009e46 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	7a5a      	ldrb	r2, [r3, #9]
 8009e40:	3a01      	subs	r2, #1
 8009e42:	b2d2      	uxtb	r2, r2
 8009e44:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009e46:	2101      	movs	r1, #1
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 fbf7 	bl	800a63c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	7f1b      	ldrb	r3, [r3, #28]
 8009e52:	f003 0310 	and.w	r3, r3, #16
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d021      	beq.n	8009e9e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d01d      	beq.n	8009e9e <poll_tcp+0xb2>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009e6a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009e6e:	d316      	bcc.n	8009e9e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009e78:	2b04      	cmp	r3, #4
 8009e7a:	d810      	bhi.n	8009e9e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	7f1b      	ldrb	r3, [r3, #28]
 8009e80:	f023 0310 	bic.w	r3, r3, #16
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d005      	beq.n	8009e9e <poll_tcp+0xb2>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e96:	2200      	movs	r2, #0
 8009e98:	2102      	movs	r1, #2
 8009e9a:	68f8      	ldr	r0, [r7, #12]
 8009e9c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	0801ace4 	.word	0x0801ace4
 8009eac:	0801ae3c 	.word	0x0801ae3c
 8009eb0:	0801ad28 	.word	0x0801ad28

08009eb4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	60f8      	str	r0, [r7, #12]
 8009ebc:	60b9      	str	r1, [r7, #8]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d106      	bne.n	8009eda <sent_tcp+0x26>
 8009ecc:	4b20      	ldr	r3, [pc, #128]	; (8009f50 <sent_tcp+0x9c>)
 8009ece:	f240 1293 	movw	r2, #403	; 0x193
 8009ed2:	4920      	ldr	r1, [pc, #128]	; (8009f54 <sent_tcp+0xa0>)
 8009ed4:	4820      	ldr	r0, [pc, #128]	; (8009f58 <sent_tcp+0xa4>)
 8009ed6:	f00f fb49 	bl	801956c <iprintf>

  if (conn) {
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d032      	beq.n	8009f46 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	785b      	ldrb	r3, [r3, #1]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d104      	bne.n	8009ef2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009ee8:	2101      	movs	r1, #1
 8009eea:	6978      	ldr	r0, [r7, #20]
 8009eec:	f000 fefa 	bl	800ace4 <lwip_netconn_do_writemore>
 8009ef0:	e007      	b.n	8009f02 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	785b      	ldrb	r3, [r3, #1]
 8009ef6:	2b04      	cmp	r3, #4
 8009ef8:	d103      	bne.n	8009f02 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009efa:	2101      	movs	r1, #1
 8009efc:	6978      	ldr	r0, [r7, #20]
 8009efe:	f000 fb9d 	bl	800a63c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009f02:	697b      	ldr	r3, [r7, #20]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d01d      	beq.n	8009f46 <sent_tcp+0x92>
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009f12:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009f16:	d316      	bcc.n	8009f46 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009f20:	2b04      	cmp	r3, #4
 8009f22:	d810      	bhi.n	8009f46 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	7f1b      	ldrb	r3, [r3, #28]
 8009f28:	f023 0310 	bic.w	r3, r3, #16
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d005      	beq.n	8009f46 <sent_tcp+0x92>
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3e:	88fa      	ldrh	r2, [r7, #6]
 8009f40:	2102      	movs	r1, #2
 8009f42:	6978      	ldr	r0, [r7, #20]
 8009f44:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3718      	adds	r7, #24
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	0801ace4 	.word	0x0801ace4
 8009f54:	0801ae3c 	.word	0x0801ae3c
 8009f58:	0801ad28 	.word	0x0801ad28

08009f5c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d106      	bne.n	8009f80 <err_tcp+0x24>
 8009f72:	4b5f      	ldr	r3, [pc, #380]	; (800a0f0 <err_tcp+0x194>)
 8009f74:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009f78:	495e      	ldr	r1, [pc, #376]	; (800a0f4 <err_tcp+0x198>)
 8009f7a:	485f      	ldr	r0, [pc, #380]	; (800a0f8 <err_tcp+0x19c>)
 8009f7c:	f00f faf6 	bl	801956c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009f80:	f00f fa76 	bl	8019470 <sys_arch_protect>
 8009f84:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	78fa      	ldrb	r2, [r7, #3]
 8009f90:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	7f1b      	ldrb	r3, [r3, #28]
 8009f96:	f043 0301 	orr.w	r3, r3, #1
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	785b      	ldrb	r3, [r3, #1]
 8009fa4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009fac:	69b8      	ldr	r0, [r7, #24]
 8009fae:	f00f fa6d 	bl	801948c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009fb2:	69fb      	ldr	r3, [r7, #28]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d005      	beq.n	8009fc6 <err_tcp+0x6a>
 8009fba:	69fb      	ldr	r3, [r7, #28]
 8009fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	2104      	movs	r1, #4
 8009fc2:	69f8      	ldr	r0, [r7, #28]
 8009fc4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d005      	beq.n	8009fda <err_tcp+0x7e>
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	69f8      	ldr	r0, [r7, #28]
 8009fd8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d005      	beq.n	8009fee <err_tcp+0x92>
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2102      	movs	r1, #2
 8009fea:	69f8      	ldr	r0, [r7, #28]
 8009fec:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009fee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7ff fd8a 	bl	8009b0c <lwip_netconn_err_to_msg>
 8009ff8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	3310      	adds	r3, #16
 8009ffe:	4618      	mov	r0, r3
 800a000:	f00f f92c 	bl	801925c <sys_mbox_valid>
 800a004:	4603      	mov	r3, r0
 800a006:	2b00      	cmp	r3, #0
 800a008:	d005      	beq.n	800a016 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	3310      	adds	r3, #16
 800a00e:	6939      	ldr	r1, [r7, #16]
 800a010:	4618      	mov	r0, r3
 800a012:	f00f f8c1 	bl	8019198 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	3314      	adds	r3, #20
 800a01a:	4618      	mov	r0, r3
 800a01c:	f00f f91e 	bl	801925c <sys_mbox_valid>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d005      	beq.n	800a032 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	3314      	adds	r3, #20
 800a02a:	6939      	ldr	r1, [r7, #16]
 800a02c:	4618      	mov	r0, r3
 800a02e:	f00f f8b3 	bl	8019198 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a032:	7dfb      	ldrb	r3, [r7, #23]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d005      	beq.n	800a044 <err_tcp+0xe8>
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	2b04      	cmp	r3, #4
 800a03c:	d002      	beq.n	800a044 <err_tcp+0xe8>
 800a03e:	7dfb      	ldrb	r3, [r7, #23]
 800a040:	2b03      	cmp	r3, #3
 800a042:	d143      	bne.n	800a0cc <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	7f1b      	ldrb	r3, [r3, #28]
 800a048:	f003 0304 	and.w	r3, r3, #4
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	bf14      	ite	ne
 800a050:	2301      	movne	r3, #1
 800a052:	2300      	moveq	r3, #0
 800a054:	b2db      	uxtb	r3, r3
 800a056:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	7f1b      	ldrb	r3, [r3, #28]
 800a05c:	f023 0304 	bic.w	r3, r3, #4
 800a060:	b2da      	uxtb	r2, r3
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d13b      	bne.n	800a0e4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	6a1b      	ldr	r3, [r3, #32]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d106      	bne.n	800a082 <err_tcp+0x126>
 800a074:	4b1e      	ldr	r3, [pc, #120]	; (800a0f0 <err_tcp+0x194>)
 800a076:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a07a:	4920      	ldr	r1, [pc, #128]	; (800a0fc <err_tcp+0x1a0>)
 800a07c:	481e      	ldr	r0, [pc, #120]	; (800a0f8 <err_tcp+0x19c>)
 800a07e:	f00f fa75 	bl	801956c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a082:	7dfb      	ldrb	r3, [r7, #23]
 800a084:	2b04      	cmp	r3, #4
 800a086:	d104      	bne.n	800a092 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	6a1b      	ldr	r3, [r3, #32]
 800a08c:	2200      	movs	r2, #0
 800a08e:	711a      	strb	r2, [r3, #4]
 800a090:	e003      	b.n	800a09a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	78fa      	ldrb	r2, [r7, #3]
 800a098:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	330c      	adds	r3, #12
 800a0a2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a0a4:	68b8      	ldr	r0, [r7, #8]
 800a0a6:	f00f f967 	bl	8019378 <sys_sem_valid>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d106      	bne.n	800a0be <err_tcp+0x162>
 800a0b0:	4b0f      	ldr	r3, [pc, #60]	; (800a0f0 <err_tcp+0x194>)
 800a0b2:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a0b6:	4912      	ldr	r1, [pc, #72]	; (800a100 <err_tcp+0x1a4>)
 800a0b8:	480f      	ldr	r0, [pc, #60]	; (800a0f8 <err_tcp+0x19c>)
 800a0ba:	f00f fa57 	bl	801956c <iprintf>
      conn->current_msg = NULL;
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a0c4:	68b8      	ldr	r0, [r7, #8]
 800a0c6:	f00f f93d 	bl	8019344 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a0ca:	e00b      	b.n	800a0e4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	6a1b      	ldr	r3, [r3, #32]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d008      	beq.n	800a0e6 <err_tcp+0x18a>
 800a0d4:	4b06      	ldr	r3, [pc, #24]	; (800a0f0 <err_tcp+0x194>)
 800a0d6:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a0da:	490a      	ldr	r1, [pc, #40]	; (800a104 <err_tcp+0x1a8>)
 800a0dc:	4806      	ldr	r0, [pc, #24]	; (800a0f8 <err_tcp+0x19c>)
 800a0de:	f00f fa45 	bl	801956c <iprintf>
  }
}
 800a0e2:	e000      	b.n	800a0e6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a0e4:	bf00      	nop
}
 800a0e6:	bf00      	nop
 800a0e8:	3720      	adds	r7, #32
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	0801ace4 	.word	0x0801ace4
 800a0f4:	0801ae3c 	.word	0x0801ae3c
 800a0f8:	0801ad28 	.word	0x0801ad28
 800a0fc:	0801ae4c 	.word	0x0801ae4c
 800a100:	0801ae68 	.word	0x0801ae68
 800a104:	0801ae84 	.word	0x0801ae84

0800a108 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a116:	6879      	ldr	r1, [r7, #4]
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f005 fb99 	bl	800f850 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a11e:	490a      	ldr	r1, [pc, #40]	; (800a148 <setup_tcp+0x40>)
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f005 fba7 	bl	800f874 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a126:	4909      	ldr	r1, [pc, #36]	; (800a14c <setup_tcp+0x44>)
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f005 fbc5 	bl	800f8b8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a12e:	2202      	movs	r2, #2
 800a130:	4907      	ldr	r1, [pc, #28]	; (800a150 <setup_tcp+0x48>)
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f005 fc1c 	bl	800f970 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a138:	4906      	ldr	r1, [pc, #24]	; (800a154 <setup_tcp+0x4c>)
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f005 fbde 	bl	800f8fc <tcp_err>
}
 800a140:	bf00      	nop
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	08009ce1 	.word	0x08009ce1
 800a14c:	08009eb5 	.word	0x08009eb5
 800a150:	08009ded 	.word	0x08009ded
 800a154:	08009f5d 	.word	0x08009f5d

0800a158 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a158:	b590      	push	{r4, r7, lr}
 800a15a:	b089      	sub	sp, #36	; 0x24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	4613      	mov	r3, r2
 800a164:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d102      	bne.n	800a176 <accept_function+0x1e>
    return ERR_VAL;
 800a170:	f06f 0305 	mvn.w	r3, #5
 800a174:	e0a1      	b.n	800a2ba <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	3314      	adds	r3, #20
 800a17a:	4618      	mov	r0, r3
 800a17c:	f00f f86e 	bl	801925c <sys_mbox_valid>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d102      	bne.n	800a18c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a186:	f06f 0305 	mvn.w	r3, #5
 800a18a:	e096      	b.n	800a2ba <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d11b      	bne.n	800a1ca <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a192:	69fb      	ldr	r3, [r7, #28]
 800a194:	f103 0414 	add.w	r4, r3, #20
 800a198:	f06f 000c 	mvn.w	r0, #12
 800a19c:	f7ff fcb6 	bl	8009b0c <lwip_netconn_err_to_msg>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f00e fff7 	bl	8019198 <sys_mbox_trypost>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d109      	bne.n	800a1c4 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d005      	beq.n	800a1c4 <accept_function+0x6c>
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2100      	movs	r1, #0
 800a1c0:	69f8      	ldr	r0, [r7, #28]
 800a1c2:	4798      	blx	r3
    }
    return ERR_VAL;
 800a1c4:	f06f 0305 	mvn.w	r3, #5
 800a1c8:	e077      	b.n	800a2ba <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a1ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d006      	beq.n	800a1e0 <accept_function+0x88>
 800a1d2:	4b3c      	ldr	r3, [pc, #240]	; (800a2c4 <accept_function+0x16c>)
 800a1d4:	f240 222a 	movw	r2, #554	; 0x22a
 800a1d8:	493b      	ldr	r1, [pc, #236]	; (800a2c8 <accept_function+0x170>)
 800a1da:	483c      	ldr	r0, [pc, #240]	; (800a2cc <accept_function+0x174>)
 800a1dc:	f00f f9c6 	bl	801956c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	781a      	ldrb	r2, [r3, #0]
 800a1e4:	69fb      	ldr	r3, [r7, #28]
 800a1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	f000 f8f0 	bl	800a3d0 <netconn_alloc>
 800a1f0:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d11b      	bne.n	800a230 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	f103 0414 	add.w	r4, r3, #20
 800a1fe:	f06f 000c 	mvn.w	r0, #12
 800a202:	f7ff fc83 	bl	8009b0c <lwip_netconn_err_to_msg>
 800a206:	4603      	mov	r3, r0
 800a208:	4619      	mov	r1, r3
 800a20a:	4620      	mov	r0, r4
 800a20c:	f00e ffc4 	bl	8019198 <sys_mbox_trypost>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d109      	bne.n	800a22a <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a216:	69fb      	ldr	r3, [r7, #28]
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d005      	beq.n	800a22a <accept_function+0xd2>
 800a21e:	69fb      	ldr	r3, [r7, #28]
 800a220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a222:	2200      	movs	r2, #0
 800a224:	2100      	movs	r1, #0
 800a226:	69f8      	ldr	r0, [r7, #28]
 800a228:	4798      	blx	r3
    }
    return ERR_MEM;
 800a22a:	f04f 33ff 	mov.w	r3, #4294967295
 800a22e:	e044      	b.n	800a2ba <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a236:	69b8      	ldr	r0, [r7, #24]
 800a238:	f7ff ff66 	bl	800a108 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a23c:	69fb      	ldr	r3, [r7, #28]
 800a23e:	3314      	adds	r3, #20
 800a240:	69b9      	ldr	r1, [r7, #24]
 800a242:	4618      	mov	r0, r3
 800a244:	f00e ffa8 	bl	8019198 <sys_mbox_trypost>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d02a      	beq.n	800a2a4 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a254:	2100      	movs	r1, #0
 800a256:	6978      	ldr	r0, [r7, #20]
 800a258:	f005 fafa 	bl	800f850 <tcp_arg>
    tcp_recv(pcb, NULL);
 800a25c:	2100      	movs	r1, #0
 800a25e:	6978      	ldr	r0, [r7, #20]
 800a260:	f005 fb08 	bl	800f874 <tcp_recv>
    tcp_sent(pcb, NULL);
 800a264:	2100      	movs	r1, #0
 800a266:	6978      	ldr	r0, [r7, #20]
 800a268:	f005 fb26 	bl	800f8b8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a26c:	2200      	movs	r2, #0
 800a26e:	2100      	movs	r1, #0
 800a270:	6978      	ldr	r0, [r7, #20]
 800a272:	f005 fb7d 	bl	800f970 <tcp_poll>
    tcp_err(pcb, NULL);
 800a276:	2100      	movs	r1, #0
 800a278:	6978      	ldr	r0, [r7, #20]
 800a27a:	f005 fb3f 	bl	800f8fc <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	2200      	movs	r2, #0
 800a282:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	3310      	adds	r3, #16
 800a288:	4618      	mov	r0, r3
 800a28a:	f00e ff73 	bl	8019174 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	3310      	adds	r3, #16
 800a292:	4618      	mov	r0, r3
 800a294:	f00e fff3 	bl	801927e <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a298:	69b8      	ldr	r0, [r7, #24]
 800a29a:	f000 f907 	bl	800a4ac <netconn_free>
    return ERR_MEM;
 800a29e:	f04f 33ff 	mov.w	r3, #4294967295
 800a2a2:	e00a      	b.n	800a2ba <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a2a4:	69fb      	ldr	r3, [r7, #28]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d005      	beq.n	800a2b8 <accept_function+0x160>
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	69f8      	ldr	r0, [r7, #28]
 800a2b6:	4798      	blx	r3
  }

  return ERR_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3724      	adds	r7, #36	; 0x24
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd90      	pop	{r4, r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	0801ace4 	.word	0x0801ace4
 800a2c8:	0801aea0 	.word	0x0801aea0
 800a2cc:	0801ad28 	.word	0x0801ad28

0800a2d0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a2d0:	b590      	push	{r4, r7, lr}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d006      	beq.n	800a2f4 <pcb_new+0x24>
 800a2e6:	4b2b      	ldr	r3, [pc, #172]	; (800a394 <pcb_new+0xc4>)
 800a2e8:	f240 2265 	movw	r2, #613	; 0x265
 800a2ec:	492a      	ldr	r1, [pc, #168]	; (800a398 <pcb_new+0xc8>)
 800a2ee:	482b      	ldr	r0, [pc, #172]	; (800a39c <pcb_new+0xcc>)
 800a2f0:	f00f f93c 	bl	801956c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a2fe:	2b10      	cmp	r3, #16
 800a300:	d022      	beq.n	800a348 <pcb_new+0x78>
 800a302:	2b20      	cmp	r3, #32
 800a304:	d133      	bne.n	800a36e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681c      	ldr	r4, [r3, #0]
 800a30a:	7bfb      	ldrb	r3, [r7, #15]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f00a fd50 	bl	8014db2 <udp_new_ip_type>
 800a312:	4603      	mov	r3, r0
 800a314:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d02a      	beq.n	800a376 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	2b22      	cmp	r3, #34	; 0x22
 800a328:	d104      	bne.n	800a334 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6858      	ldr	r0, [r3, #4]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	461a      	mov	r2, r3
 800a340:	4917      	ldr	r1, [pc, #92]	; (800a3a0 <pcb_new+0xd0>)
 800a342:	f00a fcbd 	bl	8014cc0 <udp_recv>
      }
      break;
 800a346:	e016      	b.n	800a376 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681c      	ldr	r4, [r3, #0]
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
 800a34e:	4618      	mov	r0, r3
 800a350:	f005 fa70 	bl	800f834 <tcp_new_ip_type>
 800a354:	4603      	mov	r3, r0
 800a356:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00b      	beq.n	800a37a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4618      	mov	r0, r3
 800a368:	f7ff fece 	bl	800a108 <setup_tcp>
      }
      break;
 800a36c:	e005      	b.n	800a37a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	22fa      	movs	r2, #250	; 0xfa
 800a372:	711a      	strb	r2, [r3, #4]
      return;
 800a374:	e00a      	b.n	800a38c <pcb_new+0xbc>
      break;
 800a376:	bf00      	nop
 800a378:	e000      	b.n	800a37c <pcb_new+0xac>
      break;
 800a37a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d102      	bne.n	800a38c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	22ff      	movs	r2, #255	; 0xff
 800a38a:	711a      	strb	r2, [r3, #4]
  }
}
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd90      	pop	{r4, r7, pc}
 800a392:	bf00      	nop
 800a394:	0801ace4 	.word	0x0801ace4
 800a398:	0801aec8 	.word	0x0801aec8
 800a39c:	0801ad28 	.word	0x0801ad28
 800a3a0:	08009be5 	.word	0x08009be5

0800a3a4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	685b      	ldr	r3, [r3, #4]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d102      	bne.n	800a3c6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f7ff ff85 	bl	800a2d0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a3c6:	bf00      	nop
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
	...

0800a3d0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b086      	sub	sp, #24
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	6039      	str	r1, [r7, #0]
 800a3da:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a3e0:	2007      	movs	r0, #7
 800a3e2:	f002 fc87 	bl	800ccf4 <memp_malloc>
 800a3e6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <netconn_alloc+0x22>
    return NULL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	e052      	b.n	800a498 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	79fa      	ldrb	r2, [r7, #7]
 800a3fc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a40a:	2b10      	cmp	r3, #16
 800a40c:	d004      	beq.n	800a418 <netconn_alloc+0x48>
 800a40e:	2b20      	cmp	r3, #32
 800a410:	d105      	bne.n	800a41e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a412:	2306      	movs	r3, #6
 800a414:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a416:	e00a      	b.n	800a42e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a418:	2306      	movs	r3, #6
 800a41a:	617b      	str	r3, [r7, #20]
      break;
 800a41c:	e007      	b.n	800a42e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a41e:	4b20      	ldr	r3, [pc, #128]	; (800a4a0 <netconn_alloc+0xd0>)
 800a420:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a424:	491f      	ldr	r1, [pc, #124]	; (800a4a4 <netconn_alloc+0xd4>)
 800a426:	4820      	ldr	r0, [pc, #128]	; (800a4a8 <netconn_alloc+0xd8>)
 800a428:	f00f f8a0 	bl	801956c <iprintf>
      goto free_and_return;
 800a42c:	e02f      	b.n	800a48e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	3310      	adds	r3, #16
 800a432:	6979      	ldr	r1, [r7, #20]
 800a434:	4618      	mov	r0, r3
 800a436:	f00e fe83 	bl	8019140 <sys_mbox_new>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d125      	bne.n	800a48c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	330c      	adds	r3, #12
 800a444:	2100      	movs	r1, #0
 800a446:	4618      	mov	r0, r3
 800a448:	f00e ff26 	bl	8019298 <sys_sem_new>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d005      	beq.n	800a45e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	3310      	adds	r3, #16
 800a456:	4618      	mov	r0, r3
 800a458:	f00e fe8c 	bl	8019174 <sys_mbox_free>
    goto free_and_return;
 800a45c:	e017      	b.n	800a48e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	3314      	adds	r3, #20
 800a462:	4618      	mov	r0, r3
 800a464:	f00e ff0b 	bl	801927e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2200      	movs	r2, #0
 800a46c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f04f 32ff 	mov.w	r2, #4294967295
 800a474:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	683a      	ldr	r2, [r7, #0]
 800a47a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	7cfa      	ldrb	r2, [r7, #19]
 800a486:	771a      	strb	r2, [r3, #28]
  return conn;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	e005      	b.n	800a498 <netconn_alloc+0xc8>
    goto free_and_return;
 800a48c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a48e:	68f9      	ldr	r1, [r7, #12]
 800a490:	2007      	movs	r0, #7
 800a492:	f002 fc81 	bl	800cd98 <memp_free>
  return NULL;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3718      	adds	r7, #24
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	0801ace4 	.word	0x0801ace4
 800a4a4:	0801aee8 	.word	0x0801aee8
 800a4a8:	0801ad28 	.word	0x0801ad28

0800a4ac <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d006      	beq.n	800a4ca <netconn_free+0x1e>
 800a4bc:	4b1b      	ldr	r3, [pc, #108]	; (800a52c <netconn_free+0x80>)
 800a4be:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a4c2:	491b      	ldr	r1, [pc, #108]	; (800a530 <netconn_free+0x84>)
 800a4c4:	481b      	ldr	r0, [pc, #108]	; (800a534 <netconn_free+0x88>)
 800a4c6:	f00f f851 	bl	801956c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3310      	adds	r3, #16
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f00e fec4 	bl	801925c <sys_mbox_valid>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d006      	beq.n	800a4e8 <netconn_free+0x3c>
 800a4da:	4b14      	ldr	r3, [pc, #80]	; (800a52c <netconn_free+0x80>)
 800a4dc:	f44f 7249 	mov.w	r2, #804	; 0x324
 800a4e0:	4915      	ldr	r1, [pc, #84]	; (800a538 <netconn_free+0x8c>)
 800a4e2:	4814      	ldr	r0, [pc, #80]	; (800a534 <netconn_free+0x88>)
 800a4e4:	f00f f842 	bl	801956c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	3314      	adds	r3, #20
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f00e feb5 	bl	801925c <sys_mbox_valid>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d006      	beq.n	800a506 <netconn_free+0x5a>
 800a4f8:	4b0c      	ldr	r3, [pc, #48]	; (800a52c <netconn_free+0x80>)
 800a4fa:	f240 3227 	movw	r2, #807	; 0x327
 800a4fe:	490f      	ldr	r1, [pc, #60]	; (800a53c <netconn_free+0x90>)
 800a500:	480c      	ldr	r0, [pc, #48]	; (800a534 <netconn_free+0x88>)
 800a502:	f00f f833 	bl	801956c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	330c      	adds	r3, #12
 800a50a:	4618      	mov	r0, r3
 800a50c:	f00e ff27 	bl	801935e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	330c      	adds	r3, #12
 800a514:	4618      	mov	r0, r3
 800a516:	f00e ff40 	bl	801939a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a51a:	6879      	ldr	r1, [r7, #4]
 800a51c:	2007      	movs	r0, #7
 800a51e:	f002 fc3b 	bl	800cd98 <memp_free>
}
 800a522:	bf00      	nop
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	0801ace4 	.word	0x0801ace4
 800a530:	0801af10 	.word	0x0801af10
 800a534:	0801ad28 	.word	0x0801ad28
 800a538:	0801af40 	.word	0x0801af40
 800a53c:	0801af7c 	.word	0x0801af7c

0800a540 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3310      	adds	r3, #16
 800a54c:	4618      	mov	r0, r3
 800a54e:	f00e fe85 	bl	801925c <sys_mbox_valid>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d02f      	beq.n	800a5b8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a558:	e018      	b.n	800a58c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a562:	2b10      	cmp	r3, #16
 800a564:	d10e      	bne.n	800a584 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a566:	693b      	ldr	r3, [r7, #16]
 800a568:	f107 020f 	add.w	r2, r7, #15
 800a56c:	4611      	mov	r1, r2
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff fafe 	bl	8009b70 <lwip_netconn_is_err_msg>
 800a574:	4603      	mov	r3, r0
 800a576:	2b00      	cmp	r3, #0
 800a578:	d108      	bne.n	800a58c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f003 fab7 	bl	800daf0 <pbuf_free>
 800a582:	e003      	b.n	800a58c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	4618      	mov	r0, r3
 800a588:	f000 fe90 	bl	800b2ac <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	3310      	adds	r3, #16
 800a590:	f107 0210 	add.w	r2, r7, #16
 800a594:	4611      	mov	r1, r2
 800a596:	4618      	mov	r0, r3
 800a598:	f00e fe49 	bl	801922e <sys_arch_mbox_tryfetch>
 800a59c:	4603      	mov	r3, r0
 800a59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a2:	d1da      	bne.n	800a55a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	3310      	adds	r3, #16
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f00e fde3 	bl	8019174 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	3310      	adds	r3, #16
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f00e fe63 	bl	801927e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	3314      	adds	r3, #20
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f00e fe4d 	bl	801925c <sys_mbox_valid>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d034      	beq.n	800a632 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a5c8:	e01d      	b.n	800a606 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a5ca:	693b      	ldr	r3, [r7, #16]
 800a5cc:	f107 020e 	add.w	r2, r7, #14
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7ff facc 	bl	8009b70 <lwip_netconn_is_err_msg>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d113      	bne.n	800a606 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a5e2:	6978      	ldr	r0, [r7, #20]
 800a5e4:	f7ff ffac 	bl	800a540 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d007      	beq.n	800a600 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f004 f871 	bl	800e6dc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a600:	6978      	ldr	r0, [r7, #20]
 800a602:	f7ff ff53 	bl	800a4ac <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	3314      	adds	r3, #20
 800a60a:	f107 0210 	add.w	r2, r7, #16
 800a60e:	4611      	mov	r1, r2
 800a610:	4618      	mov	r0, r3
 800a612:	f00e fe0c 	bl	801922e <sys_arch_mbox_tryfetch>
 800a616:	4603      	mov	r3, r0
 800a618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a61c:	d1d5      	bne.n	800a5ca <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	3314      	adds	r3, #20
 800a622:	4618      	mov	r0, r3
 800a624:	f00e fda6 	bl	8019174 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	3314      	adds	r3, #20
 800a62c:	4618      	mov	r0, r3
 800a62e:	f00e fe26 	bl	801927e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a632:	bf00      	nop
 800a634:	3718      	adds	r7, #24
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
	...

0800a63c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a648:	2300      	movs	r3, #0
 800a64a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d106      	bne.n	800a660 <lwip_netconn_do_close_internal+0x24>
 800a652:	4ba1      	ldr	r3, [pc, #644]	; (800a8d8 <lwip_netconn_do_close_internal+0x29c>)
 800a654:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a658:	49a0      	ldr	r1, [pc, #640]	; (800a8dc <lwip_netconn_do_close_internal+0x2a0>)
 800a65a:	48a1      	ldr	r0, [pc, #644]	; (800a8e0 <lwip_netconn_do_close_internal+0x2a4>)
 800a65c:	f00e ff86 	bl	801956c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a668:	2b10      	cmp	r3, #16
 800a66a:	d006      	beq.n	800a67a <lwip_netconn_do_close_internal+0x3e>
 800a66c:	4b9a      	ldr	r3, [pc, #616]	; (800a8d8 <lwip_netconn_do_close_internal+0x29c>)
 800a66e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a672:	499c      	ldr	r1, [pc, #624]	; (800a8e4 <lwip_netconn_do_close_internal+0x2a8>)
 800a674:	489a      	ldr	r0, [pc, #616]	; (800a8e0 <lwip_netconn_do_close_internal+0x2a4>)
 800a676:	f00e ff79 	bl	801956c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	785b      	ldrb	r3, [r3, #1]
 800a67e:	2b04      	cmp	r3, #4
 800a680:	d006      	beq.n	800a690 <lwip_netconn_do_close_internal+0x54>
 800a682:	4b95      	ldr	r3, [pc, #596]	; (800a8d8 <lwip_netconn_do_close_internal+0x29c>)
 800a684:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a688:	4997      	ldr	r1, [pc, #604]	; (800a8e8 <lwip_netconn_do_close_internal+0x2ac>)
 800a68a:	4895      	ldr	r0, [pc, #596]	; (800a8e0 <lwip_netconn_do_close_internal+0x2a4>)
 800a68c:	f00e ff6e 	bl	801956c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d106      	bne.n	800a6a6 <lwip_netconn_do_close_internal+0x6a>
 800a698:	4b8f      	ldr	r3, [pc, #572]	; (800a8d8 <lwip_netconn_do_close_internal+0x29c>)
 800a69a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a69e:	4993      	ldr	r1, [pc, #588]	; (800a8ec <lwip_netconn_do_close_internal+0x2b0>)
 800a6a0:	488f      	ldr	r0, [pc, #572]	; (800a8e0 <lwip_netconn_do_close_internal+0x2a4>)
 800a6a2:	f00e ff63 	bl	801956c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6a1b      	ldr	r3, [r3, #32]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d106      	bne.n	800a6bc <lwip_netconn_do_close_internal+0x80>
 800a6ae:	4b8a      	ldr	r3, [pc, #552]	; (800a8d8 <lwip_netconn_do_close_internal+0x29c>)
 800a6b0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a6b4:	498e      	ldr	r1, [pc, #568]	; (800a8f0 <lwip_netconn_do_close_internal+0x2b4>)
 800a6b6:	488a      	ldr	r0, [pc, #552]	; (800a8e0 <lwip_netconn_do_close_internal+0x2a4>)
 800a6b8:	f00e ff58 	bl	801956c <iprintf>

  tpcb = conn->pcb.tcp;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6a1b      	ldr	r3, [r3, #32]
 800a6c6:	7a1b      	ldrb	r3, [r3, #8]
 800a6c8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a6d2:	7bfb      	ldrb	r3, [r7, #15]
 800a6d4:	f003 0302 	and.w	r3, r3, #2
 800a6d8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	d102      	bne.n	800a6e6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	75bb      	strb	r3, [r7, #22]
 800a6e4:	e01f      	b.n	800a726 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a6e6:	7bbb      	ldrb	r3, [r7, #14]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00e      	beq.n	800a70a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a6f0:	2b05      	cmp	r3, #5
 800a6f2:	d007      	beq.n	800a704 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a6f8:	2b06      	cmp	r3, #6
 800a6fa:	d003      	beq.n	800a704 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a700:	2b08      	cmp	r3, #8
 800a702:	d102      	bne.n	800a70a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a704:	2301      	movs	r3, #1
 800a706:	75bb      	strb	r3, [r7, #22]
 800a708:	e00d      	b.n	800a726 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a70a:	7b7b      	ldrb	r3, [r7, #13]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d008      	beq.n	800a722 <lwip_netconn_do_close_internal+0xe6>
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	8b5b      	ldrh	r3, [r3, #26]
 800a714:	f003 0310 	and.w	r3, r3, #16
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a71c:	2301      	movs	r3, #1
 800a71e:	75bb      	strb	r3, [r7, #22]
 800a720:	e001      	b.n	800a726 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a726:	7dbb      	ldrb	r3, [r7, #22]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d003      	beq.n	800a734 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a72c:	2100      	movs	r1, #0
 800a72e:	6938      	ldr	r0, [r7, #16]
 800a730:	f005 f88e 	bl	800f850 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	7d1b      	ldrb	r3, [r3, #20]
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d104      	bne.n	800a746 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a73c:	2100      	movs	r1, #0
 800a73e:	6938      	ldr	r0, [r7, #16]
 800a740:	f005 f8fe 	bl	800f940 <tcp_accept>
 800a744:	e01d      	b.n	800a782 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a746:	7bbb      	ldrb	r3, [r7, #14]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d007      	beq.n	800a75c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a74c:	2100      	movs	r1, #0
 800a74e:	6938      	ldr	r0, [r7, #16]
 800a750:	f005 f890 	bl	800f874 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a754:	2100      	movs	r1, #0
 800a756:	6938      	ldr	r0, [r7, #16]
 800a758:	f005 f8f2 	bl	800f940 <tcp_accept>
    }
    if (shut_tx) {
 800a75c:	7b7b      	ldrb	r3, [r7, #13]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d003      	beq.n	800a76a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a762:	2100      	movs	r1, #0
 800a764:	6938      	ldr	r0, [r7, #16]
 800a766:	f005 f8a7 	bl	800f8b8 <tcp_sent>
    }
    if (shut_close) {
 800a76a:	7dbb      	ldrb	r3, [r7, #22]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d008      	beq.n	800a782 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a770:	2200      	movs	r2, #0
 800a772:	2100      	movs	r1, #0
 800a774:	6938      	ldr	r0, [r7, #16]
 800a776:	f005 f8fb 	bl	800f970 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a77a:	2100      	movs	r1, #0
 800a77c:	6938      	ldr	r0, [r7, #16]
 800a77e:	f005 f8bd 	bl	800f8fc <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a782:	7dbb      	ldrb	r3, [r7, #22]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d005      	beq.n	800a794 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a788:	6938      	ldr	r0, [r7, #16]
 800a78a:	f003 fe63 	bl	800e454 <tcp_close>
 800a78e:	4603      	mov	r3, r0
 800a790:	75fb      	strb	r3, [r7, #23]
 800a792:	e007      	b.n	800a7a4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a794:	7bbb      	ldrb	r3, [r7, #14]
 800a796:	7b7a      	ldrb	r2, [r7, #13]
 800a798:	4619      	mov	r1, r3
 800a79a:	6938      	ldr	r0, [r7, #16]
 800a79c:	f003 fe86 	bl	800e4ac <tcp_shutdown>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a7a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d102      	bne.n	800a7b2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	757b      	strb	r3, [r7, #21]
 800a7b0:	e016      	b.n	800a7e0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a7b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ba:	d10f      	bne.n	800a7dc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6a1b      	ldr	r3, [r3, #32]
 800a7c0:	7a5b      	ldrb	r3, [r3, #9]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10c      	bne.n	800a7e0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a7ca:	7dbb      	ldrb	r3, [r7, #22]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d007      	beq.n	800a7e0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a7d0:	6938      	ldr	r0, [r7, #16]
 800a7d2:	f003 ff83 	bl	800e6dc <tcp_abort>
          err = ERR_OK;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	75fb      	strb	r3, [r7, #23]
 800a7da:	e001      	b.n	800a7e0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a7e0:	7d7b      	ldrb	r3, [r7, #21]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d044      	beq.n	800a870 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6a1b      	ldr	r3, [r3, #32]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	330c      	adds	r3, #12
 800a7ee:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6a1b      	ldr	r3, [r3, #32]
 800a7f4:	7dfa      	ldrb	r2, [r7, #23]
 800a7f6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a804:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d129      	bne.n	800a860 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a80c:	7dbb      	ldrb	r3, [r7, #22]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00c      	beq.n	800a82c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2200      	movs	r2, #0
 800a816:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d005      	beq.n	800a82c <lwip_netconn_do_close_internal+0x1f0>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a824:	2200      	movs	r2, #0
 800a826:	2104      	movs	r1, #4
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	4798      	blx	r3
      }
      if (shut_rx) {
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d009      	beq.n	800a846 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a836:	2b00      	cmp	r3, #0
 800a838:	d005      	beq.n	800a846 <lwip_netconn_do_close_internal+0x20a>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	2200      	movs	r2, #0
 800a840:	2100      	movs	r1, #0
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	4798      	blx	r3
      }
      if (shut_tx) {
 800a846:	7b7b      	ldrb	r3, [r7, #13]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d009      	beq.n	800a860 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a850:	2b00      	cmp	r3, #0
 800a852:	d005      	beq.n	800a860 <lwip_netconn_do_close_internal+0x224>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a858:	2200      	movs	r2, #0
 800a85a:	2102      	movs	r1, #2
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a860:	78fb      	ldrb	r3, [r7, #3]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d002      	beq.n	800a86c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a866:	68b8      	ldr	r0, [r7, #8]
 800a868:	f00e fd6c 	bl	8019344 <sys_sem_signal>
    }
    return ERR_OK;
 800a86c:	2300      	movs	r3, #0
 800a86e:	e02e      	b.n	800a8ce <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a870:	7d7b      	ldrb	r3, [r7, #21]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d11e      	bne.n	800a8b4 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	7d1b      	ldrb	r3, [r3, #20]
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d106      	bne.n	800a88c <lwip_netconn_do_close_internal+0x250>
 800a87e:	4b16      	ldr	r3, [pc, #88]	; (800a8d8 <lwip_netconn_do_close_internal+0x29c>)
 800a880:	f240 4241 	movw	r2, #1089	; 0x441
 800a884:	491b      	ldr	r1, [pc, #108]	; (800a8f4 <lwip_netconn_do_close_internal+0x2b8>)
 800a886:	4816      	ldr	r0, [pc, #88]	; (800a8e0 <lwip_netconn_do_close_internal+0x2a4>)
 800a888:	f00e fe70 	bl	801956c <iprintf>
    if (shut_tx) {
 800a88c:	7b7b      	ldrb	r3, [r7, #13]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d003      	beq.n	800a89a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a892:	4919      	ldr	r1, [pc, #100]	; (800a8f8 <lwip_netconn_do_close_internal+0x2bc>)
 800a894:	6938      	ldr	r0, [r7, #16]
 800a896:	f005 f80f 	bl	800f8b8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a89a:	2201      	movs	r2, #1
 800a89c:	4917      	ldr	r1, [pc, #92]	; (800a8fc <lwip_netconn_do_close_internal+0x2c0>)
 800a89e:	6938      	ldr	r0, [r7, #16]
 800a8a0:	f005 f866 	bl	800f970 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a8a4:	4916      	ldr	r1, [pc, #88]	; (800a900 <lwip_netconn_do_close_internal+0x2c4>)
 800a8a6:	6938      	ldr	r0, [r7, #16]
 800a8a8:	f005 f828 	bl	800f8fc <tcp_err>
    tcp_arg(tpcb, conn);
 800a8ac:	6879      	ldr	r1, [r7, #4]
 800a8ae:	6938      	ldr	r0, [r7, #16]
 800a8b0:	f004 ffce 	bl	800f850 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a8b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d106      	bne.n	800a8ca <lwip_netconn_do_close_internal+0x28e>
 800a8bc:	4b06      	ldr	r3, [pc, #24]	; (800a8d8 <lwip_netconn_do_close_internal+0x29c>)
 800a8be:	f240 424d 	movw	r2, #1101	; 0x44d
 800a8c2:	4910      	ldr	r1, [pc, #64]	; (800a904 <lwip_netconn_do_close_internal+0x2c8>)
 800a8c4:	4806      	ldr	r0, [pc, #24]	; (800a8e0 <lwip_netconn_do_close_internal+0x2a4>)
 800a8c6:	f00e fe51 	bl	801956c <iprintf>
  return err;
 800a8ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	0801ace4 	.word	0x0801ace4
 800a8dc:	0801afb8 	.word	0x0801afb8
 800a8e0:	0801ad28 	.word	0x0801ad28
 800a8e4:	0801afc8 	.word	0x0801afc8
 800a8e8:	0801afe8 	.word	0x0801afe8
 800a8ec:	0801b00c 	.word	0x0801b00c
 800a8f0:	0801ae4c 	.word	0x0801ae4c
 800a8f4:	0801b020 	.word	0x0801b020
 800a8f8:	08009eb5 	.word	0x08009eb5
 800a8fc:	08009ded 	.word	0x08009ded
 800a900:	08009f5d 	.word	0x08009f5d
 800a904:	0801b044 	.word	0x0801b044

0800a908 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	785b      	ldrb	r3, [r3, #1]
 800a91a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a91c:	7afb      	ldrb	r3, [r7, #11]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d00d      	beq.n	800a93e <lwip_netconn_do_delconn+0x36>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a92c:	2b10      	cmp	r3, #16
 800a92e:	d006      	beq.n	800a93e <lwip_netconn_do_delconn+0x36>
 800a930:	4b60      	ldr	r3, [pc, #384]	; (800aab4 <lwip_netconn_do_delconn+0x1ac>)
 800a932:	f240 425f 	movw	r2, #1119	; 0x45f
 800a936:	4960      	ldr	r1, [pc, #384]	; (800aab8 <lwip_netconn_do_delconn+0x1b0>)
 800a938:	4860      	ldr	r0, [pc, #384]	; (800aabc <lwip_netconn_do_delconn+0x1b4>)
 800a93a:	f00e fe17 	bl	801956c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a93e:	7afb      	ldrb	r3, [r7, #11]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d005      	beq.n	800a950 <lwip_netconn_do_delconn+0x48>
 800a944:	7afb      	ldrb	r3, [r7, #11]
 800a946:	2b02      	cmp	r3, #2
 800a948:	d002      	beq.n	800a950 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a94a:	7afb      	ldrb	r3, [r7, #11]
 800a94c:	2b03      	cmp	r3, #3
 800a94e:	d109      	bne.n	800a964 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a950:	7afb      	ldrb	r3, [r7, #11]
 800a952:	2b03      	cmp	r3, #3
 800a954:	d10a      	bne.n	800a96c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	7f1b      	ldrb	r3, [r3, #28]
 800a95c:	f003 0304 	and.w	r3, r3, #4
 800a960:	2b00      	cmp	r3, #0
 800a962:	d103      	bne.n	800a96c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	22fb      	movs	r2, #251	; 0xfb
 800a968:	711a      	strb	r2, [r3, #4]
 800a96a:	e097      	b.n	800aa9c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a96c:	7afb      	ldrb	r3, [r7, #11]
 800a96e:	2b03      	cmp	r3, #3
 800a970:	d10d      	bne.n	800a98e <lwip_netconn_do_delconn+0x86>
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	7f1b      	ldrb	r3, [r3, #28]
 800a978:	f003 0304 	and.w	r3, r3, #4
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d106      	bne.n	800a98e <lwip_netconn_do_delconn+0x86>
 800a980:	4b4c      	ldr	r3, [pc, #304]	; (800aab4 <lwip_netconn_do_delconn+0x1ac>)
 800a982:	f240 427b 	movw	r2, #1147	; 0x47b
 800a986:	494e      	ldr	r1, [pc, #312]	; (800aac0 <lwip_netconn_do_delconn+0x1b8>)
 800a988:	484c      	ldr	r0, [pc, #304]	; (800aabc <lwip_netconn_do_delconn+0x1b4>)
 800a98a:	f00e fdef 	bl	801956c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff fdd1 	bl	800a540 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d05f      	beq.n	800aa68 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9b2:	2b10      	cmp	r3, #16
 800a9b4:	d00e      	beq.n	800a9d4 <lwip_netconn_do_delconn+0xcc>
 800a9b6:	2b20      	cmp	r3, #32
 800a9b8:	d000      	beq.n	800a9bc <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800a9ba:	e051      	b.n	800aa60 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f00a f997 	bl	8014d00 <udp_remove>
          break;
 800a9d2:	e045      	b.n	800aa60 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d006      	beq.n	800a9ec <lwip_netconn_do_delconn+0xe4>
 800a9de:	4b35      	ldr	r3, [pc, #212]	; (800aab4 <lwip_netconn_do_delconn+0x1ac>)
 800a9e0:	f240 4294 	movw	r2, #1172	; 0x494
 800a9e4:	4937      	ldr	r1, [pc, #220]	; (800aac4 <lwip_netconn_do_delconn+0x1bc>)
 800a9e6:	4835      	ldr	r0, [pc, #212]	; (800aabc <lwip_netconn_do_delconn+0x1b4>)
 800a9e8:	f00e fdc0 	bl	801956c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2204      	movs	r2, #4
 800a9f2:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2203      	movs	r2, #3
 800a9f8:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	2100      	movs	r1, #0
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7ff fe17 	bl	800a63c <lwip_netconn_do_close_internal>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d04a      	beq.n	800aaaa <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	785b      	ldrb	r3, [r3, #1]
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d006      	beq.n	800aa2c <lwip_netconn_do_delconn+0x124>
 800aa1e:	4b25      	ldr	r3, [pc, #148]	; (800aab4 <lwip_netconn_do_delconn+0x1ac>)
 800aa20:	f240 429a 	movw	r2, #1178	; 0x49a
 800aa24:	4928      	ldr	r1, [pc, #160]	; (800aac8 <lwip_netconn_do_delconn+0x1c0>)
 800aa26:	4825      	ldr	r0, [pc, #148]	; (800aabc <lwip_netconn_do_delconn+0x1b4>)
 800aa28:	f00e fda0 	bl	801956c <iprintf>
            UNLOCK_TCPIP_CORE();
 800aa2c:	4827      	ldr	r0, [pc, #156]	; (800aacc <lwip_netconn_do_delconn+0x1c4>)
 800aa2e:	f00e fcf2 	bl	8019416 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	330c      	adds	r3, #12
 800aa38:	2100      	movs	r1, #0
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f00e fc51 	bl	80192e2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800aa40:	4822      	ldr	r0, [pc, #136]	; (800aacc <lwip_netconn_do_delconn+0x1c4>)
 800aa42:	f00e fcd9 	bl	80193f8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	785b      	ldrb	r3, [r3, #1]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d02c      	beq.n	800aaaa <lwip_netconn_do_delconn+0x1a2>
 800aa50:	4b18      	ldr	r3, [pc, #96]	; (800aab4 <lwip_netconn_do_delconn+0x1ac>)
 800aa52:	f240 429e 	movw	r2, #1182	; 0x49e
 800aa56:	491c      	ldr	r1, [pc, #112]	; (800aac8 <lwip_netconn_do_delconn+0x1c0>)
 800aa58:	4818      	ldr	r0, [pc, #96]	; (800aabc <lwip_netconn_do_delconn+0x1b4>)
 800aa5a:	f00e fd87 	bl	801956c <iprintf>
          return;
 800aa5e:	e024      	b.n	800aaaa <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2200      	movs	r2, #0
 800aa66:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d007      	beq.n	800aa82 <lwip_netconn_do_delconn+0x17a>
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	6810      	ldr	r0, [r2, #0]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	2100      	movs	r1, #0
 800aa80:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d007      	beq.n	800aa9c <lwip_netconn_do_delconn+0x194>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	6810      	ldr	r0, [r2, #0]
 800aa96:	2200      	movs	r2, #0
 800aa98:	2102      	movs	r1, #2
 800aa9a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	330c      	adds	r3, #12
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f00e fc68 	bl	8019378 <sys_sem_valid>
 800aaa8:	e000      	b.n	800aaac <lwip_netconn_do_delconn+0x1a4>
          return;
 800aaaa:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	0801ace4 	.word	0x0801ace4
 800aab8:	0801b054 	.word	0x0801b054
 800aabc:	0801ad28 	.word	0x0801ad28
 800aac0:	0801b068 	.word	0x0801b068
 800aac4:	0801b088 	.word	0x0801b088
 800aac8:	0801b0a4 	.word	0x0801b0a4
 800aacc:	200136dc 	.word	0x200136dc

0800aad0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d026      	beq.n	800ab34 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aaf0:	2b10      	cmp	r3, #16
 800aaf2:	d00e      	beq.n	800ab12 <lwip_netconn_do_bind+0x42>
 800aaf4:	2b20      	cmp	r3, #32
 800aaf6:	d119      	bne.n	800ab2c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6858      	ldr	r0, [r3, #4]
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	6899      	ldr	r1, [r3, #8]
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	899b      	ldrh	r3, [r3, #12]
 800ab06:	461a      	mov	r2, r3
 800ab08:	f009 ffe4 	bl	8014ad4 <udp_bind>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73fb      	strb	r3, [r7, #15]
        break;
 800ab10:	e012      	b.n	800ab38 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	6858      	ldr	r0, [r3, #4]
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	6899      	ldr	r1, [r3, #8]
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	899b      	ldrh	r3, [r3, #12]
 800ab20:	461a      	mov	r2, r3
 800ab22:	f003 fde7 	bl	800e6f4 <tcp_bind>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73fb      	strb	r3, [r7, #15]
        break;
 800ab2a:	e005      	b.n	800ab38 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ab2c:	23fa      	movs	r3, #250	; 0xfa
 800ab2e:	73fb      	strb	r3, [r7, #15]
        break;
 800ab30:	bf00      	nop
 800ab32:	e001      	b.n	800ab38 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 800ab34:	23fa      	movs	r3, #250	; 0xfa
 800ab36:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	7bfa      	ldrb	r2, [r7, #15]
 800ab3c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ab3e:	bf00      	nop
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d07f      	beq.n	800ac5e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab68:	2b10      	cmp	r3, #16
 800ab6a:	d175      	bne.n	800ac58 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	785b      	ldrb	r3, [r3, #1]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d165      	bne.n	800ac42 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	7d1b      	ldrb	r3, [r3, #20]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d002      	beq.n	800ab88 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800ab82:	23fa      	movs	r3, #250	; 0xfa
 800ab84:	72fb      	strb	r3, [r7, #11]
 800ab86:	e06c      	b.n	800ac62 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800ab88:	23ff      	movs	r3, #255	; 0xff
 800ab8a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f107 020b 	add.w	r2, r7, #11
 800ab96:	7cf9      	ldrb	r1, [r7, #19]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f003 fe75 	bl	800e888 <tcp_listen_with_backlog_and_err>
 800ab9e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d05d      	beq.n	800ac62 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3310      	adds	r3, #16
 800abac:	4618      	mov	r0, r3
 800abae:	f00e fb55 	bl	801925c <sys_mbox_valid>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00b      	beq.n	800abd0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3310      	adds	r3, #16
 800abbe:	4618      	mov	r0, r3
 800abc0:	f00e fad8 	bl	8019174 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	3310      	adds	r3, #16
 800abca:	4618      	mov	r0, r3
 800abcc:	f00e fb57 	bl	801927e <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	3314      	adds	r3, #20
 800abda:	4618      	mov	r0, r3
 800abdc:	f00e fb3e 	bl	801925c <sys_mbox_valid>
 800abe0:	4603      	mov	r3, r0
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d108      	bne.n	800abf8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	3314      	adds	r3, #20
 800abec:	2106      	movs	r1, #6
 800abee:	4618      	mov	r0, r3
 800abf0:	f00e faa6 	bl	8019140 <sys_mbox_new>
 800abf4:	4603      	mov	r3, r0
 800abf6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800abf8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d118      	bne.n	800ac32 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	2202      	movs	r2, #2
 800ac06:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	685a      	ldr	r2, [r3, #4]
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	f004 fe17 	bl	800f850 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	4912      	ldr	r1, [pc, #72]	; (800ac74 <lwip_netconn_do_listen+0x12c>)
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f004 fe88 	bl	800f940 <tcp_accept>
 800ac30:	e017      	b.n	800ac62 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f003 fc0e 	bl	800e454 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	605a      	str	r2, [r3, #4]
 800ac40:	e00f      	b.n	800ac62 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	785b      	ldrb	r3, [r3, #1]
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d102      	bne.n	800ac52 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	72fb      	strb	r3, [r7, #11]
 800ac50:	e007      	b.n	800ac62 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800ac52:	23f5      	movs	r3, #245	; 0xf5
 800ac54:	72fb      	strb	r3, [r7, #11]
 800ac56:	e004      	b.n	800ac62 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800ac58:	23f0      	movs	r3, #240	; 0xf0
 800ac5a:	72fb      	strb	r3, [r7, #11]
 800ac5c:	e001      	b.n	800ac62 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800ac5e:	23f5      	movs	r3, #245	; 0xf5
 800ac60:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800ac62:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ac6a:	bf00      	nop
 800ac6c:	3718      	adds	r7, #24
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	0800a159 	.word	0x0800a159

0800ac78 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b086      	sub	sp, #24
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	2200      	movs	r2, #0
 800ac88:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d022      	beq.n	800acda <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac9e:	2b10      	cmp	r3, #16
 800aca0:	d11b      	bne.n	800acda <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acae:	d202      	bcs.n	800acb6 <lwip_netconn_do_recv+0x3e>
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	e001      	b.n	800acba <lwip_netconn_do_recv+0x42>
 800acb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acba:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	89fa      	ldrh	r2, [r7, #14]
 800acc4:	4611      	mov	r1, r2
 800acc6:	4618      	mov	r0, r3
 800acc8:	f003 fee2 	bl	800ea90 <tcp_recved>
        remaining -= recved;
 800accc:	89fb      	ldrh	r3, [r7, #14]
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d1e6      	bne.n	800aca8 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800acda:	bf00      	nop
 800acdc:	3718      	adds	r7, #24
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
	...

0800ace4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b088      	sub	sp, #32
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	460b      	mov	r3, r1
 800acee:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800acf0:	2300      	movs	r3, #0
 800acf2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d106      	bne.n	800ad08 <lwip_netconn_do_writemore+0x24>
 800acfa:	4b96      	ldr	r3, [pc, #600]	; (800af54 <lwip_netconn_do_writemore+0x270>)
 800acfc:	f240 6273 	movw	r2, #1651	; 0x673
 800ad00:	4995      	ldr	r1, [pc, #596]	; (800af58 <lwip_netconn_do_writemore+0x274>)
 800ad02:	4896      	ldr	r0, [pc, #600]	; (800af5c <lwip_netconn_do_writemore+0x278>)
 800ad04:	f00e fc32 	bl	801956c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	785b      	ldrb	r3, [r3, #1]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d006      	beq.n	800ad1e <lwip_netconn_do_writemore+0x3a>
 800ad10:	4b90      	ldr	r3, [pc, #576]	; (800af54 <lwip_netconn_do_writemore+0x270>)
 800ad12:	f240 6274 	movw	r2, #1652	; 0x674
 800ad16:	4992      	ldr	r1, [pc, #584]	; (800af60 <lwip_netconn_do_writemore+0x27c>)
 800ad18:	4890      	ldr	r0, [pc, #576]	; (800af5c <lwip_netconn_do_writemore+0x278>)
 800ad1a:	f00e fc27 	bl	801956c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d106      	bne.n	800ad34 <lwip_netconn_do_writemore+0x50>
 800ad26:	4b8b      	ldr	r3, [pc, #556]	; (800af54 <lwip_netconn_do_writemore+0x270>)
 800ad28:	f240 6275 	movw	r2, #1653	; 0x675
 800ad2c:	498d      	ldr	r1, [pc, #564]	; (800af64 <lwip_netconn_do_writemore+0x280>)
 800ad2e:	488b      	ldr	r0, [pc, #556]	; (800af5c <lwip_netconn_do_writemore+0x278>)
 800ad30:	f00e fc1c 	bl	801956c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d106      	bne.n	800ad4a <lwip_netconn_do_writemore+0x66>
 800ad3c:	4b85      	ldr	r3, [pc, #532]	; (800af54 <lwip_netconn_do_writemore+0x270>)
 800ad3e:	f240 6276 	movw	r2, #1654	; 0x676
 800ad42:	4989      	ldr	r1, [pc, #548]	; (800af68 <lwip_netconn_do_writemore+0x284>)
 800ad44:	4885      	ldr	r0, [pc, #532]	; (800af5c <lwip_netconn_do_writemore+0x278>)
 800ad46:	f00e fc11 	bl	801956c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	699a      	ldr	r2, [r3, #24]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	695b      	ldr	r3, [r3, #20]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d306      	bcc.n	800ad68 <lwip_netconn_do_writemore+0x84>
 800ad5a:	4b7e      	ldr	r3, [pc, #504]	; (800af54 <lwip_netconn_do_writemore+0x270>)
 800ad5c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800ad60:	4982      	ldr	r1, [pc, #520]	; (800af6c <lwip_netconn_do_writemore+0x288>)
 800ad62:	487e      	ldr	r0, [pc, #504]	; (800af5c <lwip_netconn_do_writemore+0x278>)
 800ad64:	f00e fc02 	bl	801956c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a1b      	ldr	r3, [r3, #32]
 800ad6c:	899b      	ldrh	r3, [r3, #12]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d106      	bne.n	800ad80 <lwip_netconn_do_writemore+0x9c>
 800ad72:	4b78      	ldr	r3, [pc, #480]	; (800af54 <lwip_netconn_do_writemore+0x270>)
 800ad74:	f240 6279 	movw	r2, #1657	; 0x679
 800ad78:	497d      	ldr	r1, [pc, #500]	; (800af70 <lwip_netconn_do_writemore+0x28c>)
 800ad7a:	4878      	ldr	r0, [pc, #480]	; (800af5c <lwip_netconn_do_writemore+0x278>)
 800ad7c:	f00e fbf6 	bl	801956c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a1b      	ldr	r3, [r3, #32]
 800ad84:	7f1b      	ldrb	r3, [r3, #28]
 800ad86:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	7f1b      	ldrb	r3, [r3, #28]
 800ad8c:	f003 0302 	and.w	r3, r3, #2
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d104      	bne.n	800ad9e <lwip_netconn_do_writemore+0xba>
 800ad94:	7ebb      	ldrb	r3, [r7, #26]
 800ad96:	f003 0304 	and.w	r3, r3, #4
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d001      	beq.n	800ada2 <lwip_netconn_do_writemore+0xbe>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e000      	b.n	800ada4 <lwip_netconn_do_writemore+0xc0>
 800ada2:	2300      	movs	r3, #0
 800ada4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a1b      	ldr	r3, [r3, #32]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	691b      	ldr	r3, [r3, #16]
 800adb4:	4413      	add	r3, r2
 800adb6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a1b      	ldr	r3, [r3, #32]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a1b      	ldr	r3, [r3, #32]
 800adc4:	691b      	ldr	r3, [r3, #16]
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800add0:	d307      	bcc.n	800ade2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800add2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800add6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800add8:	7ebb      	ldrb	r3, [r7, #26]
 800adda:	f043 0302 	orr.w	r3, r3, #2
 800adde:	76bb      	strb	r3, [r7, #26]
 800ade0:	e001      	b.n	800ade6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800adee:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800adf0:	89fa      	ldrh	r2, [r7, #14]
 800adf2:	8bbb      	ldrh	r3, [r7, #28]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d216      	bcs.n	800ae26 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800adf8:	89fb      	ldrh	r3, [r7, #14]
 800adfa:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800adfc:	7e3b      	ldrb	r3, [r7, #24]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00d      	beq.n	800ae1e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ae02:	8bbb      	ldrh	r3, [r7, #28]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10e      	bne.n	800ae26 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a1b      	ldr	r3, [r3, #32]
 800ae0c:	699b      	ldr	r3, [r3, #24]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d102      	bne.n	800ae18 <lwip_netconn_do_writemore+0x134>
 800ae12:	f06f 0306 	mvn.w	r3, #6
 800ae16:	e000      	b.n	800ae1a <lwip_netconn_do_writemore+0x136>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ae1c:	e07d      	b.n	800af1a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ae1e:	7ebb      	ldrb	r3, [r7, #26]
 800ae20:	f043 0302 	orr.w	r3, r3, #2
 800ae24:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	691a      	ldr	r2, [r3, #16]
 800ae2c:	8bbb      	ldrh	r3, [r7, #28]
 800ae2e:	441a      	add	r2, r3
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a1b      	ldr	r3, [r3, #32]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d906      	bls.n	800ae4a <lwip_netconn_do_writemore+0x166>
 800ae3c:	4b45      	ldr	r3, [pc, #276]	; (800af54 <lwip_netconn_do_writemore+0x270>)
 800ae3e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800ae42:	494c      	ldr	r1, [pc, #304]	; (800af74 <lwip_netconn_do_writemore+0x290>)
 800ae44:	4845      	ldr	r0, [pc, #276]	; (800af5c <lwip_netconn_do_writemore+0x278>)
 800ae46:	f00e fb91 	bl	801956c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ae4a:	8bbb      	ldrh	r3, [r7, #28]
 800ae4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d103      	bne.n	800ae5c <lwip_netconn_do_writemore+0x178>
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae5a:	d209      	bcs.n	800ae70 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ae60:	8bba      	ldrh	r2, [r7, #28]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d10b      	bne.n	800ae7e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	899b      	ldrh	r3, [r3, #12]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d906      	bls.n	800ae7e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ae70:	2301      	movs	r3, #1
 800ae72:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ae74:	7ebb      	ldrb	r3, [r7, #26]
 800ae76:	f043 0302 	orr.w	r3, r3, #2
 800ae7a:	76bb      	strb	r3, [r7, #26]
 800ae7c:	e001      	b.n	800ae82 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6858      	ldr	r0, [r3, #4]
 800ae86:	7ebb      	ldrb	r3, [r7, #26]
 800ae88:	8bba      	ldrh	r2, [r7, #28]
 800ae8a:	6979      	ldr	r1, [r7, #20]
 800ae8c:	f007 fc1c 	bl	80126c8 <tcp_write>
 800ae90:	4603      	mov	r3, r0
 800ae92:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ae94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d12c      	bne.n	800aef6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a1b      	ldr	r3, [r3, #32]
 800aea0:	6999      	ldr	r1, [r3, #24]
 800aea2:	8bba      	ldrh	r2, [r7, #28]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6a1b      	ldr	r3, [r3, #32]
 800aea8:	440a      	add	r2, r1
 800aeaa:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a1b      	ldr	r3, [r3, #32]
 800aeb0:	6919      	ldr	r1, [r3, #16]
 800aeb2:	8bba      	ldrh	r2, [r7, #28]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6a1b      	ldr	r3, [r3, #32]
 800aeb8:	440a      	add	r2, r1
 800aeba:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a1b      	ldr	r3, [r3, #32]
 800aec0:	691a      	ldr	r2, [r3, #16]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d113      	bne.n	800aef6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a1b      	ldr	r3, [r3, #32]
 800aed2:	899a      	ldrh	r2, [r3, #12]
 800aed4:	3a01      	subs	r2, #1
 800aed6:	b292      	uxth	r2, r2
 800aed8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	899b      	ldrh	r3, [r3, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d008      	beq.n	800aef6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a1b      	ldr	r3, [r3, #32]
 800aee8:	689a      	ldr	r2, [r3, #8]
 800aeea:	3208      	adds	r2, #8
 800aeec:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a1b      	ldr	r3, [r3, #32]
 800aef2:	2200      	movs	r2, #0
 800aef4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800aef6:	7e7b      	ldrb	r3, [r7, #25]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d004      	beq.n	800af06 <lwip_netconn_do_writemore+0x222>
 800aefc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af00:	2b00      	cmp	r3, #0
 800af02:	f43f af50 	beq.w	800ada6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800af06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d004      	beq.n	800af18 <lwip_netconn_do_writemore+0x234>
 800af0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af16:	d146      	bne.n	800afa6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800af18:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800af1a:	7e3b      	ldrb	r3, [r7, #24]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d02b      	beq.n	800af78 <lwip_netconn_do_writemore+0x294>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6a1b      	ldr	r3, [r3, #32]
 800af24:	699a      	ldr	r2, [r3, #24]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	695b      	ldr	r3, [r3, #20]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d223      	bcs.n	800af78 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af34:	2b00      	cmp	r3, #0
 800af36:	d005      	beq.n	800af44 <lwip_netconn_do_writemore+0x260>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af3c:	2200      	movs	r2, #0
 800af3e:	2103      	movs	r1, #3
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	7f1b      	ldrb	r3, [r3, #28]
 800af48:	f043 0310 	orr.w	r3, r3, #16
 800af4c:	b2da      	uxtb	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	771a      	strb	r2, [r3, #28]
 800af52:	e028      	b.n	800afa6 <lwip_netconn_do_writemore+0x2c2>
 800af54:	0801ace4 	.word	0x0801ace4
 800af58:	0801ae3c 	.word	0x0801ae3c
 800af5c:	0801ad28 	.word	0x0801ad28
 800af60:	0801b144 	.word	0x0801b144
 800af64:	0801ae4c 	.word	0x0801ae4c
 800af68:	0801b164 	.word	0x0801b164
 800af6c:	0801b17c 	.word	0x0801b17c
 800af70:	0801b1bc 	.word	0x0801b1bc
 800af74:	0801b1e4 	.word	0x0801b1e4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af80:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800af84:	d305      	bcc.n	800af92 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800af8e:	2b04      	cmp	r3, #4
 800af90:	d909      	bls.n	800afa6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af96:	2b00      	cmp	r3, #0
 800af98:	d005      	beq.n	800afa6 <lwip_netconn_do_writemore+0x2c2>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af9e:	2200      	movs	r2, #0
 800afa0:	2103      	movs	r1, #3
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800afa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d11d      	bne.n	800afea <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a1b      	ldr	r3, [r3, #32]
 800afb2:	699a      	ldr	r2, [r3, #24]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a1b      	ldr	r3, [r3, #32]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d002      	beq.n	800afc4 <lwip_netconn_do_writemore+0x2e0>
 800afbe:	7e3b      	ldrb	r3, [r7, #24]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800afc4:	2301      	movs	r3, #1
 800afc6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	4618      	mov	r0, r3
 800afce:	f008 f967 	bl	80132a0 <tcp_output>
 800afd2:	4603      	mov	r3, r0
 800afd4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800afd6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800afda:	f113 0f04 	cmn.w	r3, #4
 800afde:	d12c      	bne.n	800b03a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800afe0:	7b3b      	ldrb	r3, [r7, #12]
 800afe2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800afe4:	2301      	movs	r3, #1
 800afe6:	76fb      	strb	r3, [r7, #27]
 800afe8:	e027      	b.n	800b03a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800afea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800afee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff2:	d120      	bne.n	800b036 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	4618      	mov	r0, r3
 800affa:	f008 f951 	bl	80132a0 <tcp_output>
 800affe:	4603      	mov	r3, r0
 800b000:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b002:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b006:	f113 0f04 	cmn.w	r3, #4
 800b00a:	d104      	bne.n	800b016 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b00c:	7b7b      	ldrb	r3, [r7, #13]
 800b00e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b010:	2301      	movs	r3, #1
 800b012:	76fb      	strb	r3, [r7, #27]
 800b014:	e011      	b.n	800b03a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b016:	7e3b      	ldrb	r3, [r7, #24]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00e      	beq.n	800b03a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6a1b      	ldr	r3, [r3, #32]
 800b020:	699b      	ldr	r3, [r3, #24]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d102      	bne.n	800b02c <lwip_netconn_do_writemore+0x348>
 800b026:	f06f 0306 	mvn.w	r3, #6
 800b02a:	e000      	b.n	800b02e <lwip_netconn_do_writemore+0x34a>
 800b02c:	2300      	movs	r3, #0
 800b02e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b030:	2301      	movs	r3, #1
 800b032:	76fb      	strb	r3, [r7, #27]
 800b034:	e001      	b.n	800b03a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b036:	2301      	movs	r3, #1
 800b038:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b03a:	7efb      	ldrb	r3, [r7, #27]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d015      	beq.n	800b06c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a1b      	ldr	r3, [r3, #32]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	330c      	adds	r3, #12
 800b048:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	7ffa      	ldrb	r2, [r7, #31]
 800b050:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b05e:	78fb      	ldrb	r3, [r7, #3]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d006      	beq.n	800b072 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b064:	68b8      	ldr	r0, [r7, #8]
 800b066:	f00e f96d 	bl	8019344 <sys_sem_signal>
 800b06a:	e002      	b.n	800b072 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b06c:	f04f 33ff 	mov.w	r3, #4294967295
 800b070:	e000      	b.n	800b074 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3720      	adds	r7, #32
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b084      	sub	sp, #16
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7fe fd22 	bl	8009ad6 <netconn_err>
 800b092:	4603      	mov	r3, r0
 800b094:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d166      	bne.n	800b16c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0a8:	2b10      	cmp	r3, #16
 800b0aa:	d15d      	bne.n	800b168 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	785b      	ldrb	r3, [r3, #1]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d002      	beq.n	800b0bc <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b0b6:	23fb      	movs	r3, #251	; 0xfb
 800b0b8:	73fb      	strb	r3, [r7, #15]
 800b0ba:	e057      	b.n	800b16c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d04d      	beq.n	800b162 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	6a1b      	ldr	r3, [r3, #32]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d006      	beq.n	800b0e6 <lwip_netconn_do_write+0x6a>
 800b0d8:	4b28      	ldr	r3, [pc, #160]	; (800b17c <lwip_netconn_do_write+0x100>)
 800b0da:	f240 7223 	movw	r2, #1827	; 0x723
 800b0de:	4928      	ldr	r1, [pc, #160]	; (800b180 <lwip_netconn_do_write+0x104>)
 800b0e0:	4828      	ldr	r0, [pc, #160]	; (800b184 <lwip_netconn_do_write+0x108>)
 800b0e2:	f00e fa43 	bl	801956c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d106      	bne.n	800b0fc <lwip_netconn_do_write+0x80>
 800b0ee:	4b23      	ldr	r3, [pc, #140]	; (800b17c <lwip_netconn_do_write+0x100>)
 800b0f0:	f240 7224 	movw	r2, #1828	; 0x724
 800b0f4:	4924      	ldr	r1, [pc, #144]	; (800b188 <lwip_netconn_do_write+0x10c>)
 800b0f6:	4823      	ldr	r0, [pc, #140]	; (800b184 <lwip_netconn_do_write+0x108>)
 800b0f8:	f00e fa38 	bl	801956c <iprintf>
        msg->conn->current_msg = msg;
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2100      	movs	r1, #0
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7ff fdea 	bl	800ace4 <lwip_netconn_do_writemore>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d02e      	beq.n	800b174 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	785b      	ldrb	r3, [r3, #1]
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	d006      	beq.n	800b12e <lwip_netconn_do_write+0xb2>
 800b120:	4b16      	ldr	r3, [pc, #88]	; (800b17c <lwip_netconn_do_write+0x100>)
 800b122:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b126:	4919      	ldr	r1, [pc, #100]	; (800b18c <lwip_netconn_do_write+0x110>)
 800b128:	4816      	ldr	r0, [pc, #88]	; (800b184 <lwip_netconn_do_write+0x108>)
 800b12a:	f00e fa1f 	bl	801956c <iprintf>
          UNLOCK_TCPIP_CORE();
 800b12e:	4818      	ldr	r0, [pc, #96]	; (800b190 <lwip_netconn_do_write+0x114>)
 800b130:	f00e f971 	bl	8019416 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	330c      	adds	r3, #12
 800b13a:	2100      	movs	r1, #0
 800b13c:	4618      	mov	r0, r3
 800b13e:	f00e f8d0 	bl	80192e2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b142:	4813      	ldr	r0, [pc, #76]	; (800b190 <lwip_netconn_do_write+0x114>)
 800b144:	f00e f958 	bl	80193f8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	785b      	ldrb	r3, [r3, #1]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d110      	bne.n	800b174 <lwip_netconn_do_write+0xf8>
 800b152:	4b0a      	ldr	r3, [pc, #40]	; (800b17c <lwip_netconn_do_write+0x100>)
 800b154:	f240 722c 	movw	r2, #1836	; 0x72c
 800b158:	490c      	ldr	r1, [pc, #48]	; (800b18c <lwip_netconn_do_write+0x110>)
 800b15a:	480a      	ldr	r0, [pc, #40]	; (800b184 <lwip_netconn_do_write+0x108>)
 800b15c:	f00e fa06 	bl	801956c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b160:	e008      	b.n	800b174 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b162:	23f5      	movs	r3, #245	; 0xf5
 800b164:	73fb      	strb	r3, [r7, #15]
 800b166:	e001      	b.n	800b16c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b168:	23fa      	movs	r3, #250	; 0xfa
 800b16a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	7bfa      	ldrb	r2, [r7, #15]
 800b170:	711a      	strb	r2, [r3, #4]
 800b172:	e000      	b.n	800b176 <lwip_netconn_do_write+0xfa>
        return;
 800b174:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	0801ace4 	.word	0x0801ace4
 800b180:	0801b088 	.word	0x0801b088
 800b184:	0801ad28 	.word	0x0801ad28
 800b188:	0801b210 	.word	0x0801b210
 800b18c:	0801b0a4 	.word	0x0801b0a4
 800b190:	200136dc 	.word	0x200136dc

0800b194 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	785b      	ldrb	r3, [r3, #1]
 800b1a6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d069      	beq.n	800b286 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b1bc:	2b10      	cmp	r3, #16
 800b1be:	d162      	bne.n	800b286 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b1c4:	2b03      	cmp	r3, #3
 800b1c6:	d002      	beq.n	800b1ce <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b1c8:	7afb      	ldrb	r3, [r7, #11]
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d05b      	beq.n	800b286 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b1ce:	7afb      	ldrb	r3, [r7, #11]
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d103      	bne.n	800b1dc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	22f5      	movs	r2, #245	; 0xf5
 800b1d8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b1da:	e059      	b.n	800b290 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b1dc:	7afb      	ldrb	r3, [r7, #11]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d103      	bne.n	800b1ea <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	22fb      	movs	r2, #251	; 0xfb
 800b1e6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b1e8:	e052      	b.n	800b290 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	7a1b      	ldrb	r3, [r3, #8]
 800b1ee:	f003 0301 	and.w	r3, r3, #1
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d004      	beq.n	800b200 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7ff f9a0 	bl	800a540 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	6a1b      	ldr	r3, [r3, #32]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d006      	beq.n	800b218 <lwip_netconn_do_close+0x84>
 800b20a:	4b23      	ldr	r3, [pc, #140]	; (800b298 <lwip_netconn_do_close+0x104>)
 800b20c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b210:	4922      	ldr	r1, [pc, #136]	; (800b29c <lwip_netconn_do_close+0x108>)
 800b212:	4823      	ldr	r0, [pc, #140]	; (800b2a0 <lwip_netconn_do_close+0x10c>)
 800b214:	f00e f9aa 	bl	801956c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2204      	movs	r2, #4
 800b21e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2100      	movs	r1, #0
 800b22e:	4618      	mov	r0, r3
 800b230:	f7ff fa04 	bl	800a63c <lwip_netconn_do_close_internal>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d029      	beq.n	800b28e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	785b      	ldrb	r3, [r3, #1]
 800b240:	2b04      	cmp	r3, #4
 800b242:	d006      	beq.n	800b252 <lwip_netconn_do_close+0xbe>
 800b244:	4b14      	ldr	r3, [pc, #80]	; (800b298 <lwip_netconn_do_close+0x104>)
 800b246:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b24a:	4916      	ldr	r1, [pc, #88]	; (800b2a4 <lwip_netconn_do_close+0x110>)
 800b24c:	4814      	ldr	r0, [pc, #80]	; (800b2a0 <lwip_netconn_do_close+0x10c>)
 800b24e:	f00e f98d 	bl	801956c <iprintf>
        UNLOCK_TCPIP_CORE();
 800b252:	4815      	ldr	r0, [pc, #84]	; (800b2a8 <lwip_netconn_do_close+0x114>)
 800b254:	f00e f8df 	bl	8019416 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	330c      	adds	r3, #12
 800b25e:	2100      	movs	r1, #0
 800b260:	4618      	mov	r0, r3
 800b262:	f00e f83e 	bl	80192e2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b266:	4810      	ldr	r0, [pc, #64]	; (800b2a8 <lwip_netconn_do_close+0x114>)
 800b268:	f00e f8c6 	bl	80193f8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	785b      	ldrb	r3, [r3, #1]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00b      	beq.n	800b28e <lwip_netconn_do_close+0xfa>
 800b276:	4b08      	ldr	r3, [pc, #32]	; (800b298 <lwip_netconn_do_close+0x104>)
 800b278:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b27c:	4909      	ldr	r1, [pc, #36]	; (800b2a4 <lwip_netconn_do_close+0x110>)
 800b27e:	4808      	ldr	r0, [pc, #32]	; (800b2a0 <lwip_netconn_do_close+0x10c>)
 800b280:	f00e f974 	bl	801956c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b284:	e003      	b.n	800b28e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	22f5      	movs	r2, #245	; 0xf5
 800b28a:	711a      	strb	r2, [r3, #4]
 800b28c:	e000      	b.n	800b290 <lwip_netconn_do_close+0xfc>
      return;
 800b28e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	0801ace4 	.word	0x0801ace4
 800b29c:	0801b088 	.word	0x0801b088
 800b2a0:	0801ad28 	.word	0x0801ad28
 800b2a4:	0801b0a4 	.word	0x0801b0a4
 800b2a8:	200136dc 	.word	0x200136dc

0800b2ac <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d013      	beq.n	800b2e2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d00b      	beq.n	800b2da <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f002 fc12 	bl	800daf0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	605a      	str	r2, [r3, #4]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	2006      	movs	r0, #6
 800b2de:	f001 fd5b 	bl	800cd98 <memp_free>
  }
}
 800b2e2:	bf00      	nop
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
	...

0800b2ec <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d108      	bne.n	800b310 <netbuf_data+0x24>
 800b2fe:	4b1b      	ldr	r3, [pc, #108]	; (800b36c <netbuf_data+0x80>)
 800b300:	22c6      	movs	r2, #198	; 0xc6
 800b302:	491b      	ldr	r1, [pc, #108]	; (800b370 <netbuf_data+0x84>)
 800b304:	481b      	ldr	r0, [pc, #108]	; (800b374 <netbuf_data+0x88>)
 800b306:	f00e f931 	bl	801956c <iprintf>
 800b30a:	f06f 030f 	mvn.w	r3, #15
 800b30e:	e029      	b.n	800b364 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d108      	bne.n	800b328 <netbuf_data+0x3c>
 800b316:	4b15      	ldr	r3, [pc, #84]	; (800b36c <netbuf_data+0x80>)
 800b318:	22c7      	movs	r2, #199	; 0xc7
 800b31a:	4917      	ldr	r1, [pc, #92]	; (800b378 <netbuf_data+0x8c>)
 800b31c:	4815      	ldr	r0, [pc, #84]	; (800b374 <netbuf_data+0x88>)
 800b31e:	f00e f925 	bl	801956c <iprintf>
 800b322:	f06f 030f 	mvn.w	r3, #15
 800b326:	e01d      	b.n	800b364 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d108      	bne.n	800b340 <netbuf_data+0x54>
 800b32e:	4b0f      	ldr	r3, [pc, #60]	; (800b36c <netbuf_data+0x80>)
 800b330:	22c8      	movs	r2, #200	; 0xc8
 800b332:	4912      	ldr	r1, [pc, #72]	; (800b37c <netbuf_data+0x90>)
 800b334:	480f      	ldr	r0, [pc, #60]	; (800b374 <netbuf_data+0x88>)
 800b336:	f00e f919 	bl	801956c <iprintf>
 800b33a:	f06f 030f 	mvn.w	r3, #15
 800b33e:	e011      	b.n	800b364 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d102      	bne.n	800b34e <netbuf_data+0x62>
    return ERR_BUF;
 800b348:	f06f 0301 	mvn.w	r3, #1
 800b34c:	e00a      	b.n	800b364 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	895a      	ldrh	r2, [r3, #10]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800b362:	2300      	movs	r3, #0
}
 800b364:	4618      	mov	r0, r3
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	0801b23c 	.word	0x0801b23c
 800b370:	0801b344 	.word	0x0801b344
 800b374:	0801b28c 	.word	0x0801b28c
 800b378:	0801b360 	.word	0x0801b360
 800b37c:	0801b380 	.word	0x0801b380

0800b380 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b38a:	f009 f84f 	bl	801442c <sys_timeouts_sleeptime>
 800b38e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b396:	d10b      	bne.n	800b3b0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b398:	4813      	ldr	r0, [pc, #76]	; (800b3e8 <tcpip_timeouts_mbox_fetch+0x68>)
 800b39a:	f00e f83c 	bl	8019416 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b39e:	2200      	movs	r2, #0
 800b3a0:	6839      	ldr	r1, [r7, #0]
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f00d ff12 	bl	80191cc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b3a8:	480f      	ldr	r0, [pc, #60]	; (800b3e8 <tcpip_timeouts_mbox_fetch+0x68>)
 800b3aa:	f00e f825 	bl	80193f8 <sys_mutex_lock>
    return;
 800b3ae:	e018      	b.n	800b3e2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d102      	bne.n	800b3bc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b3b6:	f008 ffff 	bl	80143b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b3ba:	e7e6      	b.n	800b38a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b3bc:	480a      	ldr	r0, [pc, #40]	; (800b3e8 <tcpip_timeouts_mbox_fetch+0x68>)
 800b3be:	f00e f82a 	bl	8019416 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b3c2:	68fa      	ldr	r2, [r7, #12]
 800b3c4:	6839      	ldr	r1, [r7, #0]
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f00d ff00 	bl	80191cc <sys_arch_mbox_fetch>
 800b3cc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b3ce:	4806      	ldr	r0, [pc, #24]	; (800b3e8 <tcpip_timeouts_mbox_fetch+0x68>)
 800b3d0:	f00e f812 	bl	80193f8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3da:	d102      	bne.n	800b3e2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b3dc:	f008 ffec 	bl	80143b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b3e0:	e7d3      	b.n	800b38a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	200136dc 	.word	0x200136dc

0800b3ec <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b3f4:	4810      	ldr	r0, [pc, #64]	; (800b438 <tcpip_thread+0x4c>)
 800b3f6:	f00d ffff 	bl	80193f8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b3fa:	4b10      	ldr	r3, [pc, #64]	; (800b43c <tcpip_thread+0x50>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d005      	beq.n	800b40e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b402:	4b0e      	ldr	r3, [pc, #56]	; (800b43c <tcpip_thread+0x50>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a0e      	ldr	r2, [pc, #56]	; (800b440 <tcpip_thread+0x54>)
 800b408:	6812      	ldr	r2, [r2, #0]
 800b40a:	4610      	mov	r0, r2
 800b40c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b40e:	f107 030c 	add.w	r3, r7, #12
 800b412:	4619      	mov	r1, r3
 800b414:	480b      	ldr	r0, [pc, #44]	; (800b444 <tcpip_thread+0x58>)
 800b416:	f7ff ffb3 	bl	800b380 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d106      	bne.n	800b42e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b420:	4b09      	ldr	r3, [pc, #36]	; (800b448 <tcpip_thread+0x5c>)
 800b422:	2291      	movs	r2, #145	; 0x91
 800b424:	4909      	ldr	r1, [pc, #36]	; (800b44c <tcpip_thread+0x60>)
 800b426:	480a      	ldr	r0, [pc, #40]	; (800b450 <tcpip_thread+0x64>)
 800b428:	f00e f8a0 	bl	801956c <iprintf>
      continue;
 800b42c:	e003      	b.n	800b436 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	4618      	mov	r0, r3
 800b432:	f000 f80f 	bl	800b454 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b436:	e7ea      	b.n	800b40e <tcpip_thread+0x22>
 800b438:	200136dc 	.word	0x200136dc
 800b43c:	2000fdc4 	.word	0x2000fdc4
 800b440:	2000fdc8 	.word	0x2000fdc8
 800b444:	2000fdcc 	.word	0x2000fdcc
 800b448:	0801b3d4 	.word	0x0801b3d4
 800b44c:	0801b404 	.word	0x0801b404
 800b450:	0801b424 	.word	0x0801b424

0800b454 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d018      	beq.n	800b496 <tcpip_thread_handle_msg+0x42>
 800b464:	2b02      	cmp	r3, #2
 800b466:	d021      	beq.n	800b4ac <tcpip_thread_handle_msg+0x58>
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d126      	bne.n	800b4ba <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	6850      	ldr	r0, [r2, #4]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6892      	ldr	r2, [r2, #8]
 800b478:	4611      	mov	r1, r2
 800b47a:	4798      	blx	r3
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d004      	beq.n	800b48c <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	4618      	mov	r0, r3
 800b488:	f002 fb32 	bl	800daf0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b48c:	6879      	ldr	r1, [r7, #4]
 800b48e:	2009      	movs	r0, #9
 800b490:	f001 fc82 	bl	800cd98 <memp_free>
      break;
 800b494:	e018      	b.n	800b4c8 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	6892      	ldr	r2, [r2, #8]
 800b49e:	4610      	mov	r0, r2
 800b4a0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b4a2:	6879      	ldr	r1, [r7, #4]
 800b4a4:	2008      	movs	r0, #8
 800b4a6:	f001 fc77 	bl	800cd98 <memp_free>
      break;
 800b4aa:	e00d      	b.n	800b4c8 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	6892      	ldr	r2, [r2, #8]
 800b4b4:	4610      	mov	r0, r2
 800b4b6:	4798      	blx	r3
      break;
 800b4b8:	e006      	b.n	800b4c8 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b4ba:	4b05      	ldr	r3, [pc, #20]	; (800b4d0 <tcpip_thread_handle_msg+0x7c>)
 800b4bc:	22cf      	movs	r2, #207	; 0xcf
 800b4be:	4905      	ldr	r1, [pc, #20]	; (800b4d4 <tcpip_thread_handle_msg+0x80>)
 800b4c0:	4805      	ldr	r0, [pc, #20]	; (800b4d8 <tcpip_thread_handle_msg+0x84>)
 800b4c2:	f00e f853 	bl	801956c <iprintf>
      break;
 800b4c6:	bf00      	nop
  }
}
 800b4c8:	bf00      	nop
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	0801b3d4 	.word	0x0801b3d4
 800b4d4:	0801b404 	.word	0x0801b404
 800b4d8:	0801b424 	.word	0x0801b424

0800b4dc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b086      	sub	sp, #24
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b4e8:	481a      	ldr	r0, [pc, #104]	; (800b554 <tcpip_inpkt+0x78>)
 800b4ea:	f00d feb7 	bl	801925c <sys_mbox_valid>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d105      	bne.n	800b500 <tcpip_inpkt+0x24>
 800b4f4:	4b18      	ldr	r3, [pc, #96]	; (800b558 <tcpip_inpkt+0x7c>)
 800b4f6:	22fc      	movs	r2, #252	; 0xfc
 800b4f8:	4918      	ldr	r1, [pc, #96]	; (800b55c <tcpip_inpkt+0x80>)
 800b4fa:	4819      	ldr	r0, [pc, #100]	; (800b560 <tcpip_inpkt+0x84>)
 800b4fc:	f00e f836 	bl	801956c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b500:	2009      	movs	r0, #9
 800b502:	f001 fbf7 	bl	800ccf4 <memp_malloc>
 800b506:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d102      	bne.n	800b514 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b50e:	f04f 33ff 	mov.w	r3, #4294967295
 800b512:	e01a      	b.n	800b54a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	2200      	movs	r2, #0
 800b518:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	68fa      	ldr	r2, [r7, #12]
 800b51e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b52c:	6979      	ldr	r1, [r7, #20]
 800b52e:	4809      	ldr	r0, [pc, #36]	; (800b554 <tcpip_inpkt+0x78>)
 800b530:	f00d fe32 	bl	8019198 <sys_mbox_trypost>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d006      	beq.n	800b548 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b53a:	6979      	ldr	r1, [r7, #20]
 800b53c:	2009      	movs	r0, #9
 800b53e:	f001 fc2b 	bl	800cd98 <memp_free>
    return ERR_MEM;
 800b542:	f04f 33ff 	mov.w	r3, #4294967295
 800b546:	e000      	b.n	800b54a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b548:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3718      	adds	r7, #24
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	2000fdcc 	.word	0x2000fdcc
 800b558:	0801b3d4 	.word	0x0801b3d4
 800b55c:	0801b44c 	.word	0x0801b44c
 800b560:	0801b424 	.word	0x0801b424

0800b564 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b574:	f003 0318 	and.w	r3, r3, #24
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d006      	beq.n	800b58a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b57c:	4a08      	ldr	r2, [pc, #32]	; (800b5a0 <tcpip_input+0x3c>)
 800b57e:	6839      	ldr	r1, [r7, #0]
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7ff ffab 	bl	800b4dc <tcpip_inpkt>
 800b586:	4603      	mov	r3, r0
 800b588:	e005      	b.n	800b596 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b58a:	4a06      	ldr	r2, [pc, #24]	; (800b5a4 <tcpip_input+0x40>)
 800b58c:	6839      	ldr	r1, [r7, #0]
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7ff ffa4 	bl	800b4dc <tcpip_inpkt>
 800b594:	4603      	mov	r3, r0
}
 800b596:	4618      	mov	r0, r3
 800b598:	3708      	adds	r7, #8
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	08018f95 	.word	0x08018f95
 800b5a4:	08017e79 	.word	0x08017e79

0800b5a8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b5b2:	4819      	ldr	r0, [pc, #100]	; (800b618 <tcpip_try_callback+0x70>)
 800b5b4:	f00d fe52 	bl	801925c <sys_mbox_valid>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d106      	bne.n	800b5cc <tcpip_try_callback+0x24>
 800b5be:	4b17      	ldr	r3, [pc, #92]	; (800b61c <tcpip_try_callback+0x74>)
 800b5c0:	f240 125d 	movw	r2, #349	; 0x15d
 800b5c4:	4916      	ldr	r1, [pc, #88]	; (800b620 <tcpip_try_callback+0x78>)
 800b5c6:	4817      	ldr	r0, [pc, #92]	; (800b624 <tcpip_try_callback+0x7c>)
 800b5c8:	f00d ffd0 	bl	801956c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b5cc:	2008      	movs	r0, #8
 800b5ce:	f001 fb91 	bl	800ccf4 <memp_malloc>
 800b5d2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d102      	bne.n	800b5e0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b5da:	f04f 33ff 	mov.w	r3, #4294967295
 800b5de:	e017      	b.n	800b610 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	687a      	ldr	r2, [r7, #4]
 800b5ea:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b5f2:	68f9      	ldr	r1, [r7, #12]
 800b5f4:	4808      	ldr	r0, [pc, #32]	; (800b618 <tcpip_try_callback+0x70>)
 800b5f6:	f00d fdcf 	bl	8019198 <sys_mbox_trypost>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d006      	beq.n	800b60e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b600:	68f9      	ldr	r1, [r7, #12]
 800b602:	2008      	movs	r0, #8
 800b604:	f001 fbc8 	bl	800cd98 <memp_free>
    return ERR_MEM;
 800b608:	f04f 33ff 	mov.w	r3, #4294967295
 800b60c:	e000      	b.n	800b610 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	bd80      	pop	{r7, pc}
 800b618:	2000fdcc 	.word	0x2000fdcc
 800b61c:	0801b3d4 	.word	0x0801b3d4
 800b620:	0801b44c 	.word	0x0801b44c
 800b624:	0801b424 	.word	0x0801b424

0800b628 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b634:	4806      	ldr	r0, [pc, #24]	; (800b650 <tcpip_send_msg_wait_sem+0x28>)
 800b636:	f00d fedf 	bl	80193f8 <sys_mutex_lock>
  fn(apimsg);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	68b8      	ldr	r0, [r7, #8]
 800b63e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b640:	4803      	ldr	r0, [pc, #12]	; (800b650 <tcpip_send_msg_wait_sem+0x28>)
 800b642:	f00d fee8 	bl	8019416 <sys_mutex_unlock>
  return ERR_OK;
 800b646:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	200136dc 	.word	0x200136dc

0800b654 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af02      	add	r7, sp, #8
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b65e:	f000 fec1 	bl	800c3e4 <lwip_init>

  tcpip_init_done = initfunc;
 800b662:	4a17      	ldr	r2, [pc, #92]	; (800b6c0 <tcpip_init+0x6c>)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b668:	4a16      	ldr	r2, [pc, #88]	; (800b6c4 <tcpip_init+0x70>)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b66e:	2106      	movs	r1, #6
 800b670:	4815      	ldr	r0, [pc, #84]	; (800b6c8 <tcpip_init+0x74>)
 800b672:	f00d fd65 	bl	8019140 <sys_mbox_new>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d006      	beq.n	800b68a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b67c:	4b13      	ldr	r3, [pc, #76]	; (800b6cc <tcpip_init+0x78>)
 800b67e:	f240 2261 	movw	r2, #609	; 0x261
 800b682:	4913      	ldr	r1, [pc, #76]	; (800b6d0 <tcpip_init+0x7c>)
 800b684:	4813      	ldr	r0, [pc, #76]	; (800b6d4 <tcpip_init+0x80>)
 800b686:	f00d ff71 	bl	801956c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b68a:	4813      	ldr	r0, [pc, #76]	; (800b6d8 <tcpip_init+0x84>)
 800b68c:	f00d fe9e 	bl	80193cc <sys_mutex_new>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d006      	beq.n	800b6a4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b696:	4b0d      	ldr	r3, [pc, #52]	; (800b6cc <tcpip_init+0x78>)
 800b698:	f240 2265 	movw	r2, #613	; 0x265
 800b69c:	490f      	ldr	r1, [pc, #60]	; (800b6dc <tcpip_init+0x88>)
 800b69e:	480d      	ldr	r0, [pc, #52]	; (800b6d4 <tcpip_init+0x80>)
 800b6a0:	f00d ff64 	bl	801956c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b6a4:	2318      	movs	r3, #24
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	490c      	ldr	r1, [pc, #48]	; (800b6e0 <tcpip_init+0x8c>)
 800b6b0:	480c      	ldr	r0, [pc, #48]	; (800b6e4 <tcpip_init+0x90>)
 800b6b2:	f00d febd 	bl	8019430 <sys_thread_new>
}
 800b6b6:	bf00      	nop
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	2000fdc4 	.word	0x2000fdc4
 800b6c4:	2000fdc8 	.word	0x2000fdc8
 800b6c8:	2000fdcc 	.word	0x2000fdcc
 800b6cc:	0801b3d4 	.word	0x0801b3d4
 800b6d0:	0801b45c 	.word	0x0801b45c
 800b6d4:	0801b424 	.word	0x0801b424
 800b6d8:	200136dc 	.word	0x200136dc
 800b6dc:	0801b480 	.word	0x0801b480
 800b6e0:	0800b3ed 	.word	0x0800b3ed
 800b6e4:	0801b4a4 	.word	0x0801b4a4

0800b6e8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <fs_open+0x16>
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d102      	bne.n	800b704 <fs_open+0x1c>
    return ERR_ARG;
 800b6fe:	f06f 030f 	mvn.w	r3, #15
 800b702:	e028      	b.n	800b756 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b704:	4b16      	ldr	r3, [pc, #88]	; (800b760 <fs_open+0x78>)
 800b706:	60fb      	str	r3, [r7, #12]
 800b708:	e020      	b.n	800b74c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	4619      	mov	r1, r3
 800b710:	6838      	ldr	r0, [r7, #0]
 800b712:	f7f4 fd6d 	bl	80001f0 <strcmp>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d114      	bne.n	800b746 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	689a      	ldr	r2, [r3, #8]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	68da      	ldr	r2, [r3, #12]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	68da      	ldr	r2, [r3, #12]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	7c1a      	ldrb	r2, [r3, #16]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800b742:	2300      	movs	r3, #0
 800b744:	e007      	b.n	800b756 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	60fb      	str	r3, [r7, #12]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d1db      	bne.n	800b70a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800b752:	f06f 0305 	mvn.w	r3, #5
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	08022f14 	.word	0x08022f14

0800b764 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800b778:	b480      	push	{r7}
 800b77a:	b083      	sub	sp, #12
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	685a      	ldr	r2, [r3, #4]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	1ad3      	subs	r3, r2, r3
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	370c      	adds	r7, #12
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b082      	sub	sp, #8
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800b79e:	222c      	movs	r2, #44	; 0x2c
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f00d fed9 	bl	801955a <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800b7a8:	bf00      	nop
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800b7b6:	202c      	movs	r0, #44	; 0x2c
 800b7b8:	f001 f91a 	bl	800c9f0 <mem_malloc>
 800b7bc:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <http_state_alloc+0x1a>
    http_state_init(ret);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f7ff ffe6 	bl	800b796 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800b7ca:	687b      	ldr	r3, [r7, #4]
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	695b      	ldr	r3, [r3, #20]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d007      	beq.n	800b7f4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7ff ffbb 	bl	800b764 <fs_close>
    hs->handle = NULL;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6a1b      	ldr	r3, [r3, #32]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d007      	beq.n	800b80c <http_state_eof+0x38>
    pbuf_free(hs->req);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6a1b      	ldr	r3, [r3, #32]
 800b800:	4618      	mov	r0, r3
 800b802:	f002 f975 	bl	800daf0 <pbuf_free>
    hs->req = NULL;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d005      	beq.n	800b82e <http_state_free+0x1a>
    http_state_eof(hs);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7ff ffd6 	bl	800b7d4 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 ff47 	bl	800c6bc <mem_free>
  }
}
 800b82e:	bf00      	nop
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
	...

0800b838 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d106      	bne.n	800b85a <http_write+0x22>
 800b84c:	4b2c      	ldr	r3, [pc, #176]	; (800b900 <http_write+0xc8>)
 800b84e:	f240 2219 	movw	r2, #537	; 0x219
 800b852:	492c      	ldr	r1, [pc, #176]	; (800b904 <http_write+0xcc>)
 800b854:	482c      	ldr	r0, [pc, #176]	; (800b908 <http_write+0xd0>)
 800b856:	f00d fe89 	bl	801956c <iprintf>
  len = *length;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	881b      	ldrh	r3, [r3, #0]
 800b85e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800b860:	8afb      	ldrh	r3, [r7, #22]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <http_write+0x32>
    return ERR_OK;
 800b866:	2300      	movs	r3, #0
 800b868:	e045      	b.n	800b8f6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b870:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800b872:	8aba      	ldrh	r2, [r7, #20]
 800b874:	8afb      	ldrh	r3, [r7, #22]
 800b876:	429a      	cmp	r2, r3
 800b878:	d201      	bcs.n	800b87e <http_write+0x46>
    len = max_len;
 800b87a:	8abb      	ldrh	r3, [r7, #20]
 800b87c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b882:	005b      	lsls	r3, r3, #1
 800b884:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800b886:	8afa      	ldrh	r2, [r7, #22]
 800b888:	8abb      	ldrh	r3, [r7, #20]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d901      	bls.n	800b892 <http_write+0x5a>
    len = max_len;
 800b88e:	8abb      	ldrh	r3, [r7, #20]
 800b890:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800b892:	78fb      	ldrb	r3, [r7, #3]
 800b894:	8afa      	ldrh	r2, [r7, #22]
 800b896:	68b9      	ldr	r1, [r7, #8]
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f006 ff15 	bl	80126c8 <tcp_write>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800b8a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8aa:	d10f      	bne.n	800b8cc <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d004      	beq.n	800b8c0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800b8bc:	2b08      	cmp	r3, #8
 800b8be:	d902      	bls.n	800b8c6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	82fb      	strh	r3, [r7, #22]
 800b8c4:	e002      	b.n	800b8cc <http_write+0x94>
      } else {
        len /= 2;
 800b8c6:	8afb      	ldrh	r3, [r7, #22]
 800b8c8:	085b      	lsrs	r3, r3, #1
 800b8ca:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800b8cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d4:	d102      	bne.n	800b8dc <http_write+0xa4>
 800b8d6:	8afb      	ldrh	r3, [r7, #22]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d8da      	bhi.n	800b892 <http_write+0x5a>

  if (err == ERR_OK) {
 800b8dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d103      	bne.n	800b8ec <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	8afa      	ldrh	r2, [r7, #22]
 800b8e8:	801a      	strh	r2, [r3, #0]
 800b8ea:	e002      	b.n	800b8f2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800b8f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3718      	adds	r7, #24
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	0801b4f4 	.word	0x0801b4f4
 800b904:	0801b52c 	.word	0x0801b52c
 800b908:	0801b53c 	.word	0x0801b53c

0800b90c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	4613      	mov	r3, r2
 800b918:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800b91a:	2100      	movs	r1, #0
 800b91c:	68f8      	ldr	r0, [r7, #12]
 800b91e:	f003 ff97 	bl	800f850 <tcp_arg>
  altcp_recv(pcb, NULL);
 800b922:	2100      	movs	r1, #0
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f003 ffa5 	bl	800f874 <tcp_recv>
  altcp_err(pcb, NULL);
 800b92a:	2100      	movs	r1, #0
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f003 ffe5 	bl	800f8fc <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800b932:	2200      	movs	r2, #0
 800b934:	2100      	movs	r1, #0
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f004 f81a 	bl	800f970 <tcp_poll>
  altcp_sent(pcb, NULL);
 800b93c:	2100      	movs	r1, #0
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f003 ffba 	bl	800f8b8 <tcp_sent>
  if (hs != NULL) {
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d002      	beq.n	800b950 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800b94a:	68b8      	ldr	r0, [r7, #8]
 800b94c:	f7ff ff62 	bl	800b814 <http_state_free>
  }

  if (abort_conn) {
 800b950:	79fb      	ldrb	r3, [r7, #7]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d004      	beq.n	800b960 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f002 fec0 	bl	800e6dc <tcp_abort>
    return ERR_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	e00f      	b.n	800b980 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f002 fd77 	bl	800e454 <tcp_close>
 800b966:	4603      	mov	r3, r0
 800b968:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800b96a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d004      	beq.n	800b97c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b972:	2204      	movs	r2, #4
 800b974:	4904      	ldr	r1, [pc, #16]	; (800b988 <http_close_or_abort_conn+0x7c>)
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f003 fffa 	bl	800f970 <tcp_poll>
  }
  return err;
 800b97c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3718      	adds	r7, #24
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	0800c04f 	.word	0x0800c04f

0800b98c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800b996:	2200      	movs	r2, #0
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7ff ffb6 	bl	800b90c <http_close_or_abort_conn>
 800b9a0:	4603      	mov	r3, r0
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b082      	sub	sp, #8
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f7ff ffe8 	bl	800b98c <http_close_conn>
  }
}
 800b9bc:	bf00      	nop
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b084      	sub	sp, #16
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	695b      	ldr	r3, [r3, #20]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d105      	bne.n	800b9e2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f7ff ffe6 	bl	800b9aa <http_eof>
    return 0;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	e016      	b.n	800ba10 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7ff fec6 	bl	800b778 <fs_bytes_left>
 800b9ec:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	dc05      	bgt.n	800ba00 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b9f4:	6839      	ldr	r1, [r7, #0]
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f7ff ffd7 	bl	800b9aa <http_eof>
    return 0;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	e007      	b.n	800ba10 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800ba00:	4b05      	ldr	r3, [pc, #20]	; (800ba18 <http_check_eof+0x54>)
 800ba02:	f240 429d 	movw	r2, #1181	; 0x49d
 800ba06:	4905      	ldr	r1, [pc, #20]	; (800ba1c <http_check_eof+0x58>)
 800ba08:	4805      	ldr	r0, [pc, #20]	; (800ba20 <http_check_eof+0x5c>)
 800ba0a:	f00d fdaf 	bl	801956c <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800ba0e:	2301      	movs	r3, #1
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	0801b4f4 	.word	0x0801b4f4
 800ba1c:	0801b564 	.word	0x0801b564
 800ba20:	0801b53c 	.word	0x0801b53c

0800ba24 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d803      	bhi.n	800ba46 <http_send_data_nonssi+0x22>
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	e001      	b.n	800ba4a <http_send_data_nonssi+0x26>
 800ba46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba4a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	6999      	ldr	r1, [r3, #24]
 800ba50:	f107 020c 	add.w	r2, r7, #12
 800ba54:	2300      	movs	r3, #0
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff feee 	bl	800b838 <http_write>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800ba60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10d      	bne.n	800ba84 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	699b      	ldr	r3, [r3, #24]
 800ba70:	89ba      	ldrh	r2, [r7, #12]
 800ba72:	441a      	add	r2, r3
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7c:	89ba      	ldrh	r2, [r7, #12]
 800ba7e:	1a9a      	subs	r2, r3, r2
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800ba84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b084      	sub	sp, #16
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
 800ba96:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d101      	bne.n	800baa6 <http_send+0x18>
    return 0;
 800baa2:	2300      	movs	r3, #0
 800baa4:	e025      	b.n	800baf2 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d108      	bne.n	800bac0 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800baae:	6839      	ldr	r1, [r7, #0]
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f7ff ff87 	bl	800b9c4 <http_check_eof>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d101      	bne.n	800bac0 <http_send+0x32>
      return 0;
 800babc:	2300      	movs	r3, #0
 800babe:	e018      	b.n	800baf2 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800bac0:	6839      	ldr	r1, [r7, #0]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff ffae 	bl	800ba24 <http_send_data_nonssi>
 800bac8:	4603      	mov	r3, r0
 800baca:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10d      	bne.n	800baf0 <http_send+0x62>
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	695b      	ldr	r3, [r3, #20]
 800bad8:	4618      	mov	r0, r3
 800bada:	f7ff fe4d 	bl	800b778 <fs_bytes_left>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	dc05      	bgt.n	800baf0 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800bae4:	6839      	ldr	r1, [r7, #0]
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f7ff ff5f 	bl	800b9aa <http_eof>
    return 0;
 800baec:	2300      	movs	r3, #0
 800baee:	e000      	b.n	800baf2 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
	...

0800bafc <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	4a1c      	ldr	r2, [pc, #112]	; (800bb7c <http_get_404_file+0x80>)
 800bb0a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4619      	mov	r1, r3
 800bb14:	4610      	mov	r0, r2
 800bb16:	f7ff fde7 	bl	800b6e8 <fs_open>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bb1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d024      	beq.n	800bb70 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	4a15      	ldr	r2, [pc, #84]	; (800bb80 <http_get_404_file+0x84>)
 800bb2a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4619      	mov	r1, r3
 800bb34:	4610      	mov	r0, r2
 800bb36:	f7ff fdd7 	bl	800b6e8 <fs_open>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bb3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d014      	beq.n	800bb70 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	4a0e      	ldr	r2, [pc, #56]	; (800bb84 <http_get_404_file+0x88>)
 800bb4a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4619      	mov	r1, r3
 800bb54:	4610      	mov	r0, r2
 800bb56:	f7ff fdc7 	bl	800b6e8 <fs_open>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800bb5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d004      	beq.n	800bb70 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	601a      	str	r2, [r3, #0]
        return NULL;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	e000      	b.n	800bb72 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800bb70:	687b      	ldr	r3, [r7, #4]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3710      	adds	r7, #16
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	0801b59c 	.word	0x0801b59c
 800bb80:	0801b5a8 	.word	0x0801b5a8
 800bb84:	0801b5b4 	.word	0x0801b5b4

0800bb88 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b08e      	sub	sp, #56	; 0x38
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800bb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d106      	bne.n	800bbac <http_parse_request+0x24>
 800bb9e:	4b65      	ldr	r3, [pc, #404]	; (800bd34 <http_parse_request+0x1ac>)
 800bba0:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800bba4:	4964      	ldr	r1, [pc, #400]	; (800bd38 <http_parse_request+0x1b0>)
 800bba6:	4865      	ldr	r0, [pc, #404]	; (800bd3c <http_parse_request+0x1b4>)
 800bba8:	f00d fce0 	bl	801956c <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d106      	bne.n	800bbc0 <http_parse_request+0x38>
 800bbb2:	4b60      	ldr	r3, [pc, #384]	; (800bd34 <http_parse_request+0x1ac>)
 800bbb4:	f240 72af 	movw	r2, #1967	; 0x7af
 800bbb8:	4961      	ldr	r1, [pc, #388]	; (800bd40 <http_parse_request+0x1b8>)
 800bbba:	4860      	ldr	r0, [pc, #384]	; (800bd3c <http_parse_request+0x1b4>)
 800bbbc:	f00d fcd6 	bl	801956c <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	695b      	ldr	r3, [r3, #20]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d103      	bne.n	800bbd0 <http_parse_request+0x48>
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	699b      	ldr	r3, [r3, #24]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800bbd0:	f06f 0307 	mvn.w	r3, #7
 800bbd4:	e0aa      	b.n	800bd2c <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	6a1b      	ldr	r3, [r3, #32]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d103      	bne.n	800bbe6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbe2:	621a      	str	r2, [r3, #32]
 800bbe4:	e005      	b.n	800bbf2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	6a1b      	ldr	r3, [r3, #32]
 800bbea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbec:	4618      	mov	r0, r3
 800bbee:	f002 f84d 	bl	800dc8c <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800bbf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bbf4:	f002 f822 	bl	800dc3c <pbuf_ref>

  if (hs->req->next != NULL) {
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	6a1b      	ldr	r3, [r3, #32]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d012      	beq.n	800bc28 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	891b      	ldrh	r3, [r3, #8]
 800bc08:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	bf28      	it	cs
 800bc10:	4613      	movcs	r3, r2
 800bc12:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	6a18      	ldr	r0, [r3, #32]
 800bc18:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	4949      	ldr	r1, [pc, #292]	; (800bd44 <http_parse_request+0x1bc>)
 800bc1e:	f002 f96d 	bl	800defc <pbuf_copy_partial>
    data = httpd_req_buf;
 800bc22:	4b48      	ldr	r3, [pc, #288]	; (800bd44 <http_parse_request+0x1bc>)
 800bc24:	637b      	str	r3, [r7, #52]	; 0x34
 800bc26:	e005      	b.n	800bc34 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc30:	895b      	ldrh	r3, [r3, #10]
 800bc32:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800bc34:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bc36:	2b06      	cmp	r3, #6
 800bc38:	d963      	bls.n	800bd02 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800bc3a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	4942      	ldr	r1, [pc, #264]	; (800bd48 <http_parse_request+0x1c0>)
 800bc40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc42:	f000 fb99 	bl	800c378 <lwip_strnstr>
 800bc46:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800bc48:	6a3b      	ldr	r3, [r7, #32]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d059      	beq.n	800bd02 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800bc52:	2204      	movs	r2, #4
 800bc54:	493d      	ldr	r1, [pc, #244]	; (800bd4c <http_parse_request+0x1c4>)
 800bc56:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bc58:	f00d fd09 	bl	801966e <strncmp>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d117      	bne.n	800bc92 <http_parse_request+0x10a>
        sp1 = data + 3;
 800bc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc64:	3303      	adds	r3, #3
 800bc66:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800bc76:	1ad3      	subs	r3, r2, r3
 800bc78:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	8b7a      	ldrh	r2, [r7, #26]
 800bc80:	4933      	ldr	r1, [pc, #204]	; (800bd50 <http_parse_request+0x1c8>)
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 fb78 	bl	800c378 <lwip_strnstr>
 800bc88:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800bc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d111      	bne.n	800bcb4 <http_parse_request+0x12c>
 800bc90:	e006      	b.n	800bca0 <http_parse_request+0x118>
        data[4] = 0;
 800bc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc94:	3304      	adds	r3, #4
 800bc96:	2200      	movs	r2, #0
 800bc98:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800bc9a:	f06f 030f 	mvn.w	r3, #15
 800bc9e:	e045      	b.n	800bd2c <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800bca0:	69fb      	ldr	r3, [r7, #28]
 800bca2:	3301      	adds	r3, #1
 800bca4:	8b7a      	ldrh	r2, [r7, #26]
 800bca6:	4928      	ldr	r1, [pc, #160]	; (800bd48 <http_parse_request+0x1c0>)
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f000 fb65 	bl	800c378 <lwip_strnstr>
 800bcae:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	69fa      	ldr	r2, [r7, #28]
 800bcb8:	3201      	adds	r2, #1
 800bcba:	1a9b      	subs	r3, r3, r2
 800bcbc:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d01e      	beq.n	800bd02 <http_parse_request+0x17a>
 800bcc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d91a      	bls.n	800bd02 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800bccc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800bcce:	461a      	mov	r2, r3
 800bcd0:	4920      	ldr	r1, [pc, #128]	; (800bd54 <http_parse_request+0x1cc>)
 800bcd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bcd4:	f000 fb50 	bl	800c378 <lwip_strnstr>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d011      	beq.n	800bd02 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 800bcde:	69fb      	ldr	r3, [r7, #28]
 800bce0:	3301      	adds	r3, #1
 800bce2:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	2200      	movs	r2, #0
 800bce8:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800bcea:	8b3b      	ldrh	r3, [r7, #24]
 800bcec:	697a      	ldr	r2, [r7, #20]
 800bcee:	4413      	add	r3, r2
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800bcf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcf6:	6979      	ldr	r1, [r7, #20]
 800bcf8:	68b8      	ldr	r0, [r7, #8]
 800bcfa:	f000 f82d 	bl	800bd58 <http_find_file>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	e014      	b.n	800bd2c <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	6a1b      	ldr	r3, [r3, #32]
 800bd06:	4618      	mov	r0, r3
 800bd08:	f001 ff80 	bl	800dc0c <pbuf_clen>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	6a1b      	ldr	r3, [r3, #32]
 800bd14:	891b      	ldrh	r3, [r3, #8]
 800bd16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd1a:	d205      	bcs.n	800bd28 <http_parse_request+0x1a0>
 800bd1c:	8a7b      	ldrh	r3, [r7, #18]
 800bd1e:	2b05      	cmp	r3, #5
 800bd20:	d802      	bhi.n	800bd28 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800bd22:	f06f 0304 	mvn.w	r3, #4
 800bd26:	e001      	b.n	800bd2c <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800bd28:	f06f 030f 	mvn.w	r3, #15
  }
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3738      	adds	r7, #56	; 0x38
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	0801b4f4 	.word	0x0801b4f4
 800bd38:	0801b5c0 	.word	0x0801b5c0
 800bd3c:	0801b53c 	.word	0x0801b53c
 800bd40:	0801b5cc 	.word	0x0801b5cc
 800bd44:	2000fdd0 	.word	0x2000fdd0
 800bd48:	0801b5d8 	.word	0x0801b5d8
 800bd4c:	0801b5dc 	.word	0x0801b5dc
 800bd50:	0801b5e4 	.word	0x0801b5e4
 800bd54:	0801b5e8 	.word	0x0801b5e8

0800bd58 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b092      	sub	sp, #72	; 0x48
 800bd5c:	af02      	add	r7, sp, #8
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800bd64:	2300      	movs	r3, #0
 800bd66:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f7f4 fa45 	bl	8000204 <strlen>
 800bd7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d06b      	beq.n	800be5a <http_find_file+0x102>
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd86:	3b01      	subs	r3, #1
 800bd88:	4413      	add	r3, r2
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	2b2f      	cmp	r3, #47	; 0x2f
 800bd8e:	d164      	bne.n	800be5a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800bd90:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800bd92:	4a53      	ldr	r2, [pc, #332]	; (800bee0 <http_find_file+0x188>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d102      	bne.n	800bd9e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800bd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d15d      	bne.n	800be5a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800bd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda0:	3b01      	subs	r3, #1
 800bda2:	2b3f      	cmp	r3, #63	; 0x3f
 800bda4:	bf28      	it	cs
 800bda6:	233f      	movcs	r3, #63	; 0x3f
 800bda8:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800bdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00a      	beq.n	800bdc6 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	484a      	ldr	r0, [pc, #296]	; (800bee0 <http_find_file+0x188>)
 800bdb8:	f00d fbab 	bl	8019512 <memcpy>
      http_uri_buf[copy_len] = 0;
 800bdbc:	4a48      	ldr	r2, [pc, #288]	; (800bee0 <http_find_file+0x188>)
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc0:	4413      	add	r3, r2
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdca:	e043      	b.n	800be54 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800bdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d028      	beq.n	800be24 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800bdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800bdd8:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d01e      	beq.n	800be1e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800bde0:	4a40      	ldr	r2, [pc, #256]	; (800bee4 <http_find_file+0x18c>)
 800bde2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7f4 fa0b 	bl	8000204 <strlen>
 800bdee:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800bdf0:	69fa      	ldr	r2, [r7, #28]
 800bdf2:	6a3b      	ldr	r3, [r7, #32]
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	bf28      	it	cs
 800bdf8:	4613      	movcs	r3, r2
 800bdfa:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfe:	4a38      	ldr	r2, [pc, #224]	; (800bee0 <http_find_file+0x188>)
 800be00:	1898      	adds	r0, r3, r2
 800be02:	4a38      	ldr	r2, [pc, #224]	; (800bee4 <http_find_file+0x18c>)
 800be04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be06:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800be0a:	69ba      	ldr	r2, [r7, #24]
 800be0c:	4619      	mov	r1, r3
 800be0e:	f00d fb80 	bl	8019512 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800be12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	4413      	add	r3, r2
 800be18:	4a31      	ldr	r2, [pc, #196]	; (800bee0 <http_find_file+0x188>)
 800be1a:	2100      	movs	r1, #0
 800be1c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800be1e:	4b30      	ldr	r3, [pc, #192]	; (800bee0 <http_find_file+0x188>)
 800be20:	633b      	str	r3, [r7, #48]	; 0x30
 800be22:	e004      	b.n	800be2e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800be24:	4a2f      	ldr	r2, [pc, #188]	; (800bee4 <http_find_file+0x18c>)
 800be26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800be2c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800be32:	4618      	mov	r0, r3
 800be34:	f7ff fc58 	bl	800b6e8 <fs_open>
 800be38:	4603      	mov	r3, r0
 800be3a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800be3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d104      	bne.n	800be4e <http_find_file+0xf6>
        uri = file_name;
 800be44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be46:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800be4c:	e005      	b.n	800be5a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800be4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be50:	3301      	adds	r3, #1
 800be52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be56:	2b04      	cmp	r3, #4
 800be58:	d9b8      	bls.n	800bdcc <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800be5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d124      	bne.n	800beaa <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	213f      	movs	r1, #63	; 0x3f
 800be64:	4618      	mov	r0, r3
 800be66:	f00d fbed 	bl	8019644 <strchr>
 800be6a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800be6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d005      	beq.n	800be7e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800be72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be74:	2200      	movs	r2, #0
 800be76:	701a      	strb	r2, [r3, #0]
      params++;
 800be78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7a:	3301      	adds	r3, #1
 800be7c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	4611      	mov	r1, r2
 800be84:	4618      	mov	r0, r3
 800be86:	f7ff fc2f 	bl	800b6e8 <fs_open>
 800be8a:	4603      	mov	r3, r0
 800be8c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800be8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d102      	bne.n	800be9c <http_find_file+0x144>
      file = &hs->file_handle;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	63bb      	str	r3, [r7, #56]	; 0x38
 800be9a:	e006      	b.n	800beaa <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800be9c:	f107 0308 	add.w	r3, r7, #8
 800bea0:	4619      	mov	r1, r3
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f7ff fe2a 	bl	800bafc <http_get_404_file>
 800bea8:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800beaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beac:	2b00      	cmp	r3, #0
 800beae:	d106      	bne.n	800bebe <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800beb0:	f107 0308 	add.w	r3, r7, #8
 800beb4:	4619      	mov	r1, r3
 800beb6:	68f8      	ldr	r0, [r7, #12]
 800beb8:	f7ff fe20 	bl	800bafc <http_get_404_file>
 800bebc:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec2:	9301      	str	r3, [sp, #4]
 800bec4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bec8:	9300      	str	r3, [sp, #0]
 800beca:	4613      	mov	r3, r2
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bed0:	68f8      	ldr	r0, [r7, #12]
 800bed2:	f000 f809 	bl	800bee8 <http_init_file>
 800bed6:	4603      	mov	r3, r0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3740      	adds	r7, #64	; 0x40
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}
 800bee0:	200101d0 	.word	0x200101d0
 800bee4:	08022f28 	.word	0x08022f28

0800bee8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b086      	sub	sp, #24
 800beec:	af00      	add	r7, sp, #0
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
 800bef4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d05d      	beq.n	800bfb8 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d106      	bne.n	800bf12 <http_init_file+0x2a>
 800bf04:	4b35      	ldr	r3, [pc, #212]	; (800bfdc <http_init_file+0xf4>)
 800bf06:	f640 120b 	movw	r2, #2315	; 0x90b
 800bf0a:	4935      	ldr	r1, [pc, #212]	; (800bfe0 <http_init_file+0xf8>)
 800bf0c:	4835      	ldr	r0, [pc, #212]	; (800bfe4 <http_init_file+0xfc>)
 800bf0e:	f00d fb2d 	bl	801956c <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	68ba      	ldr	r2, [r7, #8]
 800bf16:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	da06      	bge.n	800bf36 <http_init_file+0x4e>
 800bf28:	4b2c      	ldr	r3, [pc, #176]	; (800bfdc <http_init_file+0xf4>)
 800bf2a:	f640 1234 	movw	r2, #2356	; 0x934
 800bf2e:	492e      	ldr	r1, [pc, #184]	; (800bfe8 <http_init_file+0x100>)
 800bf30:	482c      	ldr	r0, [pc, #176]	; (800bfe4 <http_init_file+0xfc>)
 800bf32:	f00d fb1b 	bl	801956c <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2200      	movs	r2, #0
 800bf44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	695b      	ldr	r3, [r3, #20]
 800bf4c:	7c1b      	ldrb	r3, [r3, #16]
 800bf4e:	f003 0301 	and.w	r3, r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d106      	bne.n	800bf64 <http_init_file+0x7c>
 800bf56:	4b21      	ldr	r3, [pc, #132]	; (800bfdc <http_init_file+0xf4>)
 800bf58:	f640 1244 	movw	r2, #2372	; 0x944
 800bf5c:	4923      	ldr	r1, [pc, #140]	; (800bfec <http_init_file+0x104>)
 800bf5e:	4821      	ldr	r0, [pc, #132]	; (800bfe4 <http_init_file+0xfc>)
 800bf60:	f00d fb04 	bl	801956c <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d033      	beq.n	800bfd2 <http_init_file+0xea>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	7c1b      	ldrb	r3, [r3, #16]
 800bf70:	f003 0301 	and.w	r3, r3, #1
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d02c      	beq.n	800bfd2 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6998      	ldr	r0, [r3, #24]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf80:	461a      	mov	r2, r3
 800bf82:	491b      	ldr	r1, [pc, #108]	; (800bff0 <http_init_file+0x108>)
 800bf84:	f000 f9f8 	bl	800c378 <lwip_strnstr>
 800bf88:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d020      	beq.n	800bfd2 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	3304      	adds	r3, #4
 800bf94:	461a      	mov	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	699b      	ldr	r3, [r3, #24]
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	699a      	ldr	r2, [r3, #24]
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	441a      	add	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	1ad2      	subs	r2, r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	625a      	str	r2, [r3, #36]	; 0x24
 800bfb6:	e00c      	b.n	800bfd2 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3718      	adds	r7, #24
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	0801b4f4 	.word	0x0801b4f4
 800bfe0:	0801b5f0 	.word	0x0801b5f0
 800bfe4:	0801b53c 	.word	0x0801b53c
 800bfe8:	0801b604 	.word	0x0801b604
 800bfec:	0801b624 	.word	0x0801b624
 800bff0:	0801b5e8 	.word	0x0801b5e8

0800bff4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	460b      	mov	r3, r1
 800bffe:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d002      	beq.n	800c010 <http_err+0x1c>
    http_state_free(hs);
 800c00a:	68f8      	ldr	r0, [r7, #12]
 800c00c:	f7ff fc02 	bl	800b814 <http_state_free>
  }
}
 800c010:	bf00      	nop
 800c012:	3710      	adds	r7, #16
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	4613      	mov	r3, r2
 800c024:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <http_sent+0x1c>
    return ERR_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	e008      	b.n	800c046 <http_sent+0x2e>
  }

  hs->retries = 0;
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800c03c:	6979      	ldr	r1, [r7, #20]
 800c03e:	68b8      	ldr	r0, [r7, #8]
 800c040:	f7ff fd25 	bl	800ba8e <http_send>

  return ERR_OK;
 800c044:	2300      	movs	r3, #0
}
 800c046:	4618      	mov	r0, r3
 800c048:	3718      	adds	r7, #24
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}

0800c04e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b084      	sub	sp, #16
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d107      	bne.n	800c072 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800c062:	2100      	movs	r1, #0
 800c064:	6838      	ldr	r0, [r7, #0]
 800c066:	f7ff fc91 	bl	800b98c <http_close_conn>
 800c06a:	4603      	mov	r3, r0
 800c06c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	e021      	b.n	800c0b6 <http_poll+0x68>
  } else {
    hs->retries++;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c078:	3301      	adds	r3, #1
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c088:	2b04      	cmp	r3, #4
 800c08a:	d105      	bne.n	800c098 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800c08c:	68f9      	ldr	r1, [r7, #12]
 800c08e:	6838      	ldr	r0, [r7, #0]
 800c090:	f7ff fc7c 	bl	800b98c <http_close_conn>
      return ERR_OK;
 800c094:	2300      	movs	r3, #0
 800c096:	e00e      	b.n	800c0b6 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	695b      	ldr	r3, [r3, #20]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d009      	beq.n	800c0b4 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800c0a0:	68f9      	ldr	r1, [r7, #12]
 800c0a2:	6838      	ldr	r0, [r7, #0]
 800c0a4:	f7ff fcf3 	bl	800ba8e <http_send>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d002      	beq.n	800c0b4 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800c0ae:	6838      	ldr	r0, [r7, #0]
 800c0b0:	f007 f8f6 	bl	80132a0 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3710      	adds	r7, #16
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}
	...

0800c0c0 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	607a      	str	r2, [r7, #4]
 800c0cc:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800c0d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d105      	bne.n	800c0e6 <http_recv+0x26>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <http_recv+0x26>
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d111      	bne.n	800c10a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d008      	beq.n	800c0fe <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	891b      	ldrh	r3, [r3, #8]
 800c0f0:	4619      	mov	r1, r3
 800c0f2:	68b8      	ldr	r0, [r7, #8]
 800c0f4:	f002 fccc 	bl	800ea90 <tcp_recved>
      pbuf_free(p);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f001 fcf9 	bl	800daf0 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800c0fe:	6979      	ldr	r1, [r7, #20]
 800c100:	68b8      	ldr	r0, [r7, #8]
 800c102:	f7ff fc43 	bl	800b98c <http_close_conn>
    return ERR_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	e055      	b.n	800c1b6 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	891b      	ldrh	r3, [r3, #8]
 800c10e:	4619      	mov	r1, r3
 800c110:	68b8      	ldr	r0, [r7, #8]
 800c112:	f002 fcbd 	bl	800ea90 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	695b      	ldr	r3, [r3, #20]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d147      	bne.n	800c1ae <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	6979      	ldr	r1, [r7, #20]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f7ff fd30 	bl	800bb88 <http_parse_request>
 800c128:	4603      	mov	r3, r0
 800c12a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800c12c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d015      	beq.n	800c160 <http_recv+0xa0>
 800c134:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c138:	f113 0f05 	cmn.w	r3, #5
 800c13c:	d010      	beq.n	800c160 <http_recv+0xa0>
 800c13e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c142:	f113 0f10 	cmn.w	r3, #16
 800c146:	d00b      	beq.n	800c160 <http_recv+0xa0>
 800c148:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c14c:	f113 0f08 	cmn.w	r3, #8
 800c150:	d006      	beq.n	800c160 <http_recv+0xa0>
 800c152:	4b1b      	ldr	r3, [pc, #108]	; (800c1c0 <http_recv+0x100>)
 800c154:	f640 2205 	movw	r2, #2565	; 0xa05
 800c158:	491a      	ldr	r1, [pc, #104]	; (800c1c4 <http_recv+0x104>)
 800c15a:	481b      	ldr	r0, [pc, #108]	; (800c1c8 <http_recv+0x108>)
 800c15c:	f00d fa06 	bl	801956c <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800c160:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c164:	f113 0f05 	cmn.w	r3, #5
 800c168:	d00b      	beq.n	800c182 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800c16a:	697b      	ldr	r3, [r7, #20]
 800c16c:	6a1b      	ldr	r3, [r3, #32]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d007      	beq.n	800c182 <http_recv+0xc2>
          pbuf_free(hs->req);
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	4618      	mov	r0, r3
 800c178:	f001 fcba 	bl	800daf0 <pbuf_free>
          hs->req = NULL;
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	2200      	movs	r2, #0
 800c180:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f001 fcb4 	bl	800daf0 <pbuf_free>
      if (parsed == ERR_OK) {
 800c188:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d104      	bne.n	800c19a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800c190:	6979      	ldr	r1, [r7, #20]
 800c192:	68b8      	ldr	r0, [r7, #8]
 800c194:	f7ff fc7b 	bl	800ba8e <http_send>
 800c198:	e00c      	b.n	800c1b4 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800c19a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c19e:	f113 0f10 	cmn.w	r3, #16
 800c1a2:	d107      	bne.n	800c1b4 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800c1a4:	6979      	ldr	r1, [r7, #20]
 800c1a6:	68b8      	ldr	r0, [r7, #8]
 800c1a8:	f7ff fbf0 	bl	800b98c <http_close_conn>
 800c1ac:	e002      	b.n	800c1b4 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f001 fc9e 	bl	800daf0 <pbuf_free>
    }
  }
  return ERR_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	0801b4f4 	.word	0x0801b4f4
 800c1c4:	0801b650 	.word	0x0801b650
 800c1c8:	0801b53c 	.word	0x0801b53c

0800c1cc <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	4613      	mov	r3, r2
 800c1d8:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800c1da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d102      	bne.n	800c1e8 <http_accept+0x1c>
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d102      	bne.n	800c1ee <http_accept+0x22>
    return ERR_VAL;
 800c1e8:	f06f 0305 	mvn.w	r3, #5
 800c1ec:	e025      	b.n	800c23a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c1ee:	2101      	movs	r1, #1
 800c1f0:	68b8      	ldr	r0, [r7, #8]
 800c1f2:	f003 f92d 	bl	800f450 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800c1f6:	f7ff fadb 	bl	800b7b0 <http_state_alloc>
 800c1fa:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d102      	bne.n	800c208 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800c202:	f04f 33ff 	mov.w	r3, #4294967295
 800c206:	e018      	b.n	800c23a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800c20e:	6979      	ldr	r1, [r7, #20]
 800c210:	68b8      	ldr	r0, [r7, #8]
 800c212:	f003 fb1d 	bl	800f850 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800c216:	490b      	ldr	r1, [pc, #44]	; (800c244 <http_accept+0x78>)
 800c218:	68b8      	ldr	r0, [r7, #8]
 800c21a:	f003 fb2b 	bl	800f874 <tcp_recv>
  altcp_err(pcb, http_err);
 800c21e:	490a      	ldr	r1, [pc, #40]	; (800c248 <http_accept+0x7c>)
 800c220:	68b8      	ldr	r0, [r7, #8]
 800c222:	f003 fb6b 	bl	800f8fc <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800c226:	2204      	movs	r2, #4
 800c228:	4908      	ldr	r1, [pc, #32]	; (800c24c <http_accept+0x80>)
 800c22a:	68b8      	ldr	r0, [r7, #8]
 800c22c:	f003 fba0 	bl	800f970 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800c230:	4907      	ldr	r1, [pc, #28]	; (800c250 <http_accept+0x84>)
 800c232:	68b8      	ldr	r0, [r7, #8]
 800c234:	f003 fb40 	bl	800f8b8 <tcp_sent>

  return ERR_OK;
 800c238:	2300      	movs	r3, #0
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	3718      	adds	r7, #24
 800c23e:	46bd      	mov	sp, r7
 800c240:	bd80      	pop	{r7, pc}
 800c242:	bf00      	nop
 800c244:	0800c0c1 	.word	0x0800c0c1
 800c248:	0800bff5 	.word	0x0800bff5
 800c24c:	0800c04f 	.word	0x0800c04f
 800c250:	0800c019 	.word	0x0800c019

0800c254 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b084      	sub	sp, #16
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d029      	beq.n	800c2ba <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c266:	2101      	movs	r1, #1
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f003 f8f1 	bl	800f450 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800c26e:	887b      	ldrh	r3, [r7, #2]
 800c270:	461a      	mov	r2, r3
 800c272:	4914      	ldr	r1, [pc, #80]	; (800c2c4 <httpd_init_pcb+0x70>)
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f002 fa3d 	bl	800e6f4 <tcp_bind>
 800c27a:	4603      	mov	r3, r0
 800c27c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800c27e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d006      	beq.n	800c294 <httpd_init_pcb+0x40>
 800c286:	4b10      	ldr	r3, [pc, #64]	; (800c2c8 <httpd_init_pcb+0x74>)
 800c288:	f640 2257 	movw	r2, #2647	; 0xa57
 800c28c:	490f      	ldr	r1, [pc, #60]	; (800c2cc <httpd_init_pcb+0x78>)
 800c28e:	4810      	ldr	r0, [pc, #64]	; (800c2d0 <httpd_init_pcb+0x7c>)
 800c290:	f00d f96c 	bl	801956c <iprintf>
    pcb = altcp_listen(pcb);
 800c294:	21ff      	movs	r1, #255	; 0xff
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f002 fae4 	bl	800e864 <tcp_listen_with_backlog>
 800c29c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d106      	bne.n	800c2b2 <httpd_init_pcb+0x5e>
 800c2a4:	4b08      	ldr	r3, [pc, #32]	; (800c2c8 <httpd_init_pcb+0x74>)
 800c2a6:	f640 2259 	movw	r2, #2649	; 0xa59
 800c2aa:	490a      	ldr	r1, [pc, #40]	; (800c2d4 <httpd_init_pcb+0x80>)
 800c2ac:	4808      	ldr	r0, [pc, #32]	; (800c2d0 <httpd_init_pcb+0x7c>)
 800c2ae:	f00d f95d 	bl	801956c <iprintf>
    altcp_accept(pcb, http_accept);
 800c2b2:	4909      	ldr	r1, [pc, #36]	; (800c2d8 <httpd_init_pcb+0x84>)
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f003 fb43 	bl	800f940 <tcp_accept>
  }
}
 800c2ba:	bf00      	nop
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	08023070 	.word	0x08023070
 800c2c8:	0801b4f4 	.word	0x0801b4f4
 800c2cc:	0801b67c 	.word	0x0801b67c
 800c2d0:	0801b53c 	.word	0x0801b53c
 800c2d4:	0801b698 	.word	0x0801b698
 800c2d8:	0800c1cd 	.word	0x0800c1cd

0800c2dc <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800c2e2:	202e      	movs	r0, #46	; 0x2e
 800c2e4:	f003 faa6 	bl	800f834 <tcp_new_ip_type>
 800c2e8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d106      	bne.n	800c2fe <httpd_init+0x22>
 800c2f0:	4b07      	ldr	r3, [pc, #28]	; (800c310 <httpd_init+0x34>)
 800c2f2:	f640 2272 	movw	r2, #2674	; 0xa72
 800c2f6:	4907      	ldr	r1, [pc, #28]	; (800c314 <httpd_init+0x38>)
 800c2f8:	4807      	ldr	r0, [pc, #28]	; (800c318 <httpd_init+0x3c>)
 800c2fa:	f00d f937 	bl	801956c <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800c2fe:	2150      	movs	r1, #80	; 0x50
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f7ff ffa7 	bl	800c254 <httpd_init_pcb>
}
 800c306:	bf00      	nop
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	0801b4f4 	.word	0x0801b4f4
 800c314:	0801b6b8 	.word	0x0801b6b8
 800c318:	0801b53c 	.word	0x0801b53c

0800c31c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	4603      	mov	r3, r0
 800c324:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c326:	88fb      	ldrh	r3, [r7, #6]
 800c328:	021b      	lsls	r3, r3, #8
 800c32a:	b21a      	sxth	r2, r3
 800c32c:	88fb      	ldrh	r3, [r7, #6]
 800c32e:	0a1b      	lsrs	r3, r3, #8
 800c330:	b29b      	uxth	r3, r3
 800c332:	b21b      	sxth	r3, r3
 800c334:	4313      	orrs	r3, r2
 800c336:	b21b      	sxth	r3, r3
 800c338:	b29b      	uxth	r3, r3
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c346:	b480      	push	{r7}
 800c348:	b083      	sub	sp, #12
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	061a      	lsls	r2, r3, #24
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	021b      	lsls	r3, r3, #8
 800c356:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c35a:	431a      	orrs	r2, r3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	0a1b      	lsrs	r3, r3, #8
 800c360:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c364:	431a      	orrs	r2, r3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	0e1b      	lsrs	r3, r3, #24
 800c36a:	4313      	orrs	r3, r2
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800c384:	68b8      	ldr	r0, [r7, #8]
 800c386:	f7f3 ff3d 	bl	8000204 <strlen>
 800c38a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	e022      	b.n	800c3dc <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	617b      	str	r3, [r7, #20]
 800c39a:	e012      	b.n	800c3c2 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	781a      	ldrb	r2, [r3, #0]
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d109      	bne.n	800c3bc <lwip_strnstr+0x44>
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	68b9      	ldr	r1, [r7, #8]
 800c3ac:	6978      	ldr	r0, [r7, #20]
 800c3ae:	f00d f95e 	bl	801966e <strncmp>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d101      	bne.n	800c3bc <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	e00f      	b.n	800c3dc <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	617b      	str	r3, [r7, #20]
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d007      	beq.n	800c3da <lwip_strnstr+0x62>
 800c3ca:	697a      	ldr	r2, [r7, #20]
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	441a      	add	r2, r3
 800c3d0:	68f9      	ldr	r1, [r7, #12]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	440b      	add	r3, r1
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d9e0      	bls.n	800c39c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3718      	adds	r7, #24
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c3ee:	f00c ffe1 	bl	80193b4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c3f2:	f000 f8d5 	bl	800c5a0 <mem_init>
  memp_init();
 800c3f6:	f000 fc31 	bl	800cc5c <memp_init>
  pbuf_init();
  netif_init();
 800c3fa:	f000 fcf7 	bl	800cdec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c3fe:	f008 f84d 	bl	801449c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c402:	f001 fe1f 	bl	800e044 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c406:	f007 ff91 	bl	801432c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c40a:	bf00      	nop
 800c40c:	3708      	adds	r7, #8
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
	...

0800c414 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c414:	b480      	push	{r7}
 800c416:	b083      	sub	sp, #12
 800c418:	af00      	add	r7, sp, #0
 800c41a:	4603      	mov	r3, r0
 800c41c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c41e:	4b05      	ldr	r3, [pc, #20]	; (800c434 <ptr_to_mem+0x20>)
 800c420:	681a      	ldr	r2, [r3, #0]
 800c422:	88fb      	ldrh	r3, [r7, #6]
 800c424:	4413      	add	r3, r2
}
 800c426:	4618      	mov	r0, r3
 800c428:	370c      	adds	r7, #12
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	20010210 	.word	0x20010210

0800c438 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	4a05      	ldr	r2, [pc, #20]	; (800c458 <mem_to_ptr+0x20>)
 800c444:	6812      	ldr	r2, [r2, #0]
 800c446:	1a9b      	subs	r3, r3, r2
 800c448:	b29b      	uxth	r3, r3
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	370c      	adds	r7, #12
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	20010210 	.word	0x20010210

0800c45c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c45c:	b590      	push	{r4, r7, lr}
 800c45e:	b085      	sub	sp, #20
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c464:	4b45      	ldr	r3, [pc, #276]	; (800c57c <plug_holes+0x120>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d206      	bcs.n	800c47c <plug_holes+0x20>
 800c46e:	4b44      	ldr	r3, [pc, #272]	; (800c580 <plug_holes+0x124>)
 800c470:	f240 12df 	movw	r2, #479	; 0x1df
 800c474:	4943      	ldr	r1, [pc, #268]	; (800c584 <plug_holes+0x128>)
 800c476:	4844      	ldr	r0, [pc, #272]	; (800c588 <plug_holes+0x12c>)
 800c478:	f00d f878 	bl	801956c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c47c:	4b43      	ldr	r3, [pc, #268]	; (800c58c <plug_holes+0x130>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	687a      	ldr	r2, [r7, #4]
 800c482:	429a      	cmp	r2, r3
 800c484:	d306      	bcc.n	800c494 <plug_holes+0x38>
 800c486:	4b3e      	ldr	r3, [pc, #248]	; (800c580 <plug_holes+0x124>)
 800c488:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c48c:	4940      	ldr	r1, [pc, #256]	; (800c590 <plug_holes+0x134>)
 800c48e:	483e      	ldr	r0, [pc, #248]	; (800c588 <plug_holes+0x12c>)
 800c490:	f00d f86c 	bl	801956c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	791b      	ldrb	r3, [r3, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d006      	beq.n	800c4aa <plug_holes+0x4e>
 800c49c:	4b38      	ldr	r3, [pc, #224]	; (800c580 <plug_holes+0x124>)
 800c49e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c4a2:	493c      	ldr	r1, [pc, #240]	; (800c594 <plug_holes+0x138>)
 800c4a4:	4838      	ldr	r0, [pc, #224]	; (800c588 <plug_holes+0x12c>)
 800c4a6:	f00d f861 	bl	801956c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	881b      	ldrh	r3, [r3, #0]
 800c4ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c4b2:	d906      	bls.n	800c4c2 <plug_holes+0x66>
 800c4b4:	4b32      	ldr	r3, [pc, #200]	; (800c580 <plug_holes+0x124>)
 800c4b6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c4ba:	4937      	ldr	r1, [pc, #220]	; (800c598 <plug_holes+0x13c>)
 800c4bc:	4832      	ldr	r0, [pc, #200]	; (800c588 <plug_holes+0x12c>)
 800c4be:	f00d f855 	bl	801956c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	881b      	ldrh	r3, [r3, #0]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f7ff ffa4 	bl	800c414 <ptr_to_mem>
 800c4cc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d024      	beq.n	800c520 <plug_holes+0xc4>
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	791b      	ldrb	r3, [r3, #4]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d120      	bne.n	800c520 <plug_holes+0xc4>
 800c4de:	4b2b      	ldr	r3, [pc, #172]	; (800c58c <plug_holes+0x130>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d01b      	beq.n	800c520 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c4e8:	4b2c      	ldr	r3, [pc, #176]	; (800c59c <plug_holes+0x140>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	d102      	bne.n	800c4f8 <plug_holes+0x9c>
      lfree = mem;
 800c4f2:	4a2a      	ldr	r2, [pc, #168]	; (800c59c <plug_holes+0x140>)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	881a      	ldrh	r2, [r3, #0]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c508:	d00a      	beq.n	800c520 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	881b      	ldrh	r3, [r3, #0]
 800c50e:	4618      	mov	r0, r3
 800c510:	f7ff ff80 	bl	800c414 <ptr_to_mem>
 800c514:	4604      	mov	r4, r0
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7ff ff8e 	bl	800c438 <mem_to_ptr>
 800c51c:	4603      	mov	r3, r0
 800c51e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	885b      	ldrh	r3, [r3, #2]
 800c524:	4618      	mov	r0, r3
 800c526:	f7ff ff75 	bl	800c414 <ptr_to_mem>
 800c52a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	429a      	cmp	r2, r3
 800c532:	d01f      	beq.n	800c574 <plug_holes+0x118>
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	791b      	ldrb	r3, [r3, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d11b      	bne.n	800c574 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c53c:	4b17      	ldr	r3, [pc, #92]	; (800c59c <plug_holes+0x140>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	429a      	cmp	r2, r3
 800c544:	d102      	bne.n	800c54c <plug_holes+0xf0>
      lfree = pmem;
 800c546:	4a15      	ldr	r2, [pc, #84]	; (800c59c <plug_holes+0x140>)
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	881a      	ldrh	r2, [r3, #0]
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	881b      	ldrh	r3, [r3, #0]
 800c558:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c55c:	d00a      	beq.n	800c574 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	881b      	ldrh	r3, [r3, #0]
 800c562:	4618      	mov	r0, r3
 800c564:	f7ff ff56 	bl	800c414 <ptr_to_mem>
 800c568:	4604      	mov	r4, r0
 800c56a:	68b8      	ldr	r0, [r7, #8]
 800c56c:	f7ff ff64 	bl	800c438 <mem_to_ptr>
 800c570:	4603      	mov	r3, r0
 800c572:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c574:	bf00      	nop
 800c576:	3714      	adds	r7, #20
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd90      	pop	{r4, r7, pc}
 800c57c:	20010210 	.word	0x20010210
 800c580:	0801b6d4 	.word	0x0801b6d4
 800c584:	0801b704 	.word	0x0801b704
 800c588:	0801b71c 	.word	0x0801b71c
 800c58c:	20010214 	.word	0x20010214
 800c590:	0801b744 	.word	0x0801b744
 800c594:	0801b760 	.word	0x0801b760
 800c598:	0801b77c 	.word	0x0801b77c
 800c59c:	2001021c 	.word	0x2001021c

0800c5a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c5a6:	4b1f      	ldr	r3, [pc, #124]	; (800c624 <mem_init+0x84>)
 800c5a8:	3303      	adds	r3, #3
 800c5aa:	f023 0303 	bic.w	r3, r3, #3
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	4b1d      	ldr	r3, [pc, #116]	; (800c628 <mem_init+0x88>)
 800c5b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c5b4:	4b1c      	ldr	r3, [pc, #112]	; (800c628 <mem_init+0x88>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c5c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c5ce:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c5d2:	f7ff ff1f 	bl	800c414 <ptr_to_mem>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	4b14      	ldr	r3, [pc, #80]	; (800c62c <mem_init+0x8c>)
 800c5da:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800c5dc:	4b13      	ldr	r3, [pc, #76]	; (800c62c <mem_init+0x8c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c5e4:	4b11      	ldr	r3, [pc, #68]	; (800c62c <mem_init+0x8c>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c5ec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c5ee:	4b0f      	ldr	r3, [pc, #60]	; (800c62c <mem_init+0x8c>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c5f6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c5f8:	4b0b      	ldr	r3, [pc, #44]	; (800c628 <mem_init+0x88>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a0c      	ldr	r2, [pc, #48]	; (800c630 <mem_init+0x90>)
 800c5fe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c600:	480c      	ldr	r0, [pc, #48]	; (800c634 <mem_init+0x94>)
 800c602:	f00c fee3 	bl	80193cc <sys_mutex_new>
 800c606:	4603      	mov	r3, r0
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d006      	beq.n	800c61a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c60c:	4b0a      	ldr	r3, [pc, #40]	; (800c638 <mem_init+0x98>)
 800c60e:	f240 221f 	movw	r2, #543	; 0x21f
 800c612:	490a      	ldr	r1, [pc, #40]	; (800c63c <mem_init+0x9c>)
 800c614:	480a      	ldr	r0, [pc, #40]	; (800c640 <mem_init+0xa0>)
 800c616:	f00c ffa9 	bl	801956c <iprintf>
  }
}
 800c61a:	bf00      	nop
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
 800c622:	bf00      	nop
 800c624:	200136f8 	.word	0x200136f8
 800c628:	20010210 	.word	0x20010210
 800c62c:	20010214 	.word	0x20010214
 800c630:	2001021c 	.word	0x2001021c
 800c634:	20010218 	.word	0x20010218
 800c638:	0801b6d4 	.word	0x0801b6d4
 800c63c:	0801b7a8 	.word	0x0801b7a8
 800c640:	0801b71c 	.word	0x0801b71c

0800c644 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b086      	sub	sp, #24
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f7ff fef3 	bl	800c438 <mem_to_ptr>
 800c652:	4603      	mov	r3, r0
 800c654:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	881b      	ldrh	r3, [r3, #0]
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7ff feda 	bl	800c414 <ptr_to_mem>
 800c660:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	885b      	ldrh	r3, [r3, #2]
 800c666:	4618      	mov	r0, r3
 800c668:	f7ff fed4 	bl	800c414 <ptr_to_mem>
 800c66c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	881b      	ldrh	r3, [r3, #0]
 800c672:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c676:	d818      	bhi.n	800c6aa <mem_link_valid+0x66>
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	885b      	ldrh	r3, [r3, #2]
 800c67c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c680:	d813      	bhi.n	800c6aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c686:	8afa      	ldrh	r2, [r7, #22]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d004      	beq.n	800c696 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	881b      	ldrh	r3, [r3, #0]
 800c690:	8afa      	ldrh	r2, [r7, #22]
 800c692:	429a      	cmp	r2, r3
 800c694:	d109      	bne.n	800c6aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c696:	4b08      	ldr	r3, [pc, #32]	; (800c6b8 <mem_link_valid+0x74>)
 800c698:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d006      	beq.n	800c6ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	885b      	ldrh	r3, [r3, #2]
 800c6a4:	8afa      	ldrh	r2, [r7, #22]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d001      	beq.n	800c6ae <mem_link_valid+0x6a>
    return 0;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	e000      	b.n	800c6b0 <mem_link_valid+0x6c>
  }
  return 1;
 800c6ae:	2301      	movs	r3, #1
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3718      	adds	r7, #24
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	20010214 	.word	0x20010214

0800c6bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b088      	sub	sp, #32
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d070      	beq.n	800c7ac <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f003 0303 	and.w	r3, r3, #3
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00d      	beq.n	800c6f0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c6d4:	4b37      	ldr	r3, [pc, #220]	; (800c7b4 <mem_free+0xf8>)
 800c6d6:	f240 2273 	movw	r2, #627	; 0x273
 800c6da:	4937      	ldr	r1, [pc, #220]	; (800c7b8 <mem_free+0xfc>)
 800c6dc:	4837      	ldr	r0, [pc, #220]	; (800c7bc <mem_free+0x100>)
 800c6de:	f00c ff45 	bl	801956c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c6e2:	f00c fec5 	bl	8019470 <sys_arch_protect>
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	68f8      	ldr	r0, [r7, #12]
 800c6ea:	f00c fecf 	bl	801948c <sys_arch_unprotect>
    return;
 800c6ee:	e05e      	b.n	800c7ae <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	3b08      	subs	r3, #8
 800c6f4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c6f6:	4b32      	ldr	r3, [pc, #200]	; (800c7c0 <mem_free+0x104>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	69fa      	ldr	r2, [r7, #28]
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	d306      	bcc.n	800c70e <mem_free+0x52>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f103 020c 	add.w	r2, r3, #12
 800c706:	4b2f      	ldr	r3, [pc, #188]	; (800c7c4 <mem_free+0x108>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d90d      	bls.n	800c72a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c70e:	4b29      	ldr	r3, [pc, #164]	; (800c7b4 <mem_free+0xf8>)
 800c710:	f240 227f 	movw	r2, #639	; 0x27f
 800c714:	492c      	ldr	r1, [pc, #176]	; (800c7c8 <mem_free+0x10c>)
 800c716:	4829      	ldr	r0, [pc, #164]	; (800c7bc <mem_free+0x100>)
 800c718:	f00c ff28 	bl	801956c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c71c:	f00c fea8 	bl	8019470 <sys_arch_protect>
 800c720:	6138      	str	r0, [r7, #16]
 800c722:	6938      	ldr	r0, [r7, #16]
 800c724:	f00c feb2 	bl	801948c <sys_arch_unprotect>
    return;
 800c728:	e041      	b.n	800c7ae <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c72a:	4828      	ldr	r0, [pc, #160]	; (800c7cc <mem_free+0x110>)
 800c72c:	f00c fe64 	bl	80193f8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c730:	69fb      	ldr	r3, [r7, #28]
 800c732:	791b      	ldrb	r3, [r3, #4]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d110      	bne.n	800c75a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c738:	4b1e      	ldr	r3, [pc, #120]	; (800c7b4 <mem_free+0xf8>)
 800c73a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c73e:	4924      	ldr	r1, [pc, #144]	; (800c7d0 <mem_free+0x114>)
 800c740:	481e      	ldr	r0, [pc, #120]	; (800c7bc <mem_free+0x100>)
 800c742:	f00c ff13 	bl	801956c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c746:	4821      	ldr	r0, [pc, #132]	; (800c7cc <mem_free+0x110>)
 800c748:	f00c fe65 	bl	8019416 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c74c:	f00c fe90 	bl	8019470 <sys_arch_protect>
 800c750:	6178      	str	r0, [r7, #20]
 800c752:	6978      	ldr	r0, [r7, #20]
 800c754:	f00c fe9a 	bl	801948c <sys_arch_unprotect>
    return;
 800c758:	e029      	b.n	800c7ae <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c75a:	69f8      	ldr	r0, [r7, #28]
 800c75c:	f7ff ff72 	bl	800c644 <mem_link_valid>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d110      	bne.n	800c788 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c766:	4b13      	ldr	r3, [pc, #76]	; (800c7b4 <mem_free+0xf8>)
 800c768:	f240 2295 	movw	r2, #661	; 0x295
 800c76c:	4919      	ldr	r1, [pc, #100]	; (800c7d4 <mem_free+0x118>)
 800c76e:	4813      	ldr	r0, [pc, #76]	; (800c7bc <mem_free+0x100>)
 800c770:	f00c fefc 	bl	801956c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c774:	4815      	ldr	r0, [pc, #84]	; (800c7cc <mem_free+0x110>)
 800c776:	f00c fe4e 	bl	8019416 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c77a:	f00c fe79 	bl	8019470 <sys_arch_protect>
 800c77e:	61b8      	str	r0, [r7, #24]
 800c780:	69b8      	ldr	r0, [r7, #24]
 800c782:	f00c fe83 	bl	801948c <sys_arch_unprotect>
    return;
 800c786:	e012      	b.n	800c7ae <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	2200      	movs	r2, #0
 800c78c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c78e:	4b12      	ldr	r3, [pc, #72]	; (800c7d8 <mem_free+0x11c>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	69fa      	ldr	r2, [r7, #28]
 800c794:	429a      	cmp	r2, r3
 800c796:	d202      	bcs.n	800c79e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c798:	4a0f      	ldr	r2, [pc, #60]	; (800c7d8 <mem_free+0x11c>)
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c79e:	69f8      	ldr	r0, [r7, #28]
 800c7a0:	f7ff fe5c 	bl	800c45c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c7a4:	4809      	ldr	r0, [pc, #36]	; (800c7cc <mem_free+0x110>)
 800c7a6:	f00c fe36 	bl	8019416 <sys_mutex_unlock>
 800c7aa:	e000      	b.n	800c7ae <mem_free+0xf2>
    return;
 800c7ac:	bf00      	nop
}
 800c7ae:	3720      	adds	r7, #32
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	0801b6d4 	.word	0x0801b6d4
 800c7b8:	0801b7c4 	.word	0x0801b7c4
 800c7bc:	0801b71c 	.word	0x0801b71c
 800c7c0:	20010210 	.word	0x20010210
 800c7c4:	20010214 	.word	0x20010214
 800c7c8:	0801b7e8 	.word	0x0801b7e8
 800c7cc:	20010218 	.word	0x20010218
 800c7d0:	0801b804 	.word	0x0801b804
 800c7d4:	0801b82c 	.word	0x0801b82c
 800c7d8:	2001021c 	.word	0x2001021c

0800c7dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b088      	sub	sp, #32
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c7e8:	887b      	ldrh	r3, [r7, #2]
 800c7ea:	3303      	adds	r3, #3
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	f023 0303 	bic.w	r3, r3, #3
 800c7f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c7f4:	8bfb      	ldrh	r3, [r7, #30]
 800c7f6:	2b0b      	cmp	r3, #11
 800c7f8:	d801      	bhi.n	800c7fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c7fa:	230c      	movs	r3, #12
 800c7fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c7fe:	8bfb      	ldrh	r3, [r7, #30]
 800c800:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c804:	d803      	bhi.n	800c80e <mem_trim+0x32>
 800c806:	8bfa      	ldrh	r2, [r7, #30]
 800c808:	887b      	ldrh	r3, [r7, #2]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d201      	bcs.n	800c812 <mem_trim+0x36>
    return NULL;
 800c80e:	2300      	movs	r3, #0
 800c810:	e0d8      	b.n	800c9c4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c812:	4b6e      	ldr	r3, [pc, #440]	; (800c9cc <mem_trim+0x1f0>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	429a      	cmp	r2, r3
 800c81a:	d304      	bcc.n	800c826 <mem_trim+0x4a>
 800c81c:	4b6c      	ldr	r3, [pc, #432]	; (800c9d0 <mem_trim+0x1f4>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	429a      	cmp	r2, r3
 800c824:	d306      	bcc.n	800c834 <mem_trim+0x58>
 800c826:	4b6b      	ldr	r3, [pc, #428]	; (800c9d4 <mem_trim+0x1f8>)
 800c828:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c82c:	496a      	ldr	r1, [pc, #424]	; (800c9d8 <mem_trim+0x1fc>)
 800c82e:	486b      	ldr	r0, [pc, #428]	; (800c9dc <mem_trim+0x200>)
 800c830:	f00c fe9c 	bl	801956c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c834:	4b65      	ldr	r3, [pc, #404]	; (800c9cc <mem_trim+0x1f0>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d304      	bcc.n	800c848 <mem_trim+0x6c>
 800c83e:	4b64      	ldr	r3, [pc, #400]	; (800c9d0 <mem_trim+0x1f4>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	687a      	ldr	r2, [r7, #4]
 800c844:	429a      	cmp	r2, r3
 800c846:	d307      	bcc.n	800c858 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c848:	f00c fe12 	bl	8019470 <sys_arch_protect>
 800c84c:	60b8      	str	r0, [r7, #8]
 800c84e:	68b8      	ldr	r0, [r7, #8]
 800c850:	f00c fe1c 	bl	801948c <sys_arch_unprotect>
    return rmem;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	e0b5      	b.n	800c9c4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	3b08      	subs	r3, #8
 800c85c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c85e:	69b8      	ldr	r0, [r7, #24]
 800c860:	f7ff fdea 	bl	800c438 <mem_to_ptr>
 800c864:	4603      	mov	r3, r0
 800c866:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	881a      	ldrh	r2, [r3, #0]
 800c86c:	8afb      	ldrh	r3, [r7, #22]
 800c86e:	1ad3      	subs	r3, r2, r3
 800c870:	b29b      	uxth	r3, r3
 800c872:	3b08      	subs	r3, #8
 800c874:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c876:	8bfa      	ldrh	r2, [r7, #30]
 800c878:	8abb      	ldrh	r3, [r7, #20]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d906      	bls.n	800c88c <mem_trim+0xb0>
 800c87e:	4b55      	ldr	r3, [pc, #340]	; (800c9d4 <mem_trim+0x1f8>)
 800c880:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c884:	4956      	ldr	r1, [pc, #344]	; (800c9e0 <mem_trim+0x204>)
 800c886:	4855      	ldr	r0, [pc, #340]	; (800c9dc <mem_trim+0x200>)
 800c888:	f00c fe70 	bl	801956c <iprintf>
  if (newsize > size) {
 800c88c:	8bfa      	ldrh	r2, [r7, #30]
 800c88e:	8abb      	ldrh	r3, [r7, #20]
 800c890:	429a      	cmp	r2, r3
 800c892:	d901      	bls.n	800c898 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c894:	2300      	movs	r3, #0
 800c896:	e095      	b.n	800c9c4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c898:	8bfa      	ldrh	r2, [r7, #30]
 800c89a:	8abb      	ldrh	r3, [r7, #20]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d101      	bne.n	800c8a4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	e08f      	b.n	800c9c4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c8a4:	484f      	ldr	r0, [pc, #316]	; (800c9e4 <mem_trim+0x208>)
 800c8a6:	f00c fda7 	bl	80193f8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c8aa:	69bb      	ldr	r3, [r7, #24]
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7ff fdb0 	bl	800c414 <ptr_to_mem>
 800c8b4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	791b      	ldrb	r3, [r3, #4]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d13f      	bne.n	800c93e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	881b      	ldrh	r3, [r3, #0]
 800c8c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8c6:	d106      	bne.n	800c8d6 <mem_trim+0xfa>
 800c8c8:	4b42      	ldr	r3, [pc, #264]	; (800c9d4 <mem_trim+0x1f8>)
 800c8ca:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c8ce:	4946      	ldr	r1, [pc, #280]	; (800c9e8 <mem_trim+0x20c>)
 800c8d0:	4842      	ldr	r0, [pc, #264]	; (800c9dc <mem_trim+0x200>)
 800c8d2:	f00c fe4b 	bl	801956c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	881b      	ldrh	r3, [r3, #0]
 800c8da:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c8dc:	8afa      	ldrh	r2, [r7, #22]
 800c8de:	8bfb      	ldrh	r3, [r7, #30]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	3308      	adds	r3, #8
 800c8e6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c8e8:	4b40      	ldr	r3, [pc, #256]	; (800c9ec <mem_trim+0x210>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	693a      	ldr	r2, [r7, #16]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d106      	bne.n	800c900 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c8f2:	89fb      	ldrh	r3, [r7, #14]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f7ff fd8d 	bl	800c414 <ptr_to_mem>
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	4b3b      	ldr	r3, [pc, #236]	; (800c9ec <mem_trim+0x210>)
 800c8fe:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c900:	89fb      	ldrh	r3, [r7, #14]
 800c902:	4618      	mov	r0, r3
 800c904:	f7ff fd86 	bl	800c414 <ptr_to_mem>
 800c908:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	2200      	movs	r2, #0
 800c90e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	89ba      	ldrh	r2, [r7, #12]
 800c914:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	8afa      	ldrh	r2, [r7, #22]
 800c91a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	89fa      	ldrh	r2, [r7, #14]
 800c920:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	881b      	ldrh	r3, [r3, #0]
 800c926:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c92a:	d047      	beq.n	800c9bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	4618      	mov	r0, r3
 800c932:	f7ff fd6f 	bl	800c414 <ptr_to_mem>
 800c936:	4602      	mov	r2, r0
 800c938:	89fb      	ldrh	r3, [r7, #14]
 800c93a:	8053      	strh	r3, [r2, #2]
 800c93c:	e03e      	b.n	800c9bc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c93e:	8bfb      	ldrh	r3, [r7, #30]
 800c940:	f103 0214 	add.w	r2, r3, #20
 800c944:	8abb      	ldrh	r3, [r7, #20]
 800c946:	429a      	cmp	r2, r3
 800c948:	d838      	bhi.n	800c9bc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c94a:	8afa      	ldrh	r2, [r7, #22]
 800c94c:	8bfb      	ldrh	r3, [r7, #30]
 800c94e:	4413      	add	r3, r2
 800c950:	b29b      	uxth	r3, r3
 800c952:	3308      	adds	r3, #8
 800c954:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c956:	69bb      	ldr	r3, [r7, #24]
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c95e:	d106      	bne.n	800c96e <mem_trim+0x192>
 800c960:	4b1c      	ldr	r3, [pc, #112]	; (800c9d4 <mem_trim+0x1f8>)
 800c962:	f240 3216 	movw	r2, #790	; 0x316
 800c966:	4920      	ldr	r1, [pc, #128]	; (800c9e8 <mem_trim+0x20c>)
 800c968:	481c      	ldr	r0, [pc, #112]	; (800c9dc <mem_trim+0x200>)
 800c96a:	f00c fdff 	bl	801956c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c96e:	89fb      	ldrh	r3, [r7, #14]
 800c970:	4618      	mov	r0, r3
 800c972:	f7ff fd4f 	bl	800c414 <ptr_to_mem>
 800c976:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c978:	4b1c      	ldr	r3, [pc, #112]	; (800c9ec <mem_trim+0x210>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	693a      	ldr	r2, [r7, #16]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d202      	bcs.n	800c988 <mem_trim+0x1ac>
      lfree = mem2;
 800c982:	4a1a      	ldr	r2, [pc, #104]	; (800c9ec <mem_trim+0x210>)
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	2200      	movs	r2, #0
 800c98c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	881a      	ldrh	r2, [r3, #0]
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	8afa      	ldrh	r2, [r7, #22]
 800c99a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	89fa      	ldrh	r2, [r7, #14]
 800c9a0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	881b      	ldrh	r3, [r3, #0]
 800c9a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c9aa:	d007      	beq.n	800c9bc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	881b      	ldrh	r3, [r3, #0]
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7ff fd2f 	bl	800c414 <ptr_to_mem>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	89fb      	ldrh	r3, [r7, #14]
 800c9ba:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c9bc:	4809      	ldr	r0, [pc, #36]	; (800c9e4 <mem_trim+0x208>)
 800c9be:	f00c fd2a 	bl	8019416 <sys_mutex_unlock>
  return rmem;
 800c9c2:	687b      	ldr	r3, [r7, #4]
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3720      	adds	r7, #32
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	20010210 	.word	0x20010210
 800c9d0:	20010214 	.word	0x20010214
 800c9d4:	0801b6d4 	.word	0x0801b6d4
 800c9d8:	0801b860 	.word	0x0801b860
 800c9dc:	0801b71c 	.word	0x0801b71c
 800c9e0:	0801b878 	.word	0x0801b878
 800c9e4:	20010218 	.word	0x20010218
 800c9e8:	0801b898 	.word	0x0801b898
 800c9ec:	2001021c 	.word	0x2001021c

0800c9f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b088      	sub	sp, #32
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c9fa:	88fb      	ldrh	r3, [r7, #6]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d101      	bne.n	800ca04 <mem_malloc+0x14>
    return NULL;
 800ca00:	2300      	movs	r3, #0
 800ca02:	e0e2      	b.n	800cbca <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ca04:	88fb      	ldrh	r3, [r7, #6]
 800ca06:	3303      	adds	r3, #3
 800ca08:	b29b      	uxth	r3, r3
 800ca0a:	f023 0303 	bic.w	r3, r3, #3
 800ca0e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ca10:	8bbb      	ldrh	r3, [r7, #28]
 800ca12:	2b0b      	cmp	r3, #11
 800ca14:	d801      	bhi.n	800ca1a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ca16:	230c      	movs	r3, #12
 800ca18:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ca1a:	8bbb      	ldrh	r3, [r7, #28]
 800ca1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca20:	d803      	bhi.n	800ca2a <mem_malloc+0x3a>
 800ca22:	8bba      	ldrh	r2, [r7, #28]
 800ca24:	88fb      	ldrh	r3, [r7, #6]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d201      	bcs.n	800ca2e <mem_malloc+0x3e>
    return NULL;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	e0cd      	b.n	800cbca <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ca2e:	4869      	ldr	r0, [pc, #420]	; (800cbd4 <mem_malloc+0x1e4>)
 800ca30:	f00c fce2 	bl	80193f8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ca34:	4b68      	ldr	r3, [pc, #416]	; (800cbd8 <mem_malloc+0x1e8>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7ff fcfd 	bl	800c438 <mem_to_ptr>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	83fb      	strh	r3, [r7, #30]
 800ca42:	e0b7      	b.n	800cbb4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ca44:	8bfb      	ldrh	r3, [r7, #30]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7ff fce4 	bl	800c414 <ptr_to_mem>
 800ca4c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	791b      	ldrb	r3, [r3, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f040 80a7 	bne.w	800cba6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	881b      	ldrh	r3, [r3, #0]
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	8bfb      	ldrh	r3, [r7, #30]
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	f1a3 0208 	sub.w	r2, r3, #8
 800ca66:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	f0c0 809c 	bcc.w	800cba6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	881b      	ldrh	r3, [r3, #0]
 800ca72:	461a      	mov	r2, r3
 800ca74:	8bfb      	ldrh	r3, [r7, #30]
 800ca76:	1ad3      	subs	r3, r2, r3
 800ca78:	f1a3 0208 	sub.w	r2, r3, #8
 800ca7c:	8bbb      	ldrh	r3, [r7, #28]
 800ca7e:	3314      	adds	r3, #20
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d333      	bcc.n	800caec <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ca84:	8bfa      	ldrh	r2, [r7, #30]
 800ca86:	8bbb      	ldrh	r3, [r7, #28]
 800ca88:	4413      	add	r3, r2
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	3308      	adds	r3, #8
 800ca8e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ca90:	8a7b      	ldrh	r3, [r7, #18]
 800ca92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca96:	d106      	bne.n	800caa6 <mem_malloc+0xb6>
 800ca98:	4b50      	ldr	r3, [pc, #320]	; (800cbdc <mem_malloc+0x1ec>)
 800ca9a:	f240 3287 	movw	r2, #903	; 0x387
 800ca9e:	4950      	ldr	r1, [pc, #320]	; (800cbe0 <mem_malloc+0x1f0>)
 800caa0:	4850      	ldr	r0, [pc, #320]	; (800cbe4 <mem_malloc+0x1f4>)
 800caa2:	f00c fd63 	bl	801956c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800caa6:	8a7b      	ldrh	r3, [r7, #18]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7ff fcb3 	bl	800c414 <ptr_to_mem>
 800caae:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2200      	movs	r2, #0
 800cab4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	881a      	ldrh	r2, [r3, #0]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	8bfa      	ldrh	r2, [r7, #30]
 800cac2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	8a7a      	ldrh	r2, [r7, #18]
 800cac8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	2201      	movs	r2, #1
 800cace:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	881b      	ldrh	r3, [r3, #0]
 800cad4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cad8:	d00b      	beq.n	800caf2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	881b      	ldrh	r3, [r3, #0]
 800cade:	4618      	mov	r0, r3
 800cae0:	f7ff fc98 	bl	800c414 <ptr_to_mem>
 800cae4:	4602      	mov	r2, r0
 800cae6:	8a7b      	ldrh	r3, [r7, #18]
 800cae8:	8053      	strh	r3, [r2, #2]
 800caea:	e002      	b.n	800caf2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	2201      	movs	r2, #1
 800caf0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800caf2:	4b39      	ldr	r3, [pc, #228]	; (800cbd8 <mem_malloc+0x1e8>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	697a      	ldr	r2, [r7, #20]
 800caf8:	429a      	cmp	r2, r3
 800cafa:	d127      	bne.n	800cb4c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cafc:	4b36      	ldr	r3, [pc, #216]	; (800cbd8 <mem_malloc+0x1e8>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cb02:	e005      	b.n	800cb10 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	881b      	ldrh	r3, [r3, #0]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7ff fc83 	bl	800c414 <ptr_to_mem>
 800cb0e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cb10:	69bb      	ldr	r3, [r7, #24]
 800cb12:	791b      	ldrb	r3, [r3, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d004      	beq.n	800cb22 <mem_malloc+0x132>
 800cb18:	4b33      	ldr	r3, [pc, #204]	; (800cbe8 <mem_malloc+0x1f8>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	69ba      	ldr	r2, [r7, #24]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d1f0      	bne.n	800cb04 <mem_malloc+0x114>
          }
          lfree = cur;
 800cb22:	4a2d      	ldr	r2, [pc, #180]	; (800cbd8 <mem_malloc+0x1e8>)
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cb28:	4b2b      	ldr	r3, [pc, #172]	; (800cbd8 <mem_malloc+0x1e8>)
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	4b2e      	ldr	r3, [pc, #184]	; (800cbe8 <mem_malloc+0x1f8>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d00b      	beq.n	800cb4c <mem_malloc+0x15c>
 800cb34:	4b28      	ldr	r3, [pc, #160]	; (800cbd8 <mem_malloc+0x1e8>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	791b      	ldrb	r3, [r3, #4]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d006      	beq.n	800cb4c <mem_malloc+0x15c>
 800cb3e:	4b27      	ldr	r3, [pc, #156]	; (800cbdc <mem_malloc+0x1ec>)
 800cb40:	f240 32b5 	movw	r2, #949	; 0x3b5
 800cb44:	4929      	ldr	r1, [pc, #164]	; (800cbec <mem_malloc+0x1fc>)
 800cb46:	4827      	ldr	r0, [pc, #156]	; (800cbe4 <mem_malloc+0x1f4>)
 800cb48:	f00c fd10 	bl	801956c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cb4c:	4821      	ldr	r0, [pc, #132]	; (800cbd4 <mem_malloc+0x1e4>)
 800cb4e:	f00c fc62 	bl	8019416 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cb52:	8bba      	ldrh	r2, [r7, #28]
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	4413      	add	r3, r2
 800cb58:	3308      	adds	r3, #8
 800cb5a:	4a23      	ldr	r2, [pc, #140]	; (800cbe8 <mem_malloc+0x1f8>)
 800cb5c:	6812      	ldr	r2, [r2, #0]
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d906      	bls.n	800cb70 <mem_malloc+0x180>
 800cb62:	4b1e      	ldr	r3, [pc, #120]	; (800cbdc <mem_malloc+0x1ec>)
 800cb64:	f240 32ba 	movw	r2, #954	; 0x3ba
 800cb68:	4921      	ldr	r1, [pc, #132]	; (800cbf0 <mem_malloc+0x200>)
 800cb6a:	481e      	ldr	r0, [pc, #120]	; (800cbe4 <mem_malloc+0x1f4>)
 800cb6c:	f00c fcfe 	bl	801956c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	f003 0303 	and.w	r3, r3, #3
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d006      	beq.n	800cb88 <mem_malloc+0x198>
 800cb7a:	4b18      	ldr	r3, [pc, #96]	; (800cbdc <mem_malloc+0x1ec>)
 800cb7c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800cb80:	491c      	ldr	r1, [pc, #112]	; (800cbf4 <mem_malloc+0x204>)
 800cb82:	4818      	ldr	r0, [pc, #96]	; (800cbe4 <mem_malloc+0x1f4>)
 800cb84:	f00c fcf2 	bl	801956c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	f003 0303 	and.w	r3, r3, #3
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d006      	beq.n	800cba0 <mem_malloc+0x1b0>
 800cb92:	4b12      	ldr	r3, [pc, #72]	; (800cbdc <mem_malloc+0x1ec>)
 800cb94:	f240 32be 	movw	r2, #958	; 0x3be
 800cb98:	4917      	ldr	r1, [pc, #92]	; (800cbf8 <mem_malloc+0x208>)
 800cb9a:	4812      	ldr	r0, [pc, #72]	; (800cbe4 <mem_malloc+0x1f4>)
 800cb9c:	f00c fce6 	bl	801956c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	3308      	adds	r3, #8
 800cba4:	e011      	b.n	800cbca <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800cba6:	8bfb      	ldrh	r3, [r7, #30]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7ff fc33 	bl	800c414 <ptr_to_mem>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	881b      	ldrh	r3, [r3, #0]
 800cbb2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cbb4:	8bfa      	ldrh	r2, [r7, #30]
 800cbb6:	8bbb      	ldrh	r3, [r7, #28]
 800cbb8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	f4ff af41 	bcc.w	800ca44 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cbc2:	4804      	ldr	r0, [pc, #16]	; (800cbd4 <mem_malloc+0x1e4>)
 800cbc4:	f00c fc27 	bl	8019416 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3720      	adds	r7, #32
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	20010218 	.word	0x20010218
 800cbd8:	2001021c 	.word	0x2001021c
 800cbdc:	0801b6d4 	.word	0x0801b6d4
 800cbe0:	0801b898 	.word	0x0801b898
 800cbe4:	0801b71c 	.word	0x0801b71c
 800cbe8:	20010214 	.word	0x20010214
 800cbec:	0801b8ac 	.word	0x0801b8ac
 800cbf0:	0801b8c8 	.word	0x0801b8c8
 800cbf4:	0801b8f8 	.word	0x0801b8f8
 800cbf8:	0801b928 	.word	0x0801b928

0800cbfc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	3303      	adds	r3, #3
 800cc12:	f023 0303 	bic.w	r3, r3, #3
 800cc16:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cc18:	2300      	movs	r3, #0
 800cc1a:	60fb      	str	r3, [r7, #12]
 800cc1c:	e011      	b.n	800cc42 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	68ba      	ldr	r2, [r7, #8]
 800cc2e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	881b      	ldrh	r3, [r3, #0]
 800cc34:	461a      	mov	r2, r3
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	4413      	add	r3, r2
 800cc3a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	60fb      	str	r3, [r7, #12]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	885b      	ldrh	r3, [r3, #2]
 800cc46:	461a      	mov	r2, r3
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	dbe7      	blt.n	800cc1e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cc4e:	bf00      	nop
 800cc50:	3714      	adds	r7, #20
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr
	...

0800cc5c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b082      	sub	sp, #8
 800cc60:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cc62:	2300      	movs	r3, #0
 800cc64:	80fb      	strh	r3, [r7, #6]
 800cc66:	e009      	b.n	800cc7c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cc68:	88fb      	ldrh	r3, [r7, #6]
 800cc6a:	4a08      	ldr	r2, [pc, #32]	; (800cc8c <memp_init+0x30>)
 800cc6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7ff ffc3 	bl	800cbfc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cc76:	88fb      	ldrh	r3, [r7, #6]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	80fb      	strh	r3, [r7, #6]
 800cc7c:	88fb      	ldrh	r3, [r7, #6]
 800cc7e:	2b0c      	cmp	r3, #12
 800cc80:	d9f2      	bls.n	800cc68 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cc82:	bf00      	nop
 800cc84:	3708      	adds	r7, #8
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	08022fec 	.word	0x08022fec

0800cc90 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cc98:	f00c fbea 	bl	8019470 <sys_arch_protect>
 800cc9c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d015      	beq.n	800ccd8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	68ba      	ldr	r2, [r7, #8]
 800ccb2:	6812      	ldr	r2, [r2, #0]
 800ccb4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	f003 0303 	and.w	r3, r3, #3
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d006      	beq.n	800ccce <do_memp_malloc_pool+0x3e>
 800ccc0:	4b09      	ldr	r3, [pc, #36]	; (800cce8 <do_memp_malloc_pool+0x58>)
 800ccc2:	f240 1219 	movw	r2, #281	; 0x119
 800ccc6:	4909      	ldr	r1, [pc, #36]	; (800ccec <do_memp_malloc_pool+0x5c>)
 800ccc8:	4809      	ldr	r0, [pc, #36]	; (800ccf0 <do_memp_malloc_pool+0x60>)
 800ccca:	f00c fc4f 	bl	801956c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ccce:	68f8      	ldr	r0, [r7, #12]
 800ccd0:	f00c fbdc 	bl	801948c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	e003      	b.n	800cce0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ccd8:	68f8      	ldr	r0, [r7, #12]
 800ccda:	f00c fbd7 	bl	801948c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ccde:	2300      	movs	r3, #0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3710      	adds	r7, #16
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	0801b94c 	.word	0x0801b94c
 800ccec:	0801b97c 	.word	0x0801b97c
 800ccf0:	0801b9a0 	.word	0x0801b9a0

0800ccf4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ccfe:	79fb      	ldrb	r3, [r7, #7]
 800cd00:	2b0c      	cmp	r3, #12
 800cd02:	d908      	bls.n	800cd16 <memp_malloc+0x22>
 800cd04:	4b0a      	ldr	r3, [pc, #40]	; (800cd30 <memp_malloc+0x3c>)
 800cd06:	f240 1257 	movw	r2, #343	; 0x157
 800cd0a:	490a      	ldr	r1, [pc, #40]	; (800cd34 <memp_malloc+0x40>)
 800cd0c:	480a      	ldr	r0, [pc, #40]	; (800cd38 <memp_malloc+0x44>)
 800cd0e:	f00c fc2d 	bl	801956c <iprintf>
 800cd12:	2300      	movs	r3, #0
 800cd14:	e008      	b.n	800cd28 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cd16:	79fb      	ldrb	r3, [r7, #7]
 800cd18:	4a08      	ldr	r2, [pc, #32]	; (800cd3c <memp_malloc+0x48>)
 800cd1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7ff ffb6 	bl	800cc90 <do_memp_malloc_pool>
 800cd24:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cd26:	68fb      	ldr	r3, [r7, #12]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3710      	adds	r7, #16
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}
 800cd30:	0801b94c 	.word	0x0801b94c
 800cd34:	0801b9dc 	.word	0x0801b9dc
 800cd38:	0801b9a0 	.word	0x0801b9a0
 800cd3c:	08022fec 	.word	0x08022fec

0800cd40 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
 800cd48:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	f003 0303 	and.w	r3, r3, #3
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d006      	beq.n	800cd62 <do_memp_free_pool+0x22>
 800cd54:	4b0d      	ldr	r3, [pc, #52]	; (800cd8c <do_memp_free_pool+0x4c>)
 800cd56:	f240 126d 	movw	r2, #365	; 0x16d
 800cd5a:	490d      	ldr	r1, [pc, #52]	; (800cd90 <do_memp_free_pool+0x50>)
 800cd5c:	480d      	ldr	r0, [pc, #52]	; (800cd94 <do_memp_free_pool+0x54>)
 800cd5e:	f00c fc05 	bl	801956c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cd66:	f00c fb83 	bl	8019470 <sys_arch_protect>
 800cd6a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800cd7e:	68b8      	ldr	r0, [r7, #8]
 800cd80:	f00c fb84 	bl	801948c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800cd84:	bf00      	nop
 800cd86:	3710      	adds	r7, #16
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	0801b94c 	.word	0x0801b94c
 800cd90:	0801b9fc 	.word	0x0801b9fc
 800cd94:	0801b9a0 	.word	0x0801b9a0

0800cd98 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	6039      	str	r1, [r7, #0]
 800cda2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cda4:	79fb      	ldrb	r3, [r7, #7]
 800cda6:	2b0c      	cmp	r3, #12
 800cda8:	d907      	bls.n	800cdba <memp_free+0x22>
 800cdaa:	4b0c      	ldr	r3, [pc, #48]	; (800cddc <memp_free+0x44>)
 800cdac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cdb0:	490b      	ldr	r1, [pc, #44]	; (800cde0 <memp_free+0x48>)
 800cdb2:	480c      	ldr	r0, [pc, #48]	; (800cde4 <memp_free+0x4c>)
 800cdb4:	f00c fbda 	bl	801956c <iprintf>
 800cdb8:	e00c      	b.n	800cdd4 <memp_free+0x3c>

  if (mem == NULL) {
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d008      	beq.n	800cdd2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cdc0:	79fb      	ldrb	r3, [r7, #7]
 800cdc2:	4a09      	ldr	r2, [pc, #36]	; (800cde8 <memp_free+0x50>)
 800cdc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdc8:	6839      	ldr	r1, [r7, #0]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7ff ffb8 	bl	800cd40 <do_memp_free_pool>
 800cdd0:	e000      	b.n	800cdd4 <memp_free+0x3c>
    return;
 800cdd2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	0801b94c 	.word	0x0801b94c
 800cde0:	0801ba1c 	.word	0x0801ba1c
 800cde4:	0801b9a0 	.word	0x0801b9a0
 800cde8:	08022fec 	.word	0x08022fec

0800cdec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cdec:	b480      	push	{r7}
 800cdee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cdf0:	bf00      	nop
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf8:	4770      	bx	lr
	...

0800cdfc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
 800ce08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d108      	bne.n	800ce22 <netif_add+0x26>
 800ce10:	4b5b      	ldr	r3, [pc, #364]	; (800cf80 <netif_add+0x184>)
 800ce12:	f240 1227 	movw	r2, #295	; 0x127
 800ce16:	495b      	ldr	r1, [pc, #364]	; (800cf84 <netif_add+0x188>)
 800ce18:	485b      	ldr	r0, [pc, #364]	; (800cf88 <netif_add+0x18c>)
 800ce1a:	f00c fba7 	bl	801956c <iprintf>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	e0a9      	b.n	800cf76 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ce22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d108      	bne.n	800ce3a <netif_add+0x3e>
 800ce28:	4b55      	ldr	r3, [pc, #340]	; (800cf80 <netif_add+0x184>)
 800ce2a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ce2e:	4957      	ldr	r1, [pc, #348]	; (800cf8c <netif_add+0x190>)
 800ce30:	4855      	ldr	r0, [pc, #340]	; (800cf88 <netif_add+0x18c>)
 800ce32:	f00c fb9b 	bl	801956c <iprintf>
 800ce36:	2300      	movs	r3, #0
 800ce38:	e09d      	b.n	800cf76 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d101      	bne.n	800ce44 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ce40:	4b53      	ldr	r3, [pc, #332]	; (800cf90 <netif_add+0x194>)
 800ce42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d101      	bne.n	800ce4e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ce4a:	4b51      	ldr	r3, [pc, #324]	; (800cf90 <netif_add+0x194>)
 800ce4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d101      	bne.n	800ce58 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ce54:	4b4e      	ldr	r3, [pc, #312]	; (800cf90 <netif_add+0x194>)
 800ce56:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2200      	movs	r2, #0
 800ce62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	4a49      	ldr	r2, [pc, #292]	; (800cf94 <netif_add+0x198>)
 800ce6e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2200      	movs	r2, #0
 800ce74:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	3324      	adds	r3, #36	; 0x24
 800ce82:	2204      	movs	r2, #4
 800ce84:	2100      	movs	r1, #0
 800ce86:	4618      	mov	r0, r3
 800ce88:	f00c fb67 	bl	801955a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2200      	movs	r2, #0
 800ce90:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	6a3a      	ldr	r2, [r7, #32]
 800ce96:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ce98:	4b3f      	ldr	r3, [pc, #252]	; (800cf98 <netif_add+0x19c>)
 800ce9a:	781a      	ldrb	r2, [r3, #0]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cea6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	68b9      	ldr	r1, [r7, #8]
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f000 f914 	bl	800d0dc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	4798      	blx	r3
 800ceba:	4603      	mov	r3, r0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d001      	beq.n	800cec4 <netif_add+0xc8>
    return NULL;
 800cec0:	2300      	movs	r3, #0
 800cec2:	e058      	b.n	800cf76 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ceca:	2bff      	cmp	r3, #255	; 0xff
 800cecc:	d103      	bne.n	800ced6 <netif_add+0xda>
        netif->num = 0;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	2200      	movs	r2, #0
 800ced2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800ced6:	2300      	movs	r3, #0
 800ced8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ceda:	4b30      	ldr	r3, [pc, #192]	; (800cf9c <netif_add+0x1a0>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	617b      	str	r3, [r7, #20]
 800cee0:	e02b      	b.n	800cf3a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cee2:	697a      	ldr	r2, [r7, #20]
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	429a      	cmp	r2, r3
 800cee8:	d106      	bne.n	800cef8 <netif_add+0xfc>
 800ceea:	4b25      	ldr	r3, [pc, #148]	; (800cf80 <netif_add+0x184>)
 800ceec:	f240 128b 	movw	r2, #395	; 0x18b
 800cef0:	492b      	ldr	r1, [pc, #172]	; (800cfa0 <netif_add+0x1a4>)
 800cef2:	4825      	ldr	r0, [pc, #148]	; (800cf88 <netif_add+0x18c>)
 800cef4:	f00c fb3a 	bl	801956c <iprintf>
        num_netifs++;
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	3301      	adds	r3, #1
 800cefc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	2bff      	cmp	r3, #255	; 0xff
 800cf02:	dd06      	ble.n	800cf12 <netif_add+0x116>
 800cf04:	4b1e      	ldr	r3, [pc, #120]	; (800cf80 <netif_add+0x184>)
 800cf06:	f240 128d 	movw	r2, #397	; 0x18d
 800cf0a:	4926      	ldr	r1, [pc, #152]	; (800cfa4 <netif_add+0x1a8>)
 800cf0c:	481e      	ldr	r0, [pc, #120]	; (800cf88 <netif_add+0x18c>)
 800cf0e:	f00c fb2d 	bl	801956c <iprintf>
        if (netif2->num == netif->num) {
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d108      	bne.n	800cf34 <netif_add+0x138>
          netif->num++;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf28:	3301      	adds	r3, #1
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800cf32:	e005      	b.n	800cf40 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	617b      	str	r3, [r7, #20]
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1d0      	bne.n	800cee2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1be      	bne.n	800cec4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf4c:	2bfe      	cmp	r3, #254	; 0xfe
 800cf4e:	d103      	bne.n	800cf58 <netif_add+0x15c>
    netif_num = 0;
 800cf50:	4b11      	ldr	r3, [pc, #68]	; (800cf98 <netif_add+0x19c>)
 800cf52:	2200      	movs	r2, #0
 800cf54:	701a      	strb	r2, [r3, #0]
 800cf56:	e006      	b.n	800cf66 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf5e:	3301      	adds	r3, #1
 800cf60:	b2da      	uxtb	r2, r3
 800cf62:	4b0d      	ldr	r3, [pc, #52]	; (800cf98 <netif_add+0x19c>)
 800cf64:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cf66:	4b0d      	ldr	r3, [pc, #52]	; (800cf9c <netif_add+0x1a0>)
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cf6e:	4a0b      	ldr	r2, [pc, #44]	; (800cf9c <netif_add+0x1a0>)
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cf74:	68fb      	ldr	r3, [r7, #12]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3718      	adds	r7, #24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	0801ba38 	.word	0x0801ba38
 800cf84:	0801bacc 	.word	0x0801bacc
 800cf88:	0801ba88 	.word	0x0801ba88
 800cf8c:	0801bae8 	.word	0x0801bae8
 800cf90:	08023070 	.word	0x08023070
 800cf94:	0800d3bf 	.word	0x0800d3bf
 800cf98:	20010254 	.word	0x20010254
 800cf9c:	20016e04 	.word	0x20016e04
 800cfa0:	0801bb0c 	.word	0x0801bb0c
 800cfa4:	0801bb20 	.word	0x0801bb20

0800cfa8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cfb2:	6839      	ldr	r1, [r7, #0]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f002 fe81 	bl	800fcbc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cfba:	6839      	ldr	r1, [r7, #0]
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f007 ff05 	bl	8014dcc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cfc2:	bf00      	nop
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
	...

0800cfcc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b086      	sub	sp, #24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cfd8:	68bb      	ldr	r3, [r7, #8]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d106      	bne.n	800cfec <netif_do_set_ipaddr+0x20>
 800cfde:	4b1d      	ldr	r3, [pc, #116]	; (800d054 <netif_do_set_ipaddr+0x88>)
 800cfe0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cfe4:	491c      	ldr	r1, [pc, #112]	; (800d058 <netif_do_set_ipaddr+0x8c>)
 800cfe6:	481d      	ldr	r0, [pc, #116]	; (800d05c <netif_do_set_ipaddr+0x90>)
 800cfe8:	f00c fac0 	bl	801956c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d106      	bne.n	800d000 <netif_do_set_ipaddr+0x34>
 800cff2:	4b18      	ldr	r3, [pc, #96]	; (800d054 <netif_do_set_ipaddr+0x88>)
 800cff4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cff8:	4917      	ldr	r1, [pc, #92]	; (800d058 <netif_do_set_ipaddr+0x8c>)
 800cffa:	4818      	ldr	r0, [pc, #96]	; (800d05c <netif_do_set_ipaddr+0x90>)
 800cffc:	f00c fab6 	bl	801956c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	3304      	adds	r3, #4
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d01c      	beq.n	800d048 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	3304      	adds	r3, #4
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d01e:	f107 0314 	add.w	r3, r7, #20
 800d022:	4619      	mov	r1, r3
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f7ff ffbf 	bl	800cfa8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <netif_do_set_ipaddr+0x6a>
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	e000      	b.n	800d038 <netif_do_set_ipaddr+0x6c>
 800d036:	2300      	movs	r3, #0
 800d038:	68fa      	ldr	r2, [r7, #12]
 800d03a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d03c:	2101      	movs	r1, #1
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f000 f8d2 	bl	800d1e8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d044:	2301      	movs	r3, #1
 800d046:	e000      	b.n	800d04a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d048:	2300      	movs	r3, #0
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3718      	adds	r7, #24
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	0801ba38 	.word	0x0801ba38
 800d058:	0801bb50 	.word	0x0801bb50
 800d05c:	0801ba88 	.word	0x0801ba88

0800d060 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	3308      	adds	r3, #8
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	429a      	cmp	r2, r3
 800d078:	d00a      	beq.n	800d090 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d002      	beq.n	800d086 <netif_do_set_netmask+0x26>
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	e000      	b.n	800d088 <netif_do_set_netmask+0x28>
 800d086:	2300      	movs	r3, #0
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d08c:	2301      	movs	r3, #1
 800d08e:	e000      	b.n	800d092 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3714      	adds	r7, #20
 800d096:	46bd      	mov	sp, r7
 800d098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09c:	4770      	bx	lr

0800d09e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d09e:	b480      	push	{r7}
 800d0a0:	b085      	sub	sp, #20
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	60f8      	str	r0, [r7, #12]
 800d0a6:	60b9      	str	r1, [r7, #8]
 800d0a8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	330c      	adds	r3, #12
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d00a      	beq.n	800d0ce <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d002      	beq.n	800d0c4 <netif_do_set_gw+0x26>
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	e000      	b.n	800d0c6 <netif_do_set_gw+0x28>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	68fa      	ldr	r2, [r7, #12]
 800d0c8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e000      	b.n	800d0d0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d0ce:	2300      	movs	r3, #0
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3714      	adds	r7, #20
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b088      	sub	sp, #32
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
 800d0e8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d101      	bne.n	800d0fc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d0f8:	4b1c      	ldr	r3, [pc, #112]	; (800d16c <netif_set_addr+0x90>)
 800d0fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d101      	bne.n	800d106 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d102:	4b1a      	ldr	r3, [pc, #104]	; (800d16c <netif_set_addr+0x90>)
 800d104:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d101      	bne.n	800d110 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d10c:	4b17      	ldr	r3, [pc, #92]	; (800d16c <netif_set_addr+0x90>)
 800d10e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d003      	beq.n	800d11e <netif_set_addr+0x42>
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d101      	bne.n	800d122 <netif_set_addr+0x46>
 800d11e:	2301      	movs	r3, #1
 800d120:	e000      	b.n	800d124 <netif_set_addr+0x48>
 800d122:	2300      	movs	r3, #0
 800d124:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d006      	beq.n	800d13a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d12c:	f107 0310 	add.w	r3, r7, #16
 800d130:	461a      	mov	r2, r3
 800d132:	68b9      	ldr	r1, [r7, #8]
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	f7ff ff49 	bl	800cfcc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d13a:	69fa      	ldr	r2, [r7, #28]
 800d13c:	6879      	ldr	r1, [r7, #4]
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f7ff ff8e 	bl	800d060 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d144:	69ba      	ldr	r2, [r7, #24]
 800d146:	6839      	ldr	r1, [r7, #0]
 800d148:	68f8      	ldr	r0, [r7, #12]
 800d14a:	f7ff ffa8 	bl	800d09e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d106      	bne.n	800d162 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d154:	f107 0310 	add.w	r3, r7, #16
 800d158:	461a      	mov	r2, r3
 800d15a:	68b9      	ldr	r1, [r7, #8]
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f7ff ff35 	bl	800cfcc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d162:	bf00      	nop
 800d164:	3720      	adds	r7, #32
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	08023070 	.word	0x08023070

0800d170 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d178:	4a04      	ldr	r2, [pc, #16]	; (800d18c <netif_set_default+0x1c>)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d17e:	bf00      	nop
 800d180:	370c      	adds	r7, #12
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	20016e08 	.word	0x20016e08

0800d190 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d107      	bne.n	800d1ae <netif_set_up+0x1e>
 800d19e:	4b0f      	ldr	r3, [pc, #60]	; (800d1dc <netif_set_up+0x4c>)
 800d1a0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d1a4:	490e      	ldr	r1, [pc, #56]	; (800d1e0 <netif_set_up+0x50>)
 800d1a6:	480f      	ldr	r0, [pc, #60]	; (800d1e4 <netif_set_up+0x54>)
 800d1a8:	f00c f9e0 	bl	801956c <iprintf>
 800d1ac:	e013      	b.n	800d1d6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d1b4:	f003 0301 	and.w	r3, r3, #1
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d10c      	bne.n	800d1d6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d1c2:	f043 0301 	orr.w	r3, r3, #1
 800d1c6:	b2da      	uxtb	r2, r3
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d1ce:	2103      	movs	r1, #3
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 f809 	bl	800d1e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d1d6:	3708      	adds	r7, #8
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}
 800d1dc:	0801ba38 	.word	0x0801ba38
 800d1e0:	0801bbc0 	.word	0x0801bbc0
 800d1e4:	0801ba88 	.word	0x0801ba88

0800d1e8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d106      	bne.n	800d208 <netif_issue_reports+0x20>
 800d1fa:	4b18      	ldr	r3, [pc, #96]	; (800d25c <netif_issue_reports+0x74>)
 800d1fc:	f240 326d 	movw	r2, #877	; 0x36d
 800d200:	4917      	ldr	r1, [pc, #92]	; (800d260 <netif_issue_reports+0x78>)
 800d202:	4818      	ldr	r0, [pc, #96]	; (800d264 <netif_issue_reports+0x7c>)
 800d204:	f00c f9b2 	bl	801956c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d20e:	f003 0304 	and.w	r3, r3, #4
 800d212:	2b00      	cmp	r3, #0
 800d214:	d01e      	beq.n	800d254 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d21c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d220:	2b00      	cmp	r3, #0
 800d222:	d017      	beq.n	800d254 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d224:	78fb      	ldrb	r3, [r7, #3]
 800d226:	f003 0301 	and.w	r3, r3, #1
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d013      	beq.n	800d256 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	3304      	adds	r3, #4
 800d232:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d234:	2b00      	cmp	r3, #0
 800d236:	d00e      	beq.n	800d256 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d23e:	f003 0308 	and.w	r3, r3, #8
 800d242:	2b00      	cmp	r3, #0
 800d244:	d007      	beq.n	800d256 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	3304      	adds	r3, #4
 800d24a:	4619      	mov	r1, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f00a fbd9 	bl	8017a04 <etharp_request>
 800d252:	e000      	b.n	800d256 <netif_issue_reports+0x6e>
    return;
 800d254:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	0801ba38 	.word	0x0801ba38
 800d260:	0801bbdc 	.word	0x0801bbdc
 800d264:	0801ba88 	.word	0x0801ba88

0800d268 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d107      	bne.n	800d286 <netif_set_down+0x1e>
 800d276:	4b12      	ldr	r3, [pc, #72]	; (800d2c0 <netif_set_down+0x58>)
 800d278:	f240 329b 	movw	r2, #923	; 0x39b
 800d27c:	4911      	ldr	r1, [pc, #68]	; (800d2c4 <netif_set_down+0x5c>)
 800d27e:	4812      	ldr	r0, [pc, #72]	; (800d2c8 <netif_set_down+0x60>)
 800d280:	f00c f974 	bl	801956c <iprintf>
 800d284:	e019      	b.n	800d2ba <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d28c:	f003 0301 	and.w	r3, r3, #1
 800d290:	2b00      	cmp	r3, #0
 800d292:	d012      	beq.n	800d2ba <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d29a:	f023 0301 	bic.w	r3, r3, #1
 800d29e:	b2da      	uxtb	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d2ac:	f003 0308 	and.w	r3, r3, #8
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d002      	beq.n	800d2ba <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f009 ff5f 	bl	8017178 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d2ba:	3708      	adds	r7, #8
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	0801ba38 	.word	0x0801ba38
 800d2c4:	0801bc00 	.word	0x0801bc00
 800d2c8:	0801ba88 	.word	0x0801ba88

0800d2cc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d107      	bne.n	800d2ea <netif_set_link_up+0x1e>
 800d2da:	4b15      	ldr	r3, [pc, #84]	; (800d330 <netif_set_link_up+0x64>)
 800d2dc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d2e0:	4914      	ldr	r1, [pc, #80]	; (800d334 <netif_set_link_up+0x68>)
 800d2e2:	4815      	ldr	r0, [pc, #84]	; (800d338 <netif_set_link_up+0x6c>)
 800d2e4:	f00c f942 	bl	801956c <iprintf>
 800d2e8:	e01e      	b.n	800d328 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d2f0:	f003 0304 	and.w	r3, r3, #4
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d117      	bne.n	800d328 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d2fe:	f043 0304 	orr.w	r3, r3, #4
 800d302:	b2da      	uxtb	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f008 f988 	bl	8015620 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d310:	2103      	movs	r1, #3
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f7ff ff68 	bl	800d1e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	69db      	ldr	r3, [r3, #28]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d003      	beq.n	800d328 <netif_set_link_up+0x5c>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	69db      	ldr	r3, [r3, #28]
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d328:	3708      	adds	r7, #8
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	0801ba38 	.word	0x0801ba38
 800d334:	0801bc20 	.word	0x0801bc20
 800d338:	0801ba88 	.word	0x0801ba88

0800d33c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d107      	bne.n	800d35a <netif_set_link_down+0x1e>
 800d34a:	4b11      	ldr	r3, [pc, #68]	; (800d390 <netif_set_link_down+0x54>)
 800d34c:	f240 4206 	movw	r2, #1030	; 0x406
 800d350:	4910      	ldr	r1, [pc, #64]	; (800d394 <netif_set_link_down+0x58>)
 800d352:	4811      	ldr	r0, [pc, #68]	; (800d398 <netif_set_link_down+0x5c>)
 800d354:	f00c f90a 	bl	801956c <iprintf>
 800d358:	e017      	b.n	800d38a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d360:	f003 0304 	and.w	r3, r3, #4
 800d364:	2b00      	cmp	r3, #0
 800d366:	d010      	beq.n	800d38a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d36e:	f023 0304 	bic.w	r3, r3, #4
 800d372:	b2da      	uxtb	r2, r3
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	69db      	ldr	r3, [r3, #28]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d003      	beq.n	800d38a <netif_set_link_down+0x4e>
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	69db      	ldr	r3, [r3, #28]
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	0801ba38 	.word	0x0801ba38
 800d394:	0801bc44 	.word	0x0801bc44
 800d398:	0801ba88 	.word	0x0801ba88

0800d39c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	683a      	ldr	r2, [r7, #0]
 800d3b0:	61da      	str	r2, [r3, #28]
  }
}
 800d3b2:	bf00      	nop
 800d3b4:	370c      	adds	r7, #12
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr

0800d3be <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d3be:	b480      	push	{r7}
 800d3c0:	b085      	sub	sp, #20
 800d3c2:	af00      	add	r7, sp, #0
 800d3c4:	60f8      	str	r0, [r7, #12]
 800d3c6:	60b9      	str	r1, [r7, #8]
 800d3c8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d3ca:	f06f 030b 	mvn.w	r3, #11
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3714      	adds	r7, #20
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr
	...

0800d3dc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b085      	sub	sp, #20
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d3e6:	79fb      	ldrb	r3, [r7, #7]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d013      	beq.n	800d414 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d3ec:	4b0d      	ldr	r3, [pc, #52]	; (800d424 <netif_get_by_index+0x48>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	60fb      	str	r3, [r7, #12]
 800d3f2:	e00c      	b.n	800d40e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	79fa      	ldrb	r2, [r7, #7]
 800d400:	429a      	cmp	r2, r3
 800d402:	d101      	bne.n	800d408 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	e006      	b.n	800d416 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	60fb      	str	r3, [r7, #12]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d1ef      	bne.n	800d3f4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	3714      	adds	r7, #20
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr
 800d422:	bf00      	nop
 800d424:	20016e04 	.word	0x20016e04

0800d428 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b082      	sub	sp, #8
 800d42c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d42e:	f00c f81f 	bl	8019470 <sys_arch_protect>
 800d432:	6038      	str	r0, [r7, #0]
 800d434:	4b0d      	ldr	r3, [pc, #52]	; (800d46c <pbuf_free_ooseq+0x44>)
 800d436:	2200      	movs	r2, #0
 800d438:	701a      	strb	r2, [r3, #0]
 800d43a:	6838      	ldr	r0, [r7, #0]
 800d43c:	f00c f826 	bl	801948c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d440:	4b0b      	ldr	r3, [pc, #44]	; (800d470 <pbuf_free_ooseq+0x48>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	607b      	str	r3, [r7, #4]
 800d446:	e00a      	b.n	800d45e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d003      	beq.n	800d458 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f002 fc71 	bl	800fd38 <tcp_free_ooseq>
      return;
 800d456:	e005      	b.n	800d464 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	68db      	ldr	r3, [r3, #12]
 800d45c:	607b      	str	r3, [r7, #4]
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d1f1      	bne.n	800d448 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d464:	3708      	adds	r7, #8
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	20016e0c 	.word	0x20016e0c
 800d470:	20016e14 	.word	0x20016e14

0800d474 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d47c:	f7ff ffd4 	bl	800d428 <pbuf_free_ooseq>
}
 800d480:	bf00      	nop
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d48e:	f00b ffef 	bl	8019470 <sys_arch_protect>
 800d492:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d494:	4b0f      	ldr	r3, [pc, #60]	; (800d4d4 <pbuf_pool_is_empty+0x4c>)
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d49a:	4b0e      	ldr	r3, [pc, #56]	; (800d4d4 <pbuf_pool_is_empty+0x4c>)
 800d49c:	2201      	movs	r2, #1
 800d49e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f00b fff3 	bl	801948c <sys_arch_unprotect>

  if (!queued) {
 800d4a6:	78fb      	ldrb	r3, [r7, #3]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10f      	bne.n	800d4cc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	480a      	ldr	r0, [pc, #40]	; (800d4d8 <pbuf_pool_is_empty+0x50>)
 800d4b0:	f7fe f87a 	bl	800b5a8 <tcpip_try_callback>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d008      	beq.n	800d4cc <pbuf_pool_is_empty+0x44>
 800d4ba:	f00b ffd9 	bl	8019470 <sys_arch_protect>
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	4b04      	ldr	r3, [pc, #16]	; (800d4d4 <pbuf_pool_is_empty+0x4c>)
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	701a      	strb	r2, [r3, #0]
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f00b ffe0 	bl	801948c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d4cc:	bf00      	nop
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	20016e0c 	.word	0x20016e0c
 800d4d8:	0800d475 	.word	0x0800d475

0800d4dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	460b      	mov	r3, r1
 800d4ec:	80fb      	strh	r3, [r7, #6]
 800d4ee:	4613      	mov	r3, r2
 800d4f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	88fa      	ldrh	r2, [r7, #6]
 800d502:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	88ba      	ldrh	r2, [r7, #4]
 800d508:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d50a:	8b3b      	ldrh	r3, [r7, #24]
 800d50c:	b2da      	uxtb	r2, r3
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	7f3a      	ldrb	r2, [r7, #28]
 800d516:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2201      	movs	r2, #1
 800d51c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2200      	movs	r2, #0
 800d522:	73da      	strb	r2, [r3, #15]
}
 800d524:	bf00      	nop
 800d526:	3714      	adds	r7, #20
 800d528:	46bd      	mov	sp, r7
 800d52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52e:	4770      	bx	lr

0800d530 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b08c      	sub	sp, #48	; 0x30
 800d534:	af02      	add	r7, sp, #8
 800d536:	4603      	mov	r3, r0
 800d538:	71fb      	strb	r3, [r7, #7]
 800d53a:	460b      	mov	r3, r1
 800d53c:	80bb      	strh	r3, [r7, #4]
 800d53e:	4613      	mov	r3, r2
 800d540:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d542:	79fb      	ldrb	r3, [r7, #7]
 800d544:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d546:	887b      	ldrh	r3, [r7, #2]
 800d548:	2b41      	cmp	r3, #65	; 0x41
 800d54a:	d00b      	beq.n	800d564 <pbuf_alloc+0x34>
 800d54c:	2b41      	cmp	r3, #65	; 0x41
 800d54e:	dc02      	bgt.n	800d556 <pbuf_alloc+0x26>
 800d550:	2b01      	cmp	r3, #1
 800d552:	d007      	beq.n	800d564 <pbuf_alloc+0x34>
 800d554:	e0c2      	b.n	800d6dc <pbuf_alloc+0x1ac>
 800d556:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d55a:	d00b      	beq.n	800d574 <pbuf_alloc+0x44>
 800d55c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d560:	d070      	beq.n	800d644 <pbuf_alloc+0x114>
 800d562:	e0bb      	b.n	800d6dc <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d564:	887a      	ldrh	r2, [r7, #2]
 800d566:	88bb      	ldrh	r3, [r7, #4]
 800d568:	4619      	mov	r1, r3
 800d56a:	2000      	movs	r0, #0
 800d56c:	f000 f8d2 	bl	800d714 <pbuf_alloc_reference>
 800d570:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d572:	e0bd      	b.n	800d6f0 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d574:	2300      	movs	r3, #0
 800d576:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d578:	2300      	movs	r3, #0
 800d57a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d57c:	88bb      	ldrh	r3, [r7, #4]
 800d57e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d580:	200c      	movs	r0, #12
 800d582:	f7ff fbb7 	bl	800ccf4 <memp_malloc>
 800d586:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d109      	bne.n	800d5a2 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800d58e:	f7ff ff7b 	bl	800d488 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d594:	2b00      	cmp	r3, #0
 800d596:	d002      	beq.n	800d59e <pbuf_alloc+0x6e>
            pbuf_free(p);
 800d598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d59a:	f000 faa9 	bl	800daf0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	e0a7      	b.n	800d6f2 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d5a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5a4:	3303      	adds	r3, #3
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	f023 0303 	bic.w	r3, r3, #3
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	8b7a      	ldrh	r2, [r7, #26]
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	bf28      	it	cs
 800d5ba:	4613      	movcs	r3, r2
 800d5bc:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d5be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5c0:	3310      	adds	r3, #16
 800d5c2:	693a      	ldr	r2, [r7, #16]
 800d5c4:	4413      	add	r3, r2
 800d5c6:	3303      	adds	r3, #3
 800d5c8:	f023 0303 	bic.w	r3, r3, #3
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	89f9      	ldrh	r1, [r7, #14]
 800d5d0:	8b7a      	ldrh	r2, [r7, #26]
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	9301      	str	r3, [sp, #4]
 800d5d6:	887b      	ldrh	r3, [r7, #2]
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	460b      	mov	r3, r1
 800d5dc:	4601      	mov	r1, r0
 800d5de:	6938      	ldr	r0, [r7, #16]
 800d5e0:	f7ff ff7c 	bl	800d4dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	685b      	ldr	r3, [r3, #4]
 800d5e8:	f003 0303 	and.w	r3, r3, #3
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d006      	beq.n	800d5fe <pbuf_alloc+0xce>
 800d5f0:	4b42      	ldr	r3, [pc, #264]	; (800d6fc <pbuf_alloc+0x1cc>)
 800d5f2:	f240 1201 	movw	r2, #257	; 0x101
 800d5f6:	4942      	ldr	r1, [pc, #264]	; (800d700 <pbuf_alloc+0x1d0>)
 800d5f8:	4842      	ldr	r0, [pc, #264]	; (800d704 <pbuf_alloc+0x1d4>)
 800d5fa:	f00b ffb7 	bl	801956c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d5fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d600:	3303      	adds	r3, #3
 800d602:	f023 0303 	bic.w	r3, r3, #3
 800d606:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d60a:	d106      	bne.n	800d61a <pbuf_alloc+0xea>
 800d60c:	4b3b      	ldr	r3, [pc, #236]	; (800d6fc <pbuf_alloc+0x1cc>)
 800d60e:	f240 1203 	movw	r2, #259	; 0x103
 800d612:	493d      	ldr	r1, [pc, #244]	; (800d708 <pbuf_alloc+0x1d8>)
 800d614:	483b      	ldr	r0, [pc, #236]	; (800d704 <pbuf_alloc+0x1d4>)
 800d616:	f00b ffa9 	bl	801956c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d102      	bne.n	800d626 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	627b      	str	r3, [r7, #36]	; 0x24
 800d624:	e002      	b.n	800d62c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	693a      	ldr	r2, [r7, #16]
 800d62a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d62c:	693b      	ldr	r3, [r7, #16]
 800d62e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d630:	8b7a      	ldrh	r2, [r7, #26]
 800d632:	89fb      	ldrh	r3, [r7, #14]
 800d634:	1ad3      	subs	r3, r2, r3
 800d636:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d638:	2300      	movs	r3, #0
 800d63a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d63c:	8b7b      	ldrh	r3, [r7, #26]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d19e      	bne.n	800d580 <pbuf_alloc+0x50>
      break;
 800d642:	e055      	b.n	800d6f0 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d644:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d646:	3303      	adds	r3, #3
 800d648:	b29b      	uxth	r3, r3
 800d64a:	f023 0303 	bic.w	r3, r3, #3
 800d64e:	b29a      	uxth	r2, r3
 800d650:	88bb      	ldrh	r3, [r7, #4]
 800d652:	3303      	adds	r3, #3
 800d654:	b29b      	uxth	r3, r3
 800d656:	f023 0303 	bic.w	r3, r3, #3
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	4413      	add	r3, r2
 800d65e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d660:	8b3b      	ldrh	r3, [r7, #24]
 800d662:	3310      	adds	r3, #16
 800d664:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d666:	8b3a      	ldrh	r2, [r7, #24]
 800d668:	88bb      	ldrh	r3, [r7, #4]
 800d66a:	3303      	adds	r3, #3
 800d66c:	f023 0303 	bic.w	r3, r3, #3
 800d670:	429a      	cmp	r2, r3
 800d672:	d306      	bcc.n	800d682 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d674:	8afa      	ldrh	r2, [r7, #22]
 800d676:	88bb      	ldrh	r3, [r7, #4]
 800d678:	3303      	adds	r3, #3
 800d67a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d67e:	429a      	cmp	r2, r3
 800d680:	d201      	bcs.n	800d686 <pbuf_alloc+0x156>
        return NULL;
 800d682:	2300      	movs	r3, #0
 800d684:	e035      	b.n	800d6f2 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d686:	8afb      	ldrh	r3, [r7, #22]
 800d688:	4618      	mov	r0, r3
 800d68a:	f7ff f9b1 	bl	800c9f0 <mem_malloc>
 800d68e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d692:	2b00      	cmp	r3, #0
 800d694:	d101      	bne.n	800d69a <pbuf_alloc+0x16a>
        return NULL;
 800d696:	2300      	movs	r3, #0
 800d698:	e02b      	b.n	800d6f2 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d69a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d69c:	3310      	adds	r3, #16
 800d69e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6a0:	4413      	add	r3, r2
 800d6a2:	3303      	adds	r3, #3
 800d6a4:	f023 0303 	bic.w	r3, r3, #3
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	88b9      	ldrh	r1, [r7, #4]
 800d6ac:	88ba      	ldrh	r2, [r7, #4]
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	9301      	str	r3, [sp, #4]
 800d6b2:	887b      	ldrh	r3, [r7, #2]
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	4601      	mov	r1, r0
 800d6ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6bc:	f7ff ff0e 	bl	800d4dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	f003 0303 	and.w	r3, r3, #3
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d010      	beq.n	800d6ee <pbuf_alloc+0x1be>
 800d6cc:	4b0b      	ldr	r3, [pc, #44]	; (800d6fc <pbuf_alloc+0x1cc>)
 800d6ce:	f240 1223 	movw	r2, #291	; 0x123
 800d6d2:	490e      	ldr	r1, [pc, #56]	; (800d70c <pbuf_alloc+0x1dc>)
 800d6d4:	480b      	ldr	r0, [pc, #44]	; (800d704 <pbuf_alloc+0x1d4>)
 800d6d6:	f00b ff49 	bl	801956c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d6da:	e008      	b.n	800d6ee <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d6dc:	4b07      	ldr	r3, [pc, #28]	; (800d6fc <pbuf_alloc+0x1cc>)
 800d6de:	f240 1227 	movw	r2, #295	; 0x127
 800d6e2:	490b      	ldr	r1, [pc, #44]	; (800d710 <pbuf_alloc+0x1e0>)
 800d6e4:	4807      	ldr	r0, [pc, #28]	; (800d704 <pbuf_alloc+0x1d4>)
 800d6e6:	f00b ff41 	bl	801956c <iprintf>
      return NULL;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	e001      	b.n	800d6f2 <pbuf_alloc+0x1c2>
      break;
 800d6ee:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3728      	adds	r7, #40	; 0x28
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	0801bc68 	.word	0x0801bc68
 800d700:	0801bc98 	.word	0x0801bc98
 800d704:	0801bcc8 	.word	0x0801bcc8
 800d708:	0801bcf0 	.word	0x0801bcf0
 800d70c:	0801bd24 	.word	0x0801bd24
 800d710:	0801bd50 	.word	0x0801bd50

0800d714 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af02      	add	r7, sp, #8
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	460b      	mov	r3, r1
 800d71e:	807b      	strh	r3, [r7, #2]
 800d720:	4613      	mov	r3, r2
 800d722:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d724:	883b      	ldrh	r3, [r7, #0]
 800d726:	2b41      	cmp	r3, #65	; 0x41
 800d728:	d009      	beq.n	800d73e <pbuf_alloc_reference+0x2a>
 800d72a:	883b      	ldrh	r3, [r7, #0]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d006      	beq.n	800d73e <pbuf_alloc_reference+0x2a>
 800d730:	4b0f      	ldr	r3, [pc, #60]	; (800d770 <pbuf_alloc_reference+0x5c>)
 800d732:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d736:	490f      	ldr	r1, [pc, #60]	; (800d774 <pbuf_alloc_reference+0x60>)
 800d738:	480f      	ldr	r0, [pc, #60]	; (800d778 <pbuf_alloc_reference+0x64>)
 800d73a:	f00b ff17 	bl	801956c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d73e:	200b      	movs	r0, #11
 800d740:	f7ff fad8 	bl	800ccf4 <memp_malloc>
 800d744:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d101      	bne.n	800d750 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d74c:	2300      	movs	r3, #0
 800d74e:	e00b      	b.n	800d768 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d750:	8879      	ldrh	r1, [r7, #2]
 800d752:	887a      	ldrh	r2, [r7, #2]
 800d754:	2300      	movs	r3, #0
 800d756:	9301      	str	r3, [sp, #4]
 800d758:	883b      	ldrh	r3, [r7, #0]
 800d75a:	9300      	str	r3, [sp, #0]
 800d75c:	460b      	mov	r3, r1
 800d75e:	6879      	ldr	r1, [r7, #4]
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f7ff febb 	bl	800d4dc <pbuf_init_alloced_pbuf>
  return p;
 800d766:	68fb      	ldr	r3, [r7, #12]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3710      	adds	r7, #16
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	0801bc68 	.word	0x0801bc68
 800d774:	0801bd6c 	.word	0x0801bd6c
 800d778:	0801bcc8 	.word	0x0801bcc8

0800d77c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b088      	sub	sp, #32
 800d780:	af02      	add	r7, sp, #8
 800d782:	607b      	str	r3, [r7, #4]
 800d784:	4603      	mov	r3, r0
 800d786:	73fb      	strb	r3, [r7, #15]
 800d788:	460b      	mov	r3, r1
 800d78a:	81bb      	strh	r3, [r7, #12]
 800d78c:	4613      	mov	r3, r2
 800d78e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d790:	7bfb      	ldrb	r3, [r7, #15]
 800d792:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d794:	8a7b      	ldrh	r3, [r7, #18]
 800d796:	3303      	adds	r3, #3
 800d798:	f023 0203 	bic.w	r2, r3, #3
 800d79c:	89bb      	ldrh	r3, [r7, #12]
 800d79e:	441a      	add	r2, r3
 800d7a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d901      	bls.n	800d7aa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	e018      	b.n	800d7dc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d7aa:	6a3b      	ldr	r3, [r7, #32]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d007      	beq.n	800d7c0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d7b0:	8a7b      	ldrh	r3, [r7, #18]
 800d7b2:	3303      	adds	r3, #3
 800d7b4:	f023 0303 	bic.w	r3, r3, #3
 800d7b8:	6a3a      	ldr	r2, [r7, #32]
 800d7ba:	4413      	add	r3, r2
 800d7bc:	617b      	str	r3, [r7, #20]
 800d7be:	e001      	b.n	800d7c4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	89b9      	ldrh	r1, [r7, #12]
 800d7c8:	89ba      	ldrh	r2, [r7, #12]
 800d7ca:	2302      	movs	r3, #2
 800d7cc:	9301      	str	r3, [sp, #4]
 800d7ce:	897b      	ldrh	r3, [r7, #10]
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	6979      	ldr	r1, [r7, #20]
 800d7d6:	f7ff fe81 	bl	800d4dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d7da:	687b      	ldr	r3, [r7, #4]
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3718      	adds	r7, #24
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d106      	bne.n	800d804 <pbuf_realloc+0x20>
 800d7f6:	4b3a      	ldr	r3, [pc, #232]	; (800d8e0 <pbuf_realloc+0xfc>)
 800d7f8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d7fc:	4939      	ldr	r1, [pc, #228]	; (800d8e4 <pbuf_realloc+0x100>)
 800d7fe:	483a      	ldr	r0, [pc, #232]	; (800d8e8 <pbuf_realloc+0x104>)
 800d800:	f00b feb4 	bl	801956c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	891b      	ldrh	r3, [r3, #8]
 800d808:	887a      	ldrh	r2, [r7, #2]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d264      	bcs.n	800d8d8 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	891a      	ldrh	r2, [r3, #8]
 800d812:	887b      	ldrh	r3, [r7, #2]
 800d814:	1ad3      	subs	r3, r2, r3
 800d816:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d818:	887b      	ldrh	r3, [r7, #2]
 800d81a:	817b      	strh	r3, [r7, #10]
  q = p;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d820:	e018      	b.n	800d854 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	895b      	ldrh	r3, [r3, #10]
 800d826:	897a      	ldrh	r2, [r7, #10]
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	891a      	ldrh	r2, [r3, #8]
 800d830:	893b      	ldrh	r3, [r7, #8]
 800d832:	1ad3      	subs	r3, r2, r3
 800d834:	b29a      	uxth	r2, r3
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d106      	bne.n	800d854 <pbuf_realloc+0x70>
 800d846:	4b26      	ldr	r3, [pc, #152]	; (800d8e0 <pbuf_realloc+0xfc>)
 800d848:	f240 12af 	movw	r2, #431	; 0x1af
 800d84c:	4927      	ldr	r1, [pc, #156]	; (800d8ec <pbuf_realloc+0x108>)
 800d84e:	4826      	ldr	r0, [pc, #152]	; (800d8e8 <pbuf_realloc+0x104>)
 800d850:	f00b fe8c 	bl	801956c <iprintf>
  while (rem_len > q->len) {
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	895b      	ldrh	r3, [r3, #10]
 800d858:	897a      	ldrh	r2, [r7, #10]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d8e1      	bhi.n	800d822 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	7b1b      	ldrb	r3, [r3, #12]
 800d862:	f003 030f 	and.w	r3, r3, #15
 800d866:	2b00      	cmp	r3, #0
 800d868:	d122      	bne.n	800d8b0 <pbuf_realloc+0xcc>
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	895b      	ldrh	r3, [r3, #10]
 800d86e:	897a      	ldrh	r2, [r7, #10]
 800d870:	429a      	cmp	r2, r3
 800d872:	d01d      	beq.n	800d8b0 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	7b5b      	ldrb	r3, [r3, #13]
 800d878:	f003 0302 	and.w	r3, r3, #2
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d117      	bne.n	800d8b0 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	461a      	mov	r2, r3
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	1ad3      	subs	r3, r2, r3
 800d88a:	b29a      	uxth	r2, r3
 800d88c:	897b      	ldrh	r3, [r7, #10]
 800d88e:	4413      	add	r3, r2
 800d890:	b29b      	uxth	r3, r3
 800d892:	4619      	mov	r1, r3
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f7fe ffa1 	bl	800c7dc <mem_trim>
 800d89a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d106      	bne.n	800d8b0 <pbuf_realloc+0xcc>
 800d8a2:	4b0f      	ldr	r3, [pc, #60]	; (800d8e0 <pbuf_realloc+0xfc>)
 800d8a4:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d8a8:	4911      	ldr	r1, [pc, #68]	; (800d8f0 <pbuf_realloc+0x10c>)
 800d8aa:	480f      	ldr	r0, [pc, #60]	; (800d8e8 <pbuf_realloc+0x104>)
 800d8ac:	f00b fe5e 	bl	801956c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	897a      	ldrh	r2, [r7, #10]
 800d8b4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	895a      	ldrh	r2, [r3, #10]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d004      	beq.n	800d8d0 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 f910 	bl	800daf0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	601a      	str	r2, [r3, #0]
 800d8d6:	e000      	b.n	800d8da <pbuf_realloc+0xf6>
    return;
 800d8d8:	bf00      	nop

}
 800d8da:	3710      	adds	r7, #16
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	0801bc68 	.word	0x0801bc68
 800d8e4:	0801bd80 	.word	0x0801bd80
 800d8e8:	0801bcc8 	.word	0x0801bcc8
 800d8ec:	0801bd98 	.word	0x0801bd98
 800d8f0:	0801bdb0 	.word	0x0801bdb0

0800d8f4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b086      	sub	sp, #24
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	4613      	mov	r3, r2
 800d900:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d106      	bne.n	800d916 <pbuf_add_header_impl+0x22>
 800d908:	4b2b      	ldr	r3, [pc, #172]	; (800d9b8 <pbuf_add_header_impl+0xc4>)
 800d90a:	f240 12df 	movw	r2, #479	; 0x1df
 800d90e:	492b      	ldr	r1, [pc, #172]	; (800d9bc <pbuf_add_header_impl+0xc8>)
 800d910:	482b      	ldr	r0, [pc, #172]	; (800d9c0 <pbuf_add_header_impl+0xcc>)
 800d912:	f00b fe2b 	bl	801956c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d003      	beq.n	800d924 <pbuf_add_header_impl+0x30>
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d922:	d301      	bcc.n	800d928 <pbuf_add_header_impl+0x34>
    return 1;
 800d924:	2301      	movs	r3, #1
 800d926:	e043      	b.n	800d9b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d101      	bne.n	800d932 <pbuf_add_header_impl+0x3e>
    return 0;
 800d92e:	2300      	movs	r3, #0
 800d930:	e03e      	b.n	800d9b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	891a      	ldrh	r2, [r3, #8]
 800d93a:	8a7b      	ldrh	r3, [r7, #18]
 800d93c:	4413      	add	r3, r2
 800d93e:	b29b      	uxth	r3, r3
 800d940:	8a7a      	ldrh	r2, [r7, #18]
 800d942:	429a      	cmp	r2, r3
 800d944:	d901      	bls.n	800d94a <pbuf_add_header_impl+0x56>
    return 1;
 800d946:	2301      	movs	r3, #1
 800d948:	e032      	b.n	800d9b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	7b1b      	ldrb	r3, [r3, #12]
 800d94e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d950:	8a3b      	ldrh	r3, [r7, #16]
 800d952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d956:	2b00      	cmp	r3, #0
 800d958:	d00c      	beq.n	800d974 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	685a      	ldr	r2, [r3, #4]
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	425b      	negs	r3, r3
 800d962:	4413      	add	r3, r2
 800d964:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	3310      	adds	r3, #16
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d20d      	bcs.n	800d98c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d970:	2301      	movs	r3, #1
 800d972:	e01d      	b.n	800d9b0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d974:	79fb      	ldrb	r3, [r7, #7]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d006      	beq.n	800d988 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	685a      	ldr	r2, [r3, #4]
 800d97e:	68bb      	ldr	r3, [r7, #8]
 800d980:	425b      	negs	r3, r3
 800d982:	4413      	add	r3, r2
 800d984:	617b      	str	r3, [r7, #20]
 800d986:	e001      	b.n	800d98c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d988:	2301      	movs	r3, #1
 800d98a:	e011      	b.n	800d9b0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	895a      	ldrh	r2, [r3, #10]
 800d996:	8a7b      	ldrh	r3, [r7, #18]
 800d998:	4413      	add	r3, r2
 800d99a:	b29a      	uxth	r2, r3
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	891a      	ldrh	r2, [r3, #8]
 800d9a4:	8a7b      	ldrh	r3, [r7, #18]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	b29a      	uxth	r2, r3
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	811a      	strh	r2, [r3, #8]


  return 0;
 800d9ae:	2300      	movs	r3, #0
}
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	3718      	adds	r7, #24
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	bd80      	pop	{r7, pc}
 800d9b8:	0801bc68 	.word	0x0801bc68
 800d9bc:	0801bdcc 	.word	0x0801bdcc
 800d9c0:	0801bcc8 	.word	0x0801bcc8

0800d9c4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	6839      	ldr	r1, [r7, #0]
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7ff ff8e 	bl	800d8f4 <pbuf_add_header_impl>
 800d9d8:	4603      	mov	r3, r0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
	...

0800d9e4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d106      	bne.n	800da02 <pbuf_remove_header+0x1e>
 800d9f4:	4b20      	ldr	r3, [pc, #128]	; (800da78 <pbuf_remove_header+0x94>)
 800d9f6:	f240 224b 	movw	r2, #587	; 0x24b
 800d9fa:	4920      	ldr	r1, [pc, #128]	; (800da7c <pbuf_remove_header+0x98>)
 800d9fc:	4820      	ldr	r0, [pc, #128]	; (800da80 <pbuf_remove_header+0x9c>)
 800d9fe:	f00b fdb5 	bl	801956c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d003      	beq.n	800da10 <pbuf_remove_header+0x2c>
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da0e:	d301      	bcc.n	800da14 <pbuf_remove_header+0x30>
    return 1;
 800da10:	2301      	movs	r3, #1
 800da12:	e02c      	b.n	800da6e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d101      	bne.n	800da1e <pbuf_remove_header+0x3a>
    return 0;
 800da1a:	2300      	movs	r3, #0
 800da1c:	e027      	b.n	800da6e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	895b      	ldrh	r3, [r3, #10]
 800da26:	89fa      	ldrh	r2, [r7, #14]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d908      	bls.n	800da3e <pbuf_remove_header+0x5a>
 800da2c:	4b12      	ldr	r3, [pc, #72]	; (800da78 <pbuf_remove_header+0x94>)
 800da2e:	f240 2255 	movw	r2, #597	; 0x255
 800da32:	4914      	ldr	r1, [pc, #80]	; (800da84 <pbuf_remove_header+0xa0>)
 800da34:	4812      	ldr	r0, [pc, #72]	; (800da80 <pbuf_remove_header+0x9c>)
 800da36:	f00b fd99 	bl	801956c <iprintf>
 800da3a:	2301      	movs	r3, #1
 800da3c:	e017      	b.n	800da6e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	685a      	ldr	r2, [r3, #4]
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	441a      	add	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	895a      	ldrh	r2, [r3, #10]
 800da54:	89fb      	ldrh	r3, [r7, #14]
 800da56:	1ad3      	subs	r3, r2, r3
 800da58:	b29a      	uxth	r2, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	891a      	ldrh	r2, [r3, #8]
 800da62:	89fb      	ldrh	r3, [r7, #14]
 800da64:	1ad3      	subs	r3, r2, r3
 800da66:	b29a      	uxth	r2, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800da6c:	2300      	movs	r3, #0
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	0801bc68 	.word	0x0801bc68
 800da7c:	0801bdcc 	.word	0x0801bdcc
 800da80:	0801bcc8 	.word	0x0801bcc8
 800da84:	0801bdd8 	.word	0x0801bdd8

0800da88 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b082      	sub	sp, #8
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	460b      	mov	r3, r1
 800da92:	807b      	strh	r3, [r7, #2]
 800da94:	4613      	mov	r3, r2
 800da96:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800da98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	da08      	bge.n	800dab2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800daa0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800daa4:	425b      	negs	r3, r3
 800daa6:	4619      	mov	r1, r3
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7ff ff9b 	bl	800d9e4 <pbuf_remove_header>
 800daae:	4603      	mov	r3, r0
 800dab0:	e007      	b.n	800dac2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dab2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dab6:	787a      	ldrb	r2, [r7, #1]
 800dab8:	4619      	mov	r1, r3
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7ff ff1a 	bl	800d8f4 <pbuf_add_header_impl>
 800dac0:	4603      	mov	r3, r0
  }
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b082      	sub	sp, #8
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
 800dad2:	460b      	mov	r3, r1
 800dad4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dad6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dada:	2201      	movs	r2, #1
 800dadc:	4619      	mov	r1, r3
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f7ff ffd2 	bl	800da88 <pbuf_header_impl>
 800dae4:	4603      	mov	r3, r0
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3708      	adds	r7, #8
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
	...

0800daf0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b088      	sub	sp, #32
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d10b      	bne.n	800db16 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d106      	bne.n	800db12 <pbuf_free+0x22>
 800db04:	4b3b      	ldr	r3, [pc, #236]	; (800dbf4 <pbuf_free+0x104>)
 800db06:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800db0a:	493b      	ldr	r1, [pc, #236]	; (800dbf8 <pbuf_free+0x108>)
 800db0c:	483b      	ldr	r0, [pc, #236]	; (800dbfc <pbuf_free+0x10c>)
 800db0e:	f00b fd2d 	bl	801956c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800db12:	2300      	movs	r3, #0
 800db14:	e069      	b.n	800dbea <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800db16:	2300      	movs	r3, #0
 800db18:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800db1a:	e062      	b.n	800dbe2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800db1c:	f00b fca8 	bl	8019470 <sys_arch_protect>
 800db20:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	7b9b      	ldrb	r3, [r3, #14]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d106      	bne.n	800db38 <pbuf_free+0x48>
 800db2a:	4b32      	ldr	r3, [pc, #200]	; (800dbf4 <pbuf_free+0x104>)
 800db2c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800db30:	4933      	ldr	r1, [pc, #204]	; (800dc00 <pbuf_free+0x110>)
 800db32:	4832      	ldr	r0, [pc, #200]	; (800dbfc <pbuf_free+0x10c>)
 800db34:	f00b fd1a 	bl	801956c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	7b9b      	ldrb	r3, [r3, #14]
 800db3c:	3b01      	subs	r3, #1
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	739a      	strb	r2, [r3, #14]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	7b9b      	ldrb	r3, [r3, #14]
 800db48:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800db4a:	69b8      	ldr	r0, [r7, #24]
 800db4c:	f00b fc9e 	bl	801948c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800db50:	7dfb      	ldrb	r3, [r7, #23]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d143      	bne.n	800dbde <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	7b1b      	ldrb	r3, [r3, #12]
 800db60:	f003 030f 	and.w	r3, r3, #15
 800db64:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	7b5b      	ldrb	r3, [r3, #13]
 800db6a:	f003 0302 	and.w	r3, r3, #2
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d011      	beq.n	800db96 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d106      	bne.n	800db8c <pbuf_free+0x9c>
 800db7e:	4b1d      	ldr	r3, [pc, #116]	; (800dbf4 <pbuf_free+0x104>)
 800db80:	f240 22ff 	movw	r2, #767	; 0x2ff
 800db84:	491f      	ldr	r1, [pc, #124]	; (800dc04 <pbuf_free+0x114>)
 800db86:	481d      	ldr	r0, [pc, #116]	; (800dbfc <pbuf_free+0x10c>)
 800db88:	f00b fcf0 	bl	801956c <iprintf>
        pc->custom_free_function(p);
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	691b      	ldr	r3, [r3, #16]
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	4798      	blx	r3
 800db94:	e01d      	b.n	800dbd2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800db96:	7bfb      	ldrb	r3, [r7, #15]
 800db98:	2b02      	cmp	r3, #2
 800db9a:	d104      	bne.n	800dba6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800db9c:	6879      	ldr	r1, [r7, #4]
 800db9e:	200c      	movs	r0, #12
 800dba0:	f7ff f8fa 	bl	800cd98 <memp_free>
 800dba4:	e015      	b.n	800dbd2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800dba6:	7bfb      	ldrb	r3, [r7, #15]
 800dba8:	2b01      	cmp	r3, #1
 800dbaa:	d104      	bne.n	800dbb6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800dbac:	6879      	ldr	r1, [r7, #4]
 800dbae:	200b      	movs	r0, #11
 800dbb0:	f7ff f8f2 	bl	800cd98 <memp_free>
 800dbb4:	e00d      	b.n	800dbd2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dbb6:	7bfb      	ldrb	r3, [r7, #15]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d103      	bne.n	800dbc4 <pbuf_free+0xd4>
          mem_free(p);
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f7fe fd7d 	bl	800c6bc <mem_free>
 800dbc2:	e006      	b.n	800dbd2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800dbc4:	4b0b      	ldr	r3, [pc, #44]	; (800dbf4 <pbuf_free+0x104>)
 800dbc6:	f240 320f 	movw	r2, #783	; 0x30f
 800dbca:	490f      	ldr	r1, [pc, #60]	; (800dc08 <pbuf_free+0x118>)
 800dbcc:	480b      	ldr	r0, [pc, #44]	; (800dbfc <pbuf_free+0x10c>)
 800dbce:	f00b fccd 	bl	801956c <iprintf>
        }
      }
      count++;
 800dbd2:	7ffb      	ldrb	r3, [r7, #31]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	607b      	str	r3, [r7, #4]
 800dbdc:	e001      	b.n	800dbe2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d199      	bne.n	800db1c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800dbe8:	7ffb      	ldrb	r3, [r7, #31]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3720      	adds	r7, #32
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	0801bc68 	.word	0x0801bc68
 800dbf8:	0801bdcc 	.word	0x0801bdcc
 800dbfc:	0801bcc8 	.word	0x0801bcc8
 800dc00:	0801bdf8 	.word	0x0801bdf8
 800dc04:	0801be10 	.word	0x0801be10
 800dc08:	0801be34 	.word	0x0801be34

0800dc0c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800dc14:	2300      	movs	r3, #0
 800dc16:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800dc18:	e005      	b.n	800dc26 <pbuf_clen+0x1a>
    ++len;
 800dc1a:	89fb      	ldrh	r3, [r7, #14]
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d1f6      	bne.n	800dc1a <pbuf_clen+0xe>
  }
  return len;
 800dc2c:	89fb      	ldrh	r3, [r7, #14]
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3714      	adds	r7, #20
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
	...

0800dc3c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d016      	beq.n	800dc78 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dc4a:	f00b fc11 	bl	8019470 <sys_arch_protect>
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	7b9b      	ldrb	r3, [r3, #14]
 800dc54:	3301      	adds	r3, #1
 800dc56:	b2da      	uxtb	r2, r3
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	739a      	strb	r2, [r3, #14]
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f00b fc15 	bl	801948c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	7b9b      	ldrb	r3, [r3, #14]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d106      	bne.n	800dc78 <pbuf_ref+0x3c>
 800dc6a:	4b05      	ldr	r3, [pc, #20]	; (800dc80 <pbuf_ref+0x44>)
 800dc6c:	f240 3242 	movw	r2, #834	; 0x342
 800dc70:	4904      	ldr	r1, [pc, #16]	; (800dc84 <pbuf_ref+0x48>)
 800dc72:	4805      	ldr	r0, [pc, #20]	; (800dc88 <pbuf_ref+0x4c>)
 800dc74:	f00b fc7a 	bl	801956c <iprintf>
  }
}
 800dc78:	bf00      	nop
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	0801bc68 	.word	0x0801bc68
 800dc84:	0801be48 	.word	0x0801be48
 800dc88:	0801bcc8 	.word	0x0801bcc8

0800dc8c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b084      	sub	sp, #16
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
 800dc94:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d002      	beq.n	800dca2 <pbuf_cat+0x16>
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d107      	bne.n	800dcb2 <pbuf_cat+0x26>
 800dca2:	4b20      	ldr	r3, [pc, #128]	; (800dd24 <pbuf_cat+0x98>)
 800dca4:	f240 325a 	movw	r2, #858	; 0x35a
 800dca8:	491f      	ldr	r1, [pc, #124]	; (800dd28 <pbuf_cat+0x9c>)
 800dcaa:	4820      	ldr	r0, [pc, #128]	; (800dd2c <pbuf_cat+0xa0>)
 800dcac:	f00b fc5e 	bl	801956c <iprintf>
 800dcb0:	e034      	b.n	800dd1c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	60fb      	str	r3, [r7, #12]
 800dcb6:	e00a      	b.n	800dcce <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	891a      	ldrh	r2, [r3, #8]
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	891b      	ldrh	r3, [r3, #8]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	b29a      	uxth	r2, r3
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	60fb      	str	r3, [r7, #12]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1f0      	bne.n	800dcb8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	891a      	ldrh	r2, [r3, #8]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	895b      	ldrh	r3, [r3, #10]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d006      	beq.n	800dcf0 <pbuf_cat+0x64>
 800dce2:	4b10      	ldr	r3, [pc, #64]	; (800dd24 <pbuf_cat+0x98>)
 800dce4:	f240 3262 	movw	r2, #866	; 0x362
 800dce8:	4911      	ldr	r1, [pc, #68]	; (800dd30 <pbuf_cat+0xa4>)
 800dcea:	4810      	ldr	r0, [pc, #64]	; (800dd2c <pbuf_cat+0xa0>)
 800dcec:	f00b fc3e 	bl	801956c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d006      	beq.n	800dd06 <pbuf_cat+0x7a>
 800dcf8:	4b0a      	ldr	r3, [pc, #40]	; (800dd24 <pbuf_cat+0x98>)
 800dcfa:	f240 3263 	movw	r2, #867	; 0x363
 800dcfe:	490d      	ldr	r1, [pc, #52]	; (800dd34 <pbuf_cat+0xa8>)
 800dd00:	480a      	ldr	r0, [pc, #40]	; (800dd2c <pbuf_cat+0xa0>)
 800dd02:	f00b fc33 	bl	801956c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	891a      	ldrh	r2, [r3, #8]
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	891b      	ldrh	r3, [r3, #8]
 800dd0e:	4413      	add	r3, r2
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	683a      	ldr	r2, [r7, #0]
 800dd1a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dd1c:	3710      	adds	r7, #16
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	0801bc68 	.word	0x0801bc68
 800dd28:	0801be5c 	.word	0x0801be5c
 800dd2c:	0801bcc8 	.word	0x0801bcc8
 800dd30:	0801be94 	.word	0x0801be94
 800dd34:	0801bec4 	.word	0x0801bec4

0800dd38 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800dd42:	6839      	ldr	r1, [r7, #0]
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f7ff ffa1 	bl	800dc8c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800dd4a:	6838      	ldr	r0, [r7, #0]
 800dd4c:	f7ff ff76 	bl	800dc3c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800dd50:	bf00      	nop
 800dd52:	3708      	adds	r7, #8
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800dd62:	2300      	movs	r3, #0
 800dd64:	617b      	str	r3, [r7, #20]
 800dd66:	2300      	movs	r3, #0
 800dd68:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d008      	beq.n	800dd82 <pbuf_copy+0x2a>
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d005      	beq.n	800dd82 <pbuf_copy+0x2a>
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	891a      	ldrh	r2, [r3, #8]
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	891b      	ldrh	r3, [r3, #8]
 800dd7e:	429a      	cmp	r2, r3
 800dd80:	d209      	bcs.n	800dd96 <pbuf_copy+0x3e>
 800dd82:	4b57      	ldr	r3, [pc, #348]	; (800dee0 <pbuf_copy+0x188>)
 800dd84:	f240 32ca 	movw	r2, #970	; 0x3ca
 800dd88:	4956      	ldr	r1, [pc, #344]	; (800dee4 <pbuf_copy+0x18c>)
 800dd8a:	4857      	ldr	r0, [pc, #348]	; (800dee8 <pbuf_copy+0x190>)
 800dd8c:	f00b fbee 	bl	801956c <iprintf>
 800dd90:	f06f 030f 	mvn.w	r3, #15
 800dd94:	e09f      	b.n	800ded6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	895b      	ldrh	r3, [r3, #10]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	1ad2      	subs	r2, r2, r3
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	895b      	ldrh	r3, [r3, #10]
 800dda4:	4619      	mov	r1, r3
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	1acb      	subs	r3, r1, r3
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d306      	bcc.n	800ddbc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	895b      	ldrh	r3, [r3, #10]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	693b      	ldr	r3, [r7, #16]
 800ddb6:	1ad3      	subs	r3, r2, r3
 800ddb8:	60fb      	str	r3, [r7, #12]
 800ddba:	e005      	b.n	800ddc8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	895b      	ldrh	r3, [r3, #10]
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	1ad3      	subs	r3, r2, r3
 800ddc6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	685a      	ldr	r2, [r3, #4]
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	18d0      	adds	r0, r2, r3
 800ddd0:	683b      	ldr	r3, [r7, #0]
 800ddd2:	685a      	ldr	r2, [r3, #4]
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	4413      	add	r3, r2
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	4619      	mov	r1, r3
 800dddc:	f00b fb99 	bl	8019512 <memcpy>
    offset_to += len;
 800dde0:	697a      	ldr	r2, [r7, #20]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	4413      	add	r3, r2
 800dde6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800dde8:	693a      	ldr	r2, [r7, #16]
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	4413      	add	r3, r2
 800ddee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	895b      	ldrh	r3, [r3, #10]
 800ddf4:	461a      	mov	r2, r3
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d906      	bls.n	800de0a <pbuf_copy+0xb2>
 800ddfc:	4b38      	ldr	r3, [pc, #224]	; (800dee0 <pbuf_copy+0x188>)
 800ddfe:	f240 32d9 	movw	r2, #985	; 0x3d9
 800de02:	493a      	ldr	r1, [pc, #232]	; (800deec <pbuf_copy+0x194>)
 800de04:	4838      	ldr	r0, [pc, #224]	; (800dee8 <pbuf_copy+0x190>)
 800de06:	f00b fbb1 	bl	801956c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	895b      	ldrh	r3, [r3, #10]
 800de0e:	461a      	mov	r2, r3
 800de10:	693b      	ldr	r3, [r7, #16]
 800de12:	4293      	cmp	r3, r2
 800de14:	d906      	bls.n	800de24 <pbuf_copy+0xcc>
 800de16:	4b32      	ldr	r3, [pc, #200]	; (800dee0 <pbuf_copy+0x188>)
 800de18:	f240 32da 	movw	r2, #986	; 0x3da
 800de1c:	4934      	ldr	r1, [pc, #208]	; (800def0 <pbuf_copy+0x198>)
 800de1e:	4832      	ldr	r0, [pc, #200]	; (800dee8 <pbuf_copy+0x190>)
 800de20:	f00b fba4 	bl	801956c <iprintf>
    if (offset_from >= p_from->len) {
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	895b      	ldrh	r3, [r3, #10]
 800de28:	461a      	mov	r2, r3
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	4293      	cmp	r3, r2
 800de2e:	d304      	bcc.n	800de3a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800de30:	2300      	movs	r3, #0
 800de32:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	895b      	ldrh	r3, [r3, #10]
 800de3e:	461a      	mov	r2, r3
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	4293      	cmp	r3, r2
 800de44:	d114      	bne.n	800de70 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800de46:	2300      	movs	r3, #0
 800de48:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d10c      	bne.n	800de70 <pbuf_copy+0x118>
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d009      	beq.n	800de70 <pbuf_copy+0x118>
 800de5c:	4b20      	ldr	r3, [pc, #128]	; (800dee0 <pbuf_copy+0x188>)
 800de5e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800de62:	4924      	ldr	r1, [pc, #144]	; (800def4 <pbuf_copy+0x19c>)
 800de64:	4820      	ldr	r0, [pc, #128]	; (800dee8 <pbuf_copy+0x190>)
 800de66:	f00b fb81 	bl	801956c <iprintf>
 800de6a:	f06f 030f 	mvn.w	r3, #15
 800de6e:	e032      	b.n	800ded6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d013      	beq.n	800de9e <pbuf_copy+0x146>
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	895a      	ldrh	r2, [r3, #10]
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	891b      	ldrh	r3, [r3, #8]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d10d      	bne.n	800de9e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d009      	beq.n	800de9e <pbuf_copy+0x146>
 800de8a:	4b15      	ldr	r3, [pc, #84]	; (800dee0 <pbuf_copy+0x188>)
 800de8c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800de90:	4919      	ldr	r1, [pc, #100]	; (800def8 <pbuf_copy+0x1a0>)
 800de92:	4815      	ldr	r0, [pc, #84]	; (800dee8 <pbuf_copy+0x190>)
 800de94:	f00b fb6a 	bl	801956c <iprintf>
 800de98:	f06f 0305 	mvn.w	r3, #5
 800de9c:	e01b      	b.n	800ded6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d013      	beq.n	800decc <pbuf_copy+0x174>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	895a      	ldrh	r2, [r3, #10]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	891b      	ldrh	r3, [r3, #8]
 800deac:	429a      	cmp	r2, r3
 800deae:	d10d      	bne.n	800decc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d009      	beq.n	800decc <pbuf_copy+0x174>
 800deb8:	4b09      	ldr	r3, [pc, #36]	; (800dee0 <pbuf_copy+0x188>)
 800deba:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800debe:	490e      	ldr	r1, [pc, #56]	; (800def8 <pbuf_copy+0x1a0>)
 800dec0:	4809      	ldr	r0, [pc, #36]	; (800dee8 <pbuf_copy+0x190>)
 800dec2:	f00b fb53 	bl	801956c <iprintf>
 800dec6:	f06f 0305 	mvn.w	r3, #5
 800deca:	e004      	b.n	800ded6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	f47f af61 	bne.w	800dd96 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ded4:	2300      	movs	r3, #0
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3718      	adds	r7, #24
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
 800dede:	bf00      	nop
 800dee0:	0801bc68 	.word	0x0801bc68
 800dee4:	0801bf10 	.word	0x0801bf10
 800dee8:	0801bcc8 	.word	0x0801bcc8
 800deec:	0801bf40 	.word	0x0801bf40
 800def0:	0801bf58 	.word	0x0801bf58
 800def4:	0801bf74 	.word	0x0801bf74
 800def8:	0801bf84 	.word	0x0801bf84

0800defc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b088      	sub	sp, #32
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	4611      	mov	r1, r2
 800df08:	461a      	mov	r2, r3
 800df0a:	460b      	mov	r3, r1
 800df0c:	80fb      	strh	r3, [r7, #6]
 800df0e:	4613      	mov	r3, r2
 800df10:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800df12:	2300      	movs	r3, #0
 800df14:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800df16:	2300      	movs	r3, #0
 800df18:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d108      	bne.n	800df32 <pbuf_copy_partial+0x36>
 800df20:	4b2b      	ldr	r3, [pc, #172]	; (800dfd0 <pbuf_copy_partial+0xd4>)
 800df22:	f240 420a 	movw	r2, #1034	; 0x40a
 800df26:	492b      	ldr	r1, [pc, #172]	; (800dfd4 <pbuf_copy_partial+0xd8>)
 800df28:	482b      	ldr	r0, [pc, #172]	; (800dfd8 <pbuf_copy_partial+0xdc>)
 800df2a:	f00b fb1f 	bl	801956c <iprintf>
 800df2e:	2300      	movs	r3, #0
 800df30:	e04a      	b.n	800dfc8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d108      	bne.n	800df4a <pbuf_copy_partial+0x4e>
 800df38:	4b25      	ldr	r3, [pc, #148]	; (800dfd0 <pbuf_copy_partial+0xd4>)
 800df3a:	f240 420b 	movw	r2, #1035	; 0x40b
 800df3e:	4927      	ldr	r1, [pc, #156]	; (800dfdc <pbuf_copy_partial+0xe0>)
 800df40:	4825      	ldr	r0, [pc, #148]	; (800dfd8 <pbuf_copy_partial+0xdc>)
 800df42:	f00b fb13 	bl	801956c <iprintf>
 800df46:	2300      	movs	r3, #0
 800df48:	e03e      	b.n	800dfc8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	61fb      	str	r3, [r7, #28]
 800df4e:	e034      	b.n	800dfba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800df50:	88bb      	ldrh	r3, [r7, #4]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00a      	beq.n	800df6c <pbuf_copy_partial+0x70>
 800df56:	69fb      	ldr	r3, [r7, #28]
 800df58:	895b      	ldrh	r3, [r3, #10]
 800df5a:	88ba      	ldrh	r2, [r7, #4]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d305      	bcc.n	800df6c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	895b      	ldrh	r3, [r3, #10]
 800df64:	88ba      	ldrh	r2, [r7, #4]
 800df66:	1ad3      	subs	r3, r2, r3
 800df68:	80bb      	strh	r3, [r7, #4]
 800df6a:	e023      	b.n	800dfb4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	895a      	ldrh	r2, [r3, #10]
 800df70:	88bb      	ldrh	r3, [r7, #4]
 800df72:	1ad3      	subs	r3, r2, r3
 800df74:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800df76:	8b3a      	ldrh	r2, [r7, #24]
 800df78:	88fb      	ldrh	r3, [r7, #6]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d901      	bls.n	800df82 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800df7e:	88fb      	ldrh	r3, [r7, #6]
 800df80:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800df82:	8b7b      	ldrh	r3, [r7, #26]
 800df84:	68ba      	ldr	r2, [r7, #8]
 800df86:	18d0      	adds	r0, r2, r3
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	88bb      	ldrh	r3, [r7, #4]
 800df8e:	4413      	add	r3, r2
 800df90:	8b3a      	ldrh	r2, [r7, #24]
 800df92:	4619      	mov	r1, r3
 800df94:	f00b fabd 	bl	8019512 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800df98:	8afa      	ldrh	r2, [r7, #22]
 800df9a:	8b3b      	ldrh	r3, [r7, #24]
 800df9c:	4413      	add	r3, r2
 800df9e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dfa0:	8b7a      	ldrh	r2, [r7, #26]
 800dfa2:	8b3b      	ldrh	r3, [r7, #24]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dfa8:	88fa      	ldrh	r2, [r7, #6]
 800dfaa:	8b3b      	ldrh	r3, [r7, #24]
 800dfac:	1ad3      	subs	r3, r2, r3
 800dfae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	61fb      	str	r3, [r7, #28]
 800dfba:	88fb      	ldrh	r3, [r7, #6]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d002      	beq.n	800dfc6 <pbuf_copy_partial+0xca>
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d1c4      	bne.n	800df50 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800dfc6:	8afb      	ldrh	r3, [r7, #22]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3720      	adds	r7, #32
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	0801bc68 	.word	0x0801bc68
 800dfd4:	0801bfb0 	.word	0x0801bfb0
 800dfd8:	0801bcc8 	.word	0x0801bcc8
 800dfdc:	0801bfd0 	.word	0x0801bfd0

0800dfe0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	603a      	str	r2, [r7, #0]
 800dfea:	71fb      	strb	r3, [r7, #7]
 800dfec:	460b      	mov	r3, r1
 800dfee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	8919      	ldrh	r1, [r3, #8]
 800dff4:	88ba      	ldrh	r2, [r7, #4]
 800dff6:	79fb      	ldrb	r3, [r7, #7]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7ff fa99 	bl	800d530 <pbuf_alloc>
 800dffe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d101      	bne.n	800e00a <pbuf_clone+0x2a>
    return NULL;
 800e006:	2300      	movs	r3, #0
 800e008:	e011      	b.n	800e02e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e00a:	6839      	ldr	r1, [r7, #0]
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f7ff fea3 	bl	800dd58 <pbuf_copy>
 800e012:	4603      	mov	r3, r0
 800e014:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e016:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d006      	beq.n	800e02c <pbuf_clone+0x4c>
 800e01e:	4b06      	ldr	r3, [pc, #24]	; (800e038 <pbuf_clone+0x58>)
 800e020:	f240 5224 	movw	r2, #1316	; 0x524
 800e024:	4905      	ldr	r1, [pc, #20]	; (800e03c <pbuf_clone+0x5c>)
 800e026:	4806      	ldr	r0, [pc, #24]	; (800e040 <pbuf_clone+0x60>)
 800e028:	f00b faa0 	bl	801956c <iprintf>
  return q;
 800e02c:	68fb      	ldr	r3, [r7, #12]
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3710      	adds	r7, #16
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	0801bc68 	.word	0x0801bc68
 800e03c:	0801c0dc 	.word	0x0801c0dc
 800e040:	0801bcc8 	.word	0x0801bcc8

0800e044 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e048:	f00b faa8 	bl	801959c <rand>
 800e04c:	4603      	mov	r3, r0
 800e04e:	b29b      	uxth	r3, r3
 800e050:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e054:	b29b      	uxth	r3, r3
 800e056:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e05a:	b29a      	uxth	r2, r3
 800e05c:	4b01      	ldr	r3, [pc, #4]	; (800e064 <tcp_init+0x20>)
 800e05e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e060:	bf00      	nop
 800e062:	bd80      	pop	{r7, pc}
 800e064:	20000010 	.word	0x20000010

0800e068 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	7d1b      	ldrb	r3, [r3, #20]
 800e074:	2b01      	cmp	r3, #1
 800e076:	d105      	bne.n	800e084 <tcp_free+0x1c>
 800e078:	4b06      	ldr	r3, [pc, #24]	; (800e094 <tcp_free+0x2c>)
 800e07a:	22d4      	movs	r2, #212	; 0xd4
 800e07c:	4906      	ldr	r1, [pc, #24]	; (800e098 <tcp_free+0x30>)
 800e07e:	4807      	ldr	r0, [pc, #28]	; (800e09c <tcp_free+0x34>)
 800e080:	f00b fa74 	bl	801956c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e084:	6879      	ldr	r1, [r7, #4]
 800e086:	2001      	movs	r0, #1
 800e088:	f7fe fe86 	bl	800cd98 <memp_free>
}
 800e08c:	bf00      	nop
 800e08e:	3708      	adds	r7, #8
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}
 800e094:	0801c168 	.word	0x0801c168
 800e098:	0801c198 	.word	0x0801c198
 800e09c:	0801c1ac 	.word	0x0801c1ac

0800e0a0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	7d1b      	ldrb	r3, [r3, #20]
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d105      	bne.n	800e0bc <tcp_free_listen+0x1c>
 800e0b0:	4b06      	ldr	r3, [pc, #24]	; (800e0cc <tcp_free_listen+0x2c>)
 800e0b2:	22df      	movs	r2, #223	; 0xdf
 800e0b4:	4906      	ldr	r1, [pc, #24]	; (800e0d0 <tcp_free_listen+0x30>)
 800e0b6:	4807      	ldr	r0, [pc, #28]	; (800e0d4 <tcp_free_listen+0x34>)
 800e0b8:	f00b fa58 	bl	801956c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e0bc:	6879      	ldr	r1, [r7, #4]
 800e0be:	2002      	movs	r0, #2
 800e0c0:	f7fe fe6a 	bl	800cd98 <memp_free>
}
 800e0c4:	bf00      	nop
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}
 800e0cc:	0801c168 	.word	0x0801c168
 800e0d0:	0801c1d4 	.word	0x0801c1d4
 800e0d4:	0801c1ac 	.word	0x0801c1ac

0800e0d8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e0dc:	f001 f8ac 	bl	800f238 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e0e0:	4b07      	ldr	r3, [pc, #28]	; (800e100 <tcp_tmr+0x28>)
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	b2da      	uxtb	r2, r3
 800e0e8:	4b05      	ldr	r3, [pc, #20]	; (800e100 <tcp_tmr+0x28>)
 800e0ea:	701a      	strb	r2, [r3, #0]
 800e0ec:	4b04      	ldr	r3, [pc, #16]	; (800e100 <tcp_tmr+0x28>)
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	f003 0301 	and.w	r3, r3, #1
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d001      	beq.n	800e0fc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e0f8:	f000 fd60 	bl	800ebbc <tcp_slowtmr>
  }
}
 800e0fc:	bf00      	nop
 800e0fe:	bd80      	pop	{r7, pc}
 800e100:	20010255 	.word	0x20010255

0800e104 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d105      	bne.n	800e120 <tcp_remove_listener+0x1c>
 800e114:	4b0d      	ldr	r3, [pc, #52]	; (800e14c <tcp_remove_listener+0x48>)
 800e116:	22ff      	movs	r2, #255	; 0xff
 800e118:	490d      	ldr	r1, [pc, #52]	; (800e150 <tcp_remove_listener+0x4c>)
 800e11a:	480e      	ldr	r0, [pc, #56]	; (800e154 <tcp_remove_listener+0x50>)
 800e11c:	f00b fa26 	bl	801956c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	60fb      	str	r3, [r7, #12]
 800e124:	e00a      	b.n	800e13c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e12a:	683a      	ldr	r2, [r7, #0]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d102      	bne.n	800e136 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2200      	movs	r2, #0
 800e134:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	60fb      	str	r3, [r7, #12]
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d1f1      	bne.n	800e126 <tcp_remove_listener+0x22>
    }
  }
}
 800e142:	bf00      	nop
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	0801c168 	.word	0x0801c168
 800e150:	0801c1f0 	.word	0x0801c1f0
 800e154:	0801c1ac 	.word	0x0801c1ac

0800e158 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b084      	sub	sp, #16
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d106      	bne.n	800e174 <tcp_listen_closed+0x1c>
 800e166:	4b14      	ldr	r3, [pc, #80]	; (800e1b8 <tcp_listen_closed+0x60>)
 800e168:	f240 1211 	movw	r2, #273	; 0x111
 800e16c:	4913      	ldr	r1, [pc, #76]	; (800e1bc <tcp_listen_closed+0x64>)
 800e16e:	4814      	ldr	r0, [pc, #80]	; (800e1c0 <tcp_listen_closed+0x68>)
 800e170:	f00b f9fc 	bl	801956c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	7d1b      	ldrb	r3, [r3, #20]
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d006      	beq.n	800e18a <tcp_listen_closed+0x32>
 800e17c:	4b0e      	ldr	r3, [pc, #56]	; (800e1b8 <tcp_listen_closed+0x60>)
 800e17e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e182:	4910      	ldr	r1, [pc, #64]	; (800e1c4 <tcp_listen_closed+0x6c>)
 800e184:	480e      	ldr	r0, [pc, #56]	; (800e1c0 <tcp_listen_closed+0x68>)
 800e186:	f00b f9f1 	bl	801956c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e18a:	2301      	movs	r3, #1
 800e18c:	60fb      	str	r3, [r7, #12]
 800e18e:	e00b      	b.n	800e1a8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e190:	4a0d      	ldr	r2, [pc, #52]	; (800e1c8 <tcp_listen_closed+0x70>)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	6879      	ldr	r1, [r7, #4]
 800e19c:	4618      	mov	r0, r3
 800e19e:	f7ff ffb1 	bl	800e104 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	60fb      	str	r3, [r7, #12]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2b03      	cmp	r3, #3
 800e1ac:	d9f0      	bls.n	800e190 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e1ae:	bf00      	nop
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	0801c168 	.word	0x0801c168
 800e1bc:	0801c218 	.word	0x0801c218
 800e1c0:	0801c1ac 	.word	0x0801c1ac
 800e1c4:	0801c224 	.word	0x0801c224
 800e1c8:	08023038 	.word	0x08023038

0800e1cc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e1cc:	b5b0      	push	{r4, r5, r7, lr}
 800e1ce:	b088      	sub	sp, #32
 800e1d0:	af04      	add	r7, sp, #16
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d106      	bne.n	800e1ec <tcp_close_shutdown+0x20>
 800e1de:	4b61      	ldr	r3, [pc, #388]	; (800e364 <tcp_close_shutdown+0x198>)
 800e1e0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e1e4:	4960      	ldr	r1, [pc, #384]	; (800e368 <tcp_close_shutdown+0x19c>)
 800e1e6:	4861      	ldr	r0, [pc, #388]	; (800e36c <tcp_close_shutdown+0x1a0>)
 800e1e8:	f00b f9c0 	bl	801956c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e1ec:	78fb      	ldrb	r3, [r7, #3]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d066      	beq.n	800e2c0 <tcp_close_shutdown+0xf4>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	7d1b      	ldrb	r3, [r3, #20]
 800e1f6:	2b04      	cmp	r3, #4
 800e1f8:	d003      	beq.n	800e202 <tcp_close_shutdown+0x36>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	7d1b      	ldrb	r3, [r3, #20]
 800e1fe:	2b07      	cmp	r3, #7
 800e200:	d15e      	bne.n	800e2c0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e206:	2b00      	cmp	r3, #0
 800e208:	d104      	bne.n	800e214 <tcp_close_shutdown+0x48>
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e20e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e212:	d055      	beq.n	800e2c0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	8b5b      	ldrh	r3, [r3, #26]
 800e218:	f003 0310 	and.w	r3, r3, #16
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d106      	bne.n	800e22e <tcp_close_shutdown+0x62>
 800e220:	4b50      	ldr	r3, [pc, #320]	; (800e364 <tcp_close_shutdown+0x198>)
 800e222:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e226:	4952      	ldr	r1, [pc, #328]	; (800e370 <tcp_close_shutdown+0x1a4>)
 800e228:	4850      	ldr	r0, [pc, #320]	; (800e36c <tcp_close_shutdown+0x1a0>)
 800e22a:	f00b f99f 	bl	801956c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e236:	687d      	ldr	r5, [r7, #4]
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	3304      	adds	r3, #4
 800e23c:	687a      	ldr	r2, [r7, #4]
 800e23e:	8ad2      	ldrh	r2, [r2, #22]
 800e240:	6879      	ldr	r1, [r7, #4]
 800e242:	8b09      	ldrh	r1, [r1, #24]
 800e244:	9102      	str	r1, [sp, #8]
 800e246:	9201      	str	r2, [sp, #4]
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	462b      	mov	r3, r5
 800e24c:	4622      	mov	r2, r4
 800e24e:	4601      	mov	r1, r0
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f005 fde9 	bl	8013e28 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f001 fbba 	bl	800f9d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e25c:	4b45      	ldr	r3, [pc, #276]	; (800e374 <tcp_close_shutdown+0x1a8>)
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	429a      	cmp	r2, r3
 800e264:	d105      	bne.n	800e272 <tcp_close_shutdown+0xa6>
 800e266:	4b43      	ldr	r3, [pc, #268]	; (800e374 <tcp_close_shutdown+0x1a8>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	68db      	ldr	r3, [r3, #12]
 800e26c:	4a41      	ldr	r2, [pc, #260]	; (800e374 <tcp_close_shutdown+0x1a8>)
 800e26e:	6013      	str	r3, [r2, #0]
 800e270:	e013      	b.n	800e29a <tcp_close_shutdown+0xce>
 800e272:	4b40      	ldr	r3, [pc, #256]	; (800e374 <tcp_close_shutdown+0x1a8>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	60fb      	str	r3, [r7, #12]
 800e278:	e00c      	b.n	800e294 <tcp_close_shutdown+0xc8>
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	68db      	ldr	r3, [r3, #12]
 800e27e:	687a      	ldr	r2, [r7, #4]
 800e280:	429a      	cmp	r2, r3
 800e282:	d104      	bne.n	800e28e <tcp_close_shutdown+0xc2>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	68da      	ldr	r2, [r3, #12]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	60da      	str	r2, [r3, #12]
 800e28c:	e005      	b.n	800e29a <tcp_close_shutdown+0xce>
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	68db      	ldr	r3, [r3, #12]
 800e292:	60fb      	str	r3, [r7, #12]
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d1ef      	bne.n	800e27a <tcp_close_shutdown+0xae>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2200      	movs	r2, #0
 800e29e:	60da      	str	r2, [r3, #12]
 800e2a0:	4b35      	ldr	r3, [pc, #212]	; (800e378 <tcp_close_shutdown+0x1ac>)
 800e2a2:	2201      	movs	r2, #1
 800e2a4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e2a6:	4b35      	ldr	r3, [pc, #212]	; (800e37c <tcp_close_shutdown+0x1b0>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	687a      	ldr	r2, [r7, #4]
 800e2ac:	429a      	cmp	r2, r3
 800e2ae:	d102      	bne.n	800e2b6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e2b0:	f004 f84c 	bl	801234c <tcp_trigger_input_pcb_close>
 800e2b4:	e002      	b.n	800e2bc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f7ff fed6 	bl	800e068 <tcp_free>
      }
      return ERR_OK;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	e04d      	b.n	800e35c <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	7d1b      	ldrb	r3, [r3, #20]
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d02d      	beq.n	800e324 <tcp_close_shutdown+0x158>
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d036      	beq.n	800e33a <tcp_close_shutdown+0x16e>
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d13f      	bne.n	800e350 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	8adb      	ldrh	r3, [r3, #22]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d021      	beq.n	800e31c <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e2d8:	4b29      	ldr	r3, [pc, #164]	; (800e380 <tcp_close_shutdown+0x1b4>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d105      	bne.n	800e2ee <tcp_close_shutdown+0x122>
 800e2e2:	4b27      	ldr	r3, [pc, #156]	; (800e380 <tcp_close_shutdown+0x1b4>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	4a25      	ldr	r2, [pc, #148]	; (800e380 <tcp_close_shutdown+0x1b4>)
 800e2ea:	6013      	str	r3, [r2, #0]
 800e2ec:	e013      	b.n	800e316 <tcp_close_shutdown+0x14a>
 800e2ee:	4b24      	ldr	r3, [pc, #144]	; (800e380 <tcp_close_shutdown+0x1b4>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	60bb      	str	r3, [r7, #8]
 800e2f4:	e00c      	b.n	800e310 <tcp_close_shutdown+0x144>
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d104      	bne.n	800e30a <tcp_close_shutdown+0x13e>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	68da      	ldr	r2, [r3, #12]
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	60da      	str	r2, [r3, #12]
 800e308:	e005      	b.n	800e316 <tcp_close_shutdown+0x14a>
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	68db      	ldr	r3, [r3, #12]
 800e30e:	60bb      	str	r3, [r7, #8]
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d1ef      	bne.n	800e2f6 <tcp_close_shutdown+0x12a>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2200      	movs	r2, #0
 800e31a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f7ff fea3 	bl	800e068 <tcp_free>
      break;
 800e322:	e01a      	b.n	800e35a <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f7ff ff17 	bl	800e158 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e32a:	6879      	ldr	r1, [r7, #4]
 800e32c:	4815      	ldr	r0, [pc, #84]	; (800e384 <tcp_close_shutdown+0x1b8>)
 800e32e:	f001 fb9f 	bl	800fa70 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f7ff feb4 	bl	800e0a0 <tcp_free_listen>
      break;
 800e338:	e00f      	b.n	800e35a <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e33a:	6879      	ldr	r1, [r7, #4]
 800e33c:	480d      	ldr	r0, [pc, #52]	; (800e374 <tcp_close_shutdown+0x1a8>)
 800e33e:	f001 fb97 	bl	800fa70 <tcp_pcb_remove>
 800e342:	4b0d      	ldr	r3, [pc, #52]	; (800e378 <tcp_close_shutdown+0x1ac>)
 800e344:	2201      	movs	r2, #1
 800e346:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f7ff fe8d 	bl	800e068 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e34e:	e004      	b.n	800e35a <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f000 f819 	bl	800e388 <tcp_close_shutdown_fin>
 800e356:	4603      	mov	r3, r0
 800e358:	e000      	b.n	800e35c <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800e35a:	2300      	movs	r3, #0
}
 800e35c:	4618      	mov	r0, r3
 800e35e:	3710      	adds	r7, #16
 800e360:	46bd      	mov	sp, r7
 800e362:	bdb0      	pop	{r4, r5, r7, pc}
 800e364:	0801c168 	.word	0x0801c168
 800e368:	0801c23c 	.word	0x0801c23c
 800e36c:	0801c1ac 	.word	0x0801c1ac
 800e370:	0801c25c 	.word	0x0801c25c
 800e374:	20016e14 	.word	0x20016e14
 800e378:	20016e10 	.word	0x20016e10
 800e37c:	20016e28 	.word	0x20016e28
 800e380:	20016e20 	.word	0x20016e20
 800e384:	20016e1c 	.word	0x20016e1c

0800e388 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b084      	sub	sp, #16
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d106      	bne.n	800e3a4 <tcp_close_shutdown_fin+0x1c>
 800e396:	4b2c      	ldr	r3, [pc, #176]	; (800e448 <tcp_close_shutdown_fin+0xc0>)
 800e398:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e39c:	492b      	ldr	r1, [pc, #172]	; (800e44c <tcp_close_shutdown_fin+0xc4>)
 800e39e:	482c      	ldr	r0, [pc, #176]	; (800e450 <tcp_close_shutdown_fin+0xc8>)
 800e3a0:	f00b f8e4 	bl	801956c <iprintf>

  switch (pcb->state) {
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	7d1b      	ldrb	r3, [r3, #20]
 800e3a8:	2b04      	cmp	r3, #4
 800e3aa:	d010      	beq.n	800e3ce <tcp_close_shutdown_fin+0x46>
 800e3ac:	2b07      	cmp	r3, #7
 800e3ae:	d01b      	beq.n	800e3e8 <tcp_close_shutdown_fin+0x60>
 800e3b0:	2b03      	cmp	r3, #3
 800e3b2:	d126      	bne.n	800e402 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f004 fe35 	bl	8013024 <tcp_send_fin>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d11f      	bne.n	800e406 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2205      	movs	r2, #5
 800e3ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e3cc:	e01b      	b.n	800e406 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f004 fe28 	bl	8013024 <tcp_send_fin>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e3d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d114      	bne.n	800e40a <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2205      	movs	r2, #5
 800e3e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e3e6:	e010      	b.n	800e40a <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f004 fe1b 	bl	8013024 <tcp_send_fin>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e3f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d109      	bne.n	800e40e <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2209      	movs	r2, #9
 800e3fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e400:	e005      	b.n	800e40e <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e402:	2300      	movs	r3, #0
 800e404:	e01c      	b.n	800e440 <tcp_close_shutdown_fin+0xb8>
      break;
 800e406:	bf00      	nop
 800e408:	e002      	b.n	800e410 <tcp_close_shutdown_fin+0x88>
      break;
 800e40a:	bf00      	nop
 800e40c:	e000      	b.n	800e410 <tcp_close_shutdown_fin+0x88>
      break;
 800e40e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e410:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d103      	bne.n	800e420 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f004 ff41 	bl	80132a0 <tcp_output>
 800e41e:	e00d      	b.n	800e43c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800e420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e424:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e428:	d108      	bne.n	800e43c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	8b5b      	ldrh	r3, [r3, #26]
 800e42e:	f043 0308 	orr.w	r3, r3, #8
 800e432:	b29a      	uxth	r2, r3
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e438:	2300      	movs	r3, #0
 800e43a:	e001      	b.n	800e440 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800e43c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e440:	4618      	mov	r0, r3
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}
 800e448:	0801c168 	.word	0x0801c168
 800e44c:	0801c218 	.word	0x0801c218
 800e450:	0801c1ac 	.word	0x0801c1ac

0800e454 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d109      	bne.n	800e476 <tcp_close+0x22>
 800e462:	4b0f      	ldr	r3, [pc, #60]	; (800e4a0 <tcp_close+0x4c>)
 800e464:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e468:	490e      	ldr	r1, [pc, #56]	; (800e4a4 <tcp_close+0x50>)
 800e46a:	480f      	ldr	r0, [pc, #60]	; (800e4a8 <tcp_close+0x54>)
 800e46c:	f00b f87e 	bl	801956c <iprintf>
 800e470:	f06f 030f 	mvn.w	r3, #15
 800e474:	e00f      	b.n	800e496 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	7d1b      	ldrb	r3, [r3, #20]
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d006      	beq.n	800e48c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	8b5b      	ldrh	r3, [r3, #26]
 800e482:	f043 0310 	orr.w	r3, r3, #16
 800e486:	b29a      	uxth	r2, r3
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e48c:	2101      	movs	r1, #1
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7ff fe9c 	bl	800e1cc <tcp_close_shutdown>
 800e494:	4603      	mov	r3, r0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3708      	adds	r7, #8
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	0801c168 	.word	0x0801c168
 800e4a4:	0801c278 	.word	0x0801c278
 800e4a8:	0801c1ac 	.word	0x0801c1ac

0800e4ac <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b084      	sub	sp, #16
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	60b9      	str	r1, [r7, #8]
 800e4b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d109      	bne.n	800e4d2 <tcp_shutdown+0x26>
 800e4be:	4b25      	ldr	r3, [pc, #148]	; (800e554 <tcp_shutdown+0xa8>)
 800e4c0:	f240 2207 	movw	r2, #519	; 0x207
 800e4c4:	4924      	ldr	r1, [pc, #144]	; (800e558 <tcp_shutdown+0xac>)
 800e4c6:	4825      	ldr	r0, [pc, #148]	; (800e55c <tcp_shutdown+0xb0>)
 800e4c8:	f00b f850 	bl	801956c <iprintf>
 800e4cc:	f06f 030f 	mvn.w	r3, #15
 800e4d0:	e03c      	b.n	800e54c <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	7d1b      	ldrb	r3, [r3, #20]
 800e4d6:	2b01      	cmp	r3, #1
 800e4d8:	d102      	bne.n	800e4e0 <tcp_shutdown+0x34>
    return ERR_CONN;
 800e4da:	f06f 030a 	mvn.w	r3, #10
 800e4de:	e035      	b.n	800e54c <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d01b      	beq.n	800e51e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	8b5b      	ldrh	r3, [r3, #26]
 800e4ea:	f043 0310 	orr.w	r3, r3, #16
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d005      	beq.n	800e506 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800e4fa:	2101      	movs	r1, #1
 800e4fc:	68f8      	ldr	r0, [r7, #12]
 800e4fe:	f7ff fe65 	bl	800e1cc <tcp_close_shutdown>
 800e502:	4603      	mov	r3, r0
 800e504:	e022      	b.n	800e54c <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d007      	beq.n	800e51e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e512:	4618      	mov	r0, r3
 800e514:	f7ff faec 	bl	800daf0 <pbuf_free>
      pcb->refused_data = NULL;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	2200      	movs	r2, #0
 800e51c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d012      	beq.n	800e54a <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	7d1b      	ldrb	r3, [r3, #20]
 800e528:	2b03      	cmp	r3, #3
 800e52a:	db0b      	blt.n	800e544 <tcp_shutdown+0x98>
 800e52c:	2b04      	cmp	r3, #4
 800e52e:	dd01      	ble.n	800e534 <tcp_shutdown+0x88>
 800e530:	2b07      	cmp	r3, #7
 800e532:	d107      	bne.n	800e544 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	b2db      	uxtb	r3, r3
 800e538:	4619      	mov	r1, r3
 800e53a:	68f8      	ldr	r0, [r7, #12]
 800e53c:	f7ff fe46 	bl	800e1cc <tcp_close_shutdown>
 800e540:	4603      	mov	r3, r0
 800e542:	e003      	b.n	800e54c <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800e544:	f06f 030a 	mvn.w	r3, #10
 800e548:	e000      	b.n	800e54c <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800e54a:	2300      	movs	r3, #0
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3710      	adds	r7, #16
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	0801c168 	.word	0x0801c168
 800e558:	0801c290 	.word	0x0801c290
 800e55c:	0801c1ac 	.word	0x0801c1ac

0800e560 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e560:	b580      	push	{r7, lr}
 800e562:	b08e      	sub	sp, #56	; 0x38
 800e564:	af04      	add	r7, sp, #16
 800e566:	6078      	str	r0, [r7, #4]
 800e568:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d107      	bne.n	800e580 <tcp_abandon+0x20>
 800e570:	4b52      	ldr	r3, [pc, #328]	; (800e6bc <tcp_abandon+0x15c>)
 800e572:	f240 223d 	movw	r2, #573	; 0x23d
 800e576:	4952      	ldr	r1, [pc, #328]	; (800e6c0 <tcp_abandon+0x160>)
 800e578:	4852      	ldr	r0, [pc, #328]	; (800e6c4 <tcp_abandon+0x164>)
 800e57a:	f00a fff7 	bl	801956c <iprintf>
 800e57e:	e099      	b.n	800e6b4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	7d1b      	ldrb	r3, [r3, #20]
 800e584:	2b01      	cmp	r3, #1
 800e586:	d106      	bne.n	800e596 <tcp_abandon+0x36>
 800e588:	4b4c      	ldr	r3, [pc, #304]	; (800e6bc <tcp_abandon+0x15c>)
 800e58a:	f240 2241 	movw	r2, #577	; 0x241
 800e58e:	494e      	ldr	r1, [pc, #312]	; (800e6c8 <tcp_abandon+0x168>)
 800e590:	484c      	ldr	r0, [pc, #304]	; (800e6c4 <tcp_abandon+0x164>)
 800e592:	f00a ffeb 	bl	801956c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	7d1b      	ldrb	r3, [r3, #20]
 800e59a:	2b0a      	cmp	r3, #10
 800e59c:	d107      	bne.n	800e5ae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e59e:	6879      	ldr	r1, [r7, #4]
 800e5a0:	484a      	ldr	r0, [pc, #296]	; (800e6cc <tcp_abandon+0x16c>)
 800e5a2:	f001 fa65 	bl	800fa70 <tcp_pcb_remove>
    tcp_free(pcb);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f7ff fd5e 	bl	800e068 <tcp_free>
 800e5ac:	e082      	b.n	800e6b4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5ba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5c0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5c8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	691b      	ldr	r3, [r3, #16]
 800e5ce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	7d1b      	ldrb	r3, [r3, #20]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d126      	bne.n	800e626 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	8adb      	ldrh	r3, [r3, #22]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d02e      	beq.n	800e63e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e5e0:	4b3b      	ldr	r3, [pc, #236]	; (800e6d0 <tcp_abandon+0x170>)
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	687a      	ldr	r2, [r7, #4]
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	d105      	bne.n	800e5f6 <tcp_abandon+0x96>
 800e5ea:	4b39      	ldr	r3, [pc, #228]	; (800e6d0 <tcp_abandon+0x170>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	4a37      	ldr	r2, [pc, #220]	; (800e6d0 <tcp_abandon+0x170>)
 800e5f2:	6013      	str	r3, [r2, #0]
 800e5f4:	e013      	b.n	800e61e <tcp_abandon+0xbe>
 800e5f6:	4b36      	ldr	r3, [pc, #216]	; (800e6d0 <tcp_abandon+0x170>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	61fb      	str	r3, [r7, #28]
 800e5fc:	e00c      	b.n	800e618 <tcp_abandon+0xb8>
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	429a      	cmp	r2, r3
 800e606:	d104      	bne.n	800e612 <tcp_abandon+0xb2>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	68da      	ldr	r2, [r3, #12]
 800e60c:	69fb      	ldr	r3, [r7, #28]
 800e60e:	60da      	str	r2, [r3, #12]
 800e610:	e005      	b.n	800e61e <tcp_abandon+0xbe>
 800e612:	69fb      	ldr	r3, [r7, #28]
 800e614:	68db      	ldr	r3, [r3, #12]
 800e616:	61fb      	str	r3, [r7, #28]
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d1ef      	bne.n	800e5fe <tcp_abandon+0x9e>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2200      	movs	r2, #0
 800e622:	60da      	str	r2, [r3, #12]
 800e624:	e00b      	b.n	800e63e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	8adb      	ldrh	r3, [r3, #22]
 800e62e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e630:	6879      	ldr	r1, [r7, #4]
 800e632:	4828      	ldr	r0, [pc, #160]	; (800e6d4 <tcp_abandon+0x174>)
 800e634:	f001 fa1c 	bl	800fa70 <tcp_pcb_remove>
 800e638:	4b27      	ldr	r3, [pc, #156]	; (800e6d8 <tcp_abandon+0x178>)
 800e63a:	2201      	movs	r2, #1
 800e63c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e642:	2b00      	cmp	r3, #0
 800e644:	d004      	beq.n	800e650 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e64a:	4618      	mov	r0, r3
 800e64c:	f000 fed4 	bl	800f3f8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e654:	2b00      	cmp	r3, #0
 800e656:	d004      	beq.n	800e662 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e65c:	4618      	mov	r0, r3
 800e65e:	f000 fecb 	bl	800f3f8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e666:	2b00      	cmp	r3, #0
 800e668:	d004      	beq.n	800e674 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e66e:	4618      	mov	r0, r3
 800e670:	f000 fec2 	bl	800f3f8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e676:	2b00      	cmp	r3, #0
 800e678:	d00e      	beq.n	800e698 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e67a:	6879      	ldr	r1, [r7, #4]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	3304      	adds	r3, #4
 800e680:	687a      	ldr	r2, [r7, #4]
 800e682:	8b12      	ldrh	r2, [r2, #24]
 800e684:	9202      	str	r2, [sp, #8]
 800e686:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e688:	9201      	str	r2, [sp, #4]
 800e68a:	9300      	str	r3, [sp, #0]
 800e68c:	460b      	mov	r3, r1
 800e68e:	697a      	ldr	r2, [r7, #20]
 800e690:	69b9      	ldr	r1, [r7, #24]
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f005 fbc8 	bl	8013e28 <tcp_rst>
    }
    last_state = pcb->state;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	7d1b      	ldrb	r3, [r3, #20]
 800e69c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7ff fce2 	bl	800e068 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d004      	beq.n	800e6b4 <tcp_abandon+0x154>
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	f06f 010c 	mvn.w	r1, #12
 800e6b0:	68f8      	ldr	r0, [r7, #12]
 800e6b2:	4798      	blx	r3
  }
}
 800e6b4:	3728      	adds	r7, #40	; 0x28
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	0801c168 	.word	0x0801c168
 800e6c0:	0801c2ac 	.word	0x0801c2ac
 800e6c4:	0801c1ac 	.word	0x0801c1ac
 800e6c8:	0801c2c8 	.word	0x0801c2c8
 800e6cc:	20016e24 	.word	0x20016e24
 800e6d0:	20016e20 	.word	0x20016e20
 800e6d4:	20016e14 	.word	0x20016e14
 800e6d8:	20016e10 	.word	0x20016e10

0800e6dc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e6e4:	2101      	movs	r1, #1
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7ff ff3a 	bl	800e560 <tcp_abandon>
}
 800e6ec:	bf00      	nop
 800e6ee:	3708      	adds	r7, #8
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}

0800e6f4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b088      	sub	sp, #32
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	60f8      	str	r0, [r7, #12]
 800e6fc:	60b9      	str	r1, [r7, #8]
 800e6fe:	4613      	mov	r3, r2
 800e700:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e702:	2304      	movs	r3, #4
 800e704:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d101      	bne.n	800e710 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e70c:	4b3e      	ldr	r3, [pc, #248]	; (800e808 <tcp_bind+0x114>)
 800e70e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d109      	bne.n	800e72a <tcp_bind+0x36>
 800e716:	4b3d      	ldr	r3, [pc, #244]	; (800e80c <tcp_bind+0x118>)
 800e718:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e71c:	493c      	ldr	r1, [pc, #240]	; (800e810 <tcp_bind+0x11c>)
 800e71e:	483d      	ldr	r0, [pc, #244]	; (800e814 <tcp_bind+0x120>)
 800e720:	f00a ff24 	bl	801956c <iprintf>
 800e724:	f06f 030f 	mvn.w	r3, #15
 800e728:	e06a      	b.n	800e800 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	7d1b      	ldrb	r3, [r3, #20]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d009      	beq.n	800e746 <tcp_bind+0x52>
 800e732:	4b36      	ldr	r3, [pc, #216]	; (800e80c <tcp_bind+0x118>)
 800e734:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e738:	4937      	ldr	r1, [pc, #220]	; (800e818 <tcp_bind+0x124>)
 800e73a:	4836      	ldr	r0, [pc, #216]	; (800e814 <tcp_bind+0x120>)
 800e73c:	f00a ff16 	bl	801956c <iprintf>
 800e740:	f06f 0305 	mvn.w	r3, #5
 800e744:	e05c      	b.n	800e800 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e746:	88fb      	ldrh	r3, [r7, #6]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d109      	bne.n	800e760 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e74c:	f000 f9f0 	bl	800eb30 <tcp_new_port>
 800e750:	4603      	mov	r3, r0
 800e752:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e754:	88fb      	ldrh	r3, [r7, #6]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d135      	bne.n	800e7c6 <tcp_bind+0xd2>
      return ERR_BUF;
 800e75a:	f06f 0301 	mvn.w	r3, #1
 800e75e:	e04f      	b.n	800e800 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e760:	2300      	movs	r3, #0
 800e762:	61fb      	str	r3, [r7, #28]
 800e764:	e02b      	b.n	800e7be <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e766:	4a2d      	ldr	r2, [pc, #180]	; (800e81c <tcp_bind+0x128>)
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	61bb      	str	r3, [r7, #24]
 800e772:	e01e      	b.n	800e7b2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e774:	69bb      	ldr	r3, [r7, #24]
 800e776:	8adb      	ldrh	r3, [r3, #22]
 800e778:	88fa      	ldrh	r2, [r7, #6]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d116      	bne.n	800e7ac <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e77e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e780:	2b00      	cmp	r3, #0
 800e782:	d010      	beq.n	800e7a6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e784:	69bb      	ldr	r3, [r7, #24]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d00c      	beq.n	800e7a6 <tcp_bind+0xb2>
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d009      	beq.n	800e7a6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d005      	beq.n	800e7a6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	681a      	ldr	r2, [r3, #0]
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d102      	bne.n	800e7ac <tcp_bind+0xb8>
              return ERR_USE;
 800e7a6:	f06f 0307 	mvn.w	r3, #7
 800e7aa:	e029      	b.n	800e800 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e7ac:	69bb      	ldr	r3, [r7, #24]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	61bb      	str	r3, [r7, #24]
 800e7b2:	69bb      	ldr	r3, [r7, #24]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d1dd      	bne.n	800e774 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	61fb      	str	r3, [r7, #28]
 800e7be:	69fa      	ldr	r2, [r7, #28]
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	dbcf      	blt.n	800e766 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00c      	beq.n	800e7e6 <tcp_bind+0xf2>
 800e7cc:	68bb      	ldr	r3, [r7, #8]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d008      	beq.n	800e7e6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d002      	beq.n	800e7e0 <tcp_bind+0xec>
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	e000      	b.n	800e7e2 <tcp_bind+0xee>
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	68fa      	ldr	r2, [r7, #12]
 800e7e4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	88fa      	ldrh	r2, [r7, #6]
 800e7ea:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e7ec:	4b0c      	ldr	r3, [pc, #48]	; (800e820 <tcp_bind+0x12c>)
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	60da      	str	r2, [r3, #12]
 800e7f4:	4a0a      	ldr	r2, [pc, #40]	; (800e820 <tcp_bind+0x12c>)
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	6013      	str	r3, [r2, #0]
 800e7fa:	f005 fcd7 	bl	80141ac <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3720      	adds	r7, #32
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}
 800e808:	08023070 	.word	0x08023070
 800e80c:	0801c168 	.word	0x0801c168
 800e810:	0801c2fc 	.word	0x0801c2fc
 800e814:	0801c1ac 	.word	0x0801c1ac
 800e818:	0801c314 	.word	0x0801c314
 800e81c:	08023038 	.word	0x08023038
 800e820:	20016e20 	.word	0x20016e20

0800e824 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	4613      	mov	r3, r2
 800e830:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d106      	bne.n	800e846 <tcp_accept_null+0x22>
 800e838:	4b07      	ldr	r3, [pc, #28]	; (800e858 <tcp_accept_null+0x34>)
 800e83a:	f240 320f 	movw	r2, #783	; 0x30f
 800e83e:	4907      	ldr	r1, [pc, #28]	; (800e85c <tcp_accept_null+0x38>)
 800e840:	4807      	ldr	r0, [pc, #28]	; (800e860 <tcp_accept_null+0x3c>)
 800e842:	f00a fe93 	bl	801956c <iprintf>

  tcp_abort(pcb);
 800e846:	68b8      	ldr	r0, [r7, #8]
 800e848:	f7ff ff48 	bl	800e6dc <tcp_abort>

  return ERR_ABRT;
 800e84c:	f06f 030c 	mvn.w	r3, #12
}
 800e850:	4618      	mov	r0, r3
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}
 800e858:	0801c168 	.word	0x0801c168
 800e85c:	0801c33c 	.word	0x0801c33c
 800e860:	0801c1ac 	.word	0x0801c1ac

0800e864 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	460b      	mov	r3, r1
 800e86e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e870:	78fb      	ldrb	r3, [r7, #3]
 800e872:	2200      	movs	r2, #0
 800e874:	4619      	mov	r1, r3
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 f806 	bl	800e888 <tcp_listen_with_backlog_and_err>
 800e87c:	4603      	mov	r3, r0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
	...

0800e888 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b088      	sub	sp, #32
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	460b      	mov	r3, r1
 800e892:	607a      	str	r2, [r7, #4]
 800e894:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e896:	2300      	movs	r3, #0
 800e898:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d109      	bne.n	800e8b4 <tcp_listen_with_backlog_and_err+0x2c>
 800e8a0:	4b47      	ldr	r3, [pc, #284]	; (800e9c0 <tcp_listen_with_backlog_and_err+0x138>)
 800e8a2:	f240 3259 	movw	r2, #857	; 0x359
 800e8a6:	4947      	ldr	r1, [pc, #284]	; (800e9c4 <tcp_listen_with_backlog_and_err+0x13c>)
 800e8a8:	4847      	ldr	r0, [pc, #284]	; (800e9c8 <tcp_listen_with_backlog_and_err+0x140>)
 800e8aa:	f00a fe5f 	bl	801956c <iprintf>
 800e8ae:	23f0      	movs	r3, #240	; 0xf0
 800e8b0:	76fb      	strb	r3, [r7, #27]
 800e8b2:	e079      	b.n	800e9a8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	7d1b      	ldrb	r3, [r3, #20]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d009      	beq.n	800e8d0 <tcp_listen_with_backlog_and_err+0x48>
 800e8bc:	4b40      	ldr	r3, [pc, #256]	; (800e9c0 <tcp_listen_with_backlog_and_err+0x138>)
 800e8be:	f240 325a 	movw	r2, #858	; 0x35a
 800e8c2:	4942      	ldr	r1, [pc, #264]	; (800e9cc <tcp_listen_with_backlog_and_err+0x144>)
 800e8c4:	4840      	ldr	r0, [pc, #256]	; (800e9c8 <tcp_listen_with_backlog_and_err+0x140>)
 800e8c6:	f00a fe51 	bl	801956c <iprintf>
 800e8ca:	23f1      	movs	r3, #241	; 0xf1
 800e8cc:	76fb      	strb	r3, [r7, #27]
 800e8ce:	e06b      	b.n	800e9a8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	7d1b      	ldrb	r3, [r3, #20]
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d104      	bne.n	800e8e2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e8dc:	23f7      	movs	r3, #247	; 0xf7
 800e8de:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e8e0:	e062      	b.n	800e9a8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e8e2:	2002      	movs	r0, #2
 800e8e4:	f7fe fa06 	bl	800ccf4 <memp_malloc>
 800e8e8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e8ea:	69fb      	ldr	r3, [r7, #28]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d102      	bne.n	800e8f6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e8f0:	23ff      	movs	r3, #255	; 0xff
 800e8f2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e8f4:	e058      	b.n	800e9a8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	691a      	ldr	r2, [r3, #16]
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	8ada      	ldrh	r2, [r3, #22]
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e906:	69fb      	ldr	r3, [r7, #28]
 800e908:	2201      	movs	r2, #1
 800e90a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	7d5a      	ldrb	r2, [r3, #21]
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	7a5a      	ldrb	r2, [r3, #9]
 800e918:	69fb      	ldr	r3, [r7, #28]
 800e91a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	2200      	movs	r2, #0
 800e920:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	7ada      	ldrb	r2, [r3, #11]
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	7a9a      	ldrb	r2, [r3, #10]
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	69fb      	ldr	r3, [r7, #28]
 800e938:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	8adb      	ldrh	r3, [r3, #22]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d021      	beq.n	800e986 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e942:	4b23      	ldr	r3, [pc, #140]	; (800e9d0 <tcp_listen_with_backlog_and_err+0x148>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	68fa      	ldr	r2, [r7, #12]
 800e948:	429a      	cmp	r2, r3
 800e94a:	d105      	bne.n	800e958 <tcp_listen_with_backlog_and_err+0xd0>
 800e94c:	4b20      	ldr	r3, [pc, #128]	; (800e9d0 <tcp_listen_with_backlog_and_err+0x148>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	4a1f      	ldr	r2, [pc, #124]	; (800e9d0 <tcp_listen_with_backlog_and_err+0x148>)
 800e954:	6013      	str	r3, [r2, #0]
 800e956:	e013      	b.n	800e980 <tcp_listen_with_backlog_and_err+0xf8>
 800e958:	4b1d      	ldr	r3, [pc, #116]	; (800e9d0 <tcp_listen_with_backlog_and_err+0x148>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	617b      	str	r3, [r7, #20]
 800e95e:	e00c      	b.n	800e97a <tcp_listen_with_backlog_and_err+0xf2>
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	68db      	ldr	r3, [r3, #12]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	429a      	cmp	r2, r3
 800e968:	d104      	bne.n	800e974 <tcp_listen_with_backlog_and_err+0xec>
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	68da      	ldr	r2, [r3, #12]
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	60da      	str	r2, [r3, #12]
 800e972:	e005      	b.n	800e980 <tcp_listen_with_backlog_and_err+0xf8>
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	68db      	ldr	r3, [r3, #12]
 800e978:	617b      	str	r3, [r7, #20]
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d1ef      	bne.n	800e960 <tcp_listen_with_backlog_and_err+0xd8>
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2200      	movs	r2, #0
 800e984:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f7ff fb6e 	bl	800e068 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	4a11      	ldr	r2, [pc, #68]	; (800e9d4 <tcp_listen_with_backlog_and_err+0x14c>)
 800e990:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e992:	4b11      	ldr	r3, [pc, #68]	; (800e9d8 <tcp_listen_with_backlog_and_err+0x150>)
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	69fb      	ldr	r3, [r7, #28]
 800e998:	60da      	str	r2, [r3, #12]
 800e99a:	4a0f      	ldr	r2, [pc, #60]	; (800e9d8 <tcp_listen_with_backlog_and_err+0x150>)
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	6013      	str	r3, [r2, #0]
 800e9a0:	f005 fc04 	bl	80141ac <tcp_timer_needed>
  res = ERR_OK;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d002      	beq.n	800e9b4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	7efa      	ldrb	r2, [r7, #27]
 800e9b2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e9b4:	69fb      	ldr	r3, [r7, #28]
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3720      	adds	r7, #32
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
 800e9be:	bf00      	nop
 800e9c0:	0801c168 	.word	0x0801c168
 800e9c4:	0801c35c 	.word	0x0801c35c
 800e9c8:	0801c1ac 	.word	0x0801c1ac
 800e9cc:	0801c38c 	.word	0x0801c38c
 800e9d0:	20016e20 	.word	0x20016e20
 800e9d4:	0800e825 	.word	0x0800e825
 800e9d8:	20016e1c 	.word	0x20016e1c

0800e9dc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b084      	sub	sp, #16
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d106      	bne.n	800e9f8 <tcp_update_rcv_ann_wnd+0x1c>
 800e9ea:	4b25      	ldr	r3, [pc, #148]	; (800ea80 <tcp_update_rcv_ann_wnd+0xa4>)
 800e9ec:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e9f0:	4924      	ldr	r1, [pc, #144]	; (800ea84 <tcp_update_rcv_ann_wnd+0xa8>)
 800e9f2:	4825      	ldr	r0, [pc, #148]	; (800ea88 <tcp_update_rcv_ann_wnd+0xac>)
 800e9f4:	f00a fdba 	bl	801956c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9fc:	687a      	ldr	r2, [r7, #4]
 800e9fe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ea00:	4413      	add	r3, r2
 800ea02:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ea0c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ea10:	bf28      	it	cs
 800ea12:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ea16:	b292      	uxth	r2, r2
 800ea18:	4413      	add	r3, r2
 800ea1a:	68fa      	ldr	r2, [r7, #12]
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	db08      	blt.n	800ea34 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea2e:	68fa      	ldr	r2, [r7, #12]
 800ea30:	1ad3      	subs	r3, r2, r3
 800ea32:	e020      	b.n	800ea76 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3c:	1ad3      	subs	r3, r2, r3
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	dd03      	ble.n	800ea4a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ea48:	e014      	b.n	800ea74 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea5c:	d306      	bcc.n	800ea6c <tcp_update_rcv_ann_wnd+0x90>
 800ea5e:	4b08      	ldr	r3, [pc, #32]	; (800ea80 <tcp_update_rcv_ann_wnd+0xa4>)
 800ea60:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ea64:	4909      	ldr	r1, [pc, #36]	; (800ea8c <tcp_update_rcv_ann_wnd+0xb0>)
 800ea66:	4808      	ldr	r0, [pc, #32]	; (800ea88 <tcp_update_rcv_ann_wnd+0xac>)
 800ea68:	f00a fd80 	bl	801956c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	b29a      	uxth	r2, r3
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ea74:	2300      	movs	r3, #0
  }
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3710      	adds	r7, #16
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	0801c168 	.word	0x0801c168
 800ea84:	0801c3c4 	.word	0x0801c3c4
 800ea88:	0801c1ac 	.word	0x0801c1ac
 800ea8c:	0801c3e8 	.word	0x0801c3e8

0800ea90 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	460b      	mov	r3, r1
 800ea9a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d107      	bne.n	800eab2 <tcp_recved+0x22>
 800eaa2:	4b1f      	ldr	r3, [pc, #124]	; (800eb20 <tcp_recved+0x90>)
 800eaa4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800eaa8:	491e      	ldr	r1, [pc, #120]	; (800eb24 <tcp_recved+0x94>)
 800eaaa:	481f      	ldr	r0, [pc, #124]	; (800eb28 <tcp_recved+0x98>)
 800eaac:	f00a fd5e 	bl	801956c <iprintf>
 800eab0:	e032      	b.n	800eb18 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	7d1b      	ldrb	r3, [r3, #20]
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d106      	bne.n	800eac8 <tcp_recved+0x38>
 800eaba:	4b19      	ldr	r3, [pc, #100]	; (800eb20 <tcp_recved+0x90>)
 800eabc:	f240 32d3 	movw	r2, #979	; 0x3d3
 800eac0:	491a      	ldr	r1, [pc, #104]	; (800eb2c <tcp_recved+0x9c>)
 800eac2:	4819      	ldr	r0, [pc, #100]	; (800eb28 <tcp_recved+0x98>)
 800eac4:	f00a fd52 	bl	801956c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eacc:	887b      	ldrh	r3, [r7, #2]
 800eace:	4413      	add	r3, r2
 800ead0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ead2:	89fb      	ldrh	r3, [r7, #14]
 800ead4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ead8:	d804      	bhi.n	800eae4 <tcp_recved+0x54>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eade:	89fa      	ldrh	r2, [r7, #14]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d204      	bcs.n	800eaee <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800eaea:	851a      	strh	r2, [r3, #40]	; 0x28
 800eaec:	e002      	b.n	800eaf4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	89fa      	ldrh	r2, [r7, #14]
 800eaf2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f7ff ff71 	bl	800e9dc <tcp_update_rcv_ann_wnd>
 800eafa:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800eb02:	d309      	bcc.n	800eb18 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	8b5b      	ldrh	r3, [r3, #26]
 800eb08:	f043 0302 	orr.w	r3, r3, #2
 800eb0c:	b29a      	uxth	r2, r3
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f004 fbc4 	bl	80132a0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	0801c168 	.word	0x0801c168
 800eb24:	0801c404 	.word	0x0801c404
 800eb28:	0801c1ac 	.word	0x0801c1ac
 800eb2c:	0801c41c 	.word	0x0801c41c

0800eb30 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800eb36:	2300      	movs	r3, #0
 800eb38:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800eb3a:	4b1e      	ldr	r3, [pc, #120]	; (800ebb4 <tcp_new_port+0x84>)
 800eb3c:	881b      	ldrh	r3, [r3, #0]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	4b1c      	ldr	r3, [pc, #112]	; (800ebb4 <tcp_new_port+0x84>)
 800eb44:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800eb46:	4b1b      	ldr	r3, [pc, #108]	; (800ebb4 <tcp_new_port+0x84>)
 800eb48:	881b      	ldrh	r3, [r3, #0]
 800eb4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d103      	bne.n	800eb5a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800eb52:	4b18      	ldr	r3, [pc, #96]	; (800ebb4 <tcp_new_port+0x84>)
 800eb54:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800eb58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	71fb      	strb	r3, [r7, #7]
 800eb5e:	e01e      	b.n	800eb9e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800eb60:	79fb      	ldrb	r3, [r7, #7]
 800eb62:	4a15      	ldr	r2, [pc, #84]	; (800ebb8 <tcp_new_port+0x88>)
 800eb64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	603b      	str	r3, [r7, #0]
 800eb6c:	e011      	b.n	800eb92 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	8ada      	ldrh	r2, [r3, #22]
 800eb72:	4b10      	ldr	r3, [pc, #64]	; (800ebb4 <tcp_new_port+0x84>)
 800eb74:	881b      	ldrh	r3, [r3, #0]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d108      	bne.n	800eb8c <tcp_new_port+0x5c>
        n++;
 800eb7a:	88bb      	ldrh	r3, [r7, #4]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800eb80:	88bb      	ldrh	r3, [r7, #4]
 800eb82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb86:	d3d8      	bcc.n	800eb3a <tcp_new_port+0xa>
          return 0;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	e00d      	b.n	800eba8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	603b      	str	r3, [r7, #0]
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d1ea      	bne.n	800eb6e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800eb98:	79fb      	ldrb	r3, [r7, #7]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	71fb      	strb	r3, [r7, #7]
 800eb9e:	79fb      	ldrb	r3, [r7, #7]
 800eba0:	2b03      	cmp	r3, #3
 800eba2:	d9dd      	bls.n	800eb60 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800eba4:	4b03      	ldr	r3, [pc, #12]	; (800ebb4 <tcp_new_port+0x84>)
 800eba6:	881b      	ldrh	r3, [r3, #0]
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	370c      	adds	r7, #12
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr
 800ebb4:	20000010 	.word	0x20000010
 800ebb8:	08023038 	.word	0x08023038

0800ebbc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ebbc:	b5b0      	push	{r4, r5, r7, lr}
 800ebbe:	b090      	sub	sp, #64	; 0x40
 800ebc0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ebc8:	4b94      	ldr	r3, [pc, #592]	; (800ee1c <tcp_slowtmr+0x260>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	4a93      	ldr	r2, [pc, #588]	; (800ee1c <tcp_slowtmr+0x260>)
 800ebd0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ebd2:	4b93      	ldr	r3, [pc, #588]	; (800ee20 <tcp_slowtmr+0x264>)
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	b2da      	uxtb	r2, r3
 800ebda:	4b91      	ldr	r3, [pc, #580]	; (800ee20 <tcp_slowtmr+0x264>)
 800ebdc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ebe2:	4b90      	ldr	r3, [pc, #576]	; (800ee24 <tcp_slowtmr+0x268>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ebe8:	e29f      	b.n	800f12a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ebea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebec:	7d1b      	ldrb	r3, [r3, #20]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d106      	bne.n	800ec00 <tcp_slowtmr+0x44>
 800ebf2:	4b8d      	ldr	r3, [pc, #564]	; (800ee28 <tcp_slowtmr+0x26c>)
 800ebf4:	f240 42be 	movw	r2, #1214	; 0x4be
 800ebf8:	498c      	ldr	r1, [pc, #560]	; (800ee2c <tcp_slowtmr+0x270>)
 800ebfa:	488d      	ldr	r0, [pc, #564]	; (800ee30 <tcp_slowtmr+0x274>)
 800ebfc:	f00a fcb6 	bl	801956c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ec00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec02:	7d1b      	ldrb	r3, [r3, #20]
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d106      	bne.n	800ec16 <tcp_slowtmr+0x5a>
 800ec08:	4b87      	ldr	r3, [pc, #540]	; (800ee28 <tcp_slowtmr+0x26c>)
 800ec0a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ec0e:	4989      	ldr	r1, [pc, #548]	; (800ee34 <tcp_slowtmr+0x278>)
 800ec10:	4887      	ldr	r0, [pc, #540]	; (800ee30 <tcp_slowtmr+0x274>)
 800ec12:	f00a fcab 	bl	801956c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ec16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec18:	7d1b      	ldrb	r3, [r3, #20]
 800ec1a:	2b0a      	cmp	r3, #10
 800ec1c:	d106      	bne.n	800ec2c <tcp_slowtmr+0x70>
 800ec1e:	4b82      	ldr	r3, [pc, #520]	; (800ee28 <tcp_slowtmr+0x26c>)
 800ec20:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ec24:	4984      	ldr	r1, [pc, #528]	; (800ee38 <tcp_slowtmr+0x27c>)
 800ec26:	4882      	ldr	r0, [pc, #520]	; (800ee30 <tcp_slowtmr+0x274>)
 800ec28:	f00a fca0 	bl	801956c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ec2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2e:	7f9a      	ldrb	r2, [r3, #30]
 800ec30:	4b7b      	ldr	r3, [pc, #492]	; (800ee20 <tcp_slowtmr+0x264>)
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d105      	bne.n	800ec44 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ec38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ec3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3e:	68db      	ldr	r3, [r3, #12]
 800ec40:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ec42:	e272      	b.n	800f12a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ec44:	4b76      	ldr	r3, [pc, #472]	; (800ee20 <tcp_slowtmr+0x264>)
 800ec46:	781a      	ldrb	r2, [r3, #0]
 800ec48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ec52:	2300      	movs	r3, #0
 800ec54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ec58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5a:	7d1b      	ldrb	r3, [r3, #20]
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d10a      	bne.n	800ec76 <tcp_slowtmr+0xba>
 800ec60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec66:	2b05      	cmp	r3, #5
 800ec68:	d905      	bls.n	800ec76 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ec6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec6e:	3301      	adds	r3, #1
 800ec70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec74:	e11e      	b.n	800eeb4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ec76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec7c:	2b0b      	cmp	r3, #11
 800ec7e:	d905      	bls.n	800ec8c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ec80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec84:	3301      	adds	r3, #1
 800ec86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec8a:	e113      	b.n	800eeb4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ec8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d075      	beq.n	800ed82 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ec96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d006      	beq.n	800ecac <tcp_slowtmr+0xf0>
 800ec9e:	4b62      	ldr	r3, [pc, #392]	; (800ee28 <tcp_slowtmr+0x26c>)
 800eca0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800eca4:	4965      	ldr	r1, [pc, #404]	; (800ee3c <tcp_slowtmr+0x280>)
 800eca6:	4862      	ldr	r0, [pc, #392]	; (800ee30 <tcp_slowtmr+0x274>)
 800eca8:	f00a fc60 	bl	801956c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ecac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d106      	bne.n	800ecc2 <tcp_slowtmr+0x106>
 800ecb4:	4b5c      	ldr	r3, [pc, #368]	; (800ee28 <tcp_slowtmr+0x26c>)
 800ecb6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ecba:	4961      	ldr	r1, [pc, #388]	; (800ee40 <tcp_slowtmr+0x284>)
 800ecbc:	485c      	ldr	r0, [pc, #368]	; (800ee30 <tcp_slowtmr+0x274>)
 800ecbe:	f00a fc55 	bl	801956c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ecc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ecc8:	2b0b      	cmp	r3, #11
 800ecca:	d905      	bls.n	800ecd8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800eccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ecd6:	e0ed      	b.n	800eeb4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ecd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ecde:	3b01      	subs	r3, #1
 800ece0:	4a58      	ldr	r2, [pc, #352]	; (800ee44 <tcp_slowtmr+0x288>)
 800ece2:	5cd3      	ldrb	r3, [r2, r3]
 800ece4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ece6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ecec:	7c7a      	ldrb	r2, [r7, #17]
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d907      	bls.n	800ed02 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	b2da      	uxtb	r2, r3
 800ecfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ed02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ed08:	7c7a      	ldrb	r2, [r7, #17]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	f200 80d2 	bhi.w	800eeb4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ed10:	2301      	movs	r3, #1
 800ed12:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ed14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d108      	bne.n	800ed30 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ed1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed20:	f005 f976 	bl	8014010 <tcp_zero_window_probe>
 800ed24:	4603      	mov	r3, r0
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d014      	beq.n	800ed54 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	623b      	str	r3, [r7, #32]
 800ed2e:	e011      	b.n	800ed54 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ed30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed36:	4619      	mov	r1, r3
 800ed38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed3a:	f004 f82b 	bl	8012d94 <tcp_split_unsent_seg>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d107      	bne.n	800ed54 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ed44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed46:	f004 faab 	bl	80132a0 <tcp_output>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d101      	bne.n	800ed54 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ed50:	2300      	movs	r3, #0
 800ed52:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ed54:	6a3b      	ldr	r3, [r7, #32]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	f000 80ac 	beq.w	800eeb4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	2200      	movs	r2, #0
 800ed60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ed64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed66:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ed6a:	2b06      	cmp	r3, #6
 800ed6c:	f200 80a2 	bhi.w	800eeb4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ed70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ed76:	3301      	adds	r3, #1
 800ed78:	b2da      	uxtb	r2, r3
 800ed7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ed80:	e098      	b.n	800eeb4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ed82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	db0f      	blt.n	800edac <tcp_slowtmr+0x1f0>
 800ed8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ed92:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d008      	beq.n	800edac <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ed9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800eda0:	b29b      	uxth	r3, r3
 800eda2:	3301      	adds	r3, #1
 800eda4:	b29b      	uxth	r3, r3
 800eda6:	b21a      	sxth	r2, r3
 800eda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edaa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800edac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edae:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800edb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800edb8:	429a      	cmp	r2, r3
 800edba:	db7b      	blt.n	800eeb4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800edbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edbe:	f004 fd67 	bl	8013890 <tcp_rexmit_rto_prepare>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d007      	beq.n	800edd8 <tcp_slowtmr+0x21c>
 800edc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d171      	bne.n	800eeb4 <tcp_slowtmr+0x2f8>
 800edd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d06d      	beq.n	800eeb4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800edd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edda:	7d1b      	ldrb	r3, [r3, #20]
 800eddc:	2b02      	cmp	r3, #2
 800edde:	d03a      	beq.n	800ee56 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ede0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ede6:	2b0c      	cmp	r3, #12
 800ede8:	bf28      	it	cs
 800edea:	230c      	movcs	r3, #12
 800edec:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800edee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800edf4:	10db      	asrs	r3, r3, #3
 800edf6:	b21b      	sxth	r3, r3
 800edf8:	461a      	mov	r2, r3
 800edfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ee00:	4413      	add	r3, r2
 800ee02:	7efa      	ldrb	r2, [r7, #27]
 800ee04:	4910      	ldr	r1, [pc, #64]	; (800ee48 <tcp_slowtmr+0x28c>)
 800ee06:	5c8a      	ldrb	r2, [r1, r2]
 800ee08:	4093      	lsls	r3, r2
 800ee0a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ee12:	4293      	cmp	r3, r2
 800ee14:	dc1a      	bgt.n	800ee4c <tcp_slowtmr+0x290>
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	b21a      	sxth	r2, r3
 800ee1a:	e019      	b.n	800ee50 <tcp_slowtmr+0x294>
 800ee1c:	20016e18 	.word	0x20016e18
 800ee20:	20010256 	.word	0x20010256
 800ee24:	20016e14 	.word	0x20016e14
 800ee28:	0801c168 	.word	0x0801c168
 800ee2c:	0801c4ac 	.word	0x0801c4ac
 800ee30:	0801c1ac 	.word	0x0801c1ac
 800ee34:	0801c4d8 	.word	0x0801c4d8
 800ee38:	0801c504 	.word	0x0801c504
 800ee3c:	0801c534 	.word	0x0801c534
 800ee40:	0801c568 	.word	0x0801c568
 800ee44:	08023030 	.word	0x08023030
 800ee48:	08023020 	.word	0x08023020
 800ee4c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ee50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ee56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee58:	2200      	movs	r2, #0
 800ee5a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ee5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ee62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	bf28      	it	cs
 800ee6c:	4613      	movcs	r3, r2
 800ee6e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ee70:	8a7b      	ldrh	r3, [r7, #18]
 800ee72:	085b      	lsrs	r3, r3, #1
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee78:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ee7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee7e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ee82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee86:	005b      	lsls	r3, r3, #1
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d206      	bcs.n	800ee9c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ee8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee92:	005b      	lsls	r3, r3, #1
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ee9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800eea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800eea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800eeae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eeb0:	f004 fd5e 	bl	8013970 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800eeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb6:	7d1b      	ldrb	r3, [r3, #20]
 800eeb8:	2b06      	cmp	r3, #6
 800eeba:	d111      	bne.n	800eee0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800eebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eebe:	8b5b      	ldrh	r3, [r3, #26]
 800eec0:	f003 0310 	and.w	r3, r3, #16
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d00b      	beq.n	800eee0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eec8:	4b9d      	ldr	r3, [pc, #628]	; (800f140 <tcp_slowtmr+0x584>)
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eece:	6a1b      	ldr	r3, [r3, #32]
 800eed0:	1ad3      	subs	r3, r2, r3
 800eed2:	2b28      	cmp	r3, #40	; 0x28
 800eed4:	d904      	bls.n	800eee0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800eed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeda:	3301      	adds	r3, #1
 800eedc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee2:	7a5b      	ldrb	r3, [r3, #9]
 800eee4:	f003 0308 	and.w	r3, r3, #8
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d04c      	beq.n	800ef86 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800eeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeee:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800eef0:	2b04      	cmp	r3, #4
 800eef2:	d003      	beq.n	800eefc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800eef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800eef8:	2b07      	cmp	r3, #7
 800eefa:	d144      	bne.n	800ef86 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eefc:	4b90      	ldr	r3, [pc, #576]	; (800f140 <tcp_slowtmr+0x584>)
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef02:	6a1b      	ldr	r3, [r3, #32]
 800ef04:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ef06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ef0c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ef10:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800ef14:	498b      	ldr	r1, [pc, #556]	; (800f144 <tcp_slowtmr+0x588>)
 800ef16:	fba1 1303 	umull	r1, r3, r1, r3
 800ef1a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef1c:	429a      	cmp	r2, r3
 800ef1e:	d90a      	bls.n	800ef36 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ef20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef24:	3301      	adds	r3, #1
 800ef26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ef2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef2e:	3301      	adds	r3, #1
 800ef30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ef34:	e027      	b.n	800ef86 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef36:	4b82      	ldr	r3, [pc, #520]	; (800f140 <tcp_slowtmr+0x584>)
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3c:	6a1b      	ldr	r3, [r3, #32]
 800ef3e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ef40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef42:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ef46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef48:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	4b7e      	ldr	r3, [pc, #504]	; (800f148 <tcp_slowtmr+0x58c>)
 800ef50:	fb03 f300 	mul.w	r3, r3, r0
 800ef54:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ef56:	497b      	ldr	r1, [pc, #492]	; (800f144 <tcp_slowtmr+0x588>)
 800ef58:	fba1 1303 	umull	r1, r3, r1, r3
 800ef5c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	d911      	bls.n	800ef86 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ef62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef64:	f005 f814 	bl	8013f90 <tcp_keepalive>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ef6e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d107      	bne.n	800ef86 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ef76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef78:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	b2da      	uxtb	r2, r3
 800ef80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef82:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ef86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d011      	beq.n	800efb2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ef8e:	4b6c      	ldr	r3, [pc, #432]	; (800f140 <tcp_slowtmr+0x584>)
 800ef90:	681a      	ldr	r2, [r3, #0]
 800ef92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef94:	6a1b      	ldr	r3, [r3, #32]
 800ef96:	1ad2      	subs	r2, r2, r3
 800ef98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ef9e:	4619      	mov	r1, r3
 800efa0:	460b      	mov	r3, r1
 800efa2:	005b      	lsls	r3, r3, #1
 800efa4:	440b      	add	r3, r1
 800efa6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800efa8:	429a      	cmp	r2, r3
 800efaa:	d302      	bcc.n	800efb2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800efac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efae:	f000 fec3 	bl	800fd38 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800efb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb4:	7d1b      	ldrb	r3, [r3, #20]
 800efb6:	2b03      	cmp	r3, #3
 800efb8:	d10b      	bne.n	800efd2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800efba:	4b61      	ldr	r3, [pc, #388]	; (800f140 <tcp_slowtmr+0x584>)
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc0:	6a1b      	ldr	r3, [r3, #32]
 800efc2:	1ad3      	subs	r3, r2, r3
 800efc4:	2b28      	cmp	r3, #40	; 0x28
 800efc6:	d904      	bls.n	800efd2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800efc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efcc:	3301      	adds	r3, #1
 800efce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800efd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd4:	7d1b      	ldrb	r3, [r3, #20]
 800efd6:	2b09      	cmp	r3, #9
 800efd8:	d10b      	bne.n	800eff2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800efda:	4b59      	ldr	r3, [pc, #356]	; (800f140 <tcp_slowtmr+0x584>)
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe0:	6a1b      	ldr	r3, [r3, #32]
 800efe2:	1ad3      	subs	r3, r2, r3
 800efe4:	2bf0      	cmp	r3, #240	; 0xf0
 800efe6:	d904      	bls.n	800eff2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800efe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efec:	3301      	adds	r3, #1
 800efee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eff2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d060      	beq.n	800f0bc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800effa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f000:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f002:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f004:	f000 fce4 	bl	800f9d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d010      	beq.n	800f030 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f00e:	4b4f      	ldr	r3, [pc, #316]	; (800f14c <tcp_slowtmr+0x590>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f014:	429a      	cmp	r2, r3
 800f016:	d106      	bne.n	800f026 <tcp_slowtmr+0x46a>
 800f018:	4b4d      	ldr	r3, [pc, #308]	; (800f150 <tcp_slowtmr+0x594>)
 800f01a:	f240 526d 	movw	r2, #1389	; 0x56d
 800f01e:	494d      	ldr	r1, [pc, #308]	; (800f154 <tcp_slowtmr+0x598>)
 800f020:	484d      	ldr	r0, [pc, #308]	; (800f158 <tcp_slowtmr+0x59c>)
 800f022:	f00a faa3 	bl	801956c <iprintf>
        prev->next = pcb->next;
 800f026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f028:	68da      	ldr	r2, [r3, #12]
 800f02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f02c:	60da      	str	r2, [r3, #12]
 800f02e:	e00f      	b.n	800f050 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f030:	4b46      	ldr	r3, [pc, #280]	; (800f14c <tcp_slowtmr+0x590>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f036:	429a      	cmp	r2, r3
 800f038:	d006      	beq.n	800f048 <tcp_slowtmr+0x48c>
 800f03a:	4b45      	ldr	r3, [pc, #276]	; (800f150 <tcp_slowtmr+0x594>)
 800f03c:	f240 5271 	movw	r2, #1393	; 0x571
 800f040:	4946      	ldr	r1, [pc, #280]	; (800f15c <tcp_slowtmr+0x5a0>)
 800f042:	4845      	ldr	r0, [pc, #276]	; (800f158 <tcp_slowtmr+0x59c>)
 800f044:	f00a fa92 	bl	801956c <iprintf>
        tcp_active_pcbs = pcb->next;
 800f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	4a3f      	ldr	r2, [pc, #252]	; (800f14c <tcp_slowtmr+0x590>)
 800f04e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f050:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f054:	2b00      	cmp	r3, #0
 800f056:	d013      	beq.n	800f080 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f060:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f064:	3304      	adds	r3, #4
 800f066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f068:	8ad2      	ldrh	r2, [r2, #22]
 800f06a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f06c:	8b09      	ldrh	r1, [r1, #24]
 800f06e:	9102      	str	r1, [sp, #8]
 800f070:	9201      	str	r2, [sp, #4]
 800f072:	9300      	str	r3, [sp, #0]
 800f074:	462b      	mov	r3, r5
 800f076:	4622      	mov	r2, r4
 800f078:	4601      	mov	r1, r0
 800f07a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f07c:	f004 fed4 	bl	8013e28 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f082:	691b      	ldr	r3, [r3, #16]
 800f084:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f088:	7d1b      	ldrb	r3, [r3, #20]
 800f08a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f096:	6838      	ldr	r0, [r7, #0]
 800f098:	f7fe ffe6 	bl	800e068 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f09c:	4b30      	ldr	r3, [pc, #192]	; (800f160 <tcp_slowtmr+0x5a4>)
 800f09e:	2200      	movs	r2, #0
 800f0a0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d004      	beq.n	800f0b2 <tcp_slowtmr+0x4f6>
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f06f 010c 	mvn.w	r1, #12
 800f0ae:	68b8      	ldr	r0, [r7, #8]
 800f0b0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f0b2:	4b2b      	ldr	r3, [pc, #172]	; (800f160 <tcp_slowtmr+0x5a4>)
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d037      	beq.n	800f12a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f0ba:	e590      	b.n	800ebde <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c8:	7f1b      	ldrb	r3, [r3, #28]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	b2da      	uxtb	r2, r3
 800f0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d4:	7f1a      	ldrb	r2, [r3, #28]
 800f0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d8:	7f5b      	ldrb	r3, [r3, #29]
 800f0da:	429a      	cmp	r2, r3
 800f0dc:	d325      	bcc.n	800f12a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f0e4:	4b1e      	ldr	r3, [pc, #120]	; (800f160 <tcp_slowtmr+0x5a4>)
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d00b      	beq.n	800f10c <tcp_slowtmr+0x550>
 800f0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f0fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0fc:	6912      	ldr	r2, [r2, #16]
 800f0fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f100:	4610      	mov	r0, r2
 800f102:	4798      	blx	r3
 800f104:	4603      	mov	r3, r0
 800f106:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f10a:	e002      	b.n	800f112 <tcp_slowtmr+0x556>
 800f10c:	2300      	movs	r3, #0
 800f10e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f112:	4b13      	ldr	r3, [pc, #76]	; (800f160 <tcp_slowtmr+0x5a4>)
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d000      	beq.n	800f11c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f11a:	e560      	b.n	800ebde <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f11c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f120:	2b00      	cmp	r3, #0
 800f122:	d102      	bne.n	800f12a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f126:	f004 f8bb 	bl	80132a0 <tcp_output>
  while (pcb != NULL) {
 800f12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	f47f ad5c 	bne.w	800ebea <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f132:	2300      	movs	r3, #0
 800f134:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f136:	4b0b      	ldr	r3, [pc, #44]	; (800f164 <tcp_slowtmr+0x5a8>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f13c:	e067      	b.n	800f20e <tcp_slowtmr+0x652>
 800f13e:	bf00      	nop
 800f140:	20016e18 	.word	0x20016e18
 800f144:	10624dd3 	.word	0x10624dd3
 800f148:	000124f8 	.word	0x000124f8
 800f14c:	20016e14 	.word	0x20016e14
 800f150:	0801c168 	.word	0x0801c168
 800f154:	0801c5a0 	.word	0x0801c5a0
 800f158:	0801c1ac 	.word	0x0801c1ac
 800f15c:	0801c5cc 	.word	0x0801c5cc
 800f160:	20016e10 	.word	0x20016e10
 800f164:	20016e24 	.word	0x20016e24
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16a:	7d1b      	ldrb	r3, [r3, #20]
 800f16c:	2b0a      	cmp	r3, #10
 800f16e:	d006      	beq.n	800f17e <tcp_slowtmr+0x5c2>
 800f170:	4b2a      	ldr	r3, [pc, #168]	; (800f21c <tcp_slowtmr+0x660>)
 800f172:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f176:	492a      	ldr	r1, [pc, #168]	; (800f220 <tcp_slowtmr+0x664>)
 800f178:	482a      	ldr	r0, [pc, #168]	; (800f224 <tcp_slowtmr+0x668>)
 800f17a:	f00a f9f7 	bl	801956c <iprintf>
    pcb_remove = 0;
 800f17e:	2300      	movs	r3, #0
 800f180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f184:	4b28      	ldr	r3, [pc, #160]	; (800f228 <tcp_slowtmr+0x66c>)
 800f186:	681a      	ldr	r2, [r3, #0]
 800f188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18a:	6a1b      	ldr	r3, [r3, #32]
 800f18c:	1ad3      	subs	r3, r2, r3
 800f18e:	2bf0      	cmp	r3, #240	; 0xf0
 800f190:	d904      	bls.n	800f19c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f196:	3301      	adds	r3, #1
 800f198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f19c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d02f      	beq.n	800f204 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f1a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1a6:	f000 fc13 	bl	800f9d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d010      	beq.n	800f1d2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f1b0:	4b1e      	ldr	r3, [pc, #120]	; (800f22c <tcp_slowtmr+0x670>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d106      	bne.n	800f1c8 <tcp_slowtmr+0x60c>
 800f1ba:	4b18      	ldr	r3, [pc, #96]	; (800f21c <tcp_slowtmr+0x660>)
 800f1bc:	f240 52af 	movw	r2, #1455	; 0x5af
 800f1c0:	491b      	ldr	r1, [pc, #108]	; (800f230 <tcp_slowtmr+0x674>)
 800f1c2:	4818      	ldr	r0, [pc, #96]	; (800f224 <tcp_slowtmr+0x668>)
 800f1c4:	f00a f9d2 	bl	801956c <iprintf>
        prev->next = pcb->next;
 800f1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ca:	68da      	ldr	r2, [r3, #12]
 800f1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ce:	60da      	str	r2, [r3, #12]
 800f1d0:	e00f      	b.n	800f1f2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f1d2:	4b16      	ldr	r3, [pc, #88]	; (800f22c <tcp_slowtmr+0x670>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d006      	beq.n	800f1ea <tcp_slowtmr+0x62e>
 800f1dc:	4b0f      	ldr	r3, [pc, #60]	; (800f21c <tcp_slowtmr+0x660>)
 800f1de:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f1e2:	4914      	ldr	r1, [pc, #80]	; (800f234 <tcp_slowtmr+0x678>)
 800f1e4:	480f      	ldr	r0, [pc, #60]	; (800f224 <tcp_slowtmr+0x668>)
 800f1e6:	f00a f9c1 	bl	801956c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ec:	68db      	ldr	r3, [r3, #12]
 800f1ee:	4a0f      	ldr	r2, [pc, #60]	; (800f22c <tcp_slowtmr+0x670>)
 800f1f0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f1fc:	69f8      	ldr	r0, [r7, #28]
 800f1fe:	f7fe ff33 	bl	800e068 <tcp_free>
 800f202:	e004      	b.n	800f20e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f206:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f210:	2b00      	cmp	r3, #0
 800f212:	d1a9      	bne.n	800f168 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f214:	bf00      	nop
 800f216:	3730      	adds	r7, #48	; 0x30
 800f218:	46bd      	mov	sp, r7
 800f21a:	bdb0      	pop	{r4, r5, r7, pc}
 800f21c:	0801c168 	.word	0x0801c168
 800f220:	0801c5f8 	.word	0x0801c5f8
 800f224:	0801c1ac 	.word	0x0801c1ac
 800f228:	20016e18 	.word	0x20016e18
 800f22c:	20016e24 	.word	0x20016e24
 800f230:	0801c628 	.word	0x0801c628
 800f234:	0801c650 	.word	0x0801c650

0800f238 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b082      	sub	sp, #8
 800f23c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f23e:	4b2d      	ldr	r3, [pc, #180]	; (800f2f4 <tcp_fasttmr+0xbc>)
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	3301      	adds	r3, #1
 800f244:	b2da      	uxtb	r2, r3
 800f246:	4b2b      	ldr	r3, [pc, #172]	; (800f2f4 <tcp_fasttmr+0xbc>)
 800f248:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f24a:	4b2b      	ldr	r3, [pc, #172]	; (800f2f8 <tcp_fasttmr+0xc0>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f250:	e048      	b.n	800f2e4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	7f9a      	ldrb	r2, [r3, #30]
 800f256:	4b27      	ldr	r3, [pc, #156]	; (800f2f4 <tcp_fasttmr+0xbc>)
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d03f      	beq.n	800f2de <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f25e:	4b25      	ldr	r3, [pc, #148]	; (800f2f4 <tcp_fasttmr+0xbc>)
 800f260:	781a      	ldrb	r2, [r3, #0]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	8b5b      	ldrh	r3, [r3, #26]
 800f26a:	f003 0301 	and.w	r3, r3, #1
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d010      	beq.n	800f294 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	8b5b      	ldrh	r3, [r3, #26]
 800f276:	f043 0302 	orr.w	r3, r3, #2
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f004 f80d 	bl	80132a0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	8b5b      	ldrh	r3, [r3, #26]
 800f28a:	f023 0303 	bic.w	r3, r3, #3
 800f28e:	b29a      	uxth	r2, r3
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	8b5b      	ldrh	r3, [r3, #26]
 800f298:	f003 0308 	and.w	r3, r3, #8
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d009      	beq.n	800f2b4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	8b5b      	ldrh	r3, [r3, #26]
 800f2a4:	f023 0308 	bic.w	r3, r3, #8
 800f2a8:	b29a      	uxth	r2, r3
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f7ff f86a 	bl	800e388 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d00a      	beq.n	800f2d8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f2c2:	4b0e      	ldr	r3, [pc, #56]	; (800f2fc <tcp_fasttmr+0xc4>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f000 f819 	bl	800f300 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f2ce:	4b0b      	ldr	r3, [pc, #44]	; (800f2fc <tcp_fasttmr+0xc4>)
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d000      	beq.n	800f2d8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f2d6:	e7b8      	b.n	800f24a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	607b      	str	r3, [r7, #4]
 800f2dc:	e002      	b.n	800f2e4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d1b3      	bne.n	800f252 <tcp_fasttmr+0x1a>
    }
  }
}
 800f2ea:	bf00      	nop
 800f2ec:	3708      	adds	r7, #8
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	20010256 	.word	0x20010256
 800f2f8:	20016e14 	.word	0x20016e14
 800f2fc:	20016e10 	.word	0x20016e10

0800f300 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f300:	b590      	push	{r4, r7, lr}
 800f302:	b085      	sub	sp, #20
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d109      	bne.n	800f322 <tcp_process_refused_data+0x22>
 800f30e:	4b37      	ldr	r3, [pc, #220]	; (800f3ec <tcp_process_refused_data+0xec>)
 800f310:	f240 6209 	movw	r2, #1545	; 0x609
 800f314:	4936      	ldr	r1, [pc, #216]	; (800f3f0 <tcp_process_refused_data+0xf0>)
 800f316:	4837      	ldr	r0, [pc, #220]	; (800f3f4 <tcp_process_refused_data+0xf4>)
 800f318:	f00a f928 	bl	801956c <iprintf>
 800f31c:	f06f 030f 	mvn.w	r3, #15
 800f320:	e060      	b.n	800f3e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f326:	7b5b      	ldrb	r3, [r3, #13]
 800f328:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f32e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2200      	movs	r2, #0
 800f334:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d00b      	beq.n	800f358 <tcp_process_refused_data+0x58>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6918      	ldr	r0, [r3, #16]
 800f34a:	2300      	movs	r3, #0
 800f34c:	68ba      	ldr	r2, [r7, #8]
 800f34e:	6879      	ldr	r1, [r7, #4]
 800f350:	47a0      	blx	r4
 800f352:	4603      	mov	r3, r0
 800f354:	73fb      	strb	r3, [r7, #15]
 800f356:	e007      	b.n	800f368 <tcp_process_refused_data+0x68>
 800f358:	2300      	movs	r3, #0
 800f35a:	68ba      	ldr	r2, [r7, #8]
 800f35c:	6879      	ldr	r1, [r7, #4]
 800f35e:	2000      	movs	r0, #0
 800f360:	f000 f8c0 	bl	800f4e4 <tcp_recv_null>
 800f364:	4603      	mov	r3, r0
 800f366:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d12a      	bne.n	800f3c6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f370:	7bbb      	ldrb	r3, [r7, #14]
 800f372:	f003 0320 	and.w	r3, r3, #32
 800f376:	2b00      	cmp	r3, #0
 800f378:	d033      	beq.n	800f3e2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f37e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f382:	d005      	beq.n	800f390 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f388:	3301      	adds	r3, #1
 800f38a:	b29a      	uxth	r2, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f396:	2b00      	cmp	r3, #0
 800f398:	d00b      	beq.n	800f3b2 <tcp_process_refused_data+0xb2>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6918      	ldr	r0, [r3, #16]
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	6879      	ldr	r1, [r7, #4]
 800f3aa:	47a0      	blx	r4
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	73fb      	strb	r3, [r7, #15]
 800f3b0:	e001      	b.n	800f3b6 <tcp_process_refused_data+0xb6>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f3b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3ba:	f113 0f0d 	cmn.w	r3, #13
 800f3be:	d110      	bne.n	800f3e2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f3c0:	f06f 030c 	mvn.w	r3, #12
 800f3c4:	e00e      	b.n	800f3e4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f3c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f3ca:	f113 0f0d 	cmn.w	r3, #13
 800f3ce:	d102      	bne.n	800f3d6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f3d0:	f06f 030c 	mvn.w	r3, #12
 800f3d4:	e006      	b.n	800f3e4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	68ba      	ldr	r2, [r7, #8]
 800f3da:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f3dc:	f06f 0304 	mvn.w	r3, #4
 800f3e0:	e000      	b.n	800f3e4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f3e2:	2300      	movs	r3, #0
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3714      	adds	r7, #20
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd90      	pop	{r4, r7, pc}
 800f3ec:	0801c168 	.word	0x0801c168
 800f3f0:	0801c678 	.word	0x0801c678
 800f3f4:	0801c1ac 	.word	0x0801c1ac

0800f3f8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b084      	sub	sp, #16
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f400:	e007      	b.n	800f412 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 f809 	bl	800f420 <tcp_seg_free>
    seg = next;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d1f4      	bne.n	800f402 <tcp_segs_free+0xa>
  }
}
 800f418:	bf00      	nop
 800f41a:	3710      	adds	r7, #16
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bd80      	pop	{r7, pc}

0800f420 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00c      	beq.n	800f448 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d004      	beq.n	800f440 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7fe fb58 	bl	800daf0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f440:	6879      	ldr	r1, [r7, #4]
 800f442:	2003      	movs	r0, #3
 800f444:	f7fd fca8 	bl	800cd98 <memp_free>
  }
}
 800f448:	bf00      	nop
 800f44a:	3708      	adds	r7, #8
 800f44c:	46bd      	mov	sp, r7
 800f44e:	bd80      	pop	{r7, pc}

0800f450 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	460b      	mov	r3, r1
 800f45a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d107      	bne.n	800f472 <tcp_setprio+0x22>
 800f462:	4b07      	ldr	r3, [pc, #28]	; (800f480 <tcp_setprio+0x30>)
 800f464:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800f468:	4906      	ldr	r1, [pc, #24]	; (800f484 <tcp_setprio+0x34>)
 800f46a:	4807      	ldr	r0, [pc, #28]	; (800f488 <tcp_setprio+0x38>)
 800f46c:	f00a f87e 	bl	801956c <iprintf>
 800f470:	e002      	b.n	800f478 <tcp_setprio+0x28>

  pcb->prio = prio;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	78fa      	ldrb	r2, [r7, #3]
 800f476:	755a      	strb	r2, [r3, #21]
}
 800f478:	3708      	adds	r7, #8
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bd80      	pop	{r7, pc}
 800f47e:	bf00      	nop
 800f480:	0801c168 	.word	0x0801c168
 800f484:	0801c6a0 	.word	0x0801c6a0
 800f488:	0801c1ac 	.word	0x0801c1ac

0800f48c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d106      	bne.n	800f4a8 <tcp_seg_copy+0x1c>
 800f49a:	4b0f      	ldr	r3, [pc, #60]	; (800f4d8 <tcp_seg_copy+0x4c>)
 800f49c:	f240 6282 	movw	r2, #1666	; 0x682
 800f4a0:	490e      	ldr	r1, [pc, #56]	; (800f4dc <tcp_seg_copy+0x50>)
 800f4a2:	480f      	ldr	r0, [pc, #60]	; (800f4e0 <tcp_seg_copy+0x54>)
 800f4a4:	f00a f862 	bl	801956c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f4a8:	2003      	movs	r0, #3
 800f4aa:	f7fd fc23 	bl	800ccf4 <memp_malloc>
 800f4ae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d101      	bne.n	800f4ba <tcp_seg_copy+0x2e>
    return NULL;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	e00a      	b.n	800f4d0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f4ba:	2210      	movs	r2, #16
 800f4bc:	6879      	ldr	r1, [r7, #4]
 800f4be:	68f8      	ldr	r0, [r7, #12]
 800f4c0:	f00a f827 	bl	8019512 <memcpy>
  pbuf_ref(cseg->p);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	685b      	ldr	r3, [r3, #4]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7fe fbb7 	bl	800dc3c <pbuf_ref>
  return cseg;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
}
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	3710      	adds	r7, #16
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}
 800f4d8:	0801c168 	.word	0x0801c168
 800f4dc:	0801c6bc 	.word	0x0801c6bc
 800f4e0:	0801c1ac 	.word	0x0801c1ac

0800f4e4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b084      	sub	sp, #16
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	60f8      	str	r0, [r7, #12]
 800f4ec:	60b9      	str	r1, [r7, #8]
 800f4ee:	607a      	str	r2, [r7, #4]
 800f4f0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d109      	bne.n	800f50c <tcp_recv_null+0x28>
 800f4f8:	4b12      	ldr	r3, [pc, #72]	; (800f544 <tcp_recv_null+0x60>)
 800f4fa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f4fe:	4912      	ldr	r1, [pc, #72]	; (800f548 <tcp_recv_null+0x64>)
 800f500:	4812      	ldr	r0, [pc, #72]	; (800f54c <tcp_recv_null+0x68>)
 800f502:	f00a f833 	bl	801956c <iprintf>
 800f506:	f06f 030f 	mvn.w	r3, #15
 800f50a:	e016      	b.n	800f53a <tcp_recv_null+0x56>

  if (p != NULL) {
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d009      	beq.n	800f526 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	891b      	ldrh	r3, [r3, #8]
 800f516:	4619      	mov	r1, r3
 800f518:	68b8      	ldr	r0, [r7, #8]
 800f51a:	f7ff fab9 	bl	800ea90 <tcp_recved>
    pbuf_free(p);
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f7fe fae6 	bl	800daf0 <pbuf_free>
 800f524:	e008      	b.n	800f538 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f526:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d104      	bne.n	800f538 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f52e:	68b8      	ldr	r0, [r7, #8]
 800f530:	f7fe ff90 	bl	800e454 <tcp_close>
 800f534:	4603      	mov	r3, r0
 800f536:	e000      	b.n	800f53a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3710      	adds	r7, #16
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	0801c168 	.word	0x0801c168
 800f548:	0801c6d8 	.word	0x0801c6d8
 800f54c:	0801c1ac 	.word	0x0801c1ac

0800f550 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af00      	add	r7, sp, #0
 800f556:	4603      	mov	r3, r0
 800f558:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f55a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	db01      	blt.n	800f566 <tcp_kill_prio+0x16>
 800f562:	79fb      	ldrb	r3, [r7, #7]
 800f564:	e000      	b.n	800f568 <tcp_kill_prio+0x18>
 800f566:	237f      	movs	r3, #127	; 0x7f
 800f568:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f56a:	7afb      	ldrb	r3, [r7, #11]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d034      	beq.n	800f5da <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f570:	7afb      	ldrb	r3, [r7, #11]
 800f572:	3b01      	subs	r3, #1
 800f574:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f576:	2300      	movs	r3, #0
 800f578:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f57a:	2300      	movs	r3, #0
 800f57c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f57e:	4b19      	ldr	r3, [pc, #100]	; (800f5e4 <tcp_kill_prio+0x94>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	617b      	str	r3, [r7, #20]
 800f584:	e01f      	b.n	800f5c6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	7d5b      	ldrb	r3, [r3, #21]
 800f58a:	7afa      	ldrb	r2, [r7, #11]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d80c      	bhi.n	800f5aa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f594:	7afa      	ldrb	r2, [r7, #11]
 800f596:	429a      	cmp	r2, r3
 800f598:	d112      	bne.n	800f5c0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f59a:	4b13      	ldr	r3, [pc, #76]	; (800f5e8 <tcp_kill_prio+0x98>)
 800f59c:	681a      	ldr	r2, [r3, #0]
 800f59e:	697b      	ldr	r3, [r7, #20]
 800f5a0:	6a1b      	ldr	r3, [r3, #32]
 800f5a2:	1ad3      	subs	r3, r2, r3
 800f5a4:	68fa      	ldr	r2, [r7, #12]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d80a      	bhi.n	800f5c0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f5aa:	4b0f      	ldr	r3, [pc, #60]	; (800f5e8 <tcp_kill_prio+0x98>)
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	6a1b      	ldr	r3, [r3, #32]
 800f5b2:	1ad3      	subs	r3, r2, r3
 800f5b4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	7d5b      	ldrb	r3, [r3, #21]
 800f5be:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	617b      	str	r3, [r7, #20]
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d1dc      	bne.n	800f586 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d004      	beq.n	800f5dc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f5d2:	6938      	ldr	r0, [r7, #16]
 800f5d4:	f7ff f882 	bl	800e6dc <tcp_abort>
 800f5d8:	e000      	b.n	800f5dc <tcp_kill_prio+0x8c>
    return;
 800f5da:	bf00      	nop
  }
}
 800f5dc:	3718      	adds	r7, #24
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}
 800f5e2:	bf00      	nop
 800f5e4:	20016e14 	.word	0x20016e14
 800f5e8:	20016e18 	.word	0x20016e18

0800f5ec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b086      	sub	sp, #24
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f5f6:	79fb      	ldrb	r3, [r7, #7]
 800f5f8:	2b08      	cmp	r3, #8
 800f5fa:	d009      	beq.n	800f610 <tcp_kill_state+0x24>
 800f5fc:	79fb      	ldrb	r3, [r7, #7]
 800f5fe:	2b09      	cmp	r3, #9
 800f600:	d006      	beq.n	800f610 <tcp_kill_state+0x24>
 800f602:	4b1a      	ldr	r3, [pc, #104]	; (800f66c <tcp_kill_state+0x80>)
 800f604:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f608:	4919      	ldr	r1, [pc, #100]	; (800f670 <tcp_kill_state+0x84>)
 800f60a:	481a      	ldr	r0, [pc, #104]	; (800f674 <tcp_kill_state+0x88>)
 800f60c:	f009 ffae 	bl	801956c <iprintf>

  inactivity = 0;
 800f610:	2300      	movs	r3, #0
 800f612:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f614:	2300      	movs	r3, #0
 800f616:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f618:	4b17      	ldr	r3, [pc, #92]	; (800f678 <tcp_kill_state+0x8c>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	617b      	str	r3, [r7, #20]
 800f61e:	e017      	b.n	800f650 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	7d1b      	ldrb	r3, [r3, #20]
 800f624:	79fa      	ldrb	r2, [r7, #7]
 800f626:	429a      	cmp	r2, r3
 800f628:	d10f      	bne.n	800f64a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f62a:	4b14      	ldr	r3, [pc, #80]	; (800f67c <tcp_kill_state+0x90>)
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	6a1b      	ldr	r3, [r3, #32]
 800f632:	1ad3      	subs	r3, r2, r3
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	429a      	cmp	r2, r3
 800f638:	d807      	bhi.n	800f64a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f63a:	4b10      	ldr	r3, [pc, #64]	; (800f67c <tcp_kill_state+0x90>)
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	6a1b      	ldr	r3, [r3, #32]
 800f642:	1ad3      	subs	r3, r2, r3
 800f644:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	68db      	ldr	r3, [r3, #12]
 800f64e:	617b      	str	r3, [r7, #20]
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d1e4      	bne.n	800f620 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d003      	beq.n	800f664 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f65c:	2100      	movs	r1, #0
 800f65e:	6938      	ldr	r0, [r7, #16]
 800f660:	f7fe ff7e 	bl	800e560 <tcp_abandon>
  }
}
 800f664:	bf00      	nop
 800f666:	3718      	adds	r7, #24
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	0801c168 	.word	0x0801c168
 800f670:	0801c6f4 	.word	0x0801c6f4
 800f674:	0801c1ac 	.word	0x0801c1ac
 800f678:	20016e14 	.word	0x20016e14
 800f67c:	20016e18 	.word	0x20016e18

0800f680 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f686:	2300      	movs	r3, #0
 800f688:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f68a:	2300      	movs	r3, #0
 800f68c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f68e:	4b12      	ldr	r3, [pc, #72]	; (800f6d8 <tcp_kill_timewait+0x58>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	60fb      	str	r3, [r7, #12]
 800f694:	e012      	b.n	800f6bc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f696:	4b11      	ldr	r3, [pc, #68]	; (800f6dc <tcp_kill_timewait+0x5c>)
 800f698:	681a      	ldr	r2, [r3, #0]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	6a1b      	ldr	r3, [r3, #32]
 800f69e:	1ad3      	subs	r3, r2, r3
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d807      	bhi.n	800f6b6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f6a6:	4b0d      	ldr	r3, [pc, #52]	; (800f6dc <tcp_kill_timewait+0x5c>)
 800f6a8:	681a      	ldr	r2, [r3, #0]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	6a1b      	ldr	r3, [r3, #32]
 800f6ae:	1ad3      	subs	r3, r2, r3
 800f6b0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	68db      	ldr	r3, [r3, #12]
 800f6ba:	60fb      	str	r3, [r7, #12]
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d1e9      	bne.n	800f696 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d002      	beq.n	800f6ce <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f6c8:	68b8      	ldr	r0, [r7, #8]
 800f6ca:	f7ff f807 	bl	800e6dc <tcp_abort>
  }
}
 800f6ce:	bf00      	nop
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	20016e24 	.word	0x20016e24
 800f6dc:	20016e18 	.word	0x20016e18

0800f6e0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b082      	sub	sp, #8
 800f6e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f6e6:	4b10      	ldr	r3, [pc, #64]	; (800f728 <tcp_handle_closepend+0x48>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f6ec:	e014      	b.n	800f718 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	8b5b      	ldrh	r3, [r3, #26]
 800f6f8:	f003 0308 	and.w	r3, r3, #8
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d009      	beq.n	800f714 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	8b5b      	ldrh	r3, [r3, #26]
 800f704:	f023 0308 	bic.w	r3, r3, #8
 800f708:	b29a      	uxth	r2, r3
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f7fe fe3a 	bl	800e388 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d1e7      	bne.n	800f6ee <tcp_handle_closepend+0xe>
  }
}
 800f71e:	bf00      	nop
 800f720:	3708      	adds	r7, #8
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	20016e14 	.word	0x20016e14

0800f72c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	4603      	mov	r3, r0
 800f734:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f736:	2001      	movs	r0, #1
 800f738:	f7fd fadc 	bl	800ccf4 <memp_malloc>
 800f73c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d126      	bne.n	800f792 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f744:	f7ff ffcc 	bl	800f6e0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f748:	f7ff ff9a 	bl	800f680 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f74c:	2001      	movs	r0, #1
 800f74e:	f7fd fad1 	bl	800ccf4 <memp_malloc>
 800f752:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d11b      	bne.n	800f792 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f75a:	2009      	movs	r0, #9
 800f75c:	f7ff ff46 	bl	800f5ec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f760:	2001      	movs	r0, #1
 800f762:	f7fd fac7 	bl	800ccf4 <memp_malloc>
 800f766:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d111      	bne.n	800f792 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f76e:	2008      	movs	r0, #8
 800f770:	f7ff ff3c 	bl	800f5ec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f774:	2001      	movs	r0, #1
 800f776:	f7fd fabd 	bl	800ccf4 <memp_malloc>
 800f77a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d107      	bne.n	800f792 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f782:	79fb      	ldrb	r3, [r7, #7]
 800f784:	4618      	mov	r0, r3
 800f786:	f7ff fee3 	bl	800f550 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f78a:	2001      	movs	r0, #1
 800f78c:	f7fd fab2 	bl	800ccf4 <memp_malloc>
 800f790:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d03f      	beq.n	800f818 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f798:	229c      	movs	r2, #156	; 0x9c
 800f79a:	2100      	movs	r1, #0
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	f009 fedc 	bl	801955a <memset>
    pcb->prio = prio;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	79fa      	ldrb	r2, [r7, #7]
 800f7a6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f7ae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f7b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	22ff      	movs	r2, #255	; 0xff
 800f7c6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f7ce:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	2206      	movs	r2, #6
 800f7d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2206      	movs	r2, #6
 800f7dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7e4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f7ee:	4b0d      	ldr	r3, [pc, #52]	; (800f824 <tcp_alloc+0xf8>)
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f7f6:	4b0c      	ldr	r3, [pc, #48]	; (800f828 <tcp_alloc+0xfc>)
 800f7f8:	781a      	ldrb	r2, [r3, #0]
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f804:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	4a08      	ldr	r2, [pc, #32]	; (800f82c <tcp_alloc+0x100>)
 800f80c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	4a07      	ldr	r2, [pc, #28]	; (800f830 <tcp_alloc+0x104>)
 800f814:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f818:	68fb      	ldr	r3, [r7, #12]
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3710      	adds	r7, #16
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}
 800f822:	bf00      	nop
 800f824:	20016e18 	.word	0x20016e18
 800f828:	20010256 	.word	0x20010256
 800f82c:	0800f4e5 	.word	0x0800f4e5
 800f830:	006ddd00 	.word	0x006ddd00

0800f834 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
 800f83a:	4603      	mov	r3, r0
 800f83c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f83e:	2040      	movs	r0, #64	; 0x40
 800f840:	f7ff ff74 	bl	800f72c <tcp_alloc>
 800f844:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f846:	68fb      	ldr	r3, [r7, #12]
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3710      	adds	r7, #16
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f850:	b480      	push	{r7}
 800f852:	b083      	sub	sp, #12
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
 800f858:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d002      	beq.n	800f866 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	683a      	ldr	r2, [r7, #0]
 800f864:	611a      	str	r2, [r3, #16]
  }
}
 800f866:	bf00      	nop
 800f868:	370c      	adds	r7, #12
 800f86a:	46bd      	mov	sp, r7
 800f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f870:	4770      	bx	lr
	...

0800f874 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d00e      	beq.n	800f8a2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	7d1b      	ldrb	r3, [r3, #20]
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d106      	bne.n	800f89a <tcp_recv+0x26>
 800f88c:	4b07      	ldr	r3, [pc, #28]	; (800f8ac <tcp_recv+0x38>)
 800f88e:	f240 72df 	movw	r2, #2015	; 0x7df
 800f892:	4907      	ldr	r1, [pc, #28]	; (800f8b0 <tcp_recv+0x3c>)
 800f894:	4807      	ldr	r0, [pc, #28]	; (800f8b4 <tcp_recv+0x40>)
 800f896:	f009 fe69 	bl	801956c <iprintf>
    pcb->recv = recv;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	683a      	ldr	r2, [r7, #0]
 800f89e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f8a2:	bf00      	nop
 800f8a4:	3708      	adds	r7, #8
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
 800f8aa:	bf00      	nop
 800f8ac:	0801c168 	.word	0x0801c168
 800f8b0:	0801c704 	.word	0x0801c704
 800f8b4:	0801c1ac 	.word	0x0801c1ac

0800f8b8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d00e      	beq.n	800f8e6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	7d1b      	ldrb	r3, [r3, #20]
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d106      	bne.n	800f8de <tcp_sent+0x26>
 800f8d0:	4b07      	ldr	r3, [pc, #28]	; (800f8f0 <tcp_sent+0x38>)
 800f8d2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f8d6:	4907      	ldr	r1, [pc, #28]	; (800f8f4 <tcp_sent+0x3c>)
 800f8d8:	4807      	ldr	r0, [pc, #28]	; (800f8f8 <tcp_sent+0x40>)
 800f8da:	f009 fe47 	bl	801956c <iprintf>
    pcb->sent = sent;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	683a      	ldr	r2, [r7, #0]
 800f8e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f8e6:	bf00      	nop
 800f8e8:	3708      	adds	r7, #8
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}
 800f8ee:	bf00      	nop
 800f8f0:	0801c168 	.word	0x0801c168
 800f8f4:	0801c72c 	.word	0x0801c72c
 800f8f8:	0801c1ac 	.word	0x0801c1ac

0800f8fc <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d00e      	beq.n	800f92a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	7d1b      	ldrb	r3, [r3, #20]
 800f910:	2b01      	cmp	r3, #1
 800f912:	d106      	bne.n	800f922 <tcp_err+0x26>
 800f914:	4b07      	ldr	r3, [pc, #28]	; (800f934 <tcp_err+0x38>)
 800f916:	f640 020d 	movw	r2, #2061	; 0x80d
 800f91a:	4907      	ldr	r1, [pc, #28]	; (800f938 <tcp_err+0x3c>)
 800f91c:	4807      	ldr	r0, [pc, #28]	; (800f93c <tcp_err+0x40>)
 800f91e:	f009 fe25 	bl	801956c <iprintf>
    pcb->errf = err;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	683a      	ldr	r2, [r7, #0]
 800f926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f92a:	bf00      	nop
 800f92c:	3708      	adds	r7, #8
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}
 800f932:	bf00      	nop
 800f934:	0801c168 	.word	0x0801c168
 800f938:	0801c754 	.word	0x0801c754
 800f93c:	0801c1ac 	.word	0x0801c1ac

0800f940 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f940:	b480      	push	{r7}
 800f942:	b085      	sub	sp, #20
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d008      	beq.n	800f962 <tcp_accept+0x22>
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	7d1b      	ldrb	r3, [r3, #20]
 800f954:	2b01      	cmp	r3, #1
 800f956:	d104      	bne.n	800f962 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	683a      	ldr	r2, [r7, #0]
 800f960:	619a      	str	r2, [r3, #24]
  }
}
 800f962:	bf00      	nop
 800f964:	3714      	adds	r7, #20
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr
	...

0800f970 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b084      	sub	sp, #16
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	4613      	mov	r3, r2
 800f97c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d107      	bne.n	800f994 <tcp_poll+0x24>
 800f984:	4b0e      	ldr	r3, [pc, #56]	; (800f9c0 <tcp_poll+0x50>)
 800f986:	f640 023d 	movw	r2, #2109	; 0x83d
 800f98a:	490e      	ldr	r1, [pc, #56]	; (800f9c4 <tcp_poll+0x54>)
 800f98c:	480e      	ldr	r0, [pc, #56]	; (800f9c8 <tcp_poll+0x58>)
 800f98e:	f009 fded 	bl	801956c <iprintf>
 800f992:	e011      	b.n	800f9b8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	7d1b      	ldrb	r3, [r3, #20]
 800f998:	2b01      	cmp	r3, #1
 800f99a:	d106      	bne.n	800f9aa <tcp_poll+0x3a>
 800f99c:	4b08      	ldr	r3, [pc, #32]	; (800f9c0 <tcp_poll+0x50>)
 800f99e:	f640 023e 	movw	r2, #2110	; 0x83e
 800f9a2:	490a      	ldr	r1, [pc, #40]	; (800f9cc <tcp_poll+0x5c>)
 800f9a4:	4808      	ldr	r0, [pc, #32]	; (800f9c8 <tcp_poll+0x58>)
 800f9a6:	f009 fde1 	bl	801956c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	68ba      	ldr	r2, [r7, #8]
 800f9ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	79fa      	ldrb	r2, [r7, #7]
 800f9b6:	775a      	strb	r2, [r3, #29]
}
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
 800f9be:	bf00      	nop
 800f9c0:	0801c168 	.word	0x0801c168
 800f9c4:	0801c77c 	.word	0x0801c77c
 800f9c8:	0801c1ac 	.word	0x0801c1ac
 800f9cc:	0801c794 	.word	0x0801c794

0800f9d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d107      	bne.n	800f9ee <tcp_pcb_purge+0x1e>
 800f9de:	4b21      	ldr	r3, [pc, #132]	; (800fa64 <tcp_pcb_purge+0x94>)
 800f9e0:	f640 0251 	movw	r2, #2129	; 0x851
 800f9e4:	4920      	ldr	r1, [pc, #128]	; (800fa68 <tcp_pcb_purge+0x98>)
 800f9e6:	4821      	ldr	r0, [pc, #132]	; (800fa6c <tcp_pcb_purge+0x9c>)
 800f9e8:	f009 fdc0 	bl	801956c <iprintf>
 800f9ec:	e037      	b.n	800fa5e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	7d1b      	ldrb	r3, [r3, #20]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d033      	beq.n	800fa5e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f9fa:	2b0a      	cmp	r3, #10
 800f9fc:	d02f      	beq.n	800fa5e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	d02b      	beq.n	800fa5e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d007      	beq.n	800fa1e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fe f86c 	bl	800daf0 <pbuf_free>
      pcb->refused_data = NULL;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d002      	beq.n	800fa2c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 f986 	bl	800fd38 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa32:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7ff fcdd 	bl	800f3f8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa42:	4618      	mov	r0, r3
 800fa44:	f7ff fcd8 	bl	800f3f8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	66da      	str	r2, [r3, #108]	; 0x6c
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fa5e:	3708      	adds	r7, #8
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	0801c168 	.word	0x0801c168
 800fa68:	0801c7b4 	.word	0x0801c7b4
 800fa6c:	0801c1ac 	.word	0x0801c1ac

0800fa70 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b084      	sub	sp, #16
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d106      	bne.n	800fa8e <tcp_pcb_remove+0x1e>
 800fa80:	4b3e      	ldr	r3, [pc, #248]	; (800fb7c <tcp_pcb_remove+0x10c>)
 800fa82:	f640 0283 	movw	r2, #2179	; 0x883
 800fa86:	493e      	ldr	r1, [pc, #248]	; (800fb80 <tcp_pcb_remove+0x110>)
 800fa88:	483e      	ldr	r0, [pc, #248]	; (800fb84 <tcp_pcb_remove+0x114>)
 800fa8a:	f009 fd6f 	bl	801956c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d106      	bne.n	800faa2 <tcp_pcb_remove+0x32>
 800fa94:	4b39      	ldr	r3, [pc, #228]	; (800fb7c <tcp_pcb_remove+0x10c>)
 800fa96:	f640 0284 	movw	r2, #2180	; 0x884
 800fa9a:	493b      	ldr	r1, [pc, #236]	; (800fb88 <tcp_pcb_remove+0x118>)
 800fa9c:	4839      	ldr	r0, [pc, #228]	; (800fb84 <tcp_pcb_remove+0x114>)
 800fa9e:	f009 fd65 	bl	801956c <iprintf>

  TCP_RMV(pcblist, pcb);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	683a      	ldr	r2, [r7, #0]
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d105      	bne.n	800fab8 <tcp_pcb_remove+0x48>
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	68da      	ldr	r2, [r3, #12]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	601a      	str	r2, [r3, #0]
 800fab6:	e013      	b.n	800fae0 <tcp_pcb_remove+0x70>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	60fb      	str	r3, [r7, #12]
 800fabe:	e00c      	b.n	800fada <tcp_pcb_remove+0x6a>
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	683a      	ldr	r2, [r7, #0]
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d104      	bne.n	800fad4 <tcp_pcb_remove+0x64>
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	68da      	ldr	r2, [r3, #12]
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	60da      	str	r2, [r3, #12]
 800fad2:	e005      	b.n	800fae0 <tcp_pcb_remove+0x70>
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	60fb      	str	r3, [r7, #12]
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d1ef      	bne.n	800fac0 <tcp_pcb_remove+0x50>
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	2200      	movs	r2, #0
 800fae4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fae6:	6838      	ldr	r0, [r7, #0]
 800fae8:	f7ff ff72 	bl	800f9d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800faec:	683b      	ldr	r3, [r7, #0]
 800faee:	7d1b      	ldrb	r3, [r3, #20]
 800faf0:	2b0a      	cmp	r3, #10
 800faf2:	d013      	beq.n	800fb1c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800faf4:	683b      	ldr	r3, [r7, #0]
 800faf6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d00f      	beq.n	800fb1c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	8b5b      	ldrh	r3, [r3, #26]
 800fb00:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d009      	beq.n	800fb1c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	8b5b      	ldrh	r3, [r3, #26]
 800fb0c:	f043 0302 	orr.w	r3, r3, #2
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fb16:	6838      	ldr	r0, [r7, #0]
 800fb18:	f003 fbc2 	bl	80132a0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	7d1b      	ldrb	r3, [r3, #20]
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d020      	beq.n	800fb66 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d006      	beq.n	800fb3a <tcp_pcb_remove+0xca>
 800fb2c:	4b13      	ldr	r3, [pc, #76]	; (800fb7c <tcp_pcb_remove+0x10c>)
 800fb2e:	f640 0293 	movw	r2, #2195	; 0x893
 800fb32:	4916      	ldr	r1, [pc, #88]	; (800fb8c <tcp_pcb_remove+0x11c>)
 800fb34:	4813      	ldr	r0, [pc, #76]	; (800fb84 <tcp_pcb_remove+0x114>)
 800fb36:	f009 fd19 	bl	801956c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d006      	beq.n	800fb50 <tcp_pcb_remove+0xe0>
 800fb42:	4b0e      	ldr	r3, [pc, #56]	; (800fb7c <tcp_pcb_remove+0x10c>)
 800fb44:	f640 0294 	movw	r2, #2196	; 0x894
 800fb48:	4911      	ldr	r1, [pc, #68]	; (800fb90 <tcp_pcb_remove+0x120>)
 800fb4a:	480e      	ldr	r0, [pc, #56]	; (800fb84 <tcp_pcb_remove+0x114>)
 800fb4c:	f009 fd0e 	bl	801956c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d006      	beq.n	800fb66 <tcp_pcb_remove+0xf6>
 800fb58:	4b08      	ldr	r3, [pc, #32]	; (800fb7c <tcp_pcb_remove+0x10c>)
 800fb5a:	f640 0296 	movw	r2, #2198	; 0x896
 800fb5e:	490d      	ldr	r1, [pc, #52]	; (800fb94 <tcp_pcb_remove+0x124>)
 800fb60:	4808      	ldr	r0, [pc, #32]	; (800fb84 <tcp_pcb_remove+0x114>)
 800fb62:	f009 fd03 	bl	801956c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fb72:	bf00      	nop
 800fb74:	3710      	adds	r7, #16
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	0801c168 	.word	0x0801c168
 800fb80:	0801c7d0 	.word	0x0801c7d0
 800fb84:	0801c1ac 	.word	0x0801c1ac
 800fb88:	0801c7ec 	.word	0x0801c7ec
 800fb8c:	0801c80c 	.word	0x0801c80c
 800fb90:	0801c824 	.word	0x0801c824
 800fb94:	0801c840 	.word	0x0801c840

0800fb98 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d106      	bne.n	800fbb4 <tcp_next_iss+0x1c>
 800fba6:	4b0a      	ldr	r3, [pc, #40]	; (800fbd0 <tcp_next_iss+0x38>)
 800fba8:	f640 02af 	movw	r2, #2223	; 0x8af
 800fbac:	4909      	ldr	r1, [pc, #36]	; (800fbd4 <tcp_next_iss+0x3c>)
 800fbae:	480a      	ldr	r0, [pc, #40]	; (800fbd8 <tcp_next_iss+0x40>)
 800fbb0:	f009 fcdc 	bl	801956c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fbb4:	4b09      	ldr	r3, [pc, #36]	; (800fbdc <tcp_next_iss+0x44>)
 800fbb6:	681a      	ldr	r2, [r3, #0]
 800fbb8:	4b09      	ldr	r3, [pc, #36]	; (800fbe0 <tcp_next_iss+0x48>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	4413      	add	r3, r2
 800fbbe:	4a07      	ldr	r2, [pc, #28]	; (800fbdc <tcp_next_iss+0x44>)
 800fbc0:	6013      	str	r3, [r2, #0]
  return iss;
 800fbc2:	4b06      	ldr	r3, [pc, #24]	; (800fbdc <tcp_next_iss+0x44>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3708      	adds	r7, #8
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop
 800fbd0:	0801c168 	.word	0x0801c168
 800fbd4:	0801c858 	.word	0x0801c858
 800fbd8:	0801c1ac 	.word	0x0801c1ac
 800fbdc:	20000014 	.word	0x20000014
 800fbe0:	20016e18 	.word	0x20016e18

0800fbe4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b086      	sub	sp, #24
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	4603      	mov	r3, r0
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	607a      	str	r2, [r7, #4]
 800fbf0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d106      	bne.n	800fc06 <tcp_eff_send_mss_netif+0x22>
 800fbf8:	4b14      	ldr	r3, [pc, #80]	; (800fc4c <tcp_eff_send_mss_netif+0x68>)
 800fbfa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fbfe:	4914      	ldr	r1, [pc, #80]	; (800fc50 <tcp_eff_send_mss_netif+0x6c>)
 800fc00:	4814      	ldr	r0, [pc, #80]	; (800fc54 <tcp_eff_send_mss_netif+0x70>)
 800fc02:	f009 fcb3 	bl	801956c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d101      	bne.n	800fc10 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fc0c:	89fb      	ldrh	r3, [r7, #14]
 800fc0e:	e019      	b.n	800fc44 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc14:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fc16:	8afb      	ldrh	r3, [r7, #22]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d012      	beq.n	800fc42 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fc1c:	2328      	movs	r3, #40	; 0x28
 800fc1e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fc20:	8afa      	ldrh	r2, [r7, #22]
 800fc22:	8abb      	ldrh	r3, [r7, #20]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d904      	bls.n	800fc32 <tcp_eff_send_mss_netif+0x4e>
 800fc28:	8afa      	ldrh	r2, [r7, #22]
 800fc2a:	8abb      	ldrh	r3, [r7, #20]
 800fc2c:	1ad3      	subs	r3, r2, r3
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	e000      	b.n	800fc34 <tcp_eff_send_mss_netif+0x50>
 800fc32:	2300      	movs	r3, #0
 800fc34:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fc36:	8a7a      	ldrh	r2, [r7, #18]
 800fc38:	89fb      	ldrh	r3, [r7, #14]
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	bf28      	it	cs
 800fc3e:	4613      	movcs	r3, r2
 800fc40:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fc42:	89fb      	ldrh	r3, [r7, #14]
}
 800fc44:	4618      	mov	r0, r3
 800fc46:	3718      	adds	r7, #24
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	0801c168 	.word	0x0801c168
 800fc50:	0801c874 	.word	0x0801c874
 800fc54:	0801c1ac 	.word	0x0801c1ac

0800fc58 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d119      	bne.n	800fca0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fc6c:	4b10      	ldr	r3, [pc, #64]	; (800fcb0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fc6e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fc72:	4910      	ldr	r1, [pc, #64]	; (800fcb4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fc74:	4810      	ldr	r0, [pc, #64]	; (800fcb8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fc76:	f009 fc79 	bl	801956c <iprintf>

  while (pcb != NULL) {
 800fc7a:	e011      	b.n	800fca0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	681a      	ldr	r2, [r3, #0]
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d108      	bne.n	800fc9a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	68db      	ldr	r3, [r3, #12]
 800fc8c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fc8e:	68f8      	ldr	r0, [r7, #12]
 800fc90:	f7fe fd24 	bl	800e6dc <tcp_abort>
      pcb = next;
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	60fb      	str	r3, [r7, #12]
 800fc98:	e002      	b.n	800fca0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	68db      	ldr	r3, [r3, #12]
 800fc9e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d1ea      	bne.n	800fc7c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fca6:	bf00      	nop
 800fca8:	3710      	adds	r7, #16
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	0801c168 	.word	0x0801c168
 800fcb4:	0801c89c 	.word	0x0801c89c
 800fcb8:	0801c1ac 	.word	0x0801c1ac

0800fcbc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b084      	sub	sp, #16
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
 800fcc4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d02a      	beq.n	800fd22 <tcp_netif_ip_addr_changed+0x66>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d026      	beq.n	800fd22 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fcd4:	4b15      	ldr	r3, [pc, #84]	; (800fd2c <tcp_netif_ip_addr_changed+0x70>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4619      	mov	r1, r3
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7ff ffbc 	bl	800fc58 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fce0:	4b13      	ldr	r3, [pc, #76]	; (800fd30 <tcp_netif_ip_addr_changed+0x74>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	4619      	mov	r1, r3
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f7ff ffb6 	bl	800fc58 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d017      	beq.n	800fd22 <tcp_netif_ip_addr_changed+0x66>
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d013      	beq.n	800fd22 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fcfa:	4b0e      	ldr	r3, [pc, #56]	; (800fd34 <tcp_netif_ip_addr_changed+0x78>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	60fb      	str	r3, [r7, #12]
 800fd00:	e00c      	b.n	800fd1c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681a      	ldr	r2, [r3, #0]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d103      	bne.n	800fd16 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	681a      	ldr	r2, [r3, #0]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	68db      	ldr	r3, [r3, #12]
 800fd1a:	60fb      	str	r3, [r7, #12]
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d1ef      	bne.n	800fd02 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fd22:	bf00      	nop
 800fd24:	3710      	adds	r7, #16
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	20016e14 	.word	0x20016e14
 800fd30:	20016e20 	.word	0x20016e20
 800fd34:	20016e1c 	.word	0x20016e1c

0800fd38 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d007      	beq.n	800fd58 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7ff fb53 	bl	800f3f8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2200      	movs	r2, #0
 800fd56:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fd58:	bf00      	nop
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}

0800fd60 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fd60:	b590      	push	{r4, r7, lr}
 800fd62:	b08d      	sub	sp, #52	; 0x34
 800fd64:	af04      	add	r7, sp, #16
 800fd66:	6078      	str	r0, [r7, #4]
 800fd68:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d105      	bne.n	800fd7c <tcp_input+0x1c>
 800fd70:	4b9b      	ldr	r3, [pc, #620]	; (800ffe0 <tcp_input+0x280>)
 800fd72:	2283      	movs	r2, #131	; 0x83
 800fd74:	499b      	ldr	r1, [pc, #620]	; (800ffe4 <tcp_input+0x284>)
 800fd76:	489c      	ldr	r0, [pc, #624]	; (800ffe8 <tcp_input+0x288>)
 800fd78:	f009 fbf8 	bl	801956c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	4a9a      	ldr	r2, [pc, #616]	; (800ffec <tcp_input+0x28c>)
 800fd82:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	895b      	ldrh	r3, [r3, #10]
 800fd88:	2b13      	cmp	r3, #19
 800fd8a:	f240 83c4 	bls.w	8010516 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fd8e:	4b98      	ldr	r3, [pc, #608]	; (800fff0 <tcp_input+0x290>)
 800fd90:	695a      	ldr	r2, [r3, #20]
 800fd92:	4b97      	ldr	r3, [pc, #604]	; (800fff0 <tcp_input+0x290>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4619      	mov	r1, r3
 800fd98:	4610      	mov	r0, r2
 800fd9a:	f008 fa85 	bl	80182a8 <ip4_addr_isbroadcast_u32>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	f040 83ba 	bne.w	801051a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fda6:	4b92      	ldr	r3, [pc, #584]	; (800fff0 <tcp_input+0x290>)
 800fda8:	695b      	ldr	r3, [r3, #20]
 800fdaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fdae:	2be0      	cmp	r3, #224	; 0xe0
 800fdb0:	f000 83b3 	beq.w	801051a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fdb4:	4b8d      	ldr	r3, [pc, #564]	; (800ffec <tcp_input+0x28c>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	899b      	ldrh	r3, [r3, #12]
 800fdba:	b29b      	uxth	r3, r3
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	f7fc faad 	bl	800c31c <lwip_htons>
 800fdc2:	4603      	mov	r3, r0
 800fdc4:	0b1b      	lsrs	r3, r3, #12
 800fdc6:	b29b      	uxth	r3, r3
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	009b      	lsls	r3, r3, #2
 800fdcc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fdce:	7cbb      	ldrb	r3, [r7, #18]
 800fdd0:	2b13      	cmp	r3, #19
 800fdd2:	f240 83a2 	bls.w	801051a <tcp_input+0x7ba>
 800fdd6:	7cbb      	ldrb	r3, [r7, #18]
 800fdd8:	b29a      	uxth	r2, r3
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	891b      	ldrh	r3, [r3, #8]
 800fdde:	429a      	cmp	r2, r3
 800fde0:	f200 839b 	bhi.w	801051a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fde4:	7cbb      	ldrb	r3, [r7, #18]
 800fde6:	b29b      	uxth	r3, r3
 800fde8:	3b14      	subs	r3, #20
 800fdea:	b29a      	uxth	r2, r3
 800fdec:	4b81      	ldr	r3, [pc, #516]	; (800fff4 <tcp_input+0x294>)
 800fdee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fdf0:	4b81      	ldr	r3, [pc, #516]	; (800fff8 <tcp_input+0x298>)
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	895a      	ldrh	r2, [r3, #10]
 800fdfa:	7cbb      	ldrb	r3, [r7, #18]
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	429a      	cmp	r2, r3
 800fe00:	d309      	bcc.n	800fe16 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fe02:	4b7c      	ldr	r3, [pc, #496]	; (800fff4 <tcp_input+0x294>)
 800fe04:	881a      	ldrh	r2, [r3, #0]
 800fe06:	4b7d      	ldr	r3, [pc, #500]	; (800fffc <tcp_input+0x29c>)
 800fe08:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fe0a:	7cbb      	ldrb	r3, [r7, #18]
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f7fd fde8 	bl	800d9e4 <pbuf_remove_header>
 800fe14:	e04e      	b.n	800feb4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d105      	bne.n	800fe2a <tcp_input+0xca>
 800fe1e:	4b70      	ldr	r3, [pc, #448]	; (800ffe0 <tcp_input+0x280>)
 800fe20:	22c2      	movs	r2, #194	; 0xc2
 800fe22:	4977      	ldr	r1, [pc, #476]	; (8010000 <tcp_input+0x2a0>)
 800fe24:	4870      	ldr	r0, [pc, #448]	; (800ffe8 <tcp_input+0x288>)
 800fe26:	f009 fba1 	bl	801956c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fe2a:	2114      	movs	r1, #20
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7fd fdd9 	bl	800d9e4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	895a      	ldrh	r2, [r3, #10]
 800fe36:	4b71      	ldr	r3, [pc, #452]	; (800fffc <tcp_input+0x29c>)
 800fe38:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fe3a:	4b6e      	ldr	r3, [pc, #440]	; (800fff4 <tcp_input+0x294>)
 800fe3c:	881a      	ldrh	r2, [r3, #0]
 800fe3e:	4b6f      	ldr	r3, [pc, #444]	; (800fffc <tcp_input+0x29c>)
 800fe40:	881b      	ldrh	r3, [r3, #0]
 800fe42:	1ad3      	subs	r3, r2, r3
 800fe44:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fe46:	4b6d      	ldr	r3, [pc, #436]	; (800fffc <tcp_input+0x29c>)
 800fe48:	881b      	ldrh	r3, [r3, #0]
 800fe4a:	4619      	mov	r1, r3
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f7fd fdc9 	bl	800d9e4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	895b      	ldrh	r3, [r3, #10]
 800fe58:	8a3a      	ldrh	r2, [r7, #16]
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	f200 835f 	bhi.w	801051e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	4a64      	ldr	r2, [pc, #400]	; (800fff8 <tcp_input+0x298>)
 800fe68:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	8a3a      	ldrh	r2, [r7, #16]
 800fe70:	4611      	mov	r1, r2
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7fd fdb6 	bl	800d9e4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	891a      	ldrh	r2, [r3, #8]
 800fe7c:	8a3b      	ldrh	r3, [r7, #16]
 800fe7e:	1ad3      	subs	r3, r2, r3
 800fe80:	b29a      	uxth	r2, r3
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	895b      	ldrh	r3, [r3, #10]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d005      	beq.n	800fe9a <tcp_input+0x13a>
 800fe8e:	4b54      	ldr	r3, [pc, #336]	; (800ffe0 <tcp_input+0x280>)
 800fe90:	22df      	movs	r2, #223	; 0xdf
 800fe92:	495c      	ldr	r1, [pc, #368]	; (8010004 <tcp_input+0x2a4>)
 800fe94:	4854      	ldr	r0, [pc, #336]	; (800ffe8 <tcp_input+0x288>)
 800fe96:	f009 fb69 	bl	801956c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	891a      	ldrh	r2, [r3, #8]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	891b      	ldrh	r3, [r3, #8]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d005      	beq.n	800feb4 <tcp_input+0x154>
 800fea8:	4b4d      	ldr	r3, [pc, #308]	; (800ffe0 <tcp_input+0x280>)
 800feaa:	22e0      	movs	r2, #224	; 0xe0
 800feac:	4956      	ldr	r1, [pc, #344]	; (8010008 <tcp_input+0x2a8>)
 800feae:	484e      	ldr	r0, [pc, #312]	; (800ffe8 <tcp_input+0x288>)
 800feb0:	f009 fb5c 	bl	801956c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800feb4:	4b4d      	ldr	r3, [pc, #308]	; (800ffec <tcp_input+0x28c>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	881b      	ldrh	r3, [r3, #0]
 800feba:	b29a      	uxth	r2, r3
 800febc:	4b4b      	ldr	r3, [pc, #300]	; (800ffec <tcp_input+0x28c>)
 800febe:	681c      	ldr	r4, [r3, #0]
 800fec0:	4610      	mov	r0, r2
 800fec2:	f7fc fa2b 	bl	800c31c <lwip_htons>
 800fec6:	4603      	mov	r3, r0
 800fec8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800feca:	4b48      	ldr	r3, [pc, #288]	; (800ffec <tcp_input+0x28c>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	885b      	ldrh	r3, [r3, #2]
 800fed0:	b29a      	uxth	r2, r3
 800fed2:	4b46      	ldr	r3, [pc, #280]	; (800ffec <tcp_input+0x28c>)
 800fed4:	681c      	ldr	r4, [r3, #0]
 800fed6:	4610      	mov	r0, r2
 800fed8:	f7fc fa20 	bl	800c31c <lwip_htons>
 800fedc:	4603      	mov	r3, r0
 800fede:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fee0:	4b42      	ldr	r3, [pc, #264]	; (800ffec <tcp_input+0x28c>)
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	685a      	ldr	r2, [r3, #4]
 800fee6:	4b41      	ldr	r3, [pc, #260]	; (800ffec <tcp_input+0x28c>)
 800fee8:	681c      	ldr	r4, [r3, #0]
 800feea:	4610      	mov	r0, r2
 800feec:	f7fc fa2b 	bl	800c346 <lwip_htonl>
 800fef0:	4603      	mov	r3, r0
 800fef2:	6063      	str	r3, [r4, #4]
 800fef4:	6863      	ldr	r3, [r4, #4]
 800fef6:	4a45      	ldr	r2, [pc, #276]	; (801000c <tcp_input+0x2ac>)
 800fef8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fefa:	4b3c      	ldr	r3, [pc, #240]	; (800ffec <tcp_input+0x28c>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	689a      	ldr	r2, [r3, #8]
 800ff00:	4b3a      	ldr	r3, [pc, #232]	; (800ffec <tcp_input+0x28c>)
 800ff02:	681c      	ldr	r4, [r3, #0]
 800ff04:	4610      	mov	r0, r2
 800ff06:	f7fc fa1e 	bl	800c346 <lwip_htonl>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	60a3      	str	r3, [r4, #8]
 800ff0e:	68a3      	ldr	r3, [r4, #8]
 800ff10:	4a3f      	ldr	r2, [pc, #252]	; (8010010 <tcp_input+0x2b0>)
 800ff12:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ff14:	4b35      	ldr	r3, [pc, #212]	; (800ffec <tcp_input+0x28c>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	89db      	ldrh	r3, [r3, #14]
 800ff1a:	b29a      	uxth	r2, r3
 800ff1c:	4b33      	ldr	r3, [pc, #204]	; (800ffec <tcp_input+0x28c>)
 800ff1e:	681c      	ldr	r4, [r3, #0]
 800ff20:	4610      	mov	r0, r2
 800ff22:	f7fc f9fb 	bl	800c31c <lwip_htons>
 800ff26:	4603      	mov	r3, r0
 800ff28:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ff2a:	4b30      	ldr	r3, [pc, #192]	; (800ffec <tcp_input+0x28c>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	899b      	ldrh	r3, [r3, #12]
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7fc f9f2 	bl	800c31c <lwip_htons>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	b2db      	uxtb	r3, r3
 800ff3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff40:	b2da      	uxtb	r2, r3
 800ff42:	4b34      	ldr	r3, [pc, #208]	; (8010014 <tcp_input+0x2b4>)
 800ff44:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	891a      	ldrh	r2, [r3, #8]
 800ff4a:	4b33      	ldr	r3, [pc, #204]	; (8010018 <tcp_input+0x2b8>)
 800ff4c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ff4e:	4b31      	ldr	r3, [pc, #196]	; (8010014 <tcp_input+0x2b4>)
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	f003 0303 	and.w	r3, r3, #3
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d00c      	beq.n	800ff74 <tcp_input+0x214>
    tcplen++;
 800ff5a:	4b2f      	ldr	r3, [pc, #188]	; (8010018 <tcp_input+0x2b8>)
 800ff5c:	881b      	ldrh	r3, [r3, #0]
 800ff5e:	3301      	adds	r3, #1
 800ff60:	b29a      	uxth	r2, r3
 800ff62:	4b2d      	ldr	r3, [pc, #180]	; (8010018 <tcp_input+0x2b8>)
 800ff64:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	891a      	ldrh	r2, [r3, #8]
 800ff6a:	4b2b      	ldr	r3, [pc, #172]	; (8010018 <tcp_input+0x2b8>)
 800ff6c:	881b      	ldrh	r3, [r3, #0]
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	f200 82d7 	bhi.w	8010522 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ff74:	2300      	movs	r3, #0
 800ff76:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff78:	4b28      	ldr	r3, [pc, #160]	; (801001c <tcp_input+0x2bc>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	61fb      	str	r3, [r7, #28]
 800ff7e:	e09d      	b.n	80100bc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ff80:	69fb      	ldr	r3, [r7, #28]
 800ff82:	7d1b      	ldrb	r3, [r3, #20]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d105      	bne.n	800ff94 <tcp_input+0x234>
 800ff88:	4b15      	ldr	r3, [pc, #84]	; (800ffe0 <tcp_input+0x280>)
 800ff8a:	22fb      	movs	r2, #251	; 0xfb
 800ff8c:	4924      	ldr	r1, [pc, #144]	; (8010020 <tcp_input+0x2c0>)
 800ff8e:	4816      	ldr	r0, [pc, #88]	; (800ffe8 <tcp_input+0x288>)
 800ff90:	f009 faec 	bl	801956c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	7d1b      	ldrb	r3, [r3, #20]
 800ff98:	2b0a      	cmp	r3, #10
 800ff9a:	d105      	bne.n	800ffa8 <tcp_input+0x248>
 800ff9c:	4b10      	ldr	r3, [pc, #64]	; (800ffe0 <tcp_input+0x280>)
 800ff9e:	22fc      	movs	r2, #252	; 0xfc
 800ffa0:	4920      	ldr	r1, [pc, #128]	; (8010024 <tcp_input+0x2c4>)
 800ffa2:	4811      	ldr	r0, [pc, #68]	; (800ffe8 <tcp_input+0x288>)
 800ffa4:	f009 fae2 	bl	801956c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	7d1b      	ldrb	r3, [r3, #20]
 800ffac:	2b01      	cmp	r3, #1
 800ffae:	d105      	bne.n	800ffbc <tcp_input+0x25c>
 800ffb0:	4b0b      	ldr	r3, [pc, #44]	; (800ffe0 <tcp_input+0x280>)
 800ffb2:	22fd      	movs	r2, #253	; 0xfd
 800ffb4:	491c      	ldr	r1, [pc, #112]	; (8010028 <tcp_input+0x2c8>)
 800ffb6:	480c      	ldr	r0, [pc, #48]	; (800ffe8 <tcp_input+0x288>)
 800ffb8:	f009 fad8 	bl	801956c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ffbc:	69fb      	ldr	r3, [r7, #28]
 800ffbe:	7a1b      	ldrb	r3, [r3, #8]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d033      	beq.n	801002c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	7a1a      	ldrb	r2, [r3, #8]
 800ffc8:	4b09      	ldr	r3, [pc, #36]	; (800fff0 <tcp_input+0x290>)
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d029      	beq.n	801002c <tcp_input+0x2cc>
      prev = pcb;
 800ffd8:	69fb      	ldr	r3, [r7, #28]
 800ffda:	61bb      	str	r3, [r7, #24]
      continue;
 800ffdc:	e06b      	b.n	80100b6 <tcp_input+0x356>
 800ffde:	bf00      	nop
 800ffe0:	0801c8d0 	.word	0x0801c8d0
 800ffe4:	0801c904 	.word	0x0801c904
 800ffe8:	0801c91c 	.word	0x0801c91c
 800ffec:	20010268 	.word	0x20010268
 800fff0:	200136e0 	.word	0x200136e0
 800fff4:	2001026c 	.word	0x2001026c
 800fff8:	20010270 	.word	0x20010270
 800fffc:	2001026e 	.word	0x2001026e
 8010000:	0801c944 	.word	0x0801c944
 8010004:	0801c954 	.word	0x0801c954
 8010008:	0801c960 	.word	0x0801c960
 801000c:	20010278 	.word	0x20010278
 8010010:	2001027c 	.word	0x2001027c
 8010014:	20010284 	.word	0x20010284
 8010018:	20010282 	.word	0x20010282
 801001c:	20016e14 	.word	0x20016e14
 8010020:	0801c980 	.word	0x0801c980
 8010024:	0801c9a8 	.word	0x0801c9a8
 8010028:	0801c9d4 	.word	0x0801c9d4
    }

    if (pcb->remote_port == tcphdr->src &&
 801002c:	69fb      	ldr	r3, [r7, #28]
 801002e:	8b1a      	ldrh	r2, [r3, #24]
 8010030:	4b94      	ldr	r3, [pc, #592]	; (8010284 <tcp_input+0x524>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	881b      	ldrh	r3, [r3, #0]
 8010036:	b29b      	uxth	r3, r3
 8010038:	429a      	cmp	r2, r3
 801003a:	d13a      	bne.n	80100b2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801003c:	69fb      	ldr	r3, [r7, #28]
 801003e:	8ada      	ldrh	r2, [r3, #22]
 8010040:	4b90      	ldr	r3, [pc, #576]	; (8010284 <tcp_input+0x524>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	885b      	ldrh	r3, [r3, #2]
 8010046:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010048:	429a      	cmp	r2, r3
 801004a:	d132      	bne.n	80100b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801004c:	69fb      	ldr	r3, [r7, #28]
 801004e:	685a      	ldr	r2, [r3, #4]
 8010050:	4b8d      	ldr	r3, [pc, #564]	; (8010288 <tcp_input+0x528>)
 8010052:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010054:	429a      	cmp	r2, r3
 8010056:	d12c      	bne.n	80100b2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010058:	69fb      	ldr	r3, [r7, #28]
 801005a:	681a      	ldr	r2, [r3, #0]
 801005c:	4b8a      	ldr	r3, [pc, #552]	; (8010288 <tcp_input+0x528>)
 801005e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010060:	429a      	cmp	r2, r3
 8010062:	d126      	bne.n	80100b2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	68db      	ldr	r3, [r3, #12]
 8010068:	69fa      	ldr	r2, [r7, #28]
 801006a:	429a      	cmp	r2, r3
 801006c:	d106      	bne.n	801007c <tcp_input+0x31c>
 801006e:	4b87      	ldr	r3, [pc, #540]	; (801028c <tcp_input+0x52c>)
 8010070:	f240 120d 	movw	r2, #269	; 0x10d
 8010074:	4986      	ldr	r1, [pc, #536]	; (8010290 <tcp_input+0x530>)
 8010076:	4887      	ldr	r0, [pc, #540]	; (8010294 <tcp_input+0x534>)
 8010078:	f009 fa78 	bl	801956c <iprintf>
      if (prev != NULL) {
 801007c:	69bb      	ldr	r3, [r7, #24]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d00a      	beq.n	8010098 <tcp_input+0x338>
        prev->next = pcb->next;
 8010082:	69fb      	ldr	r3, [r7, #28]
 8010084:	68da      	ldr	r2, [r3, #12]
 8010086:	69bb      	ldr	r3, [r7, #24]
 8010088:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801008a:	4b83      	ldr	r3, [pc, #524]	; (8010298 <tcp_input+0x538>)
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	69fb      	ldr	r3, [r7, #28]
 8010090:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010092:	4a81      	ldr	r2, [pc, #516]	; (8010298 <tcp_input+0x538>)
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010098:	69fb      	ldr	r3, [r7, #28]
 801009a:	68db      	ldr	r3, [r3, #12]
 801009c:	69fa      	ldr	r2, [r7, #28]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d111      	bne.n	80100c6 <tcp_input+0x366>
 80100a2:	4b7a      	ldr	r3, [pc, #488]	; (801028c <tcp_input+0x52c>)
 80100a4:	f240 1215 	movw	r2, #277	; 0x115
 80100a8:	497c      	ldr	r1, [pc, #496]	; (801029c <tcp_input+0x53c>)
 80100aa:	487a      	ldr	r0, [pc, #488]	; (8010294 <tcp_input+0x534>)
 80100ac:	f009 fa5e 	bl	801956c <iprintf>
      break;
 80100b0:	e009      	b.n	80100c6 <tcp_input+0x366>
    }
    prev = pcb;
 80100b2:	69fb      	ldr	r3, [r7, #28]
 80100b4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80100b6:	69fb      	ldr	r3, [r7, #28]
 80100b8:	68db      	ldr	r3, [r3, #12]
 80100ba:	61fb      	str	r3, [r7, #28]
 80100bc:	69fb      	ldr	r3, [r7, #28]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	f47f af5e 	bne.w	800ff80 <tcp_input+0x220>
 80100c4:	e000      	b.n	80100c8 <tcp_input+0x368>
      break;
 80100c6:	bf00      	nop
  }

  if (pcb == NULL) {
 80100c8:	69fb      	ldr	r3, [r7, #28]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	f040 8095 	bne.w	80101fa <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100d0:	4b73      	ldr	r3, [pc, #460]	; (80102a0 <tcp_input+0x540>)
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	61fb      	str	r3, [r7, #28]
 80100d6:	e03f      	b.n	8010158 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	7d1b      	ldrb	r3, [r3, #20]
 80100dc:	2b0a      	cmp	r3, #10
 80100de:	d006      	beq.n	80100ee <tcp_input+0x38e>
 80100e0:	4b6a      	ldr	r3, [pc, #424]	; (801028c <tcp_input+0x52c>)
 80100e2:	f240 121f 	movw	r2, #287	; 0x11f
 80100e6:	496f      	ldr	r1, [pc, #444]	; (80102a4 <tcp_input+0x544>)
 80100e8:	486a      	ldr	r0, [pc, #424]	; (8010294 <tcp_input+0x534>)
 80100ea:	f009 fa3f 	bl	801956c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80100ee:	69fb      	ldr	r3, [r7, #28]
 80100f0:	7a1b      	ldrb	r3, [r3, #8]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d009      	beq.n	801010a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80100f6:	69fb      	ldr	r3, [r7, #28]
 80100f8:	7a1a      	ldrb	r2, [r3, #8]
 80100fa:	4b63      	ldr	r3, [pc, #396]	; (8010288 <tcp_input+0x528>)
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010102:	3301      	adds	r3, #1
 8010104:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010106:	429a      	cmp	r2, r3
 8010108:	d122      	bne.n	8010150 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801010a:	69fb      	ldr	r3, [r7, #28]
 801010c:	8b1a      	ldrh	r2, [r3, #24]
 801010e:	4b5d      	ldr	r3, [pc, #372]	; (8010284 <tcp_input+0x524>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	881b      	ldrh	r3, [r3, #0]
 8010114:	b29b      	uxth	r3, r3
 8010116:	429a      	cmp	r2, r3
 8010118:	d11b      	bne.n	8010152 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801011a:	69fb      	ldr	r3, [r7, #28]
 801011c:	8ada      	ldrh	r2, [r3, #22]
 801011e:	4b59      	ldr	r3, [pc, #356]	; (8010284 <tcp_input+0x524>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	885b      	ldrh	r3, [r3, #2]
 8010124:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010126:	429a      	cmp	r2, r3
 8010128:	d113      	bne.n	8010152 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801012a:	69fb      	ldr	r3, [r7, #28]
 801012c:	685a      	ldr	r2, [r3, #4]
 801012e:	4b56      	ldr	r3, [pc, #344]	; (8010288 <tcp_input+0x528>)
 8010130:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010132:	429a      	cmp	r2, r3
 8010134:	d10d      	bne.n	8010152 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010136:	69fb      	ldr	r3, [r7, #28]
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	4b53      	ldr	r3, [pc, #332]	; (8010288 <tcp_input+0x528>)
 801013c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801013e:	429a      	cmp	r2, r3
 8010140:	d107      	bne.n	8010152 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010142:	69f8      	ldr	r0, [r7, #28]
 8010144:	f000 fb52 	bl	80107ec <tcp_timewait_input>
        }
        pbuf_free(p);
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f7fd fcd1 	bl	800daf0 <pbuf_free>
        return;
 801014e:	e1ee      	b.n	801052e <tcp_input+0x7ce>
        continue;
 8010150:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010152:	69fb      	ldr	r3, [r7, #28]
 8010154:	68db      	ldr	r3, [r3, #12]
 8010156:	61fb      	str	r3, [r7, #28]
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d1bc      	bne.n	80100d8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801015e:	2300      	movs	r3, #0
 8010160:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010162:	4b51      	ldr	r3, [pc, #324]	; (80102a8 <tcp_input+0x548>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	617b      	str	r3, [r7, #20]
 8010168:	e02a      	b.n	80101c0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	7a1b      	ldrb	r3, [r3, #8]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d00c      	beq.n	801018c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	7a1a      	ldrb	r2, [r3, #8]
 8010176:	4b44      	ldr	r3, [pc, #272]	; (8010288 <tcp_input+0x528>)
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801017e:	3301      	adds	r3, #1
 8010180:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010182:	429a      	cmp	r2, r3
 8010184:	d002      	beq.n	801018c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010186:	697b      	ldr	r3, [r7, #20]
 8010188:	61bb      	str	r3, [r7, #24]
        continue;
 801018a:	e016      	b.n	80101ba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	8ada      	ldrh	r2, [r3, #22]
 8010190:	4b3c      	ldr	r3, [pc, #240]	; (8010284 <tcp_input+0x524>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	885b      	ldrh	r3, [r3, #2]
 8010196:	b29b      	uxth	r3, r3
 8010198:	429a      	cmp	r2, r3
 801019a:	d10c      	bne.n	80101b6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	4b39      	ldr	r3, [pc, #228]	; (8010288 <tcp_input+0x528>)
 80101a2:	695b      	ldr	r3, [r3, #20]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d00f      	beq.n	80101c8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d00d      	beq.n	80101ca <tcp_input+0x46a>
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d009      	beq.n	80101ca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80101ba:	697b      	ldr	r3, [r7, #20]
 80101bc:	68db      	ldr	r3, [r3, #12]
 80101be:	617b      	str	r3, [r7, #20]
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d1d1      	bne.n	801016a <tcp_input+0x40a>
 80101c6:	e000      	b.n	80101ca <tcp_input+0x46a>
            break;
 80101c8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d014      	beq.n	80101fa <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80101d0:	69bb      	ldr	r3, [r7, #24]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d00a      	beq.n	80101ec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	68da      	ldr	r2, [r3, #12]
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80101de:	4b32      	ldr	r3, [pc, #200]	; (80102a8 <tcp_input+0x548>)
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80101e6:	4a30      	ldr	r2, [pc, #192]	; (80102a8 <tcp_input+0x548>)
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80101ec:	6978      	ldr	r0, [r7, #20]
 80101ee:	f000 f9ff 	bl	80105f0 <tcp_listen_input>
      }
      pbuf_free(p);
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f7fd fc7c 	bl	800daf0 <pbuf_free>
      return;
 80101f8:	e199      	b.n	801052e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80101fa:	69fb      	ldr	r3, [r7, #28]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	f000 8160 	beq.w	80104c2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010202:	4b2a      	ldr	r3, [pc, #168]	; (80102ac <tcp_input+0x54c>)
 8010204:	2200      	movs	r2, #0
 8010206:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	891a      	ldrh	r2, [r3, #8]
 801020c:	4b27      	ldr	r3, [pc, #156]	; (80102ac <tcp_input+0x54c>)
 801020e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010210:	4a26      	ldr	r2, [pc, #152]	; (80102ac <tcp_input+0x54c>)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010216:	4b1b      	ldr	r3, [pc, #108]	; (8010284 <tcp_input+0x524>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4a24      	ldr	r2, [pc, #144]	; (80102ac <tcp_input+0x54c>)
 801021c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801021e:	4b24      	ldr	r3, [pc, #144]	; (80102b0 <tcp_input+0x550>)
 8010220:	2200      	movs	r2, #0
 8010222:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010224:	4b23      	ldr	r3, [pc, #140]	; (80102b4 <tcp_input+0x554>)
 8010226:	2200      	movs	r2, #0
 8010228:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801022a:	4b23      	ldr	r3, [pc, #140]	; (80102b8 <tcp_input+0x558>)
 801022c:	2200      	movs	r2, #0
 801022e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010230:	4b22      	ldr	r3, [pc, #136]	; (80102bc <tcp_input+0x55c>)
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	f003 0308 	and.w	r3, r3, #8
 8010238:	2b00      	cmp	r3, #0
 801023a:	d006      	beq.n	801024a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	7b5b      	ldrb	r3, [r3, #13]
 8010240:	f043 0301 	orr.w	r3, r3, #1
 8010244:	b2da      	uxtb	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801024e:	2b00      	cmp	r3, #0
 8010250:	d038      	beq.n	80102c4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010252:	69f8      	ldr	r0, [r7, #28]
 8010254:	f7ff f854 	bl	800f300 <tcp_process_refused_data>
 8010258:	4603      	mov	r3, r0
 801025a:	f113 0f0d 	cmn.w	r3, #13
 801025e:	d007      	beq.n	8010270 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010264:	2b00      	cmp	r3, #0
 8010266:	d02d      	beq.n	80102c4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010268:	4b15      	ldr	r3, [pc, #84]	; (80102c0 <tcp_input+0x560>)
 801026a:	881b      	ldrh	r3, [r3, #0]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d029      	beq.n	80102c4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010274:	2b00      	cmp	r3, #0
 8010276:	f040 8104 	bne.w	8010482 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801027a:	69f8      	ldr	r0, [r7, #28]
 801027c:	f003 fe26 	bl	8013ecc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010280:	e0ff      	b.n	8010482 <tcp_input+0x722>
 8010282:	bf00      	nop
 8010284:	20010268 	.word	0x20010268
 8010288:	200136e0 	.word	0x200136e0
 801028c:	0801c8d0 	.word	0x0801c8d0
 8010290:	0801c9fc 	.word	0x0801c9fc
 8010294:	0801c91c 	.word	0x0801c91c
 8010298:	20016e14 	.word	0x20016e14
 801029c:	0801ca28 	.word	0x0801ca28
 80102a0:	20016e24 	.word	0x20016e24
 80102a4:	0801ca54 	.word	0x0801ca54
 80102a8:	20016e1c 	.word	0x20016e1c
 80102ac:	20010258 	.word	0x20010258
 80102b0:	20010288 	.word	0x20010288
 80102b4:	20010285 	.word	0x20010285
 80102b8:	20010280 	.word	0x20010280
 80102bc:	20010284 	.word	0x20010284
 80102c0:	20010282 	.word	0x20010282
      }
    }
    tcp_input_pcb = pcb;
 80102c4:	4a9b      	ldr	r2, [pc, #620]	; (8010534 <tcp_input+0x7d4>)
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80102ca:	69f8      	ldr	r0, [r7, #28]
 80102cc:	f000 fb0a 	bl	80108e4 <tcp_process>
 80102d0:	4603      	mov	r3, r0
 80102d2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80102d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80102d8:	f113 0f0d 	cmn.w	r3, #13
 80102dc:	f000 80d3 	beq.w	8010486 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80102e0:	4b95      	ldr	r3, [pc, #596]	; (8010538 <tcp_input+0x7d8>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	f003 0308 	and.w	r3, r3, #8
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d015      	beq.n	8010318 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d008      	beq.n	8010308 <tcp_input+0x5a8>
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102fc:	69fa      	ldr	r2, [r7, #28]
 80102fe:	6912      	ldr	r2, [r2, #16]
 8010300:	f06f 010d 	mvn.w	r1, #13
 8010304:	4610      	mov	r0, r2
 8010306:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010308:	69f9      	ldr	r1, [r7, #28]
 801030a:	488c      	ldr	r0, [pc, #560]	; (801053c <tcp_input+0x7dc>)
 801030c:	f7ff fbb0 	bl	800fa70 <tcp_pcb_remove>
        tcp_free(pcb);
 8010310:	69f8      	ldr	r0, [r7, #28]
 8010312:	f7fd fea9 	bl	800e068 <tcp_free>
 8010316:	e0c1      	b.n	801049c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010318:	2300      	movs	r3, #0
 801031a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801031c:	4b88      	ldr	r3, [pc, #544]	; (8010540 <tcp_input+0x7e0>)
 801031e:	881b      	ldrh	r3, [r3, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d01d      	beq.n	8010360 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010324:	4b86      	ldr	r3, [pc, #536]	; (8010540 <tcp_input+0x7e0>)
 8010326:	881b      	ldrh	r3, [r3, #0]
 8010328:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010330:	2b00      	cmp	r3, #0
 8010332:	d00a      	beq.n	801034a <tcp_input+0x5ea>
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801033a:	69fa      	ldr	r2, [r7, #28]
 801033c:	6910      	ldr	r0, [r2, #16]
 801033e:	89fa      	ldrh	r2, [r7, #14]
 8010340:	69f9      	ldr	r1, [r7, #28]
 8010342:	4798      	blx	r3
 8010344:	4603      	mov	r3, r0
 8010346:	74fb      	strb	r3, [r7, #19]
 8010348:	e001      	b.n	801034e <tcp_input+0x5ee>
 801034a:	2300      	movs	r3, #0
 801034c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801034e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010352:	f113 0f0d 	cmn.w	r3, #13
 8010356:	f000 8098 	beq.w	801048a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 801035a:	4b79      	ldr	r3, [pc, #484]	; (8010540 <tcp_input+0x7e0>)
 801035c:	2200      	movs	r2, #0
 801035e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010360:	69f8      	ldr	r0, [r7, #28]
 8010362:	f000 f905 	bl	8010570 <tcp_input_delayed_close>
 8010366:	4603      	mov	r3, r0
 8010368:	2b00      	cmp	r3, #0
 801036a:	f040 8090 	bne.w	801048e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801036e:	4b75      	ldr	r3, [pc, #468]	; (8010544 <tcp_input+0x7e4>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d041      	beq.n	80103fa <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010376:	69fb      	ldr	r3, [r7, #28]
 8010378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801037a:	2b00      	cmp	r3, #0
 801037c:	d006      	beq.n	801038c <tcp_input+0x62c>
 801037e:	4b72      	ldr	r3, [pc, #456]	; (8010548 <tcp_input+0x7e8>)
 8010380:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010384:	4971      	ldr	r1, [pc, #452]	; (801054c <tcp_input+0x7ec>)
 8010386:	4872      	ldr	r0, [pc, #456]	; (8010550 <tcp_input+0x7f0>)
 8010388:	f009 f8f0 	bl	801956c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801038c:	69fb      	ldr	r3, [r7, #28]
 801038e:	8b5b      	ldrh	r3, [r3, #26]
 8010390:	f003 0310 	and.w	r3, r3, #16
 8010394:	2b00      	cmp	r3, #0
 8010396:	d008      	beq.n	80103aa <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010398:	4b6a      	ldr	r3, [pc, #424]	; (8010544 <tcp_input+0x7e4>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	4618      	mov	r0, r3
 801039e:	f7fd fba7 	bl	800daf0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80103a2:	69f8      	ldr	r0, [r7, #28]
 80103a4:	f7fe f99a 	bl	800e6dc <tcp_abort>
            goto aborted;
 80103a8:	e078      	b.n	801049c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d00c      	beq.n	80103ce <tcp_input+0x66e>
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80103ba:	69fb      	ldr	r3, [r7, #28]
 80103bc:	6918      	ldr	r0, [r3, #16]
 80103be:	4b61      	ldr	r3, [pc, #388]	; (8010544 <tcp_input+0x7e4>)
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	2300      	movs	r3, #0
 80103c4:	69f9      	ldr	r1, [r7, #28]
 80103c6:	47a0      	blx	r4
 80103c8:	4603      	mov	r3, r0
 80103ca:	74fb      	strb	r3, [r7, #19]
 80103cc:	e008      	b.n	80103e0 <tcp_input+0x680>
 80103ce:	4b5d      	ldr	r3, [pc, #372]	; (8010544 <tcp_input+0x7e4>)
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	2300      	movs	r3, #0
 80103d4:	69f9      	ldr	r1, [r7, #28]
 80103d6:	2000      	movs	r0, #0
 80103d8:	f7ff f884 	bl	800f4e4 <tcp_recv_null>
 80103dc:	4603      	mov	r3, r0
 80103de:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80103e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103e4:	f113 0f0d 	cmn.w	r3, #13
 80103e8:	d053      	beq.n	8010492 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80103ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d003      	beq.n	80103fa <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80103f2:	4b54      	ldr	r3, [pc, #336]	; (8010544 <tcp_input+0x7e4>)
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80103fa:	4b4f      	ldr	r3, [pc, #316]	; (8010538 <tcp_input+0x7d8>)
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	f003 0320 	and.w	r3, r3, #32
 8010402:	2b00      	cmp	r3, #0
 8010404:	d030      	beq.n	8010468 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801040a:	2b00      	cmp	r3, #0
 801040c:	d009      	beq.n	8010422 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010412:	7b5a      	ldrb	r2, [r3, #13]
 8010414:	69fb      	ldr	r3, [r7, #28]
 8010416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010418:	f042 0220 	orr.w	r2, r2, #32
 801041c:	b2d2      	uxtb	r2, r2
 801041e:	735a      	strb	r2, [r3, #13]
 8010420:	e022      	b.n	8010468 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010422:	69fb      	ldr	r3, [r7, #28]
 8010424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010426:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801042a:	d005      	beq.n	8010438 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010430:	3301      	adds	r3, #1
 8010432:	b29a      	uxth	r2, r3
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801043e:	2b00      	cmp	r3, #0
 8010440:	d00b      	beq.n	801045a <tcp_input+0x6fa>
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	6918      	ldr	r0, [r3, #16]
 801044c:	2300      	movs	r3, #0
 801044e:	2200      	movs	r2, #0
 8010450:	69f9      	ldr	r1, [r7, #28]
 8010452:	47a0      	blx	r4
 8010454:	4603      	mov	r3, r0
 8010456:	74fb      	strb	r3, [r7, #19]
 8010458:	e001      	b.n	801045e <tcp_input+0x6fe>
 801045a:	2300      	movs	r3, #0
 801045c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801045e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010462:	f113 0f0d 	cmn.w	r3, #13
 8010466:	d016      	beq.n	8010496 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010468:	4b32      	ldr	r3, [pc, #200]	; (8010534 <tcp_input+0x7d4>)
 801046a:	2200      	movs	r2, #0
 801046c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801046e:	69f8      	ldr	r0, [r7, #28]
 8010470:	f000 f87e 	bl	8010570 <tcp_input_delayed_close>
 8010474:	4603      	mov	r3, r0
 8010476:	2b00      	cmp	r3, #0
 8010478:	d10f      	bne.n	801049a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801047a:	69f8      	ldr	r0, [r7, #28]
 801047c:	f002 ff10 	bl	80132a0 <tcp_output>
 8010480:	e00c      	b.n	801049c <tcp_input+0x73c>
        goto aborted;
 8010482:	bf00      	nop
 8010484:	e00a      	b.n	801049c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010486:	bf00      	nop
 8010488:	e008      	b.n	801049c <tcp_input+0x73c>
              goto aborted;
 801048a:	bf00      	nop
 801048c:	e006      	b.n	801049c <tcp_input+0x73c>
          goto aborted;
 801048e:	bf00      	nop
 8010490:	e004      	b.n	801049c <tcp_input+0x73c>
            goto aborted;
 8010492:	bf00      	nop
 8010494:	e002      	b.n	801049c <tcp_input+0x73c>
              goto aborted;
 8010496:	bf00      	nop
 8010498:	e000      	b.n	801049c <tcp_input+0x73c>
          goto aborted;
 801049a:	bf00      	nop
    tcp_input_pcb = NULL;
 801049c:	4b25      	ldr	r3, [pc, #148]	; (8010534 <tcp_input+0x7d4>)
 801049e:	2200      	movs	r2, #0
 80104a0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80104a2:	4b28      	ldr	r3, [pc, #160]	; (8010544 <tcp_input+0x7e4>)
 80104a4:	2200      	movs	r2, #0
 80104a6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80104a8:	4b2a      	ldr	r3, [pc, #168]	; (8010554 <tcp_input+0x7f4>)
 80104aa:	685b      	ldr	r3, [r3, #4]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d03d      	beq.n	801052c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 80104b0:	4b28      	ldr	r3, [pc, #160]	; (8010554 <tcp_input+0x7f4>)
 80104b2:	685b      	ldr	r3, [r3, #4]
 80104b4:	4618      	mov	r0, r3
 80104b6:	f7fd fb1b 	bl	800daf0 <pbuf_free>
      inseg.p = NULL;
 80104ba:	4b26      	ldr	r3, [pc, #152]	; (8010554 <tcp_input+0x7f4>)
 80104bc:	2200      	movs	r2, #0
 80104be:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80104c0:	e034      	b.n	801052c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80104c2:	4b25      	ldr	r3, [pc, #148]	; (8010558 <tcp_input+0x7f8>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	899b      	ldrh	r3, [r3, #12]
 80104c8:	b29b      	uxth	r3, r3
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7fb ff26 	bl	800c31c <lwip_htons>
 80104d0:	4603      	mov	r3, r0
 80104d2:	b2db      	uxtb	r3, r3
 80104d4:	f003 0304 	and.w	r3, r3, #4
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d118      	bne.n	801050e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104dc:	4b1f      	ldr	r3, [pc, #124]	; (801055c <tcp_input+0x7fc>)
 80104de:	6819      	ldr	r1, [r3, #0]
 80104e0:	4b1f      	ldr	r3, [pc, #124]	; (8010560 <tcp_input+0x800>)
 80104e2:	881b      	ldrh	r3, [r3, #0]
 80104e4:	461a      	mov	r2, r3
 80104e6:	4b1f      	ldr	r3, [pc, #124]	; (8010564 <tcp_input+0x804>)
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104ec:	4b1a      	ldr	r3, [pc, #104]	; (8010558 <tcp_input+0x7f8>)
 80104ee:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104f0:	885b      	ldrh	r3, [r3, #2]
 80104f2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104f4:	4a18      	ldr	r2, [pc, #96]	; (8010558 <tcp_input+0x7f8>)
 80104f6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104f8:	8812      	ldrh	r2, [r2, #0]
 80104fa:	b292      	uxth	r2, r2
 80104fc:	9202      	str	r2, [sp, #8]
 80104fe:	9301      	str	r3, [sp, #4]
 8010500:	4b19      	ldr	r3, [pc, #100]	; (8010568 <tcp_input+0x808>)
 8010502:	9300      	str	r3, [sp, #0]
 8010504:	4b19      	ldr	r3, [pc, #100]	; (801056c <tcp_input+0x80c>)
 8010506:	4602      	mov	r2, r0
 8010508:	2000      	movs	r0, #0
 801050a:	f003 fc8d 	bl	8013e28 <tcp_rst>
    pbuf_free(p);
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f7fd faee 	bl	800daf0 <pbuf_free>
  return;
 8010514:	e00a      	b.n	801052c <tcp_input+0x7cc>
    goto dropped;
 8010516:	bf00      	nop
 8010518:	e004      	b.n	8010524 <tcp_input+0x7c4>
dropped:
 801051a:	bf00      	nop
 801051c:	e002      	b.n	8010524 <tcp_input+0x7c4>
      goto dropped;
 801051e:	bf00      	nop
 8010520:	e000      	b.n	8010524 <tcp_input+0x7c4>
      goto dropped;
 8010522:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7fd fae3 	bl	800daf0 <pbuf_free>
 801052a:	e000      	b.n	801052e <tcp_input+0x7ce>
  return;
 801052c:	bf00      	nop
}
 801052e:	3724      	adds	r7, #36	; 0x24
 8010530:	46bd      	mov	sp, r7
 8010532:	bd90      	pop	{r4, r7, pc}
 8010534:	20016e28 	.word	0x20016e28
 8010538:	20010285 	.word	0x20010285
 801053c:	20016e14 	.word	0x20016e14
 8010540:	20010280 	.word	0x20010280
 8010544:	20010288 	.word	0x20010288
 8010548:	0801c8d0 	.word	0x0801c8d0
 801054c:	0801ca84 	.word	0x0801ca84
 8010550:	0801c91c 	.word	0x0801c91c
 8010554:	20010258 	.word	0x20010258
 8010558:	20010268 	.word	0x20010268
 801055c:	2001027c 	.word	0x2001027c
 8010560:	20010282 	.word	0x20010282
 8010564:	20010278 	.word	0x20010278
 8010568:	200136f0 	.word	0x200136f0
 801056c:	200136f4 	.word	0x200136f4

08010570 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b082      	sub	sp, #8
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d106      	bne.n	801058c <tcp_input_delayed_close+0x1c>
 801057e:	4b17      	ldr	r3, [pc, #92]	; (80105dc <tcp_input_delayed_close+0x6c>)
 8010580:	f240 225a 	movw	r2, #602	; 0x25a
 8010584:	4916      	ldr	r1, [pc, #88]	; (80105e0 <tcp_input_delayed_close+0x70>)
 8010586:	4817      	ldr	r0, [pc, #92]	; (80105e4 <tcp_input_delayed_close+0x74>)
 8010588:	f008 fff0 	bl	801956c <iprintf>

  if (recv_flags & TF_CLOSED) {
 801058c:	4b16      	ldr	r3, [pc, #88]	; (80105e8 <tcp_input_delayed_close+0x78>)
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	f003 0310 	and.w	r3, r3, #16
 8010594:	2b00      	cmp	r3, #0
 8010596:	d01c      	beq.n	80105d2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	8b5b      	ldrh	r3, [r3, #26]
 801059c:	f003 0310 	and.w	r3, r3, #16
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d10d      	bne.n	80105c0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d008      	beq.n	80105c0 <tcp_input_delayed_close+0x50>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	6912      	ldr	r2, [r2, #16]
 80105b8:	f06f 010e 	mvn.w	r1, #14
 80105bc:	4610      	mov	r0, r2
 80105be:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80105c0:	6879      	ldr	r1, [r7, #4]
 80105c2:	480a      	ldr	r0, [pc, #40]	; (80105ec <tcp_input_delayed_close+0x7c>)
 80105c4:	f7ff fa54 	bl	800fa70 <tcp_pcb_remove>
    tcp_free(pcb);
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f7fd fd4d 	bl	800e068 <tcp_free>
    return 1;
 80105ce:	2301      	movs	r3, #1
 80105d0:	e000      	b.n	80105d4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80105d2:	2300      	movs	r3, #0
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3708      	adds	r7, #8
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	0801c8d0 	.word	0x0801c8d0
 80105e0:	0801caa0 	.word	0x0801caa0
 80105e4:	0801c91c 	.word	0x0801c91c
 80105e8:	20010285 	.word	0x20010285
 80105ec:	20016e14 	.word	0x20016e14

080105f0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80105f0:	b590      	push	{r4, r7, lr}
 80105f2:	b08b      	sub	sp, #44	; 0x2c
 80105f4:	af04      	add	r7, sp, #16
 80105f6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80105f8:	4b6f      	ldr	r3, [pc, #444]	; (80107b8 <tcp_listen_input+0x1c8>)
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	f003 0304 	and.w	r3, r3, #4
 8010600:	2b00      	cmp	r3, #0
 8010602:	f040 80d3 	bne.w	80107ac <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d106      	bne.n	801061a <tcp_listen_input+0x2a>
 801060c:	4b6b      	ldr	r3, [pc, #428]	; (80107bc <tcp_listen_input+0x1cc>)
 801060e:	f240 2281 	movw	r2, #641	; 0x281
 8010612:	496b      	ldr	r1, [pc, #428]	; (80107c0 <tcp_listen_input+0x1d0>)
 8010614:	486b      	ldr	r0, [pc, #428]	; (80107c4 <tcp_listen_input+0x1d4>)
 8010616:	f008 ffa9 	bl	801956c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801061a:	4b67      	ldr	r3, [pc, #412]	; (80107b8 <tcp_listen_input+0x1c8>)
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	f003 0310 	and.w	r3, r3, #16
 8010622:	2b00      	cmp	r3, #0
 8010624:	d019      	beq.n	801065a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010626:	4b68      	ldr	r3, [pc, #416]	; (80107c8 <tcp_listen_input+0x1d8>)
 8010628:	6819      	ldr	r1, [r3, #0]
 801062a:	4b68      	ldr	r3, [pc, #416]	; (80107cc <tcp_listen_input+0x1dc>)
 801062c:	881b      	ldrh	r3, [r3, #0]
 801062e:	461a      	mov	r2, r3
 8010630:	4b67      	ldr	r3, [pc, #412]	; (80107d0 <tcp_listen_input+0x1e0>)
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010636:	4b67      	ldr	r3, [pc, #412]	; (80107d4 <tcp_listen_input+0x1e4>)
 8010638:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801063a:	885b      	ldrh	r3, [r3, #2]
 801063c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801063e:	4a65      	ldr	r2, [pc, #404]	; (80107d4 <tcp_listen_input+0x1e4>)
 8010640:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010642:	8812      	ldrh	r2, [r2, #0]
 8010644:	b292      	uxth	r2, r2
 8010646:	9202      	str	r2, [sp, #8]
 8010648:	9301      	str	r3, [sp, #4]
 801064a:	4b63      	ldr	r3, [pc, #396]	; (80107d8 <tcp_listen_input+0x1e8>)
 801064c:	9300      	str	r3, [sp, #0]
 801064e:	4b63      	ldr	r3, [pc, #396]	; (80107dc <tcp_listen_input+0x1ec>)
 8010650:	4602      	mov	r2, r0
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f003 fbe8 	bl	8013e28 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010658:	e0aa      	b.n	80107b0 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 801065a:	4b57      	ldr	r3, [pc, #348]	; (80107b8 <tcp_listen_input+0x1c8>)
 801065c:	781b      	ldrb	r3, [r3, #0]
 801065e:	f003 0302 	and.w	r3, r3, #2
 8010662:	2b00      	cmp	r3, #0
 8010664:	f000 80a4 	beq.w	80107b0 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	7d5b      	ldrb	r3, [r3, #21]
 801066c:	4618      	mov	r0, r3
 801066e:	f7ff f85d 	bl	800f72c <tcp_alloc>
 8010672:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d111      	bne.n	801069e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	699b      	ldr	r3, [r3, #24]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d00a      	beq.n	8010698 <tcp_listen_input+0xa8>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	699b      	ldr	r3, [r3, #24]
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	6910      	ldr	r0, [r2, #16]
 801068a:	f04f 32ff 	mov.w	r2, #4294967295
 801068e:	2100      	movs	r1, #0
 8010690:	4798      	blx	r3
 8010692:	4603      	mov	r3, r0
 8010694:	73bb      	strb	r3, [r7, #14]
      return;
 8010696:	e08c      	b.n	80107b2 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010698:	23f0      	movs	r3, #240	; 0xf0
 801069a:	73bb      	strb	r3, [r7, #14]
      return;
 801069c:	e089      	b.n	80107b2 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801069e:	4b50      	ldr	r3, [pc, #320]	; (80107e0 <tcp_listen_input+0x1f0>)
 80106a0:	695a      	ldr	r2, [r3, #20]
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80106a6:	4b4e      	ldr	r3, [pc, #312]	; (80107e0 <tcp_listen_input+0x1f0>)
 80106a8:	691a      	ldr	r2, [r3, #16]
 80106aa:	697b      	ldr	r3, [r7, #20]
 80106ac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	8ada      	ldrh	r2, [r3, #22]
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80106b6:	4b47      	ldr	r3, [pc, #284]	; (80107d4 <tcp_listen_input+0x1e4>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	881b      	ldrh	r3, [r3, #0]
 80106bc:	b29a      	uxth	r2, r3
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	2203      	movs	r2, #3
 80106c6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80106c8:	4b41      	ldr	r3, [pc, #260]	; (80107d0 <tcp_listen_input+0x1e0>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	1c5a      	adds	r2, r3, #1
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80106da:	6978      	ldr	r0, [r7, #20]
 80106dc:	f7ff fa5c 	bl	800fb98 <tcp_next_iss>
 80106e0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	693a      	ldr	r2, [r7, #16]
 80106e6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	693a      	ldr	r2, [r7, #16]
 80106ec:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	693a      	ldr	r2, [r7, #16]
 80106f2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	693a      	ldr	r2, [r7, #16]
 80106f8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80106fa:	4b35      	ldr	r3, [pc, #212]	; (80107d0 <tcp_listen_input+0x1e0>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	1e5a      	subs	r2, r3, #1
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	691a      	ldr	r2, [r3, #16]
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	7a5b      	ldrb	r3, [r3, #9]
 8010716:	f003 030c 	and.w	r3, r3, #12
 801071a:	b2da      	uxtb	r2, r3
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	7a1a      	ldrb	r2, [r3, #8]
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010728:	4b2e      	ldr	r3, [pc, #184]	; (80107e4 <tcp_listen_input+0x1f4>)
 801072a:	681a      	ldr	r2, [r3, #0]
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	60da      	str	r2, [r3, #12]
 8010730:	4a2c      	ldr	r2, [pc, #176]	; (80107e4 <tcp_listen_input+0x1f4>)
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	6013      	str	r3, [r2, #0]
 8010736:	f003 fd39 	bl	80141ac <tcp_timer_needed>
 801073a:	4b2b      	ldr	r3, [pc, #172]	; (80107e8 <tcp_listen_input+0x1f8>)
 801073c:	2201      	movs	r2, #1
 801073e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010740:	6978      	ldr	r0, [r7, #20]
 8010742:	f001 fd8f 	bl	8012264 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010746:	4b23      	ldr	r3, [pc, #140]	; (80107d4 <tcp_listen_input+0x1e4>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	89db      	ldrh	r3, [r3, #14]
 801074c:	b29a      	uxth	r2, r3
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	3304      	adds	r3, #4
 8010768:	4618      	mov	r0, r3
 801076a:	f007 faeb 	bl	8017d44 <ip4_route>
 801076e:	4601      	mov	r1, r0
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	3304      	adds	r3, #4
 8010774:	461a      	mov	r2, r3
 8010776:	4620      	mov	r0, r4
 8010778:	f7ff fa34 	bl	800fbe4 <tcp_eff_send_mss_netif>
 801077c:	4603      	mov	r3, r0
 801077e:	461a      	mov	r2, r3
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010784:	2112      	movs	r1, #18
 8010786:	6978      	ldr	r0, [r7, #20]
 8010788:	f002 fc9c 	bl	80130c4 <tcp_enqueue_flags>
 801078c:	4603      	mov	r3, r0
 801078e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d004      	beq.n	80107a2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010798:	2100      	movs	r1, #0
 801079a:	6978      	ldr	r0, [r7, #20]
 801079c:	f7fd fee0 	bl	800e560 <tcp_abandon>
      return;
 80107a0:	e007      	b.n	80107b2 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 80107a2:	6978      	ldr	r0, [r7, #20]
 80107a4:	f002 fd7c 	bl	80132a0 <tcp_output>
  return;
 80107a8:	bf00      	nop
 80107aa:	e001      	b.n	80107b0 <tcp_listen_input+0x1c0>
    return;
 80107ac:	bf00      	nop
 80107ae:	e000      	b.n	80107b2 <tcp_listen_input+0x1c2>
  return;
 80107b0:	bf00      	nop
}
 80107b2:	371c      	adds	r7, #28
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd90      	pop	{r4, r7, pc}
 80107b8:	20010284 	.word	0x20010284
 80107bc:	0801c8d0 	.word	0x0801c8d0
 80107c0:	0801cac8 	.word	0x0801cac8
 80107c4:	0801c91c 	.word	0x0801c91c
 80107c8:	2001027c 	.word	0x2001027c
 80107cc:	20010282 	.word	0x20010282
 80107d0:	20010278 	.word	0x20010278
 80107d4:	20010268 	.word	0x20010268
 80107d8:	200136f0 	.word	0x200136f0
 80107dc:	200136f4 	.word	0x200136f4
 80107e0:	200136e0 	.word	0x200136e0
 80107e4:	20016e14 	.word	0x20016e14
 80107e8:	20016e10 	.word	0x20016e10

080107ec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b086      	sub	sp, #24
 80107f0:	af04      	add	r7, sp, #16
 80107f2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80107f4:	4b30      	ldr	r3, [pc, #192]	; (80108b8 <tcp_timewait_input+0xcc>)
 80107f6:	781b      	ldrb	r3, [r3, #0]
 80107f8:	f003 0304 	and.w	r3, r3, #4
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d154      	bne.n	80108aa <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d106      	bne.n	8010814 <tcp_timewait_input+0x28>
 8010806:	4b2d      	ldr	r3, [pc, #180]	; (80108bc <tcp_timewait_input+0xd0>)
 8010808:	f240 22ee 	movw	r2, #750	; 0x2ee
 801080c:	492c      	ldr	r1, [pc, #176]	; (80108c0 <tcp_timewait_input+0xd4>)
 801080e:	482d      	ldr	r0, [pc, #180]	; (80108c4 <tcp_timewait_input+0xd8>)
 8010810:	f008 feac 	bl	801956c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010814:	4b28      	ldr	r3, [pc, #160]	; (80108b8 <tcp_timewait_input+0xcc>)
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	f003 0302 	and.w	r3, r3, #2
 801081c:	2b00      	cmp	r3, #0
 801081e:	d02a      	beq.n	8010876 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010820:	4b29      	ldr	r3, [pc, #164]	; (80108c8 <tcp_timewait_input+0xdc>)
 8010822:	681a      	ldr	r2, [r3, #0]
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010828:	1ad3      	subs	r3, r2, r3
 801082a:	2b00      	cmp	r3, #0
 801082c:	db2d      	blt.n	801088a <tcp_timewait_input+0x9e>
 801082e:	4b26      	ldr	r3, [pc, #152]	; (80108c8 <tcp_timewait_input+0xdc>)
 8010830:	681a      	ldr	r2, [r3, #0]
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010836:	6879      	ldr	r1, [r7, #4]
 8010838:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801083a:	440b      	add	r3, r1
 801083c:	1ad3      	subs	r3, r2, r3
 801083e:	2b00      	cmp	r3, #0
 8010840:	dc23      	bgt.n	801088a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010842:	4b22      	ldr	r3, [pc, #136]	; (80108cc <tcp_timewait_input+0xe0>)
 8010844:	6819      	ldr	r1, [r3, #0]
 8010846:	4b22      	ldr	r3, [pc, #136]	; (80108d0 <tcp_timewait_input+0xe4>)
 8010848:	881b      	ldrh	r3, [r3, #0]
 801084a:	461a      	mov	r2, r3
 801084c:	4b1e      	ldr	r3, [pc, #120]	; (80108c8 <tcp_timewait_input+0xdc>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010852:	4b20      	ldr	r3, [pc, #128]	; (80108d4 <tcp_timewait_input+0xe8>)
 8010854:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010856:	885b      	ldrh	r3, [r3, #2]
 8010858:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801085a:	4a1e      	ldr	r2, [pc, #120]	; (80108d4 <tcp_timewait_input+0xe8>)
 801085c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801085e:	8812      	ldrh	r2, [r2, #0]
 8010860:	b292      	uxth	r2, r2
 8010862:	9202      	str	r2, [sp, #8]
 8010864:	9301      	str	r3, [sp, #4]
 8010866:	4b1c      	ldr	r3, [pc, #112]	; (80108d8 <tcp_timewait_input+0xec>)
 8010868:	9300      	str	r3, [sp, #0]
 801086a:	4b1c      	ldr	r3, [pc, #112]	; (80108dc <tcp_timewait_input+0xf0>)
 801086c:	4602      	mov	r2, r0
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f003 fada 	bl	8013e28 <tcp_rst>
      return;
 8010874:	e01c      	b.n	80108b0 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8010876:	4b10      	ldr	r3, [pc, #64]	; (80108b8 <tcp_timewait_input+0xcc>)
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	f003 0301 	and.w	r3, r3, #1
 801087e:	2b00      	cmp	r3, #0
 8010880:	d003      	beq.n	801088a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010882:	4b17      	ldr	r3, [pc, #92]	; (80108e0 <tcp_timewait_input+0xf4>)
 8010884:	681a      	ldr	r2, [r3, #0]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801088a:	4b11      	ldr	r3, [pc, #68]	; (80108d0 <tcp_timewait_input+0xe4>)
 801088c:	881b      	ldrh	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d00d      	beq.n	80108ae <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	8b5b      	ldrh	r3, [r3, #26]
 8010896:	f043 0302 	orr.w	r3, r3, #2
 801089a:	b29a      	uxth	r2, r3
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f002 fcfd 	bl	80132a0 <tcp_output>
  }
  return;
 80108a6:	bf00      	nop
 80108a8:	e001      	b.n	80108ae <tcp_timewait_input+0xc2>
    return;
 80108aa:	bf00      	nop
 80108ac:	e000      	b.n	80108b0 <tcp_timewait_input+0xc4>
  return;
 80108ae:	bf00      	nop
}
 80108b0:	3708      	adds	r7, #8
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
 80108b6:	bf00      	nop
 80108b8:	20010284 	.word	0x20010284
 80108bc:	0801c8d0 	.word	0x0801c8d0
 80108c0:	0801cae8 	.word	0x0801cae8
 80108c4:	0801c91c 	.word	0x0801c91c
 80108c8:	20010278 	.word	0x20010278
 80108cc:	2001027c 	.word	0x2001027c
 80108d0:	20010282 	.word	0x20010282
 80108d4:	20010268 	.word	0x20010268
 80108d8:	200136f0 	.word	0x200136f0
 80108dc:	200136f4 	.word	0x200136f4
 80108e0:	20016e18 	.word	0x20016e18

080108e4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80108e4:	b590      	push	{r4, r7, lr}
 80108e6:	b08d      	sub	sp, #52	; 0x34
 80108e8:	af04      	add	r7, sp, #16
 80108ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80108ec:	2300      	movs	r3, #0
 80108ee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80108f0:	2300      	movs	r3, #0
 80108f2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d106      	bne.n	8010908 <tcp_process+0x24>
 80108fa:	4ba5      	ldr	r3, [pc, #660]	; (8010b90 <tcp_process+0x2ac>)
 80108fc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010900:	49a4      	ldr	r1, [pc, #656]	; (8010b94 <tcp_process+0x2b0>)
 8010902:	48a5      	ldr	r0, [pc, #660]	; (8010b98 <tcp_process+0x2b4>)
 8010904:	f008 fe32 	bl	801956c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010908:	4ba4      	ldr	r3, [pc, #656]	; (8010b9c <tcp_process+0x2b8>)
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	f003 0304 	and.w	r3, r3, #4
 8010910:	2b00      	cmp	r3, #0
 8010912:	d04e      	beq.n	80109b2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	7d1b      	ldrb	r3, [r3, #20]
 8010918:	2b02      	cmp	r3, #2
 801091a:	d108      	bne.n	801092e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010920:	4b9f      	ldr	r3, [pc, #636]	; (8010ba0 <tcp_process+0x2bc>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	429a      	cmp	r2, r3
 8010926:	d123      	bne.n	8010970 <tcp_process+0x8c>
        acceptable = 1;
 8010928:	2301      	movs	r3, #1
 801092a:	76fb      	strb	r3, [r7, #27]
 801092c:	e020      	b.n	8010970 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010932:	4b9c      	ldr	r3, [pc, #624]	; (8010ba4 <tcp_process+0x2c0>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	429a      	cmp	r2, r3
 8010938:	d102      	bne.n	8010940 <tcp_process+0x5c>
        acceptable = 1;
 801093a:	2301      	movs	r3, #1
 801093c:	76fb      	strb	r3, [r7, #27]
 801093e:	e017      	b.n	8010970 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010940:	4b98      	ldr	r3, [pc, #608]	; (8010ba4 <tcp_process+0x2c0>)
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010948:	1ad3      	subs	r3, r2, r3
 801094a:	2b00      	cmp	r3, #0
 801094c:	db10      	blt.n	8010970 <tcp_process+0x8c>
 801094e:	4b95      	ldr	r3, [pc, #596]	; (8010ba4 <tcp_process+0x2c0>)
 8010950:	681a      	ldr	r2, [r3, #0]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010956:	6879      	ldr	r1, [r7, #4]
 8010958:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801095a:	440b      	add	r3, r1
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	2b00      	cmp	r3, #0
 8010960:	dc06      	bgt.n	8010970 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	8b5b      	ldrh	r3, [r3, #26]
 8010966:	f043 0302 	orr.w	r3, r3, #2
 801096a:	b29a      	uxth	r2, r3
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010970:	7efb      	ldrb	r3, [r7, #27]
 8010972:	2b00      	cmp	r3, #0
 8010974:	d01b      	beq.n	80109ae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	7d1b      	ldrb	r3, [r3, #20]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d106      	bne.n	801098c <tcp_process+0xa8>
 801097e:	4b84      	ldr	r3, [pc, #528]	; (8010b90 <tcp_process+0x2ac>)
 8010980:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010984:	4988      	ldr	r1, [pc, #544]	; (8010ba8 <tcp_process+0x2c4>)
 8010986:	4884      	ldr	r0, [pc, #528]	; (8010b98 <tcp_process+0x2b4>)
 8010988:	f008 fdf0 	bl	801956c <iprintf>
      recv_flags |= TF_RESET;
 801098c:	4b87      	ldr	r3, [pc, #540]	; (8010bac <tcp_process+0x2c8>)
 801098e:	781b      	ldrb	r3, [r3, #0]
 8010990:	f043 0308 	orr.w	r3, r3, #8
 8010994:	b2da      	uxtb	r2, r3
 8010996:	4b85      	ldr	r3, [pc, #532]	; (8010bac <tcp_process+0x2c8>)
 8010998:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	8b5b      	ldrh	r3, [r3, #26]
 801099e:	f023 0301 	bic.w	r3, r3, #1
 80109a2:	b29a      	uxth	r2, r3
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80109a8:	f06f 030d 	mvn.w	r3, #13
 80109ac:	e37a      	b.n	80110a4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80109ae:	2300      	movs	r3, #0
 80109b0:	e378      	b.n	80110a4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80109b2:	4b7a      	ldr	r3, [pc, #488]	; (8010b9c <tcp_process+0x2b8>)
 80109b4:	781b      	ldrb	r3, [r3, #0]
 80109b6:	f003 0302 	and.w	r3, r3, #2
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d010      	beq.n	80109e0 <tcp_process+0xfc>
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	7d1b      	ldrb	r3, [r3, #20]
 80109c2:	2b02      	cmp	r3, #2
 80109c4:	d00c      	beq.n	80109e0 <tcp_process+0xfc>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	7d1b      	ldrb	r3, [r3, #20]
 80109ca:	2b03      	cmp	r3, #3
 80109cc:	d008      	beq.n	80109e0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	8b5b      	ldrh	r3, [r3, #26]
 80109d2:	f043 0302 	orr.w	r3, r3, #2
 80109d6:	b29a      	uxth	r2, r3
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80109dc:	2300      	movs	r3, #0
 80109de:	e361      	b.n	80110a4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	8b5b      	ldrh	r3, [r3, #26]
 80109e4:	f003 0310 	and.w	r3, r3, #16
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d103      	bne.n	80109f4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80109ec:	4b70      	ldr	r3, [pc, #448]	; (8010bb0 <tcp_process+0x2cc>)
 80109ee:	681a      	ldr	r2, [r3, #0]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2200      	movs	r2, #0
 80109f8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2200      	movs	r2, #0
 8010a00:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f001 fc2d 	bl	8012264 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	7d1b      	ldrb	r3, [r3, #20]
 8010a0e:	3b02      	subs	r3, #2
 8010a10:	2b07      	cmp	r3, #7
 8010a12:	f200 8337 	bhi.w	8011084 <tcp_process+0x7a0>
 8010a16:	a201      	add	r2, pc, #4	; (adr r2, 8010a1c <tcp_process+0x138>)
 8010a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a1c:	08010a3d 	.word	0x08010a3d
 8010a20:	08010c6d 	.word	0x08010c6d
 8010a24:	08010de5 	.word	0x08010de5
 8010a28:	08010e0f 	.word	0x08010e0f
 8010a2c:	08010f33 	.word	0x08010f33
 8010a30:	08010de5 	.word	0x08010de5
 8010a34:	08010fbf 	.word	0x08010fbf
 8010a38:	0801104f 	.word	0x0801104f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010a3c:	4b57      	ldr	r3, [pc, #348]	; (8010b9c <tcp_process+0x2b8>)
 8010a3e:	781b      	ldrb	r3, [r3, #0]
 8010a40:	f003 0310 	and.w	r3, r3, #16
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	f000 80e4 	beq.w	8010c12 <tcp_process+0x32e>
 8010a4a:	4b54      	ldr	r3, [pc, #336]	; (8010b9c <tcp_process+0x2b8>)
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	f003 0302 	and.w	r3, r3, #2
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	f000 80dd 	beq.w	8010c12 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a5c:	1c5a      	adds	r2, r3, #1
 8010a5e:	4b50      	ldr	r3, [pc, #320]	; (8010ba0 <tcp_process+0x2bc>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	f040 80d5 	bne.w	8010c12 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010a68:	4b4e      	ldr	r3, [pc, #312]	; (8010ba4 <tcp_process+0x2c0>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	1c5a      	adds	r2, r3, #1
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010a7a:	4b49      	ldr	r3, [pc, #292]	; (8010ba0 <tcp_process+0x2bc>)
 8010a7c:	681a      	ldr	r2, [r3, #0]
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010a82:	4b4c      	ldr	r3, [pc, #304]	; (8010bb4 <tcp_process+0x2d0>)
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	89db      	ldrh	r3, [r3, #14]
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010a9c:	4b41      	ldr	r3, [pc, #260]	; (8010ba4 <tcp_process+0x2c0>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	1e5a      	subs	r2, r3, #1
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2204      	movs	r2, #4
 8010aaa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	3304      	adds	r3, #4
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f007 f945 	bl	8017d44 <ip4_route>
 8010aba:	4601      	mov	r1, r0
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	3304      	adds	r3, #4
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	f7ff f88e 	bl	800fbe4 <tcp_eff_send_mss_netif>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	461a      	mov	r2, r3
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ad4:	009a      	lsls	r2, r3, #2
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ada:	005b      	lsls	r3, r3, #1
 8010adc:	f241 111c 	movw	r1, #4380	; 0x111c
 8010ae0:	428b      	cmp	r3, r1
 8010ae2:	bf38      	it	cc
 8010ae4:	460b      	movcc	r3, r1
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d204      	bcs.n	8010af4 <tcp_process+0x210>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	e00d      	b.n	8010b10 <tcp_process+0x22c>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010af8:	005b      	lsls	r3, r3, #1
 8010afa:	f241 121c 	movw	r2, #4380	; 0x111c
 8010afe:	4293      	cmp	r3, r2
 8010b00:	d904      	bls.n	8010b0c <tcp_process+0x228>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b06:	005b      	lsls	r3, r3, #1
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	e001      	b.n	8010b10 <tcp_process+0x22c>
 8010b0c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d106      	bne.n	8010b2e <tcp_process+0x24a>
 8010b20:	4b1b      	ldr	r3, [pc, #108]	; (8010b90 <tcp_process+0x2ac>)
 8010b22:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010b26:	4924      	ldr	r1, [pc, #144]	; (8010bb8 <tcp_process+0x2d4>)
 8010b28:	481b      	ldr	r0, [pc, #108]	; (8010b98 <tcp_process+0x2b4>)
 8010b2a:	f008 fd1f 	bl	801956c <iprintf>
        --pcb->snd_queuelen;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b34:	3b01      	subs	r3, #1
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b42:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010b44:	69fb      	ldr	r3, [r7, #28]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d111      	bne.n	8010b6e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b4e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d106      	bne.n	8010b64 <tcp_process+0x280>
 8010b56:	4b0e      	ldr	r3, [pc, #56]	; (8010b90 <tcp_process+0x2ac>)
 8010b58:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010b5c:	4917      	ldr	r1, [pc, #92]	; (8010bbc <tcp_process+0x2d8>)
 8010b5e:	480e      	ldr	r0, [pc, #56]	; (8010b98 <tcp_process+0x2b4>)
 8010b60:	f008 fd04 	bl	801956c <iprintf>
          pcb->unsent = rseg->next;
 8010b64:	69fb      	ldr	r3, [r7, #28]
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	66da      	str	r2, [r3, #108]	; 0x6c
 8010b6c:	e003      	b.n	8010b76 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010b6e:	69fb      	ldr	r3, [r7, #28]
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010b76:	69f8      	ldr	r0, [r7, #28]
 8010b78:	f7fe fc52 	bl	800f420 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d11d      	bne.n	8010bc0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b8a:	861a      	strh	r2, [r3, #48]	; 0x30
 8010b8c:	e01f      	b.n	8010bce <tcp_process+0x2ea>
 8010b8e:	bf00      	nop
 8010b90:	0801c8d0 	.word	0x0801c8d0
 8010b94:	0801cb08 	.word	0x0801cb08
 8010b98:	0801c91c 	.word	0x0801c91c
 8010b9c:	20010284 	.word	0x20010284
 8010ba0:	2001027c 	.word	0x2001027c
 8010ba4:	20010278 	.word	0x20010278
 8010ba8:	0801cb24 	.word	0x0801cb24
 8010bac:	20010285 	.word	0x20010285
 8010bb0:	20016e18 	.word	0x20016e18
 8010bb4:	20010268 	.word	0x20010268
 8010bb8:	0801cb44 	.word	0x0801cb44
 8010bbc:	0801cb5c 	.word	0x0801cb5c
        } else {
          pcb->rtime = 0;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d00a      	beq.n	8010bee <tcp_process+0x30a>
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	6910      	ldr	r0, [r2, #16]
 8010be2:	2200      	movs	r2, #0
 8010be4:	6879      	ldr	r1, [r7, #4]
 8010be6:	4798      	blx	r3
 8010be8:	4603      	mov	r3, r0
 8010bea:	76bb      	strb	r3, [r7, #26]
 8010bec:	e001      	b.n	8010bf2 <tcp_process+0x30e>
 8010bee:	2300      	movs	r3, #0
 8010bf0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010bf2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010bf6:	f113 0f0d 	cmn.w	r3, #13
 8010bfa:	d102      	bne.n	8010c02 <tcp_process+0x31e>
          return ERR_ABRT;
 8010bfc:	f06f 030c 	mvn.w	r3, #12
 8010c00:	e250      	b.n	80110a4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	8b5b      	ldrh	r3, [r3, #26]
 8010c06:	f043 0302 	orr.w	r3, r3, #2
 8010c0a:	b29a      	uxth	r2, r3
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010c10:	e23a      	b.n	8011088 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010c12:	4b9d      	ldr	r3, [pc, #628]	; (8010e88 <tcp_process+0x5a4>)
 8010c14:	781b      	ldrb	r3, [r3, #0]
 8010c16:	f003 0310 	and.w	r3, r3, #16
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	f000 8234 	beq.w	8011088 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c20:	4b9a      	ldr	r3, [pc, #616]	; (8010e8c <tcp_process+0x5a8>)
 8010c22:	6819      	ldr	r1, [r3, #0]
 8010c24:	4b9a      	ldr	r3, [pc, #616]	; (8010e90 <tcp_process+0x5ac>)
 8010c26:	881b      	ldrh	r3, [r3, #0]
 8010c28:	461a      	mov	r2, r3
 8010c2a:	4b9a      	ldr	r3, [pc, #616]	; (8010e94 <tcp_process+0x5b0>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c30:	4b99      	ldr	r3, [pc, #612]	; (8010e98 <tcp_process+0x5b4>)
 8010c32:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c34:	885b      	ldrh	r3, [r3, #2]
 8010c36:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c38:	4a97      	ldr	r2, [pc, #604]	; (8010e98 <tcp_process+0x5b4>)
 8010c3a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c3c:	8812      	ldrh	r2, [r2, #0]
 8010c3e:	b292      	uxth	r2, r2
 8010c40:	9202      	str	r2, [sp, #8]
 8010c42:	9301      	str	r3, [sp, #4]
 8010c44:	4b95      	ldr	r3, [pc, #596]	; (8010e9c <tcp_process+0x5b8>)
 8010c46:	9300      	str	r3, [sp, #0]
 8010c48:	4b95      	ldr	r3, [pc, #596]	; (8010ea0 <tcp_process+0x5bc>)
 8010c4a:	4602      	mov	r2, r0
 8010c4c:	6878      	ldr	r0, [r7, #4]
 8010c4e:	f003 f8eb 	bl	8013e28 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c58:	2b05      	cmp	r3, #5
 8010c5a:	f200 8215 	bhi.w	8011088 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2200      	movs	r2, #0
 8010c62:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f002 feab 	bl	80139c0 <tcp_rexmit_rto>
      break;
 8010c6a:	e20d      	b.n	8011088 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010c6c:	4b86      	ldr	r3, [pc, #536]	; (8010e88 <tcp_process+0x5a4>)
 8010c6e:	781b      	ldrb	r3, [r3, #0]
 8010c70:	f003 0310 	and.w	r3, r3, #16
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	f000 80a1 	beq.w	8010dbc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c7a:	4b84      	ldr	r3, [pc, #528]	; (8010e8c <tcp_process+0x5a8>)
 8010c7c:	681a      	ldr	r2, [r3, #0]
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c82:	1ad3      	subs	r3, r2, r3
 8010c84:	3b01      	subs	r3, #1
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	db7e      	blt.n	8010d88 <tcp_process+0x4a4>
 8010c8a:	4b80      	ldr	r3, [pc, #512]	; (8010e8c <tcp_process+0x5a8>)
 8010c8c:	681a      	ldr	r2, [r3, #0]
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c92:	1ad3      	subs	r3, r2, r3
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	dc77      	bgt.n	8010d88 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2204      	movs	r2, #4
 8010c9c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d102      	bne.n	8010cac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010ca6:	23fa      	movs	r3, #250	; 0xfa
 8010ca8:	76bb      	strb	r3, [r7, #26]
 8010caa:	e01d      	b.n	8010ce8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cb0:	699b      	ldr	r3, [r3, #24]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d106      	bne.n	8010cc4 <tcp_process+0x3e0>
 8010cb6:	4b7b      	ldr	r3, [pc, #492]	; (8010ea4 <tcp_process+0x5c0>)
 8010cb8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010cbc:	497a      	ldr	r1, [pc, #488]	; (8010ea8 <tcp_process+0x5c4>)
 8010cbe:	487b      	ldr	r0, [pc, #492]	; (8010eac <tcp_process+0x5c8>)
 8010cc0:	f008 fc54 	bl	801956c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cc8:	699b      	ldr	r3, [r3, #24]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d00a      	beq.n	8010ce4 <tcp_process+0x400>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cd2:	699b      	ldr	r3, [r3, #24]
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	6910      	ldr	r0, [r2, #16]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	6879      	ldr	r1, [r7, #4]
 8010cdc:	4798      	blx	r3
 8010cde:	4603      	mov	r3, r0
 8010ce0:	76bb      	strb	r3, [r7, #26]
 8010ce2:	e001      	b.n	8010ce8 <tcp_process+0x404>
 8010ce4:	23f0      	movs	r3, #240	; 0xf0
 8010ce6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010ce8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d00a      	beq.n	8010d06 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010cf0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010cf4:	f113 0f0d 	cmn.w	r3, #13
 8010cf8:	d002      	beq.n	8010d00 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010cfa:	6878      	ldr	r0, [r7, #4]
 8010cfc:	f7fd fcee 	bl	800e6dc <tcp_abort>
            }
            return ERR_ABRT;
 8010d00:	f06f 030c 	mvn.w	r3, #12
 8010d04:	e1ce      	b.n	80110a4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f000 fae0 	bl	80112cc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010d0c:	4b68      	ldr	r3, [pc, #416]	; (8010eb0 <tcp_process+0x5cc>)
 8010d0e:	881b      	ldrh	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d005      	beq.n	8010d20 <tcp_process+0x43c>
            recv_acked--;
 8010d14:	4b66      	ldr	r3, [pc, #408]	; (8010eb0 <tcp_process+0x5cc>)
 8010d16:	881b      	ldrh	r3, [r3, #0]
 8010d18:	3b01      	subs	r3, #1
 8010d1a:	b29a      	uxth	r2, r3
 8010d1c:	4b64      	ldr	r3, [pc, #400]	; (8010eb0 <tcp_process+0x5cc>)
 8010d1e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d24:	009a      	lsls	r2, r3, #2
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d2a:	005b      	lsls	r3, r3, #1
 8010d2c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010d30:	428b      	cmp	r3, r1
 8010d32:	bf38      	it	cc
 8010d34:	460b      	movcc	r3, r1
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d204      	bcs.n	8010d44 <tcp_process+0x460>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	e00d      	b.n	8010d60 <tcp_process+0x47c>
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d48:	005b      	lsls	r3, r3, #1
 8010d4a:	f241 121c 	movw	r2, #4380	; 0x111c
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d904      	bls.n	8010d5c <tcp_process+0x478>
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d56:	005b      	lsls	r3, r3, #1
 8010d58:	b29b      	uxth	r3, r3
 8010d5a:	e001      	b.n	8010d60 <tcp_process+0x47c>
 8010d5c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010d60:	687a      	ldr	r2, [r7, #4]
 8010d62:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010d66:	4b53      	ldr	r3, [pc, #332]	; (8010eb4 <tcp_process+0x5d0>)
 8010d68:	781b      	ldrb	r3, [r3, #0]
 8010d6a:	f003 0320 	and.w	r3, r3, #32
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d037      	beq.n	8010de2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	8b5b      	ldrh	r3, [r3, #26]
 8010d76:	f043 0302 	orr.w	r3, r3, #2
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	2207      	movs	r2, #7
 8010d84:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010d86:	e02c      	b.n	8010de2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d88:	4b40      	ldr	r3, [pc, #256]	; (8010e8c <tcp_process+0x5a8>)
 8010d8a:	6819      	ldr	r1, [r3, #0]
 8010d8c:	4b40      	ldr	r3, [pc, #256]	; (8010e90 <tcp_process+0x5ac>)
 8010d8e:	881b      	ldrh	r3, [r3, #0]
 8010d90:	461a      	mov	r2, r3
 8010d92:	4b40      	ldr	r3, [pc, #256]	; (8010e94 <tcp_process+0x5b0>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d98:	4b3f      	ldr	r3, [pc, #252]	; (8010e98 <tcp_process+0x5b4>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d9c:	885b      	ldrh	r3, [r3, #2]
 8010d9e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010da0:	4a3d      	ldr	r2, [pc, #244]	; (8010e98 <tcp_process+0x5b4>)
 8010da2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010da4:	8812      	ldrh	r2, [r2, #0]
 8010da6:	b292      	uxth	r2, r2
 8010da8:	9202      	str	r2, [sp, #8]
 8010daa:	9301      	str	r3, [sp, #4]
 8010dac:	4b3b      	ldr	r3, [pc, #236]	; (8010e9c <tcp_process+0x5b8>)
 8010dae:	9300      	str	r3, [sp, #0]
 8010db0:	4b3b      	ldr	r3, [pc, #236]	; (8010ea0 <tcp_process+0x5bc>)
 8010db2:	4602      	mov	r2, r0
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f003 f837 	bl	8013e28 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010dba:	e167      	b.n	801108c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010dbc:	4b32      	ldr	r3, [pc, #200]	; (8010e88 <tcp_process+0x5a4>)
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	f003 0302 	and.w	r3, r3, #2
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	f000 8161 	beq.w	801108c <tcp_process+0x7a8>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dce:	1e5a      	subs	r2, r3, #1
 8010dd0:	4b30      	ldr	r3, [pc, #192]	; (8010e94 <tcp_process+0x5b0>)
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	429a      	cmp	r2, r3
 8010dd6:	f040 8159 	bne.w	801108c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f002 fe12 	bl	8013a04 <tcp_rexmit>
      break;
 8010de0:	e154      	b.n	801108c <tcp_process+0x7a8>
 8010de2:	e153      	b.n	801108c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f000 fa71 	bl	80112cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010dea:	4b32      	ldr	r3, [pc, #200]	; (8010eb4 <tcp_process+0x5d0>)
 8010dec:	781b      	ldrb	r3, [r3, #0]
 8010dee:	f003 0320 	and.w	r3, r3, #32
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f000 814c 	beq.w	8011090 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	8b5b      	ldrh	r3, [r3, #26]
 8010dfc:	f043 0302 	orr.w	r3, r3, #2
 8010e00:	b29a      	uxth	r2, r3
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2207      	movs	r2, #7
 8010e0a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010e0c:	e140      	b.n	8011090 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 fa5c 	bl	80112cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010e14:	4b27      	ldr	r3, [pc, #156]	; (8010eb4 <tcp_process+0x5d0>)
 8010e16:	781b      	ldrb	r3, [r3, #0]
 8010e18:	f003 0320 	and.w	r3, r3, #32
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d071      	beq.n	8010f04 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e20:	4b19      	ldr	r3, [pc, #100]	; (8010e88 <tcp_process+0x5a4>)
 8010e22:	781b      	ldrb	r3, [r3, #0]
 8010e24:	f003 0310 	and.w	r3, r3, #16
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d060      	beq.n	8010eee <tcp_process+0x60a>
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e30:	4b16      	ldr	r3, [pc, #88]	; (8010e8c <tcp_process+0x5a8>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d15a      	bne.n	8010eee <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d156      	bne.n	8010eee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	8b5b      	ldrh	r3, [r3, #26]
 8010e44:	f043 0302 	orr.w	r3, r3, #2
 8010e48:	b29a      	uxth	r2, r3
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f7fe fdbe 	bl	800f9d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010e54:	4b18      	ldr	r3, [pc, #96]	; (8010eb8 <tcp_process+0x5d4>)
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	687a      	ldr	r2, [r7, #4]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d105      	bne.n	8010e6a <tcp_process+0x586>
 8010e5e:	4b16      	ldr	r3, [pc, #88]	; (8010eb8 <tcp_process+0x5d4>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	68db      	ldr	r3, [r3, #12]
 8010e64:	4a14      	ldr	r2, [pc, #80]	; (8010eb8 <tcp_process+0x5d4>)
 8010e66:	6013      	str	r3, [r2, #0]
 8010e68:	e02e      	b.n	8010ec8 <tcp_process+0x5e4>
 8010e6a:	4b13      	ldr	r3, [pc, #76]	; (8010eb8 <tcp_process+0x5d4>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	617b      	str	r3, [r7, #20]
 8010e70:	e027      	b.n	8010ec2 <tcp_process+0x5de>
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	687a      	ldr	r2, [r7, #4]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d11f      	bne.n	8010ebc <tcp_process+0x5d8>
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	68da      	ldr	r2, [r3, #12]
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	60da      	str	r2, [r3, #12]
 8010e84:	e020      	b.n	8010ec8 <tcp_process+0x5e4>
 8010e86:	bf00      	nop
 8010e88:	20010284 	.word	0x20010284
 8010e8c:	2001027c 	.word	0x2001027c
 8010e90:	20010282 	.word	0x20010282
 8010e94:	20010278 	.word	0x20010278
 8010e98:	20010268 	.word	0x20010268
 8010e9c:	200136f0 	.word	0x200136f0
 8010ea0:	200136f4 	.word	0x200136f4
 8010ea4:	0801c8d0 	.word	0x0801c8d0
 8010ea8:	0801cb70 	.word	0x0801cb70
 8010eac:	0801c91c 	.word	0x0801c91c
 8010eb0:	20010280 	.word	0x20010280
 8010eb4:	20010285 	.word	0x20010285
 8010eb8:	20016e14 	.word	0x20016e14
 8010ebc:	697b      	ldr	r3, [r7, #20]
 8010ebe:	68db      	ldr	r3, [r3, #12]
 8010ec0:	617b      	str	r3, [r7, #20]
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d1d4      	bne.n	8010e72 <tcp_process+0x58e>
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	60da      	str	r2, [r3, #12]
 8010ece:	4b77      	ldr	r3, [pc, #476]	; (80110ac <tcp_process+0x7c8>)
 8010ed0:	2201      	movs	r2, #1
 8010ed2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	220a      	movs	r2, #10
 8010ed8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010eda:	4b75      	ldr	r3, [pc, #468]	; (80110b0 <tcp_process+0x7cc>)
 8010edc:	681a      	ldr	r2, [r3, #0]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	60da      	str	r2, [r3, #12]
 8010ee2:	4a73      	ldr	r2, [pc, #460]	; (80110b0 <tcp_process+0x7cc>)
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6013      	str	r3, [r2, #0]
 8010ee8:	f003 f960 	bl	80141ac <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010eec:	e0d2      	b.n	8011094 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	8b5b      	ldrh	r3, [r3, #26]
 8010ef2:	f043 0302 	orr.w	r3, r3, #2
 8010ef6:	b29a      	uxth	r2, r3
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2208      	movs	r2, #8
 8010f00:	751a      	strb	r2, [r3, #20]
      break;
 8010f02:	e0c7      	b.n	8011094 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010f04:	4b6b      	ldr	r3, [pc, #428]	; (80110b4 <tcp_process+0x7d0>)
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	f003 0310 	and.w	r3, r3, #16
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	f000 80c1 	beq.w	8011094 <tcp_process+0x7b0>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f16:	4b68      	ldr	r3, [pc, #416]	; (80110b8 <tcp_process+0x7d4>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	f040 80ba 	bne.w	8011094 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	f040 80b5 	bne.w	8011094 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2206      	movs	r2, #6
 8010f2e:	751a      	strb	r2, [r3, #20]
      break;
 8010f30:	e0b0      	b.n	8011094 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f000 f9ca 	bl	80112cc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010f38:	4b60      	ldr	r3, [pc, #384]	; (80110bc <tcp_process+0x7d8>)
 8010f3a:	781b      	ldrb	r3, [r3, #0]
 8010f3c:	f003 0320 	and.w	r3, r3, #32
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	f000 80a9 	beq.w	8011098 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	8b5b      	ldrh	r3, [r3, #26]
 8010f4a:	f043 0302 	orr.w	r3, r3, #2
 8010f4e:	b29a      	uxth	r2, r3
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f7fe fd3b 	bl	800f9d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010f5a:	4b59      	ldr	r3, [pc, #356]	; (80110c0 <tcp_process+0x7dc>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	687a      	ldr	r2, [r7, #4]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d105      	bne.n	8010f70 <tcp_process+0x68c>
 8010f64:	4b56      	ldr	r3, [pc, #344]	; (80110c0 <tcp_process+0x7dc>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	68db      	ldr	r3, [r3, #12]
 8010f6a:	4a55      	ldr	r2, [pc, #340]	; (80110c0 <tcp_process+0x7dc>)
 8010f6c:	6013      	str	r3, [r2, #0]
 8010f6e:	e013      	b.n	8010f98 <tcp_process+0x6b4>
 8010f70:	4b53      	ldr	r3, [pc, #332]	; (80110c0 <tcp_process+0x7dc>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	613b      	str	r3, [r7, #16]
 8010f76:	e00c      	b.n	8010f92 <tcp_process+0x6ae>
 8010f78:	693b      	ldr	r3, [r7, #16]
 8010f7a:	68db      	ldr	r3, [r3, #12]
 8010f7c:	687a      	ldr	r2, [r7, #4]
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d104      	bne.n	8010f8c <tcp_process+0x6a8>
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	68da      	ldr	r2, [r3, #12]
 8010f86:	693b      	ldr	r3, [r7, #16]
 8010f88:	60da      	str	r2, [r3, #12]
 8010f8a:	e005      	b.n	8010f98 <tcp_process+0x6b4>
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	68db      	ldr	r3, [r3, #12]
 8010f90:	613b      	str	r3, [r7, #16]
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d1ef      	bne.n	8010f78 <tcp_process+0x694>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	60da      	str	r2, [r3, #12]
 8010f9e:	4b43      	ldr	r3, [pc, #268]	; (80110ac <tcp_process+0x7c8>)
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	220a      	movs	r2, #10
 8010fa8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010faa:	4b41      	ldr	r3, [pc, #260]	; (80110b0 <tcp_process+0x7cc>)
 8010fac:	681a      	ldr	r2, [r3, #0]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	60da      	str	r2, [r3, #12]
 8010fb2:	4a3f      	ldr	r2, [pc, #252]	; (80110b0 <tcp_process+0x7cc>)
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	6013      	str	r3, [r2, #0]
 8010fb8:	f003 f8f8 	bl	80141ac <tcp_timer_needed>
      }
      break;
 8010fbc:	e06c      	b.n	8011098 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f000 f984 	bl	80112cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010fc4:	4b3b      	ldr	r3, [pc, #236]	; (80110b4 <tcp_process+0x7d0>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	f003 0310 	and.w	r3, r3, #16
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d065      	beq.n	801109c <tcp_process+0x7b8>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010fd4:	4b38      	ldr	r3, [pc, #224]	; (80110b8 <tcp_process+0x7d4>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d15f      	bne.n	801109c <tcp_process+0x7b8>
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d15b      	bne.n	801109c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f7fe fcf3 	bl	800f9d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010fea:	4b35      	ldr	r3, [pc, #212]	; (80110c0 <tcp_process+0x7dc>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d105      	bne.n	8011000 <tcp_process+0x71c>
 8010ff4:	4b32      	ldr	r3, [pc, #200]	; (80110c0 <tcp_process+0x7dc>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	68db      	ldr	r3, [r3, #12]
 8010ffa:	4a31      	ldr	r2, [pc, #196]	; (80110c0 <tcp_process+0x7dc>)
 8010ffc:	6013      	str	r3, [r2, #0]
 8010ffe:	e013      	b.n	8011028 <tcp_process+0x744>
 8011000:	4b2f      	ldr	r3, [pc, #188]	; (80110c0 <tcp_process+0x7dc>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	60fb      	str	r3, [r7, #12]
 8011006:	e00c      	b.n	8011022 <tcp_process+0x73e>
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	68db      	ldr	r3, [r3, #12]
 801100c:	687a      	ldr	r2, [r7, #4]
 801100e:	429a      	cmp	r2, r3
 8011010:	d104      	bne.n	801101c <tcp_process+0x738>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	68da      	ldr	r2, [r3, #12]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	60da      	str	r2, [r3, #12]
 801101a:	e005      	b.n	8011028 <tcp_process+0x744>
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	60fb      	str	r3, [r7, #12]
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d1ef      	bne.n	8011008 <tcp_process+0x724>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2200      	movs	r2, #0
 801102c:	60da      	str	r2, [r3, #12]
 801102e:	4b1f      	ldr	r3, [pc, #124]	; (80110ac <tcp_process+0x7c8>)
 8011030:	2201      	movs	r2, #1
 8011032:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	220a      	movs	r2, #10
 8011038:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801103a:	4b1d      	ldr	r3, [pc, #116]	; (80110b0 <tcp_process+0x7cc>)
 801103c:	681a      	ldr	r2, [r3, #0]
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	60da      	str	r2, [r3, #12]
 8011042:	4a1b      	ldr	r2, [pc, #108]	; (80110b0 <tcp_process+0x7cc>)
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6013      	str	r3, [r2, #0]
 8011048:	f003 f8b0 	bl	80141ac <tcp_timer_needed>
      }
      break;
 801104c:	e026      	b.n	801109c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801104e:	6878      	ldr	r0, [r7, #4]
 8011050:	f000 f93c 	bl	80112cc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011054:	4b17      	ldr	r3, [pc, #92]	; (80110b4 <tcp_process+0x7d0>)
 8011056:	781b      	ldrb	r3, [r3, #0]
 8011058:	f003 0310 	and.w	r3, r3, #16
 801105c:	2b00      	cmp	r3, #0
 801105e:	d01f      	beq.n	80110a0 <tcp_process+0x7bc>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011064:	4b14      	ldr	r3, [pc, #80]	; (80110b8 <tcp_process+0x7d4>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	429a      	cmp	r2, r3
 801106a:	d119      	bne.n	80110a0 <tcp_process+0x7bc>
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011070:	2b00      	cmp	r3, #0
 8011072:	d115      	bne.n	80110a0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011074:	4b11      	ldr	r3, [pc, #68]	; (80110bc <tcp_process+0x7d8>)
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	f043 0310 	orr.w	r3, r3, #16
 801107c:	b2da      	uxtb	r2, r3
 801107e:	4b0f      	ldr	r3, [pc, #60]	; (80110bc <tcp_process+0x7d8>)
 8011080:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011082:	e00d      	b.n	80110a0 <tcp_process+0x7bc>
    default:
      break;
 8011084:	bf00      	nop
 8011086:	e00c      	b.n	80110a2 <tcp_process+0x7be>
      break;
 8011088:	bf00      	nop
 801108a:	e00a      	b.n	80110a2 <tcp_process+0x7be>
      break;
 801108c:	bf00      	nop
 801108e:	e008      	b.n	80110a2 <tcp_process+0x7be>
      break;
 8011090:	bf00      	nop
 8011092:	e006      	b.n	80110a2 <tcp_process+0x7be>
      break;
 8011094:	bf00      	nop
 8011096:	e004      	b.n	80110a2 <tcp_process+0x7be>
      break;
 8011098:	bf00      	nop
 801109a:	e002      	b.n	80110a2 <tcp_process+0x7be>
      break;
 801109c:	bf00      	nop
 801109e:	e000      	b.n	80110a2 <tcp_process+0x7be>
      break;
 80110a0:	bf00      	nop
  }
  return ERR_OK;
 80110a2:	2300      	movs	r3, #0
}
 80110a4:	4618      	mov	r0, r3
 80110a6:	3724      	adds	r7, #36	; 0x24
 80110a8:	46bd      	mov	sp, r7
 80110aa:	bd90      	pop	{r4, r7, pc}
 80110ac:	20016e10 	.word	0x20016e10
 80110b0:	20016e24 	.word	0x20016e24
 80110b4:	20010284 	.word	0x20010284
 80110b8:	2001027c 	.word	0x2001027c
 80110bc:	20010285 	.word	0x20010285
 80110c0:	20016e14 	.word	0x20016e14

080110c4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80110c4:	b590      	push	{r4, r7, lr}
 80110c6:	b085      	sub	sp, #20
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d106      	bne.n	80110e2 <tcp_oos_insert_segment+0x1e>
 80110d4:	4b3b      	ldr	r3, [pc, #236]	; (80111c4 <tcp_oos_insert_segment+0x100>)
 80110d6:	f240 421f 	movw	r2, #1055	; 0x41f
 80110da:	493b      	ldr	r1, [pc, #236]	; (80111c8 <tcp_oos_insert_segment+0x104>)
 80110dc:	483b      	ldr	r0, [pc, #236]	; (80111cc <tcp_oos_insert_segment+0x108>)
 80110de:	f008 fa45 	bl	801956c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	899b      	ldrh	r3, [r3, #12]
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	4618      	mov	r0, r3
 80110ec:	f7fb f916 	bl	800c31c <lwip_htons>
 80110f0:	4603      	mov	r3, r0
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	f003 0301 	and.w	r3, r3, #1
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d028      	beq.n	801114e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80110fc:	6838      	ldr	r0, [r7, #0]
 80110fe:	f7fe f97b 	bl	800f3f8 <tcp_segs_free>
    next = NULL;
 8011102:	2300      	movs	r3, #0
 8011104:	603b      	str	r3, [r7, #0]
 8011106:	e056      	b.n	80111b6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	899b      	ldrh	r3, [r3, #12]
 801110e:	b29b      	uxth	r3, r3
 8011110:	4618      	mov	r0, r3
 8011112:	f7fb f903 	bl	800c31c <lwip_htons>
 8011116:	4603      	mov	r3, r0
 8011118:	b2db      	uxtb	r3, r3
 801111a:	f003 0301 	and.w	r3, r3, #1
 801111e:	2b00      	cmp	r3, #0
 8011120:	d00d      	beq.n	801113e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	68db      	ldr	r3, [r3, #12]
 8011126:	899b      	ldrh	r3, [r3, #12]
 8011128:	b29c      	uxth	r4, r3
 801112a:	2001      	movs	r0, #1
 801112c:	f7fb f8f6 	bl	800c31c <lwip_htons>
 8011130:	4603      	mov	r3, r0
 8011132:	461a      	mov	r2, r3
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	68db      	ldr	r3, [r3, #12]
 8011138:	4322      	orrs	r2, r4
 801113a:	b292      	uxth	r2, r2
 801113c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801113e:	683b      	ldr	r3, [r7, #0]
 8011140:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011148:	68f8      	ldr	r0, [r7, #12]
 801114a:	f7fe f969 	bl	800f420 <tcp_seg_free>
    while (next &&
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d00e      	beq.n	8011172 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	891b      	ldrh	r3, [r3, #8]
 8011158:	461a      	mov	r2, r3
 801115a:	4b1d      	ldr	r3, [pc, #116]	; (80111d0 <tcp_oos_insert_segment+0x10c>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	441a      	add	r2, r3
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	685b      	ldr	r3, [r3, #4]
 8011166:	6839      	ldr	r1, [r7, #0]
 8011168:	8909      	ldrh	r1, [r1, #8]
 801116a:	440b      	add	r3, r1
 801116c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801116e:	2b00      	cmp	r3, #0
 8011170:	daca      	bge.n	8011108 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d01e      	beq.n	80111b6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	891b      	ldrh	r3, [r3, #8]
 801117c:	461a      	mov	r2, r3
 801117e:	4b14      	ldr	r3, [pc, #80]	; (80111d0 <tcp_oos_insert_segment+0x10c>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	441a      	add	r2, r3
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	68db      	ldr	r3, [r3, #12]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801118c:	2b00      	cmp	r3, #0
 801118e:	dd12      	ble.n	80111b6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	b29a      	uxth	r2, r3
 8011198:	4b0d      	ldr	r3, [pc, #52]	; (80111d0 <tcp_oos_insert_segment+0x10c>)
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	b29b      	uxth	r3, r3
 801119e:	1ad3      	subs	r3, r2, r3
 80111a0:	b29a      	uxth	r2, r3
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	685a      	ldr	r2, [r3, #4]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	891b      	ldrh	r3, [r3, #8]
 80111ae:	4619      	mov	r1, r3
 80111b0:	4610      	mov	r0, r2
 80111b2:	f7fc fb17 	bl	800d7e4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	683a      	ldr	r2, [r7, #0]
 80111ba:	601a      	str	r2, [r3, #0]
}
 80111bc:	bf00      	nop
 80111be:	3714      	adds	r7, #20
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd90      	pop	{r4, r7, pc}
 80111c4:	0801c8d0 	.word	0x0801c8d0
 80111c8:	0801cb90 	.word	0x0801cb90
 80111cc:	0801c91c 	.word	0x0801c91c
 80111d0:	20010278 	.word	0x20010278

080111d4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80111d4:	b5b0      	push	{r4, r5, r7, lr}
 80111d6:	b086      	sub	sp, #24
 80111d8:	af00      	add	r7, sp, #0
 80111da:	60f8      	str	r0, [r7, #12]
 80111dc:	60b9      	str	r1, [r7, #8]
 80111de:	607a      	str	r2, [r7, #4]
 80111e0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80111e2:	e03e      	b.n	8011262 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7fc fd0a 	bl	800dc0c <pbuf_clen>
 80111f8:	4603      	mov	r3, r0
 80111fa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011202:	8a7a      	ldrh	r2, [r7, #18]
 8011204:	429a      	cmp	r2, r3
 8011206:	d906      	bls.n	8011216 <tcp_free_acked_segments+0x42>
 8011208:	4b2a      	ldr	r3, [pc, #168]	; (80112b4 <tcp_free_acked_segments+0xe0>)
 801120a:	f240 4257 	movw	r2, #1111	; 0x457
 801120e:	492a      	ldr	r1, [pc, #168]	; (80112b8 <tcp_free_acked_segments+0xe4>)
 8011210:	482a      	ldr	r0, [pc, #168]	; (80112bc <tcp_free_acked_segments+0xe8>)
 8011212:	f008 f9ab 	bl	801956c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801121c:	8a7b      	ldrh	r3, [r7, #18]
 801121e:	1ad3      	subs	r3, r2, r3
 8011220:	b29a      	uxth	r2, r3
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	891a      	ldrh	r2, [r3, #8]
 801122c:	4b24      	ldr	r3, [pc, #144]	; (80112c0 <tcp_free_acked_segments+0xec>)
 801122e:	881b      	ldrh	r3, [r3, #0]
 8011230:	4413      	add	r3, r2
 8011232:	b29a      	uxth	r2, r3
 8011234:	4b22      	ldr	r3, [pc, #136]	; (80112c0 <tcp_free_acked_segments+0xec>)
 8011236:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011238:	6978      	ldr	r0, [r7, #20]
 801123a:	f7fe f8f1 	bl	800f420 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011244:	2b00      	cmp	r3, #0
 8011246:	d00c      	beq.n	8011262 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011248:	68bb      	ldr	r3, [r7, #8]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d109      	bne.n	8011262 <tcp_free_acked_segments+0x8e>
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d106      	bne.n	8011262 <tcp_free_acked_segments+0x8e>
 8011254:	4b17      	ldr	r3, [pc, #92]	; (80112b4 <tcp_free_acked_segments+0xe0>)
 8011256:	f240 4262 	movw	r2, #1122	; 0x462
 801125a:	491a      	ldr	r1, [pc, #104]	; (80112c4 <tcp_free_acked_segments+0xf0>)
 801125c:	4817      	ldr	r0, [pc, #92]	; (80112bc <tcp_free_acked_segments+0xe8>)
 801125e:	f008 f985 	bl	801956c <iprintf>
  while (seg_list != NULL &&
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d020      	beq.n	80112aa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	68db      	ldr	r3, [r3, #12]
 801126c:	685b      	ldr	r3, [r3, #4]
 801126e:	4618      	mov	r0, r3
 8011270:	f7fb f869 	bl	800c346 <lwip_htonl>
 8011274:	4604      	mov	r4, r0
 8011276:	68bb      	ldr	r3, [r7, #8]
 8011278:	891b      	ldrh	r3, [r3, #8]
 801127a:	461d      	mov	r5, r3
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	899b      	ldrh	r3, [r3, #12]
 8011282:	b29b      	uxth	r3, r3
 8011284:	4618      	mov	r0, r3
 8011286:	f7fb f849 	bl	800c31c <lwip_htons>
 801128a:	4603      	mov	r3, r0
 801128c:	b2db      	uxtb	r3, r3
 801128e:	f003 0303 	and.w	r3, r3, #3
 8011292:	2b00      	cmp	r3, #0
 8011294:	d001      	beq.n	801129a <tcp_free_acked_segments+0xc6>
 8011296:	2301      	movs	r3, #1
 8011298:	e000      	b.n	801129c <tcp_free_acked_segments+0xc8>
 801129a:	2300      	movs	r3, #0
 801129c:	442b      	add	r3, r5
 801129e:	18e2      	adds	r2, r4, r3
 80112a0:	4b09      	ldr	r3, [pc, #36]	; (80112c8 <tcp_free_acked_segments+0xf4>)
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	dd9c      	ble.n	80111e4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80112aa:	68bb      	ldr	r3, [r7, #8]
}
 80112ac:	4618      	mov	r0, r3
 80112ae:	3718      	adds	r7, #24
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bdb0      	pop	{r4, r5, r7, pc}
 80112b4:	0801c8d0 	.word	0x0801c8d0
 80112b8:	0801cbb8 	.word	0x0801cbb8
 80112bc:	0801c91c 	.word	0x0801c91c
 80112c0:	20010280 	.word	0x20010280
 80112c4:	0801cbe0 	.word	0x0801cbe0
 80112c8:	2001027c 	.word	0x2001027c

080112cc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80112cc:	b5b0      	push	{r4, r5, r7, lr}
 80112ce:	b094      	sub	sp, #80	; 0x50
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80112d4:	2300      	movs	r3, #0
 80112d6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d106      	bne.n	80112ec <tcp_receive+0x20>
 80112de:	4ba6      	ldr	r3, [pc, #664]	; (8011578 <tcp_receive+0x2ac>)
 80112e0:	f240 427b 	movw	r2, #1147	; 0x47b
 80112e4:	49a5      	ldr	r1, [pc, #660]	; (801157c <tcp_receive+0x2b0>)
 80112e6:	48a6      	ldr	r0, [pc, #664]	; (8011580 <tcp_receive+0x2b4>)
 80112e8:	f008 f940 	bl	801956c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	7d1b      	ldrb	r3, [r3, #20]
 80112f0:	2b03      	cmp	r3, #3
 80112f2:	d806      	bhi.n	8011302 <tcp_receive+0x36>
 80112f4:	4ba0      	ldr	r3, [pc, #640]	; (8011578 <tcp_receive+0x2ac>)
 80112f6:	f240 427c 	movw	r2, #1148	; 0x47c
 80112fa:	49a2      	ldr	r1, [pc, #648]	; (8011584 <tcp_receive+0x2b8>)
 80112fc:	48a0      	ldr	r0, [pc, #640]	; (8011580 <tcp_receive+0x2b4>)
 80112fe:	f008 f935 	bl	801956c <iprintf>

  if (flags & TCP_ACK) {
 8011302:	4ba1      	ldr	r3, [pc, #644]	; (8011588 <tcp_receive+0x2bc>)
 8011304:	781b      	ldrb	r3, [r3, #0]
 8011306:	f003 0310 	and.w	r3, r3, #16
 801130a:	2b00      	cmp	r3, #0
 801130c:	f000 8263 	beq.w	80117d6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011316:	461a      	mov	r2, r3
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801131c:	4413      	add	r3, r2
 801131e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011324:	4b99      	ldr	r3, [pc, #612]	; (801158c <tcp_receive+0x2c0>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	1ad3      	subs	r3, r2, r3
 801132a:	2b00      	cmp	r3, #0
 801132c:	db1b      	blt.n	8011366 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011332:	4b96      	ldr	r3, [pc, #600]	; (801158c <tcp_receive+0x2c0>)
 8011334:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011336:	429a      	cmp	r2, r3
 8011338:	d106      	bne.n	8011348 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801133e:	4b94      	ldr	r3, [pc, #592]	; (8011590 <tcp_receive+0x2c4>)
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	1ad3      	subs	r3, r2, r3
 8011344:	2b00      	cmp	r3, #0
 8011346:	db0e      	blt.n	8011366 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801134c:	4b90      	ldr	r3, [pc, #576]	; (8011590 <tcp_receive+0x2c4>)
 801134e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011350:	429a      	cmp	r2, r3
 8011352:	d125      	bne.n	80113a0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011354:	4b8f      	ldr	r3, [pc, #572]	; (8011594 <tcp_receive+0x2c8>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	89db      	ldrh	r3, [r3, #14]
 801135a:	b29a      	uxth	r2, r3
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011362:	429a      	cmp	r2, r3
 8011364:	d91c      	bls.n	80113a0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011366:	4b8b      	ldr	r3, [pc, #556]	; (8011594 <tcp_receive+0x2c8>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	89db      	ldrh	r3, [r3, #14]
 801136c:	b29a      	uxth	r2, r3
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011380:	429a      	cmp	r2, r3
 8011382:	d205      	bcs.n	8011390 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011390:	4b7e      	ldr	r3, [pc, #504]	; (801158c <tcp_receive+0x2c0>)
 8011392:	681a      	ldr	r2, [r3, #0]
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011398:	4b7d      	ldr	r3, [pc, #500]	; (8011590 <tcp_receive+0x2c4>)
 801139a:	681a      	ldr	r2, [r3, #0]
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80113a0:	4b7b      	ldr	r3, [pc, #492]	; (8011590 <tcp_receive+0x2c4>)
 80113a2:	681a      	ldr	r2, [r3, #0]
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113a8:	1ad3      	subs	r3, r2, r3
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	dc58      	bgt.n	8011460 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80113ae:	4b7a      	ldr	r3, [pc, #488]	; (8011598 <tcp_receive+0x2cc>)
 80113b0:	881b      	ldrh	r3, [r3, #0]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d14b      	bne.n	801144e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80113c0:	4413      	add	r3, r2
 80113c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d142      	bne.n	801144e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	db3d      	blt.n	801144e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80113d6:	4b6e      	ldr	r3, [pc, #440]	; (8011590 <tcp_receive+0x2c4>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	429a      	cmp	r2, r3
 80113dc:	d137      	bne.n	801144e <tcp_receive+0x182>
              found_dupack = 1;
 80113de:	2301      	movs	r3, #1
 80113e0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80113e8:	2bff      	cmp	r3, #255	; 0xff
 80113ea:	d007      	beq.n	80113fc <tcp_receive+0x130>
                ++pcb->dupacks;
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80113f2:	3301      	adds	r3, #1
 80113f4:	b2da      	uxtb	r2, r3
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011402:	2b03      	cmp	r3, #3
 8011404:	d91b      	bls.n	801143e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011410:	4413      	add	r3, r2
 8011412:	b29a      	uxth	r2, r3
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801141a:	429a      	cmp	r2, r3
 801141c:	d30a      	bcc.n	8011434 <tcp_receive+0x168>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011428:	4413      	add	r3, r2
 801142a:	b29a      	uxth	r2, r3
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011432:	e004      	b.n	801143e <tcp_receive+0x172>
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801143a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011444:	2b02      	cmp	r3, #2
 8011446:	d902      	bls.n	801144e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f002 fb47 	bl	8013adc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801144e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011450:	2b00      	cmp	r3, #0
 8011452:	f040 8160 	bne.w	8011716 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	2200      	movs	r2, #0
 801145a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801145e:	e15a      	b.n	8011716 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011460:	4b4b      	ldr	r3, [pc, #300]	; (8011590 <tcp_receive+0x2c4>)
 8011462:	681a      	ldr	r2, [r3, #0]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011468:	1ad3      	subs	r3, r2, r3
 801146a:	3b01      	subs	r3, #1
 801146c:	2b00      	cmp	r3, #0
 801146e:	f2c0 814d 	blt.w	801170c <tcp_receive+0x440>
 8011472:	4b47      	ldr	r3, [pc, #284]	; (8011590 <tcp_receive+0x2c4>)
 8011474:	681a      	ldr	r2, [r3, #0]
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801147a:	1ad3      	subs	r3, r2, r3
 801147c:	2b00      	cmp	r3, #0
 801147e:	f300 8145 	bgt.w	801170c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	8b5b      	ldrh	r3, [r3, #26]
 8011486:	f003 0304 	and.w	r3, r3, #4
 801148a:	2b00      	cmp	r3, #0
 801148c:	d010      	beq.n	80114b0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	8b5b      	ldrh	r3, [r3, #26]
 8011492:	f023 0304 	bic.w	r3, r3, #4
 8011496:	b29a      	uxth	r2, r3
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	2200      	movs	r2, #0
 80114ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2200      	movs	r2, #0
 80114b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80114be:	10db      	asrs	r3, r3, #3
 80114c0:	b21b      	sxth	r3, r3
 80114c2:	b29a      	uxth	r2, r3
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80114ca:	b29b      	uxth	r3, r3
 80114cc:	4413      	add	r3, r2
 80114ce:	b29b      	uxth	r3, r3
 80114d0:	b21a      	sxth	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80114d8:	4b2d      	ldr	r3, [pc, #180]	; (8011590 <tcp_receive+0x2c4>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	b29a      	uxth	r2, r3
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114e2:	b29b      	uxth	r3, r3
 80114e4:	1ad3      	subs	r3, r2, r3
 80114e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2200      	movs	r2, #0
 80114ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80114f0:	4b27      	ldr	r3, [pc, #156]	; (8011590 <tcp_receive+0x2c4>)
 80114f2:	681a      	ldr	r2, [r3, #0]
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	7d1b      	ldrb	r3, [r3, #20]
 80114fc:	2b03      	cmp	r3, #3
 80114fe:	f240 8096 	bls.w	801162e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801150e:	429a      	cmp	r2, r3
 8011510:	d244      	bcs.n	801159c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	8b5b      	ldrh	r3, [r3, #26]
 8011516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801151a:	2b00      	cmp	r3, #0
 801151c:	d001      	beq.n	8011522 <tcp_receive+0x256>
 801151e:	2301      	movs	r3, #1
 8011520:	e000      	b.n	8011524 <tcp_receive+0x258>
 8011522:	2302      	movs	r3, #2
 8011524:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011528:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801152c:	b29a      	uxth	r2, r3
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011532:	fb12 f303 	smulbb	r3, r2, r3
 8011536:	b29b      	uxth	r3, r3
 8011538:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801153a:	4293      	cmp	r3, r2
 801153c:	bf28      	it	cs
 801153e:	4613      	movcs	r3, r2
 8011540:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011548:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801154a:	4413      	add	r3, r2
 801154c:	b29a      	uxth	r2, r3
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011554:	429a      	cmp	r2, r3
 8011556:	d309      	bcc.n	801156c <tcp_receive+0x2a0>
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801155e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011560:	4413      	add	r3, r2
 8011562:	b29a      	uxth	r2, r3
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801156a:	e060      	b.n	801162e <tcp_receive+0x362>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011572:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011576:	e05a      	b.n	801162e <tcp_receive+0x362>
 8011578:	0801c8d0 	.word	0x0801c8d0
 801157c:	0801cc00 	.word	0x0801cc00
 8011580:	0801c91c 	.word	0x0801c91c
 8011584:	0801cc1c 	.word	0x0801cc1c
 8011588:	20010284 	.word	0x20010284
 801158c:	20010278 	.word	0x20010278
 8011590:	2001027c 	.word	0x2001027c
 8011594:	20010268 	.word	0x20010268
 8011598:	20010282 	.word	0x20010282
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80115a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80115a4:	4413      	add	r3, r2
 80115a6:	b29a      	uxth	r2, r3
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80115ae:	429a      	cmp	r2, r3
 80115b0:	d309      	bcc.n	80115c6 <tcp_receive+0x2fa>
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80115b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80115ba:	4413      	add	r3, r2
 80115bc:	b29a      	uxth	r2, r3
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80115c4:	e004      	b.n	80115d0 <tcp_receive+0x304>
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115dc:	429a      	cmp	r2, r3
 80115de:	d326      	bcc.n	801162e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115ec:	1ad3      	subs	r3, r2, r3
 80115ee:	b29a      	uxth	r2, r3
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011600:	4413      	add	r3, r2
 8011602:	b29a      	uxth	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801160a:	429a      	cmp	r2, r3
 801160c:	d30a      	bcc.n	8011624 <tcp_receive+0x358>
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011618:	4413      	add	r3, r2
 801161a:	b29a      	uxth	r2, r3
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011622:	e004      	b.n	801162e <tcp_receive+0x362>
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801162a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011636:	4a98      	ldr	r2, [pc, #608]	; (8011898 <tcp_receive+0x5cc>)
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f7ff fdcb 	bl	80111d4 <tcp_free_acked_segments>
 801163e:	4602      	mov	r2, r0
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801164c:	4a93      	ldr	r2, [pc, #588]	; (801189c <tcp_receive+0x5d0>)
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f7ff fdc0 	bl	80111d4 <tcp_free_acked_segments>
 8011654:	4602      	mov	r2, r0
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801165e:	2b00      	cmp	r3, #0
 8011660:	d104      	bne.n	801166c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011668:	861a      	strh	r2, [r3, #48]	; 0x30
 801166a:	e002      	b.n	8011672 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2200      	movs	r2, #0
 8011670:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	2200      	movs	r2, #0
 8011676:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801167c:	2b00      	cmp	r3, #0
 801167e:	d103      	bne.n	8011688 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2200      	movs	r2, #0
 8011684:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801168e:	4b84      	ldr	r3, [pc, #528]	; (80118a0 <tcp_receive+0x5d4>)
 8011690:	881b      	ldrh	r3, [r3, #0]
 8011692:	4413      	add	r3, r2
 8011694:	b29a      	uxth	r2, r3
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	8b5b      	ldrh	r3, [r3, #26]
 80116a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d035      	beq.n	8011714 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d118      	bne.n	80116e2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d00c      	beq.n	80116d2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116c0:	68db      	ldr	r3, [r3, #12]
 80116c2:	685b      	ldr	r3, [r3, #4]
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7fa fe3e 	bl	800c346 <lwip_htonl>
 80116ca:	4603      	mov	r3, r0
 80116cc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	dc20      	bgt.n	8011714 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	8b5b      	ldrh	r3, [r3, #26]
 80116d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80116da:	b29a      	uxth	r2, r3
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116e0:	e018      	b.n	8011714 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116ea:	68db      	ldr	r3, [r3, #12]
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	4618      	mov	r0, r3
 80116f0:	f7fa fe29 	bl	800c346 <lwip_htonl>
 80116f4:	4603      	mov	r3, r0
 80116f6:	1ae3      	subs	r3, r4, r3
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	dc0b      	bgt.n	8011714 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	8b5b      	ldrh	r3, [r3, #26]
 8011700:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011704:	b29a      	uxth	r2, r3
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801170a:	e003      	b.n	8011714 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f002 fbdd 	bl	8013ecc <tcp_send_empty_ack>
 8011712:	e000      	b.n	8011716 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011714:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801171a:	2b00      	cmp	r3, #0
 801171c:	d05b      	beq.n	80117d6 <tcp_receive+0x50a>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011722:	4b60      	ldr	r3, [pc, #384]	; (80118a4 <tcp_receive+0x5d8>)
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	1ad3      	subs	r3, r2, r3
 8011728:	2b00      	cmp	r3, #0
 801172a:	da54      	bge.n	80117d6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801172c:	4b5e      	ldr	r3, [pc, #376]	; (80118a8 <tcp_receive+0x5dc>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	b29a      	uxth	r2, r3
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011736:	b29b      	uxth	r3, r3
 8011738:	1ad3      	subs	r3, r2, r3
 801173a:	b29b      	uxth	r3, r3
 801173c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8011740:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801174a:	10db      	asrs	r3, r3, #3
 801174c:	b21b      	sxth	r3, r3
 801174e:	b29b      	uxth	r3, r3
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	b29b      	uxth	r3, r3
 8011754:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801175e:	b29a      	uxth	r2, r3
 8011760:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011764:	4413      	add	r3, r2
 8011766:	b29b      	uxth	r3, r3
 8011768:	b21a      	sxth	r2, r3
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801176e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011772:	2b00      	cmp	r3, #0
 8011774:	da05      	bge.n	8011782 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011776:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801177a:	425b      	negs	r3, r3
 801177c:	b29b      	uxth	r3, r3
 801177e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011782:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801178c:	109b      	asrs	r3, r3, #2
 801178e:	b21b      	sxth	r3, r3
 8011790:	b29b      	uxth	r3, r3
 8011792:	1ad3      	subs	r3, r2, r3
 8011794:	b29b      	uxth	r3, r3
 8011796:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80117a0:	b29a      	uxth	r2, r3
 80117a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80117a6:	4413      	add	r3, r2
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	b21a      	sxth	r2, r3
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80117b6:	10db      	asrs	r3, r3, #3
 80117b8:	b21b      	sxth	r3, r3
 80117ba:	b29a      	uxth	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	4413      	add	r3, r2
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	b21a      	sxth	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2200      	movs	r2, #0
 80117d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80117d6:	4b35      	ldr	r3, [pc, #212]	; (80118ac <tcp_receive+0x5e0>)
 80117d8:	881b      	ldrh	r3, [r3, #0]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	f000 84e1 	beq.w	80121a2 <tcp_receive+0xed6>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	7d1b      	ldrb	r3, [r3, #20]
 80117e4:	2b06      	cmp	r3, #6
 80117e6:	f200 84dc 	bhi.w	80121a2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117ee:	4b30      	ldr	r3, [pc, #192]	; (80118b0 <tcp_receive+0x5e4>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	1ad3      	subs	r3, r2, r3
 80117f4:	3b01      	subs	r3, #1
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	f2c0 808e 	blt.w	8011918 <tcp_receive+0x64c>
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011800:	4b2a      	ldr	r3, [pc, #168]	; (80118ac <tcp_receive+0x5e0>)
 8011802:	881b      	ldrh	r3, [r3, #0]
 8011804:	4619      	mov	r1, r3
 8011806:	4b2a      	ldr	r3, [pc, #168]	; (80118b0 <tcp_receive+0x5e4>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	440b      	add	r3, r1
 801180c:	1ad3      	subs	r3, r2, r3
 801180e:	3301      	adds	r3, #1
 8011810:	2b00      	cmp	r3, #0
 8011812:	f300 8081 	bgt.w	8011918 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011816:	4b27      	ldr	r3, [pc, #156]	; (80118b4 <tcp_receive+0x5e8>)
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011820:	4b23      	ldr	r3, [pc, #140]	; (80118b0 <tcp_receive+0x5e4>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	1ad3      	subs	r3, r2, r3
 8011826:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011828:	4b22      	ldr	r3, [pc, #136]	; (80118b4 <tcp_receive+0x5e8>)
 801182a:	685b      	ldr	r3, [r3, #4]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d106      	bne.n	801183e <tcp_receive+0x572>
 8011830:	4b21      	ldr	r3, [pc, #132]	; (80118b8 <tcp_receive+0x5ec>)
 8011832:	f240 5294 	movw	r2, #1428	; 0x594
 8011836:	4921      	ldr	r1, [pc, #132]	; (80118bc <tcp_receive+0x5f0>)
 8011838:	4821      	ldr	r0, [pc, #132]	; (80118c0 <tcp_receive+0x5f4>)
 801183a:	f007 fe97 	bl	801956c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011840:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011844:	4293      	cmp	r3, r2
 8011846:	d906      	bls.n	8011856 <tcp_receive+0x58a>
 8011848:	4b1b      	ldr	r3, [pc, #108]	; (80118b8 <tcp_receive+0x5ec>)
 801184a:	f240 5295 	movw	r2, #1429	; 0x595
 801184e:	491d      	ldr	r1, [pc, #116]	; (80118c4 <tcp_receive+0x5f8>)
 8011850:	481b      	ldr	r0, [pc, #108]	; (80118c0 <tcp_receive+0x5f4>)
 8011852:	f007 fe8b 	bl	801956c <iprintf>
      off = (u16_t)off32;
 8011856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011858:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801185c:	4b15      	ldr	r3, [pc, #84]	; (80118b4 <tcp_receive+0x5e8>)
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	891b      	ldrh	r3, [r3, #8]
 8011862:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011866:	429a      	cmp	r2, r3
 8011868:	d906      	bls.n	8011878 <tcp_receive+0x5ac>
 801186a:	4b13      	ldr	r3, [pc, #76]	; (80118b8 <tcp_receive+0x5ec>)
 801186c:	f240 5297 	movw	r2, #1431	; 0x597
 8011870:	4915      	ldr	r1, [pc, #84]	; (80118c8 <tcp_receive+0x5fc>)
 8011872:	4813      	ldr	r0, [pc, #76]	; (80118c0 <tcp_receive+0x5f4>)
 8011874:	f007 fe7a 	bl	801956c <iprintf>
      inseg.len -= off;
 8011878:	4b0e      	ldr	r3, [pc, #56]	; (80118b4 <tcp_receive+0x5e8>)
 801187a:	891a      	ldrh	r2, [r3, #8]
 801187c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011880:	1ad3      	subs	r3, r2, r3
 8011882:	b29a      	uxth	r2, r3
 8011884:	4b0b      	ldr	r3, [pc, #44]	; (80118b4 <tcp_receive+0x5e8>)
 8011886:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011888:	4b0a      	ldr	r3, [pc, #40]	; (80118b4 <tcp_receive+0x5e8>)
 801188a:	685b      	ldr	r3, [r3, #4]
 801188c:	891a      	ldrh	r2, [r3, #8]
 801188e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011892:	1ad3      	subs	r3, r2, r3
 8011894:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011896:	e029      	b.n	80118ec <tcp_receive+0x620>
 8011898:	0801cc38 	.word	0x0801cc38
 801189c:	0801cc40 	.word	0x0801cc40
 80118a0:	20010280 	.word	0x20010280
 80118a4:	2001027c 	.word	0x2001027c
 80118a8:	20016e18 	.word	0x20016e18
 80118ac:	20010282 	.word	0x20010282
 80118b0:	20010278 	.word	0x20010278
 80118b4:	20010258 	.word	0x20010258
 80118b8:	0801c8d0 	.word	0x0801c8d0
 80118bc:	0801cc48 	.word	0x0801cc48
 80118c0:	0801c91c 	.word	0x0801c91c
 80118c4:	0801cc58 	.word	0x0801cc58
 80118c8:	0801cc68 	.word	0x0801cc68
        off -= p->len;
 80118cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118ce:	895b      	ldrh	r3, [r3, #10]
 80118d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80118d4:	1ad3      	subs	r3, r2, r3
 80118d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80118da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80118de:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80118e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118e2:	2200      	movs	r2, #0
 80118e4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80118e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80118ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118ee:	895b      	ldrh	r3, [r3, #10]
 80118f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d8e9      	bhi.n	80118cc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80118f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80118fc:	4619      	mov	r1, r3
 80118fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011900:	f7fc f870 	bl	800d9e4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011908:	4a91      	ldr	r2, [pc, #580]	; (8011b50 <tcp_receive+0x884>)
 801190a:	6013      	str	r3, [r2, #0]
 801190c:	4b91      	ldr	r3, [pc, #580]	; (8011b54 <tcp_receive+0x888>)
 801190e:	68db      	ldr	r3, [r3, #12]
 8011910:	4a8f      	ldr	r2, [pc, #572]	; (8011b50 <tcp_receive+0x884>)
 8011912:	6812      	ldr	r2, [r2, #0]
 8011914:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011916:	e00d      	b.n	8011934 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011918:	4b8d      	ldr	r3, [pc, #564]	; (8011b50 <tcp_receive+0x884>)
 801191a:	681a      	ldr	r2, [r3, #0]
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011920:	1ad3      	subs	r3, r2, r3
 8011922:	2b00      	cmp	r3, #0
 8011924:	da06      	bge.n	8011934 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	8b5b      	ldrh	r3, [r3, #26]
 801192a:	f043 0302 	orr.w	r3, r3, #2
 801192e:	b29a      	uxth	r2, r3
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011934:	4b86      	ldr	r3, [pc, #536]	; (8011b50 <tcp_receive+0x884>)
 8011936:	681a      	ldr	r2, [r3, #0]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801193c:	1ad3      	subs	r3, r2, r3
 801193e:	2b00      	cmp	r3, #0
 8011940:	f2c0 842a 	blt.w	8012198 <tcp_receive+0xecc>
 8011944:	4b82      	ldr	r3, [pc, #520]	; (8011b50 <tcp_receive+0x884>)
 8011946:	681a      	ldr	r2, [r3, #0]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801194c:	6879      	ldr	r1, [r7, #4]
 801194e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011950:	440b      	add	r3, r1
 8011952:	1ad3      	subs	r3, r2, r3
 8011954:	3301      	adds	r3, #1
 8011956:	2b00      	cmp	r3, #0
 8011958:	f300 841e 	bgt.w	8012198 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011960:	4b7b      	ldr	r3, [pc, #492]	; (8011b50 <tcp_receive+0x884>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	429a      	cmp	r2, r3
 8011966:	f040 829a 	bne.w	8011e9e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801196a:	4b7a      	ldr	r3, [pc, #488]	; (8011b54 <tcp_receive+0x888>)
 801196c:	891c      	ldrh	r4, [r3, #8]
 801196e:	4b79      	ldr	r3, [pc, #484]	; (8011b54 <tcp_receive+0x888>)
 8011970:	68db      	ldr	r3, [r3, #12]
 8011972:	899b      	ldrh	r3, [r3, #12]
 8011974:	b29b      	uxth	r3, r3
 8011976:	4618      	mov	r0, r3
 8011978:	f7fa fcd0 	bl	800c31c <lwip_htons>
 801197c:	4603      	mov	r3, r0
 801197e:	b2db      	uxtb	r3, r3
 8011980:	f003 0303 	and.w	r3, r3, #3
 8011984:	2b00      	cmp	r3, #0
 8011986:	d001      	beq.n	801198c <tcp_receive+0x6c0>
 8011988:	2301      	movs	r3, #1
 801198a:	e000      	b.n	801198e <tcp_receive+0x6c2>
 801198c:	2300      	movs	r3, #0
 801198e:	4423      	add	r3, r4
 8011990:	b29a      	uxth	r2, r3
 8011992:	4b71      	ldr	r3, [pc, #452]	; (8011b58 <tcp_receive+0x88c>)
 8011994:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801199a:	4b6f      	ldr	r3, [pc, #444]	; (8011b58 <tcp_receive+0x88c>)
 801199c:	881b      	ldrh	r3, [r3, #0]
 801199e:	429a      	cmp	r2, r3
 80119a0:	d275      	bcs.n	8011a8e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80119a2:	4b6c      	ldr	r3, [pc, #432]	; (8011b54 <tcp_receive+0x888>)
 80119a4:	68db      	ldr	r3, [r3, #12]
 80119a6:	899b      	ldrh	r3, [r3, #12]
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7fa fcb6 	bl	800c31c <lwip_htons>
 80119b0:	4603      	mov	r3, r0
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	f003 0301 	and.w	r3, r3, #1
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d01f      	beq.n	80119fc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80119bc:	4b65      	ldr	r3, [pc, #404]	; (8011b54 <tcp_receive+0x888>)
 80119be:	68db      	ldr	r3, [r3, #12]
 80119c0:	899b      	ldrh	r3, [r3, #12]
 80119c2:	b29b      	uxth	r3, r3
 80119c4:	b21b      	sxth	r3, r3
 80119c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80119ca:	b21c      	sxth	r4, r3
 80119cc:	4b61      	ldr	r3, [pc, #388]	; (8011b54 <tcp_receive+0x888>)
 80119ce:	68db      	ldr	r3, [r3, #12]
 80119d0:	899b      	ldrh	r3, [r3, #12]
 80119d2:	b29b      	uxth	r3, r3
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7fa fca1 	bl	800c31c <lwip_htons>
 80119da:	4603      	mov	r3, r0
 80119dc:	b2db      	uxtb	r3, r3
 80119de:	b29b      	uxth	r3, r3
 80119e0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80119e4:	b29b      	uxth	r3, r3
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7fa fc98 	bl	800c31c <lwip_htons>
 80119ec:	4603      	mov	r3, r0
 80119ee:	b21b      	sxth	r3, r3
 80119f0:	4323      	orrs	r3, r4
 80119f2:	b21a      	sxth	r2, r3
 80119f4:	4b57      	ldr	r3, [pc, #348]	; (8011b54 <tcp_receive+0x888>)
 80119f6:	68db      	ldr	r3, [r3, #12]
 80119f8:	b292      	uxth	r2, r2
 80119fa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011a00:	4b54      	ldr	r3, [pc, #336]	; (8011b54 <tcp_receive+0x888>)
 8011a02:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011a04:	4b53      	ldr	r3, [pc, #332]	; (8011b54 <tcp_receive+0x888>)
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	899b      	ldrh	r3, [r3, #12]
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fa fc85 	bl	800c31c <lwip_htons>
 8011a12:	4603      	mov	r3, r0
 8011a14:	b2db      	uxtb	r3, r3
 8011a16:	f003 0302 	and.w	r3, r3, #2
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d005      	beq.n	8011a2a <tcp_receive+0x75e>
            inseg.len -= 1;
 8011a1e:	4b4d      	ldr	r3, [pc, #308]	; (8011b54 <tcp_receive+0x888>)
 8011a20:	891b      	ldrh	r3, [r3, #8]
 8011a22:	3b01      	subs	r3, #1
 8011a24:	b29a      	uxth	r2, r3
 8011a26:	4b4b      	ldr	r3, [pc, #300]	; (8011b54 <tcp_receive+0x888>)
 8011a28:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011a2a:	4b4a      	ldr	r3, [pc, #296]	; (8011b54 <tcp_receive+0x888>)
 8011a2c:	685a      	ldr	r2, [r3, #4]
 8011a2e:	4b49      	ldr	r3, [pc, #292]	; (8011b54 <tcp_receive+0x888>)
 8011a30:	891b      	ldrh	r3, [r3, #8]
 8011a32:	4619      	mov	r1, r3
 8011a34:	4610      	mov	r0, r2
 8011a36:	f7fb fed5 	bl	800d7e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011a3a:	4b46      	ldr	r3, [pc, #280]	; (8011b54 <tcp_receive+0x888>)
 8011a3c:	891c      	ldrh	r4, [r3, #8]
 8011a3e:	4b45      	ldr	r3, [pc, #276]	; (8011b54 <tcp_receive+0x888>)
 8011a40:	68db      	ldr	r3, [r3, #12]
 8011a42:	899b      	ldrh	r3, [r3, #12]
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7fa fc68 	bl	800c31c <lwip_htons>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	b2db      	uxtb	r3, r3
 8011a50:	f003 0303 	and.w	r3, r3, #3
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d001      	beq.n	8011a5c <tcp_receive+0x790>
 8011a58:	2301      	movs	r3, #1
 8011a5a:	e000      	b.n	8011a5e <tcp_receive+0x792>
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	4423      	add	r3, r4
 8011a60:	b29a      	uxth	r2, r3
 8011a62:	4b3d      	ldr	r3, [pc, #244]	; (8011b58 <tcp_receive+0x88c>)
 8011a64:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011a66:	4b3c      	ldr	r3, [pc, #240]	; (8011b58 <tcp_receive+0x88c>)
 8011a68:	881b      	ldrh	r3, [r3, #0]
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	4b38      	ldr	r3, [pc, #224]	; (8011b50 <tcp_receive+0x884>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	441a      	add	r2, r3
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a76:	6879      	ldr	r1, [r7, #4]
 8011a78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a7a:	440b      	add	r3, r1
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d006      	beq.n	8011a8e <tcp_receive+0x7c2>
 8011a80:	4b36      	ldr	r3, [pc, #216]	; (8011b5c <tcp_receive+0x890>)
 8011a82:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011a86:	4936      	ldr	r1, [pc, #216]	; (8011b60 <tcp_receive+0x894>)
 8011a88:	4836      	ldr	r0, [pc, #216]	; (8011b64 <tcp_receive+0x898>)
 8011a8a:	f007 fd6f 	bl	801956c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	f000 80e7 	beq.w	8011c66 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011a98:	4b2e      	ldr	r3, [pc, #184]	; (8011b54 <tcp_receive+0x888>)
 8011a9a:	68db      	ldr	r3, [r3, #12]
 8011a9c:	899b      	ldrh	r3, [r3, #12]
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f7fa fc3b 	bl	800c31c <lwip_htons>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	f003 0301 	and.w	r3, r3, #1
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d010      	beq.n	8011ad4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011ab2:	e00a      	b.n	8011aca <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ab8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011abe:	681a      	ldr	r2, [r3, #0]
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011ac4:	68f8      	ldr	r0, [r7, #12]
 8011ac6:	f7fd fcab 	bl	800f420 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d1f0      	bne.n	8011ab4 <tcp_receive+0x7e8>
 8011ad2:	e0c8      	b.n	8011c66 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011ada:	e052      	b.n	8011b82 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	899b      	ldrh	r3, [r3, #12]
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7fa fc19 	bl	800c31c <lwip_htons>
 8011aea:	4603      	mov	r3, r0
 8011aec:	b2db      	uxtb	r3, r3
 8011aee:	f003 0301 	and.w	r3, r3, #1
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d03d      	beq.n	8011b72 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011af6:	4b17      	ldr	r3, [pc, #92]	; (8011b54 <tcp_receive+0x888>)
 8011af8:	68db      	ldr	r3, [r3, #12]
 8011afa:	899b      	ldrh	r3, [r3, #12]
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7fa fc0c 	bl	800c31c <lwip_htons>
 8011b04:	4603      	mov	r3, r0
 8011b06:	b2db      	uxtb	r3, r3
 8011b08:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d130      	bne.n	8011b72 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011b10:	4b10      	ldr	r3, [pc, #64]	; (8011b54 <tcp_receive+0x888>)
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	899b      	ldrh	r3, [r3, #12]
 8011b16:	b29c      	uxth	r4, r3
 8011b18:	2001      	movs	r0, #1
 8011b1a:	f7fa fbff 	bl	800c31c <lwip_htons>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	461a      	mov	r2, r3
 8011b22:	4b0c      	ldr	r3, [pc, #48]	; (8011b54 <tcp_receive+0x888>)
 8011b24:	68db      	ldr	r3, [r3, #12]
 8011b26:	4322      	orrs	r2, r4
 8011b28:	b292      	uxth	r2, r2
 8011b2a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011b2c:	4b09      	ldr	r3, [pc, #36]	; (8011b54 <tcp_receive+0x888>)
 8011b2e:	891c      	ldrh	r4, [r3, #8]
 8011b30:	4b08      	ldr	r3, [pc, #32]	; (8011b54 <tcp_receive+0x888>)
 8011b32:	68db      	ldr	r3, [r3, #12]
 8011b34:	899b      	ldrh	r3, [r3, #12]
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7fa fbef 	bl	800c31c <lwip_htons>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	b2db      	uxtb	r3, r3
 8011b42:	f003 0303 	and.w	r3, r3, #3
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d00e      	beq.n	8011b68 <tcp_receive+0x89c>
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	e00d      	b.n	8011b6a <tcp_receive+0x89e>
 8011b4e:	bf00      	nop
 8011b50:	20010278 	.word	0x20010278
 8011b54:	20010258 	.word	0x20010258
 8011b58:	20010282 	.word	0x20010282
 8011b5c:	0801c8d0 	.word	0x0801c8d0
 8011b60:	0801cc78 	.word	0x0801cc78
 8011b64:	0801c91c 	.word	0x0801c91c
 8011b68:	2300      	movs	r3, #0
 8011b6a:	4423      	add	r3, r4
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	4b98      	ldr	r3, [pc, #608]	; (8011dd0 <tcp_receive+0xb04>)
 8011b70:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b74:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011b7c:	6938      	ldr	r0, [r7, #16]
 8011b7e:	f7fd fc4f 	bl	800f420 <tcp_seg_free>
            while (next &&
 8011b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d00e      	beq.n	8011ba6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011b88:	4b91      	ldr	r3, [pc, #580]	; (8011dd0 <tcp_receive+0xb04>)
 8011b8a:	881b      	ldrh	r3, [r3, #0]
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	4b91      	ldr	r3, [pc, #580]	; (8011dd4 <tcp_receive+0xb08>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	441a      	add	r2, r3
 8011b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	685b      	ldr	r3, [r3, #4]
 8011b9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b9c:	8909      	ldrh	r1, [r1, #8]
 8011b9e:	440b      	add	r3, r1
 8011ba0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	da9a      	bge.n	8011adc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011ba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d059      	beq.n	8011c60 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011bac:	4b88      	ldr	r3, [pc, #544]	; (8011dd0 <tcp_receive+0xb04>)
 8011bae:	881b      	ldrh	r3, [r3, #0]
 8011bb0:	461a      	mov	r2, r3
 8011bb2:	4b88      	ldr	r3, [pc, #544]	; (8011dd4 <tcp_receive+0xb08>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	441a      	add	r2, r3
 8011bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	dd4d      	ble.n	8011c60 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bc6:	68db      	ldr	r3, [r3, #12]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	b29a      	uxth	r2, r3
 8011bcc:	4b81      	ldr	r3, [pc, #516]	; (8011dd4 <tcp_receive+0xb08>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	b29b      	uxth	r3, r3
 8011bd2:	1ad3      	subs	r3, r2, r3
 8011bd4:	b29a      	uxth	r2, r3
 8011bd6:	4b80      	ldr	r3, [pc, #512]	; (8011dd8 <tcp_receive+0xb0c>)
 8011bd8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011bda:	4b7f      	ldr	r3, [pc, #508]	; (8011dd8 <tcp_receive+0xb0c>)
 8011bdc:	68db      	ldr	r3, [r3, #12]
 8011bde:	899b      	ldrh	r3, [r3, #12]
 8011be0:	b29b      	uxth	r3, r3
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7fa fb9a 	bl	800c31c <lwip_htons>
 8011be8:	4603      	mov	r3, r0
 8011bea:	b2db      	uxtb	r3, r3
 8011bec:	f003 0302 	and.w	r3, r3, #2
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d005      	beq.n	8011c00 <tcp_receive+0x934>
                inseg.len -= 1;
 8011bf4:	4b78      	ldr	r3, [pc, #480]	; (8011dd8 <tcp_receive+0xb0c>)
 8011bf6:	891b      	ldrh	r3, [r3, #8]
 8011bf8:	3b01      	subs	r3, #1
 8011bfa:	b29a      	uxth	r2, r3
 8011bfc:	4b76      	ldr	r3, [pc, #472]	; (8011dd8 <tcp_receive+0xb0c>)
 8011bfe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011c00:	4b75      	ldr	r3, [pc, #468]	; (8011dd8 <tcp_receive+0xb0c>)
 8011c02:	685a      	ldr	r2, [r3, #4]
 8011c04:	4b74      	ldr	r3, [pc, #464]	; (8011dd8 <tcp_receive+0xb0c>)
 8011c06:	891b      	ldrh	r3, [r3, #8]
 8011c08:	4619      	mov	r1, r3
 8011c0a:	4610      	mov	r0, r2
 8011c0c:	f7fb fdea 	bl	800d7e4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011c10:	4b71      	ldr	r3, [pc, #452]	; (8011dd8 <tcp_receive+0xb0c>)
 8011c12:	891c      	ldrh	r4, [r3, #8]
 8011c14:	4b70      	ldr	r3, [pc, #448]	; (8011dd8 <tcp_receive+0xb0c>)
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	899b      	ldrh	r3, [r3, #12]
 8011c1a:	b29b      	uxth	r3, r3
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f7fa fb7d 	bl	800c31c <lwip_htons>
 8011c22:	4603      	mov	r3, r0
 8011c24:	b2db      	uxtb	r3, r3
 8011c26:	f003 0303 	and.w	r3, r3, #3
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d001      	beq.n	8011c32 <tcp_receive+0x966>
 8011c2e:	2301      	movs	r3, #1
 8011c30:	e000      	b.n	8011c34 <tcp_receive+0x968>
 8011c32:	2300      	movs	r3, #0
 8011c34:	4423      	add	r3, r4
 8011c36:	b29a      	uxth	r2, r3
 8011c38:	4b65      	ldr	r3, [pc, #404]	; (8011dd0 <tcp_receive+0xb04>)
 8011c3a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011c3c:	4b64      	ldr	r3, [pc, #400]	; (8011dd0 <tcp_receive+0xb04>)
 8011c3e:	881b      	ldrh	r3, [r3, #0]
 8011c40:	461a      	mov	r2, r3
 8011c42:	4b64      	ldr	r3, [pc, #400]	; (8011dd4 <tcp_receive+0xb08>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	441a      	add	r2, r3
 8011c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c4a:	68db      	ldr	r3, [r3, #12]
 8011c4c:	685b      	ldr	r3, [r3, #4]
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d006      	beq.n	8011c60 <tcp_receive+0x994>
 8011c52:	4b62      	ldr	r3, [pc, #392]	; (8011ddc <tcp_receive+0xb10>)
 8011c54:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8011c58:	4961      	ldr	r1, [pc, #388]	; (8011de0 <tcp_receive+0xb14>)
 8011c5a:	4862      	ldr	r0, [pc, #392]	; (8011de4 <tcp_receive+0xb18>)
 8011c5c:	f007 fc86 	bl	801956c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c64:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011c66:	4b5a      	ldr	r3, [pc, #360]	; (8011dd0 <tcp_receive+0xb04>)
 8011c68:	881b      	ldrh	r3, [r3, #0]
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	4b59      	ldr	r3, [pc, #356]	; (8011dd4 <tcp_receive+0xb08>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	441a      	add	r2, r3
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c7a:	4b55      	ldr	r3, [pc, #340]	; (8011dd0 <tcp_receive+0xb04>)
 8011c7c:	881b      	ldrh	r3, [r3, #0]
 8011c7e:	429a      	cmp	r2, r3
 8011c80:	d206      	bcs.n	8011c90 <tcp_receive+0x9c4>
 8011c82:	4b56      	ldr	r3, [pc, #344]	; (8011ddc <tcp_receive+0xb10>)
 8011c84:	f240 6207 	movw	r2, #1543	; 0x607
 8011c88:	4957      	ldr	r1, [pc, #348]	; (8011de8 <tcp_receive+0xb1c>)
 8011c8a:	4856      	ldr	r0, [pc, #344]	; (8011de4 <tcp_receive+0xb18>)
 8011c8c:	f007 fc6e 	bl	801956c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c94:	4b4e      	ldr	r3, [pc, #312]	; (8011dd0 <tcp_receive+0xb04>)
 8011c96:	881b      	ldrh	r3, [r3, #0]
 8011c98:	1ad3      	subs	r3, r2, r3
 8011c9a:	b29a      	uxth	r2, r3
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	f7fc fe9b 	bl	800e9dc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011ca6:	4b4c      	ldr	r3, [pc, #304]	; (8011dd8 <tcp_receive+0xb0c>)
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	891b      	ldrh	r3, [r3, #8]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d006      	beq.n	8011cbe <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011cb0:	4b49      	ldr	r3, [pc, #292]	; (8011dd8 <tcp_receive+0xb0c>)
 8011cb2:	685b      	ldr	r3, [r3, #4]
 8011cb4:	4a4d      	ldr	r2, [pc, #308]	; (8011dec <tcp_receive+0xb20>)
 8011cb6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011cb8:	4b47      	ldr	r3, [pc, #284]	; (8011dd8 <tcp_receive+0xb0c>)
 8011cba:	2200      	movs	r2, #0
 8011cbc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011cbe:	4b46      	ldr	r3, [pc, #280]	; (8011dd8 <tcp_receive+0xb0c>)
 8011cc0:	68db      	ldr	r3, [r3, #12]
 8011cc2:	899b      	ldrh	r3, [r3, #12]
 8011cc4:	b29b      	uxth	r3, r3
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7fa fb28 	bl	800c31c <lwip_htons>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	b2db      	uxtb	r3, r3
 8011cd0:	f003 0301 	and.w	r3, r3, #1
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	f000 80b8 	beq.w	8011e4a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011cda:	4b45      	ldr	r3, [pc, #276]	; (8011df0 <tcp_receive+0xb24>)
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	f043 0320 	orr.w	r3, r3, #32
 8011ce2:	b2da      	uxtb	r2, r3
 8011ce4:	4b42      	ldr	r3, [pc, #264]	; (8011df0 <tcp_receive+0xb24>)
 8011ce6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011ce8:	e0af      	b.n	8011e4a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cee:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011cf4:	68db      	ldr	r3, [r3, #12]
 8011cf6:	685b      	ldr	r3, [r3, #4]
 8011cf8:	4a36      	ldr	r2, [pc, #216]	; (8011dd4 <tcp_receive+0xb08>)
 8011cfa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	891b      	ldrh	r3, [r3, #8]
 8011d00:	461c      	mov	r4, r3
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	68db      	ldr	r3, [r3, #12]
 8011d06:	899b      	ldrh	r3, [r3, #12]
 8011d08:	b29b      	uxth	r3, r3
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	f7fa fb06 	bl	800c31c <lwip_htons>
 8011d10:	4603      	mov	r3, r0
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	f003 0303 	and.w	r3, r3, #3
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d001      	beq.n	8011d20 <tcp_receive+0xa54>
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	e000      	b.n	8011d22 <tcp_receive+0xa56>
 8011d20:	2300      	movs	r3, #0
 8011d22:	191a      	adds	r2, r3, r4
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d28:	441a      	add	r2, r3
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d32:	461c      	mov	r4, r3
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	891b      	ldrh	r3, [r3, #8]
 8011d38:	461d      	mov	r5, r3
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	68db      	ldr	r3, [r3, #12]
 8011d3e:	899b      	ldrh	r3, [r3, #12]
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	4618      	mov	r0, r3
 8011d44:	f7fa faea 	bl	800c31c <lwip_htons>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	b2db      	uxtb	r3, r3
 8011d4c:	f003 0303 	and.w	r3, r3, #3
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d001      	beq.n	8011d58 <tcp_receive+0xa8c>
 8011d54:	2301      	movs	r3, #1
 8011d56:	e000      	b.n	8011d5a <tcp_receive+0xa8e>
 8011d58:	2300      	movs	r3, #0
 8011d5a:	442b      	add	r3, r5
 8011d5c:	429c      	cmp	r4, r3
 8011d5e:	d206      	bcs.n	8011d6e <tcp_receive+0xaa2>
 8011d60:	4b1e      	ldr	r3, [pc, #120]	; (8011ddc <tcp_receive+0xb10>)
 8011d62:	f240 622c 	movw	r2, #1580	; 0x62c
 8011d66:	4923      	ldr	r1, [pc, #140]	; (8011df4 <tcp_receive+0xb28>)
 8011d68:	481e      	ldr	r0, [pc, #120]	; (8011de4 <tcp_receive+0xb18>)
 8011d6a:	f007 fbff 	bl	801956c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	891b      	ldrh	r3, [r3, #8]
 8011d72:	461c      	mov	r4, r3
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	68db      	ldr	r3, [r3, #12]
 8011d78:	899b      	ldrh	r3, [r3, #12]
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7fa facd 	bl	800c31c <lwip_htons>
 8011d82:	4603      	mov	r3, r0
 8011d84:	b2db      	uxtb	r3, r3
 8011d86:	f003 0303 	and.w	r3, r3, #3
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d001      	beq.n	8011d92 <tcp_receive+0xac6>
 8011d8e:	2301      	movs	r3, #1
 8011d90:	e000      	b.n	8011d94 <tcp_receive+0xac8>
 8011d92:	2300      	movs	r3, #0
 8011d94:	1919      	adds	r1, r3, r4
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011d9a:	b28b      	uxth	r3, r1
 8011d9c:	1ad3      	subs	r3, r2, r3
 8011d9e:	b29a      	uxth	r2, r3
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f7fc fe19 	bl	800e9dc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	891b      	ldrh	r3, [r3, #8]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d028      	beq.n	8011e06 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011db4:	4b0d      	ldr	r3, [pc, #52]	; (8011dec <tcp_receive+0xb20>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d01d      	beq.n	8011df8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011dbc:	4b0b      	ldr	r3, [pc, #44]	; (8011dec <tcp_receive+0xb20>)
 8011dbe:	681a      	ldr	r2, [r3, #0]
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	4610      	mov	r0, r2
 8011dc8:	f7fb ff60 	bl	800dc8c <pbuf_cat>
 8011dcc:	e018      	b.n	8011e00 <tcp_receive+0xb34>
 8011dce:	bf00      	nop
 8011dd0:	20010282 	.word	0x20010282
 8011dd4:	20010278 	.word	0x20010278
 8011dd8:	20010258 	.word	0x20010258
 8011ddc:	0801c8d0 	.word	0x0801c8d0
 8011de0:	0801ccb0 	.word	0x0801ccb0
 8011de4:	0801c91c 	.word	0x0801c91c
 8011de8:	0801ccec 	.word	0x0801ccec
 8011dec:	20010288 	.word	0x20010288
 8011df0:	20010285 	.word	0x20010285
 8011df4:	0801cd0c 	.word	0x0801cd0c
            } else {
              recv_data = cseg->p;
 8011df8:	68bb      	ldr	r3, [r7, #8]
 8011dfa:	685b      	ldr	r3, [r3, #4]
 8011dfc:	4a70      	ldr	r2, [pc, #448]	; (8011fc0 <tcp_receive+0xcf4>)
 8011dfe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	2200      	movs	r2, #0
 8011e04:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	68db      	ldr	r3, [r3, #12]
 8011e0a:	899b      	ldrh	r3, [r3, #12]
 8011e0c:	b29b      	uxth	r3, r3
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f7fa fa84 	bl	800c31c <lwip_htons>
 8011e14:	4603      	mov	r3, r0
 8011e16:	b2db      	uxtb	r3, r3
 8011e18:	f003 0301 	and.w	r3, r3, #1
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d00d      	beq.n	8011e3c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011e20:	4b68      	ldr	r3, [pc, #416]	; (8011fc4 <tcp_receive+0xcf8>)
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	f043 0320 	orr.w	r3, r3, #32
 8011e28:	b2da      	uxtb	r2, r3
 8011e2a:	4b66      	ldr	r3, [pc, #408]	; (8011fc4 <tcp_receive+0xcf8>)
 8011e2c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	7d1b      	ldrb	r3, [r3, #20]
 8011e32:	2b04      	cmp	r3, #4
 8011e34:	d102      	bne.n	8011e3c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	2207      	movs	r2, #7
 8011e3a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011e3c:	68bb      	ldr	r3, [r7, #8]
 8011e3e:	681a      	ldr	r2, [r3, #0]
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011e44:	68b8      	ldr	r0, [r7, #8]
 8011e46:	f7fd faeb 	bl	800f420 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d008      	beq.n	8011e64 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e56:	68db      	ldr	r3, [r3, #12]
 8011e58:	685a      	ldr	r2, [r3, #4]
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	f43f af43 	beq.w	8011cea <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	8b5b      	ldrh	r3, [r3, #26]
 8011e68:	f003 0301 	and.w	r3, r3, #1
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d00e      	beq.n	8011e8e <tcp_receive+0xbc2>
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	8b5b      	ldrh	r3, [r3, #26]
 8011e74:	f023 0301 	bic.w	r3, r3, #1
 8011e78:	b29a      	uxth	r2, r3
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	835a      	strh	r2, [r3, #26]
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	8b5b      	ldrh	r3, [r3, #26]
 8011e82:	f043 0302 	orr.w	r3, r3, #2
 8011e86:	b29a      	uxth	r2, r3
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011e8c:	e188      	b.n	80121a0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	8b5b      	ldrh	r3, [r3, #26]
 8011e92:	f043 0301 	orr.w	r3, r3, #1
 8011e96:	b29a      	uxth	r2, r3
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011e9c:	e180      	b.n	80121a0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d106      	bne.n	8011eb4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011ea6:	4848      	ldr	r0, [pc, #288]	; (8011fc8 <tcp_receive+0xcfc>)
 8011ea8:	f7fd faf0 	bl	800f48c <tcp_seg_copy>
 8011eac:	4602      	mov	r2, r0
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	675a      	str	r2, [r3, #116]	; 0x74
 8011eb2:	e16d      	b.n	8012190 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ebe:	e157      	b.n	8012170 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec2:	68db      	ldr	r3, [r3, #12]
 8011ec4:	685a      	ldr	r2, [r3, #4]
 8011ec6:	4b41      	ldr	r3, [pc, #260]	; (8011fcc <tcp_receive+0xd00>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	429a      	cmp	r2, r3
 8011ecc:	d11d      	bne.n	8011f0a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011ece:	4b3e      	ldr	r3, [pc, #248]	; (8011fc8 <tcp_receive+0xcfc>)
 8011ed0:	891a      	ldrh	r2, [r3, #8]
 8011ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed4:	891b      	ldrh	r3, [r3, #8]
 8011ed6:	429a      	cmp	r2, r3
 8011ed8:	f240 814f 	bls.w	801217a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011edc:	483a      	ldr	r0, [pc, #232]	; (8011fc8 <tcp_receive+0xcfc>)
 8011ede:	f7fd fad5 	bl	800f48c <tcp_seg_copy>
 8011ee2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	f000 8149 	beq.w	801217e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d003      	beq.n	8011efa <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ef4:	697a      	ldr	r2, [r7, #20]
 8011ef6:	601a      	str	r2, [r3, #0]
 8011ef8:	e002      	b.n	8011f00 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	697a      	ldr	r2, [r7, #20]
 8011efe:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011f00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011f02:	6978      	ldr	r0, [r7, #20]
 8011f04:	f7ff f8de 	bl	80110c4 <tcp_oos_insert_segment>
                }
                break;
 8011f08:	e139      	b.n	801217e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d117      	bne.n	8011f40 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011f10:	4b2e      	ldr	r3, [pc, #184]	; (8011fcc <tcp_receive+0xd00>)
 8011f12:	681a      	ldr	r2, [r3, #0]
 8011f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f16:	68db      	ldr	r3, [r3, #12]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	da57      	bge.n	8011fd0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011f20:	4829      	ldr	r0, [pc, #164]	; (8011fc8 <tcp_receive+0xcfc>)
 8011f22:	f7fd fab3 	bl	800f48c <tcp_seg_copy>
 8011f26:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011f28:	69bb      	ldr	r3, [r7, #24]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f000 8129 	beq.w	8012182 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	69ba      	ldr	r2, [r7, #24]
 8011f34:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011f36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011f38:	69b8      	ldr	r0, [r7, #24]
 8011f3a:	f7ff f8c3 	bl	80110c4 <tcp_oos_insert_segment>
                  }
                  break;
 8011f3e:	e120      	b.n	8012182 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011f40:	4b22      	ldr	r3, [pc, #136]	; (8011fcc <tcp_receive+0xd00>)
 8011f42:	681a      	ldr	r2, [r3, #0]
 8011f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	1ad3      	subs	r3, r2, r3
 8011f4c:	3b01      	subs	r3, #1
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	db3e      	blt.n	8011fd0 <tcp_receive+0xd04>
 8011f52:	4b1e      	ldr	r3, [pc, #120]	; (8011fcc <tcp_receive+0xd00>)
 8011f54:	681a      	ldr	r2, [r3, #0]
 8011f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f58:	68db      	ldr	r3, [r3, #12]
 8011f5a:	685b      	ldr	r3, [r3, #4]
 8011f5c:	1ad3      	subs	r3, r2, r3
 8011f5e:	3301      	adds	r3, #1
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	dc35      	bgt.n	8011fd0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011f64:	4818      	ldr	r0, [pc, #96]	; (8011fc8 <tcp_receive+0xcfc>)
 8011f66:	f7fd fa91 	bl	800f48c <tcp_seg_copy>
 8011f6a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011f6c:	69fb      	ldr	r3, [r7, #28]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	f000 8109 	beq.w	8012186 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f76:	68db      	ldr	r3, [r3, #12]
 8011f78:	685b      	ldr	r3, [r3, #4]
 8011f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f7c:	8912      	ldrh	r2, [r2, #8]
 8011f7e:	441a      	add	r2, r3
 8011f80:	4b12      	ldr	r3, [pc, #72]	; (8011fcc <tcp_receive+0xd00>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	1ad3      	subs	r3, r2, r3
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	dd12      	ble.n	8011fb0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011f8a:	4b10      	ldr	r3, [pc, #64]	; (8011fcc <tcp_receive+0xd00>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	b29a      	uxth	r2, r3
 8011f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f92:	68db      	ldr	r3, [r3, #12]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	b29b      	uxth	r3, r3
 8011f98:	1ad3      	subs	r3, r2, r3
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f9e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fa2:	685a      	ldr	r2, [r3, #4]
 8011fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fa6:	891b      	ldrh	r3, [r3, #8]
 8011fa8:	4619      	mov	r1, r3
 8011faa:	4610      	mov	r0, r2
 8011fac:	f7fb fc1a 	bl	800d7e4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fb2:	69fa      	ldr	r2, [r7, #28]
 8011fb4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011fb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011fb8:	69f8      	ldr	r0, [r7, #28]
 8011fba:	f7ff f883 	bl	80110c4 <tcp_oos_insert_segment>
                  }
                  break;
 8011fbe:	e0e2      	b.n	8012186 <tcp_receive+0xeba>
 8011fc0:	20010288 	.word	0x20010288
 8011fc4:	20010285 	.word	0x20010285
 8011fc8:	20010258 	.word	0x20010258
 8011fcc:	20010278 	.word	0x20010278
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	f040 80c6 	bne.w	801216a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011fde:	4b80      	ldr	r3, [pc, #512]	; (80121e0 <tcp_receive+0xf14>)
 8011fe0:	681a      	ldr	r2, [r3, #0]
 8011fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fe4:	68db      	ldr	r3, [r3, #12]
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	f340 80bd 	ble.w	801216a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff2:	68db      	ldr	r3, [r3, #12]
 8011ff4:	899b      	ldrh	r3, [r3, #12]
 8011ff6:	b29b      	uxth	r3, r3
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7fa f98f 	bl	800c31c <lwip_htons>
 8011ffe:	4603      	mov	r3, r0
 8012000:	b2db      	uxtb	r3, r3
 8012002:	f003 0301 	and.w	r3, r3, #1
 8012006:	2b00      	cmp	r3, #0
 8012008:	f040 80bf 	bne.w	801218a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801200c:	4875      	ldr	r0, [pc, #468]	; (80121e4 <tcp_receive+0xf18>)
 801200e:	f7fd fa3d 	bl	800f48c <tcp_seg_copy>
 8012012:	4602      	mov	r2, r0
 8012014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012016:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	f000 80b6 	beq.w	801218e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801202a:	8912      	ldrh	r2, [r2, #8]
 801202c:	441a      	add	r2, r3
 801202e:	4b6c      	ldr	r3, [pc, #432]	; (80121e0 <tcp_receive+0xf14>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	1ad3      	subs	r3, r2, r3
 8012034:	2b00      	cmp	r3, #0
 8012036:	dd12      	ble.n	801205e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012038:	4b69      	ldr	r3, [pc, #420]	; (80121e0 <tcp_receive+0xf14>)
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	b29a      	uxth	r2, r3
 801203e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012040:	68db      	ldr	r3, [r3, #12]
 8012042:	685b      	ldr	r3, [r3, #4]
 8012044:	b29b      	uxth	r3, r3
 8012046:	1ad3      	subs	r3, r2, r3
 8012048:	b29a      	uxth	r2, r3
 801204a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801204c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801204e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012050:	685a      	ldr	r2, [r3, #4]
 8012052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012054:	891b      	ldrh	r3, [r3, #8]
 8012056:	4619      	mov	r1, r3
 8012058:	4610      	mov	r0, r2
 801205a:	f7fb fbc3 	bl	800d7e4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801205e:	4b62      	ldr	r3, [pc, #392]	; (80121e8 <tcp_receive+0xf1c>)
 8012060:	881b      	ldrh	r3, [r3, #0]
 8012062:	461a      	mov	r2, r3
 8012064:	4b5e      	ldr	r3, [pc, #376]	; (80121e0 <tcp_receive+0xf14>)
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	441a      	add	r2, r3
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801206e:	6879      	ldr	r1, [r7, #4]
 8012070:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012072:	440b      	add	r3, r1
 8012074:	1ad3      	subs	r3, r2, r3
 8012076:	2b00      	cmp	r3, #0
 8012078:	f340 8089 	ble.w	801218e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801207c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	68db      	ldr	r3, [r3, #12]
 8012082:	899b      	ldrh	r3, [r3, #12]
 8012084:	b29b      	uxth	r3, r3
 8012086:	4618      	mov	r0, r3
 8012088:	f7fa f948 	bl	800c31c <lwip_htons>
 801208c:	4603      	mov	r3, r0
 801208e:	b2db      	uxtb	r3, r3
 8012090:	f003 0301 	and.w	r3, r3, #1
 8012094:	2b00      	cmp	r3, #0
 8012096:	d022      	beq.n	80120de <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	68db      	ldr	r3, [r3, #12]
 801209e:	899b      	ldrh	r3, [r3, #12]
 80120a0:	b29b      	uxth	r3, r3
 80120a2:	b21b      	sxth	r3, r3
 80120a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80120a8:	b21c      	sxth	r4, r3
 80120aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	68db      	ldr	r3, [r3, #12]
 80120b0:	899b      	ldrh	r3, [r3, #12]
 80120b2:	b29b      	uxth	r3, r3
 80120b4:	4618      	mov	r0, r3
 80120b6:	f7fa f931 	bl	800c31c <lwip_htons>
 80120ba:	4603      	mov	r3, r0
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	b29b      	uxth	r3, r3
 80120c0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80120c4:	b29b      	uxth	r3, r3
 80120c6:	4618      	mov	r0, r3
 80120c8:	f7fa f928 	bl	800c31c <lwip_htons>
 80120cc:	4603      	mov	r3, r0
 80120ce:	b21b      	sxth	r3, r3
 80120d0:	4323      	orrs	r3, r4
 80120d2:	b21a      	sxth	r2, r3
 80120d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	68db      	ldr	r3, [r3, #12]
 80120da:	b292      	uxth	r2, r2
 80120dc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120e2:	b29a      	uxth	r2, r3
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80120e8:	4413      	add	r3, r2
 80120ea:	b299      	uxth	r1, r3
 80120ec:	4b3c      	ldr	r3, [pc, #240]	; (80121e0 <tcp_receive+0xf14>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	b29a      	uxth	r2, r3
 80120f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	1a8a      	subs	r2, r1, r2
 80120f8:	b292      	uxth	r2, r2
 80120fa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80120fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	685a      	ldr	r2, [r3, #4]
 8012102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	891b      	ldrh	r3, [r3, #8]
 8012108:	4619      	mov	r1, r3
 801210a:	4610      	mov	r0, r2
 801210c:	f7fb fb6a 	bl	800d7e4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	891c      	ldrh	r4, [r3, #8]
 8012116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	68db      	ldr	r3, [r3, #12]
 801211c:	899b      	ldrh	r3, [r3, #12]
 801211e:	b29b      	uxth	r3, r3
 8012120:	4618      	mov	r0, r3
 8012122:	f7fa f8fb 	bl	800c31c <lwip_htons>
 8012126:	4603      	mov	r3, r0
 8012128:	b2db      	uxtb	r3, r3
 801212a:	f003 0303 	and.w	r3, r3, #3
 801212e:	2b00      	cmp	r3, #0
 8012130:	d001      	beq.n	8012136 <tcp_receive+0xe6a>
 8012132:	2301      	movs	r3, #1
 8012134:	e000      	b.n	8012138 <tcp_receive+0xe6c>
 8012136:	2300      	movs	r3, #0
 8012138:	4423      	add	r3, r4
 801213a:	b29a      	uxth	r2, r3
 801213c:	4b2a      	ldr	r3, [pc, #168]	; (80121e8 <tcp_receive+0xf1c>)
 801213e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012140:	4b29      	ldr	r3, [pc, #164]	; (80121e8 <tcp_receive+0xf1c>)
 8012142:	881b      	ldrh	r3, [r3, #0]
 8012144:	461a      	mov	r2, r3
 8012146:	4b26      	ldr	r3, [pc, #152]	; (80121e0 <tcp_receive+0xf14>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	441a      	add	r2, r3
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012150:	6879      	ldr	r1, [r7, #4]
 8012152:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012154:	440b      	add	r3, r1
 8012156:	429a      	cmp	r2, r3
 8012158:	d019      	beq.n	801218e <tcp_receive+0xec2>
 801215a:	4b24      	ldr	r3, [pc, #144]	; (80121ec <tcp_receive+0xf20>)
 801215c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012160:	4923      	ldr	r1, [pc, #140]	; (80121f0 <tcp_receive+0xf24>)
 8012162:	4824      	ldr	r0, [pc, #144]	; (80121f4 <tcp_receive+0xf28>)
 8012164:	f007 fa02 	bl	801956c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012168:	e011      	b.n	801218e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801216a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012172:	2b00      	cmp	r3, #0
 8012174:	f47f aea4 	bne.w	8011ec0 <tcp_receive+0xbf4>
 8012178:	e00a      	b.n	8012190 <tcp_receive+0xec4>
                break;
 801217a:	bf00      	nop
 801217c:	e008      	b.n	8012190 <tcp_receive+0xec4>
                break;
 801217e:	bf00      	nop
 8012180:	e006      	b.n	8012190 <tcp_receive+0xec4>
                  break;
 8012182:	bf00      	nop
 8012184:	e004      	b.n	8012190 <tcp_receive+0xec4>
                  break;
 8012186:	bf00      	nop
 8012188:	e002      	b.n	8012190 <tcp_receive+0xec4>
                  break;
 801218a:	bf00      	nop
 801218c:	e000      	b.n	8012190 <tcp_receive+0xec4>
                break;
 801218e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	f001 fe9b 	bl	8013ecc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012196:	e003      	b.n	80121a0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f001 fe97 	bl	8013ecc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801219e:	e01a      	b.n	80121d6 <tcp_receive+0xf0a>
 80121a0:	e019      	b.n	80121d6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80121a2:	4b0f      	ldr	r3, [pc, #60]	; (80121e0 <tcp_receive+0xf14>)
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121aa:	1ad3      	subs	r3, r2, r3
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	db0a      	blt.n	80121c6 <tcp_receive+0xefa>
 80121b0:	4b0b      	ldr	r3, [pc, #44]	; (80121e0 <tcp_receive+0xf14>)
 80121b2:	681a      	ldr	r2, [r3, #0]
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b8:	6879      	ldr	r1, [r7, #4]
 80121ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80121bc:	440b      	add	r3, r1
 80121be:	1ad3      	subs	r3, r2, r3
 80121c0:	3301      	adds	r3, #1
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	dd07      	ble.n	80121d6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	8b5b      	ldrh	r3, [r3, #26]
 80121ca:	f043 0302 	orr.w	r3, r3, #2
 80121ce:	b29a      	uxth	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80121d4:	e7ff      	b.n	80121d6 <tcp_receive+0xf0a>
 80121d6:	bf00      	nop
 80121d8:	3750      	adds	r7, #80	; 0x50
 80121da:	46bd      	mov	sp, r7
 80121dc:	bdb0      	pop	{r4, r5, r7, pc}
 80121de:	bf00      	nop
 80121e0:	20010278 	.word	0x20010278
 80121e4:	20010258 	.word	0x20010258
 80121e8:	20010282 	.word	0x20010282
 80121ec:	0801c8d0 	.word	0x0801c8d0
 80121f0:	0801cc78 	.word	0x0801cc78
 80121f4:	0801c91c 	.word	0x0801c91c

080121f8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80121f8:	b480      	push	{r7}
 80121fa:	b083      	sub	sp, #12
 80121fc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80121fe:	4b15      	ldr	r3, [pc, #84]	; (8012254 <tcp_get_next_optbyte+0x5c>)
 8012200:	881b      	ldrh	r3, [r3, #0]
 8012202:	1c5a      	adds	r2, r3, #1
 8012204:	b291      	uxth	r1, r2
 8012206:	4a13      	ldr	r2, [pc, #76]	; (8012254 <tcp_get_next_optbyte+0x5c>)
 8012208:	8011      	strh	r1, [r2, #0]
 801220a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801220c:	4b12      	ldr	r3, [pc, #72]	; (8012258 <tcp_get_next_optbyte+0x60>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d004      	beq.n	801221e <tcp_get_next_optbyte+0x26>
 8012214:	4b11      	ldr	r3, [pc, #68]	; (801225c <tcp_get_next_optbyte+0x64>)
 8012216:	881b      	ldrh	r3, [r3, #0]
 8012218:	88fa      	ldrh	r2, [r7, #6]
 801221a:	429a      	cmp	r2, r3
 801221c:	d208      	bcs.n	8012230 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801221e:	4b10      	ldr	r3, [pc, #64]	; (8012260 <tcp_get_next_optbyte+0x68>)
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	3314      	adds	r3, #20
 8012224:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012226:	88fb      	ldrh	r3, [r7, #6]
 8012228:	683a      	ldr	r2, [r7, #0]
 801222a:	4413      	add	r3, r2
 801222c:	781b      	ldrb	r3, [r3, #0]
 801222e:	e00b      	b.n	8012248 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012230:	88fb      	ldrh	r3, [r7, #6]
 8012232:	b2da      	uxtb	r2, r3
 8012234:	4b09      	ldr	r3, [pc, #36]	; (801225c <tcp_get_next_optbyte+0x64>)
 8012236:	881b      	ldrh	r3, [r3, #0]
 8012238:	b2db      	uxtb	r3, r3
 801223a:	1ad3      	subs	r3, r2, r3
 801223c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801223e:	4b06      	ldr	r3, [pc, #24]	; (8012258 <tcp_get_next_optbyte+0x60>)
 8012240:	681a      	ldr	r2, [r3, #0]
 8012242:	797b      	ldrb	r3, [r7, #5]
 8012244:	4413      	add	r3, r2
 8012246:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012248:	4618      	mov	r0, r3
 801224a:	370c      	adds	r7, #12
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr
 8012254:	20010274 	.word	0x20010274
 8012258:	20010270 	.word	0x20010270
 801225c:	2001026e 	.word	0x2001026e
 8012260:	20010268 	.word	0x20010268

08012264 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d106      	bne.n	8012280 <tcp_parseopt+0x1c>
 8012272:	4b31      	ldr	r3, [pc, #196]	; (8012338 <tcp_parseopt+0xd4>)
 8012274:	f240 727d 	movw	r2, #1917	; 0x77d
 8012278:	4930      	ldr	r1, [pc, #192]	; (801233c <tcp_parseopt+0xd8>)
 801227a:	4831      	ldr	r0, [pc, #196]	; (8012340 <tcp_parseopt+0xdc>)
 801227c:	f007 f976 	bl	801956c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012280:	4b30      	ldr	r3, [pc, #192]	; (8012344 <tcp_parseopt+0xe0>)
 8012282:	881b      	ldrh	r3, [r3, #0]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d053      	beq.n	8012330 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012288:	4b2f      	ldr	r3, [pc, #188]	; (8012348 <tcp_parseopt+0xe4>)
 801228a:	2200      	movs	r2, #0
 801228c:	801a      	strh	r2, [r3, #0]
 801228e:	e043      	b.n	8012318 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8012290:	f7ff ffb2 	bl	80121f8 <tcp_get_next_optbyte>
 8012294:	4603      	mov	r3, r0
 8012296:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012298:	7bfb      	ldrb	r3, [r7, #15]
 801229a:	2b01      	cmp	r3, #1
 801229c:	d03c      	beq.n	8012318 <tcp_parseopt+0xb4>
 801229e:	2b02      	cmp	r3, #2
 80122a0:	d002      	beq.n	80122a8 <tcp_parseopt+0x44>
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d03f      	beq.n	8012326 <tcp_parseopt+0xc2>
 80122a6:	e026      	b.n	80122f6 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80122a8:	f7ff ffa6 	bl	80121f8 <tcp_get_next_optbyte>
 80122ac:	4603      	mov	r3, r0
 80122ae:	2b04      	cmp	r3, #4
 80122b0:	d13b      	bne.n	801232a <tcp_parseopt+0xc6>
 80122b2:	4b25      	ldr	r3, [pc, #148]	; (8012348 <tcp_parseopt+0xe4>)
 80122b4:	881b      	ldrh	r3, [r3, #0]
 80122b6:	3302      	adds	r3, #2
 80122b8:	4a22      	ldr	r2, [pc, #136]	; (8012344 <tcp_parseopt+0xe0>)
 80122ba:	8812      	ldrh	r2, [r2, #0]
 80122bc:	4293      	cmp	r3, r2
 80122be:	dc34      	bgt.n	801232a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80122c0:	f7ff ff9a 	bl	80121f8 <tcp_get_next_optbyte>
 80122c4:	4603      	mov	r3, r0
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	021b      	lsls	r3, r3, #8
 80122ca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80122cc:	f7ff ff94 	bl	80121f8 <tcp_get_next_optbyte>
 80122d0:	4603      	mov	r3, r0
 80122d2:	b29a      	uxth	r2, r3
 80122d4:	89bb      	ldrh	r3, [r7, #12]
 80122d6:	4313      	orrs	r3, r2
 80122d8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80122da:	89bb      	ldrh	r3, [r7, #12]
 80122dc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80122e0:	d804      	bhi.n	80122ec <tcp_parseopt+0x88>
 80122e2:	89bb      	ldrh	r3, [r7, #12]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d001      	beq.n	80122ec <tcp_parseopt+0x88>
 80122e8:	89ba      	ldrh	r2, [r7, #12]
 80122ea:	e001      	b.n	80122f0 <tcp_parseopt+0x8c>
 80122ec:	f44f 7206 	mov.w	r2, #536	; 0x218
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80122f4:	e010      	b.n	8012318 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80122f6:	f7ff ff7f 	bl	80121f8 <tcp_get_next_optbyte>
 80122fa:	4603      	mov	r3, r0
 80122fc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80122fe:	7afb      	ldrb	r3, [r7, #11]
 8012300:	2b01      	cmp	r3, #1
 8012302:	d914      	bls.n	801232e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012304:	7afb      	ldrb	r3, [r7, #11]
 8012306:	b29a      	uxth	r2, r3
 8012308:	4b0f      	ldr	r3, [pc, #60]	; (8012348 <tcp_parseopt+0xe4>)
 801230a:	881b      	ldrh	r3, [r3, #0]
 801230c:	4413      	add	r3, r2
 801230e:	b29b      	uxth	r3, r3
 8012310:	3b02      	subs	r3, #2
 8012312:	b29a      	uxth	r2, r3
 8012314:	4b0c      	ldr	r3, [pc, #48]	; (8012348 <tcp_parseopt+0xe4>)
 8012316:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012318:	4b0b      	ldr	r3, [pc, #44]	; (8012348 <tcp_parseopt+0xe4>)
 801231a:	881a      	ldrh	r2, [r3, #0]
 801231c:	4b09      	ldr	r3, [pc, #36]	; (8012344 <tcp_parseopt+0xe0>)
 801231e:	881b      	ldrh	r3, [r3, #0]
 8012320:	429a      	cmp	r2, r3
 8012322:	d3b5      	bcc.n	8012290 <tcp_parseopt+0x2c>
 8012324:	e004      	b.n	8012330 <tcp_parseopt+0xcc>
          return;
 8012326:	bf00      	nop
 8012328:	e002      	b.n	8012330 <tcp_parseopt+0xcc>
            return;
 801232a:	bf00      	nop
 801232c:	e000      	b.n	8012330 <tcp_parseopt+0xcc>
            return;
 801232e:	bf00      	nop
      }
    }
  }
}
 8012330:	3710      	adds	r7, #16
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	0801c8d0 	.word	0x0801c8d0
 801233c:	0801cd34 	.word	0x0801cd34
 8012340:	0801c91c 	.word	0x0801c91c
 8012344:	2001026c 	.word	0x2001026c
 8012348:	20010274 	.word	0x20010274

0801234c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801234c:	b480      	push	{r7}
 801234e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012350:	4b05      	ldr	r3, [pc, #20]	; (8012368 <tcp_trigger_input_pcb_close+0x1c>)
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	f043 0310 	orr.w	r3, r3, #16
 8012358:	b2da      	uxtb	r2, r3
 801235a:	4b03      	ldr	r3, [pc, #12]	; (8012368 <tcp_trigger_input_pcb_close+0x1c>)
 801235c:	701a      	strb	r2, [r3, #0]
}
 801235e:	bf00      	nop
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr
 8012368:	20010285 	.word	0x20010285

0801236c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d00a      	beq.n	8012394 <tcp_route+0x28>
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	7a1b      	ldrb	r3, [r3, #8]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d006      	beq.n	8012394 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	7a1b      	ldrb	r3, [r3, #8]
 801238a:	4618      	mov	r0, r3
 801238c:	f7fb f826 	bl	800d3dc <netif_get_by_index>
 8012390:	4603      	mov	r3, r0
 8012392:	e003      	b.n	801239c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f005 fcd5 	bl	8017d44 <ip4_route>
 801239a:	4603      	mov	r3, r0
  }
}
 801239c:	4618      	mov	r0, r3
 801239e:	3710      	adds	r7, #16
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80123a4:	b590      	push	{r4, r7, lr}
 80123a6:	b087      	sub	sp, #28
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	60f8      	str	r0, [r7, #12]
 80123ac:	60b9      	str	r1, [r7, #8]
 80123ae:	603b      	str	r3, [r7, #0]
 80123b0:	4613      	mov	r3, r2
 80123b2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d105      	bne.n	80123c6 <tcp_create_segment+0x22>
 80123ba:	4b44      	ldr	r3, [pc, #272]	; (80124cc <tcp_create_segment+0x128>)
 80123bc:	22a3      	movs	r2, #163	; 0xa3
 80123be:	4944      	ldr	r1, [pc, #272]	; (80124d0 <tcp_create_segment+0x12c>)
 80123c0:	4844      	ldr	r0, [pc, #272]	; (80124d4 <tcp_create_segment+0x130>)
 80123c2:	f007 f8d3 	bl	801956c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d105      	bne.n	80123d8 <tcp_create_segment+0x34>
 80123cc:	4b3f      	ldr	r3, [pc, #252]	; (80124cc <tcp_create_segment+0x128>)
 80123ce:	22a4      	movs	r2, #164	; 0xa4
 80123d0:	4941      	ldr	r1, [pc, #260]	; (80124d8 <tcp_create_segment+0x134>)
 80123d2:	4840      	ldr	r0, [pc, #256]	; (80124d4 <tcp_create_segment+0x130>)
 80123d4:	f007 f8ca 	bl	801956c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80123d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80123dc:	009b      	lsls	r3, r3, #2
 80123de:	b2db      	uxtb	r3, r3
 80123e0:	f003 0304 	and.w	r3, r3, #4
 80123e4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80123e6:	2003      	movs	r0, #3
 80123e8:	f7fa fc84 	bl	800ccf4 <memp_malloc>
 80123ec:	6138      	str	r0, [r7, #16]
 80123ee:	693b      	ldr	r3, [r7, #16]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d104      	bne.n	80123fe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80123f4:	68b8      	ldr	r0, [r7, #8]
 80123f6:	f7fb fb7b 	bl	800daf0 <pbuf_free>
    return NULL;
 80123fa:	2300      	movs	r3, #0
 80123fc:	e061      	b.n	80124c2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012404:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012406:	693b      	ldr	r3, [r7, #16]
 8012408:	2200      	movs	r2, #0
 801240a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801240c:	693b      	ldr	r3, [r7, #16]
 801240e:	68ba      	ldr	r2, [r7, #8]
 8012410:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	891a      	ldrh	r2, [r3, #8]
 8012416:	7dfb      	ldrb	r3, [r7, #23]
 8012418:	b29b      	uxth	r3, r3
 801241a:	429a      	cmp	r2, r3
 801241c:	d205      	bcs.n	801242a <tcp_create_segment+0x86>
 801241e:	4b2b      	ldr	r3, [pc, #172]	; (80124cc <tcp_create_segment+0x128>)
 8012420:	22b0      	movs	r2, #176	; 0xb0
 8012422:	492e      	ldr	r1, [pc, #184]	; (80124dc <tcp_create_segment+0x138>)
 8012424:	482b      	ldr	r0, [pc, #172]	; (80124d4 <tcp_create_segment+0x130>)
 8012426:	f007 f8a1 	bl	801956c <iprintf>
  seg->len = p->tot_len - optlen;
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	891a      	ldrh	r2, [r3, #8]
 801242e:	7dfb      	ldrb	r3, [r7, #23]
 8012430:	b29b      	uxth	r3, r3
 8012432:	1ad3      	subs	r3, r2, r3
 8012434:	b29a      	uxth	r2, r3
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801243a:	2114      	movs	r1, #20
 801243c:	68b8      	ldr	r0, [r7, #8]
 801243e:	f7fb fac1 	bl	800d9c4 <pbuf_add_header>
 8012442:	4603      	mov	r3, r0
 8012444:	2b00      	cmp	r3, #0
 8012446:	d004      	beq.n	8012452 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012448:	6938      	ldr	r0, [r7, #16]
 801244a:	f7fc ffe9 	bl	800f420 <tcp_seg_free>
    return NULL;
 801244e:	2300      	movs	r3, #0
 8012450:	e037      	b.n	80124c2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	685b      	ldr	r3, [r3, #4]
 8012456:	685a      	ldr	r2, [r3, #4]
 8012458:	693b      	ldr	r3, [r7, #16]
 801245a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	8ada      	ldrh	r2, [r3, #22]
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	68dc      	ldr	r4, [r3, #12]
 8012464:	4610      	mov	r0, r2
 8012466:	f7f9 ff59 	bl	800c31c <lwip_htons>
 801246a:	4603      	mov	r3, r0
 801246c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	8b1a      	ldrh	r2, [r3, #24]
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	68dc      	ldr	r4, [r3, #12]
 8012476:	4610      	mov	r0, r2
 8012478:	f7f9 ff50 	bl	800c31c <lwip_htons>
 801247c:	4603      	mov	r3, r0
 801247e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	68dc      	ldr	r4, [r3, #12]
 8012484:	6838      	ldr	r0, [r7, #0]
 8012486:	f7f9 ff5e 	bl	800c346 <lwip_htonl>
 801248a:	4603      	mov	r3, r0
 801248c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801248e:	7dfb      	ldrb	r3, [r7, #23]
 8012490:	089b      	lsrs	r3, r3, #2
 8012492:	b2db      	uxtb	r3, r3
 8012494:	b29b      	uxth	r3, r3
 8012496:	3305      	adds	r3, #5
 8012498:	b29b      	uxth	r3, r3
 801249a:	031b      	lsls	r3, r3, #12
 801249c:	b29a      	uxth	r2, r3
 801249e:	79fb      	ldrb	r3, [r7, #7]
 80124a0:	b29b      	uxth	r3, r3
 80124a2:	4313      	orrs	r3, r2
 80124a4:	b29a      	uxth	r2, r3
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	68dc      	ldr	r4, [r3, #12]
 80124aa:	4610      	mov	r0, r2
 80124ac:	f7f9 ff36 	bl	800c31c <lwip_htons>
 80124b0:	4603      	mov	r3, r0
 80124b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80124b4:	693b      	ldr	r3, [r7, #16]
 80124b6:	68db      	ldr	r3, [r3, #12]
 80124b8:	2200      	movs	r2, #0
 80124ba:	749a      	strb	r2, [r3, #18]
 80124bc:	2200      	movs	r2, #0
 80124be:	74da      	strb	r2, [r3, #19]
  return seg;
 80124c0:	693b      	ldr	r3, [r7, #16]
}
 80124c2:	4618      	mov	r0, r3
 80124c4:	371c      	adds	r7, #28
 80124c6:	46bd      	mov	sp, r7
 80124c8:	bd90      	pop	{r4, r7, pc}
 80124ca:	bf00      	nop
 80124cc:	0801cd50 	.word	0x0801cd50
 80124d0:	0801cd84 	.word	0x0801cd84
 80124d4:	0801cda4 	.word	0x0801cda4
 80124d8:	0801cdcc 	.word	0x0801cdcc
 80124dc:	0801cdf0 	.word	0x0801cdf0

080124e0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b086      	sub	sp, #24
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	607b      	str	r3, [r7, #4]
 80124e8:	4603      	mov	r3, r0
 80124ea:	73fb      	strb	r3, [r7, #15]
 80124ec:	460b      	mov	r3, r1
 80124ee:	81bb      	strh	r3, [r7, #12]
 80124f0:	4613      	mov	r3, r2
 80124f2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80124f4:	89bb      	ldrh	r3, [r7, #12]
 80124f6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d105      	bne.n	801250a <tcp_pbuf_prealloc+0x2a>
 80124fe:	4b30      	ldr	r3, [pc, #192]	; (80125c0 <tcp_pbuf_prealloc+0xe0>)
 8012500:	22e8      	movs	r2, #232	; 0xe8
 8012502:	4930      	ldr	r1, [pc, #192]	; (80125c4 <tcp_pbuf_prealloc+0xe4>)
 8012504:	4830      	ldr	r0, [pc, #192]	; (80125c8 <tcp_pbuf_prealloc+0xe8>)
 8012506:	f007 f831 	bl	801956c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801250a:	6a3b      	ldr	r3, [r7, #32]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d105      	bne.n	801251c <tcp_pbuf_prealloc+0x3c>
 8012510:	4b2b      	ldr	r3, [pc, #172]	; (80125c0 <tcp_pbuf_prealloc+0xe0>)
 8012512:	22e9      	movs	r2, #233	; 0xe9
 8012514:	492d      	ldr	r1, [pc, #180]	; (80125cc <tcp_pbuf_prealloc+0xec>)
 8012516:	482c      	ldr	r0, [pc, #176]	; (80125c8 <tcp_pbuf_prealloc+0xe8>)
 8012518:	f007 f828 	bl	801956c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801251c:	89ba      	ldrh	r2, [r7, #12]
 801251e:	897b      	ldrh	r3, [r7, #10]
 8012520:	429a      	cmp	r2, r3
 8012522:	d221      	bcs.n	8012568 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012524:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012528:	f003 0302 	and.w	r3, r3, #2
 801252c:	2b00      	cmp	r3, #0
 801252e:	d111      	bne.n	8012554 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012530:	6a3b      	ldr	r3, [r7, #32]
 8012532:	8b5b      	ldrh	r3, [r3, #26]
 8012534:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012538:	2b00      	cmp	r3, #0
 801253a:	d115      	bne.n	8012568 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801253c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012540:	2b00      	cmp	r3, #0
 8012542:	d007      	beq.n	8012554 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012544:	6a3b      	ldr	r3, [r7, #32]
 8012546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012548:	2b00      	cmp	r3, #0
 801254a:	d103      	bne.n	8012554 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801254c:	6a3b      	ldr	r3, [r7, #32]
 801254e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012550:	2b00      	cmp	r3, #0
 8012552:	d009      	beq.n	8012568 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012554:	89bb      	ldrh	r3, [r7, #12]
 8012556:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801255a:	f023 0203 	bic.w	r2, r3, #3
 801255e:	897b      	ldrh	r3, [r7, #10]
 8012560:	4293      	cmp	r3, r2
 8012562:	bf28      	it	cs
 8012564:	4613      	movcs	r3, r2
 8012566:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012568:	8af9      	ldrh	r1, [r7, #22]
 801256a:	7bfb      	ldrb	r3, [r7, #15]
 801256c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012570:	4618      	mov	r0, r3
 8012572:	f7fa ffdd 	bl	800d530 <pbuf_alloc>
 8012576:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d101      	bne.n	8012582 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801257e:	2300      	movs	r3, #0
 8012580:	e019      	b.n	80125b6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d006      	beq.n	8012598 <tcp_pbuf_prealloc+0xb8>
 801258a:	4b0d      	ldr	r3, [pc, #52]	; (80125c0 <tcp_pbuf_prealloc+0xe0>)
 801258c:	f240 120b 	movw	r2, #267	; 0x10b
 8012590:	490f      	ldr	r1, [pc, #60]	; (80125d0 <tcp_pbuf_prealloc+0xf0>)
 8012592:	480d      	ldr	r0, [pc, #52]	; (80125c8 <tcp_pbuf_prealloc+0xe8>)
 8012594:	f006 ffea 	bl	801956c <iprintf>
  *oversize = p->len - length;
 8012598:	693b      	ldr	r3, [r7, #16]
 801259a:	895a      	ldrh	r2, [r3, #10]
 801259c:	89bb      	ldrh	r3, [r7, #12]
 801259e:	1ad3      	subs	r3, r2, r3
 80125a0:	b29a      	uxth	r2, r3
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	89ba      	ldrh	r2, [r7, #12]
 80125aa:	811a      	strh	r2, [r3, #8]
 80125ac:	693b      	ldr	r3, [r7, #16]
 80125ae:	891a      	ldrh	r2, [r3, #8]
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	815a      	strh	r2, [r3, #10]
  return p;
 80125b4:	693b      	ldr	r3, [r7, #16]
}
 80125b6:	4618      	mov	r0, r3
 80125b8:	3718      	adds	r7, #24
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}
 80125be:	bf00      	nop
 80125c0:	0801cd50 	.word	0x0801cd50
 80125c4:	0801ce08 	.word	0x0801ce08
 80125c8:	0801cda4 	.word	0x0801cda4
 80125cc:	0801ce2c 	.word	0x0801ce2c
 80125d0:	0801ce4c 	.word	0x0801ce4c

080125d4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	460b      	mov	r3, r1
 80125de:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d106      	bne.n	80125f4 <tcp_write_checks+0x20>
 80125e6:	4b33      	ldr	r3, [pc, #204]	; (80126b4 <tcp_write_checks+0xe0>)
 80125e8:	f240 1233 	movw	r2, #307	; 0x133
 80125ec:	4932      	ldr	r1, [pc, #200]	; (80126b8 <tcp_write_checks+0xe4>)
 80125ee:	4833      	ldr	r0, [pc, #204]	; (80126bc <tcp_write_checks+0xe8>)
 80125f0:	f006 ffbc 	bl	801956c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	7d1b      	ldrb	r3, [r3, #20]
 80125f8:	2b04      	cmp	r3, #4
 80125fa:	d00e      	beq.n	801261a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012600:	2b07      	cmp	r3, #7
 8012602:	d00a      	beq.n	801261a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012608:	2b02      	cmp	r3, #2
 801260a:	d006      	beq.n	801261a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012610:	2b03      	cmp	r3, #3
 8012612:	d002      	beq.n	801261a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012614:	f06f 030a 	mvn.w	r3, #10
 8012618:	e048      	b.n	80126ac <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801261a:	887b      	ldrh	r3, [r7, #2]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d101      	bne.n	8012624 <tcp_write_checks+0x50>
    return ERR_OK;
 8012620:	2300      	movs	r3, #0
 8012622:	e043      	b.n	80126ac <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801262a:	887a      	ldrh	r2, [r7, #2]
 801262c:	429a      	cmp	r2, r3
 801262e:	d909      	bls.n	8012644 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	8b5b      	ldrh	r3, [r3, #26]
 8012634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012638:	b29a      	uxth	r2, r3
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801263e:	f04f 33ff 	mov.w	r3, #4294967295
 8012642:	e033      	b.n	80126ac <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801264a:	2b08      	cmp	r3, #8
 801264c:	d909      	bls.n	8012662 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	8b5b      	ldrh	r3, [r3, #26]
 8012652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012656:	b29a      	uxth	r2, r3
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801265c:	f04f 33ff 	mov.w	r3, #4294967295
 8012660:	e024      	b.n	80126ac <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012668:	2b00      	cmp	r3, #0
 801266a:	d00f      	beq.n	801268c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012670:	2b00      	cmp	r3, #0
 8012672:	d11a      	bne.n	80126aa <tcp_write_checks+0xd6>
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012678:	2b00      	cmp	r3, #0
 801267a:	d116      	bne.n	80126aa <tcp_write_checks+0xd6>
 801267c:	4b0d      	ldr	r3, [pc, #52]	; (80126b4 <tcp_write_checks+0xe0>)
 801267e:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8012682:	490f      	ldr	r1, [pc, #60]	; (80126c0 <tcp_write_checks+0xec>)
 8012684:	480d      	ldr	r0, [pc, #52]	; (80126bc <tcp_write_checks+0xe8>)
 8012686:	f006 ff71 	bl	801956c <iprintf>
 801268a:	e00e      	b.n	80126aa <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012690:	2b00      	cmp	r3, #0
 8012692:	d103      	bne.n	801269c <tcp_write_checks+0xc8>
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012698:	2b00      	cmp	r3, #0
 801269a:	d006      	beq.n	80126aa <tcp_write_checks+0xd6>
 801269c:	4b05      	ldr	r3, [pc, #20]	; (80126b4 <tcp_write_checks+0xe0>)
 801269e:	f240 1259 	movw	r2, #345	; 0x159
 80126a2:	4908      	ldr	r1, [pc, #32]	; (80126c4 <tcp_write_checks+0xf0>)
 80126a4:	4805      	ldr	r0, [pc, #20]	; (80126bc <tcp_write_checks+0xe8>)
 80126a6:	f006 ff61 	bl	801956c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80126aa:	2300      	movs	r3, #0
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3708      	adds	r7, #8
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	0801cd50 	.word	0x0801cd50
 80126b8:	0801ce60 	.word	0x0801ce60
 80126bc:	0801cda4 	.word	0x0801cda4
 80126c0:	0801ce80 	.word	0x0801ce80
 80126c4:	0801cebc 	.word	0x0801cebc

080126c8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80126c8:	b590      	push	{r4, r7, lr}
 80126ca:	b09b      	sub	sp, #108	; 0x6c
 80126cc:	af04      	add	r7, sp, #16
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	4611      	mov	r1, r2
 80126d4:	461a      	mov	r2, r3
 80126d6:	460b      	mov	r3, r1
 80126d8:	80fb      	strh	r3, [r7, #6]
 80126da:	4613      	mov	r3, r2
 80126dc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80126de:	2300      	movs	r3, #0
 80126e0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80126e2:	2300      	movs	r3, #0
 80126e4:	653b      	str	r3, [r7, #80]	; 0x50
 80126e6:	2300      	movs	r3, #0
 80126e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80126ea:	2300      	movs	r3, #0
 80126ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80126ee:	2300      	movs	r3, #0
 80126f0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80126f2:	2300      	movs	r3, #0
 80126f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80126f8:	2300      	movs	r3, #0
 80126fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80126fe:	2300      	movs	r3, #0
 8012700:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8012702:	2300      	movs	r3, #0
 8012704:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8012706:	2300      	movs	r3, #0
 8012708:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d109      	bne.n	8012724 <tcp_write+0x5c>
 8012710:	4ba5      	ldr	r3, [pc, #660]	; (80129a8 <tcp_write+0x2e0>)
 8012712:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8012716:	49a5      	ldr	r1, [pc, #660]	; (80129ac <tcp_write+0x2e4>)
 8012718:	48a5      	ldr	r0, [pc, #660]	; (80129b0 <tcp_write+0x2e8>)
 801271a:	f006 ff27 	bl	801956c <iprintf>
 801271e:	f06f 030f 	mvn.w	r3, #15
 8012722:	e32c      	b.n	8012d7e <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801272a:	085b      	lsrs	r3, r3, #1
 801272c:	b29a      	uxth	r2, r3
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012732:	4293      	cmp	r3, r2
 8012734:	bf28      	it	cs
 8012736:	4613      	movcs	r3, r2
 8012738:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801273a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801273c:	2b00      	cmp	r3, #0
 801273e:	d102      	bne.n	8012746 <tcp_write+0x7e>
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012744:	e000      	b.n	8012748 <tcp_write+0x80>
 8012746:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012748:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801274a:	68bb      	ldr	r3, [r7, #8]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d109      	bne.n	8012764 <tcp_write+0x9c>
 8012750:	4b95      	ldr	r3, [pc, #596]	; (80129a8 <tcp_write+0x2e0>)
 8012752:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8012756:	4997      	ldr	r1, [pc, #604]	; (80129b4 <tcp_write+0x2ec>)
 8012758:	4895      	ldr	r0, [pc, #596]	; (80129b0 <tcp_write+0x2e8>)
 801275a:	f006 ff07 	bl	801956c <iprintf>
 801275e:	f06f 030f 	mvn.w	r3, #15
 8012762:	e30c      	b.n	8012d7e <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8012764:	88fb      	ldrh	r3, [r7, #6]
 8012766:	4619      	mov	r1, r3
 8012768:	68f8      	ldr	r0, [r7, #12]
 801276a:	f7ff ff33 	bl	80125d4 <tcp_write_checks>
 801276e:	4603      	mov	r3, r0
 8012770:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8012774:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012778:	2b00      	cmp	r3, #0
 801277a:	d002      	beq.n	8012782 <tcp_write+0xba>
    return err;
 801277c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012780:	e2fd      	b.n	8012d7e <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012788:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801278c:	2300      	movs	r3, #0
 801278e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012796:	2b00      	cmp	r3, #0
 8012798:	f000 80f7 	beq.w	801298a <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127a0:	653b      	str	r3, [r7, #80]	; 0x50
 80127a2:	e002      	b.n	80127aa <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80127a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80127aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d1f8      	bne.n	80127a4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80127b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127b4:	7a9b      	ldrb	r3, [r3, #10]
 80127b6:	009b      	lsls	r3, r3, #2
 80127b8:	b29b      	uxth	r3, r3
 80127ba:	f003 0304 	and.w	r3, r3, #4
 80127be:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80127c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80127c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127c4:	891b      	ldrh	r3, [r3, #8]
 80127c6:	4619      	mov	r1, r3
 80127c8:	8c3b      	ldrh	r3, [r7, #32]
 80127ca:	440b      	add	r3, r1
 80127cc:	429a      	cmp	r2, r3
 80127ce:	da06      	bge.n	80127de <tcp_write+0x116>
 80127d0:	4b75      	ldr	r3, [pc, #468]	; (80129a8 <tcp_write+0x2e0>)
 80127d2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80127d6:	4978      	ldr	r1, [pc, #480]	; (80129b8 <tcp_write+0x2f0>)
 80127d8:	4875      	ldr	r0, [pc, #468]	; (80129b0 <tcp_write+0x2e8>)
 80127da:	f006 fec7 	bl	801956c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80127de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127e0:	891a      	ldrh	r2, [r3, #8]
 80127e2:	8c3b      	ldrh	r3, [r7, #32]
 80127e4:	4413      	add	r3, r2
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80127ea:	1ad3      	subs	r3, r2, r3
 80127ec:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80127f4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80127f6:	8a7b      	ldrh	r3, [r7, #18]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d027      	beq.n	801284c <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80127fc:	8a7b      	ldrh	r3, [r7, #18]
 80127fe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012800:	429a      	cmp	r2, r3
 8012802:	d206      	bcs.n	8012812 <tcp_write+0x14a>
 8012804:	4b68      	ldr	r3, [pc, #416]	; (80129a8 <tcp_write+0x2e0>)
 8012806:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801280a:	496c      	ldr	r1, [pc, #432]	; (80129bc <tcp_write+0x2f4>)
 801280c:	4868      	ldr	r0, [pc, #416]	; (80129b0 <tcp_write+0x2e8>)
 801280e:	f006 fead 	bl	801956c <iprintf>
      seg = last_unsent;
 8012812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012814:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8012816:	8a7b      	ldrh	r3, [r7, #18]
 8012818:	88fa      	ldrh	r2, [r7, #6]
 801281a:	429a      	cmp	r2, r3
 801281c:	d901      	bls.n	8012822 <tcp_write+0x15a>
 801281e:	8a7b      	ldrh	r3, [r7, #18]
 8012820:	e000      	b.n	8012824 <tcp_write+0x15c>
 8012822:	88fb      	ldrh	r3, [r7, #6]
 8012824:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012826:	4293      	cmp	r3, r2
 8012828:	bfa8      	it	ge
 801282a:	4613      	movge	r3, r2
 801282c:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801282e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012832:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012834:	4413      	add	r3, r2
 8012836:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801283a:	8a7a      	ldrh	r2, [r7, #18]
 801283c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801283e:	1ad3      	subs	r3, r2, r3
 8012840:	b29b      	uxth	r3, r3
 8012842:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012844:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012846:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012848:	1ad3      	subs	r3, r2, r3
 801284a:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801284c:	8a7b      	ldrh	r3, [r7, #18]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d00b      	beq.n	801286a <tcp_write+0x1a2>
 8012852:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012856:	88fb      	ldrh	r3, [r7, #6]
 8012858:	429a      	cmp	r2, r3
 801285a:	d006      	beq.n	801286a <tcp_write+0x1a2>
 801285c:	4b52      	ldr	r3, [pc, #328]	; (80129a8 <tcp_write+0x2e0>)
 801285e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012862:	4957      	ldr	r1, [pc, #348]	; (80129c0 <tcp_write+0x2f8>)
 8012864:	4852      	ldr	r0, [pc, #328]	; (80129b0 <tcp_write+0x2e8>)
 8012866:	f006 fe81 	bl	801956c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801286a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801286e:	88fb      	ldrh	r3, [r7, #6]
 8012870:	429a      	cmp	r2, r3
 8012872:	f080 8168 	bcs.w	8012b46 <tcp_write+0x47e>
 8012876:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012878:	2b00      	cmp	r3, #0
 801287a:	f000 8164 	beq.w	8012b46 <tcp_write+0x47e>
 801287e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012880:	891b      	ldrh	r3, [r3, #8]
 8012882:	2b00      	cmp	r3, #0
 8012884:	f000 815f 	beq.w	8012b46 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8012888:	88fa      	ldrh	r2, [r7, #6]
 801288a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801288e:	1ad2      	subs	r2, r2, r3
 8012890:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012892:	4293      	cmp	r3, r2
 8012894:	bfa8      	it	ge
 8012896:	4613      	movge	r3, r2
 8012898:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801289a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801289c:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801289e:	797b      	ldrb	r3, [r7, #5]
 80128a0:	f003 0301 	and.w	r3, r3, #1
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d027      	beq.n	80128f8 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80128a8:	f107 0012 	add.w	r0, r7, #18
 80128ac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80128ae:	8bf9      	ldrh	r1, [r7, #30]
 80128b0:	2301      	movs	r3, #1
 80128b2:	9302      	str	r3, [sp, #8]
 80128b4:	797b      	ldrb	r3, [r7, #5]
 80128b6:	9301      	str	r3, [sp, #4]
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	9300      	str	r3, [sp, #0]
 80128bc:	4603      	mov	r3, r0
 80128be:	2000      	movs	r0, #0
 80128c0:	f7ff fe0e 	bl	80124e0 <tcp_pbuf_prealloc>
 80128c4:	6578      	str	r0, [r7, #84]	; 0x54
 80128c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	f000 8226 	beq.w	8012d1a <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80128ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128d0:	6858      	ldr	r0, [r3, #4]
 80128d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80128d6:	68ba      	ldr	r2, [r7, #8]
 80128d8:	4413      	add	r3, r2
 80128da:	8bfa      	ldrh	r2, [r7, #30]
 80128dc:	4619      	mov	r1, r3
 80128de:	f006 fe18 	bl	8019512 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80128e2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80128e4:	f7fb f992 	bl	800dc0c <pbuf_clen>
 80128e8:	4603      	mov	r3, r0
 80128ea:	461a      	mov	r2, r3
 80128ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80128f0:	4413      	add	r3, r2
 80128f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80128f6:	e041      	b.n	801297c <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80128f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	637b      	str	r3, [r7, #52]	; 0x34
 80128fe:	e002      	b.n	8012906 <tcp_write+0x23e>
 8012900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	637b      	str	r3, [r7, #52]	; 0x34
 8012906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d1f8      	bne.n	8012900 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801290e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012910:	7b1b      	ldrb	r3, [r3, #12]
 8012912:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8012916:	2b00      	cmp	r3, #0
 8012918:	d115      	bne.n	8012946 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801291a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801291c:	685b      	ldr	r3, [r3, #4]
 801291e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012920:	8952      	ldrh	r2, [r2, #10]
 8012922:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012924:	68ba      	ldr	r2, [r7, #8]
 8012926:	429a      	cmp	r2, r3
 8012928:	d10d      	bne.n	8012946 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801292a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801292e:	2b00      	cmp	r3, #0
 8012930:	d006      	beq.n	8012940 <tcp_write+0x278>
 8012932:	4b1d      	ldr	r3, [pc, #116]	; (80129a8 <tcp_write+0x2e0>)
 8012934:	f240 2231 	movw	r2, #561	; 0x231
 8012938:	4922      	ldr	r1, [pc, #136]	; (80129c4 <tcp_write+0x2fc>)
 801293a:	481d      	ldr	r0, [pc, #116]	; (80129b0 <tcp_write+0x2e8>)
 801293c:	f006 fe16 	bl	801956c <iprintf>
          extendlen = seglen;
 8012940:	8bfb      	ldrh	r3, [r7, #30]
 8012942:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012944:	e01a      	b.n	801297c <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012946:	8bfb      	ldrh	r3, [r7, #30]
 8012948:	2201      	movs	r2, #1
 801294a:	4619      	mov	r1, r3
 801294c:	2000      	movs	r0, #0
 801294e:	f7fa fdef 	bl	800d530 <pbuf_alloc>
 8012952:	6578      	str	r0, [r7, #84]	; 0x54
 8012954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012956:	2b00      	cmp	r3, #0
 8012958:	f000 81e1 	beq.w	8012d1e <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801295c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012960:	68ba      	ldr	r2, [r7, #8]
 8012962:	441a      	add	r2, r3
 8012964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012966:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8012968:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801296a:	f7fb f94f 	bl	800dc0c <pbuf_clen>
 801296e:	4603      	mov	r3, r0
 8012970:	461a      	mov	r2, r3
 8012972:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012976:	4413      	add	r3, r2
 8012978:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801297c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012980:	8bfb      	ldrh	r3, [r7, #30]
 8012982:	4413      	add	r3, r2
 8012984:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012988:	e0dd      	b.n	8012b46 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012990:	2b00      	cmp	r3, #0
 8012992:	f000 80d8 	beq.w	8012b46 <tcp_write+0x47e>
 8012996:	4b04      	ldr	r3, [pc, #16]	; (80129a8 <tcp_write+0x2e0>)
 8012998:	f240 224b 	movw	r2, #587	; 0x24b
 801299c:	490a      	ldr	r1, [pc, #40]	; (80129c8 <tcp_write+0x300>)
 801299e:	4804      	ldr	r0, [pc, #16]	; (80129b0 <tcp_write+0x2e8>)
 80129a0:	f006 fde4 	bl	801956c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80129a4:	e0cf      	b.n	8012b46 <tcp_write+0x47e>
 80129a6:	bf00      	nop
 80129a8:	0801cd50 	.word	0x0801cd50
 80129ac:	0801cef0 	.word	0x0801cef0
 80129b0:	0801cda4 	.word	0x0801cda4
 80129b4:	0801cf08 	.word	0x0801cf08
 80129b8:	0801cf3c 	.word	0x0801cf3c
 80129bc:	0801cf54 	.word	0x0801cf54
 80129c0:	0801cf74 	.word	0x0801cf74
 80129c4:	0801cf94 	.word	0x0801cf94
 80129c8:	0801cfc0 	.word	0x0801cfc0
    struct pbuf *p;
    u16_t left = len - pos;
 80129cc:	88fa      	ldrh	r2, [r7, #6]
 80129ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80129d2:	1ad3      	subs	r3, r2, r3
 80129d4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80129d6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80129da:	b29b      	uxth	r3, r3
 80129dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80129de:	1ad3      	subs	r3, r2, r3
 80129e0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80129e2:	8b7a      	ldrh	r2, [r7, #26]
 80129e4:	8bbb      	ldrh	r3, [r7, #28]
 80129e6:	4293      	cmp	r3, r2
 80129e8:	bf28      	it	cs
 80129ea:	4613      	movcs	r3, r2
 80129ec:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80129ee:	797b      	ldrb	r3, [r7, #5]
 80129f0:	f003 0301 	and.w	r3, r3, #1
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d036      	beq.n	8012a66 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80129f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80129fc:	b29a      	uxth	r2, r3
 80129fe:	8b3b      	ldrh	r3, [r7, #24]
 8012a00:	4413      	add	r3, r2
 8012a02:	b299      	uxth	r1, r3
 8012a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	bf0c      	ite	eq
 8012a0a:	2301      	moveq	r3, #1
 8012a0c:	2300      	movne	r3, #0
 8012a0e:	b2db      	uxtb	r3, r3
 8012a10:	f107 0012 	add.w	r0, r7, #18
 8012a14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012a16:	9302      	str	r3, [sp, #8]
 8012a18:	797b      	ldrb	r3, [r7, #5]
 8012a1a:	9301      	str	r3, [sp, #4]
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	9300      	str	r3, [sp, #0]
 8012a20:	4603      	mov	r3, r0
 8012a22:	2036      	movs	r0, #54	; 0x36
 8012a24:	f7ff fd5c 	bl	80124e0 <tcp_pbuf_prealloc>
 8012a28:	6338      	str	r0, [r7, #48]	; 0x30
 8012a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	f000 8178 	beq.w	8012d22 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8012a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a34:	895b      	ldrh	r3, [r3, #10]
 8012a36:	8b3a      	ldrh	r2, [r7, #24]
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d906      	bls.n	8012a4a <tcp_write+0x382>
 8012a3c:	4b8c      	ldr	r3, [pc, #560]	; (8012c70 <tcp_write+0x5a8>)
 8012a3e:	f240 2267 	movw	r2, #615	; 0x267
 8012a42:	498c      	ldr	r1, [pc, #560]	; (8012c74 <tcp_write+0x5ac>)
 8012a44:	488c      	ldr	r0, [pc, #560]	; (8012c78 <tcp_write+0x5b0>)
 8012a46:	f006 fd91 	bl	801956c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8012a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a4c:	685a      	ldr	r2, [r3, #4]
 8012a4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012a52:	18d0      	adds	r0, r2, r3
 8012a54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a58:	68ba      	ldr	r2, [r7, #8]
 8012a5a:	4413      	add	r3, r2
 8012a5c:	8b3a      	ldrh	r2, [r7, #24]
 8012a5e:	4619      	mov	r1, r3
 8012a60:	f006 fd57 	bl	8019512 <memcpy>
 8012a64:	e02f      	b.n	8012ac6 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012a66:	8a7b      	ldrh	r3, [r7, #18]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d006      	beq.n	8012a7a <tcp_write+0x3b2>
 8012a6c:	4b80      	ldr	r3, [pc, #512]	; (8012c70 <tcp_write+0x5a8>)
 8012a6e:	f240 2271 	movw	r2, #625	; 0x271
 8012a72:	4982      	ldr	r1, [pc, #520]	; (8012c7c <tcp_write+0x5b4>)
 8012a74:	4880      	ldr	r0, [pc, #512]	; (8012c78 <tcp_write+0x5b0>)
 8012a76:	f006 fd79 	bl	801956c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012a7a:	8b3b      	ldrh	r3, [r7, #24]
 8012a7c:	2201      	movs	r2, #1
 8012a7e:	4619      	mov	r1, r3
 8012a80:	2036      	movs	r0, #54	; 0x36
 8012a82:	f7fa fd55 	bl	800d530 <pbuf_alloc>
 8012a86:	6178      	str	r0, [r7, #20]
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	f000 814b 	beq.w	8012d26 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012a90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a94:	68ba      	ldr	r2, [r7, #8]
 8012a96:	441a      	add	r2, r3
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012a9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012aa6:	4619      	mov	r1, r3
 8012aa8:	2036      	movs	r0, #54	; 0x36
 8012aaa:	f7fa fd41 	bl	800d530 <pbuf_alloc>
 8012aae:	6338      	str	r0, [r7, #48]	; 0x30
 8012ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d103      	bne.n	8012abe <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012ab6:	6978      	ldr	r0, [r7, #20]
 8012ab8:	f7fb f81a 	bl	800daf0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012abc:	e136      	b.n	8012d2c <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012abe:	6979      	ldr	r1, [r7, #20]
 8012ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ac2:	f7fb f8e3 	bl	800dc8c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ac8:	f7fb f8a0 	bl	800dc0c <pbuf_clen>
 8012acc:	4603      	mov	r3, r0
 8012ace:	461a      	mov	r2, r3
 8012ad0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012ad4:	4413      	add	r3, r2
 8012ad6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012ada:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012ade:	2b09      	cmp	r3, #9
 8012ae0:	d903      	bls.n	8012aea <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012ae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ae4:	f7fb f804 	bl	800daf0 <pbuf_free>
      goto memerr;
 8012ae8:	e120      	b.n	8012d2c <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012aee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012af2:	441a      	add	r2, r3
 8012af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012af8:	9300      	str	r3, [sp, #0]
 8012afa:	4613      	mov	r3, r2
 8012afc:	2200      	movs	r2, #0
 8012afe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012b00:	68f8      	ldr	r0, [r7, #12]
 8012b02:	f7ff fc4f 	bl	80123a4 <tcp_create_segment>
 8012b06:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	f000 810d 	beq.w	8012d2a <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012b10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d102      	bne.n	8012b1c <tcp_write+0x454>
      queue = seg;
 8012b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b18:	647b      	str	r3, [r7, #68]	; 0x44
 8012b1a:	e00c      	b.n	8012b36 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d106      	bne.n	8012b30 <tcp_write+0x468>
 8012b22:	4b53      	ldr	r3, [pc, #332]	; (8012c70 <tcp_write+0x5a8>)
 8012b24:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012b28:	4955      	ldr	r1, [pc, #340]	; (8012c80 <tcp_write+0x5b8>)
 8012b2a:	4853      	ldr	r0, [pc, #332]	; (8012c78 <tcp_write+0x5b0>)
 8012b2c:	f006 fd1e 	bl	801956c <iprintf>
      prev_seg->next = seg;
 8012b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012b34:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b38:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012b3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b3e:	8b3b      	ldrh	r3, [r7, #24]
 8012b40:	4413      	add	r3, r2
 8012b42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012b46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012b4a:	88fb      	ldrh	r3, [r7, #6]
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	f4ff af3d 	bcc.w	80129cc <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012b52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d02c      	beq.n	8012bb2 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b5a:	685b      	ldr	r3, [r3, #4]
 8012b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b5e:	e01e      	b.n	8012b9e <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8012b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b62:	891a      	ldrh	r2, [r3, #8]
 8012b64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b66:	4413      	add	r3, r2
 8012b68:	b29a      	uxth	r2, r3
 8012b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b6c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d110      	bne.n	8012b98 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b78:	685b      	ldr	r3, [r3, #4]
 8012b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b7c:	8952      	ldrh	r2, [r2, #10]
 8012b7e:	4413      	add	r3, r2
 8012b80:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012b82:	68b9      	ldr	r1, [r7, #8]
 8012b84:	4618      	mov	r0, r3
 8012b86:	f006 fcc4 	bl	8019512 <memcpy>
        p->len += oversize_used;
 8012b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8c:	895a      	ldrh	r2, [r3, #10]
 8012b8e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b90:	4413      	add	r3, r2
 8012b92:	b29a      	uxth	r2, r3
 8012b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b96:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d1dd      	bne.n	8012b60 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8012ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ba6:	891a      	ldrh	r2, [r3, #8]
 8012ba8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012baa:	4413      	add	r3, r2
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bb0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012bb2:	8a7a      	ldrh	r2, [r7, #18]
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d018      	beq.n	8012bf2 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d106      	bne.n	8012bd4 <tcp_write+0x50c>
 8012bc6:	4b2a      	ldr	r3, [pc, #168]	; (8012c70 <tcp_write+0x5a8>)
 8012bc8:	f240 22e1 	movw	r2, #737	; 0x2e1
 8012bcc:	492d      	ldr	r1, [pc, #180]	; (8012c84 <tcp_write+0x5bc>)
 8012bce:	482a      	ldr	r0, [pc, #168]	; (8012c78 <tcp_write+0x5b0>)
 8012bd0:	f006 fccc 	bl	801956c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bd6:	685b      	ldr	r3, [r3, #4]
 8012bd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7fb f856 	bl	800dc8c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012be2:	891a      	ldrh	r2, [r3, #8]
 8012be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012be6:	891b      	ldrh	r3, [r3, #8]
 8012be8:	4413      	add	r3, r2
 8012bea:	b29a      	uxth	r2, r3
 8012bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bee:	811a      	strh	r2, [r3, #8]
 8012bf0:	e037      	b.n	8012c62 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8012bf2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d034      	beq.n	8012c62 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d003      	beq.n	8012c06 <tcp_write+0x53e>
 8012bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d106      	bne.n	8012c14 <tcp_write+0x54c>
 8012c06:	4b1a      	ldr	r3, [pc, #104]	; (8012c70 <tcp_write+0x5a8>)
 8012c08:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012c0c:	491e      	ldr	r1, [pc, #120]	; (8012c88 <tcp_write+0x5c0>)
 8012c0e:	481a      	ldr	r0, [pc, #104]	; (8012c78 <tcp_write+0x5b0>)
 8012c10:	f006 fcac 	bl	801956c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8012c1a:	e009      	b.n	8012c30 <tcp_write+0x568>
      p->tot_len += extendlen;
 8012c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1e:	891a      	ldrh	r2, [r3, #8]
 8012c20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c22:	4413      	add	r3, r2
 8012c24:	b29a      	uxth	r2, r3
 8012c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c28:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d1f1      	bne.n	8012c1c <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8012c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c3a:	891a      	ldrh	r2, [r3, #8]
 8012c3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c3e:	4413      	add	r3, r2
 8012c40:	b29a      	uxth	r2, r3
 8012c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c44:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c48:	895a      	ldrh	r2, [r3, #10]
 8012c4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c4c:	4413      	add	r3, r2
 8012c4e:	b29a      	uxth	r2, r3
 8012c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c52:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c56:	891a      	ldrh	r2, [r3, #8]
 8012c58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c5a:	4413      	add	r3, r2
 8012c5c:	b29a      	uxth	r2, r3
 8012c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c60:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d111      	bne.n	8012c8c <tcp_write+0x5c4>
    pcb->unsent = queue;
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c6c:	66da      	str	r2, [r3, #108]	; 0x6c
 8012c6e:	e010      	b.n	8012c92 <tcp_write+0x5ca>
 8012c70:	0801cd50 	.word	0x0801cd50
 8012c74:	0801cff0 	.word	0x0801cff0
 8012c78:	0801cda4 	.word	0x0801cda4
 8012c7c:	0801d030 	.word	0x0801d030
 8012c80:	0801d040 	.word	0x0801d040
 8012c84:	0801d054 	.word	0x0801d054
 8012c88:	0801d08c 	.word	0x0801d08c
  } else {
    last_unsent->next = queue;
 8012c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c90:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012c96:	88fb      	ldrh	r3, [r7, #6]
 8012c98:	441a      	add	r2, r3
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012ca4:	88fb      	ldrh	r3, [r7, #6]
 8012ca6:	1ad3      	subs	r3, r2, r3
 8012ca8:	b29a      	uxth	r2, r3
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012cb6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d00e      	beq.n	8012ce2 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d10a      	bne.n	8012ce2 <tcp_write+0x61a>
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d106      	bne.n	8012ce2 <tcp_write+0x61a>
 8012cd4:	4b2c      	ldr	r3, [pc, #176]	; (8012d88 <tcp_write+0x6c0>)
 8012cd6:	f240 3213 	movw	r2, #787	; 0x313
 8012cda:	492c      	ldr	r1, [pc, #176]	; (8012d8c <tcp_write+0x6c4>)
 8012cdc:	482c      	ldr	r0, [pc, #176]	; (8012d90 <tcp_write+0x6c8>)
 8012cde:	f006 fc45 	bl	801956c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d016      	beq.n	8012d16 <tcp_write+0x64e>
 8012ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cea:	68db      	ldr	r3, [r3, #12]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d012      	beq.n	8012d16 <tcp_write+0x64e>
 8012cf0:	797b      	ldrb	r3, [r7, #5]
 8012cf2:	f003 0302 	and.w	r3, r3, #2
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d10d      	bne.n	8012d16 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cfc:	68db      	ldr	r3, [r3, #12]
 8012cfe:	899b      	ldrh	r3, [r3, #12]
 8012d00:	b29c      	uxth	r4, r3
 8012d02:	2008      	movs	r0, #8
 8012d04:	f7f9 fb0a 	bl	800c31c <lwip_htons>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d0e:	68db      	ldr	r3, [r3, #12]
 8012d10:	4322      	orrs	r2, r4
 8012d12:	b292      	uxth	r2, r2
 8012d14:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012d16:	2300      	movs	r3, #0
 8012d18:	e031      	b.n	8012d7e <tcp_write+0x6b6>
          goto memerr;
 8012d1a:	bf00      	nop
 8012d1c:	e006      	b.n	8012d2c <tcp_write+0x664>
            goto memerr;
 8012d1e:	bf00      	nop
 8012d20:	e004      	b.n	8012d2c <tcp_write+0x664>
        goto memerr;
 8012d22:	bf00      	nop
 8012d24:	e002      	b.n	8012d2c <tcp_write+0x664>
        goto memerr;
 8012d26:	bf00      	nop
 8012d28:	e000      	b.n	8012d2c <tcp_write+0x664>
      goto memerr;
 8012d2a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	8b5b      	ldrh	r3, [r3, #26]
 8012d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d34:	b29a      	uxth	r2, r3
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d002      	beq.n	8012d46 <tcp_write+0x67e>
    pbuf_free(concat_p);
 8012d40:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012d42:	f7fa fed5 	bl	800daf0 <pbuf_free>
  }
  if (queue != NULL) {
 8012d46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d002      	beq.n	8012d52 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8012d4c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012d4e:	f7fc fb53 	bl	800f3f8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00e      	beq.n	8012d7a <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d10a      	bne.n	8012d7a <tcp_write+0x6b2>
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d106      	bne.n	8012d7a <tcp_write+0x6b2>
 8012d6c:	4b06      	ldr	r3, [pc, #24]	; (8012d88 <tcp_write+0x6c0>)
 8012d6e:	f44f 724a 	mov.w	r2, #808	; 0x328
 8012d72:	4906      	ldr	r1, [pc, #24]	; (8012d8c <tcp_write+0x6c4>)
 8012d74:	4806      	ldr	r0, [pc, #24]	; (8012d90 <tcp_write+0x6c8>)
 8012d76:	f006 fbf9 	bl	801956c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012d7e:	4618      	mov	r0, r3
 8012d80:	375c      	adds	r7, #92	; 0x5c
 8012d82:	46bd      	mov	sp, r7
 8012d84:	bd90      	pop	{r4, r7, pc}
 8012d86:	bf00      	nop
 8012d88:	0801cd50 	.word	0x0801cd50
 8012d8c:	0801d0c4 	.word	0x0801d0c4
 8012d90:	0801cda4 	.word	0x0801cda4

08012d94 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012d94:	b590      	push	{r4, r7, lr}
 8012d96:	b08b      	sub	sp, #44	; 0x2c
 8012d98:	af02      	add	r7, sp, #8
 8012d9a:	6078      	str	r0, [r7, #4]
 8012d9c:	460b      	mov	r3, r1
 8012d9e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012da0:	2300      	movs	r3, #0
 8012da2:	61fb      	str	r3, [r7, #28]
 8012da4:	2300      	movs	r3, #0
 8012da6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012da8:	2300      	movs	r3, #0
 8012daa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d106      	bne.n	8012dc0 <tcp_split_unsent_seg+0x2c>
 8012db2:	4b95      	ldr	r3, [pc, #596]	; (8013008 <tcp_split_unsent_seg+0x274>)
 8012db4:	f240 324b 	movw	r2, #843	; 0x34b
 8012db8:	4994      	ldr	r1, [pc, #592]	; (801300c <tcp_split_unsent_seg+0x278>)
 8012dba:	4895      	ldr	r0, [pc, #596]	; (8013010 <tcp_split_unsent_seg+0x27c>)
 8012dbc:	f006 fbd6 	bl	801956c <iprintf>

  useg = pcb->unsent;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dc4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d102      	bne.n	8012dd2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8012dd0:	e116      	b.n	8013000 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012dd2:	887b      	ldrh	r3, [r7, #2]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d109      	bne.n	8012dec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012dd8:	4b8b      	ldr	r3, [pc, #556]	; (8013008 <tcp_split_unsent_seg+0x274>)
 8012dda:	f240 3253 	movw	r2, #851	; 0x353
 8012dde:	498d      	ldr	r1, [pc, #564]	; (8013014 <tcp_split_unsent_seg+0x280>)
 8012de0:	488b      	ldr	r0, [pc, #556]	; (8013010 <tcp_split_unsent_seg+0x27c>)
 8012de2:	f006 fbc3 	bl	801956c <iprintf>
    return ERR_VAL;
 8012de6:	f06f 0305 	mvn.w	r3, #5
 8012dea:	e109      	b.n	8013000 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	891b      	ldrh	r3, [r3, #8]
 8012df0:	887a      	ldrh	r2, [r7, #2]
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d301      	bcc.n	8012dfa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012df6:	2300      	movs	r3, #0
 8012df8:	e102      	b.n	8013000 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012dfe:	887a      	ldrh	r2, [r7, #2]
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d906      	bls.n	8012e12 <tcp_split_unsent_seg+0x7e>
 8012e04:	4b80      	ldr	r3, [pc, #512]	; (8013008 <tcp_split_unsent_seg+0x274>)
 8012e06:	f240 325b 	movw	r2, #859	; 0x35b
 8012e0a:	4983      	ldr	r1, [pc, #524]	; (8013018 <tcp_split_unsent_seg+0x284>)
 8012e0c:	4880      	ldr	r0, [pc, #512]	; (8013010 <tcp_split_unsent_seg+0x27c>)
 8012e0e:	f006 fbad 	bl	801956c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012e12:	697b      	ldr	r3, [r7, #20]
 8012e14:	891b      	ldrh	r3, [r3, #8]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d106      	bne.n	8012e28 <tcp_split_unsent_seg+0x94>
 8012e1a:	4b7b      	ldr	r3, [pc, #492]	; (8013008 <tcp_split_unsent_seg+0x274>)
 8012e1c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012e20:	497e      	ldr	r1, [pc, #504]	; (801301c <tcp_split_unsent_seg+0x288>)
 8012e22:	487b      	ldr	r0, [pc, #492]	; (8013010 <tcp_split_unsent_seg+0x27c>)
 8012e24:	f006 fba2 	bl	801956c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	7a9b      	ldrb	r3, [r3, #10]
 8012e2c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012e2e:	7bfb      	ldrb	r3, [r7, #15]
 8012e30:	009b      	lsls	r3, r3, #2
 8012e32:	b2db      	uxtb	r3, r3
 8012e34:	f003 0304 	and.w	r3, r3, #4
 8012e38:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	891a      	ldrh	r2, [r3, #8]
 8012e3e:	887b      	ldrh	r3, [r7, #2]
 8012e40:	1ad3      	subs	r3, r2, r3
 8012e42:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012e44:	7bbb      	ldrb	r3, [r7, #14]
 8012e46:	b29a      	uxth	r2, r3
 8012e48:	89bb      	ldrh	r3, [r7, #12]
 8012e4a:	4413      	add	r3, r2
 8012e4c:	b29b      	uxth	r3, r3
 8012e4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e52:	4619      	mov	r1, r3
 8012e54:	2036      	movs	r0, #54	; 0x36
 8012e56:	f7fa fb6b 	bl	800d530 <pbuf_alloc>
 8012e5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	f000 80b7 	beq.w	8012fd2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	891a      	ldrh	r2, [r3, #8]
 8012e6a:	697b      	ldr	r3, [r7, #20]
 8012e6c:	891b      	ldrh	r3, [r3, #8]
 8012e6e:	1ad3      	subs	r3, r2, r3
 8012e70:	b29a      	uxth	r2, r3
 8012e72:	887b      	ldrh	r3, [r7, #2]
 8012e74:	4413      	add	r3, r2
 8012e76:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012e78:	697b      	ldr	r3, [r7, #20]
 8012e7a:	6858      	ldr	r0, [r3, #4]
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	685a      	ldr	r2, [r3, #4]
 8012e80:	7bbb      	ldrb	r3, [r7, #14]
 8012e82:	18d1      	adds	r1, r2, r3
 8012e84:	897b      	ldrh	r3, [r7, #10]
 8012e86:	89ba      	ldrh	r2, [r7, #12]
 8012e88:	f7fb f838 	bl	800defc <pbuf_copy_partial>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	461a      	mov	r2, r3
 8012e90:	89bb      	ldrh	r3, [r7, #12]
 8012e92:	4293      	cmp	r3, r2
 8012e94:	f040 809f 	bne.w	8012fd6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012e98:	697b      	ldr	r3, [r7, #20]
 8012e9a:	68db      	ldr	r3, [r3, #12]
 8012e9c:	899b      	ldrh	r3, [r3, #12]
 8012e9e:	b29b      	uxth	r3, r3
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7f9 fa3b 	bl	800c31c <lwip_htons>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012eae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012eb4:	7efb      	ldrb	r3, [r7, #27]
 8012eb6:	f003 0308 	and.w	r3, r3, #8
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d007      	beq.n	8012ece <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012ebe:	7efb      	ldrb	r3, [r7, #27]
 8012ec0:	f023 0308 	bic.w	r3, r3, #8
 8012ec4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012ec6:	7ebb      	ldrb	r3, [r7, #26]
 8012ec8:	f043 0308 	orr.w	r3, r3, #8
 8012ecc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012ece:	7efb      	ldrb	r3, [r7, #27]
 8012ed0:	f003 0301 	and.w	r3, r3, #1
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d007      	beq.n	8012ee8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012ed8:	7efb      	ldrb	r3, [r7, #27]
 8012eda:	f023 0301 	bic.w	r3, r3, #1
 8012ede:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012ee0:	7ebb      	ldrb	r3, [r7, #26]
 8012ee2:	f043 0301 	orr.w	r3, r3, #1
 8012ee6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	68db      	ldr	r3, [r3, #12]
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f7f9 fa29 	bl	800c346 <lwip_htonl>
 8012ef4:	4602      	mov	r2, r0
 8012ef6:	887b      	ldrh	r3, [r7, #2]
 8012ef8:	18d1      	adds	r1, r2, r3
 8012efa:	7eba      	ldrb	r2, [r7, #26]
 8012efc:	7bfb      	ldrb	r3, [r7, #15]
 8012efe:	9300      	str	r3, [sp, #0]
 8012f00:	460b      	mov	r3, r1
 8012f02:	6939      	ldr	r1, [r7, #16]
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f7ff fa4d 	bl	80123a4 <tcp_create_segment>
 8012f0a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d063      	beq.n	8012fda <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	685b      	ldr	r3, [r3, #4]
 8012f16:	4618      	mov	r0, r3
 8012f18:	f7fa fe78 	bl	800dc0c <pbuf_clen>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	461a      	mov	r2, r3
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f26:	1a9b      	subs	r3, r3, r2
 8012f28:	b29a      	uxth	r2, r3
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012f30:	697b      	ldr	r3, [r7, #20]
 8012f32:	6858      	ldr	r0, [r3, #4]
 8012f34:	697b      	ldr	r3, [r7, #20]
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	891a      	ldrh	r2, [r3, #8]
 8012f3a:	89bb      	ldrh	r3, [r7, #12]
 8012f3c:	1ad3      	subs	r3, r2, r3
 8012f3e:	b29b      	uxth	r3, r3
 8012f40:	4619      	mov	r1, r3
 8012f42:	f7fa fc4f 	bl	800d7e4 <pbuf_realloc>
  useg->len -= remainder;
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	891a      	ldrh	r2, [r3, #8]
 8012f4a:	89bb      	ldrh	r3, [r7, #12]
 8012f4c:	1ad3      	subs	r3, r2, r3
 8012f4e:	b29a      	uxth	r2, r3
 8012f50:	697b      	ldr	r3, [r7, #20]
 8012f52:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	68db      	ldr	r3, [r3, #12]
 8012f58:	899b      	ldrh	r3, [r3, #12]
 8012f5a:	b29c      	uxth	r4, r3
 8012f5c:	7efb      	ldrb	r3, [r7, #27]
 8012f5e:	b29b      	uxth	r3, r3
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7f9 f9db 	bl	800c31c <lwip_htons>
 8012f66:	4603      	mov	r3, r0
 8012f68:	461a      	mov	r2, r3
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	68db      	ldr	r3, [r3, #12]
 8012f6e:	4322      	orrs	r2, r4
 8012f70:	b292      	uxth	r2, r2
 8012f72:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	685b      	ldr	r3, [r3, #4]
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fa fe47 	bl	800dc0c <pbuf_clen>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	461a      	mov	r2, r3
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f88:	4413      	add	r3, r2
 8012f8a:	b29a      	uxth	r2, r3
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012f92:	69fb      	ldr	r3, [r7, #28]
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	4618      	mov	r0, r3
 8012f98:	f7fa fe38 	bl	800dc0c <pbuf_clen>
 8012f9c:	4603      	mov	r3, r0
 8012f9e:	461a      	mov	r2, r3
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012fa6:	4413      	add	r3, r2
 8012fa8:	b29a      	uxth	r2, r3
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	681a      	ldr	r2, [r3, #0]
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	69fa      	ldr	r2, [r7, #28]
 8012fbc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012fbe:	69fb      	ldr	r3, [r7, #28]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d103      	bne.n	8012fce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2200      	movs	r2, #0
 8012fca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	e016      	b.n	8013000 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012fd2:	bf00      	nop
 8012fd4:	e002      	b.n	8012fdc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012fd6:	bf00      	nop
 8012fd8:	e000      	b.n	8012fdc <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012fda:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012fdc:	69fb      	ldr	r3, [r7, #28]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d006      	beq.n	8012ff0 <tcp_split_unsent_seg+0x25c>
 8012fe2:	4b09      	ldr	r3, [pc, #36]	; (8013008 <tcp_split_unsent_seg+0x274>)
 8012fe4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012fe8:	490d      	ldr	r1, [pc, #52]	; (8013020 <tcp_split_unsent_seg+0x28c>)
 8012fea:	4809      	ldr	r0, [pc, #36]	; (8013010 <tcp_split_unsent_seg+0x27c>)
 8012fec:	f006 fabe 	bl	801956c <iprintf>
  if (p != NULL) {
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d002      	beq.n	8012ffc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012ff6:	6938      	ldr	r0, [r7, #16]
 8012ff8:	f7fa fd7a 	bl	800daf0 <pbuf_free>
  }

  return ERR_MEM;
 8012ffc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013000:	4618      	mov	r0, r3
 8013002:	3724      	adds	r7, #36	; 0x24
 8013004:	46bd      	mov	sp, r7
 8013006:	bd90      	pop	{r4, r7, pc}
 8013008:	0801cd50 	.word	0x0801cd50
 801300c:	0801d0e4 	.word	0x0801d0e4
 8013010:	0801cda4 	.word	0x0801cda4
 8013014:	0801d108 	.word	0x0801d108
 8013018:	0801d12c 	.word	0x0801d12c
 801301c:	0801d13c 	.word	0x0801d13c
 8013020:	0801d14c 	.word	0x0801d14c

08013024 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013024:	b590      	push	{r4, r7, lr}
 8013026:	b085      	sub	sp, #20
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d106      	bne.n	8013040 <tcp_send_fin+0x1c>
 8013032:	4b21      	ldr	r3, [pc, #132]	; (80130b8 <tcp_send_fin+0x94>)
 8013034:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013038:	4920      	ldr	r1, [pc, #128]	; (80130bc <tcp_send_fin+0x98>)
 801303a:	4821      	ldr	r0, [pc, #132]	; (80130c0 <tcp_send_fin+0x9c>)
 801303c:	f006 fa96 	bl	801956c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013044:	2b00      	cmp	r3, #0
 8013046:	d02e      	beq.n	80130a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801304c:	60fb      	str	r3, [r7, #12]
 801304e:	e002      	b.n	8013056 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d1f8      	bne.n	8013050 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	68db      	ldr	r3, [r3, #12]
 8013062:	899b      	ldrh	r3, [r3, #12]
 8013064:	b29b      	uxth	r3, r3
 8013066:	4618      	mov	r0, r3
 8013068:	f7f9 f958 	bl	800c31c <lwip_htons>
 801306c:	4603      	mov	r3, r0
 801306e:	b2db      	uxtb	r3, r3
 8013070:	f003 0307 	and.w	r3, r3, #7
 8013074:	2b00      	cmp	r3, #0
 8013076:	d116      	bne.n	80130a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	68db      	ldr	r3, [r3, #12]
 801307c:	899b      	ldrh	r3, [r3, #12]
 801307e:	b29c      	uxth	r4, r3
 8013080:	2001      	movs	r0, #1
 8013082:	f7f9 f94b 	bl	800c31c <lwip_htons>
 8013086:	4603      	mov	r3, r0
 8013088:	461a      	mov	r2, r3
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	68db      	ldr	r3, [r3, #12]
 801308e:	4322      	orrs	r2, r4
 8013090:	b292      	uxth	r2, r2
 8013092:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	8b5b      	ldrh	r3, [r3, #26]
 8013098:	f043 0320 	orr.w	r3, r3, #32
 801309c:	b29a      	uxth	r2, r3
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80130a2:	2300      	movs	r3, #0
 80130a4:	e004      	b.n	80130b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80130a6:	2101      	movs	r1, #1
 80130a8:	6878      	ldr	r0, [r7, #4]
 80130aa:	f000 f80b 	bl	80130c4 <tcp_enqueue_flags>
 80130ae:	4603      	mov	r3, r0
}
 80130b0:	4618      	mov	r0, r3
 80130b2:	3714      	adds	r7, #20
 80130b4:	46bd      	mov	sp, r7
 80130b6:	bd90      	pop	{r4, r7, pc}
 80130b8:	0801cd50 	.word	0x0801cd50
 80130bc:	0801d158 	.word	0x0801d158
 80130c0:	0801cda4 	.word	0x0801cda4

080130c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b08a      	sub	sp, #40	; 0x28
 80130c8:	af02      	add	r7, sp, #8
 80130ca:	6078      	str	r0, [r7, #4]
 80130cc:	460b      	mov	r3, r1
 80130ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80130d0:	2300      	movs	r3, #0
 80130d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80130d4:	2300      	movs	r3, #0
 80130d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80130d8:	78fb      	ldrb	r3, [r7, #3]
 80130da:	f003 0303 	and.w	r3, r3, #3
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d106      	bne.n	80130f0 <tcp_enqueue_flags+0x2c>
 80130e2:	4b67      	ldr	r3, [pc, #412]	; (8013280 <tcp_enqueue_flags+0x1bc>)
 80130e4:	f240 4212 	movw	r2, #1042	; 0x412
 80130e8:	4966      	ldr	r1, [pc, #408]	; (8013284 <tcp_enqueue_flags+0x1c0>)
 80130ea:	4867      	ldr	r0, [pc, #412]	; (8013288 <tcp_enqueue_flags+0x1c4>)
 80130ec:	f006 fa3e 	bl	801956c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d106      	bne.n	8013104 <tcp_enqueue_flags+0x40>
 80130f6:	4b62      	ldr	r3, [pc, #392]	; (8013280 <tcp_enqueue_flags+0x1bc>)
 80130f8:	f240 4213 	movw	r2, #1043	; 0x413
 80130fc:	4963      	ldr	r1, [pc, #396]	; (801328c <tcp_enqueue_flags+0x1c8>)
 80130fe:	4862      	ldr	r0, [pc, #392]	; (8013288 <tcp_enqueue_flags+0x1c4>)
 8013100:	f006 fa34 	bl	801956c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013104:	78fb      	ldrb	r3, [r7, #3]
 8013106:	f003 0302 	and.w	r3, r3, #2
 801310a:	2b00      	cmp	r3, #0
 801310c:	d001      	beq.n	8013112 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801310e:	2301      	movs	r3, #1
 8013110:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013112:	7ffb      	ldrb	r3, [r7, #31]
 8013114:	009b      	lsls	r3, r3, #2
 8013116:	b2db      	uxtb	r3, r3
 8013118:	f003 0304 	and.w	r3, r3, #4
 801311c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801311e:	7dfb      	ldrb	r3, [r7, #23]
 8013120:	b29b      	uxth	r3, r3
 8013122:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013126:	4619      	mov	r1, r3
 8013128:	2036      	movs	r0, #54	; 0x36
 801312a:	f7fa fa01 	bl	800d530 <pbuf_alloc>
 801312e:	6138      	str	r0, [r7, #16]
 8013130:	693b      	ldr	r3, [r7, #16]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d109      	bne.n	801314a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	8b5b      	ldrh	r3, [r3, #26]
 801313a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801313e:	b29a      	uxth	r2, r3
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013144:	f04f 33ff 	mov.w	r3, #4294967295
 8013148:	e095      	b.n	8013276 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	895a      	ldrh	r2, [r3, #10]
 801314e:	7dfb      	ldrb	r3, [r7, #23]
 8013150:	b29b      	uxth	r3, r3
 8013152:	429a      	cmp	r2, r3
 8013154:	d206      	bcs.n	8013164 <tcp_enqueue_flags+0xa0>
 8013156:	4b4a      	ldr	r3, [pc, #296]	; (8013280 <tcp_enqueue_flags+0x1bc>)
 8013158:	f240 423a 	movw	r2, #1082	; 0x43a
 801315c:	494c      	ldr	r1, [pc, #304]	; (8013290 <tcp_enqueue_flags+0x1cc>)
 801315e:	484a      	ldr	r0, [pc, #296]	; (8013288 <tcp_enqueue_flags+0x1c4>)
 8013160:	f006 fa04 	bl	801956c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013168:	78fa      	ldrb	r2, [r7, #3]
 801316a:	7ffb      	ldrb	r3, [r7, #31]
 801316c:	9300      	str	r3, [sp, #0]
 801316e:	460b      	mov	r3, r1
 8013170:	6939      	ldr	r1, [r7, #16]
 8013172:	6878      	ldr	r0, [r7, #4]
 8013174:	f7ff f916 	bl	80123a4 <tcp_create_segment>
 8013178:	60f8      	str	r0, [r7, #12]
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d109      	bne.n	8013194 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	8b5b      	ldrh	r3, [r3, #26]
 8013184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013188:	b29a      	uxth	r2, r3
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801318e:	f04f 33ff 	mov.w	r3, #4294967295
 8013192:	e070      	b.n	8013276 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	f003 0303 	and.w	r3, r3, #3
 801319c:	2b00      	cmp	r3, #0
 801319e:	d006      	beq.n	80131ae <tcp_enqueue_flags+0xea>
 80131a0:	4b37      	ldr	r3, [pc, #220]	; (8013280 <tcp_enqueue_flags+0x1bc>)
 80131a2:	f240 4242 	movw	r2, #1090	; 0x442
 80131a6:	493b      	ldr	r1, [pc, #236]	; (8013294 <tcp_enqueue_flags+0x1d0>)
 80131a8:	4837      	ldr	r0, [pc, #220]	; (8013288 <tcp_enqueue_flags+0x1c4>)
 80131aa:	f006 f9df 	bl	801956c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	891b      	ldrh	r3, [r3, #8]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d006      	beq.n	80131c4 <tcp_enqueue_flags+0x100>
 80131b6:	4b32      	ldr	r3, [pc, #200]	; (8013280 <tcp_enqueue_flags+0x1bc>)
 80131b8:	f240 4243 	movw	r2, #1091	; 0x443
 80131bc:	4936      	ldr	r1, [pc, #216]	; (8013298 <tcp_enqueue_flags+0x1d4>)
 80131be:	4832      	ldr	r0, [pc, #200]	; (8013288 <tcp_enqueue_flags+0x1c4>)
 80131c0:	f006 f9d4 	bl	801956c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d103      	bne.n	80131d4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	68fa      	ldr	r2, [r7, #12]
 80131d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80131d2:	e00d      	b.n	80131f0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131d8:	61bb      	str	r3, [r7, #24]
 80131da:	e002      	b.n	80131e2 <tcp_enqueue_flags+0x11e>
 80131dc:	69bb      	ldr	r3, [r7, #24]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	61bb      	str	r3, [r7, #24]
 80131e2:	69bb      	ldr	r3, [r7, #24]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d1f8      	bne.n	80131dc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80131ea:	69bb      	ldr	r3, [r7, #24]
 80131ec:	68fa      	ldr	r2, [r7, #12]
 80131ee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2200      	movs	r2, #0
 80131f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80131f8:	78fb      	ldrb	r3, [r7, #3]
 80131fa:	f003 0302 	and.w	r3, r3, #2
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d104      	bne.n	801320c <tcp_enqueue_flags+0x148>
 8013202:	78fb      	ldrb	r3, [r7, #3]
 8013204:	f003 0301 	and.w	r3, r3, #1
 8013208:	2b00      	cmp	r3, #0
 801320a:	d004      	beq.n	8013216 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013210:	1c5a      	adds	r2, r3, #1
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013216:	78fb      	ldrb	r3, [r7, #3]
 8013218:	f003 0301 	and.w	r3, r3, #1
 801321c:	2b00      	cmp	r3, #0
 801321e:	d006      	beq.n	801322e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	8b5b      	ldrh	r3, [r3, #26]
 8013224:	f043 0320 	orr.w	r3, r3, #32
 8013228:	b29a      	uxth	r2, r3
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	685b      	ldr	r3, [r3, #4]
 8013232:	4618      	mov	r0, r3
 8013234:	f7fa fcea 	bl	800dc0c <pbuf_clen>
 8013238:	4603      	mov	r3, r0
 801323a:	461a      	mov	r2, r3
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013242:	4413      	add	r3, r2
 8013244:	b29a      	uxth	r2, r3
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013252:	2b00      	cmp	r3, #0
 8013254:	d00e      	beq.n	8013274 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801325a:	2b00      	cmp	r3, #0
 801325c:	d10a      	bne.n	8013274 <tcp_enqueue_flags+0x1b0>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013262:	2b00      	cmp	r3, #0
 8013264:	d106      	bne.n	8013274 <tcp_enqueue_flags+0x1b0>
 8013266:	4b06      	ldr	r3, [pc, #24]	; (8013280 <tcp_enqueue_flags+0x1bc>)
 8013268:	f240 4266 	movw	r2, #1126	; 0x466
 801326c:	490b      	ldr	r1, [pc, #44]	; (801329c <tcp_enqueue_flags+0x1d8>)
 801326e:	4806      	ldr	r0, [pc, #24]	; (8013288 <tcp_enqueue_flags+0x1c4>)
 8013270:	f006 f97c 	bl	801956c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013274:	2300      	movs	r3, #0
}
 8013276:	4618      	mov	r0, r3
 8013278:	3720      	adds	r7, #32
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	0801cd50 	.word	0x0801cd50
 8013284:	0801d174 	.word	0x0801d174
 8013288:	0801cda4 	.word	0x0801cda4
 801328c:	0801d1cc 	.word	0x0801d1cc
 8013290:	0801d1ec 	.word	0x0801d1ec
 8013294:	0801d228 	.word	0x0801d228
 8013298:	0801d240 	.word	0x0801d240
 801329c:	0801d26c 	.word	0x0801d26c

080132a0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80132a0:	b5b0      	push	{r4, r5, r7, lr}
 80132a2:	b08a      	sub	sp, #40	; 0x28
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d106      	bne.n	80132bc <tcp_output+0x1c>
 80132ae:	4ba0      	ldr	r3, [pc, #640]	; (8013530 <tcp_output+0x290>)
 80132b0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80132b4:	499f      	ldr	r1, [pc, #636]	; (8013534 <tcp_output+0x294>)
 80132b6:	48a0      	ldr	r0, [pc, #640]	; (8013538 <tcp_output+0x298>)
 80132b8:	f006 f958 	bl	801956c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	7d1b      	ldrb	r3, [r3, #20]
 80132c0:	2b01      	cmp	r3, #1
 80132c2:	d106      	bne.n	80132d2 <tcp_output+0x32>
 80132c4:	4b9a      	ldr	r3, [pc, #616]	; (8013530 <tcp_output+0x290>)
 80132c6:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80132ca:	499c      	ldr	r1, [pc, #624]	; (801353c <tcp_output+0x29c>)
 80132cc:	489a      	ldr	r0, [pc, #616]	; (8013538 <tcp_output+0x298>)
 80132ce:	f006 f94d 	bl	801956c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80132d2:	4b9b      	ldr	r3, [pc, #620]	; (8013540 <tcp_output+0x2a0>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	687a      	ldr	r2, [r7, #4]
 80132d8:	429a      	cmp	r2, r3
 80132da:	d101      	bne.n	80132e0 <tcp_output+0x40>
    return ERR_OK;
 80132dc:	2300      	movs	r3, #0
 80132de:	e1d2      	b.n	8013686 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80132ec:	429a      	cmp	r2, r3
 80132ee:	d203      	bcs.n	80132f8 <tcp_output+0x58>
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80132f6:	e002      	b.n	80132fe <tcp_output+0x5e>
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80132fe:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013304:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013308:	2b00      	cmp	r3, #0
 801330a:	d10b      	bne.n	8013324 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	8b5b      	ldrh	r3, [r3, #26]
 8013310:	f003 0302 	and.w	r3, r3, #2
 8013314:	2b00      	cmp	r3, #0
 8013316:	f000 81a9 	beq.w	801366c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801331a:	6878      	ldr	r0, [r7, #4]
 801331c:	f000 fdd6 	bl	8013ecc <tcp_send_empty_ack>
 8013320:	4603      	mov	r3, r0
 8013322:	e1b0      	b.n	8013686 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013324:	6879      	ldr	r1, [r7, #4]
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	3304      	adds	r3, #4
 801332a:	461a      	mov	r2, r3
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f7ff f81d 	bl	801236c <tcp_route>
 8013332:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013334:	697b      	ldr	r3, [r7, #20]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d102      	bne.n	8013340 <tcp_output+0xa0>
    return ERR_RTE;
 801333a:	f06f 0303 	mvn.w	r3, #3
 801333e:	e1a2      	b.n	8013686 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d003      	beq.n	801334e <tcp_output+0xae>
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d111      	bne.n	8013372 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d002      	beq.n	801335a <tcp_output+0xba>
 8013354:	697b      	ldr	r3, [r7, #20]
 8013356:	3304      	adds	r3, #4
 8013358:	e000      	b.n	801335c <tcp_output+0xbc>
 801335a:	2300      	movs	r3, #0
 801335c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801335e:	693b      	ldr	r3, [r7, #16]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d102      	bne.n	801336a <tcp_output+0xca>
      return ERR_RTE;
 8013364:	f06f 0303 	mvn.w	r3, #3
 8013368:	e18d      	b.n	8013686 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801336a:	693b      	ldr	r3, [r7, #16]
 801336c:	681a      	ldr	r2, [r3, #0]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013374:	68db      	ldr	r3, [r3, #12]
 8013376:	685b      	ldr	r3, [r3, #4]
 8013378:	4618      	mov	r0, r3
 801337a:	f7f8 ffe4 	bl	800c346 <lwip_htonl>
 801337e:	4602      	mov	r2, r0
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013384:	1ad3      	subs	r3, r2, r3
 8013386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013388:	8912      	ldrh	r2, [r2, #8]
 801338a:	4413      	add	r3, r2
 801338c:	69ba      	ldr	r2, [r7, #24]
 801338e:	429a      	cmp	r2, r3
 8013390:	d227      	bcs.n	80133e2 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013398:	461a      	mov	r2, r3
 801339a:	69bb      	ldr	r3, [r7, #24]
 801339c:	4293      	cmp	r3, r2
 801339e:	d114      	bne.n	80133ca <tcp_output+0x12a>
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d110      	bne.n	80133ca <tcp_output+0x12a>
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d10b      	bne.n	80133ca <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2200      	movs	r2, #0
 80133b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	2201      	movs	r2, #1
 80133be:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	2200      	movs	r2, #0
 80133c6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	8b5b      	ldrh	r3, [r3, #26]
 80133ce:	f003 0302 	and.w	r3, r3, #2
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	f000 814c 	beq.w	8013670 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	f000 fd77 	bl	8013ecc <tcp_send_empty_ack>
 80133de:	4603      	mov	r3, r0
 80133e0:	e151      	b.n	8013686 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2200      	movs	r2, #0
 80133e6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133ee:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80133f0:	6a3b      	ldr	r3, [r7, #32]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	f000 811b 	beq.w	801362e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 80133f8:	e002      	b.n	8013400 <tcp_output+0x160>
 80133fa:	6a3b      	ldr	r3, [r7, #32]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	623b      	str	r3, [r7, #32]
 8013400:	6a3b      	ldr	r3, [r7, #32]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d1f8      	bne.n	80133fa <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013408:	e111      	b.n	801362e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801340c:	68db      	ldr	r3, [r3, #12]
 801340e:	899b      	ldrh	r3, [r3, #12]
 8013410:	b29b      	uxth	r3, r3
 8013412:	4618      	mov	r0, r3
 8013414:	f7f8 ff82 	bl	800c31c <lwip_htons>
 8013418:	4603      	mov	r3, r0
 801341a:	b2db      	uxtb	r3, r3
 801341c:	f003 0304 	and.w	r3, r3, #4
 8013420:	2b00      	cmp	r3, #0
 8013422:	d006      	beq.n	8013432 <tcp_output+0x192>
 8013424:	4b42      	ldr	r3, [pc, #264]	; (8013530 <tcp_output+0x290>)
 8013426:	f240 5237 	movw	r2, #1335	; 0x537
 801342a:	4946      	ldr	r1, [pc, #280]	; (8013544 <tcp_output+0x2a4>)
 801342c:	4842      	ldr	r0, [pc, #264]	; (8013538 <tcp_output+0x298>)
 801342e:	f006 f89d 	bl	801956c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013436:	2b00      	cmp	r3, #0
 8013438:	d01f      	beq.n	801347a <tcp_output+0x1da>
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	8b5b      	ldrh	r3, [r3, #26]
 801343e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013442:	2b00      	cmp	r3, #0
 8013444:	d119      	bne.n	801347a <tcp_output+0x1da>
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801344a:	2b00      	cmp	r3, #0
 801344c:	d00b      	beq.n	8013466 <tcp_output+0x1c6>
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d110      	bne.n	801347a <tcp_output+0x1da>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801345c:	891a      	ldrh	r2, [r3, #8]
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013462:	429a      	cmp	r2, r3
 8013464:	d209      	bcs.n	801347a <tcp_output+0x1da>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801346c:	2b00      	cmp	r3, #0
 801346e:	d004      	beq.n	801347a <tcp_output+0x1da>
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013476:	2b08      	cmp	r3, #8
 8013478:	d901      	bls.n	801347e <tcp_output+0x1de>
 801347a:	2301      	movs	r3, #1
 801347c:	e000      	b.n	8013480 <tcp_output+0x1e0>
 801347e:	2300      	movs	r3, #0
 8013480:	2b00      	cmp	r3, #0
 8013482:	d106      	bne.n	8013492 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	8b5b      	ldrh	r3, [r3, #26]
 8013488:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801348c:	2b00      	cmp	r3, #0
 801348e:	f000 80e3 	beq.w	8013658 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	7d1b      	ldrb	r3, [r3, #20]
 8013496:	2b02      	cmp	r3, #2
 8013498:	d00d      	beq.n	80134b6 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801349c:	68db      	ldr	r3, [r3, #12]
 801349e:	899b      	ldrh	r3, [r3, #12]
 80134a0:	b29c      	uxth	r4, r3
 80134a2:	2010      	movs	r0, #16
 80134a4:	f7f8 ff3a 	bl	800c31c <lwip_htons>
 80134a8:	4603      	mov	r3, r0
 80134aa:	461a      	mov	r2, r3
 80134ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ae:	68db      	ldr	r3, [r3, #12]
 80134b0:	4322      	orrs	r2, r4
 80134b2:	b292      	uxth	r2, r2
 80134b4:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80134b6:	697a      	ldr	r2, [r7, #20]
 80134b8:	6879      	ldr	r1, [r7, #4]
 80134ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134bc:	f000 f908 	bl	80136d0 <tcp_output_segment>
 80134c0:	4603      	mov	r3, r0
 80134c2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80134c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d009      	beq.n	80134e0 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	8b5b      	ldrh	r3, [r3, #26]
 80134d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134d4:	b29a      	uxth	r2, r3
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	835a      	strh	r2, [r3, #26]
      return err;
 80134da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134de:	e0d2      	b.n	8013686 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80134e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e2:	681a      	ldr	r2, [r3, #0]
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	7d1b      	ldrb	r3, [r3, #20]
 80134ec:	2b02      	cmp	r3, #2
 80134ee:	d006      	beq.n	80134fe <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	8b5b      	ldrh	r3, [r3, #26]
 80134f4:	f023 0303 	bic.w	r3, r3, #3
 80134f8:	b29a      	uxth	r2, r3
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80134fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013500:	68db      	ldr	r3, [r3, #12]
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	4618      	mov	r0, r3
 8013506:	f7f8 ff1e 	bl	800c346 <lwip_htonl>
 801350a:	4604      	mov	r4, r0
 801350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801350e:	891b      	ldrh	r3, [r3, #8]
 8013510:	461d      	mov	r5, r3
 8013512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013514:	68db      	ldr	r3, [r3, #12]
 8013516:	899b      	ldrh	r3, [r3, #12]
 8013518:	b29b      	uxth	r3, r3
 801351a:	4618      	mov	r0, r3
 801351c:	f7f8 fefe 	bl	800c31c <lwip_htons>
 8013520:	4603      	mov	r3, r0
 8013522:	b2db      	uxtb	r3, r3
 8013524:	f003 0303 	and.w	r3, r3, #3
 8013528:	2b00      	cmp	r3, #0
 801352a:	d00d      	beq.n	8013548 <tcp_output+0x2a8>
 801352c:	2301      	movs	r3, #1
 801352e:	e00c      	b.n	801354a <tcp_output+0x2aa>
 8013530:	0801cd50 	.word	0x0801cd50
 8013534:	0801d294 	.word	0x0801d294
 8013538:	0801cda4 	.word	0x0801cda4
 801353c:	0801d2ac 	.word	0x0801d2ac
 8013540:	20016e28 	.word	0x20016e28
 8013544:	0801d2d4 	.word	0x0801d2d4
 8013548:	2300      	movs	r3, #0
 801354a:	442b      	add	r3, r5
 801354c:	4423      	add	r3, r4
 801354e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013554:	68bb      	ldr	r3, [r7, #8]
 8013556:	1ad3      	subs	r3, r2, r3
 8013558:	2b00      	cmp	r3, #0
 801355a:	da02      	bge.n	8013562 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	68ba      	ldr	r2, [r7, #8]
 8013560:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013564:	891b      	ldrh	r3, [r3, #8]
 8013566:	461c      	mov	r4, r3
 8013568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801356a:	68db      	ldr	r3, [r3, #12]
 801356c:	899b      	ldrh	r3, [r3, #12]
 801356e:	b29b      	uxth	r3, r3
 8013570:	4618      	mov	r0, r3
 8013572:	f7f8 fed3 	bl	800c31c <lwip_htons>
 8013576:	4603      	mov	r3, r0
 8013578:	b2db      	uxtb	r3, r3
 801357a:	f003 0303 	and.w	r3, r3, #3
 801357e:	2b00      	cmp	r3, #0
 8013580:	d001      	beq.n	8013586 <tcp_output+0x2e6>
 8013582:	2301      	movs	r3, #1
 8013584:	e000      	b.n	8013588 <tcp_output+0x2e8>
 8013586:	2300      	movs	r3, #0
 8013588:	4423      	add	r3, r4
 801358a:	2b00      	cmp	r3, #0
 801358c:	d049      	beq.n	8013622 <tcp_output+0x382>
      seg->next = NULL;
 801358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013590:	2200      	movs	r2, #0
 8013592:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013598:	2b00      	cmp	r3, #0
 801359a:	d105      	bne.n	80135a8 <tcp_output+0x308>
        pcb->unacked = seg;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135a0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80135a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135a4:	623b      	str	r3, [r7, #32]
 80135a6:	e03f      	b.n	8013628 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80135a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135aa:	68db      	ldr	r3, [r3, #12]
 80135ac:	685b      	ldr	r3, [r3, #4]
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7f8 fec9 	bl	800c346 <lwip_htonl>
 80135b4:	4604      	mov	r4, r0
 80135b6:	6a3b      	ldr	r3, [r7, #32]
 80135b8:	68db      	ldr	r3, [r3, #12]
 80135ba:	685b      	ldr	r3, [r3, #4]
 80135bc:	4618      	mov	r0, r3
 80135be:	f7f8 fec2 	bl	800c346 <lwip_htonl>
 80135c2:	4603      	mov	r3, r0
 80135c4:	1ae3      	subs	r3, r4, r3
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	da24      	bge.n	8013614 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	3370      	adds	r3, #112	; 0x70
 80135ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80135d0:	e002      	b.n	80135d8 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80135d2:	69fb      	ldr	r3, [r7, #28]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80135d8:	69fb      	ldr	r3, [r7, #28]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d011      	beq.n	8013604 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80135e0:	69fb      	ldr	r3, [r7, #28]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	68db      	ldr	r3, [r3, #12]
 80135e6:	685b      	ldr	r3, [r3, #4]
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7f8 feac 	bl	800c346 <lwip_htonl>
 80135ee:	4604      	mov	r4, r0
 80135f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135f2:	68db      	ldr	r3, [r3, #12]
 80135f4:	685b      	ldr	r3, [r3, #4]
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7f8 fea5 	bl	800c346 <lwip_htonl>
 80135fc:	4603      	mov	r3, r0
 80135fe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013600:	2b00      	cmp	r3, #0
 8013602:	dbe6      	blt.n	80135d2 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8013604:	69fb      	ldr	r3, [r7, #28]
 8013606:	681a      	ldr	r2, [r3, #0]
 8013608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801360a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801360c:	69fb      	ldr	r3, [r7, #28]
 801360e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013610:	601a      	str	r2, [r3, #0]
 8013612:	e009      	b.n	8013628 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013614:	6a3b      	ldr	r3, [r7, #32]
 8013616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013618:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801361a:	6a3b      	ldr	r3, [r7, #32]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	623b      	str	r3, [r7, #32]
 8013620:	e002      	b.n	8013628 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013622:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013624:	f7fb fefc 	bl	800f420 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801362c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013630:	2b00      	cmp	r3, #0
 8013632:	d012      	beq.n	801365a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8013634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013636:	68db      	ldr	r3, [r3, #12]
 8013638:	685b      	ldr	r3, [r3, #4]
 801363a:	4618      	mov	r0, r3
 801363c:	f7f8 fe83 	bl	800c346 <lwip_htonl>
 8013640:	4602      	mov	r2, r0
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013646:	1ad3      	subs	r3, r2, r3
 8013648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801364a:	8912      	ldrh	r2, [r2, #8]
 801364c:	4413      	add	r3, r2
  while (seg != NULL &&
 801364e:	69ba      	ldr	r2, [r7, #24]
 8013650:	429a      	cmp	r2, r3
 8013652:	f4bf aeda 	bcs.w	801340a <tcp_output+0x16a>
 8013656:	e000      	b.n	801365a <tcp_output+0x3ba>
      break;
 8013658:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801365e:	2b00      	cmp	r3, #0
 8013660:	d108      	bne.n	8013674 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2200      	movs	r2, #0
 8013666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801366a:	e004      	b.n	8013676 <tcp_output+0x3d6>
    goto output_done;
 801366c:	bf00      	nop
 801366e:	e002      	b.n	8013676 <tcp_output+0x3d6>
    goto output_done;
 8013670:	bf00      	nop
 8013672:	e000      	b.n	8013676 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013674:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	8b5b      	ldrh	r3, [r3, #26]
 801367a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801367e:	b29a      	uxth	r2, r3
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013684:	2300      	movs	r3, #0
}
 8013686:	4618      	mov	r0, r3
 8013688:	3728      	adds	r7, #40	; 0x28
 801368a:	46bd      	mov	sp, r7
 801368c:	bdb0      	pop	{r4, r5, r7, pc}
 801368e:	bf00      	nop

08013690 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b082      	sub	sp, #8
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d106      	bne.n	80136ac <tcp_output_segment_busy+0x1c>
 801369e:	4b09      	ldr	r3, [pc, #36]	; (80136c4 <tcp_output_segment_busy+0x34>)
 80136a0:	f240 529a 	movw	r2, #1434	; 0x59a
 80136a4:	4908      	ldr	r1, [pc, #32]	; (80136c8 <tcp_output_segment_busy+0x38>)
 80136a6:	4809      	ldr	r0, [pc, #36]	; (80136cc <tcp_output_segment_busy+0x3c>)
 80136a8:	f005 ff60 	bl	801956c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	7b9b      	ldrb	r3, [r3, #14]
 80136b2:	2b01      	cmp	r3, #1
 80136b4:	d001      	beq.n	80136ba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80136b6:	2301      	movs	r3, #1
 80136b8:	e000      	b.n	80136bc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80136ba:	2300      	movs	r3, #0
}
 80136bc:	4618      	mov	r0, r3
 80136be:	3708      	adds	r7, #8
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}
 80136c4:	0801cd50 	.word	0x0801cd50
 80136c8:	0801d2ec 	.word	0x0801d2ec
 80136cc:	0801cda4 	.word	0x0801cda4

080136d0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80136d0:	b5b0      	push	{r4, r5, r7, lr}
 80136d2:	b08c      	sub	sp, #48	; 0x30
 80136d4:	af04      	add	r7, sp, #16
 80136d6:	60f8      	str	r0, [r7, #12]
 80136d8:	60b9      	str	r1, [r7, #8]
 80136da:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d106      	bne.n	80136f0 <tcp_output_segment+0x20>
 80136e2:	4b64      	ldr	r3, [pc, #400]	; (8013874 <tcp_output_segment+0x1a4>)
 80136e4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80136e8:	4963      	ldr	r1, [pc, #396]	; (8013878 <tcp_output_segment+0x1a8>)
 80136ea:	4864      	ldr	r0, [pc, #400]	; (801387c <tcp_output_segment+0x1ac>)
 80136ec:	f005 ff3e 	bl	801956c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d106      	bne.n	8013704 <tcp_output_segment+0x34>
 80136f6:	4b5f      	ldr	r3, [pc, #380]	; (8013874 <tcp_output_segment+0x1a4>)
 80136f8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80136fc:	4960      	ldr	r1, [pc, #384]	; (8013880 <tcp_output_segment+0x1b0>)
 80136fe:	485f      	ldr	r0, [pc, #380]	; (801387c <tcp_output_segment+0x1ac>)
 8013700:	f005 ff34 	bl	801956c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d106      	bne.n	8013718 <tcp_output_segment+0x48>
 801370a:	4b5a      	ldr	r3, [pc, #360]	; (8013874 <tcp_output_segment+0x1a4>)
 801370c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8013710:	495c      	ldr	r1, [pc, #368]	; (8013884 <tcp_output_segment+0x1b4>)
 8013712:	485a      	ldr	r0, [pc, #360]	; (801387c <tcp_output_segment+0x1ac>)
 8013714:	f005 ff2a 	bl	801956c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8013718:	68f8      	ldr	r0, [r7, #12]
 801371a:	f7ff ffb9 	bl	8013690 <tcp_output_segment_busy>
 801371e:	4603      	mov	r3, r0
 8013720:	2b00      	cmp	r3, #0
 8013722:	d001      	beq.n	8013728 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8013724:	2300      	movs	r3, #0
 8013726:	e0a0      	b.n	801386a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	68dc      	ldr	r4, [r3, #12]
 8013730:	4610      	mov	r0, r2
 8013732:	f7f8 fe08 	bl	800c346 <lwip_htonl>
 8013736:	4603      	mov	r3, r0
 8013738:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801373a:	68bb      	ldr	r3, [r7, #8]
 801373c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	68dc      	ldr	r4, [r3, #12]
 8013742:	4610      	mov	r0, r2
 8013744:	f7f8 fdea 	bl	800c31c <lwip_htons>
 8013748:	4603      	mov	r3, r0
 801374a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801374c:	68bb      	ldr	r3, [r7, #8]
 801374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013750:	68ba      	ldr	r2, [r7, #8]
 8013752:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013754:	441a      	add	r2, r3
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	68db      	ldr	r3, [r3, #12]
 801375e:	3314      	adds	r3, #20
 8013760:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	7a9b      	ldrb	r3, [r3, #10]
 8013766:	f003 0301 	and.w	r3, r3, #1
 801376a:	2b00      	cmp	r3, #0
 801376c:	d015      	beq.n	801379a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801376e:	68bb      	ldr	r3, [r7, #8]
 8013770:	3304      	adds	r3, #4
 8013772:	461a      	mov	r2, r3
 8013774:	6879      	ldr	r1, [r7, #4]
 8013776:	f44f 7006 	mov.w	r0, #536	; 0x218
 801377a:	f7fc fa33 	bl	800fbe4 <tcp_eff_send_mss_netif>
 801377e:	4603      	mov	r3, r0
 8013780:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013782:	8b7b      	ldrh	r3, [r7, #26]
 8013784:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013788:	4618      	mov	r0, r3
 801378a:	f7f8 fddc 	bl	800c346 <lwip_htonl>
 801378e:	4602      	mov	r2, r0
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013794:	69fb      	ldr	r3, [r7, #28]
 8013796:	3304      	adds	r3, #4
 8013798:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	da02      	bge.n	80137aa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	2200      	movs	r2, #0
 80137a8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80137aa:	68bb      	ldr	r3, [r7, #8]
 80137ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d10c      	bne.n	80137cc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80137b2:	4b35      	ldr	r3, [pc, #212]	; (8013888 <tcp_output_segment+0x1b8>)
 80137b4:	681a      	ldr	r2, [r3, #0]
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	68db      	ldr	r3, [r3, #12]
 80137be:	685b      	ldr	r3, [r3, #4]
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7f8 fdc0 	bl	800c346 <lwip_htonl>
 80137c6:	4602      	mov	r2, r0
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80137cc:	68fb      	ldr	r3, [r7, #12]
 80137ce:	68db      	ldr	r3, [r3, #12]
 80137d0:	461a      	mov	r2, r3
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	685b      	ldr	r3, [r3, #4]
 80137d6:	685b      	ldr	r3, [r3, #4]
 80137d8:	1ad3      	subs	r3, r2, r3
 80137da:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	685b      	ldr	r3, [r3, #4]
 80137e0:	8959      	ldrh	r1, [r3, #10]
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	685b      	ldr	r3, [r3, #4]
 80137e6:	8b3a      	ldrh	r2, [r7, #24]
 80137e8:	1a8a      	subs	r2, r1, r2
 80137ea:	b292      	uxth	r2, r2
 80137ec:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	685b      	ldr	r3, [r3, #4]
 80137f2:	8919      	ldrh	r1, [r3, #8]
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	685b      	ldr	r3, [r3, #4]
 80137f8:	8b3a      	ldrh	r2, [r7, #24]
 80137fa:	1a8a      	subs	r2, r1, r2
 80137fc:	b292      	uxth	r2, r2
 80137fe:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	685b      	ldr	r3, [r3, #4]
 8013804:	68fa      	ldr	r2, [r7, #12]
 8013806:	68d2      	ldr	r2, [r2, #12]
 8013808:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	68db      	ldr	r3, [r3, #12]
 801380e:	2200      	movs	r2, #0
 8013810:	741a      	strb	r2, [r3, #16]
 8013812:	2200      	movs	r2, #0
 8013814:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	68db      	ldr	r3, [r3, #12]
 801381a:	f103 0214 	add.w	r2, r3, #20
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	7a9b      	ldrb	r3, [r3, #10]
 8013822:	009b      	lsls	r3, r3, #2
 8013824:	f003 0304 	and.w	r3, r3, #4
 8013828:	4413      	add	r3, r2
 801382a:	69fa      	ldr	r2, [r7, #28]
 801382c:	429a      	cmp	r2, r3
 801382e:	d006      	beq.n	801383e <tcp_output_segment+0x16e>
 8013830:	4b10      	ldr	r3, [pc, #64]	; (8013874 <tcp_output_segment+0x1a4>)
 8013832:	f240 621c 	movw	r2, #1564	; 0x61c
 8013836:	4915      	ldr	r1, [pc, #84]	; (801388c <tcp_output_segment+0x1bc>)
 8013838:	4810      	ldr	r0, [pc, #64]	; (801387c <tcp_output_segment+0x1ac>)
 801383a:	f005 fe97 	bl	801956c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	6858      	ldr	r0, [r3, #4]
 8013842:	68b9      	ldr	r1, [r7, #8]
 8013844:	68bb      	ldr	r3, [r7, #8]
 8013846:	1d1c      	adds	r4, r3, #4
 8013848:	68bb      	ldr	r3, [r7, #8]
 801384a:	7add      	ldrb	r5, [r3, #11]
 801384c:	68bb      	ldr	r3, [r7, #8]
 801384e:	7a9b      	ldrb	r3, [r3, #10]
 8013850:	687a      	ldr	r2, [r7, #4]
 8013852:	9202      	str	r2, [sp, #8]
 8013854:	2206      	movs	r2, #6
 8013856:	9201      	str	r2, [sp, #4]
 8013858:	9300      	str	r3, [sp, #0]
 801385a:	462b      	mov	r3, r5
 801385c:	4622      	mov	r2, r4
 801385e:	f004 fc4b 	bl	80180f8 <ip4_output_if>
 8013862:	4603      	mov	r3, r0
 8013864:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013866:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801386a:	4618      	mov	r0, r3
 801386c:	3720      	adds	r7, #32
 801386e:	46bd      	mov	sp, r7
 8013870:	bdb0      	pop	{r4, r5, r7, pc}
 8013872:	bf00      	nop
 8013874:	0801cd50 	.word	0x0801cd50
 8013878:	0801d314 	.word	0x0801d314
 801387c:	0801cda4 	.word	0x0801cda4
 8013880:	0801d334 	.word	0x0801d334
 8013884:	0801d354 	.word	0x0801d354
 8013888:	20016e18 	.word	0x20016e18
 801388c:	0801d378 	.word	0x0801d378

08013890 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013890:	b5b0      	push	{r4, r5, r7, lr}
 8013892:	b084      	sub	sp, #16
 8013894:	af00      	add	r7, sp, #0
 8013896:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d106      	bne.n	80138ac <tcp_rexmit_rto_prepare+0x1c>
 801389e:	4b31      	ldr	r3, [pc, #196]	; (8013964 <tcp_rexmit_rto_prepare+0xd4>)
 80138a0:	f240 6263 	movw	r2, #1635	; 0x663
 80138a4:	4930      	ldr	r1, [pc, #192]	; (8013968 <tcp_rexmit_rto_prepare+0xd8>)
 80138a6:	4831      	ldr	r0, [pc, #196]	; (801396c <tcp_rexmit_rto_prepare+0xdc>)
 80138a8:	f005 fe60 	bl	801956c <iprintf>

  if (pcb->unacked == NULL) {
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d102      	bne.n	80138ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80138b4:	f06f 0305 	mvn.w	r3, #5
 80138b8:	e050      	b.n	801395c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138be:	60fb      	str	r3, [r7, #12]
 80138c0:	e00b      	b.n	80138da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80138c2:	68f8      	ldr	r0, [r7, #12]
 80138c4:	f7ff fee4 	bl	8013690 <tcp_output_segment_busy>
 80138c8:	4603      	mov	r3, r0
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d002      	beq.n	80138d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80138ce:	f06f 0305 	mvn.w	r3, #5
 80138d2:	e043      	b.n	801395c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	60fb      	str	r3, [r7, #12]
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d1ef      	bne.n	80138c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80138e2:	68f8      	ldr	r0, [r7, #12]
 80138e4:	f7ff fed4 	bl	8013690 <tcp_output_segment_busy>
 80138e8:	4603      	mov	r3, r0
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d002      	beq.n	80138f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80138ee:	f06f 0305 	mvn.w	r3, #5
 80138f2:	e033      	b.n	801395c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2200      	movs	r2, #0
 8013908:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	8b5b      	ldrh	r3, [r3, #26]
 801390e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013912:	b29a      	uxth	r2, r3
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	68db      	ldr	r3, [r3, #12]
 801391c:	685b      	ldr	r3, [r3, #4]
 801391e:	4618      	mov	r0, r3
 8013920:	f7f8 fd11 	bl	800c346 <lwip_htonl>
 8013924:	4604      	mov	r4, r0
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	891b      	ldrh	r3, [r3, #8]
 801392a:	461d      	mov	r5, r3
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	68db      	ldr	r3, [r3, #12]
 8013930:	899b      	ldrh	r3, [r3, #12]
 8013932:	b29b      	uxth	r3, r3
 8013934:	4618      	mov	r0, r3
 8013936:	f7f8 fcf1 	bl	800c31c <lwip_htons>
 801393a:	4603      	mov	r3, r0
 801393c:	b2db      	uxtb	r3, r3
 801393e:	f003 0303 	and.w	r3, r3, #3
 8013942:	2b00      	cmp	r3, #0
 8013944:	d001      	beq.n	801394a <tcp_rexmit_rto_prepare+0xba>
 8013946:	2301      	movs	r3, #1
 8013948:	e000      	b.n	801394c <tcp_rexmit_rto_prepare+0xbc>
 801394a:	2300      	movs	r3, #0
 801394c:	442b      	add	r3, r5
 801394e:	18e2      	adds	r2, r4, r3
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	2200      	movs	r2, #0
 8013958:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801395a:	2300      	movs	r3, #0
}
 801395c:	4618      	mov	r0, r3
 801395e:	3710      	adds	r7, #16
 8013960:	46bd      	mov	sp, r7
 8013962:	bdb0      	pop	{r4, r5, r7, pc}
 8013964:	0801cd50 	.word	0x0801cd50
 8013968:	0801d38c 	.word	0x0801d38c
 801396c:	0801cda4 	.word	0x0801cda4

08013970 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d106      	bne.n	801398c <tcp_rexmit_rto_commit+0x1c>
 801397e:	4b0d      	ldr	r3, [pc, #52]	; (80139b4 <tcp_rexmit_rto_commit+0x44>)
 8013980:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013984:	490c      	ldr	r1, [pc, #48]	; (80139b8 <tcp_rexmit_rto_commit+0x48>)
 8013986:	480d      	ldr	r0, [pc, #52]	; (80139bc <tcp_rexmit_rto_commit+0x4c>)
 8013988:	f005 fdf0 	bl	801956c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013992:	2bff      	cmp	r3, #255	; 0xff
 8013994:	d007      	beq.n	80139a6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801399c:	3301      	adds	r3, #1
 801399e:	b2da      	uxtb	r2, r3
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f7ff fc7a 	bl	80132a0 <tcp_output>
}
 80139ac:	bf00      	nop
 80139ae:	3708      	adds	r7, #8
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}
 80139b4:	0801cd50 	.word	0x0801cd50
 80139b8:	0801d3b0 	.word	0x0801d3b0
 80139bc:	0801cda4 	.word	0x0801cda4

080139c0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b082      	sub	sp, #8
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d106      	bne.n	80139dc <tcp_rexmit_rto+0x1c>
 80139ce:	4b0a      	ldr	r3, [pc, #40]	; (80139f8 <tcp_rexmit_rto+0x38>)
 80139d0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80139d4:	4909      	ldr	r1, [pc, #36]	; (80139fc <tcp_rexmit_rto+0x3c>)
 80139d6:	480a      	ldr	r0, [pc, #40]	; (8013a00 <tcp_rexmit_rto+0x40>)
 80139d8:	f005 fdc8 	bl	801956c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f7ff ff57 	bl	8013890 <tcp_rexmit_rto_prepare>
 80139e2:	4603      	mov	r3, r0
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d102      	bne.n	80139ee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80139e8:	6878      	ldr	r0, [r7, #4]
 80139ea:	f7ff ffc1 	bl	8013970 <tcp_rexmit_rto_commit>
  }
}
 80139ee:	bf00      	nop
 80139f0:	3708      	adds	r7, #8
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	0801cd50 	.word	0x0801cd50
 80139fc:	0801d3d4 	.word	0x0801d3d4
 8013a00:	0801cda4 	.word	0x0801cda4

08013a04 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013a04:	b590      	push	{r4, r7, lr}
 8013a06:	b085      	sub	sp, #20
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d106      	bne.n	8013a20 <tcp_rexmit+0x1c>
 8013a12:	4b2f      	ldr	r3, [pc, #188]	; (8013ad0 <tcp_rexmit+0xcc>)
 8013a14:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013a18:	492e      	ldr	r1, [pc, #184]	; (8013ad4 <tcp_rexmit+0xd0>)
 8013a1a:	482f      	ldr	r0, [pc, #188]	; (8013ad8 <tcp_rexmit+0xd4>)
 8013a1c:	f005 fda6 	bl	801956c <iprintf>

  if (pcb->unacked == NULL) {
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d102      	bne.n	8013a2e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013a28:	f06f 0305 	mvn.w	r3, #5
 8013a2c:	e04c      	b.n	8013ac8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a32:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013a34:	68b8      	ldr	r0, [r7, #8]
 8013a36:	f7ff fe2b 	bl	8013690 <tcp_output_segment_busy>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d002      	beq.n	8013a46 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013a40:	f06f 0305 	mvn.w	r3, #5
 8013a44:	e040      	b.n	8013ac8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	681a      	ldr	r2, [r3, #0]
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	336c      	adds	r3, #108	; 0x6c
 8013a52:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013a54:	e002      	b.n	8013a5c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d011      	beq.n	8013a88 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	68db      	ldr	r3, [r3, #12]
 8013a6a:	685b      	ldr	r3, [r3, #4]
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7f8 fc6a 	bl	800c346 <lwip_htonl>
 8013a72:	4604      	mov	r4, r0
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	68db      	ldr	r3, [r3, #12]
 8013a78:	685b      	ldr	r3, [r3, #4]
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7f8 fc63 	bl	800c346 <lwip_htonl>
 8013a80:	4603      	mov	r3, r0
 8013a82:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	dbe6      	blt.n	8013a56 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	681a      	ldr	r2, [r3, #0]
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	68ba      	ldr	r2, [r7, #8]
 8013a94:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d103      	bne.n	8013aa6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013aac:	2bff      	cmp	r3, #255	; 0xff
 8013aae:	d007      	beq.n	8013ac0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013ab6:	3301      	adds	r3, #1
 8013ab8:	b2da      	uxtb	r2, r3
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013ac6:	2300      	movs	r3, #0
}
 8013ac8:	4618      	mov	r0, r3
 8013aca:	3714      	adds	r7, #20
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd90      	pop	{r4, r7, pc}
 8013ad0:	0801cd50 	.word	0x0801cd50
 8013ad4:	0801d3f0 	.word	0x0801d3f0
 8013ad8:	0801cda4 	.word	0x0801cda4

08013adc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d106      	bne.n	8013af8 <tcp_rexmit_fast+0x1c>
 8013aea:	4b2e      	ldr	r3, [pc, #184]	; (8013ba4 <tcp_rexmit_fast+0xc8>)
 8013aec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013af0:	492d      	ldr	r1, [pc, #180]	; (8013ba8 <tcp_rexmit_fast+0xcc>)
 8013af2:	482e      	ldr	r0, [pc, #184]	; (8013bac <tcp_rexmit_fast+0xd0>)
 8013af4:	f005 fd3a 	bl	801956c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d04d      	beq.n	8013b9c <tcp_rexmit_fast+0xc0>
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	8b5b      	ldrh	r3, [r3, #26]
 8013b04:	f003 0304 	and.w	r3, r3, #4
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d147      	bne.n	8013b9c <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f7ff ff79 	bl	8013a04 <tcp_rexmit>
 8013b12:	4603      	mov	r3, r0
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d141      	bne.n	8013b9c <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d207      	bcs.n	8013b38 <tcp_rexmit_fast+0x5c>
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013b2e:	0fda      	lsrs	r2, r3, #31
 8013b30:	4413      	add	r3, r2
 8013b32:	105b      	asrs	r3, r3, #1
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	e006      	b.n	8013b46 <tcp_rexmit_fast+0x6a>
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013b3e:	0fda      	lsrs	r2, r3, #31
 8013b40:	4413      	add	r3, r2
 8013b42:	105b      	asrs	r3, r3, #1
 8013b44:	b29b      	uxth	r3, r3
 8013b46:	687a      	ldr	r2, [r7, #4]
 8013b48:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013b52:	461a      	mov	r2, r3
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b58:	005b      	lsls	r3, r3, #1
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d206      	bcs.n	8013b6c <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b62:	005b      	lsls	r3, r3, #1
 8013b64:	b29a      	uxth	r2, r3
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b76:	4619      	mov	r1, r3
 8013b78:	0049      	lsls	r1, r1, #1
 8013b7a:	440b      	add	r3, r1
 8013b7c:	b29b      	uxth	r3, r3
 8013b7e:	4413      	add	r3, r2
 8013b80:	b29a      	uxth	r2, r3
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	8b5b      	ldrh	r3, [r3, #26]
 8013b8c:	f043 0304 	orr.w	r3, r3, #4
 8013b90:	b29a      	uxth	r2, r3
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	2200      	movs	r2, #0
 8013b9a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013b9c:	bf00      	nop
 8013b9e:	3708      	adds	r7, #8
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}
 8013ba4:	0801cd50 	.word	0x0801cd50
 8013ba8:	0801d408 	.word	0x0801d408
 8013bac:	0801cda4 	.word	0x0801cda4

08013bb0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013bb0:	b580      	push	{r7, lr}
 8013bb2:	b086      	sub	sp, #24
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	60f8      	str	r0, [r7, #12]
 8013bb8:	607b      	str	r3, [r7, #4]
 8013bba:	460b      	mov	r3, r1
 8013bbc:	817b      	strh	r3, [r7, #10]
 8013bbe:	4613      	mov	r3, r2
 8013bc0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013bc2:	897a      	ldrh	r2, [r7, #10]
 8013bc4:	893b      	ldrh	r3, [r7, #8]
 8013bc6:	4413      	add	r3, r2
 8013bc8:	b29b      	uxth	r3, r3
 8013bca:	3314      	adds	r3, #20
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013bd2:	4619      	mov	r1, r3
 8013bd4:	2022      	movs	r0, #34	; 0x22
 8013bd6:	f7f9 fcab 	bl	800d530 <pbuf_alloc>
 8013bda:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d04e      	beq.n	8013c80 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	895b      	ldrh	r3, [r3, #10]
 8013be6:	461a      	mov	r2, r3
 8013be8:	897b      	ldrh	r3, [r7, #10]
 8013bea:	3314      	adds	r3, #20
 8013bec:	429a      	cmp	r2, r3
 8013bee:	da06      	bge.n	8013bfe <tcp_output_alloc_header_common+0x4e>
 8013bf0:	4b26      	ldr	r3, [pc, #152]	; (8013c8c <tcp_output_alloc_header_common+0xdc>)
 8013bf2:	f240 7224 	movw	r2, #1828	; 0x724
 8013bf6:	4926      	ldr	r1, [pc, #152]	; (8013c90 <tcp_output_alloc_header_common+0xe0>)
 8013bf8:	4826      	ldr	r0, [pc, #152]	; (8013c94 <tcp_output_alloc_header_common+0xe4>)
 8013bfa:	f005 fcb7 	bl	801956c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013c04:	8c3b      	ldrh	r3, [r7, #32]
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7f8 fb88 	bl	800c31c <lwip_htons>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	461a      	mov	r2, r3
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013c14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7f8 fb80 	bl	800c31c <lwip_htons>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	461a      	mov	r2, r3
 8013c20:	693b      	ldr	r3, [r7, #16]
 8013c22:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	687a      	ldr	r2, [r7, #4]
 8013c28:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013c2a:	68f8      	ldr	r0, [r7, #12]
 8013c2c:	f7f8 fb8b 	bl	800c346 <lwip_htonl>
 8013c30:	4602      	mov	r2, r0
 8013c32:	693b      	ldr	r3, [r7, #16]
 8013c34:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013c36:	897b      	ldrh	r3, [r7, #10]
 8013c38:	089b      	lsrs	r3, r3, #2
 8013c3a:	b29b      	uxth	r3, r3
 8013c3c:	3305      	adds	r3, #5
 8013c3e:	b29b      	uxth	r3, r3
 8013c40:	031b      	lsls	r3, r3, #12
 8013c42:	b29a      	uxth	r2, r3
 8013c44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013c48:	b29b      	uxth	r3, r3
 8013c4a:	4313      	orrs	r3, r2
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7f8 fb64 	bl	800c31c <lwip_htons>
 8013c54:	4603      	mov	r3, r0
 8013c56:	461a      	mov	r2, r3
 8013c58:	693b      	ldr	r3, [r7, #16]
 8013c5a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013c5c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7f8 fb5c 	bl	800c31c <lwip_htons>
 8013c64:	4603      	mov	r3, r0
 8013c66:	461a      	mov	r2, r3
 8013c68:	693b      	ldr	r3, [r7, #16]
 8013c6a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013c6c:	693b      	ldr	r3, [r7, #16]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	741a      	strb	r2, [r3, #16]
 8013c72:	2200      	movs	r2, #0
 8013c74:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013c76:	693b      	ldr	r3, [r7, #16]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	749a      	strb	r2, [r3, #18]
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013c80:	697b      	ldr	r3, [r7, #20]
}
 8013c82:	4618      	mov	r0, r3
 8013c84:	3718      	adds	r7, #24
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}
 8013c8a:	bf00      	nop
 8013c8c:	0801cd50 	.word	0x0801cd50
 8013c90:	0801d428 	.word	0x0801d428
 8013c94:	0801cda4 	.word	0x0801cda4

08013c98 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013c98:	b5b0      	push	{r4, r5, r7, lr}
 8013c9a:	b08a      	sub	sp, #40	; 0x28
 8013c9c:	af04      	add	r7, sp, #16
 8013c9e:	60f8      	str	r0, [r7, #12]
 8013ca0:	607b      	str	r3, [r7, #4]
 8013ca2:	460b      	mov	r3, r1
 8013ca4:	817b      	strh	r3, [r7, #10]
 8013ca6:	4613      	mov	r3, r2
 8013ca8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d106      	bne.n	8013cbe <tcp_output_alloc_header+0x26>
 8013cb0:	4b15      	ldr	r3, [pc, #84]	; (8013d08 <tcp_output_alloc_header+0x70>)
 8013cb2:	f240 7242 	movw	r2, #1858	; 0x742
 8013cb6:	4915      	ldr	r1, [pc, #84]	; (8013d0c <tcp_output_alloc_header+0x74>)
 8013cb8:	4815      	ldr	r0, [pc, #84]	; (8013d10 <tcp_output_alloc_header+0x78>)
 8013cba:	f005 fc57 	bl	801956c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	8adb      	ldrh	r3, [r3, #22]
 8013cc6:	68fa      	ldr	r2, [r7, #12]
 8013cc8:	8b12      	ldrh	r2, [r2, #24]
 8013cca:	68f9      	ldr	r1, [r7, #12]
 8013ccc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013cce:	893d      	ldrh	r5, [r7, #8]
 8013cd0:	897c      	ldrh	r4, [r7, #10]
 8013cd2:	9103      	str	r1, [sp, #12]
 8013cd4:	2110      	movs	r1, #16
 8013cd6:	9102      	str	r1, [sp, #8]
 8013cd8:	9201      	str	r2, [sp, #4]
 8013cda:	9300      	str	r3, [sp, #0]
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	462a      	mov	r2, r5
 8013ce0:	4621      	mov	r1, r4
 8013ce2:	f7ff ff65 	bl	8013bb0 <tcp_output_alloc_header_common>
 8013ce6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d006      	beq.n	8013cfc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cf2:	68fa      	ldr	r2, [r7, #12]
 8013cf4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013cf6:	441a      	add	r2, r3
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013cfc:	697b      	ldr	r3, [r7, #20]
}
 8013cfe:	4618      	mov	r0, r3
 8013d00:	3718      	adds	r7, #24
 8013d02:	46bd      	mov	sp, r7
 8013d04:	bdb0      	pop	{r4, r5, r7, pc}
 8013d06:	bf00      	nop
 8013d08:	0801cd50 	.word	0x0801cd50
 8013d0c:	0801d458 	.word	0x0801d458
 8013d10:	0801cda4 	.word	0x0801cda4

08013d14 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b088      	sub	sp, #32
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	60f8      	str	r0, [r7, #12]
 8013d1c:	60b9      	str	r1, [r7, #8]
 8013d1e:	4611      	mov	r1, r2
 8013d20:	461a      	mov	r2, r3
 8013d22:	460b      	mov	r3, r1
 8013d24:	71fb      	strb	r3, [r7, #7]
 8013d26:	4613      	mov	r3, r2
 8013d28:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013d2a:	2300      	movs	r3, #0
 8013d2c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d106      	bne.n	8013d42 <tcp_output_fill_options+0x2e>
 8013d34:	4b13      	ldr	r3, [pc, #76]	; (8013d84 <tcp_output_fill_options+0x70>)
 8013d36:	f240 7256 	movw	r2, #1878	; 0x756
 8013d3a:	4913      	ldr	r1, [pc, #76]	; (8013d88 <tcp_output_fill_options+0x74>)
 8013d3c:	4813      	ldr	r0, [pc, #76]	; (8013d8c <tcp_output_fill_options+0x78>)
 8013d3e:	f005 fc15 	bl	801956c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013d42:	68bb      	ldr	r3, [r7, #8]
 8013d44:	685b      	ldr	r3, [r3, #4]
 8013d46:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013d48:	69bb      	ldr	r3, [r7, #24]
 8013d4a:	3314      	adds	r3, #20
 8013d4c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013d4e:	69bb      	ldr	r3, [r7, #24]
 8013d50:	f103 0214 	add.w	r2, r3, #20
 8013d54:	8bfb      	ldrh	r3, [r7, #30]
 8013d56:	009b      	lsls	r3, r3, #2
 8013d58:	4619      	mov	r1, r3
 8013d5a:	79fb      	ldrb	r3, [r7, #7]
 8013d5c:	009b      	lsls	r3, r3, #2
 8013d5e:	f003 0304 	and.w	r3, r3, #4
 8013d62:	440b      	add	r3, r1
 8013d64:	4413      	add	r3, r2
 8013d66:	697a      	ldr	r2, [r7, #20]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d006      	beq.n	8013d7a <tcp_output_fill_options+0x66>
 8013d6c:	4b05      	ldr	r3, [pc, #20]	; (8013d84 <tcp_output_fill_options+0x70>)
 8013d6e:	f240 7275 	movw	r2, #1909	; 0x775
 8013d72:	4907      	ldr	r1, [pc, #28]	; (8013d90 <tcp_output_fill_options+0x7c>)
 8013d74:	4805      	ldr	r0, [pc, #20]	; (8013d8c <tcp_output_fill_options+0x78>)
 8013d76:	f005 fbf9 	bl	801956c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013d7a:	bf00      	nop
 8013d7c:	3720      	adds	r7, #32
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd80      	pop	{r7, pc}
 8013d82:	bf00      	nop
 8013d84:	0801cd50 	.word	0x0801cd50
 8013d88:	0801d480 	.word	0x0801d480
 8013d8c:	0801cda4 	.word	0x0801cda4
 8013d90:	0801d378 	.word	0x0801d378

08013d94 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b08a      	sub	sp, #40	; 0x28
 8013d98:	af04      	add	r7, sp, #16
 8013d9a:	60f8      	str	r0, [r7, #12]
 8013d9c:	60b9      	str	r1, [r7, #8]
 8013d9e:	607a      	str	r2, [r7, #4]
 8013da0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013da2:	68bb      	ldr	r3, [r7, #8]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d106      	bne.n	8013db6 <tcp_output_control_segment+0x22>
 8013da8:	4b1c      	ldr	r3, [pc, #112]	; (8013e1c <tcp_output_control_segment+0x88>)
 8013daa:	f240 7287 	movw	r2, #1927	; 0x787
 8013dae:	491c      	ldr	r1, [pc, #112]	; (8013e20 <tcp_output_control_segment+0x8c>)
 8013db0:	481c      	ldr	r0, [pc, #112]	; (8013e24 <tcp_output_control_segment+0x90>)
 8013db2:	f005 fbdb 	bl	801956c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013db6:	683a      	ldr	r2, [r7, #0]
 8013db8:	6879      	ldr	r1, [r7, #4]
 8013dba:	68f8      	ldr	r0, [r7, #12]
 8013dbc:	f7fe fad6 	bl	801236c <tcp_route>
 8013dc0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013dc2:	693b      	ldr	r3, [r7, #16]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d102      	bne.n	8013dce <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013dc8:	23fc      	movs	r3, #252	; 0xfc
 8013dca:	75fb      	strb	r3, [r7, #23]
 8013dcc:	e01c      	b.n	8013e08 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d006      	beq.n	8013de2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	7adb      	ldrb	r3, [r3, #11]
 8013dd8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	7a9b      	ldrb	r3, [r3, #10]
 8013dde:	757b      	strb	r3, [r7, #21]
 8013de0:	e003      	b.n	8013dea <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013de2:	23ff      	movs	r3, #255	; 0xff
 8013de4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013de6:	2300      	movs	r3, #0
 8013de8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013dea:	7dba      	ldrb	r2, [r7, #22]
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	9302      	str	r3, [sp, #8]
 8013df0:	2306      	movs	r3, #6
 8013df2:	9301      	str	r3, [sp, #4]
 8013df4:	7d7b      	ldrb	r3, [r7, #21]
 8013df6:	9300      	str	r3, [sp, #0]
 8013df8:	4613      	mov	r3, r2
 8013dfa:	683a      	ldr	r2, [r7, #0]
 8013dfc:	6879      	ldr	r1, [r7, #4]
 8013dfe:	68b8      	ldr	r0, [r7, #8]
 8013e00:	f004 f97a 	bl	80180f8 <ip4_output_if>
 8013e04:	4603      	mov	r3, r0
 8013e06:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013e08:	68b8      	ldr	r0, [r7, #8]
 8013e0a:	f7f9 fe71 	bl	800daf0 <pbuf_free>
  return err;
 8013e0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013e12:	4618      	mov	r0, r3
 8013e14:	3718      	adds	r7, #24
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}
 8013e1a:	bf00      	nop
 8013e1c:	0801cd50 	.word	0x0801cd50
 8013e20:	0801d4a8 	.word	0x0801d4a8
 8013e24:	0801cda4 	.word	0x0801cda4

08013e28 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013e28:	b590      	push	{r4, r7, lr}
 8013e2a:	b08b      	sub	sp, #44	; 0x2c
 8013e2c:	af04      	add	r7, sp, #16
 8013e2e:	60f8      	str	r0, [r7, #12]
 8013e30:	60b9      	str	r1, [r7, #8]
 8013e32:	607a      	str	r2, [r7, #4]
 8013e34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013e36:	683b      	ldr	r3, [r7, #0]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d106      	bne.n	8013e4a <tcp_rst+0x22>
 8013e3c:	4b1f      	ldr	r3, [pc, #124]	; (8013ebc <tcp_rst+0x94>)
 8013e3e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013e42:	491f      	ldr	r1, [pc, #124]	; (8013ec0 <tcp_rst+0x98>)
 8013e44:	481f      	ldr	r0, [pc, #124]	; (8013ec4 <tcp_rst+0x9c>)
 8013e46:	f005 fb91 	bl	801956c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d106      	bne.n	8013e5e <tcp_rst+0x36>
 8013e50:	4b1a      	ldr	r3, [pc, #104]	; (8013ebc <tcp_rst+0x94>)
 8013e52:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013e56:	491c      	ldr	r1, [pc, #112]	; (8013ec8 <tcp_rst+0xa0>)
 8013e58:	481a      	ldr	r0, [pc, #104]	; (8013ec4 <tcp_rst+0x9c>)
 8013e5a:	f005 fb87 	bl	801956c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013e5e:	2300      	movs	r3, #0
 8013e60:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013e62:	f246 0308 	movw	r3, #24584	; 0x6008
 8013e66:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013e68:	7dfb      	ldrb	r3, [r7, #23]
 8013e6a:	b29c      	uxth	r4, r3
 8013e6c:	68b8      	ldr	r0, [r7, #8]
 8013e6e:	f7f8 fa6a 	bl	800c346 <lwip_htonl>
 8013e72:	4602      	mov	r2, r0
 8013e74:	8abb      	ldrh	r3, [r7, #20]
 8013e76:	9303      	str	r3, [sp, #12]
 8013e78:	2314      	movs	r3, #20
 8013e7a:	9302      	str	r3, [sp, #8]
 8013e7c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013e7e:	9301      	str	r3, [sp, #4]
 8013e80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013e82:	9300      	str	r3, [sp, #0]
 8013e84:	4613      	mov	r3, r2
 8013e86:	2200      	movs	r2, #0
 8013e88:	4621      	mov	r1, r4
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	f7ff fe90 	bl	8013bb0 <tcp_output_alloc_header_common>
 8013e90:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d00c      	beq.n	8013eb2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013e98:	7dfb      	ldrb	r3, [r7, #23]
 8013e9a:	2200      	movs	r2, #0
 8013e9c:	6939      	ldr	r1, [r7, #16]
 8013e9e:	68f8      	ldr	r0, [r7, #12]
 8013ea0:	f7ff ff38 	bl	8013d14 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea6:	683a      	ldr	r2, [r7, #0]
 8013ea8:	6939      	ldr	r1, [r7, #16]
 8013eaa:	68f8      	ldr	r0, [r7, #12]
 8013eac:	f7ff ff72 	bl	8013d94 <tcp_output_control_segment>
 8013eb0:	e000      	b.n	8013eb4 <tcp_rst+0x8c>
    return;
 8013eb2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013eb4:	371c      	adds	r7, #28
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd90      	pop	{r4, r7, pc}
 8013eba:	bf00      	nop
 8013ebc:	0801cd50 	.word	0x0801cd50
 8013ec0:	0801d4d4 	.word	0x0801d4d4
 8013ec4:	0801cda4 	.word	0x0801cda4
 8013ec8:	0801d4f0 	.word	0x0801d4f0

08013ecc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013ecc:	b590      	push	{r4, r7, lr}
 8013ece:	b087      	sub	sp, #28
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013ed4:	2300      	movs	r3, #0
 8013ed6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d106      	bne.n	8013ef0 <tcp_send_empty_ack+0x24>
 8013ee2:	4b28      	ldr	r3, [pc, #160]	; (8013f84 <tcp_send_empty_ack+0xb8>)
 8013ee4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013ee8:	4927      	ldr	r1, [pc, #156]	; (8013f88 <tcp_send_empty_ack+0xbc>)
 8013eea:	4828      	ldr	r0, [pc, #160]	; (8013f8c <tcp_send_empty_ack+0xc0>)
 8013eec:	f005 fb3e 	bl	801956c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013ef0:	7dfb      	ldrb	r3, [r7, #23]
 8013ef2:	009b      	lsls	r3, r3, #2
 8013ef4:	b2db      	uxtb	r3, r3
 8013ef6:	f003 0304 	and.w	r3, r3, #4
 8013efa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013efc:	7d7b      	ldrb	r3, [r7, #21]
 8013efe:	b29c      	uxth	r4, r3
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f04:	4618      	mov	r0, r3
 8013f06:	f7f8 fa1e 	bl	800c346 <lwip_htonl>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	4621      	mov	r1, r4
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f7ff fec1 	bl	8013c98 <tcp_output_alloc_header>
 8013f16:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013f18:	693b      	ldr	r3, [r7, #16]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d109      	bne.n	8013f32 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	8b5b      	ldrh	r3, [r3, #26]
 8013f22:	f043 0303 	orr.w	r3, r3, #3
 8013f26:	b29a      	uxth	r2, r3
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013f2c:	f06f 0301 	mvn.w	r3, #1
 8013f30:	e023      	b.n	8013f7a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013f32:	7dbb      	ldrb	r3, [r7, #22]
 8013f34:	7dfa      	ldrb	r2, [r7, #23]
 8013f36:	6939      	ldr	r1, [r7, #16]
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f7ff feeb 	bl	8013d14 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013f3e:	687a      	ldr	r2, [r7, #4]
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	3304      	adds	r3, #4
 8013f44:	6939      	ldr	r1, [r7, #16]
 8013f46:	6878      	ldr	r0, [r7, #4]
 8013f48:	f7ff ff24 	bl	8013d94 <tcp_output_control_segment>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d007      	beq.n	8013f68 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	8b5b      	ldrh	r3, [r3, #26]
 8013f5c:	f043 0303 	orr.w	r3, r3, #3
 8013f60:	b29a      	uxth	r2, r3
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	835a      	strh	r2, [r3, #26]
 8013f66:	e006      	b.n	8013f76 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	8b5b      	ldrh	r3, [r3, #26]
 8013f6c:	f023 0303 	bic.w	r3, r3, #3
 8013f70:	b29a      	uxth	r2, r3
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	371c      	adds	r7, #28
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd90      	pop	{r4, r7, pc}
 8013f82:	bf00      	nop
 8013f84:	0801cd50 	.word	0x0801cd50
 8013f88:	0801d50c 	.word	0x0801d50c
 8013f8c:	0801cda4 	.word	0x0801cda4

08013f90 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013f90:	b590      	push	{r4, r7, lr}
 8013f92:	b087      	sub	sp, #28
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013f98:	2300      	movs	r3, #0
 8013f9a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d106      	bne.n	8013fb0 <tcp_keepalive+0x20>
 8013fa2:	4b18      	ldr	r3, [pc, #96]	; (8014004 <tcp_keepalive+0x74>)
 8013fa4:	f640 0224 	movw	r2, #2084	; 0x824
 8013fa8:	4917      	ldr	r1, [pc, #92]	; (8014008 <tcp_keepalive+0x78>)
 8013faa:	4818      	ldr	r0, [pc, #96]	; (801400c <tcp_keepalive+0x7c>)
 8013fac:	f005 fade 	bl	801956c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013fb0:	7dfb      	ldrb	r3, [r7, #23]
 8013fb2:	b29c      	uxth	r4, r3
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013fb8:	3b01      	subs	r3, #1
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f7f8 f9c3 	bl	800c346 <lwip_htonl>
 8013fc0:	4603      	mov	r3, r0
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	4621      	mov	r1, r4
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f7ff fe66 	bl	8013c98 <tcp_output_alloc_header>
 8013fcc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d102      	bne.n	8013fda <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8013fd8:	e010      	b.n	8013ffc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013fda:	7dfb      	ldrb	r3, [r7, #23]
 8013fdc:	2200      	movs	r2, #0
 8013fde:	6939      	ldr	r1, [r7, #16]
 8013fe0:	6878      	ldr	r0, [r7, #4]
 8013fe2:	f7ff fe97 	bl	8013d14 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013fe6:	687a      	ldr	r2, [r7, #4]
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	3304      	adds	r3, #4
 8013fec:	6939      	ldr	r1, [r7, #16]
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f7ff fed0 	bl	8013d94 <tcp_output_control_segment>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	371c      	adds	r7, #28
 8014000:	46bd      	mov	sp, r7
 8014002:	bd90      	pop	{r4, r7, pc}
 8014004:	0801cd50 	.word	0x0801cd50
 8014008:	0801d52c 	.word	0x0801d52c
 801400c:	0801cda4 	.word	0x0801cda4

08014010 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014010:	b590      	push	{r4, r7, lr}
 8014012:	b08b      	sub	sp, #44	; 0x2c
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014018:	2300      	movs	r3, #0
 801401a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	2b00      	cmp	r3, #0
 8014022:	d106      	bne.n	8014032 <tcp_zero_window_probe+0x22>
 8014024:	4b4c      	ldr	r3, [pc, #304]	; (8014158 <tcp_zero_window_probe+0x148>)
 8014026:	f640 024f 	movw	r2, #2127	; 0x84f
 801402a:	494c      	ldr	r1, [pc, #304]	; (801415c <tcp_zero_window_probe+0x14c>)
 801402c:	484c      	ldr	r0, [pc, #304]	; (8014160 <tcp_zero_window_probe+0x150>)
 801402e:	f005 fa9d 	bl	801956c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014036:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014038:	6a3b      	ldr	r3, [r7, #32]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d101      	bne.n	8014042 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801403e:	2300      	movs	r3, #0
 8014040:	e086      	b.n	8014150 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014048:	2bff      	cmp	r3, #255	; 0xff
 801404a:	d007      	beq.n	801405c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014052:	3301      	adds	r3, #1
 8014054:	b2da      	uxtb	r2, r3
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801405c:	6a3b      	ldr	r3, [r7, #32]
 801405e:	68db      	ldr	r3, [r3, #12]
 8014060:	899b      	ldrh	r3, [r3, #12]
 8014062:	b29b      	uxth	r3, r3
 8014064:	4618      	mov	r0, r3
 8014066:	f7f8 f959 	bl	800c31c <lwip_htons>
 801406a:	4603      	mov	r3, r0
 801406c:	b2db      	uxtb	r3, r3
 801406e:	f003 0301 	and.w	r3, r3, #1
 8014072:	2b00      	cmp	r3, #0
 8014074:	d005      	beq.n	8014082 <tcp_zero_window_probe+0x72>
 8014076:	6a3b      	ldr	r3, [r7, #32]
 8014078:	891b      	ldrh	r3, [r3, #8]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d101      	bne.n	8014082 <tcp_zero_window_probe+0x72>
 801407e:	2301      	movs	r3, #1
 8014080:	e000      	b.n	8014084 <tcp_zero_window_probe+0x74>
 8014082:	2300      	movs	r3, #0
 8014084:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014086:	7ffb      	ldrb	r3, [r7, #31]
 8014088:	2b00      	cmp	r3, #0
 801408a:	bf0c      	ite	eq
 801408c:	2301      	moveq	r3, #1
 801408e:	2300      	movne	r3, #0
 8014090:	b2db      	uxtb	r3, r3
 8014092:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014098:	b299      	uxth	r1, r3
 801409a:	6a3b      	ldr	r3, [r7, #32]
 801409c:	68db      	ldr	r3, [r3, #12]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	8bba      	ldrh	r2, [r7, #28]
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f7ff fdf8 	bl	8013c98 <tcp_output_alloc_header>
 80140a8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80140aa:	69bb      	ldr	r3, [r7, #24]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d102      	bne.n	80140b6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80140b0:	f04f 33ff 	mov.w	r3, #4294967295
 80140b4:	e04c      	b.n	8014150 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80140b6:	69bb      	ldr	r3, [r7, #24]
 80140b8:	685b      	ldr	r3, [r3, #4]
 80140ba:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80140bc:	7ffb      	ldrb	r3, [r7, #31]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d011      	beq.n	80140e6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80140c2:	697b      	ldr	r3, [r7, #20]
 80140c4:	899b      	ldrh	r3, [r3, #12]
 80140c6:	b29b      	uxth	r3, r3
 80140c8:	b21b      	sxth	r3, r3
 80140ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80140ce:	b21c      	sxth	r4, r3
 80140d0:	2011      	movs	r0, #17
 80140d2:	f7f8 f923 	bl	800c31c <lwip_htons>
 80140d6:	4603      	mov	r3, r0
 80140d8:	b21b      	sxth	r3, r3
 80140da:	4323      	orrs	r3, r4
 80140dc:	b21b      	sxth	r3, r3
 80140de:	b29a      	uxth	r2, r3
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	819a      	strh	r2, [r3, #12]
 80140e4:	e010      	b.n	8014108 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80140e6:	69bb      	ldr	r3, [r7, #24]
 80140e8:	685b      	ldr	r3, [r3, #4]
 80140ea:	3314      	adds	r3, #20
 80140ec:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80140ee:	6a3b      	ldr	r3, [r7, #32]
 80140f0:	6858      	ldr	r0, [r3, #4]
 80140f2:	6a3b      	ldr	r3, [r7, #32]
 80140f4:	685b      	ldr	r3, [r3, #4]
 80140f6:	891a      	ldrh	r2, [r3, #8]
 80140f8:	6a3b      	ldr	r3, [r7, #32]
 80140fa:	891b      	ldrh	r3, [r3, #8]
 80140fc:	1ad3      	subs	r3, r2, r3
 80140fe:	b29b      	uxth	r3, r3
 8014100:	2201      	movs	r2, #1
 8014102:	6939      	ldr	r1, [r7, #16]
 8014104:	f7f9 fefa 	bl	800defc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014108:	6a3b      	ldr	r3, [r7, #32]
 801410a:	68db      	ldr	r3, [r3, #12]
 801410c:	685b      	ldr	r3, [r3, #4]
 801410e:	4618      	mov	r0, r3
 8014110:	f7f8 f919 	bl	800c346 <lwip_htonl>
 8014114:	4603      	mov	r3, r0
 8014116:	3301      	adds	r3, #1
 8014118:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	1ad3      	subs	r3, r2, r3
 8014122:	2b00      	cmp	r3, #0
 8014124:	da02      	bge.n	801412c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	68fa      	ldr	r2, [r7, #12]
 801412a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801412c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014130:	2200      	movs	r2, #0
 8014132:	69b9      	ldr	r1, [r7, #24]
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f7ff fded 	bl	8013d14 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801413a:	687a      	ldr	r2, [r7, #4]
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	3304      	adds	r3, #4
 8014140:	69b9      	ldr	r1, [r7, #24]
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f7ff fe26 	bl	8013d94 <tcp_output_control_segment>
 8014148:	4603      	mov	r3, r0
 801414a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801414c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014150:	4618      	mov	r0, r3
 8014152:	372c      	adds	r7, #44	; 0x2c
 8014154:	46bd      	mov	sp, r7
 8014156:	bd90      	pop	{r4, r7, pc}
 8014158:	0801cd50 	.word	0x0801cd50
 801415c:	0801d548 	.word	0x0801d548
 8014160:	0801cda4 	.word	0x0801cda4

08014164 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014164:	b580      	push	{r7, lr}
 8014166:	b082      	sub	sp, #8
 8014168:	af00      	add	r7, sp, #0
 801416a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801416c:	f7f9 ffb4 	bl	800e0d8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014170:	4b0a      	ldr	r3, [pc, #40]	; (801419c <tcpip_tcp_timer+0x38>)
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d103      	bne.n	8014180 <tcpip_tcp_timer+0x1c>
 8014178:	4b09      	ldr	r3, [pc, #36]	; (80141a0 <tcpip_tcp_timer+0x3c>)
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d005      	beq.n	801418c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014180:	2200      	movs	r2, #0
 8014182:	4908      	ldr	r1, [pc, #32]	; (80141a4 <tcpip_tcp_timer+0x40>)
 8014184:	20fa      	movs	r0, #250	; 0xfa
 8014186:	f000 f8f1 	bl	801436c <sys_timeout>
 801418a:	e002      	b.n	8014192 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801418c:	4b06      	ldr	r3, [pc, #24]	; (80141a8 <tcpip_tcp_timer+0x44>)
 801418e:	2200      	movs	r2, #0
 8014190:	601a      	str	r2, [r3, #0]
  }
}
 8014192:	bf00      	nop
 8014194:	3708      	adds	r7, #8
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}
 801419a:	bf00      	nop
 801419c:	20016e14 	.word	0x20016e14
 80141a0:	20016e24 	.word	0x20016e24
 80141a4:	08014165 	.word	0x08014165
 80141a8:	20010294 	.word	0x20010294

080141ac <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80141b0:	4b0a      	ldr	r3, [pc, #40]	; (80141dc <tcp_timer_needed+0x30>)
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d10f      	bne.n	80141d8 <tcp_timer_needed+0x2c>
 80141b8:	4b09      	ldr	r3, [pc, #36]	; (80141e0 <tcp_timer_needed+0x34>)
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d103      	bne.n	80141c8 <tcp_timer_needed+0x1c>
 80141c0:	4b08      	ldr	r3, [pc, #32]	; (80141e4 <tcp_timer_needed+0x38>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d007      	beq.n	80141d8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80141c8:	4b04      	ldr	r3, [pc, #16]	; (80141dc <tcp_timer_needed+0x30>)
 80141ca:	2201      	movs	r2, #1
 80141cc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80141ce:	2200      	movs	r2, #0
 80141d0:	4905      	ldr	r1, [pc, #20]	; (80141e8 <tcp_timer_needed+0x3c>)
 80141d2:	20fa      	movs	r0, #250	; 0xfa
 80141d4:	f000 f8ca 	bl	801436c <sys_timeout>
  }
}
 80141d8:	bf00      	nop
 80141da:	bd80      	pop	{r7, pc}
 80141dc:	20010294 	.word	0x20010294
 80141e0:	20016e14 	.word	0x20016e14
 80141e4:	20016e24 	.word	0x20016e24
 80141e8:	08014165 	.word	0x08014165

080141ec <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b086      	sub	sp, #24
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	60f8      	str	r0, [r7, #12]
 80141f4:	60b9      	str	r1, [r7, #8]
 80141f6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80141f8:	200a      	movs	r0, #10
 80141fa:	f7f8 fd7b 	bl	800ccf4 <memp_malloc>
 80141fe:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d109      	bne.n	801421a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014206:	693b      	ldr	r3, [r7, #16]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d151      	bne.n	80142b0 <sys_timeout_abs+0xc4>
 801420c:	4b2a      	ldr	r3, [pc, #168]	; (80142b8 <sys_timeout_abs+0xcc>)
 801420e:	22be      	movs	r2, #190	; 0xbe
 8014210:	492a      	ldr	r1, [pc, #168]	; (80142bc <sys_timeout_abs+0xd0>)
 8014212:	482b      	ldr	r0, [pc, #172]	; (80142c0 <sys_timeout_abs+0xd4>)
 8014214:	f005 f9aa 	bl	801956c <iprintf>
    return;
 8014218:	e04a      	b.n	80142b0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801421a:	693b      	ldr	r3, [r7, #16]
 801421c:	2200      	movs	r2, #0
 801421e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014220:	693b      	ldr	r3, [r7, #16]
 8014222:	68ba      	ldr	r2, [r7, #8]
 8014224:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014226:	693b      	ldr	r3, [r7, #16]
 8014228:	687a      	ldr	r2, [r7, #4]
 801422a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801422c:	693b      	ldr	r3, [r7, #16]
 801422e:	68fa      	ldr	r2, [r7, #12]
 8014230:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014232:	4b24      	ldr	r3, [pc, #144]	; (80142c4 <sys_timeout_abs+0xd8>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d103      	bne.n	8014242 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801423a:	4a22      	ldr	r2, [pc, #136]	; (80142c4 <sys_timeout_abs+0xd8>)
 801423c:	693b      	ldr	r3, [r7, #16]
 801423e:	6013      	str	r3, [r2, #0]
    return;
 8014240:	e037      	b.n	80142b2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014242:	693b      	ldr	r3, [r7, #16]
 8014244:	685a      	ldr	r2, [r3, #4]
 8014246:	4b1f      	ldr	r3, [pc, #124]	; (80142c4 <sys_timeout_abs+0xd8>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	685b      	ldr	r3, [r3, #4]
 801424c:	1ad3      	subs	r3, r2, r3
 801424e:	0fdb      	lsrs	r3, r3, #31
 8014250:	f003 0301 	and.w	r3, r3, #1
 8014254:	b2db      	uxtb	r3, r3
 8014256:	2b00      	cmp	r3, #0
 8014258:	d007      	beq.n	801426a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801425a:	4b1a      	ldr	r3, [pc, #104]	; (80142c4 <sys_timeout_abs+0xd8>)
 801425c:	681a      	ldr	r2, [r3, #0]
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014262:	4a18      	ldr	r2, [pc, #96]	; (80142c4 <sys_timeout_abs+0xd8>)
 8014264:	693b      	ldr	r3, [r7, #16]
 8014266:	6013      	str	r3, [r2, #0]
 8014268:	e023      	b.n	80142b2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801426a:	4b16      	ldr	r3, [pc, #88]	; (80142c4 <sys_timeout_abs+0xd8>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	617b      	str	r3, [r7, #20]
 8014270:	e01a      	b.n	80142a8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d00b      	beq.n	8014292 <sys_timeout_abs+0xa6>
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	685a      	ldr	r2, [r3, #4]
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	685b      	ldr	r3, [r3, #4]
 8014284:	1ad3      	subs	r3, r2, r3
 8014286:	0fdb      	lsrs	r3, r3, #31
 8014288:	f003 0301 	and.w	r3, r3, #1
 801428c:	b2db      	uxtb	r3, r3
 801428e:	2b00      	cmp	r3, #0
 8014290:	d007      	beq.n	80142a2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014292:	697b      	ldr	r3, [r7, #20]
 8014294:	681a      	ldr	r2, [r3, #0]
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801429a:	697b      	ldr	r3, [r7, #20]
 801429c:	693a      	ldr	r2, [r7, #16]
 801429e:	601a      	str	r2, [r3, #0]
        break;
 80142a0:	e007      	b.n	80142b2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80142a2:	697b      	ldr	r3, [r7, #20]
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	617b      	str	r3, [r7, #20]
 80142a8:	697b      	ldr	r3, [r7, #20]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d1e1      	bne.n	8014272 <sys_timeout_abs+0x86>
 80142ae:	e000      	b.n	80142b2 <sys_timeout_abs+0xc6>
    return;
 80142b0:	bf00      	nop
      }
    }
  }
}
 80142b2:	3718      	adds	r7, #24
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	0801d56c 	.word	0x0801d56c
 80142bc:	0801d5a0 	.word	0x0801d5a0
 80142c0:	0801d5e0 	.word	0x0801d5e0
 80142c4:	2001028c 	.word	0x2001028c

080142c8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b086      	sub	sp, #24
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	685b      	ldr	r3, [r3, #4]
 80142d8:	4798      	blx	r3

  now = sys_now();
 80142da:	f7f0 faf5 	bl	80048c8 <sys_now>
 80142de:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80142e0:	697b      	ldr	r3, [r7, #20]
 80142e2:	681a      	ldr	r2, [r3, #0]
 80142e4:	4b0f      	ldr	r3, [pc, #60]	; (8014324 <lwip_cyclic_timer+0x5c>)
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	4413      	add	r3, r2
 80142ea:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80142ec:	68fa      	ldr	r2, [r7, #12]
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	1ad3      	subs	r3, r2, r3
 80142f2:	0fdb      	lsrs	r3, r3, #31
 80142f4:	f003 0301 	and.w	r3, r3, #1
 80142f8:	b2db      	uxtb	r3, r3
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d009      	beq.n	8014312 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80142fe:	697b      	ldr	r3, [r7, #20]
 8014300:	681a      	ldr	r2, [r3, #0]
 8014302:	693b      	ldr	r3, [r7, #16]
 8014304:	4413      	add	r3, r2
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	4907      	ldr	r1, [pc, #28]	; (8014328 <lwip_cyclic_timer+0x60>)
 801430a:	4618      	mov	r0, r3
 801430c:	f7ff ff6e 	bl	80141ec <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014310:	e004      	b.n	801431c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014312:	687a      	ldr	r2, [r7, #4]
 8014314:	4904      	ldr	r1, [pc, #16]	; (8014328 <lwip_cyclic_timer+0x60>)
 8014316:	68f8      	ldr	r0, [r7, #12]
 8014318:	f7ff ff68 	bl	80141ec <sys_timeout_abs>
}
 801431c:	bf00      	nop
 801431e:	3718      	adds	r7, #24
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}
 8014324:	20010290 	.word	0x20010290
 8014328:	080142c9 	.word	0x080142c9

0801432c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b082      	sub	sp, #8
 8014330:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014332:	2301      	movs	r3, #1
 8014334:	607b      	str	r3, [r7, #4]
 8014336:	e00e      	b.n	8014356 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014338:	4a0a      	ldr	r2, [pc, #40]	; (8014364 <sys_timeouts_init+0x38>)
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	00db      	lsls	r3, r3, #3
 8014344:	4a07      	ldr	r2, [pc, #28]	; (8014364 <sys_timeouts_init+0x38>)
 8014346:	4413      	add	r3, r2
 8014348:	461a      	mov	r2, r3
 801434a:	4907      	ldr	r1, [pc, #28]	; (8014368 <sys_timeouts_init+0x3c>)
 801434c:	f000 f80e 	bl	801436c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	3301      	adds	r3, #1
 8014354:	607b      	str	r3, [r7, #4]
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	2b04      	cmp	r3, #4
 801435a:	d9ed      	bls.n	8014338 <sys_timeouts_init+0xc>
  }
}
 801435c:	bf00      	nop
 801435e:	3708      	adds	r7, #8
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}
 8014364:	08023048 	.word	0x08023048
 8014368:	080142c9 	.word	0x080142c9

0801436c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b086      	sub	sp, #24
 8014370:	af00      	add	r7, sp, #0
 8014372:	60f8      	str	r0, [r7, #12]
 8014374:	60b9      	str	r1, [r7, #8]
 8014376:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801437e:	d306      	bcc.n	801438e <sys_timeout+0x22>
 8014380:	4b0a      	ldr	r3, [pc, #40]	; (80143ac <sys_timeout+0x40>)
 8014382:	f240 1229 	movw	r2, #297	; 0x129
 8014386:	490a      	ldr	r1, [pc, #40]	; (80143b0 <sys_timeout+0x44>)
 8014388:	480a      	ldr	r0, [pc, #40]	; (80143b4 <sys_timeout+0x48>)
 801438a:	f005 f8ef 	bl	801956c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801438e:	f7f0 fa9b 	bl	80048c8 <sys_now>
 8014392:	4602      	mov	r2, r0
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	4413      	add	r3, r2
 8014398:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801439a:	687a      	ldr	r2, [r7, #4]
 801439c:	68b9      	ldr	r1, [r7, #8]
 801439e:	6978      	ldr	r0, [r7, #20]
 80143a0:	f7ff ff24 	bl	80141ec <sys_timeout_abs>
#endif
}
 80143a4:	bf00      	nop
 80143a6:	3718      	adds	r7, #24
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}
 80143ac:	0801d56c 	.word	0x0801d56c
 80143b0:	0801d608 	.word	0x0801d608
 80143b4:	0801d5e0 	.word	0x0801d5e0

080143b8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b084      	sub	sp, #16
 80143bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80143be:	f7f0 fa83 	bl	80048c8 <sys_now>
 80143c2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80143c4:	4b17      	ldr	r3, [pc, #92]	; (8014424 <sys_check_timeouts+0x6c>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d022      	beq.n	8014416 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	685b      	ldr	r3, [r3, #4]
 80143d4:	68fa      	ldr	r2, [r7, #12]
 80143d6:	1ad3      	subs	r3, r2, r3
 80143d8:	0fdb      	lsrs	r3, r3, #31
 80143da:	f003 0301 	and.w	r3, r3, #1
 80143de:	b2db      	uxtb	r3, r3
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d11a      	bne.n	801441a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80143e4:	68bb      	ldr	r3, [r7, #8]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	4a0e      	ldr	r2, [pc, #56]	; (8014424 <sys_check_timeouts+0x6c>)
 80143ea:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80143ec:	68bb      	ldr	r3, [r7, #8]
 80143ee:	689b      	ldr	r3, [r3, #8]
 80143f0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80143f2:	68bb      	ldr	r3, [r7, #8]
 80143f4:	68db      	ldr	r3, [r3, #12]
 80143f6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	685b      	ldr	r3, [r3, #4]
 80143fc:	4a0a      	ldr	r2, [pc, #40]	; (8014428 <sys_check_timeouts+0x70>)
 80143fe:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014400:	68b9      	ldr	r1, [r7, #8]
 8014402:	200a      	movs	r0, #10
 8014404:	f7f8 fcc8 	bl	800cd98 <memp_free>
    if (handler != NULL) {
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d0da      	beq.n	80143c4 <sys_check_timeouts+0xc>
      handler(arg);
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6838      	ldr	r0, [r7, #0]
 8014412:	4798      	blx	r3
  do {
 8014414:	e7d6      	b.n	80143c4 <sys_check_timeouts+0xc>
      return;
 8014416:	bf00      	nop
 8014418:	e000      	b.n	801441c <sys_check_timeouts+0x64>
      return;
 801441a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801441c:	3710      	adds	r7, #16
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	2001028c 	.word	0x2001028c
 8014428:	20010290 	.word	0x20010290

0801442c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014432:	4b16      	ldr	r3, [pc, #88]	; (801448c <sys_timeouts_sleeptime+0x60>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d102      	bne.n	8014440 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801443a:	f04f 33ff 	mov.w	r3, #4294967295
 801443e:	e020      	b.n	8014482 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014440:	f7f0 fa42 	bl	80048c8 <sys_now>
 8014444:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014446:	4b11      	ldr	r3, [pc, #68]	; (801448c <sys_timeouts_sleeptime+0x60>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	685a      	ldr	r2, [r3, #4]
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	1ad3      	subs	r3, r2, r3
 8014450:	0fdb      	lsrs	r3, r3, #31
 8014452:	f003 0301 	and.w	r3, r3, #1
 8014456:	b2db      	uxtb	r3, r3
 8014458:	2b00      	cmp	r3, #0
 801445a:	d001      	beq.n	8014460 <sys_timeouts_sleeptime+0x34>
    return 0;
 801445c:	2300      	movs	r3, #0
 801445e:	e010      	b.n	8014482 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014460:	4b0a      	ldr	r3, [pc, #40]	; (801448c <sys_timeouts_sleeptime+0x60>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	685a      	ldr	r2, [r3, #4]
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	1ad3      	subs	r3, r2, r3
 801446a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801446c:	683b      	ldr	r3, [r7, #0]
 801446e:	2b00      	cmp	r3, #0
 8014470:	da06      	bge.n	8014480 <sys_timeouts_sleeptime+0x54>
 8014472:	4b07      	ldr	r3, [pc, #28]	; (8014490 <sys_timeouts_sleeptime+0x64>)
 8014474:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014478:	4906      	ldr	r1, [pc, #24]	; (8014494 <sys_timeouts_sleeptime+0x68>)
 801447a:	4807      	ldr	r0, [pc, #28]	; (8014498 <sys_timeouts_sleeptime+0x6c>)
 801447c:	f005 f876 	bl	801956c <iprintf>
    return ret;
 8014480:	683b      	ldr	r3, [r7, #0]
  }
}
 8014482:	4618      	mov	r0, r3
 8014484:	3708      	adds	r7, #8
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
 801448a:	bf00      	nop
 801448c:	2001028c 	.word	0x2001028c
 8014490:	0801d56c 	.word	0x0801d56c
 8014494:	0801d640 	.word	0x0801d640
 8014498:	0801d5e0 	.word	0x0801d5e0

0801449c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801449c:	b580      	push	{r7, lr}
 801449e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80144a0:	f005 f87c 	bl	801959c <rand>
 80144a4:	4603      	mov	r3, r0
 80144a6:	b29b      	uxth	r3, r3
 80144a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80144ac:	b29b      	uxth	r3, r3
 80144ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80144b2:	b29a      	uxth	r2, r3
 80144b4:	4b01      	ldr	r3, [pc, #4]	; (80144bc <udp_init+0x20>)
 80144b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80144b8:	bf00      	nop
 80144ba:	bd80      	pop	{r7, pc}
 80144bc:	20000018 	.word	0x20000018

080144c0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80144c0:	b480      	push	{r7}
 80144c2:	b083      	sub	sp, #12
 80144c4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80144c6:	2300      	movs	r3, #0
 80144c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80144ca:	4b17      	ldr	r3, [pc, #92]	; (8014528 <udp_new_port+0x68>)
 80144cc:	881b      	ldrh	r3, [r3, #0]
 80144ce:	1c5a      	adds	r2, r3, #1
 80144d0:	b291      	uxth	r1, r2
 80144d2:	4a15      	ldr	r2, [pc, #84]	; (8014528 <udp_new_port+0x68>)
 80144d4:	8011      	strh	r1, [r2, #0]
 80144d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80144da:	4293      	cmp	r3, r2
 80144dc:	d103      	bne.n	80144e6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80144de:	4b12      	ldr	r3, [pc, #72]	; (8014528 <udp_new_port+0x68>)
 80144e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80144e4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80144e6:	4b11      	ldr	r3, [pc, #68]	; (801452c <udp_new_port+0x6c>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	603b      	str	r3, [r7, #0]
 80144ec:	e011      	b.n	8014512 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	8a5a      	ldrh	r2, [r3, #18]
 80144f2:	4b0d      	ldr	r3, [pc, #52]	; (8014528 <udp_new_port+0x68>)
 80144f4:	881b      	ldrh	r3, [r3, #0]
 80144f6:	429a      	cmp	r2, r3
 80144f8:	d108      	bne.n	801450c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80144fa:	88fb      	ldrh	r3, [r7, #6]
 80144fc:	3301      	adds	r3, #1
 80144fe:	80fb      	strh	r3, [r7, #6]
 8014500:	88fb      	ldrh	r3, [r7, #6]
 8014502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014506:	d3e0      	bcc.n	80144ca <udp_new_port+0xa>
        return 0;
 8014508:	2300      	movs	r3, #0
 801450a:	e007      	b.n	801451c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801450c:	683b      	ldr	r3, [r7, #0]
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	603b      	str	r3, [r7, #0]
 8014512:	683b      	ldr	r3, [r7, #0]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d1ea      	bne.n	80144ee <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014518:	4b03      	ldr	r3, [pc, #12]	; (8014528 <udp_new_port+0x68>)
 801451a:	881b      	ldrh	r3, [r3, #0]
}
 801451c:	4618      	mov	r0, r3
 801451e:	370c      	adds	r7, #12
 8014520:	46bd      	mov	sp, r7
 8014522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014526:	4770      	bx	lr
 8014528:	20000018 	.word	0x20000018
 801452c:	20016e2c 	.word	0x20016e2c

08014530 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b084      	sub	sp, #16
 8014534:	af00      	add	r7, sp, #0
 8014536:	60f8      	str	r0, [r7, #12]
 8014538:	60b9      	str	r1, [r7, #8]
 801453a:	4613      	mov	r3, r2
 801453c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d105      	bne.n	8014550 <udp_input_local_match+0x20>
 8014544:	4b27      	ldr	r3, [pc, #156]	; (80145e4 <udp_input_local_match+0xb4>)
 8014546:	2287      	movs	r2, #135	; 0x87
 8014548:	4927      	ldr	r1, [pc, #156]	; (80145e8 <udp_input_local_match+0xb8>)
 801454a:	4828      	ldr	r0, [pc, #160]	; (80145ec <udp_input_local_match+0xbc>)
 801454c:	f005 f80e 	bl	801956c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014550:	68bb      	ldr	r3, [r7, #8]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d105      	bne.n	8014562 <udp_input_local_match+0x32>
 8014556:	4b23      	ldr	r3, [pc, #140]	; (80145e4 <udp_input_local_match+0xb4>)
 8014558:	2288      	movs	r2, #136	; 0x88
 801455a:	4925      	ldr	r1, [pc, #148]	; (80145f0 <udp_input_local_match+0xc0>)
 801455c:	4823      	ldr	r0, [pc, #140]	; (80145ec <udp_input_local_match+0xbc>)
 801455e:	f005 f805 	bl	801956c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	7a1b      	ldrb	r3, [r3, #8]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d00b      	beq.n	8014582 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	7a1a      	ldrb	r2, [r3, #8]
 801456e:	4b21      	ldr	r3, [pc, #132]	; (80145f4 <udp_input_local_match+0xc4>)
 8014570:	685b      	ldr	r3, [r3, #4]
 8014572:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014576:	3301      	adds	r3, #1
 8014578:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801457a:	429a      	cmp	r2, r3
 801457c:	d001      	beq.n	8014582 <udp_input_local_match+0x52>
    return 0;
 801457e:	2300      	movs	r3, #0
 8014580:	e02b      	b.n	80145da <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014582:	79fb      	ldrb	r3, [r7, #7]
 8014584:	2b00      	cmp	r3, #0
 8014586:	d018      	beq.n	80145ba <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d013      	beq.n	80145b6 <udp_input_local_match+0x86>
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d00f      	beq.n	80145b6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014596:	4b17      	ldr	r3, [pc, #92]	; (80145f4 <udp_input_local_match+0xc4>)
 8014598:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801459e:	d00a      	beq.n	80145b6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	681a      	ldr	r2, [r3, #0]
 80145a4:	4b13      	ldr	r3, [pc, #76]	; (80145f4 <udp_input_local_match+0xc4>)
 80145a6:	695b      	ldr	r3, [r3, #20]
 80145a8:	405a      	eors	r2, r3
 80145aa:	68bb      	ldr	r3, [r7, #8]
 80145ac:	3308      	adds	r3, #8
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d110      	bne.n	80145d8 <udp_input_local_match+0xa8>
          return 1;
 80145b6:	2301      	movs	r3, #1
 80145b8:	e00f      	b.n	80145da <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	d009      	beq.n	80145d4 <udp_input_local_match+0xa4>
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d005      	beq.n	80145d4 <udp_input_local_match+0xa4>
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	681a      	ldr	r2, [r3, #0]
 80145cc:	4b09      	ldr	r3, [pc, #36]	; (80145f4 <udp_input_local_match+0xc4>)
 80145ce:	695b      	ldr	r3, [r3, #20]
 80145d0:	429a      	cmp	r2, r3
 80145d2:	d101      	bne.n	80145d8 <udp_input_local_match+0xa8>
        return 1;
 80145d4:	2301      	movs	r3, #1
 80145d6:	e000      	b.n	80145da <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80145d8:	2300      	movs	r3, #0
}
 80145da:	4618      	mov	r0, r3
 80145dc:	3710      	adds	r7, #16
 80145de:	46bd      	mov	sp, r7
 80145e0:	bd80      	pop	{r7, pc}
 80145e2:	bf00      	nop
 80145e4:	0801d654 	.word	0x0801d654
 80145e8:	0801d684 	.word	0x0801d684
 80145ec:	0801d6a8 	.word	0x0801d6a8
 80145f0:	0801d6d0 	.word	0x0801d6d0
 80145f4:	200136e0 	.word	0x200136e0

080145f8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80145f8:	b590      	push	{r4, r7, lr}
 80145fa:	b08d      	sub	sp, #52	; 0x34
 80145fc:	af02      	add	r7, sp, #8
 80145fe:	6078      	str	r0, [r7, #4]
 8014600:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014602:	2300      	movs	r3, #0
 8014604:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d105      	bne.n	8014618 <udp_input+0x20>
 801460c:	4b7c      	ldr	r3, [pc, #496]	; (8014800 <udp_input+0x208>)
 801460e:	22cf      	movs	r2, #207	; 0xcf
 8014610:	497c      	ldr	r1, [pc, #496]	; (8014804 <udp_input+0x20c>)
 8014612:	487d      	ldr	r0, [pc, #500]	; (8014808 <udp_input+0x210>)
 8014614:	f004 ffaa 	bl	801956c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014618:	683b      	ldr	r3, [r7, #0]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d105      	bne.n	801462a <udp_input+0x32>
 801461e:	4b78      	ldr	r3, [pc, #480]	; (8014800 <udp_input+0x208>)
 8014620:	22d0      	movs	r2, #208	; 0xd0
 8014622:	497a      	ldr	r1, [pc, #488]	; (801480c <udp_input+0x214>)
 8014624:	4878      	ldr	r0, [pc, #480]	; (8014808 <udp_input+0x210>)
 8014626:	f004 ffa1 	bl	801956c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	895b      	ldrh	r3, [r3, #10]
 801462e:	2b07      	cmp	r3, #7
 8014630:	d803      	bhi.n	801463a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f7f9 fa5c 	bl	800daf0 <pbuf_free>
    goto end;
 8014638:	e0de      	b.n	80147f8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	685b      	ldr	r3, [r3, #4]
 801463e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014640:	4b73      	ldr	r3, [pc, #460]	; (8014810 <udp_input+0x218>)
 8014642:	695a      	ldr	r2, [r3, #20]
 8014644:	4b72      	ldr	r3, [pc, #456]	; (8014810 <udp_input+0x218>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	4619      	mov	r1, r3
 801464a:	4610      	mov	r0, r2
 801464c:	f003 fe2c 	bl	80182a8 <ip4_addr_isbroadcast_u32>
 8014650:	4603      	mov	r3, r0
 8014652:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	881b      	ldrh	r3, [r3, #0]
 8014658:	b29b      	uxth	r3, r3
 801465a:	4618      	mov	r0, r3
 801465c:	f7f7 fe5e 	bl	800c31c <lwip_htons>
 8014660:	4603      	mov	r3, r0
 8014662:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	885b      	ldrh	r3, [r3, #2]
 8014668:	b29b      	uxth	r3, r3
 801466a:	4618      	mov	r0, r3
 801466c:	f7f7 fe56 	bl	800c31c <lwip_htons>
 8014670:	4603      	mov	r3, r0
 8014672:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8014674:	2300      	movs	r3, #0
 8014676:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014678:	2300      	movs	r3, #0
 801467a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801467c:	2300      	movs	r3, #0
 801467e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014680:	4b64      	ldr	r3, [pc, #400]	; (8014814 <udp_input+0x21c>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	627b      	str	r3, [r7, #36]	; 0x24
 8014686:	e054      	b.n	8014732 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801468a:	8a5b      	ldrh	r3, [r3, #18]
 801468c:	89fa      	ldrh	r2, [r7, #14]
 801468e:	429a      	cmp	r2, r3
 8014690:	d14a      	bne.n	8014728 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014692:	7cfb      	ldrb	r3, [r7, #19]
 8014694:	461a      	mov	r2, r3
 8014696:	6839      	ldr	r1, [r7, #0]
 8014698:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801469a:	f7ff ff49 	bl	8014530 <udp_input_local_match>
 801469e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d041      	beq.n	8014728 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80146a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146a6:	7c1b      	ldrb	r3, [r3, #16]
 80146a8:	f003 0304 	and.w	r3, r3, #4
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d11d      	bne.n	80146ec <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80146b0:	69fb      	ldr	r3, [r7, #28]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d102      	bne.n	80146bc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80146b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b8:	61fb      	str	r3, [r7, #28]
 80146ba:	e017      	b.n	80146ec <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80146bc:	7cfb      	ldrb	r3, [r7, #19]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d014      	beq.n	80146ec <udp_input+0xf4>
 80146c2:	4b53      	ldr	r3, [pc, #332]	; (8014810 <udp_input+0x218>)
 80146c4:	695b      	ldr	r3, [r3, #20]
 80146c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80146ca:	d10f      	bne.n	80146ec <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80146cc:	69fb      	ldr	r3, [r7, #28]
 80146ce:	681a      	ldr	r2, [r3, #0]
 80146d0:	683b      	ldr	r3, [r7, #0]
 80146d2:	3304      	adds	r3, #4
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	429a      	cmp	r2, r3
 80146d8:	d008      	beq.n	80146ec <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80146da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146dc:	681a      	ldr	r2, [r3, #0]
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	3304      	adds	r3, #4
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d101      	bne.n	80146ec <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80146e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ea:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80146ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ee:	8a9b      	ldrh	r3, [r3, #20]
 80146f0:	8a3a      	ldrh	r2, [r7, #16]
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d118      	bne.n	8014728 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80146f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d005      	beq.n	801470a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80146fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014700:	685a      	ldr	r2, [r3, #4]
 8014702:	4b43      	ldr	r3, [pc, #268]	; (8014810 <udp_input+0x218>)
 8014704:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014706:	429a      	cmp	r2, r3
 8014708:	d10e      	bne.n	8014728 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801470a:	6a3b      	ldr	r3, [r7, #32]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d014      	beq.n	801473a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014712:	68da      	ldr	r2, [r3, #12]
 8014714:	6a3b      	ldr	r3, [r7, #32]
 8014716:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014718:	4b3e      	ldr	r3, [pc, #248]	; (8014814 <udp_input+0x21c>)
 801471a:	681a      	ldr	r2, [r3, #0]
 801471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801471e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014720:	4a3c      	ldr	r2, [pc, #240]	; (8014814 <udp_input+0x21c>)
 8014722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014724:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014726:	e008      	b.n	801473a <udp_input+0x142>
      }
    }

    prev = pcb;
 8014728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801472a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801472e:	68db      	ldr	r3, [r3, #12]
 8014730:	627b      	str	r3, [r7, #36]	; 0x24
 8014732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014734:	2b00      	cmp	r3, #0
 8014736:	d1a7      	bne.n	8014688 <udp_input+0x90>
 8014738:	e000      	b.n	801473c <udp_input+0x144>
        break;
 801473a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473e:	2b00      	cmp	r3, #0
 8014740:	d101      	bne.n	8014746 <udp_input+0x14e>
    pcb = uncon_pcb;
 8014742:	69fb      	ldr	r3, [r7, #28]
 8014744:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014748:	2b00      	cmp	r3, #0
 801474a:	d002      	beq.n	8014752 <udp_input+0x15a>
    for_us = 1;
 801474c:	2301      	movs	r3, #1
 801474e:	76fb      	strb	r3, [r7, #27]
 8014750:	e00a      	b.n	8014768 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	3304      	adds	r3, #4
 8014756:	681a      	ldr	r2, [r3, #0]
 8014758:	4b2d      	ldr	r3, [pc, #180]	; (8014810 <udp_input+0x218>)
 801475a:	695b      	ldr	r3, [r3, #20]
 801475c:	429a      	cmp	r2, r3
 801475e:	bf0c      	ite	eq
 8014760:	2301      	moveq	r3, #1
 8014762:	2300      	movne	r3, #0
 8014764:	b2db      	uxtb	r3, r3
 8014766:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014768:	7efb      	ldrb	r3, [r7, #27]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d041      	beq.n	80147f2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801476e:	2108      	movs	r1, #8
 8014770:	6878      	ldr	r0, [r7, #4]
 8014772:	f7f9 f937 	bl	800d9e4 <pbuf_remove_header>
 8014776:	4603      	mov	r3, r0
 8014778:	2b00      	cmp	r3, #0
 801477a:	d00a      	beq.n	8014792 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801477c:	4b20      	ldr	r3, [pc, #128]	; (8014800 <udp_input+0x208>)
 801477e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8014782:	4925      	ldr	r1, [pc, #148]	; (8014818 <udp_input+0x220>)
 8014784:	4820      	ldr	r0, [pc, #128]	; (8014808 <udp_input+0x210>)
 8014786:	f004 fef1 	bl	801956c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f7f9 f9b0 	bl	800daf0 <pbuf_free>
      goto end;
 8014790:	e032      	b.n	80147f8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8014792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014794:	2b00      	cmp	r3, #0
 8014796:	d012      	beq.n	80147be <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801479a:	699b      	ldr	r3, [r3, #24]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d00a      	beq.n	80147b6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80147a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a2:	699c      	ldr	r4, [r3, #24]
 80147a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a6:	69d8      	ldr	r0, [r3, #28]
 80147a8:	8a3b      	ldrh	r3, [r7, #16]
 80147aa:	9300      	str	r3, [sp, #0]
 80147ac:	4b1b      	ldr	r3, [pc, #108]	; (801481c <udp_input+0x224>)
 80147ae:	687a      	ldr	r2, [r7, #4]
 80147b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80147b2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80147b4:	e021      	b.n	80147fa <udp_input+0x202>
        pbuf_free(p);
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f7f9 f99a 	bl	800daf0 <pbuf_free>
        goto end;
 80147bc:	e01c      	b.n	80147f8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80147be:	7cfb      	ldrb	r3, [r7, #19]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d112      	bne.n	80147ea <udp_input+0x1f2>
 80147c4:	4b12      	ldr	r3, [pc, #72]	; (8014810 <udp_input+0x218>)
 80147c6:	695b      	ldr	r3, [r3, #20]
 80147c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80147cc:	2be0      	cmp	r3, #224	; 0xe0
 80147ce:	d00c      	beq.n	80147ea <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80147d0:	4b0f      	ldr	r3, [pc, #60]	; (8014810 <udp_input+0x218>)
 80147d2:	899b      	ldrh	r3, [r3, #12]
 80147d4:	3308      	adds	r3, #8
 80147d6:	b29b      	uxth	r3, r3
 80147d8:	b21b      	sxth	r3, r3
 80147da:	4619      	mov	r1, r3
 80147dc:	6878      	ldr	r0, [r7, #4]
 80147de:	f7f9 f974 	bl	800daca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80147e2:	2103      	movs	r1, #3
 80147e4:	6878      	ldr	r0, [r7, #4]
 80147e6:	f003 fa23 	bl	8017c30 <icmp_dest_unreach>
      pbuf_free(p);
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f7f9 f980 	bl	800daf0 <pbuf_free>
  return;
 80147f0:	e003      	b.n	80147fa <udp_input+0x202>
    pbuf_free(p);
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f7f9 f97c 	bl	800daf0 <pbuf_free>
  return;
 80147f8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80147fa:	372c      	adds	r7, #44	; 0x2c
 80147fc:	46bd      	mov	sp, r7
 80147fe:	bd90      	pop	{r4, r7, pc}
 8014800:	0801d654 	.word	0x0801d654
 8014804:	0801d6f8 	.word	0x0801d6f8
 8014808:	0801d6a8 	.word	0x0801d6a8
 801480c:	0801d710 	.word	0x0801d710
 8014810:	200136e0 	.word	0x200136e0
 8014814:	20016e2c 	.word	0x20016e2c
 8014818:	0801d72c 	.word	0x0801d72c
 801481c:	200136f0 	.word	0x200136f0

08014820 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b088      	sub	sp, #32
 8014824:	af02      	add	r7, sp, #8
 8014826:	60f8      	str	r0, [r7, #12]
 8014828:	60b9      	str	r1, [r7, #8]
 801482a:	607a      	str	r2, [r7, #4]
 801482c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d109      	bne.n	8014848 <udp_sendto_if+0x28>
 8014834:	4b2e      	ldr	r3, [pc, #184]	; (80148f0 <udp_sendto_if+0xd0>)
 8014836:	f44f 7220 	mov.w	r2, #640	; 0x280
 801483a:	492e      	ldr	r1, [pc, #184]	; (80148f4 <udp_sendto_if+0xd4>)
 801483c:	482e      	ldr	r0, [pc, #184]	; (80148f8 <udp_sendto_if+0xd8>)
 801483e:	f004 fe95 	bl	801956c <iprintf>
 8014842:	f06f 030f 	mvn.w	r3, #15
 8014846:	e04f      	b.n	80148e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	2b00      	cmp	r3, #0
 801484c:	d109      	bne.n	8014862 <udp_sendto_if+0x42>
 801484e:	4b28      	ldr	r3, [pc, #160]	; (80148f0 <udp_sendto_if+0xd0>)
 8014850:	f240 2281 	movw	r2, #641	; 0x281
 8014854:	4929      	ldr	r1, [pc, #164]	; (80148fc <udp_sendto_if+0xdc>)
 8014856:	4828      	ldr	r0, [pc, #160]	; (80148f8 <udp_sendto_if+0xd8>)
 8014858:	f004 fe88 	bl	801956c <iprintf>
 801485c:	f06f 030f 	mvn.w	r3, #15
 8014860:	e042      	b.n	80148e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d109      	bne.n	801487c <udp_sendto_if+0x5c>
 8014868:	4b21      	ldr	r3, [pc, #132]	; (80148f0 <udp_sendto_if+0xd0>)
 801486a:	f240 2282 	movw	r2, #642	; 0x282
 801486e:	4924      	ldr	r1, [pc, #144]	; (8014900 <udp_sendto_if+0xe0>)
 8014870:	4821      	ldr	r0, [pc, #132]	; (80148f8 <udp_sendto_if+0xd8>)
 8014872:	f004 fe7b 	bl	801956c <iprintf>
 8014876:	f06f 030f 	mvn.w	r3, #15
 801487a:	e035      	b.n	80148e8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801487c:	6a3b      	ldr	r3, [r7, #32]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d109      	bne.n	8014896 <udp_sendto_if+0x76>
 8014882:	4b1b      	ldr	r3, [pc, #108]	; (80148f0 <udp_sendto_if+0xd0>)
 8014884:	f240 2283 	movw	r2, #643	; 0x283
 8014888:	491e      	ldr	r1, [pc, #120]	; (8014904 <udp_sendto_if+0xe4>)
 801488a:	481b      	ldr	r0, [pc, #108]	; (80148f8 <udp_sendto_if+0xd8>)
 801488c:	f004 fe6e 	bl	801956c <iprintf>
 8014890:	f06f 030f 	mvn.w	r3, #15
 8014894:	e028      	b.n	80148e8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d009      	beq.n	80148b0 <udp_sendto_if+0x90>
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d005      	beq.n	80148b0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80148ac:	2be0      	cmp	r3, #224	; 0xe0
 80148ae:	d103      	bne.n	80148b8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80148b0:	6a3b      	ldr	r3, [r7, #32]
 80148b2:	3304      	adds	r3, #4
 80148b4:	617b      	str	r3, [r7, #20]
 80148b6:	e00b      	b.n	80148d0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	681a      	ldr	r2, [r3, #0]
 80148bc:	6a3b      	ldr	r3, [r7, #32]
 80148be:	3304      	adds	r3, #4
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	429a      	cmp	r2, r3
 80148c4:	d002      	beq.n	80148cc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80148c6:	f06f 0303 	mvn.w	r3, #3
 80148ca:	e00d      	b.n	80148e8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80148d0:	887a      	ldrh	r2, [r7, #2]
 80148d2:	697b      	ldr	r3, [r7, #20]
 80148d4:	9301      	str	r3, [sp, #4]
 80148d6:	6a3b      	ldr	r3, [r7, #32]
 80148d8:	9300      	str	r3, [sp, #0]
 80148da:	4613      	mov	r3, r2
 80148dc:	687a      	ldr	r2, [r7, #4]
 80148de:	68b9      	ldr	r1, [r7, #8]
 80148e0:	68f8      	ldr	r0, [r7, #12]
 80148e2:	f000 f811 	bl	8014908 <udp_sendto_if_src>
 80148e6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80148e8:	4618      	mov	r0, r3
 80148ea:	3718      	adds	r7, #24
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}
 80148f0:	0801d654 	.word	0x0801d654
 80148f4:	0801d7c8 	.word	0x0801d7c8
 80148f8:	0801d6a8 	.word	0x0801d6a8
 80148fc:	0801d7e4 	.word	0x0801d7e4
 8014900:	0801d800 	.word	0x0801d800
 8014904:	0801d820 	.word	0x0801d820

08014908 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	b08c      	sub	sp, #48	; 0x30
 801490c:	af04      	add	r7, sp, #16
 801490e:	60f8      	str	r0, [r7, #12]
 8014910:	60b9      	str	r1, [r7, #8]
 8014912:	607a      	str	r2, [r7, #4]
 8014914:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d109      	bne.n	8014930 <udp_sendto_if_src+0x28>
 801491c:	4b65      	ldr	r3, [pc, #404]	; (8014ab4 <udp_sendto_if_src+0x1ac>)
 801491e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014922:	4965      	ldr	r1, [pc, #404]	; (8014ab8 <udp_sendto_if_src+0x1b0>)
 8014924:	4865      	ldr	r0, [pc, #404]	; (8014abc <udp_sendto_if_src+0x1b4>)
 8014926:	f004 fe21 	bl	801956c <iprintf>
 801492a:	f06f 030f 	mvn.w	r3, #15
 801492e:	e0bc      	b.n	8014aaa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014930:	68bb      	ldr	r3, [r7, #8]
 8014932:	2b00      	cmp	r3, #0
 8014934:	d109      	bne.n	801494a <udp_sendto_if_src+0x42>
 8014936:	4b5f      	ldr	r3, [pc, #380]	; (8014ab4 <udp_sendto_if_src+0x1ac>)
 8014938:	f240 22d2 	movw	r2, #722	; 0x2d2
 801493c:	4960      	ldr	r1, [pc, #384]	; (8014ac0 <udp_sendto_if_src+0x1b8>)
 801493e:	485f      	ldr	r0, [pc, #380]	; (8014abc <udp_sendto_if_src+0x1b4>)
 8014940:	f004 fe14 	bl	801956c <iprintf>
 8014944:	f06f 030f 	mvn.w	r3, #15
 8014948:	e0af      	b.n	8014aaa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d109      	bne.n	8014964 <udp_sendto_if_src+0x5c>
 8014950:	4b58      	ldr	r3, [pc, #352]	; (8014ab4 <udp_sendto_if_src+0x1ac>)
 8014952:	f240 22d3 	movw	r2, #723	; 0x2d3
 8014956:	495b      	ldr	r1, [pc, #364]	; (8014ac4 <udp_sendto_if_src+0x1bc>)
 8014958:	4858      	ldr	r0, [pc, #352]	; (8014abc <udp_sendto_if_src+0x1b4>)
 801495a:	f004 fe07 	bl	801956c <iprintf>
 801495e:	f06f 030f 	mvn.w	r3, #15
 8014962:	e0a2      	b.n	8014aaa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014966:	2b00      	cmp	r3, #0
 8014968:	d109      	bne.n	801497e <udp_sendto_if_src+0x76>
 801496a:	4b52      	ldr	r3, [pc, #328]	; (8014ab4 <udp_sendto_if_src+0x1ac>)
 801496c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014970:	4955      	ldr	r1, [pc, #340]	; (8014ac8 <udp_sendto_if_src+0x1c0>)
 8014972:	4852      	ldr	r0, [pc, #328]	; (8014abc <udp_sendto_if_src+0x1b4>)
 8014974:	f004 fdfa 	bl	801956c <iprintf>
 8014978:	f06f 030f 	mvn.w	r3, #15
 801497c:	e095      	b.n	8014aaa <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014980:	2b00      	cmp	r3, #0
 8014982:	d109      	bne.n	8014998 <udp_sendto_if_src+0x90>
 8014984:	4b4b      	ldr	r3, [pc, #300]	; (8014ab4 <udp_sendto_if_src+0x1ac>)
 8014986:	f240 22d5 	movw	r2, #725	; 0x2d5
 801498a:	4950      	ldr	r1, [pc, #320]	; (8014acc <udp_sendto_if_src+0x1c4>)
 801498c:	484b      	ldr	r0, [pc, #300]	; (8014abc <udp_sendto_if_src+0x1b4>)
 801498e:	f004 fded 	bl	801956c <iprintf>
 8014992:	f06f 030f 	mvn.w	r3, #15
 8014996:	e088      	b.n	8014aaa <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	8a5b      	ldrh	r3, [r3, #18]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d10f      	bne.n	80149c0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80149a0:	68f9      	ldr	r1, [r7, #12]
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	8a5b      	ldrh	r3, [r3, #18]
 80149a6:	461a      	mov	r2, r3
 80149a8:	68f8      	ldr	r0, [r7, #12]
 80149aa:	f000 f893 	bl	8014ad4 <udp_bind>
 80149ae:	4603      	mov	r3, r0
 80149b0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80149b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d002      	beq.n	80149c0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80149ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80149be:	e074      	b.n	8014aaa <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80149c0:	68bb      	ldr	r3, [r7, #8]
 80149c2:	891b      	ldrh	r3, [r3, #8]
 80149c4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80149c8:	4293      	cmp	r3, r2
 80149ca:	d902      	bls.n	80149d2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80149cc:	f04f 33ff 	mov.w	r3, #4294967295
 80149d0:	e06b      	b.n	8014aaa <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80149d2:	2108      	movs	r1, #8
 80149d4:	68b8      	ldr	r0, [r7, #8]
 80149d6:	f7f8 fff5 	bl	800d9c4 <pbuf_add_header>
 80149da:	4603      	mov	r3, r0
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d015      	beq.n	8014a0c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80149e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80149e4:	2108      	movs	r1, #8
 80149e6:	2022      	movs	r0, #34	; 0x22
 80149e8:	f7f8 fda2 	bl	800d530 <pbuf_alloc>
 80149ec:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80149ee:	69fb      	ldr	r3, [r7, #28]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d102      	bne.n	80149fa <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80149f4:	f04f 33ff 	mov.w	r3, #4294967295
 80149f8:	e057      	b.n	8014aaa <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80149fa:	68bb      	ldr	r3, [r7, #8]
 80149fc:	891b      	ldrh	r3, [r3, #8]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d006      	beq.n	8014a10 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014a02:	68b9      	ldr	r1, [r7, #8]
 8014a04:	69f8      	ldr	r0, [r7, #28]
 8014a06:	f7f9 f997 	bl	800dd38 <pbuf_chain>
 8014a0a:	e001      	b.n	8014a10 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014a0c:	68bb      	ldr	r3, [r7, #8]
 8014a0e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014a10:	69fb      	ldr	r3, [r7, #28]
 8014a12:	895b      	ldrh	r3, [r3, #10]
 8014a14:	2b07      	cmp	r3, #7
 8014a16:	d806      	bhi.n	8014a26 <udp_sendto_if_src+0x11e>
 8014a18:	4b26      	ldr	r3, [pc, #152]	; (8014ab4 <udp_sendto_if_src+0x1ac>)
 8014a1a:	f240 320e 	movw	r2, #782	; 0x30e
 8014a1e:	492c      	ldr	r1, [pc, #176]	; (8014ad0 <udp_sendto_if_src+0x1c8>)
 8014a20:	4826      	ldr	r0, [pc, #152]	; (8014abc <udp_sendto_if_src+0x1b4>)
 8014a22:	f004 fda3 	bl	801956c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014a26:	69fb      	ldr	r3, [r7, #28]
 8014a28:	685b      	ldr	r3, [r3, #4]
 8014a2a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	8a5b      	ldrh	r3, [r3, #18]
 8014a30:	4618      	mov	r0, r3
 8014a32:	f7f7 fc73 	bl	800c31c <lwip_htons>
 8014a36:	4603      	mov	r3, r0
 8014a38:	461a      	mov	r2, r3
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014a3e:	887b      	ldrh	r3, [r7, #2]
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7f7 fc6b 	bl	800c31c <lwip_htons>
 8014a46:	4603      	mov	r3, r0
 8014a48:	461a      	mov	r2, r3
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014a4e:	697b      	ldr	r3, [r7, #20]
 8014a50:	2200      	movs	r2, #0
 8014a52:	719a      	strb	r2, [r3, #6]
 8014a54:	2200      	movs	r2, #0
 8014a56:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8014a58:	69fb      	ldr	r3, [r7, #28]
 8014a5a:	891b      	ldrh	r3, [r3, #8]
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7f7 fc5d 	bl	800c31c <lwip_htons>
 8014a62:	4603      	mov	r3, r0
 8014a64:	461a      	mov	r2, r3
 8014a66:	697b      	ldr	r3, [r7, #20]
 8014a68:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014a6a:	2311      	movs	r3, #17
 8014a6c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	7adb      	ldrb	r3, [r3, #11]
 8014a72:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	7a9b      	ldrb	r3, [r3, #10]
 8014a78:	7cb9      	ldrb	r1, [r7, #18]
 8014a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a7c:	9202      	str	r2, [sp, #8]
 8014a7e:	7cfa      	ldrb	r2, [r7, #19]
 8014a80:	9201      	str	r2, [sp, #4]
 8014a82:	9300      	str	r3, [sp, #0]
 8014a84:	460b      	mov	r3, r1
 8014a86:	687a      	ldr	r2, [r7, #4]
 8014a88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a8a:	69f8      	ldr	r0, [r7, #28]
 8014a8c:	f003 fb5e 	bl	801814c <ip4_output_if_src>
 8014a90:	4603      	mov	r3, r0
 8014a92:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014a94:	69fa      	ldr	r2, [r7, #28]
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d004      	beq.n	8014aa6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014a9c:	69f8      	ldr	r0, [r7, #28]
 8014a9e:	f7f9 f827 	bl	800daf0 <pbuf_free>
    q = NULL;
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014aa6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3720      	adds	r7, #32
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}
 8014ab2:	bf00      	nop
 8014ab4:	0801d654 	.word	0x0801d654
 8014ab8:	0801d840 	.word	0x0801d840
 8014abc:	0801d6a8 	.word	0x0801d6a8
 8014ac0:	0801d860 	.word	0x0801d860
 8014ac4:	0801d880 	.word	0x0801d880
 8014ac8:	0801d8a4 	.word	0x0801d8a4
 8014acc:	0801d8c8 	.word	0x0801d8c8
 8014ad0:	0801d8ec 	.word	0x0801d8ec

08014ad4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b086      	sub	sp, #24
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	60f8      	str	r0, [r7, #12]
 8014adc:	60b9      	str	r1, [r7, #8]
 8014ade:	4613      	mov	r3, r2
 8014ae0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d101      	bne.n	8014aec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014ae8:	4b39      	ldr	r3, [pc, #228]	; (8014bd0 <udp_bind+0xfc>)
 8014aea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d109      	bne.n	8014b06 <udp_bind+0x32>
 8014af2:	4b38      	ldr	r3, [pc, #224]	; (8014bd4 <udp_bind+0x100>)
 8014af4:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014af8:	4937      	ldr	r1, [pc, #220]	; (8014bd8 <udp_bind+0x104>)
 8014afa:	4838      	ldr	r0, [pc, #224]	; (8014bdc <udp_bind+0x108>)
 8014afc:	f004 fd36 	bl	801956c <iprintf>
 8014b00:	f06f 030f 	mvn.w	r3, #15
 8014b04:	e060      	b.n	8014bc8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014b06:	2300      	movs	r3, #0
 8014b08:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b0a:	4b35      	ldr	r3, [pc, #212]	; (8014be0 <udp_bind+0x10c>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	617b      	str	r3, [r7, #20]
 8014b10:	e009      	b.n	8014b26 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014b12:	68fa      	ldr	r2, [r7, #12]
 8014b14:	697b      	ldr	r3, [r7, #20]
 8014b16:	429a      	cmp	r2, r3
 8014b18:	d102      	bne.n	8014b20 <udp_bind+0x4c>
      rebind = 1;
 8014b1a:	2301      	movs	r3, #1
 8014b1c:	74fb      	strb	r3, [r7, #19]
      break;
 8014b1e:	e005      	b.n	8014b2c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	68db      	ldr	r3, [r3, #12]
 8014b24:	617b      	str	r3, [r7, #20]
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d1f2      	bne.n	8014b12 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014b2c:	88fb      	ldrh	r3, [r7, #6]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d109      	bne.n	8014b46 <udp_bind+0x72>
    port = udp_new_port();
 8014b32:	f7ff fcc5 	bl	80144c0 <udp_new_port>
 8014b36:	4603      	mov	r3, r0
 8014b38:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014b3a:	88fb      	ldrh	r3, [r7, #6]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d12c      	bne.n	8014b9a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014b40:	f06f 0307 	mvn.w	r3, #7
 8014b44:	e040      	b.n	8014bc8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b46:	4b26      	ldr	r3, [pc, #152]	; (8014be0 <udp_bind+0x10c>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	617b      	str	r3, [r7, #20]
 8014b4c:	e022      	b.n	8014b94 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014b4e:	68fa      	ldr	r2, [r7, #12]
 8014b50:	697b      	ldr	r3, [r7, #20]
 8014b52:	429a      	cmp	r2, r3
 8014b54:	d01b      	beq.n	8014b8e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014b56:	697b      	ldr	r3, [r7, #20]
 8014b58:	8a5b      	ldrh	r3, [r3, #18]
 8014b5a:	88fa      	ldrh	r2, [r7, #6]
 8014b5c:	429a      	cmp	r2, r3
 8014b5e:	d116      	bne.n	8014b8e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b60:	697b      	ldr	r3, [r7, #20]
 8014b62:	681a      	ldr	r2, [r3, #0]
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d00d      	beq.n	8014b88 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b6c:	68bb      	ldr	r3, [r7, #8]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d00a      	beq.n	8014b88 <udp_bind+0xb4>
 8014b72:	68bb      	ldr	r3, [r7, #8]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d006      	beq.n	8014b88 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014b7a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d003      	beq.n	8014b88 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d102      	bne.n	8014b8e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014b88:	f06f 0307 	mvn.w	r3, #7
 8014b8c:	e01c      	b.n	8014bc8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	68db      	ldr	r3, [r3, #12]
 8014b92:	617b      	str	r3, [r7, #20]
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d1d9      	bne.n	8014b4e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d002      	beq.n	8014ba6 <udp_bind+0xd2>
 8014ba0:	68bb      	ldr	r3, [r7, #8]
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	e000      	b.n	8014ba8 <udp_bind+0xd4>
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	68fa      	ldr	r2, [r7, #12]
 8014baa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	88fa      	ldrh	r2, [r7, #6]
 8014bb0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014bb2:	7cfb      	ldrb	r3, [r7, #19]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d106      	bne.n	8014bc6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014bb8:	4b09      	ldr	r3, [pc, #36]	; (8014be0 <udp_bind+0x10c>)
 8014bba:	681a      	ldr	r2, [r3, #0]
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014bc0:	4a07      	ldr	r2, [pc, #28]	; (8014be0 <udp_bind+0x10c>)
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014bc6:	2300      	movs	r3, #0
}
 8014bc8:	4618      	mov	r0, r3
 8014bca:	3718      	adds	r7, #24
 8014bcc:	46bd      	mov	sp, r7
 8014bce:	bd80      	pop	{r7, pc}
 8014bd0:	08023070 	.word	0x08023070
 8014bd4:	0801d654 	.word	0x0801d654
 8014bd8:	0801d91c 	.word	0x0801d91c
 8014bdc:	0801d6a8 	.word	0x0801d6a8
 8014be0:	20016e2c 	.word	0x20016e2c

08014be4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b086      	sub	sp, #24
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	60f8      	str	r0, [r7, #12]
 8014bec:	60b9      	str	r1, [r7, #8]
 8014bee:	4613      	mov	r3, r2
 8014bf0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d109      	bne.n	8014c0c <udp_connect+0x28>
 8014bf8:	4b2c      	ldr	r3, [pc, #176]	; (8014cac <udp_connect+0xc8>)
 8014bfa:	f240 4235 	movw	r2, #1077	; 0x435
 8014bfe:	492c      	ldr	r1, [pc, #176]	; (8014cb0 <udp_connect+0xcc>)
 8014c00:	482c      	ldr	r0, [pc, #176]	; (8014cb4 <udp_connect+0xd0>)
 8014c02:	f004 fcb3 	bl	801956c <iprintf>
 8014c06:	f06f 030f 	mvn.w	r3, #15
 8014c0a:	e04b      	b.n	8014ca4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d109      	bne.n	8014c26 <udp_connect+0x42>
 8014c12:	4b26      	ldr	r3, [pc, #152]	; (8014cac <udp_connect+0xc8>)
 8014c14:	f240 4236 	movw	r2, #1078	; 0x436
 8014c18:	4927      	ldr	r1, [pc, #156]	; (8014cb8 <udp_connect+0xd4>)
 8014c1a:	4826      	ldr	r0, [pc, #152]	; (8014cb4 <udp_connect+0xd0>)
 8014c1c:	f004 fca6 	bl	801956c <iprintf>
 8014c20:	f06f 030f 	mvn.w	r3, #15
 8014c24:	e03e      	b.n	8014ca4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	8a5b      	ldrh	r3, [r3, #18]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d10f      	bne.n	8014c4e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014c2e:	68f9      	ldr	r1, [r7, #12]
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	8a5b      	ldrh	r3, [r3, #18]
 8014c34:	461a      	mov	r2, r3
 8014c36:	68f8      	ldr	r0, [r7, #12]
 8014c38:	f7ff ff4c 	bl	8014ad4 <udp_bind>
 8014c3c:	4603      	mov	r3, r0
 8014c3e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014c40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d002      	beq.n	8014c4e <udp_connect+0x6a>
      return err;
 8014c48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014c4c:	e02a      	b.n	8014ca4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014c4e:	68bb      	ldr	r3, [r7, #8]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d002      	beq.n	8014c5a <udp_connect+0x76>
 8014c54:	68bb      	ldr	r3, [r7, #8]
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	e000      	b.n	8014c5c <udp_connect+0x78>
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	68fa      	ldr	r2, [r7, #12]
 8014c5e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	88fa      	ldrh	r2, [r7, #6]
 8014c64:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	7c1b      	ldrb	r3, [r3, #16]
 8014c6a:	f043 0304 	orr.w	r3, r3, #4
 8014c6e:	b2da      	uxtb	r2, r3
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014c74:	4b11      	ldr	r3, [pc, #68]	; (8014cbc <udp_connect+0xd8>)
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	617b      	str	r3, [r7, #20]
 8014c7a:	e008      	b.n	8014c8e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014c7c:	68fa      	ldr	r2, [r7, #12]
 8014c7e:	697b      	ldr	r3, [r7, #20]
 8014c80:	429a      	cmp	r2, r3
 8014c82:	d101      	bne.n	8014c88 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014c84:	2300      	movs	r3, #0
 8014c86:	e00d      	b.n	8014ca4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014c88:	697b      	ldr	r3, [r7, #20]
 8014c8a:	68db      	ldr	r3, [r3, #12]
 8014c8c:	617b      	str	r3, [r7, #20]
 8014c8e:	697b      	ldr	r3, [r7, #20]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d1f3      	bne.n	8014c7c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014c94:	4b09      	ldr	r3, [pc, #36]	; (8014cbc <udp_connect+0xd8>)
 8014c96:	681a      	ldr	r2, [r3, #0]
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014c9c:	4a07      	ldr	r2, [pc, #28]	; (8014cbc <udp_connect+0xd8>)
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014ca2:	2300      	movs	r3, #0
}
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	3718      	adds	r7, #24
 8014ca8:	46bd      	mov	sp, r7
 8014caa:	bd80      	pop	{r7, pc}
 8014cac:	0801d654 	.word	0x0801d654
 8014cb0:	0801d934 	.word	0x0801d934
 8014cb4:	0801d6a8 	.word	0x0801d6a8
 8014cb8:	0801d950 	.word	0x0801d950
 8014cbc:	20016e2c 	.word	0x20016e2c

08014cc0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b084      	sub	sp, #16
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	60f8      	str	r0, [r7, #12]
 8014cc8:	60b9      	str	r1, [r7, #8]
 8014cca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d107      	bne.n	8014ce2 <udp_recv+0x22>
 8014cd2:	4b08      	ldr	r3, [pc, #32]	; (8014cf4 <udp_recv+0x34>)
 8014cd4:	f240 428a 	movw	r2, #1162	; 0x48a
 8014cd8:	4907      	ldr	r1, [pc, #28]	; (8014cf8 <udp_recv+0x38>)
 8014cda:	4808      	ldr	r0, [pc, #32]	; (8014cfc <udp_recv+0x3c>)
 8014cdc:	f004 fc46 	bl	801956c <iprintf>
 8014ce0:	e005      	b.n	8014cee <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	68ba      	ldr	r2, [r7, #8]
 8014ce6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	687a      	ldr	r2, [r7, #4]
 8014cec:	61da      	str	r2, [r3, #28]
}
 8014cee:	3710      	adds	r7, #16
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	0801d654 	.word	0x0801d654
 8014cf8:	0801d988 	.word	0x0801d988
 8014cfc:	0801d6a8 	.word	0x0801d6a8

08014d00 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b084      	sub	sp, #16
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d107      	bne.n	8014d1e <udp_remove+0x1e>
 8014d0e:	4b19      	ldr	r3, [pc, #100]	; (8014d74 <udp_remove+0x74>)
 8014d10:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014d14:	4918      	ldr	r1, [pc, #96]	; (8014d78 <udp_remove+0x78>)
 8014d16:	4819      	ldr	r0, [pc, #100]	; (8014d7c <udp_remove+0x7c>)
 8014d18:	f004 fc28 	bl	801956c <iprintf>
 8014d1c:	e026      	b.n	8014d6c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014d1e:	4b18      	ldr	r3, [pc, #96]	; (8014d80 <udp_remove+0x80>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	687a      	ldr	r2, [r7, #4]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d105      	bne.n	8014d34 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014d28:	4b15      	ldr	r3, [pc, #84]	; (8014d80 <udp_remove+0x80>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	68db      	ldr	r3, [r3, #12]
 8014d2e:	4a14      	ldr	r2, [pc, #80]	; (8014d80 <udp_remove+0x80>)
 8014d30:	6013      	str	r3, [r2, #0]
 8014d32:	e017      	b.n	8014d64 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014d34:	4b12      	ldr	r3, [pc, #72]	; (8014d80 <udp_remove+0x80>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	60fb      	str	r3, [r7, #12]
 8014d3a:	e010      	b.n	8014d5e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	68db      	ldr	r3, [r3, #12]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d009      	beq.n	8014d58 <udp_remove+0x58>
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	68db      	ldr	r3, [r3, #12]
 8014d48:	687a      	ldr	r2, [r7, #4]
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d104      	bne.n	8014d58 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	68da      	ldr	r2, [r3, #12]
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	60da      	str	r2, [r3, #12]
        break;
 8014d56:	e005      	b.n	8014d64 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	68db      	ldr	r3, [r3, #12]
 8014d5c:	60fb      	str	r3, [r7, #12]
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d1eb      	bne.n	8014d3c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014d64:	6879      	ldr	r1, [r7, #4]
 8014d66:	2000      	movs	r0, #0
 8014d68:	f7f8 f816 	bl	800cd98 <memp_free>
}
 8014d6c:	3710      	adds	r7, #16
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}
 8014d72:	bf00      	nop
 8014d74:	0801d654 	.word	0x0801d654
 8014d78:	0801d9a0 	.word	0x0801d9a0
 8014d7c:	0801d6a8 	.word	0x0801d6a8
 8014d80:	20016e2c 	.word	0x20016e2c

08014d84 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b082      	sub	sp, #8
 8014d88:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014d8a:	2000      	movs	r0, #0
 8014d8c:	f7f7 ffb2 	bl	800ccf4 <memp_malloc>
 8014d90:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d007      	beq.n	8014da8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014d98:	2220      	movs	r2, #32
 8014d9a:	2100      	movs	r1, #0
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f004 fbdc 	bl	801955a <memset>
    pcb->ttl = UDP_TTL;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	22ff      	movs	r2, #255	; 0xff
 8014da6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014da8:	687b      	ldr	r3, [r7, #4]
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	3708      	adds	r7, #8
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}

08014db2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8014db2:	b580      	push	{r7, lr}
 8014db4:	b084      	sub	sp, #16
 8014db6:	af00      	add	r7, sp, #0
 8014db8:	4603      	mov	r3, r0
 8014dba:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8014dbc:	f7ff ffe2 	bl	8014d84 <udp_new>
 8014dc0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014dc2:	68fb      	ldr	r3, [r7, #12]
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3710      	adds	r7, #16
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}

08014dcc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014dcc:	b480      	push	{r7}
 8014dce:	b085      	sub	sp, #20
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d01e      	beq.n	8014e1a <udp_netif_ip_addr_changed+0x4e>
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d01a      	beq.n	8014e1a <udp_netif_ip_addr_changed+0x4e>
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d017      	beq.n	8014e1a <udp_netif_ip_addr_changed+0x4e>
 8014dea:	683b      	ldr	r3, [r7, #0]
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d013      	beq.n	8014e1a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014df2:	4b0d      	ldr	r3, [pc, #52]	; (8014e28 <udp_netif_ip_addr_changed+0x5c>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	60fb      	str	r3, [r7, #12]
 8014df8:	e00c      	b.n	8014e14 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	681a      	ldr	r2, [r3, #0]
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d103      	bne.n	8014e0e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014e06:	683b      	ldr	r3, [r7, #0]
 8014e08:	681a      	ldr	r2, [r3, #0]
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	68db      	ldr	r3, [r3, #12]
 8014e12:	60fb      	str	r3, [r7, #12]
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d1ef      	bne.n	8014dfa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014e1a:	bf00      	nop
 8014e1c:	3714      	adds	r7, #20
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e24:	4770      	bx	lr
 8014e26:	bf00      	nop
 8014e28:	20016e2c 	.word	0x20016e2c

08014e2c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014e30:	4b20      	ldr	r3, [pc, #128]	; (8014eb4 <dhcp_inc_pcb_refcount+0x88>)
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d133      	bne.n	8014ea0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014e38:	4b1f      	ldr	r3, [pc, #124]	; (8014eb8 <dhcp_inc_pcb_refcount+0x8c>)
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d005      	beq.n	8014e4c <dhcp_inc_pcb_refcount+0x20>
 8014e40:	4b1e      	ldr	r3, [pc, #120]	; (8014ebc <dhcp_inc_pcb_refcount+0x90>)
 8014e42:	22e5      	movs	r2, #229	; 0xe5
 8014e44:	491e      	ldr	r1, [pc, #120]	; (8014ec0 <dhcp_inc_pcb_refcount+0x94>)
 8014e46:	481f      	ldr	r0, [pc, #124]	; (8014ec4 <dhcp_inc_pcb_refcount+0x98>)
 8014e48:	f004 fb90 	bl	801956c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014e4c:	f7ff ff9a 	bl	8014d84 <udp_new>
 8014e50:	4602      	mov	r2, r0
 8014e52:	4b19      	ldr	r3, [pc, #100]	; (8014eb8 <dhcp_inc_pcb_refcount+0x8c>)
 8014e54:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8014e56:	4b18      	ldr	r3, [pc, #96]	; (8014eb8 <dhcp_inc_pcb_refcount+0x8c>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d102      	bne.n	8014e64 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8014e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e62:	e024      	b.n	8014eae <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014e64:	4b14      	ldr	r3, [pc, #80]	; (8014eb8 <dhcp_inc_pcb_refcount+0x8c>)
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	7a5a      	ldrb	r2, [r3, #9]
 8014e6a:	4b13      	ldr	r3, [pc, #76]	; (8014eb8 <dhcp_inc_pcb_refcount+0x8c>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	f042 0220 	orr.w	r2, r2, #32
 8014e72:	b2d2      	uxtb	r2, r2
 8014e74:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014e76:	4b10      	ldr	r3, [pc, #64]	; (8014eb8 <dhcp_inc_pcb_refcount+0x8c>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	2244      	movs	r2, #68	; 0x44
 8014e7c:	4912      	ldr	r1, [pc, #72]	; (8014ec8 <dhcp_inc_pcb_refcount+0x9c>)
 8014e7e:	4618      	mov	r0, r3
 8014e80:	f7ff fe28 	bl	8014ad4 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014e84:	4b0c      	ldr	r3, [pc, #48]	; (8014eb8 <dhcp_inc_pcb_refcount+0x8c>)
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	2243      	movs	r2, #67	; 0x43
 8014e8a:	490f      	ldr	r1, [pc, #60]	; (8014ec8 <dhcp_inc_pcb_refcount+0x9c>)
 8014e8c:	4618      	mov	r0, r3
 8014e8e:	f7ff fea9 	bl	8014be4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014e92:	4b09      	ldr	r3, [pc, #36]	; (8014eb8 <dhcp_inc_pcb_refcount+0x8c>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	2200      	movs	r2, #0
 8014e98:	490c      	ldr	r1, [pc, #48]	; (8014ecc <dhcp_inc_pcb_refcount+0xa0>)
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f7ff ff10 	bl	8014cc0 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014ea0:	4b04      	ldr	r3, [pc, #16]	; (8014eb4 <dhcp_inc_pcb_refcount+0x88>)
 8014ea2:	781b      	ldrb	r3, [r3, #0]
 8014ea4:	3301      	adds	r3, #1
 8014ea6:	b2da      	uxtb	r2, r3
 8014ea8:	4b02      	ldr	r3, [pc, #8]	; (8014eb4 <dhcp_inc_pcb_refcount+0x88>)
 8014eaa:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014eac:	2300      	movs	r3, #0
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	bd80      	pop	{r7, pc}
 8014eb2:	bf00      	nop
 8014eb4:	2001029c 	.word	0x2001029c
 8014eb8:	20010298 	.word	0x20010298
 8014ebc:	0801d9b8 	.word	0x0801d9b8
 8014ec0:	0801d9f0 	.word	0x0801d9f0
 8014ec4:	0801da18 	.word	0x0801da18
 8014ec8:	08023070 	.word	0x08023070
 8014ecc:	0801679d 	.word	0x0801679d

08014ed0 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014ed4:	4b0e      	ldr	r3, [pc, #56]	; (8014f10 <dhcp_dec_pcb_refcount+0x40>)
 8014ed6:	781b      	ldrb	r3, [r3, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d105      	bne.n	8014ee8 <dhcp_dec_pcb_refcount+0x18>
 8014edc:	4b0d      	ldr	r3, [pc, #52]	; (8014f14 <dhcp_dec_pcb_refcount+0x44>)
 8014ede:	22ff      	movs	r2, #255	; 0xff
 8014ee0:	490d      	ldr	r1, [pc, #52]	; (8014f18 <dhcp_dec_pcb_refcount+0x48>)
 8014ee2:	480e      	ldr	r0, [pc, #56]	; (8014f1c <dhcp_dec_pcb_refcount+0x4c>)
 8014ee4:	f004 fb42 	bl	801956c <iprintf>
  dhcp_pcb_refcount--;
 8014ee8:	4b09      	ldr	r3, [pc, #36]	; (8014f10 <dhcp_dec_pcb_refcount+0x40>)
 8014eea:	781b      	ldrb	r3, [r3, #0]
 8014eec:	3b01      	subs	r3, #1
 8014eee:	b2da      	uxtb	r2, r3
 8014ef0:	4b07      	ldr	r3, [pc, #28]	; (8014f10 <dhcp_dec_pcb_refcount+0x40>)
 8014ef2:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014ef4:	4b06      	ldr	r3, [pc, #24]	; (8014f10 <dhcp_dec_pcb_refcount+0x40>)
 8014ef6:	781b      	ldrb	r3, [r3, #0]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d107      	bne.n	8014f0c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014efc:	4b08      	ldr	r3, [pc, #32]	; (8014f20 <dhcp_dec_pcb_refcount+0x50>)
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	4618      	mov	r0, r3
 8014f02:	f7ff fefd 	bl	8014d00 <udp_remove>
    dhcp_pcb = NULL;
 8014f06:	4b06      	ldr	r3, [pc, #24]	; (8014f20 <dhcp_dec_pcb_refcount+0x50>)
 8014f08:	2200      	movs	r2, #0
 8014f0a:	601a      	str	r2, [r3, #0]
  }
}
 8014f0c:	bf00      	nop
 8014f0e:	bd80      	pop	{r7, pc}
 8014f10:	2001029c 	.word	0x2001029c
 8014f14:	0801d9b8 	.word	0x0801d9b8
 8014f18:	0801da40 	.word	0x0801da40
 8014f1c:	0801da18 	.word	0x0801da18
 8014f20:	20010298 	.word	0x20010298

08014f24 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b084      	sub	sp, #16
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f30:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014f32:	210c      	movs	r1, #12
 8014f34:	68f8      	ldr	r0, [r7, #12]
 8014f36:	f001 f872 	bl	801601e <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014f3a:	4b06      	ldr	r3, [pc, #24]	; (8014f54 <dhcp_handle_nak+0x30>)
 8014f3c:	4a05      	ldr	r2, [pc, #20]	; (8014f54 <dhcp_handle_nak+0x30>)
 8014f3e:	4905      	ldr	r1, [pc, #20]	; (8014f54 <dhcp_handle_nak+0x30>)
 8014f40:	6878      	ldr	r0, [r7, #4]
 8014f42:	f7f8 f8cb 	bl	800d0dc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014f46:	6878      	ldr	r0, [r7, #4]
 8014f48:	f000 fc5a 	bl	8015800 <dhcp_discover>
}
 8014f4c:	bf00      	nop
 8014f4e:	3710      	adds	r7, #16
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bd80      	pop	{r7, pc}
 8014f54:	08023070 	.word	0x08023070

08014f58 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b084      	sub	sp, #16
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f64:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014f66:	2108      	movs	r1, #8
 8014f68:	68f8      	ldr	r0, [r7, #12]
 8014f6a:	f001 f858 	bl	801601e <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	331c      	adds	r3, #28
 8014f72:	2200      	movs	r2, #0
 8014f74:	4619      	mov	r1, r3
 8014f76:	6878      	ldr	r0, [r7, #4]
 8014f78:	f002 fb58 	bl	801762c <etharp_query>
 8014f7c:	4603      	mov	r3, r0
 8014f7e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	799b      	ldrb	r3, [r3, #6]
 8014f84:	2bff      	cmp	r3, #255	; 0xff
 8014f86:	d005      	beq.n	8014f94 <dhcp_check+0x3c>
    dhcp->tries++;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	799b      	ldrb	r3, [r3, #6]
 8014f8c:	3301      	adds	r3, #1
 8014f8e:	b2da      	uxtb	r2, r3
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014f94:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014f98:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014f9a:	893b      	ldrh	r3, [r7, #8]
 8014f9c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014fa0:	4a06      	ldr	r2, [pc, #24]	; (8014fbc <dhcp_check+0x64>)
 8014fa2:	fb82 1203 	smull	r1, r2, r2, r3
 8014fa6:	1152      	asrs	r2, r2, #5
 8014fa8:	17db      	asrs	r3, r3, #31
 8014faa:	1ad3      	subs	r3, r2, r3
 8014fac:	b29a      	uxth	r2, r3
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014fb2:	bf00      	nop
 8014fb4:	3710      	adds	r7, #16
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}
 8014fba:	bf00      	nop
 8014fbc:	10624dd3 	.word	0x10624dd3

08014fc0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b084      	sub	sp, #16
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014fd0:	4b0c      	ldr	r3, [pc, #48]	; (8015004 <dhcp_handle_offer+0x44>)
 8014fd2:	789b      	ldrb	r3, [r3, #2]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d011      	beq.n	8014ffc <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	2200      	movs	r2, #0
 8014fdc:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8014fde:	4b0a      	ldr	r3, [pc, #40]	; (8015008 <dhcp_handle_offer+0x48>)
 8014fe0:	689b      	ldr	r3, [r3, #8]
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7f7 f9af 	bl	800c346 <lwip_htonl>
 8014fe8:	4602      	mov	r2, r0
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014fee:	683b      	ldr	r3, [r7, #0]
 8014ff0:	691a      	ldr	r2, [r3, #16]
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014ff6:	6878      	ldr	r0, [r7, #4]
 8014ff8:	f000 f808 	bl	801500c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014ffc:	bf00      	nop
 8014ffe:	3710      	adds	r7, #16
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}
 8015004:	20016e30 	.word	0x20016e30
 8015008:	20016e38 	.word	0x20016e38

0801500c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801500c:	b5b0      	push	{r4, r5, r7, lr}
 801500e:	b08a      	sub	sp, #40	; 0x28
 8015010:	af02      	add	r7, sp, #8
 8015012:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d109      	bne.n	801502e <dhcp_select+0x22>
 801501a:	4b71      	ldr	r3, [pc, #452]	; (80151e0 <dhcp_select+0x1d4>)
 801501c:	f240 1277 	movw	r2, #375	; 0x177
 8015020:	4970      	ldr	r1, [pc, #448]	; (80151e4 <dhcp_select+0x1d8>)
 8015022:	4871      	ldr	r0, [pc, #452]	; (80151e8 <dhcp_select+0x1dc>)
 8015024:	f004 faa2 	bl	801956c <iprintf>
 8015028:	f06f 030f 	mvn.w	r3, #15
 801502c:	e0d3      	b.n	80151d6 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015032:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015034:	69bb      	ldr	r3, [r7, #24]
 8015036:	2b00      	cmp	r3, #0
 8015038:	d109      	bne.n	801504e <dhcp_select+0x42>
 801503a:	4b69      	ldr	r3, [pc, #420]	; (80151e0 <dhcp_select+0x1d4>)
 801503c:	f240 1279 	movw	r2, #377	; 0x179
 8015040:	496a      	ldr	r1, [pc, #424]	; (80151ec <dhcp_select+0x1e0>)
 8015042:	4869      	ldr	r0, [pc, #420]	; (80151e8 <dhcp_select+0x1dc>)
 8015044:	f004 fa92 	bl	801956c <iprintf>
 8015048:	f06f 0305 	mvn.w	r3, #5
 801504c:	e0c3      	b.n	80151d6 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801504e:	2101      	movs	r1, #1
 8015050:	69b8      	ldr	r0, [r7, #24]
 8015052:	f000 ffe4 	bl	801601e <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015056:	f107 030c 	add.w	r3, r7, #12
 801505a:	2203      	movs	r2, #3
 801505c:	69b9      	ldr	r1, [r7, #24]
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	f001 fc68 	bl	8016934 <dhcp_create_msg>
 8015064:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	2b00      	cmp	r3, #0
 801506a:	f000 8085 	beq.w	8015178 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801506e:	697b      	ldr	r3, [r7, #20]
 8015070:	685b      	ldr	r3, [r3, #4]
 8015072:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015074:	89b8      	ldrh	r0, [r7, #12]
 8015076:	693b      	ldr	r3, [r7, #16]
 8015078:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801507c:	2302      	movs	r3, #2
 801507e:	2239      	movs	r2, #57	; 0x39
 8015080:	f000 ffe8 	bl	8016054 <dhcp_option>
 8015084:	4603      	mov	r3, r0
 8015086:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015088:	89b8      	ldrh	r0, [r7, #12]
 801508a:	693b      	ldr	r3, [r7, #16]
 801508c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015094:	461a      	mov	r2, r3
 8015096:	f001 f837 	bl	8016108 <dhcp_option_short>
 801509a:	4603      	mov	r3, r0
 801509c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801509e:	89b8      	ldrh	r0, [r7, #12]
 80150a0:	693b      	ldr	r3, [r7, #16]
 80150a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150a6:	2304      	movs	r3, #4
 80150a8:	2232      	movs	r2, #50	; 0x32
 80150aa:	f000 ffd3 	bl	8016054 <dhcp_option>
 80150ae:	4603      	mov	r3, r0
 80150b0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80150b2:	89bc      	ldrh	r4, [r7, #12]
 80150b4:	693b      	ldr	r3, [r7, #16]
 80150b6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80150ba:	69bb      	ldr	r3, [r7, #24]
 80150bc:	69db      	ldr	r3, [r3, #28]
 80150be:	4618      	mov	r0, r3
 80150c0:	f7f7 f941 	bl	800c346 <lwip_htonl>
 80150c4:	4603      	mov	r3, r0
 80150c6:	461a      	mov	r2, r3
 80150c8:	4629      	mov	r1, r5
 80150ca:	4620      	mov	r0, r4
 80150cc:	f001 f84e 	bl	801616c <dhcp_option_long>
 80150d0:	4603      	mov	r3, r0
 80150d2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80150d4:	89b8      	ldrh	r0, [r7, #12]
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150dc:	2304      	movs	r3, #4
 80150de:	2236      	movs	r2, #54	; 0x36
 80150e0:	f000 ffb8 	bl	8016054 <dhcp_option>
 80150e4:	4603      	mov	r3, r0
 80150e6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80150e8:	89bc      	ldrh	r4, [r7, #12]
 80150ea:	693b      	ldr	r3, [r7, #16]
 80150ec:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80150f0:	69bb      	ldr	r3, [r7, #24]
 80150f2:	699b      	ldr	r3, [r3, #24]
 80150f4:	4618      	mov	r0, r3
 80150f6:	f7f7 f926 	bl	800c346 <lwip_htonl>
 80150fa:	4603      	mov	r3, r0
 80150fc:	461a      	mov	r2, r3
 80150fe:	4629      	mov	r1, r5
 8015100:	4620      	mov	r0, r4
 8015102:	f001 f833 	bl	801616c <dhcp_option_long>
 8015106:	4603      	mov	r3, r0
 8015108:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801510a:	89b8      	ldrh	r0, [r7, #12]
 801510c:	693b      	ldr	r3, [r7, #16]
 801510e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015112:	2303      	movs	r3, #3
 8015114:	2237      	movs	r2, #55	; 0x37
 8015116:	f000 ff9d 	bl	8016054 <dhcp_option>
 801511a:	4603      	mov	r3, r0
 801511c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801511e:	2300      	movs	r3, #0
 8015120:	77bb      	strb	r3, [r7, #30]
 8015122:	e00e      	b.n	8015142 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015124:	89b8      	ldrh	r0, [r7, #12]
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801512c:	7fbb      	ldrb	r3, [r7, #30]
 801512e:	4a30      	ldr	r2, [pc, #192]	; (80151f0 <dhcp_select+0x1e4>)
 8015130:	5cd3      	ldrb	r3, [r2, r3]
 8015132:	461a      	mov	r2, r3
 8015134:	f000 ffc2 	bl	80160bc <dhcp_option_byte>
 8015138:	4603      	mov	r3, r0
 801513a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801513c:	7fbb      	ldrb	r3, [r7, #30]
 801513e:	3301      	adds	r3, #1
 8015140:	77bb      	strb	r3, [r7, #30]
 8015142:	7fbb      	ldrb	r3, [r7, #30]
 8015144:	2b02      	cmp	r3, #2
 8015146:	d9ed      	bls.n	8015124 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015148:	89b8      	ldrh	r0, [r7, #12]
 801514a:	693b      	ldr	r3, [r7, #16]
 801514c:	33f0      	adds	r3, #240	; 0xf0
 801514e:	697a      	ldr	r2, [r7, #20]
 8015150:	4619      	mov	r1, r3
 8015152:	f001 fcc5 	bl	8016ae0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015156:	4b27      	ldr	r3, [pc, #156]	; (80151f4 <dhcp_select+0x1e8>)
 8015158:	6818      	ldr	r0, [r3, #0]
 801515a:	4b27      	ldr	r3, [pc, #156]	; (80151f8 <dhcp_select+0x1ec>)
 801515c:	9301      	str	r3, [sp, #4]
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	9300      	str	r3, [sp, #0]
 8015162:	2343      	movs	r3, #67	; 0x43
 8015164:	4a25      	ldr	r2, [pc, #148]	; (80151fc <dhcp_select+0x1f0>)
 8015166:	6979      	ldr	r1, [r7, #20]
 8015168:	f7ff fbce 	bl	8014908 <udp_sendto_if_src>
 801516c:	4603      	mov	r3, r0
 801516e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015170:	6978      	ldr	r0, [r7, #20]
 8015172:	f7f8 fcbd 	bl	800daf0 <pbuf_free>
 8015176:	e001      	b.n	801517c <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015178:	23ff      	movs	r3, #255	; 0xff
 801517a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801517c:	69bb      	ldr	r3, [r7, #24]
 801517e:	799b      	ldrb	r3, [r3, #6]
 8015180:	2bff      	cmp	r3, #255	; 0xff
 8015182:	d005      	beq.n	8015190 <dhcp_select+0x184>
    dhcp->tries++;
 8015184:	69bb      	ldr	r3, [r7, #24]
 8015186:	799b      	ldrb	r3, [r3, #6]
 8015188:	3301      	adds	r3, #1
 801518a:	b2da      	uxtb	r2, r3
 801518c:	69bb      	ldr	r3, [r7, #24]
 801518e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015190:	69bb      	ldr	r3, [r7, #24]
 8015192:	799b      	ldrb	r3, [r3, #6]
 8015194:	2b05      	cmp	r3, #5
 8015196:	d80d      	bhi.n	80151b4 <dhcp_select+0x1a8>
 8015198:	69bb      	ldr	r3, [r7, #24]
 801519a:	799b      	ldrb	r3, [r3, #6]
 801519c:	461a      	mov	r2, r3
 801519e:	2301      	movs	r3, #1
 80151a0:	4093      	lsls	r3, r2
 80151a2:	b29b      	uxth	r3, r3
 80151a4:	461a      	mov	r2, r3
 80151a6:	0152      	lsls	r2, r2, #5
 80151a8:	1ad2      	subs	r2, r2, r3
 80151aa:	0092      	lsls	r2, r2, #2
 80151ac:	4413      	add	r3, r2
 80151ae:	00db      	lsls	r3, r3, #3
 80151b0:	b29b      	uxth	r3, r3
 80151b2:	e001      	b.n	80151b8 <dhcp_select+0x1ac>
 80151b4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80151b8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80151ba:	89fb      	ldrh	r3, [r7, #14]
 80151bc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80151c0:	4a0f      	ldr	r2, [pc, #60]	; (8015200 <dhcp_select+0x1f4>)
 80151c2:	fb82 1203 	smull	r1, r2, r2, r3
 80151c6:	1152      	asrs	r2, r2, #5
 80151c8:	17db      	asrs	r3, r3, #31
 80151ca:	1ad3      	subs	r3, r2, r3
 80151cc:	b29a      	uxth	r2, r3
 80151ce:	69bb      	ldr	r3, [r7, #24]
 80151d0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80151d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80151d6:	4618      	mov	r0, r3
 80151d8:	3720      	adds	r7, #32
 80151da:	46bd      	mov	sp, r7
 80151dc:	bdb0      	pop	{r4, r5, r7, pc}
 80151de:	bf00      	nop
 80151e0:	0801d9b8 	.word	0x0801d9b8
 80151e4:	0801da64 	.word	0x0801da64
 80151e8:	0801da18 	.word	0x0801da18
 80151ec:	0801da80 	.word	0x0801da80
 80151f0:	2000001c 	.word	0x2000001c
 80151f4:	20010298 	.word	0x20010298
 80151f8:	08023070 	.word	0x08023070
 80151fc:	08023074 	.word	0x08023074
 8015200:	10624dd3 	.word	0x10624dd3

08015204 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b082      	sub	sp, #8
 8015208:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801520a:	4b27      	ldr	r3, [pc, #156]	; (80152a8 <dhcp_coarse_tmr+0xa4>)
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	607b      	str	r3, [r7, #4]
 8015210:	e042      	b.n	8015298 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015216:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d039      	beq.n	8015292 <dhcp_coarse_tmr+0x8e>
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	795b      	ldrb	r3, [r3, #5]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d035      	beq.n	8015292 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8015226:	683b      	ldr	r3, [r7, #0]
 8015228:	8a9b      	ldrh	r3, [r3, #20]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d012      	beq.n	8015254 <dhcp_coarse_tmr+0x50>
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	8a5b      	ldrh	r3, [r3, #18]
 8015232:	3301      	adds	r3, #1
 8015234:	b29a      	uxth	r2, r3
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	825a      	strh	r2, [r3, #18]
 801523a:	683b      	ldr	r3, [r7, #0]
 801523c:	8a5a      	ldrh	r2, [r3, #18]
 801523e:	683b      	ldr	r3, [r7, #0]
 8015240:	8a9b      	ldrh	r3, [r3, #20]
 8015242:	429a      	cmp	r2, r3
 8015244:	d106      	bne.n	8015254 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8015246:	6878      	ldr	r0, [r7, #4]
 8015248:	f000 fe44 	bl	8015ed4 <dhcp_release_and_stop>
        dhcp_start(netif);
 801524c:	6878      	ldr	r0, [r7, #4]
 801524e:	f000 f969 	bl	8015524 <dhcp_start>
 8015252:	e01e      	b.n	8015292 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015254:	683b      	ldr	r3, [r7, #0]
 8015256:	8a1b      	ldrh	r3, [r3, #16]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d00b      	beq.n	8015274 <dhcp_coarse_tmr+0x70>
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	8a1b      	ldrh	r3, [r3, #16]
 8015260:	1e5a      	subs	r2, r3, #1
 8015262:	b291      	uxth	r1, r2
 8015264:	683a      	ldr	r2, [r7, #0]
 8015266:	8211      	strh	r1, [r2, #16]
 8015268:	2b01      	cmp	r3, #1
 801526a:	d103      	bne.n	8015274 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801526c:	6878      	ldr	r0, [r7, #4]
 801526e:	f000 f8c6 	bl	80153fe <dhcp_t2_timeout>
 8015272:	e00e      	b.n	8015292 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015274:	683b      	ldr	r3, [r7, #0]
 8015276:	89db      	ldrh	r3, [r3, #14]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d00a      	beq.n	8015292 <dhcp_coarse_tmr+0x8e>
 801527c:	683b      	ldr	r3, [r7, #0]
 801527e:	89db      	ldrh	r3, [r3, #14]
 8015280:	1e5a      	subs	r2, r3, #1
 8015282:	b291      	uxth	r1, r2
 8015284:	683a      	ldr	r2, [r7, #0]
 8015286:	81d1      	strh	r1, [r2, #14]
 8015288:	2b01      	cmp	r3, #1
 801528a:	d102      	bne.n	8015292 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	f000 f888 	bl	80153a2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	607b      	str	r3, [r7, #4]
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d1b9      	bne.n	8015212 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801529e:	bf00      	nop
 80152a0:	3708      	adds	r7, #8
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	bf00      	nop
 80152a8:	20016e04 	.word	0x20016e04

080152ac <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b082      	sub	sp, #8
 80152b0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80152b2:	4b16      	ldr	r3, [pc, #88]	; (801530c <dhcp_fine_tmr+0x60>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	607b      	str	r3, [r7, #4]
 80152b8:	e020      	b.n	80152fc <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152be:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d017      	beq.n	80152f6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	891b      	ldrh	r3, [r3, #8]
 80152ca:	2b01      	cmp	r3, #1
 80152cc:	d906      	bls.n	80152dc <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	891b      	ldrh	r3, [r3, #8]
 80152d2:	3b01      	subs	r3, #1
 80152d4:	b29a      	uxth	r2, r3
 80152d6:	683b      	ldr	r3, [r7, #0]
 80152d8:	811a      	strh	r2, [r3, #8]
 80152da:	e00c      	b.n	80152f6 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 80152dc:	683b      	ldr	r3, [r7, #0]
 80152de:	891b      	ldrh	r3, [r3, #8]
 80152e0:	2b01      	cmp	r3, #1
 80152e2:	d108      	bne.n	80152f6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	891b      	ldrh	r3, [r3, #8]
 80152e8:	3b01      	subs	r3, #1
 80152ea:	b29a      	uxth	r2, r3
 80152ec:	683b      	ldr	r3, [r7, #0]
 80152ee:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80152f0:	6878      	ldr	r0, [r7, #4]
 80152f2:	f000 f80d 	bl	8015310 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	607b      	str	r3, [r7, #4]
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d1db      	bne.n	80152ba <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8015302:	bf00      	nop
 8015304:	3708      	adds	r7, #8
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}
 801530a:	bf00      	nop
 801530c:	20016e04 	.word	0x20016e04

08015310 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b084      	sub	sp, #16
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801531c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	795b      	ldrb	r3, [r3, #5]
 8015322:	2b0c      	cmp	r3, #12
 8015324:	d003      	beq.n	801532e <dhcp_timeout+0x1e>
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	795b      	ldrb	r3, [r3, #5]
 801532a:	2b06      	cmp	r3, #6
 801532c:	d103      	bne.n	8015336 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801532e:	6878      	ldr	r0, [r7, #4]
 8015330:	f000 fa66 	bl	8015800 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8015334:	e031      	b.n	801539a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	795b      	ldrb	r3, [r3, #5]
 801533a:	2b01      	cmp	r3, #1
 801533c:	d10e      	bne.n	801535c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801533e:	68fb      	ldr	r3, [r7, #12]
 8015340:	799b      	ldrb	r3, [r3, #6]
 8015342:	2b05      	cmp	r3, #5
 8015344:	d803      	bhi.n	801534e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f7ff fe60 	bl	801500c <dhcp_select>
}
 801534c:	e025      	b.n	801539a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f000 fdc0 	bl	8015ed4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8015354:	6878      	ldr	r0, [r7, #4]
 8015356:	f000 f8e5 	bl	8015524 <dhcp_start>
}
 801535a:	e01e      	b.n	801539a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	795b      	ldrb	r3, [r3, #5]
 8015360:	2b08      	cmp	r3, #8
 8015362:	d10b      	bne.n	801537c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	799b      	ldrb	r3, [r3, #6]
 8015368:	2b01      	cmp	r3, #1
 801536a:	d803      	bhi.n	8015374 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801536c:	6878      	ldr	r0, [r7, #4]
 801536e:	f7ff fdf3 	bl	8014f58 <dhcp_check>
}
 8015372:	e012      	b.n	801539a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8015374:	6878      	ldr	r0, [r7, #4]
 8015376:	f000 fae5 	bl	8015944 <dhcp_bind>
}
 801537a:	e00e      	b.n	801539a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	795b      	ldrb	r3, [r3, #5]
 8015380:	2b03      	cmp	r3, #3
 8015382:	d10a      	bne.n	801539a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	799b      	ldrb	r3, [r3, #6]
 8015388:	2b01      	cmp	r3, #1
 801538a:	d803      	bhi.n	8015394 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801538c:	6878      	ldr	r0, [r7, #4]
 801538e:	f000 fceb 	bl	8015d68 <dhcp_reboot>
}
 8015392:	e002      	b.n	801539a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f000 fa33 	bl	8015800 <dhcp_discover>
}
 801539a:	bf00      	nop
 801539c:	3710      	adds	r7, #16
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}

080153a2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80153a2:	b580      	push	{r7, lr}
 80153a4:	b084      	sub	sp, #16
 80153a6:	af00      	add	r7, sp, #0
 80153a8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	795b      	ldrb	r3, [r3, #5]
 80153b4:	2b01      	cmp	r3, #1
 80153b6:	d007      	beq.n	80153c8 <dhcp_t1_timeout+0x26>
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	795b      	ldrb	r3, [r3, #5]
 80153bc:	2b0a      	cmp	r3, #10
 80153be:	d003      	beq.n	80153c8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80153c4:	2b05      	cmp	r3, #5
 80153c6:	d116      	bne.n	80153f6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f000 fb95 	bl	8015af8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	899b      	ldrh	r3, [r3, #12]
 80153d2:	461a      	mov	r2, r3
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	8a5b      	ldrh	r3, [r3, #18]
 80153d8:	1ad3      	subs	r3, r2, r3
 80153da:	2b01      	cmp	r3, #1
 80153dc:	dd0b      	ble.n	80153f6 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	899b      	ldrh	r3, [r3, #12]
 80153e2:	461a      	mov	r2, r3
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	8a5b      	ldrh	r3, [r3, #18]
 80153e8:	1ad3      	subs	r3, r2, r3
 80153ea:	0fda      	lsrs	r2, r3, #31
 80153ec:	4413      	add	r3, r2
 80153ee:	105b      	asrs	r3, r3, #1
 80153f0:	b29a      	uxth	r2, r3
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	81da      	strh	r2, [r3, #14]
    }
  }
}
 80153f6:	bf00      	nop
 80153f8:	3710      	adds	r7, #16
 80153fa:	46bd      	mov	sp, r7
 80153fc:	bd80      	pop	{r7, pc}

080153fe <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80153fe:	b580      	push	{r7, lr}
 8015400:	b084      	sub	sp, #16
 8015402:	af00      	add	r7, sp, #0
 8015404:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801540a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	795b      	ldrb	r3, [r3, #5]
 8015410:	2b01      	cmp	r3, #1
 8015412:	d00b      	beq.n	801542c <dhcp_t2_timeout+0x2e>
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	795b      	ldrb	r3, [r3, #5]
 8015418:	2b0a      	cmp	r3, #10
 801541a:	d007      	beq.n	801542c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015420:	2b05      	cmp	r3, #5
 8015422:	d003      	beq.n	801542c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	795b      	ldrb	r3, [r3, #5]
 8015428:	2b04      	cmp	r3, #4
 801542a:	d116      	bne.n	801545a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801542c:	6878      	ldr	r0, [r7, #4]
 801542e:	f000 fbff 	bl	8015c30 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	8a9b      	ldrh	r3, [r3, #20]
 8015436:	461a      	mov	r2, r3
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	8a5b      	ldrh	r3, [r3, #18]
 801543c:	1ad3      	subs	r3, r2, r3
 801543e:	2b01      	cmp	r3, #1
 8015440:	dd0b      	ble.n	801545a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	8a9b      	ldrh	r3, [r3, #20]
 8015446:	461a      	mov	r2, r3
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	8a5b      	ldrh	r3, [r3, #18]
 801544c:	1ad3      	subs	r3, r2, r3
 801544e:	0fda      	lsrs	r2, r3, #31
 8015450:	4413      	add	r3, r2
 8015452:	105b      	asrs	r3, r3, #1
 8015454:	b29a      	uxth	r2, r3
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801545a:	bf00      	nop
 801545c:	3710      	adds	r7, #16
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}
	...

08015464 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015464:	b580      	push	{r7, lr}
 8015466:	b084      	sub	sp, #16
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
 801546c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015472:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	2200      	movs	r2, #0
 8015478:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	2200      	movs	r2, #0
 801547e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015480:	4b26      	ldr	r3, [pc, #152]	; (801551c <dhcp_handle_ack+0xb8>)
 8015482:	78db      	ldrb	r3, [r3, #3]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d003      	beq.n	8015490 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8015488:	4b25      	ldr	r3, [pc, #148]	; (8015520 <dhcp_handle_ack+0xbc>)
 801548a:	68da      	ldr	r2, [r3, #12]
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015490:	4b22      	ldr	r3, [pc, #136]	; (801551c <dhcp_handle_ack+0xb8>)
 8015492:	791b      	ldrb	r3, [r3, #4]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d004      	beq.n	80154a2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015498:	4b21      	ldr	r3, [pc, #132]	; (8015520 <dhcp_handle_ack+0xbc>)
 801549a:	691a      	ldr	r2, [r3, #16]
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	62da      	str	r2, [r3, #44]	; 0x2c
 80154a0:	e004      	b.n	80154ac <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80154a6:	085a      	lsrs	r2, r3, #1
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80154ac:	4b1b      	ldr	r3, [pc, #108]	; (801551c <dhcp_handle_ack+0xb8>)
 80154ae:	795b      	ldrb	r3, [r3, #5]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d004      	beq.n	80154be <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80154b4:	4b1a      	ldr	r3, [pc, #104]	; (8015520 <dhcp_handle_ack+0xbc>)
 80154b6:	695a      	ldr	r2, [r3, #20]
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	631a      	str	r2, [r3, #48]	; 0x30
 80154bc:	e007      	b.n	80154ce <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80154c2:	4613      	mov	r3, r2
 80154c4:	00db      	lsls	r3, r3, #3
 80154c6:	1a9b      	subs	r3, r3, r2
 80154c8:	08da      	lsrs	r2, r3, #3
 80154ca:	68fb      	ldr	r3, [r7, #12]
 80154cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	691a      	ldr	r2, [r3, #16]
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80154d6:	4b11      	ldr	r3, [pc, #68]	; (801551c <dhcp_handle_ack+0xb8>)
 80154d8:	799b      	ldrb	r3, [r3, #6]
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d00b      	beq.n	80154f6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80154de:	4b10      	ldr	r3, [pc, #64]	; (8015520 <dhcp_handle_ack+0xbc>)
 80154e0:	699b      	ldr	r3, [r3, #24]
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7f6 ff2f 	bl	800c346 <lwip_htonl>
 80154e8:	4602      	mov	r2, r0
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	2201      	movs	r2, #1
 80154f2:	71da      	strb	r2, [r3, #7]
 80154f4:	e002      	b.n	80154fc <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	2200      	movs	r2, #0
 80154fa:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80154fc:	4b07      	ldr	r3, [pc, #28]	; (801551c <dhcp_handle_ack+0xb8>)
 80154fe:	79db      	ldrb	r3, [r3, #7]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d007      	beq.n	8015514 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8015504:	4b06      	ldr	r3, [pc, #24]	; (8015520 <dhcp_handle_ack+0xbc>)
 8015506:	69db      	ldr	r3, [r3, #28]
 8015508:	4618      	mov	r0, r3
 801550a:	f7f6 ff1c 	bl	800c346 <lwip_htonl>
 801550e:	4602      	mov	r2, r0
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8015514:	bf00      	nop
 8015516:	3710      	adds	r7, #16
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}
 801551c:	20016e30 	.word	0x20016e30
 8015520:	20016e38 	.word	0x20016e38

08015524 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b084      	sub	sp, #16
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d109      	bne.n	8015546 <dhcp_start+0x22>
 8015532:	4b37      	ldr	r3, [pc, #220]	; (8015610 <dhcp_start+0xec>)
 8015534:	f240 22e7 	movw	r2, #743	; 0x2e7
 8015538:	4936      	ldr	r1, [pc, #216]	; (8015614 <dhcp_start+0xf0>)
 801553a:	4837      	ldr	r0, [pc, #220]	; (8015618 <dhcp_start+0xf4>)
 801553c:	f004 f816 	bl	801956c <iprintf>
 8015540:	f06f 030f 	mvn.w	r3, #15
 8015544:	e060      	b.n	8015608 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801554c:	f003 0301 	and.w	r3, r3, #1
 8015550:	2b00      	cmp	r3, #0
 8015552:	d109      	bne.n	8015568 <dhcp_start+0x44>
 8015554:	4b2e      	ldr	r3, [pc, #184]	; (8015610 <dhcp_start+0xec>)
 8015556:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801555a:	4930      	ldr	r1, [pc, #192]	; (801561c <dhcp_start+0xf8>)
 801555c:	482e      	ldr	r0, [pc, #184]	; (8015618 <dhcp_start+0xf4>)
 801555e:	f004 f805 	bl	801956c <iprintf>
 8015562:	f06f 030f 	mvn.w	r3, #15
 8015566:	e04f      	b.n	8015608 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801556c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015572:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8015576:	d202      	bcs.n	801557e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8015578:	f04f 33ff 	mov.w	r3, #4294967295
 801557c:	e044      	b.n	8015608 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d10d      	bne.n	80155a0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8015584:	2034      	movs	r0, #52	; 0x34
 8015586:	f7f7 fa33 	bl	800c9f0 <mem_malloc>
 801558a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d102      	bne.n	8015598 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8015592:	f04f 33ff 	mov.w	r3, #4294967295
 8015596:	e037      	b.n	8015608 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	68fa      	ldr	r2, [r7, #12]
 801559c:	625a      	str	r2, [r3, #36]	; 0x24
 801559e:	e005      	b.n	80155ac <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	791b      	ldrb	r3, [r3, #4]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d001      	beq.n	80155ac <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80155a8:	f7ff fc92 	bl	8014ed0 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80155ac:	2234      	movs	r2, #52	; 0x34
 80155ae:	2100      	movs	r1, #0
 80155b0:	68f8      	ldr	r0, [r7, #12]
 80155b2:	f003 ffd2 	bl	801955a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80155b6:	f7ff fc39 	bl	8014e2c <dhcp_inc_pcb_refcount>
 80155ba:	4603      	mov	r3, r0
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d002      	beq.n	80155c6 <dhcp_start+0xa2>
    return ERR_MEM;
 80155c0:	f04f 33ff 	mov.w	r3, #4294967295
 80155c4:	e020      	b.n	8015608 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	2201      	movs	r2, #1
 80155ca:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80155d2:	f003 0304 	and.w	r3, r3, #4
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d105      	bne.n	80155e6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80155da:	2102      	movs	r1, #2
 80155dc:	68f8      	ldr	r0, [r7, #12]
 80155de:	f000 fd1e 	bl	801601e <dhcp_set_state>
    return ERR_OK;
 80155e2:	2300      	movs	r3, #0
 80155e4:	e010      	b.n	8015608 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80155e6:	6878      	ldr	r0, [r7, #4]
 80155e8:	f000 f90a 	bl	8015800 <dhcp_discover>
 80155ec:	4603      	mov	r3, r0
 80155ee:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80155f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d005      	beq.n	8015604 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80155f8:	6878      	ldr	r0, [r7, #4]
 80155fa:	f000 fc6b 	bl	8015ed4 <dhcp_release_and_stop>
    return ERR_MEM;
 80155fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015602:	e001      	b.n	8015608 <dhcp_start+0xe4>
  }
  return result;
 8015604:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015608:	4618      	mov	r0, r3
 801560a:	3710      	adds	r7, #16
 801560c:	46bd      	mov	sp, r7
 801560e:	bd80      	pop	{r7, pc}
 8015610:	0801d9b8 	.word	0x0801d9b8
 8015614:	0801da9c 	.word	0x0801da9c
 8015618:	0801da18 	.word	0x0801da18
 801561c:	0801dae0 	.word	0x0801dae0

08015620 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b084      	sub	sp, #16
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801562c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d037      	beq.n	80156a4 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	795b      	ldrb	r3, [r3, #5]
 8015638:	2b0a      	cmp	r3, #10
 801563a:	d820      	bhi.n	801567e <dhcp_network_changed+0x5e>
 801563c:	a201      	add	r2, pc, #4	; (adr r2, 8015644 <dhcp_network_changed+0x24>)
 801563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015642:	bf00      	nop
 8015644:	080156a9 	.word	0x080156a9
 8015648:	0801567f 	.word	0x0801567f
 801564c:	0801567f 	.word	0x0801567f
 8015650:	08015671 	.word	0x08015671
 8015654:	08015671 	.word	0x08015671
 8015658:	08015671 	.word	0x08015671
 801565c:	0801567f 	.word	0x0801567f
 8015660:	0801567f 	.word	0x0801567f
 8015664:	0801567f 	.word	0x0801567f
 8015668:	0801567f 	.word	0x0801567f
 801566c:	08015671 	.word	0x08015671
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	2200      	movs	r2, #0
 8015674:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8015676:	6878      	ldr	r0, [r7, #4]
 8015678:	f000 fb76 	bl	8015d68 <dhcp_reboot>
      break;
 801567c:	e015      	b.n	80156aa <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	795b      	ldrb	r3, [r3, #5]
 8015682:	2b0c      	cmp	r3, #12
 8015684:	d906      	bls.n	8015694 <dhcp_network_changed+0x74>
 8015686:	4b0a      	ldr	r3, [pc, #40]	; (80156b0 <dhcp_network_changed+0x90>)
 8015688:	f240 326d 	movw	r2, #877	; 0x36d
 801568c:	4909      	ldr	r1, [pc, #36]	; (80156b4 <dhcp_network_changed+0x94>)
 801568e:	480a      	ldr	r0, [pc, #40]	; (80156b8 <dhcp_network_changed+0x98>)
 8015690:	f003 ff6c 	bl	801956c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	2200      	movs	r2, #0
 8015698:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f000 f8b0 	bl	8015800 <dhcp_discover>
      break;
 80156a0:	bf00      	nop
 80156a2:	e002      	b.n	80156aa <dhcp_network_changed+0x8a>
    return;
 80156a4:	bf00      	nop
 80156a6:	e000      	b.n	80156aa <dhcp_network_changed+0x8a>
      break;
 80156a8:	bf00      	nop
  }
}
 80156aa:	3710      	adds	r7, #16
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}
 80156b0:	0801d9b8 	.word	0x0801d9b8
 80156b4:	0801db04 	.word	0x0801db04
 80156b8:	0801da18 	.word	0x0801da18

080156bc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b084      	sub	sp, #16
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	6078      	str	r0, [r7, #4]
 80156c4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d107      	bne.n	80156dc <dhcp_arp_reply+0x20>
 80156cc:	4b0e      	ldr	r3, [pc, #56]	; (8015708 <dhcp_arp_reply+0x4c>)
 80156ce:	f240 328b 	movw	r2, #907	; 0x38b
 80156d2:	490e      	ldr	r1, [pc, #56]	; (801570c <dhcp_arp_reply+0x50>)
 80156d4:	480e      	ldr	r0, [pc, #56]	; (8015710 <dhcp_arp_reply+0x54>)
 80156d6:	f003 ff49 	bl	801956c <iprintf>
 80156da:	e012      	b.n	8015702 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156e0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d00c      	beq.n	8015702 <dhcp_arp_reply+0x46>
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	795b      	ldrb	r3, [r3, #5]
 80156ec:	2b08      	cmp	r3, #8
 80156ee:	d108      	bne.n	8015702 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	681a      	ldr	r2, [r3, #0]
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	69db      	ldr	r3, [r3, #28]
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d102      	bne.n	8015702 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f000 f809 	bl	8015714 <dhcp_decline>
    }
  }
}
 8015702:	3710      	adds	r7, #16
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}
 8015708:	0801d9b8 	.word	0x0801d9b8
 801570c:	0801da9c 	.word	0x0801da9c
 8015710:	0801da18 	.word	0x0801da18

08015714 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015714:	b5b0      	push	{r4, r5, r7, lr}
 8015716:	b08a      	sub	sp, #40	; 0x28
 8015718:	af02      	add	r7, sp, #8
 801571a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015720:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015722:	210c      	movs	r1, #12
 8015724:	69b8      	ldr	r0, [r7, #24]
 8015726:	f000 fc7a 	bl	801601e <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801572a:	f107 030c 	add.w	r3, r7, #12
 801572e:	2204      	movs	r2, #4
 8015730:	69b9      	ldr	r1, [r7, #24]
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	f001 f8fe 	bl	8016934 <dhcp_create_msg>
 8015738:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801573a:	697b      	ldr	r3, [r7, #20]
 801573c:	2b00      	cmp	r3, #0
 801573e:	d035      	beq.n	80157ac <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015740:	697b      	ldr	r3, [r7, #20]
 8015742:	685b      	ldr	r3, [r3, #4]
 8015744:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015746:	89b8      	ldrh	r0, [r7, #12]
 8015748:	693b      	ldr	r3, [r7, #16]
 801574a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801574e:	2304      	movs	r3, #4
 8015750:	2232      	movs	r2, #50	; 0x32
 8015752:	f000 fc7f 	bl	8016054 <dhcp_option>
 8015756:	4603      	mov	r3, r0
 8015758:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801575a:	89bc      	ldrh	r4, [r7, #12]
 801575c:	693b      	ldr	r3, [r7, #16]
 801575e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015762:	69bb      	ldr	r3, [r7, #24]
 8015764:	69db      	ldr	r3, [r3, #28]
 8015766:	4618      	mov	r0, r3
 8015768:	f7f6 fded 	bl	800c346 <lwip_htonl>
 801576c:	4603      	mov	r3, r0
 801576e:	461a      	mov	r2, r3
 8015770:	4629      	mov	r1, r5
 8015772:	4620      	mov	r0, r4
 8015774:	f000 fcfa 	bl	801616c <dhcp_option_long>
 8015778:	4603      	mov	r3, r0
 801577a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801577c:	89b8      	ldrh	r0, [r7, #12]
 801577e:	693b      	ldr	r3, [r7, #16]
 8015780:	33f0      	adds	r3, #240	; 0xf0
 8015782:	697a      	ldr	r2, [r7, #20]
 8015784:	4619      	mov	r1, r3
 8015786:	f001 f9ab 	bl	8016ae0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801578a:	4b19      	ldr	r3, [pc, #100]	; (80157f0 <dhcp_decline+0xdc>)
 801578c:	6818      	ldr	r0, [r3, #0]
 801578e:	4b19      	ldr	r3, [pc, #100]	; (80157f4 <dhcp_decline+0xe0>)
 8015790:	9301      	str	r3, [sp, #4]
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	9300      	str	r3, [sp, #0]
 8015796:	2343      	movs	r3, #67	; 0x43
 8015798:	4a17      	ldr	r2, [pc, #92]	; (80157f8 <dhcp_decline+0xe4>)
 801579a:	6979      	ldr	r1, [r7, #20]
 801579c:	f7ff f8b4 	bl	8014908 <udp_sendto_if_src>
 80157a0:	4603      	mov	r3, r0
 80157a2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80157a4:	6978      	ldr	r0, [r7, #20]
 80157a6:	f7f8 f9a3 	bl	800daf0 <pbuf_free>
 80157aa:	e001      	b.n	80157b0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80157ac:	23ff      	movs	r3, #255	; 0xff
 80157ae:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80157b0:	69bb      	ldr	r3, [r7, #24]
 80157b2:	799b      	ldrb	r3, [r3, #6]
 80157b4:	2bff      	cmp	r3, #255	; 0xff
 80157b6:	d005      	beq.n	80157c4 <dhcp_decline+0xb0>
    dhcp->tries++;
 80157b8:	69bb      	ldr	r3, [r7, #24]
 80157ba:	799b      	ldrb	r3, [r3, #6]
 80157bc:	3301      	adds	r3, #1
 80157be:	b2da      	uxtb	r2, r3
 80157c0:	69bb      	ldr	r3, [r7, #24]
 80157c2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80157c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80157c8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80157ca:	89fb      	ldrh	r3, [r7, #14]
 80157cc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80157d0:	4a0a      	ldr	r2, [pc, #40]	; (80157fc <dhcp_decline+0xe8>)
 80157d2:	fb82 1203 	smull	r1, r2, r2, r3
 80157d6:	1152      	asrs	r2, r2, #5
 80157d8:	17db      	asrs	r3, r3, #31
 80157da:	1ad3      	subs	r3, r2, r3
 80157dc:	b29a      	uxth	r2, r3
 80157de:	69bb      	ldr	r3, [r7, #24]
 80157e0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80157e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3720      	adds	r7, #32
 80157ea:	46bd      	mov	sp, r7
 80157ec:	bdb0      	pop	{r4, r5, r7, pc}
 80157ee:	bf00      	nop
 80157f0:	20010298 	.word	0x20010298
 80157f4:	08023070 	.word	0x08023070
 80157f8:	08023074 	.word	0x08023074
 80157fc:	10624dd3 	.word	0x10624dd3

08015800 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b08a      	sub	sp, #40	; 0x28
 8015804:	af02      	add	r7, sp, #8
 8015806:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801580c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801580e:	2300      	movs	r3, #0
 8015810:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8015812:	69bb      	ldr	r3, [r7, #24]
 8015814:	2200      	movs	r2, #0
 8015816:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8015818:	2106      	movs	r1, #6
 801581a:	69b8      	ldr	r0, [r7, #24]
 801581c:	f000 fbff 	bl	801601e <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8015820:	f107 0308 	add.w	r3, r7, #8
 8015824:	2201      	movs	r2, #1
 8015826:	69b9      	ldr	r1, [r7, #24]
 8015828:	6878      	ldr	r0, [r7, #4]
 801582a:	f001 f883 	bl	8016934 <dhcp_create_msg>
 801582e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d04b      	beq.n	80158ce <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015836:	693b      	ldr	r3, [r7, #16]
 8015838:	685b      	ldr	r3, [r3, #4]
 801583a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801583c:	8938      	ldrh	r0, [r7, #8]
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015844:	2302      	movs	r3, #2
 8015846:	2239      	movs	r2, #57	; 0x39
 8015848:	f000 fc04 	bl	8016054 <dhcp_option>
 801584c:	4603      	mov	r3, r0
 801584e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015850:	8938      	ldrh	r0, [r7, #8]
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801585c:	461a      	mov	r2, r3
 801585e:	f000 fc53 	bl	8016108 <dhcp_option_short>
 8015862:	4603      	mov	r3, r0
 8015864:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015866:	8938      	ldrh	r0, [r7, #8]
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801586e:	2303      	movs	r3, #3
 8015870:	2237      	movs	r2, #55	; 0x37
 8015872:	f000 fbef 	bl	8016054 <dhcp_option>
 8015876:	4603      	mov	r3, r0
 8015878:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801587a:	2300      	movs	r3, #0
 801587c:	77fb      	strb	r3, [r7, #31]
 801587e:	e00e      	b.n	801589e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015880:	8938      	ldrh	r0, [r7, #8]
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015888:	7ffb      	ldrb	r3, [r7, #31]
 801588a:	4a29      	ldr	r2, [pc, #164]	; (8015930 <dhcp_discover+0x130>)
 801588c:	5cd3      	ldrb	r3, [r2, r3]
 801588e:	461a      	mov	r2, r3
 8015890:	f000 fc14 	bl	80160bc <dhcp_option_byte>
 8015894:	4603      	mov	r3, r0
 8015896:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015898:	7ffb      	ldrb	r3, [r7, #31]
 801589a:	3301      	adds	r3, #1
 801589c:	77fb      	strb	r3, [r7, #31]
 801589e:	7ffb      	ldrb	r3, [r7, #31]
 80158a0:	2b02      	cmp	r3, #2
 80158a2:	d9ed      	bls.n	8015880 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80158a4:	8938      	ldrh	r0, [r7, #8]
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	33f0      	adds	r3, #240	; 0xf0
 80158aa:	693a      	ldr	r2, [r7, #16]
 80158ac:	4619      	mov	r1, r3
 80158ae:	f001 f917 	bl	8016ae0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80158b2:	4b20      	ldr	r3, [pc, #128]	; (8015934 <dhcp_discover+0x134>)
 80158b4:	6818      	ldr	r0, [r3, #0]
 80158b6:	4b20      	ldr	r3, [pc, #128]	; (8015938 <dhcp_discover+0x138>)
 80158b8:	9301      	str	r3, [sp, #4]
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	9300      	str	r3, [sp, #0]
 80158be:	2343      	movs	r3, #67	; 0x43
 80158c0:	4a1e      	ldr	r2, [pc, #120]	; (801593c <dhcp_discover+0x13c>)
 80158c2:	6939      	ldr	r1, [r7, #16]
 80158c4:	f7ff f820 	bl	8014908 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80158c8:	6938      	ldr	r0, [r7, #16]
 80158ca:	f7f8 f911 	bl	800daf0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80158ce:	69bb      	ldr	r3, [r7, #24]
 80158d0:	799b      	ldrb	r3, [r3, #6]
 80158d2:	2bff      	cmp	r3, #255	; 0xff
 80158d4:	d005      	beq.n	80158e2 <dhcp_discover+0xe2>
    dhcp->tries++;
 80158d6:	69bb      	ldr	r3, [r7, #24]
 80158d8:	799b      	ldrb	r3, [r3, #6]
 80158da:	3301      	adds	r3, #1
 80158dc:	b2da      	uxtb	r2, r3
 80158de:	69bb      	ldr	r3, [r7, #24]
 80158e0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80158e2:	69bb      	ldr	r3, [r7, #24]
 80158e4:	799b      	ldrb	r3, [r3, #6]
 80158e6:	2b05      	cmp	r3, #5
 80158e8:	d80d      	bhi.n	8015906 <dhcp_discover+0x106>
 80158ea:	69bb      	ldr	r3, [r7, #24]
 80158ec:	799b      	ldrb	r3, [r3, #6]
 80158ee:	461a      	mov	r2, r3
 80158f0:	2301      	movs	r3, #1
 80158f2:	4093      	lsls	r3, r2
 80158f4:	b29b      	uxth	r3, r3
 80158f6:	461a      	mov	r2, r3
 80158f8:	0152      	lsls	r2, r2, #5
 80158fa:	1ad2      	subs	r2, r2, r3
 80158fc:	0092      	lsls	r2, r2, #2
 80158fe:	4413      	add	r3, r2
 8015900:	00db      	lsls	r3, r3, #3
 8015902:	b29b      	uxth	r3, r3
 8015904:	e001      	b.n	801590a <dhcp_discover+0x10a>
 8015906:	f64e 2360 	movw	r3, #60000	; 0xea60
 801590a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801590c:	897b      	ldrh	r3, [r7, #10]
 801590e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015912:	4a0b      	ldr	r2, [pc, #44]	; (8015940 <dhcp_discover+0x140>)
 8015914:	fb82 1203 	smull	r1, r2, r2, r3
 8015918:	1152      	asrs	r2, r2, #5
 801591a:	17db      	asrs	r3, r3, #31
 801591c:	1ad3      	subs	r3, r2, r3
 801591e:	b29a      	uxth	r2, r3
 8015920:	69bb      	ldr	r3, [r7, #24]
 8015922:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015924:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015928:	4618      	mov	r0, r3
 801592a:	3720      	adds	r7, #32
 801592c:	46bd      	mov	sp, r7
 801592e:	bd80      	pop	{r7, pc}
 8015930:	2000001c 	.word	0x2000001c
 8015934:	20010298 	.word	0x20010298
 8015938:	08023070 	.word	0x08023070
 801593c:	08023074 	.word	0x08023074
 8015940:	10624dd3 	.word	0x10624dd3

08015944 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015944:	b580      	push	{r7, lr}
 8015946:	b088      	sub	sp, #32
 8015948:	af00      	add	r7, sp, #0
 801594a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d107      	bne.n	8015962 <dhcp_bind+0x1e>
 8015952:	4b64      	ldr	r3, [pc, #400]	; (8015ae4 <dhcp_bind+0x1a0>)
 8015954:	f240 4215 	movw	r2, #1045	; 0x415
 8015958:	4963      	ldr	r1, [pc, #396]	; (8015ae8 <dhcp_bind+0x1a4>)
 801595a:	4864      	ldr	r0, [pc, #400]	; (8015aec <dhcp_bind+0x1a8>)
 801595c:	f003 fe06 	bl	801956c <iprintf>
 8015960:	e0bc      	b.n	8015adc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015966:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8015968:	69bb      	ldr	r3, [r7, #24]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d107      	bne.n	801597e <dhcp_bind+0x3a>
 801596e:	4b5d      	ldr	r3, [pc, #372]	; (8015ae4 <dhcp_bind+0x1a0>)
 8015970:	f240 4217 	movw	r2, #1047	; 0x417
 8015974:	495e      	ldr	r1, [pc, #376]	; (8015af0 <dhcp_bind+0x1ac>)
 8015976:	485d      	ldr	r0, [pc, #372]	; (8015aec <dhcp_bind+0x1a8>)
 8015978:	f003 fdf8 	bl	801956c <iprintf>
 801597c:	e0ae      	b.n	8015adc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801597e:	69bb      	ldr	r3, [r7, #24]
 8015980:	2200      	movs	r2, #0
 8015982:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015984:	69bb      	ldr	r3, [r7, #24]
 8015986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801598c:	d019      	beq.n	80159c2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801598e:	69bb      	ldr	r3, [r7, #24]
 8015990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015992:	331e      	adds	r3, #30
 8015994:	4a57      	ldr	r2, [pc, #348]	; (8015af4 <dhcp_bind+0x1b0>)
 8015996:	fba2 2303 	umull	r2, r3, r2, r3
 801599a:	095b      	lsrs	r3, r3, #5
 801599c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801599e:	69fb      	ldr	r3, [r7, #28]
 80159a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159a4:	d302      	bcc.n	80159ac <dhcp_bind+0x68>
      timeout = 0xffff;
 80159a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80159aa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80159ac:	69fb      	ldr	r3, [r7, #28]
 80159ae:	b29a      	uxth	r2, r3
 80159b0:	69bb      	ldr	r3, [r7, #24]
 80159b2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80159b4:	69bb      	ldr	r3, [r7, #24]
 80159b6:	8a9b      	ldrh	r3, [r3, #20]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d102      	bne.n	80159c2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80159bc:	69bb      	ldr	r3, [r7, #24]
 80159be:	2201      	movs	r2, #1
 80159c0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80159c2:	69bb      	ldr	r3, [r7, #24]
 80159c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159ca:	d01d      	beq.n	8015a08 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80159cc:	69bb      	ldr	r3, [r7, #24]
 80159ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159d0:	331e      	adds	r3, #30
 80159d2:	4a48      	ldr	r2, [pc, #288]	; (8015af4 <dhcp_bind+0x1b0>)
 80159d4:	fba2 2303 	umull	r2, r3, r2, r3
 80159d8:	095b      	lsrs	r3, r3, #5
 80159da:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80159dc:	69fb      	ldr	r3, [r7, #28]
 80159de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80159e2:	d302      	bcc.n	80159ea <dhcp_bind+0xa6>
      timeout = 0xffff;
 80159e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80159e8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80159ea:	69fb      	ldr	r3, [r7, #28]
 80159ec:	b29a      	uxth	r2, r3
 80159ee:	69bb      	ldr	r3, [r7, #24]
 80159f0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80159f2:	69bb      	ldr	r3, [r7, #24]
 80159f4:	895b      	ldrh	r3, [r3, #10]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d102      	bne.n	8015a00 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80159fa:	69bb      	ldr	r3, [r7, #24]
 80159fc:	2201      	movs	r2, #1
 80159fe:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015a00:	69bb      	ldr	r3, [r7, #24]
 8015a02:	895a      	ldrh	r2, [r3, #10]
 8015a04:	69bb      	ldr	r3, [r7, #24]
 8015a06:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015a08:	69bb      	ldr	r3, [r7, #24]
 8015a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a10:	d01d      	beq.n	8015a4e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015a12:	69bb      	ldr	r3, [r7, #24]
 8015a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a16:	331e      	adds	r3, #30
 8015a18:	4a36      	ldr	r2, [pc, #216]	; (8015af4 <dhcp_bind+0x1b0>)
 8015a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8015a1e:	095b      	lsrs	r3, r3, #5
 8015a20:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015a22:	69fb      	ldr	r3, [r7, #28]
 8015a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a28:	d302      	bcc.n	8015a30 <dhcp_bind+0xec>
      timeout = 0xffff;
 8015a2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a2e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8015a30:	69fb      	ldr	r3, [r7, #28]
 8015a32:	b29a      	uxth	r2, r3
 8015a34:	69bb      	ldr	r3, [r7, #24]
 8015a36:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015a38:	69bb      	ldr	r3, [r7, #24]
 8015a3a:	899b      	ldrh	r3, [r3, #12]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d102      	bne.n	8015a46 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015a40:	69bb      	ldr	r3, [r7, #24]
 8015a42:	2201      	movs	r2, #1
 8015a44:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8015a46:	69bb      	ldr	r3, [r7, #24]
 8015a48:	899a      	ldrh	r2, [r3, #12]
 8015a4a:	69bb      	ldr	r3, [r7, #24]
 8015a4c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8015a4e:	69bb      	ldr	r3, [r7, #24]
 8015a50:	895a      	ldrh	r2, [r3, #10]
 8015a52:	69bb      	ldr	r3, [r7, #24]
 8015a54:	899b      	ldrh	r3, [r3, #12]
 8015a56:	429a      	cmp	r2, r3
 8015a58:	d306      	bcc.n	8015a68 <dhcp_bind+0x124>
 8015a5a:	69bb      	ldr	r3, [r7, #24]
 8015a5c:	899b      	ldrh	r3, [r3, #12]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d002      	beq.n	8015a68 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8015a62:	69bb      	ldr	r3, [r7, #24]
 8015a64:	2200      	movs	r2, #0
 8015a66:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015a68:	69bb      	ldr	r3, [r7, #24]
 8015a6a:	79db      	ldrb	r3, [r3, #7]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d003      	beq.n	8015a78 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8015a70:	69bb      	ldr	r3, [r7, #24]
 8015a72:	6a1b      	ldr	r3, [r3, #32]
 8015a74:	613b      	str	r3, [r7, #16]
 8015a76:	e014      	b.n	8015aa2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015a78:	69bb      	ldr	r3, [r7, #24]
 8015a7a:	331c      	adds	r3, #28
 8015a7c:	781b      	ldrb	r3, [r3, #0]
 8015a7e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8015a80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	db02      	blt.n	8015a8e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015a88:	23ff      	movs	r3, #255	; 0xff
 8015a8a:	613b      	str	r3, [r7, #16]
 8015a8c:	e009      	b.n	8015aa2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8015a8e:	7dfb      	ldrb	r3, [r7, #23]
 8015a90:	2bbf      	cmp	r3, #191	; 0xbf
 8015a92:	d903      	bls.n	8015a9c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015a94:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015a98:	613b      	str	r3, [r7, #16]
 8015a9a:	e002      	b.n	8015aa2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015aa0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015aa2:	69bb      	ldr	r3, [r7, #24]
 8015aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aa6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d108      	bne.n	8015ac0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015aae:	69bb      	ldr	r3, [r7, #24]
 8015ab0:	69da      	ldr	r2, [r3, #28]
 8015ab2:	693b      	ldr	r3, [r7, #16]
 8015ab4:	4013      	ands	r3, r2
 8015ab6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015abe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015ac0:	210a      	movs	r1, #10
 8015ac2:	69b8      	ldr	r0, [r7, #24]
 8015ac4:	f000 faab 	bl	801601e <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015ac8:	69bb      	ldr	r3, [r7, #24]
 8015aca:	f103 011c 	add.w	r1, r3, #28
 8015ace:	f107 030c 	add.w	r3, r7, #12
 8015ad2:	f107 0210 	add.w	r2, r7, #16
 8015ad6:	6878      	ldr	r0, [r7, #4]
 8015ad8:	f7f7 fb00 	bl	800d0dc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015adc:	3720      	adds	r7, #32
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	bd80      	pop	{r7, pc}
 8015ae2:	bf00      	nop
 8015ae4:	0801d9b8 	.word	0x0801d9b8
 8015ae8:	0801db18 	.word	0x0801db18
 8015aec:	0801da18 	.word	0x0801da18
 8015af0:	0801db34 	.word	0x0801db34
 8015af4:	88888889 	.word	0x88888889

08015af8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b08a      	sub	sp, #40	; 0x28
 8015afc:	af02      	add	r7, sp, #8
 8015afe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b04:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015b06:	2105      	movs	r1, #5
 8015b08:	69b8      	ldr	r0, [r7, #24]
 8015b0a:	f000 fa88 	bl	801601e <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015b0e:	f107 030c 	add.w	r3, r7, #12
 8015b12:	2203      	movs	r2, #3
 8015b14:	69b9      	ldr	r1, [r7, #24]
 8015b16:	6878      	ldr	r0, [r7, #4]
 8015b18:	f000 ff0c 	bl	8016934 <dhcp_create_msg>
 8015b1c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015b1e:	697b      	ldr	r3, [r7, #20]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d04e      	beq.n	8015bc2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	685b      	ldr	r3, [r3, #4]
 8015b28:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015b2a:	89b8      	ldrh	r0, [r7, #12]
 8015b2c:	693b      	ldr	r3, [r7, #16]
 8015b2e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b32:	2302      	movs	r3, #2
 8015b34:	2239      	movs	r2, #57	; 0x39
 8015b36:	f000 fa8d 	bl	8016054 <dhcp_option>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015b3e:	89b8      	ldrh	r0, [r7, #12]
 8015b40:	693b      	ldr	r3, [r7, #16]
 8015b42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b4a:	461a      	mov	r2, r3
 8015b4c:	f000 fadc 	bl	8016108 <dhcp_option_short>
 8015b50:	4603      	mov	r3, r0
 8015b52:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015b54:	89b8      	ldrh	r0, [r7, #12]
 8015b56:	693b      	ldr	r3, [r7, #16]
 8015b58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b5c:	2303      	movs	r3, #3
 8015b5e:	2237      	movs	r2, #55	; 0x37
 8015b60:	f000 fa78 	bl	8016054 <dhcp_option>
 8015b64:	4603      	mov	r3, r0
 8015b66:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015b68:	2300      	movs	r3, #0
 8015b6a:	77bb      	strb	r3, [r7, #30]
 8015b6c:	e00e      	b.n	8015b8c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015b6e:	89b8      	ldrh	r0, [r7, #12]
 8015b70:	693b      	ldr	r3, [r7, #16]
 8015b72:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015b76:	7fbb      	ldrb	r3, [r7, #30]
 8015b78:	4a2a      	ldr	r2, [pc, #168]	; (8015c24 <dhcp_renew+0x12c>)
 8015b7a:	5cd3      	ldrb	r3, [r2, r3]
 8015b7c:	461a      	mov	r2, r3
 8015b7e:	f000 fa9d 	bl	80160bc <dhcp_option_byte>
 8015b82:	4603      	mov	r3, r0
 8015b84:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015b86:	7fbb      	ldrb	r3, [r7, #30]
 8015b88:	3301      	adds	r3, #1
 8015b8a:	77bb      	strb	r3, [r7, #30]
 8015b8c:	7fbb      	ldrb	r3, [r7, #30]
 8015b8e:	2b02      	cmp	r3, #2
 8015b90:	d9ed      	bls.n	8015b6e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015b92:	89b8      	ldrh	r0, [r7, #12]
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	33f0      	adds	r3, #240	; 0xf0
 8015b98:	697a      	ldr	r2, [r7, #20]
 8015b9a:	4619      	mov	r1, r3
 8015b9c:	f000 ffa0 	bl	8016ae0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015ba0:	4b21      	ldr	r3, [pc, #132]	; (8015c28 <dhcp_renew+0x130>)
 8015ba2:	6818      	ldr	r0, [r3, #0]
 8015ba4:	69bb      	ldr	r3, [r7, #24]
 8015ba6:	f103 0218 	add.w	r2, r3, #24
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	9300      	str	r3, [sp, #0]
 8015bae:	2343      	movs	r3, #67	; 0x43
 8015bb0:	6979      	ldr	r1, [r7, #20]
 8015bb2:	f7fe fe35 	bl	8014820 <udp_sendto_if>
 8015bb6:	4603      	mov	r3, r0
 8015bb8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015bba:	6978      	ldr	r0, [r7, #20]
 8015bbc:	f7f7 ff98 	bl	800daf0 <pbuf_free>
 8015bc0:	e001      	b.n	8015bc6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015bc2:	23ff      	movs	r3, #255	; 0xff
 8015bc4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015bc6:	69bb      	ldr	r3, [r7, #24]
 8015bc8:	799b      	ldrb	r3, [r3, #6]
 8015bca:	2bff      	cmp	r3, #255	; 0xff
 8015bcc:	d005      	beq.n	8015bda <dhcp_renew+0xe2>
    dhcp->tries++;
 8015bce:	69bb      	ldr	r3, [r7, #24]
 8015bd0:	799b      	ldrb	r3, [r3, #6]
 8015bd2:	3301      	adds	r3, #1
 8015bd4:	b2da      	uxtb	r2, r3
 8015bd6:	69bb      	ldr	r3, [r7, #24]
 8015bd8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015bda:	69bb      	ldr	r3, [r7, #24]
 8015bdc:	799b      	ldrb	r3, [r3, #6]
 8015bde:	2b09      	cmp	r3, #9
 8015be0:	d80a      	bhi.n	8015bf8 <dhcp_renew+0x100>
 8015be2:	69bb      	ldr	r3, [r7, #24]
 8015be4:	799b      	ldrb	r3, [r3, #6]
 8015be6:	b29b      	uxth	r3, r3
 8015be8:	461a      	mov	r2, r3
 8015bea:	0152      	lsls	r2, r2, #5
 8015bec:	1ad2      	subs	r2, r2, r3
 8015bee:	0092      	lsls	r2, r2, #2
 8015bf0:	4413      	add	r3, r2
 8015bf2:	011b      	lsls	r3, r3, #4
 8015bf4:	b29b      	uxth	r3, r3
 8015bf6:	e001      	b.n	8015bfc <dhcp_renew+0x104>
 8015bf8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015bfc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015bfe:	89fb      	ldrh	r3, [r7, #14]
 8015c00:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015c04:	4a09      	ldr	r2, [pc, #36]	; (8015c2c <dhcp_renew+0x134>)
 8015c06:	fb82 1203 	smull	r1, r2, r2, r3
 8015c0a:	1152      	asrs	r2, r2, #5
 8015c0c:	17db      	asrs	r3, r3, #31
 8015c0e:	1ad3      	subs	r3, r2, r3
 8015c10:	b29a      	uxth	r2, r3
 8015c12:	69bb      	ldr	r3, [r7, #24]
 8015c14:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015c16:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	3720      	adds	r7, #32
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}
 8015c22:	bf00      	nop
 8015c24:	2000001c 	.word	0x2000001c
 8015c28:	20010298 	.word	0x20010298
 8015c2c:	10624dd3 	.word	0x10624dd3

08015c30 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b08a      	sub	sp, #40	; 0x28
 8015c34:	af02      	add	r7, sp, #8
 8015c36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c3c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015c3e:	2104      	movs	r1, #4
 8015c40:	69b8      	ldr	r0, [r7, #24]
 8015c42:	f000 f9ec 	bl	801601e <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015c46:	f107 030c 	add.w	r3, r7, #12
 8015c4a:	2203      	movs	r2, #3
 8015c4c:	69b9      	ldr	r1, [r7, #24]
 8015c4e:	6878      	ldr	r0, [r7, #4]
 8015c50:	f000 fe70 	bl	8016934 <dhcp_create_msg>
 8015c54:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015c56:	697b      	ldr	r3, [r7, #20]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d04c      	beq.n	8015cf6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	685b      	ldr	r3, [r3, #4]
 8015c60:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015c62:	89b8      	ldrh	r0, [r7, #12]
 8015c64:	693b      	ldr	r3, [r7, #16]
 8015c66:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c6a:	2302      	movs	r3, #2
 8015c6c:	2239      	movs	r2, #57	; 0x39
 8015c6e:	f000 f9f1 	bl	8016054 <dhcp_option>
 8015c72:	4603      	mov	r3, r0
 8015c74:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015c76:	89b8      	ldrh	r0, [r7, #12]
 8015c78:	693b      	ldr	r3, [r7, #16]
 8015c7a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015c82:	461a      	mov	r2, r3
 8015c84:	f000 fa40 	bl	8016108 <dhcp_option_short>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015c8c:	89b8      	ldrh	r0, [r7, #12]
 8015c8e:	693b      	ldr	r3, [r7, #16]
 8015c90:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c94:	2303      	movs	r3, #3
 8015c96:	2237      	movs	r2, #55	; 0x37
 8015c98:	f000 f9dc 	bl	8016054 <dhcp_option>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	77bb      	strb	r3, [r7, #30]
 8015ca4:	e00e      	b.n	8015cc4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015ca6:	89b8      	ldrh	r0, [r7, #12]
 8015ca8:	693b      	ldr	r3, [r7, #16]
 8015caa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015cae:	7fbb      	ldrb	r3, [r7, #30]
 8015cb0:	4a29      	ldr	r2, [pc, #164]	; (8015d58 <dhcp_rebind+0x128>)
 8015cb2:	5cd3      	ldrb	r3, [r2, r3]
 8015cb4:	461a      	mov	r2, r3
 8015cb6:	f000 fa01 	bl	80160bc <dhcp_option_byte>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015cbe:	7fbb      	ldrb	r3, [r7, #30]
 8015cc0:	3301      	adds	r3, #1
 8015cc2:	77bb      	strb	r3, [r7, #30]
 8015cc4:	7fbb      	ldrb	r3, [r7, #30]
 8015cc6:	2b02      	cmp	r3, #2
 8015cc8:	d9ed      	bls.n	8015ca6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015cca:	89b8      	ldrh	r0, [r7, #12]
 8015ccc:	693b      	ldr	r3, [r7, #16]
 8015cce:	33f0      	adds	r3, #240	; 0xf0
 8015cd0:	697a      	ldr	r2, [r7, #20]
 8015cd2:	4619      	mov	r1, r3
 8015cd4:	f000 ff04 	bl	8016ae0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015cd8:	4b20      	ldr	r3, [pc, #128]	; (8015d5c <dhcp_rebind+0x12c>)
 8015cda:	6818      	ldr	r0, [r3, #0]
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	9300      	str	r3, [sp, #0]
 8015ce0:	2343      	movs	r3, #67	; 0x43
 8015ce2:	4a1f      	ldr	r2, [pc, #124]	; (8015d60 <dhcp_rebind+0x130>)
 8015ce4:	6979      	ldr	r1, [r7, #20]
 8015ce6:	f7fe fd9b 	bl	8014820 <udp_sendto_if>
 8015cea:	4603      	mov	r3, r0
 8015cec:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015cee:	6978      	ldr	r0, [r7, #20]
 8015cf0:	f7f7 fefe 	bl	800daf0 <pbuf_free>
 8015cf4:	e001      	b.n	8015cfa <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015cf6:	23ff      	movs	r3, #255	; 0xff
 8015cf8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015cfa:	69bb      	ldr	r3, [r7, #24]
 8015cfc:	799b      	ldrb	r3, [r3, #6]
 8015cfe:	2bff      	cmp	r3, #255	; 0xff
 8015d00:	d005      	beq.n	8015d0e <dhcp_rebind+0xde>
    dhcp->tries++;
 8015d02:	69bb      	ldr	r3, [r7, #24]
 8015d04:	799b      	ldrb	r3, [r3, #6]
 8015d06:	3301      	adds	r3, #1
 8015d08:	b2da      	uxtb	r2, r3
 8015d0a:	69bb      	ldr	r3, [r7, #24]
 8015d0c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015d0e:	69bb      	ldr	r3, [r7, #24]
 8015d10:	799b      	ldrb	r3, [r3, #6]
 8015d12:	2b09      	cmp	r3, #9
 8015d14:	d80a      	bhi.n	8015d2c <dhcp_rebind+0xfc>
 8015d16:	69bb      	ldr	r3, [r7, #24]
 8015d18:	799b      	ldrb	r3, [r3, #6]
 8015d1a:	b29b      	uxth	r3, r3
 8015d1c:	461a      	mov	r2, r3
 8015d1e:	0152      	lsls	r2, r2, #5
 8015d20:	1ad2      	subs	r2, r2, r3
 8015d22:	0092      	lsls	r2, r2, #2
 8015d24:	4413      	add	r3, r2
 8015d26:	00db      	lsls	r3, r3, #3
 8015d28:	b29b      	uxth	r3, r3
 8015d2a:	e001      	b.n	8015d30 <dhcp_rebind+0x100>
 8015d2c:	f242 7310 	movw	r3, #10000	; 0x2710
 8015d30:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015d32:	89fb      	ldrh	r3, [r7, #14]
 8015d34:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015d38:	4a0a      	ldr	r2, [pc, #40]	; (8015d64 <dhcp_rebind+0x134>)
 8015d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8015d3e:	1152      	asrs	r2, r2, #5
 8015d40:	17db      	asrs	r3, r3, #31
 8015d42:	1ad3      	subs	r3, r2, r3
 8015d44:	b29a      	uxth	r2, r3
 8015d46:	69bb      	ldr	r3, [r7, #24]
 8015d48:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015d4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3720      	adds	r7, #32
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}
 8015d56:	bf00      	nop
 8015d58:	2000001c 	.word	0x2000001c
 8015d5c:	20010298 	.word	0x20010298
 8015d60:	08023074 	.word	0x08023074
 8015d64:	10624dd3 	.word	0x10624dd3

08015d68 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015d68:	b5b0      	push	{r4, r5, r7, lr}
 8015d6a:	b08a      	sub	sp, #40	; 0x28
 8015d6c:	af02      	add	r7, sp, #8
 8015d6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d74:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8015d76:	2103      	movs	r1, #3
 8015d78:	69b8      	ldr	r0, [r7, #24]
 8015d7a:	f000 f950 	bl	801601e <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015d7e:	f107 030c 	add.w	r3, r7, #12
 8015d82:	2203      	movs	r2, #3
 8015d84:	69b9      	ldr	r1, [r7, #24]
 8015d86:	6878      	ldr	r0, [r7, #4]
 8015d88:	f000 fdd4 	bl	8016934 <dhcp_create_msg>
 8015d8c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015d8e:	697b      	ldr	r3, [r7, #20]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d066      	beq.n	8015e62 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015d94:	697b      	ldr	r3, [r7, #20]
 8015d96:	685b      	ldr	r3, [r3, #4]
 8015d98:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015d9a:	89b8      	ldrh	r0, [r7, #12]
 8015d9c:	693b      	ldr	r3, [r7, #16]
 8015d9e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015da2:	2302      	movs	r3, #2
 8015da4:	2239      	movs	r2, #57	; 0x39
 8015da6:	f000 f955 	bl	8016054 <dhcp_option>
 8015daa:	4603      	mov	r3, r0
 8015dac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015dae:	89b8      	ldrh	r0, [r7, #12]
 8015db0:	693b      	ldr	r3, [r7, #16]
 8015db2:	33f0      	adds	r3, #240	; 0xf0
 8015db4:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015db8:	4619      	mov	r1, r3
 8015dba:	f000 f9a5 	bl	8016108 <dhcp_option_short>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015dc2:	89b8      	ldrh	r0, [r7, #12]
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015dca:	2304      	movs	r3, #4
 8015dcc:	2232      	movs	r2, #50	; 0x32
 8015dce:	f000 f941 	bl	8016054 <dhcp_option>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015dd6:	89bc      	ldrh	r4, [r7, #12]
 8015dd8:	693b      	ldr	r3, [r7, #16]
 8015dda:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015dde:	69bb      	ldr	r3, [r7, #24]
 8015de0:	69db      	ldr	r3, [r3, #28]
 8015de2:	4618      	mov	r0, r3
 8015de4:	f7f6 faaf 	bl	800c346 <lwip_htonl>
 8015de8:	4603      	mov	r3, r0
 8015dea:	461a      	mov	r2, r3
 8015dec:	4629      	mov	r1, r5
 8015dee:	4620      	mov	r0, r4
 8015df0:	f000 f9bc 	bl	801616c <dhcp_option_long>
 8015df4:	4603      	mov	r3, r0
 8015df6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015df8:	89b8      	ldrh	r0, [r7, #12]
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015e00:	2303      	movs	r3, #3
 8015e02:	2237      	movs	r2, #55	; 0x37
 8015e04:	f000 f926 	bl	8016054 <dhcp_option>
 8015e08:	4603      	mov	r3, r0
 8015e0a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	77bb      	strb	r3, [r7, #30]
 8015e10:	e00e      	b.n	8015e30 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015e12:	89b8      	ldrh	r0, [r7, #12]
 8015e14:	693b      	ldr	r3, [r7, #16]
 8015e16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015e1a:	7fbb      	ldrb	r3, [r7, #30]
 8015e1c:	4a29      	ldr	r2, [pc, #164]	; (8015ec4 <dhcp_reboot+0x15c>)
 8015e1e:	5cd3      	ldrb	r3, [r2, r3]
 8015e20:	461a      	mov	r2, r3
 8015e22:	f000 f94b 	bl	80160bc <dhcp_option_byte>
 8015e26:	4603      	mov	r3, r0
 8015e28:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015e2a:	7fbb      	ldrb	r3, [r7, #30]
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	77bb      	strb	r3, [r7, #30]
 8015e30:	7fbb      	ldrb	r3, [r7, #30]
 8015e32:	2b02      	cmp	r3, #2
 8015e34:	d9ed      	bls.n	8015e12 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015e36:	89b8      	ldrh	r0, [r7, #12]
 8015e38:	693b      	ldr	r3, [r7, #16]
 8015e3a:	33f0      	adds	r3, #240	; 0xf0
 8015e3c:	697a      	ldr	r2, [r7, #20]
 8015e3e:	4619      	mov	r1, r3
 8015e40:	f000 fe4e 	bl	8016ae0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015e44:	4b20      	ldr	r3, [pc, #128]	; (8015ec8 <dhcp_reboot+0x160>)
 8015e46:	6818      	ldr	r0, [r3, #0]
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	9300      	str	r3, [sp, #0]
 8015e4c:	2343      	movs	r3, #67	; 0x43
 8015e4e:	4a1f      	ldr	r2, [pc, #124]	; (8015ecc <dhcp_reboot+0x164>)
 8015e50:	6979      	ldr	r1, [r7, #20]
 8015e52:	f7fe fce5 	bl	8014820 <udp_sendto_if>
 8015e56:	4603      	mov	r3, r0
 8015e58:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015e5a:	6978      	ldr	r0, [r7, #20]
 8015e5c:	f7f7 fe48 	bl	800daf0 <pbuf_free>
 8015e60:	e001      	b.n	8015e66 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015e62:	23ff      	movs	r3, #255	; 0xff
 8015e64:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015e66:	69bb      	ldr	r3, [r7, #24]
 8015e68:	799b      	ldrb	r3, [r3, #6]
 8015e6a:	2bff      	cmp	r3, #255	; 0xff
 8015e6c:	d005      	beq.n	8015e7a <dhcp_reboot+0x112>
    dhcp->tries++;
 8015e6e:	69bb      	ldr	r3, [r7, #24]
 8015e70:	799b      	ldrb	r3, [r3, #6]
 8015e72:	3301      	adds	r3, #1
 8015e74:	b2da      	uxtb	r2, r3
 8015e76:	69bb      	ldr	r3, [r7, #24]
 8015e78:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015e7a:	69bb      	ldr	r3, [r7, #24]
 8015e7c:	799b      	ldrb	r3, [r3, #6]
 8015e7e:	2b09      	cmp	r3, #9
 8015e80:	d80a      	bhi.n	8015e98 <dhcp_reboot+0x130>
 8015e82:	69bb      	ldr	r3, [r7, #24]
 8015e84:	799b      	ldrb	r3, [r3, #6]
 8015e86:	b29b      	uxth	r3, r3
 8015e88:	461a      	mov	r2, r3
 8015e8a:	0152      	lsls	r2, r2, #5
 8015e8c:	1ad2      	subs	r2, r2, r3
 8015e8e:	0092      	lsls	r2, r2, #2
 8015e90:	4413      	add	r3, r2
 8015e92:	00db      	lsls	r3, r3, #3
 8015e94:	b29b      	uxth	r3, r3
 8015e96:	e001      	b.n	8015e9c <dhcp_reboot+0x134>
 8015e98:	f242 7310 	movw	r3, #10000	; 0x2710
 8015e9c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015e9e:	89fb      	ldrh	r3, [r7, #14]
 8015ea0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015ea4:	4a0a      	ldr	r2, [pc, #40]	; (8015ed0 <dhcp_reboot+0x168>)
 8015ea6:	fb82 1203 	smull	r1, r2, r2, r3
 8015eaa:	1152      	asrs	r2, r2, #5
 8015eac:	17db      	asrs	r3, r3, #31
 8015eae:	1ad3      	subs	r3, r2, r3
 8015eb0:	b29a      	uxth	r2, r3
 8015eb2:	69bb      	ldr	r3, [r7, #24]
 8015eb4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015eb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015eba:	4618      	mov	r0, r3
 8015ebc:	3720      	adds	r7, #32
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8015ec2:	bf00      	nop
 8015ec4:	2000001c 	.word	0x2000001c
 8015ec8:	20010298 	.word	0x20010298
 8015ecc:	08023074 	.word	0x08023074
 8015ed0:	10624dd3 	.word	0x10624dd3

08015ed4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015ed4:	b5b0      	push	{r4, r5, r7, lr}
 8015ed6:	b08a      	sub	sp, #40	; 0x28
 8015ed8:	af02      	add	r7, sp, #8
 8015eda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ee0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015ee2:	69fb      	ldr	r3, [r7, #28]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	f000 8084 	beq.w	8015ff2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015eea:	69fb      	ldr	r3, [r7, #28]
 8015eec:	795b      	ldrb	r3, [r3, #5]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	f000 8081 	beq.w	8015ff6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015ef4:	69fb      	ldr	r3, [r7, #28]
 8015ef6:	699b      	ldr	r3, [r3, #24]
 8015ef8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015efa:	69fb      	ldr	r3, [r7, #28]
 8015efc:	2200      	movs	r2, #0
 8015efe:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015f00:	69fb      	ldr	r3, [r7, #28]
 8015f02:	2200      	movs	r2, #0
 8015f04:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015f06:	69fb      	ldr	r3, [r7, #28]
 8015f08:	2200      	movs	r2, #0
 8015f0a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	2200      	movs	r2, #0
 8015f10:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015f12:	69fb      	ldr	r3, [r7, #28]
 8015f14:	2200      	movs	r2, #0
 8015f16:	631a      	str	r2, [r3, #48]	; 0x30
 8015f18:	69fb      	ldr	r3, [r7, #28]
 8015f1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8015f20:	69fb      	ldr	r3, [r7, #28]
 8015f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f24:	69fb      	ldr	r3, [r7, #28]
 8015f26:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015f28:	69fb      	ldr	r3, [r7, #28]
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	829a      	strh	r2, [r3, #20]
 8015f2e:	69fb      	ldr	r3, [r7, #28]
 8015f30:	8a9a      	ldrh	r2, [r3, #20]
 8015f32:	69fb      	ldr	r3, [r7, #28]
 8015f34:	825a      	strh	r2, [r3, #18]
 8015f36:	69fb      	ldr	r3, [r7, #28]
 8015f38:	8a5a      	ldrh	r2, [r3, #18]
 8015f3a:	69fb      	ldr	r3, [r7, #28]
 8015f3c:	821a      	strh	r2, [r3, #16]
 8015f3e:	69fb      	ldr	r3, [r7, #28]
 8015f40:	8a1a      	ldrh	r2, [r3, #16]
 8015f42:	69fb      	ldr	r3, [r7, #28]
 8015f44:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015f46:	6878      	ldr	r0, [r7, #4]
 8015f48:	f000 fdf8 	bl	8016b3c <dhcp_supplied_address>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d03b      	beq.n	8015fca <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015f52:	f107 030e 	add.w	r3, r7, #14
 8015f56:	2207      	movs	r2, #7
 8015f58:	69f9      	ldr	r1, [r7, #28]
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f000 fcea 	bl	8016934 <dhcp_create_msg>
 8015f60:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015f62:	69bb      	ldr	r3, [r7, #24]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d030      	beq.n	8015fca <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015f68:	69bb      	ldr	r3, [r7, #24]
 8015f6a:	685b      	ldr	r3, [r3, #4]
 8015f6c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015f6e:	89f8      	ldrh	r0, [r7, #14]
 8015f70:	697b      	ldr	r3, [r7, #20]
 8015f72:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015f76:	2304      	movs	r3, #4
 8015f78:	2236      	movs	r2, #54	; 0x36
 8015f7a:	f000 f86b 	bl	8016054 <dhcp_option>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015f82:	89fc      	ldrh	r4, [r7, #14]
 8015f84:	697b      	ldr	r3, [r7, #20]
 8015f86:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015f8a:	693b      	ldr	r3, [r7, #16]
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f7f6 f9da 	bl	800c346 <lwip_htonl>
 8015f92:	4603      	mov	r3, r0
 8015f94:	461a      	mov	r2, r3
 8015f96:	4629      	mov	r1, r5
 8015f98:	4620      	mov	r0, r4
 8015f9a:	f000 f8e7 	bl	801616c <dhcp_option_long>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015fa2:	89f8      	ldrh	r0, [r7, #14]
 8015fa4:	697b      	ldr	r3, [r7, #20]
 8015fa6:	33f0      	adds	r3, #240	; 0xf0
 8015fa8:	69ba      	ldr	r2, [r7, #24]
 8015faa:	4619      	mov	r1, r3
 8015fac:	f000 fd98 	bl	8016ae0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015fb0:	4b13      	ldr	r3, [pc, #76]	; (8016000 <dhcp_release_and_stop+0x12c>)
 8015fb2:	6818      	ldr	r0, [r3, #0]
 8015fb4:	f107 0210 	add.w	r2, r7, #16
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	9300      	str	r3, [sp, #0]
 8015fbc:	2343      	movs	r3, #67	; 0x43
 8015fbe:	69b9      	ldr	r1, [r7, #24]
 8015fc0:	f7fe fc2e 	bl	8014820 <udp_sendto_if>
      pbuf_free(p_out);
 8015fc4:	69b8      	ldr	r0, [r7, #24]
 8015fc6:	f7f7 fd93 	bl	800daf0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015fca:	4b0e      	ldr	r3, [pc, #56]	; (8016004 <dhcp_release_and_stop+0x130>)
 8015fcc:	4a0d      	ldr	r2, [pc, #52]	; (8016004 <dhcp_release_and_stop+0x130>)
 8015fce:	490d      	ldr	r1, [pc, #52]	; (8016004 <dhcp_release_and_stop+0x130>)
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f7f7 f883 	bl	800d0dc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015fd6:	2100      	movs	r1, #0
 8015fd8:	69f8      	ldr	r0, [r7, #28]
 8015fda:	f000 f820 	bl	801601e <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015fde:	69fb      	ldr	r3, [r7, #28]
 8015fe0:	791b      	ldrb	r3, [r3, #4]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d008      	beq.n	8015ff8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015fe6:	f7fe ff73 	bl	8014ed0 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015fea:	69fb      	ldr	r3, [r7, #28]
 8015fec:	2200      	movs	r2, #0
 8015fee:	711a      	strb	r2, [r3, #4]
 8015ff0:	e002      	b.n	8015ff8 <dhcp_release_and_stop+0x124>
    return;
 8015ff2:	bf00      	nop
 8015ff4:	e000      	b.n	8015ff8 <dhcp_release_and_stop+0x124>
    return;
 8015ff6:	bf00      	nop
  }
}
 8015ff8:	3720      	adds	r7, #32
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8015ffe:	bf00      	nop
 8016000:	20010298 	.word	0x20010298
 8016004:	08023070 	.word	0x08023070

08016008 <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b082      	sub	sp, #8
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 8016010:	6878      	ldr	r0, [r7, #4]
 8016012:	f7ff ff5f 	bl	8015ed4 <dhcp_release_and_stop>
}
 8016016:	bf00      	nop
 8016018:	3708      	adds	r7, #8
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}

0801601e <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801601e:	b480      	push	{r7}
 8016020:	b083      	sub	sp, #12
 8016022:	af00      	add	r7, sp, #0
 8016024:	6078      	str	r0, [r7, #4]
 8016026:	460b      	mov	r3, r1
 8016028:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	795b      	ldrb	r3, [r3, #5]
 801602e:	78fa      	ldrb	r2, [r7, #3]
 8016030:	429a      	cmp	r2, r3
 8016032:	d008      	beq.n	8016046 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	78fa      	ldrb	r2, [r7, #3]
 8016038:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	2200      	movs	r2, #0
 801603e:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	2200      	movs	r2, #0
 8016044:	811a      	strh	r2, [r3, #8]
  }
}
 8016046:	bf00      	nop
 8016048:	370c      	adds	r7, #12
 801604a:	46bd      	mov	sp, r7
 801604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016050:	4770      	bx	lr
	...

08016054 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	b082      	sub	sp, #8
 8016058:	af00      	add	r7, sp, #0
 801605a:	6039      	str	r1, [r7, #0]
 801605c:	4611      	mov	r1, r2
 801605e:	461a      	mov	r2, r3
 8016060:	4603      	mov	r3, r0
 8016062:	80fb      	strh	r3, [r7, #6]
 8016064:	460b      	mov	r3, r1
 8016066:	717b      	strb	r3, [r7, #5]
 8016068:	4613      	mov	r3, r2
 801606a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801606c:	88fa      	ldrh	r2, [r7, #6]
 801606e:	793b      	ldrb	r3, [r7, #4]
 8016070:	4413      	add	r3, r2
 8016072:	3302      	adds	r3, #2
 8016074:	2b44      	cmp	r3, #68	; 0x44
 8016076:	d906      	bls.n	8016086 <dhcp_option+0x32>
 8016078:	4b0d      	ldr	r3, [pc, #52]	; (80160b0 <dhcp_option+0x5c>)
 801607a:	f240 529a 	movw	r2, #1434	; 0x59a
 801607e:	490d      	ldr	r1, [pc, #52]	; (80160b4 <dhcp_option+0x60>)
 8016080:	480d      	ldr	r0, [pc, #52]	; (80160b8 <dhcp_option+0x64>)
 8016082:	f003 fa73 	bl	801956c <iprintf>
  options[options_out_len++] = option_type;
 8016086:	88fb      	ldrh	r3, [r7, #6]
 8016088:	1c5a      	adds	r2, r3, #1
 801608a:	80fa      	strh	r2, [r7, #6]
 801608c:	461a      	mov	r2, r3
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	4413      	add	r3, r2
 8016092:	797a      	ldrb	r2, [r7, #5]
 8016094:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8016096:	88fb      	ldrh	r3, [r7, #6]
 8016098:	1c5a      	adds	r2, r3, #1
 801609a:	80fa      	strh	r2, [r7, #6]
 801609c:	461a      	mov	r2, r3
 801609e:	683b      	ldr	r3, [r7, #0]
 80160a0:	4413      	add	r3, r2
 80160a2:	793a      	ldrb	r2, [r7, #4]
 80160a4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80160a6:	88fb      	ldrh	r3, [r7, #6]
}
 80160a8:	4618      	mov	r0, r3
 80160aa:	3708      	adds	r7, #8
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}
 80160b0:	0801d9b8 	.word	0x0801d9b8
 80160b4:	0801db4c 	.word	0x0801db4c
 80160b8:	0801da18 	.word	0x0801da18

080160bc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80160bc:	b580      	push	{r7, lr}
 80160be:	b082      	sub	sp, #8
 80160c0:	af00      	add	r7, sp, #0
 80160c2:	4603      	mov	r3, r0
 80160c4:	6039      	str	r1, [r7, #0]
 80160c6:	80fb      	strh	r3, [r7, #6]
 80160c8:	4613      	mov	r3, r2
 80160ca:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80160cc:	88fb      	ldrh	r3, [r7, #6]
 80160ce:	2b43      	cmp	r3, #67	; 0x43
 80160d0:	d906      	bls.n	80160e0 <dhcp_option_byte+0x24>
 80160d2:	4b0a      	ldr	r3, [pc, #40]	; (80160fc <dhcp_option_byte+0x40>)
 80160d4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80160d8:	4909      	ldr	r1, [pc, #36]	; (8016100 <dhcp_option_byte+0x44>)
 80160da:	480a      	ldr	r0, [pc, #40]	; (8016104 <dhcp_option_byte+0x48>)
 80160dc:	f003 fa46 	bl	801956c <iprintf>
  options[options_out_len++] = value;
 80160e0:	88fb      	ldrh	r3, [r7, #6]
 80160e2:	1c5a      	adds	r2, r3, #1
 80160e4:	80fa      	strh	r2, [r7, #6]
 80160e6:	461a      	mov	r2, r3
 80160e8:	683b      	ldr	r3, [r7, #0]
 80160ea:	4413      	add	r3, r2
 80160ec:	797a      	ldrb	r2, [r7, #5]
 80160ee:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80160f0:	88fb      	ldrh	r3, [r7, #6]
}
 80160f2:	4618      	mov	r0, r3
 80160f4:	3708      	adds	r7, #8
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}
 80160fa:	bf00      	nop
 80160fc:	0801d9b8 	.word	0x0801d9b8
 8016100:	0801db90 	.word	0x0801db90
 8016104:	0801da18 	.word	0x0801da18

08016108 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b082      	sub	sp, #8
 801610c:	af00      	add	r7, sp, #0
 801610e:	4603      	mov	r3, r0
 8016110:	6039      	str	r1, [r7, #0]
 8016112:	80fb      	strh	r3, [r7, #6]
 8016114:	4613      	mov	r3, r2
 8016116:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016118:	88fb      	ldrh	r3, [r7, #6]
 801611a:	3302      	adds	r3, #2
 801611c:	2b44      	cmp	r3, #68	; 0x44
 801611e:	d906      	bls.n	801612e <dhcp_option_short+0x26>
 8016120:	4b0f      	ldr	r3, [pc, #60]	; (8016160 <dhcp_option_short+0x58>)
 8016122:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8016126:	490f      	ldr	r1, [pc, #60]	; (8016164 <dhcp_option_short+0x5c>)
 8016128:	480f      	ldr	r0, [pc, #60]	; (8016168 <dhcp_option_short+0x60>)
 801612a:	f003 fa1f 	bl	801956c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801612e:	88bb      	ldrh	r3, [r7, #4]
 8016130:	0a1b      	lsrs	r3, r3, #8
 8016132:	b29a      	uxth	r2, r3
 8016134:	88fb      	ldrh	r3, [r7, #6]
 8016136:	1c59      	adds	r1, r3, #1
 8016138:	80f9      	strh	r1, [r7, #6]
 801613a:	4619      	mov	r1, r3
 801613c:	683b      	ldr	r3, [r7, #0]
 801613e:	440b      	add	r3, r1
 8016140:	b2d2      	uxtb	r2, r2
 8016142:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8016144:	88fb      	ldrh	r3, [r7, #6]
 8016146:	1c5a      	adds	r2, r3, #1
 8016148:	80fa      	strh	r2, [r7, #6]
 801614a:	461a      	mov	r2, r3
 801614c:	683b      	ldr	r3, [r7, #0]
 801614e:	4413      	add	r3, r2
 8016150:	88ba      	ldrh	r2, [r7, #4]
 8016152:	b2d2      	uxtb	r2, r2
 8016154:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016156:	88fb      	ldrh	r3, [r7, #6]
}
 8016158:	4618      	mov	r0, r3
 801615a:	3708      	adds	r7, #8
 801615c:	46bd      	mov	sp, r7
 801615e:	bd80      	pop	{r7, pc}
 8016160:	0801d9b8 	.word	0x0801d9b8
 8016164:	0801dbc8 	.word	0x0801dbc8
 8016168:	0801da18 	.word	0x0801da18

0801616c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801616c:	b580      	push	{r7, lr}
 801616e:	b084      	sub	sp, #16
 8016170:	af00      	add	r7, sp, #0
 8016172:	4603      	mov	r3, r0
 8016174:	60b9      	str	r1, [r7, #8]
 8016176:	607a      	str	r2, [r7, #4]
 8016178:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801617a:	89fb      	ldrh	r3, [r7, #14]
 801617c:	3304      	adds	r3, #4
 801617e:	2b44      	cmp	r3, #68	; 0x44
 8016180:	d906      	bls.n	8016190 <dhcp_option_long+0x24>
 8016182:	4b19      	ldr	r3, [pc, #100]	; (80161e8 <dhcp_option_long+0x7c>)
 8016184:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8016188:	4918      	ldr	r1, [pc, #96]	; (80161ec <dhcp_option_long+0x80>)
 801618a:	4819      	ldr	r0, [pc, #100]	; (80161f0 <dhcp_option_long+0x84>)
 801618c:	f003 f9ee 	bl	801956c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	0e1a      	lsrs	r2, r3, #24
 8016194:	89fb      	ldrh	r3, [r7, #14]
 8016196:	1c59      	adds	r1, r3, #1
 8016198:	81f9      	strh	r1, [r7, #14]
 801619a:	4619      	mov	r1, r3
 801619c:	68bb      	ldr	r3, [r7, #8]
 801619e:	440b      	add	r3, r1
 80161a0:	b2d2      	uxtb	r2, r2
 80161a2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	0c1a      	lsrs	r2, r3, #16
 80161a8:	89fb      	ldrh	r3, [r7, #14]
 80161aa:	1c59      	adds	r1, r3, #1
 80161ac:	81f9      	strh	r1, [r7, #14]
 80161ae:	4619      	mov	r1, r3
 80161b0:	68bb      	ldr	r3, [r7, #8]
 80161b2:	440b      	add	r3, r1
 80161b4:	b2d2      	uxtb	r2, r2
 80161b6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	0a1a      	lsrs	r2, r3, #8
 80161bc:	89fb      	ldrh	r3, [r7, #14]
 80161be:	1c59      	adds	r1, r3, #1
 80161c0:	81f9      	strh	r1, [r7, #14]
 80161c2:	4619      	mov	r1, r3
 80161c4:	68bb      	ldr	r3, [r7, #8]
 80161c6:	440b      	add	r3, r1
 80161c8:	b2d2      	uxtb	r2, r2
 80161ca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80161cc:	89fb      	ldrh	r3, [r7, #14]
 80161ce:	1c5a      	adds	r2, r3, #1
 80161d0:	81fa      	strh	r2, [r7, #14]
 80161d2:	461a      	mov	r2, r3
 80161d4:	68bb      	ldr	r3, [r7, #8]
 80161d6:	4413      	add	r3, r2
 80161d8:	687a      	ldr	r2, [r7, #4]
 80161da:	b2d2      	uxtb	r2, r2
 80161dc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80161de:	89fb      	ldrh	r3, [r7, #14]
}
 80161e0:	4618      	mov	r0, r3
 80161e2:	3710      	adds	r7, #16
 80161e4:	46bd      	mov	sp, r7
 80161e6:	bd80      	pop	{r7, pc}
 80161e8:	0801d9b8 	.word	0x0801d9b8
 80161ec:	0801dc04 	.word	0x0801dc04
 80161f0:	0801da18 	.word	0x0801da18

080161f4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b090      	sub	sp, #64	; 0x40
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
 80161fc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80161fe:	2300      	movs	r3, #0
 8016200:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8016202:	2300      	movs	r3, #0
 8016204:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8016206:	2208      	movs	r2, #8
 8016208:	2100      	movs	r1, #0
 801620a:	48be      	ldr	r0, [pc, #760]	; (8016504 <dhcp_parse_reply+0x310>)
 801620c:	f003 f9a5 	bl	801955a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	895b      	ldrh	r3, [r3, #10]
 8016214:	2b2b      	cmp	r3, #43	; 0x2b
 8016216:	d802      	bhi.n	801621e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8016218:	f06f 0301 	mvn.w	r3, #1
 801621c:	e2a8      	b.n	8016770 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801621e:	687b      	ldr	r3, [r7, #4]
 8016220:	685b      	ldr	r3, [r3, #4]
 8016222:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016224:	23f0      	movs	r3, #240	; 0xf0
 8016226:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	891b      	ldrh	r3, [r3, #8]
 801622c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8016232:	e00c      	b.n	801624e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8016234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016236:	895b      	ldrh	r3, [r3, #10]
 8016238:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801623a:	1ad3      	subs	r3, r2, r3
 801623c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016240:	895b      	ldrh	r3, [r3, #10]
 8016242:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016244:	1ad3      	subs	r3, r2, r3
 8016246:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8016248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016250:	2b00      	cmp	r3, #0
 8016252:	d004      	beq.n	801625e <dhcp_parse_reply+0x6a>
 8016254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016256:	895b      	ldrh	r3, [r3, #10]
 8016258:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801625a:	429a      	cmp	r2, r3
 801625c:	d2ea      	bcs.n	8016234 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016260:	2b00      	cmp	r3, #0
 8016262:	d102      	bne.n	801626a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8016264:	f06f 0301 	mvn.w	r3, #1
 8016268:	e282      	b.n	8016770 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801626a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801626c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801626e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016270:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8016272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016274:	685b      	ldr	r3, [r3, #4]
 8016276:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016278:	e23a      	b.n	80166f0 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801627a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801627c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801627e:	4413      	add	r3, r2
 8016280:	781b      	ldrb	r3, [r3, #0]
 8016282:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8016284:	2300      	movs	r3, #0
 8016286:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801628a:	f04f 33ff 	mov.w	r3, #4294967295
 801628e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8016290:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016292:	3302      	adds	r3, #2
 8016294:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8016296:	8bfa      	ldrh	r2, [r7, #30]
 8016298:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801629a:	429a      	cmp	r2, r3
 801629c:	d202      	bcs.n	80162a4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801629e:	f06f 0301 	mvn.w	r3, #1
 80162a2:	e265      	b.n	8016770 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80162a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80162a6:	3301      	adds	r3, #1
 80162a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162aa:	8952      	ldrh	r2, [r2, #10]
 80162ac:	4293      	cmp	r3, r2
 80162ae:	da07      	bge.n	80162c0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80162b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80162b2:	3301      	adds	r3, #1
 80162b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80162b6:	4413      	add	r3, r2
 80162b8:	781b      	ldrb	r3, [r3, #0]
 80162ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80162be:	e00b      	b.n	80162d8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80162c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d004      	beq.n	80162d2 <dhcp_parse_reply+0xde>
 80162c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	685b      	ldr	r3, [r3, #4]
 80162ce:	781b      	ldrb	r3, [r3, #0]
 80162d0:	e000      	b.n	80162d4 <dhcp_parse_reply+0xe0>
 80162d2:	2300      	movs	r3, #0
 80162d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80162d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80162e0:	7dfb      	ldrb	r3, [r7, #23]
 80162e2:	2b3b      	cmp	r3, #59	; 0x3b
 80162e4:	f200 812d 	bhi.w	8016542 <dhcp_parse_reply+0x34e>
 80162e8:	a201      	add	r2, pc, #4	; (adr r2, 80162f0 <dhcp_parse_reply+0xfc>)
 80162ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162ee:	bf00      	nop
 80162f0:	080163e1 	.word	0x080163e1
 80162f4:	080163f1 	.word	0x080163f1
 80162f8:	08016543 	.word	0x08016543
 80162fc:	08016413 	.word	0x08016413
 8016300:	08016543 	.word	0x08016543
 8016304:	08016543 	.word	0x08016543
 8016308:	08016543 	.word	0x08016543
 801630c:	08016543 	.word	0x08016543
 8016310:	08016543 	.word	0x08016543
 8016314:	08016543 	.word	0x08016543
 8016318:	08016543 	.word	0x08016543
 801631c:	08016543 	.word	0x08016543
 8016320:	08016543 	.word	0x08016543
 8016324:	08016543 	.word	0x08016543
 8016328:	08016543 	.word	0x08016543
 801632c:	08016543 	.word	0x08016543
 8016330:	08016543 	.word	0x08016543
 8016334:	08016543 	.word	0x08016543
 8016338:	08016543 	.word	0x08016543
 801633c:	08016543 	.word	0x08016543
 8016340:	08016543 	.word	0x08016543
 8016344:	08016543 	.word	0x08016543
 8016348:	08016543 	.word	0x08016543
 801634c:	08016543 	.word	0x08016543
 8016350:	08016543 	.word	0x08016543
 8016354:	08016543 	.word	0x08016543
 8016358:	08016543 	.word	0x08016543
 801635c:	08016543 	.word	0x08016543
 8016360:	08016543 	.word	0x08016543
 8016364:	08016543 	.word	0x08016543
 8016368:	08016543 	.word	0x08016543
 801636c:	08016543 	.word	0x08016543
 8016370:	08016543 	.word	0x08016543
 8016374:	08016543 	.word	0x08016543
 8016378:	08016543 	.word	0x08016543
 801637c:	08016543 	.word	0x08016543
 8016380:	08016543 	.word	0x08016543
 8016384:	08016543 	.word	0x08016543
 8016388:	08016543 	.word	0x08016543
 801638c:	08016543 	.word	0x08016543
 8016390:	08016543 	.word	0x08016543
 8016394:	08016543 	.word	0x08016543
 8016398:	08016543 	.word	0x08016543
 801639c:	08016543 	.word	0x08016543
 80163a0:	08016543 	.word	0x08016543
 80163a4:	08016543 	.word	0x08016543
 80163a8:	08016543 	.word	0x08016543
 80163ac:	08016543 	.word	0x08016543
 80163b0:	08016543 	.word	0x08016543
 80163b4:	08016543 	.word	0x08016543
 80163b8:	08016543 	.word	0x08016543
 80163bc:	0801643f 	.word	0x0801643f
 80163c0:	08016461 	.word	0x08016461
 80163c4:	0801649d 	.word	0x0801649d
 80163c8:	080164bf 	.word	0x080164bf
 80163cc:	08016543 	.word	0x08016543
 80163d0:	08016543 	.word	0x08016543
 80163d4:	08016543 	.word	0x08016543
 80163d8:	080164e1 	.word	0x080164e1
 80163dc:	08016521 	.word	0x08016521
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80163e0:	2300      	movs	r3, #0
 80163e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80163e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80163ee:	e0ac      	b.n	801654a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80163f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163f4:	2b04      	cmp	r3, #4
 80163f6:	d009      	beq.n	801640c <dhcp_parse_reply+0x218>
 80163f8:	4b43      	ldr	r3, [pc, #268]	; (8016508 <dhcp_parse_reply+0x314>)
 80163fa:	f240 622e 	movw	r2, #1582	; 0x62e
 80163fe:	4943      	ldr	r1, [pc, #268]	; (801650c <dhcp_parse_reply+0x318>)
 8016400:	4843      	ldr	r0, [pc, #268]	; (8016510 <dhcp_parse_reply+0x31c>)
 8016402:	f003 f8b3 	bl	801956c <iprintf>
 8016406:	f06f 0305 	mvn.w	r3, #5
 801640a:	e1b1      	b.n	8016770 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801640c:	2306      	movs	r3, #6
 801640e:	623b      	str	r3, [r7, #32]
        break;
 8016410:	e09b      	b.n	801654a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8016412:	2304      	movs	r3, #4
 8016414:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016418:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801641c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016420:	429a      	cmp	r2, r3
 8016422:	d209      	bcs.n	8016438 <dhcp_parse_reply+0x244>
 8016424:	4b38      	ldr	r3, [pc, #224]	; (8016508 <dhcp_parse_reply+0x314>)
 8016426:	f240 6233 	movw	r2, #1587	; 0x633
 801642a:	493a      	ldr	r1, [pc, #232]	; (8016514 <dhcp_parse_reply+0x320>)
 801642c:	4838      	ldr	r0, [pc, #224]	; (8016510 <dhcp_parse_reply+0x31c>)
 801642e:	f003 f89d 	bl	801956c <iprintf>
 8016432:	f06f 0305 	mvn.w	r3, #5
 8016436:	e19b      	b.n	8016770 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8016438:	2307      	movs	r3, #7
 801643a:	623b      	str	r3, [r7, #32]
        break;
 801643c:	e085      	b.n	801654a <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801643e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016442:	2b04      	cmp	r3, #4
 8016444:	d009      	beq.n	801645a <dhcp_parse_reply+0x266>
 8016446:	4b30      	ldr	r3, [pc, #192]	; (8016508 <dhcp_parse_reply+0x314>)
 8016448:	f240 6241 	movw	r2, #1601	; 0x641
 801644c:	492f      	ldr	r1, [pc, #188]	; (801650c <dhcp_parse_reply+0x318>)
 801644e:	4830      	ldr	r0, [pc, #192]	; (8016510 <dhcp_parse_reply+0x31c>)
 8016450:	f003 f88c 	bl	801956c <iprintf>
 8016454:	f06f 0305 	mvn.w	r3, #5
 8016458:	e18a      	b.n	8016770 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801645a:	2303      	movs	r3, #3
 801645c:	623b      	str	r3, [r7, #32]
        break;
 801645e:	e074      	b.n	801654a <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016460:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016464:	2b01      	cmp	r3, #1
 8016466:	d009      	beq.n	801647c <dhcp_parse_reply+0x288>
 8016468:	4b27      	ldr	r3, [pc, #156]	; (8016508 <dhcp_parse_reply+0x314>)
 801646a:	f240 624f 	movw	r2, #1615	; 0x64f
 801646e:	492a      	ldr	r1, [pc, #168]	; (8016518 <dhcp_parse_reply+0x324>)
 8016470:	4827      	ldr	r0, [pc, #156]	; (8016510 <dhcp_parse_reply+0x31c>)
 8016472:	f003 f87b 	bl	801956c <iprintf>
 8016476:	f06f 0305 	mvn.w	r3, #5
 801647a:	e179      	b.n	8016770 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801647c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801647e:	2bf0      	cmp	r3, #240	; 0xf0
 8016480:	d009      	beq.n	8016496 <dhcp_parse_reply+0x2a2>
 8016482:	4b21      	ldr	r3, [pc, #132]	; (8016508 <dhcp_parse_reply+0x314>)
 8016484:	f240 6251 	movw	r2, #1617	; 0x651
 8016488:	4924      	ldr	r1, [pc, #144]	; (801651c <dhcp_parse_reply+0x328>)
 801648a:	4821      	ldr	r0, [pc, #132]	; (8016510 <dhcp_parse_reply+0x31c>)
 801648c:	f003 f86e 	bl	801956c <iprintf>
 8016490:	f06f 0305 	mvn.w	r3, #5
 8016494:	e16c      	b.n	8016770 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8016496:	2300      	movs	r3, #0
 8016498:	623b      	str	r3, [r7, #32]
        break;
 801649a:	e056      	b.n	801654a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801649c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164a0:	2b01      	cmp	r3, #1
 80164a2:	d009      	beq.n	80164b8 <dhcp_parse_reply+0x2c4>
 80164a4:	4b18      	ldr	r3, [pc, #96]	; (8016508 <dhcp_parse_reply+0x314>)
 80164a6:	f240 6255 	movw	r2, #1621	; 0x655
 80164aa:	491b      	ldr	r1, [pc, #108]	; (8016518 <dhcp_parse_reply+0x324>)
 80164ac:	4818      	ldr	r0, [pc, #96]	; (8016510 <dhcp_parse_reply+0x31c>)
 80164ae:	f003 f85d 	bl	801956c <iprintf>
 80164b2:	f06f 0305 	mvn.w	r3, #5
 80164b6:	e15b      	b.n	8016770 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80164b8:	2301      	movs	r3, #1
 80164ba:	623b      	str	r3, [r7, #32]
        break;
 80164bc:	e045      	b.n	801654a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80164be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164c2:	2b04      	cmp	r3, #4
 80164c4:	d009      	beq.n	80164da <dhcp_parse_reply+0x2e6>
 80164c6:	4b10      	ldr	r3, [pc, #64]	; (8016508 <dhcp_parse_reply+0x314>)
 80164c8:	f240 6259 	movw	r2, #1625	; 0x659
 80164cc:	490f      	ldr	r1, [pc, #60]	; (801650c <dhcp_parse_reply+0x318>)
 80164ce:	4810      	ldr	r0, [pc, #64]	; (8016510 <dhcp_parse_reply+0x31c>)
 80164d0:	f003 f84c 	bl	801956c <iprintf>
 80164d4:	f06f 0305 	mvn.w	r3, #5
 80164d8:	e14a      	b.n	8016770 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80164da:	2302      	movs	r3, #2
 80164dc:	623b      	str	r3, [r7, #32]
        break;
 80164de:	e034      	b.n	801654a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80164e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164e4:	2b04      	cmp	r3, #4
 80164e6:	d009      	beq.n	80164fc <dhcp_parse_reply+0x308>
 80164e8:	4b07      	ldr	r3, [pc, #28]	; (8016508 <dhcp_parse_reply+0x314>)
 80164ea:	f240 625d 	movw	r2, #1629	; 0x65d
 80164ee:	4907      	ldr	r1, [pc, #28]	; (801650c <dhcp_parse_reply+0x318>)
 80164f0:	4807      	ldr	r0, [pc, #28]	; (8016510 <dhcp_parse_reply+0x31c>)
 80164f2:	f003 f83b 	bl	801956c <iprintf>
 80164f6:	f06f 0305 	mvn.w	r3, #5
 80164fa:	e139      	b.n	8016770 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80164fc:	2304      	movs	r3, #4
 80164fe:	623b      	str	r3, [r7, #32]
        break;
 8016500:	e023      	b.n	801654a <dhcp_parse_reply+0x356>
 8016502:	bf00      	nop
 8016504:	20016e30 	.word	0x20016e30
 8016508:	0801d9b8 	.word	0x0801d9b8
 801650c:	0801dc40 	.word	0x0801dc40
 8016510:	0801da18 	.word	0x0801da18
 8016514:	0801dc4c 	.word	0x0801dc4c
 8016518:	0801dc60 	.word	0x0801dc60
 801651c:	0801dc6c 	.word	0x0801dc6c
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016524:	2b04      	cmp	r3, #4
 8016526:	d009      	beq.n	801653c <dhcp_parse_reply+0x348>
 8016528:	4b93      	ldr	r3, [pc, #588]	; (8016778 <dhcp_parse_reply+0x584>)
 801652a:	f240 6261 	movw	r2, #1633	; 0x661
 801652e:	4993      	ldr	r1, [pc, #588]	; (801677c <dhcp_parse_reply+0x588>)
 8016530:	4893      	ldr	r0, [pc, #588]	; (8016780 <dhcp_parse_reply+0x58c>)
 8016532:	f003 f81b 	bl	801956c <iprintf>
 8016536:	f06f 0305 	mvn.w	r3, #5
 801653a:	e119      	b.n	8016770 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801653c:	2305      	movs	r3, #5
 801653e:	623b      	str	r3, [r7, #32]
        break;
 8016540:	e003      	b.n	801654a <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8016542:	2300      	movs	r3, #0
 8016544:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8016548:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801654a:	7dfb      	ldrb	r3, [r7, #23]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d103      	bne.n	8016558 <dhcp_parse_reply+0x364>
      offset++;
 8016550:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016552:	3301      	adds	r3, #1
 8016554:	877b      	strh	r3, [r7, #58]	; 0x3a
 8016556:	e0a1      	b.n	801669c <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8016558:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801655a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801655e:	4413      	add	r3, r2
 8016560:	3302      	adds	r3, #2
 8016562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016566:	db02      	blt.n	801656e <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8016568:	f06f 0301 	mvn.w	r3, #1
 801656c:	e100      	b.n	8016770 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801656e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016572:	b29a      	uxth	r2, r3
 8016574:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016576:	4413      	add	r3, r2
 8016578:	b29b      	uxth	r3, r3
 801657a:	3302      	adds	r3, #2
 801657c:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801657e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016582:	2b00      	cmp	r3, #0
 8016584:	f000 808a 	beq.w	801669c <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8016588:	2300      	movs	r3, #0
 801658a:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801658c:	6a3b      	ldr	r3, [r7, #32]
 801658e:	2b00      	cmp	r3, #0
 8016590:	db02      	blt.n	8016598 <dhcp_parse_reply+0x3a4>
 8016592:	6a3b      	ldr	r3, [r7, #32]
 8016594:	2b07      	cmp	r3, #7
 8016596:	dd06      	ble.n	80165a6 <dhcp_parse_reply+0x3b2>
 8016598:	4b77      	ldr	r3, [pc, #476]	; (8016778 <dhcp_parse_reply+0x584>)
 801659a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801659e:	4979      	ldr	r1, [pc, #484]	; (8016784 <dhcp_parse_reply+0x590>)
 80165a0:	4877      	ldr	r0, [pc, #476]	; (8016780 <dhcp_parse_reply+0x58c>)
 80165a2:	f002 ffe3 	bl	801956c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80165a6:	4a78      	ldr	r2, [pc, #480]	; (8016788 <dhcp_parse_reply+0x594>)
 80165a8:	6a3b      	ldr	r3, [r7, #32]
 80165aa:	4413      	add	r3, r2
 80165ac:	781b      	ldrb	r3, [r3, #0]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d174      	bne.n	801669c <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80165b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80165b6:	2b04      	cmp	r3, #4
 80165b8:	bf28      	it	cs
 80165ba:	2304      	movcs	r3, #4
 80165bc:	b2db      	uxtb	r3, r3
 80165be:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80165c0:	8bfb      	ldrh	r3, [r7, #30]
 80165c2:	8aba      	ldrh	r2, [r7, #20]
 80165c4:	f107 0108 	add.w	r1, r7, #8
 80165c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80165ca:	f7f7 fc97 	bl	800defc <pbuf_copy_partial>
 80165ce:	4603      	mov	r3, r0
 80165d0:	461a      	mov	r2, r3
 80165d2:	8abb      	ldrh	r3, [r7, #20]
 80165d4:	4293      	cmp	r3, r2
 80165d6:	d002      	beq.n	80165de <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80165d8:	f06f 0301 	mvn.w	r3, #1
 80165dc:	e0c8      	b.n	8016770 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80165de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80165e2:	2b04      	cmp	r3, #4
 80165e4:	d933      	bls.n	801664e <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80165e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80165ea:	f003 0303 	and.w	r3, r3, #3
 80165ee:	b2db      	uxtb	r3, r3
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d009      	beq.n	8016608 <dhcp_parse_reply+0x414>
 80165f4:	4b60      	ldr	r3, [pc, #384]	; (8016778 <dhcp_parse_reply+0x584>)
 80165f6:	f240 6281 	movw	r2, #1665	; 0x681
 80165fa:	4964      	ldr	r1, [pc, #400]	; (801678c <dhcp_parse_reply+0x598>)
 80165fc:	4860      	ldr	r0, [pc, #384]	; (8016780 <dhcp_parse_reply+0x58c>)
 80165fe:	f002 ffb5 	bl	801956c <iprintf>
 8016602:	f06f 0305 	mvn.w	r3, #5
 8016606:	e0b3      	b.n	8016770 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8016608:	4a5f      	ldr	r2, [pc, #380]	; (8016788 <dhcp_parse_reply+0x594>)
 801660a:	6a3b      	ldr	r3, [r7, #32]
 801660c:	4413      	add	r3, r2
 801660e:	2201      	movs	r2, #1
 8016610:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8016612:	68bb      	ldr	r3, [r7, #8]
 8016614:	4618      	mov	r0, r3
 8016616:	f7f5 fe96 	bl	800c346 <lwip_htonl>
 801661a:	4601      	mov	r1, r0
 801661c:	4a5c      	ldr	r2, [pc, #368]	; (8016790 <dhcp_parse_reply+0x59c>)
 801661e:	6a3b      	ldr	r3, [r7, #32]
 8016620:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8016624:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016628:	3b04      	subs	r3, #4
 801662a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801662e:	8bfb      	ldrh	r3, [r7, #30]
 8016630:	3304      	adds	r3, #4
 8016632:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8016634:	8a7a      	ldrh	r2, [r7, #18]
 8016636:	8bfb      	ldrh	r3, [r7, #30]
 8016638:	429a      	cmp	r2, r3
 801663a:	d202      	bcs.n	8016642 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 801663c:	f06f 0301 	mvn.w	r3, #1
 8016640:	e096      	b.n	8016770 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8016642:	8a7b      	ldrh	r3, [r7, #18]
 8016644:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8016646:	6a3b      	ldr	r3, [r7, #32]
 8016648:	3301      	adds	r3, #1
 801664a:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801664c:	e79e      	b.n	801658c <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801664e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016652:	2b04      	cmp	r3, #4
 8016654:	d106      	bne.n	8016664 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8016656:	68bb      	ldr	r3, [r7, #8]
 8016658:	4618      	mov	r0, r3
 801665a:	f7f5 fe74 	bl	800c346 <lwip_htonl>
 801665e:	4603      	mov	r3, r0
 8016660:	60bb      	str	r3, [r7, #8]
 8016662:	e011      	b.n	8016688 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8016664:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016668:	2b01      	cmp	r3, #1
 801666a:	d009      	beq.n	8016680 <dhcp_parse_reply+0x48c>
 801666c:	4b42      	ldr	r3, [pc, #264]	; (8016778 <dhcp_parse_reply+0x584>)
 801666e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8016672:	4948      	ldr	r1, [pc, #288]	; (8016794 <dhcp_parse_reply+0x5a0>)
 8016674:	4842      	ldr	r0, [pc, #264]	; (8016780 <dhcp_parse_reply+0x58c>)
 8016676:	f002 ff79 	bl	801956c <iprintf>
 801667a:	f06f 0305 	mvn.w	r3, #5
 801667e:	e077      	b.n	8016770 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8016680:	f107 0308 	add.w	r3, r7, #8
 8016684:	781b      	ldrb	r3, [r3, #0]
 8016686:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8016688:	4a3f      	ldr	r2, [pc, #252]	; (8016788 <dhcp_parse_reply+0x594>)
 801668a:	6a3b      	ldr	r3, [r7, #32]
 801668c:	4413      	add	r3, r2
 801668e:	2201      	movs	r2, #1
 8016690:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8016692:	68ba      	ldr	r2, [r7, #8]
 8016694:	493e      	ldr	r1, [pc, #248]	; (8016790 <dhcp_parse_reply+0x59c>)
 8016696:	6a3b      	ldr	r3, [r7, #32]
 8016698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801669e:	895b      	ldrh	r3, [r3, #10]
 80166a0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80166a2:	429a      	cmp	r2, r3
 80166a4:	d324      	bcc.n	80166f0 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80166a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a8:	895b      	ldrh	r3, [r3, #10]
 80166aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80166ac:	1ad3      	subs	r3, r2, r3
 80166ae:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80166b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b2:	895b      	ldrh	r3, [r3, #10]
 80166b4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80166b6:	1ad3      	subs	r3, r2, r3
 80166b8:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80166ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80166bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80166be:	429a      	cmp	r2, r3
 80166c0:	d213      	bcs.n	80166ea <dhcp_parse_reply+0x4f6>
        q = q->next;
 80166c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80166c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d109      	bne.n	80166e2 <dhcp_parse_reply+0x4ee>
 80166ce:	4b2a      	ldr	r3, [pc, #168]	; (8016778 <dhcp_parse_reply+0x584>)
 80166d0:	f240 629d 	movw	r2, #1693	; 0x69d
 80166d4:	4930      	ldr	r1, [pc, #192]	; (8016798 <dhcp_parse_reply+0x5a4>)
 80166d6:	482a      	ldr	r0, [pc, #168]	; (8016780 <dhcp_parse_reply+0x58c>)
 80166d8:	f002 ff48 	bl	801956c <iprintf>
 80166dc:	f06f 0305 	mvn.w	r3, #5
 80166e0:	e046      	b.n	8016770 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80166e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166e4:	685b      	ldr	r3, [r3, #4]
 80166e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80166e8:	e002      	b.n	80166f0 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80166ea:	f06f 0301 	mvn.w	r3, #1
 80166ee:	e03f      	b.n	8016770 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80166f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d00a      	beq.n	801670c <dhcp_parse_reply+0x518>
 80166f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80166f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80166fa:	429a      	cmp	r2, r3
 80166fc:	d206      	bcs.n	801670c <dhcp_parse_reply+0x518>
 80166fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016702:	4413      	add	r3, r2
 8016704:	781b      	ldrb	r3, [r3, #0]
 8016706:	2bff      	cmp	r3, #255	; 0xff
 8016708:	f47f adb7 	bne.w	801627a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801670c:	4b1e      	ldr	r3, [pc, #120]	; (8016788 <dhcp_parse_reply+0x594>)
 801670e:	781b      	ldrb	r3, [r3, #0]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d018      	beq.n	8016746 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016714:	4b1e      	ldr	r3, [pc, #120]	; (8016790 <dhcp_parse_reply+0x59c>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801671a:	4b1b      	ldr	r3, [pc, #108]	; (8016788 <dhcp_parse_reply+0x594>)
 801671c:	2200      	movs	r2, #0
 801671e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	2b01      	cmp	r3, #1
 8016724:	d102      	bne.n	801672c <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8016726:	2301      	movs	r3, #1
 8016728:	62fb      	str	r3, [r7, #44]	; 0x2c
 801672a:	e00c      	b.n	8016746 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	2b02      	cmp	r3, #2
 8016730:	d102      	bne.n	8016738 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8016732:	2301      	movs	r3, #1
 8016734:	62bb      	str	r3, [r7, #40]	; 0x28
 8016736:	e006      	b.n	8016746 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	2b03      	cmp	r3, #3
 801673c:	d103      	bne.n	8016746 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801673e:	2301      	movs	r3, #1
 8016740:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8016742:	2301      	movs	r3, #1
 8016744:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8016746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016748:	2b00      	cmp	r3, #0
 801674a:	d006      	beq.n	801675a <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801674c:	2300      	movs	r3, #0
 801674e:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8016750:	236c      	movs	r3, #108	; 0x6c
 8016752:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8016754:	23ec      	movs	r3, #236	; 0xec
 8016756:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8016758:	e569      	b.n	801622e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801675a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801675c:	2b00      	cmp	r3, #0
 801675e:	d006      	beq.n	801676e <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8016760:	2300      	movs	r3, #0
 8016762:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8016764:	232c      	movs	r3, #44	; 0x2c
 8016766:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8016768:	236c      	movs	r3, #108	; 0x6c
 801676a:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801676c:	e55f      	b.n	801622e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801676e:	2300      	movs	r3, #0
}
 8016770:	4618      	mov	r0, r3
 8016772:	3740      	adds	r7, #64	; 0x40
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}
 8016778:	0801d9b8 	.word	0x0801d9b8
 801677c:	0801dc40 	.word	0x0801dc40
 8016780:	0801da18 	.word	0x0801da18
 8016784:	0801dc84 	.word	0x0801dc84
 8016788:	20016e30 	.word	0x20016e30
 801678c:	0801dc98 	.word	0x0801dc98
 8016790:	20016e38 	.word	0x20016e38
 8016794:	0801dcb0 	.word	0x0801dcb0
 8016798:	0801dcc4 	.word	0x0801dcc4

0801679c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b08a      	sub	sp, #40	; 0x28
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	60f8      	str	r0, [r7, #12]
 80167a4:	60b9      	str	r1, [r7, #8]
 80167a6:	607a      	str	r2, [r7, #4]
 80167a8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80167aa:	4b5f      	ldr	r3, [pc, #380]	; (8016928 <dhcp_recv+0x18c>)
 80167ac:	685b      	ldr	r3, [r3, #4]
 80167ae:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80167b0:	6a3b      	ldr	r3, [r7, #32]
 80167b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167b4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	685b      	ldr	r3, [r3, #4]
 80167ba:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80167bc:	69fb      	ldr	r3, [r7, #28]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	f000 809d 	beq.w	80168fe <dhcp_recv+0x162>
 80167c4:	69fb      	ldr	r3, [r7, #28]
 80167c6:	791b      	ldrb	r3, [r3, #4]
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	f000 8098 	beq.w	80168fe <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	895b      	ldrh	r3, [r3, #10]
 80167d2:	2b2b      	cmp	r3, #43	; 0x2b
 80167d4:	f240 8095 	bls.w	8016902 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80167d8:	69bb      	ldr	r3, [r7, #24]
 80167da:	781b      	ldrb	r3, [r3, #0]
 80167dc:	2b02      	cmp	r3, #2
 80167de:	f040 8092 	bne.w	8016906 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80167e2:	2300      	movs	r3, #0
 80167e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80167e8:	e012      	b.n	8016810 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80167ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167ee:	6a3a      	ldr	r2, [r7, #32]
 80167f0:	4413      	add	r3, r2
 80167f2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80167f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167fa:	69b9      	ldr	r1, [r7, #24]
 80167fc:	440b      	add	r3, r1
 80167fe:	7f1b      	ldrb	r3, [r3, #28]
 8016800:	429a      	cmp	r2, r3
 8016802:	f040 8082 	bne.w	801690a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016806:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801680a:	3301      	adds	r3, #1
 801680c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016810:	6a3b      	ldr	r3, [r7, #32]
 8016812:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016816:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801681a:	429a      	cmp	r2, r3
 801681c:	d203      	bcs.n	8016826 <dhcp_recv+0x8a>
 801681e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016822:	2b05      	cmp	r3, #5
 8016824:	d9e1      	bls.n	80167ea <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8016826:	69bb      	ldr	r3, [r7, #24]
 8016828:	685b      	ldr	r3, [r3, #4]
 801682a:	4618      	mov	r0, r3
 801682c:	f7f5 fd8b 	bl	800c346 <lwip_htonl>
 8016830:	4602      	mov	r2, r0
 8016832:	69fb      	ldr	r3, [r7, #28]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	429a      	cmp	r2, r3
 8016838:	d169      	bne.n	801690e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801683a:	69f9      	ldr	r1, [r7, #28]
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f7ff fcd9 	bl	80161f4 <dhcp_parse_reply>
 8016842:	4603      	mov	r3, r0
 8016844:	2b00      	cmp	r3, #0
 8016846:	d164      	bne.n	8016912 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016848:	4b38      	ldr	r3, [pc, #224]	; (801692c <dhcp_recv+0x190>)
 801684a:	785b      	ldrb	r3, [r3, #1]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d062      	beq.n	8016916 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	685b      	ldr	r3, [r3, #4]
 8016854:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8016856:	4b36      	ldr	r3, [pc, #216]	; (8016930 <dhcp_recv+0x194>)
 8016858:	685b      	ldr	r3, [r3, #4]
 801685a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801685c:	7cfb      	ldrb	r3, [r7, #19]
 801685e:	2b05      	cmp	r3, #5
 8016860:	d12a      	bne.n	80168b8 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8016862:	69fb      	ldr	r3, [r7, #28]
 8016864:	795b      	ldrb	r3, [r3, #5]
 8016866:	2b01      	cmp	r3, #1
 8016868:	d112      	bne.n	8016890 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801686a:	6979      	ldr	r1, [r7, #20]
 801686c:	6a38      	ldr	r0, [r7, #32]
 801686e:	f7fe fdf9 	bl	8015464 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8016872:	6a3b      	ldr	r3, [r7, #32]
 8016874:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016878:	f003 0308 	and.w	r3, r3, #8
 801687c:	2b00      	cmp	r3, #0
 801687e:	d003      	beq.n	8016888 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016880:	6a38      	ldr	r0, [r7, #32]
 8016882:	f7fe fb69 	bl	8014f58 <dhcp_check>
 8016886:	e047      	b.n	8016918 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8016888:	6a38      	ldr	r0, [r7, #32]
 801688a:	f7ff f85b 	bl	8015944 <dhcp_bind>
 801688e:	e043      	b.n	8016918 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016890:	69fb      	ldr	r3, [r7, #28]
 8016892:	795b      	ldrb	r3, [r3, #5]
 8016894:	2b03      	cmp	r3, #3
 8016896:	d007      	beq.n	80168a8 <dhcp_recv+0x10c>
 8016898:	69fb      	ldr	r3, [r7, #28]
 801689a:	795b      	ldrb	r3, [r3, #5]
 801689c:	2b04      	cmp	r3, #4
 801689e:	d003      	beq.n	80168a8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80168a0:	69fb      	ldr	r3, [r7, #28]
 80168a2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80168a4:	2b05      	cmp	r3, #5
 80168a6:	d137      	bne.n	8016918 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 80168a8:	6979      	ldr	r1, [r7, #20]
 80168aa:	6a38      	ldr	r0, [r7, #32]
 80168ac:	f7fe fdda 	bl	8015464 <dhcp_handle_ack>
      dhcp_bind(netif);
 80168b0:	6a38      	ldr	r0, [r7, #32]
 80168b2:	f7ff f847 	bl	8015944 <dhcp_bind>
 80168b6:	e02f      	b.n	8016918 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80168b8:	7cfb      	ldrb	r3, [r7, #19]
 80168ba:	2b06      	cmp	r3, #6
 80168bc:	d113      	bne.n	80168e6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80168be:	69fb      	ldr	r3, [r7, #28]
 80168c0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80168c2:	2b03      	cmp	r3, #3
 80168c4:	d00b      	beq.n	80168de <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80168c6:	69fb      	ldr	r3, [r7, #28]
 80168c8:	795b      	ldrb	r3, [r3, #5]
 80168ca:	2b01      	cmp	r3, #1
 80168cc:	d007      	beq.n	80168de <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80168ce:	69fb      	ldr	r3, [r7, #28]
 80168d0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80168d2:	2b04      	cmp	r3, #4
 80168d4:	d003      	beq.n	80168de <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80168d6:	69fb      	ldr	r3, [r7, #28]
 80168d8:	795b      	ldrb	r3, [r3, #5]
 80168da:	2b05      	cmp	r3, #5
 80168dc:	d103      	bne.n	80168e6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80168de:	6a38      	ldr	r0, [r7, #32]
 80168e0:	f7fe fb20 	bl	8014f24 <dhcp_handle_nak>
 80168e4:	e018      	b.n	8016918 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80168e6:	7cfb      	ldrb	r3, [r7, #19]
 80168e8:	2b02      	cmp	r3, #2
 80168ea:	d108      	bne.n	80168fe <dhcp_recv+0x162>
 80168ec:	69fb      	ldr	r3, [r7, #28]
 80168ee:	795b      	ldrb	r3, [r3, #5]
 80168f0:	2b06      	cmp	r3, #6
 80168f2:	d104      	bne.n	80168fe <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80168f4:	6979      	ldr	r1, [r7, #20]
 80168f6:	6a38      	ldr	r0, [r7, #32]
 80168f8:	f7fe fb62 	bl	8014fc0 <dhcp_handle_offer>
 80168fc:	e00c      	b.n	8016918 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 80168fe:	bf00      	nop
 8016900:	e00a      	b.n	8016918 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8016902:	bf00      	nop
 8016904:	e008      	b.n	8016918 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8016906:	bf00      	nop
 8016908:	e006      	b.n	8016918 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 801690a:	bf00      	nop
 801690c:	e004      	b.n	8016918 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801690e:	bf00      	nop
 8016910:	e002      	b.n	8016918 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8016912:	bf00      	nop
 8016914:	e000      	b.n	8016918 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8016916:	bf00      	nop
  pbuf_free(p);
 8016918:	6878      	ldr	r0, [r7, #4]
 801691a:	f7f7 f8e9 	bl	800daf0 <pbuf_free>
}
 801691e:	bf00      	nop
 8016920:	3728      	adds	r7, #40	; 0x28
 8016922:	46bd      	mov	sp, r7
 8016924:	bd80      	pop	{r7, pc}
 8016926:	bf00      	nop
 8016928:	200136e0 	.word	0x200136e0
 801692c:	20016e30 	.word	0x20016e30
 8016930:	20016e38 	.word	0x20016e38

08016934 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b088      	sub	sp, #32
 8016938:	af00      	add	r7, sp, #0
 801693a:	60f8      	str	r0, [r7, #12]
 801693c:	60b9      	str	r1, [r7, #8]
 801693e:	603b      	str	r3, [r7, #0]
 8016940:	4613      	mov	r3, r2
 8016942:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d108      	bne.n	801695c <dhcp_create_msg+0x28>
 801694a:	4b5f      	ldr	r3, [pc, #380]	; (8016ac8 <dhcp_create_msg+0x194>)
 801694c:	f240 7269 	movw	r2, #1897	; 0x769
 8016950:	495e      	ldr	r1, [pc, #376]	; (8016acc <dhcp_create_msg+0x198>)
 8016952:	485f      	ldr	r0, [pc, #380]	; (8016ad0 <dhcp_create_msg+0x19c>)
 8016954:	f002 fe0a 	bl	801956c <iprintf>
 8016958:	2300      	movs	r3, #0
 801695a:	e0b1      	b.n	8016ac0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801695c:	68bb      	ldr	r3, [r7, #8]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d108      	bne.n	8016974 <dhcp_create_msg+0x40>
 8016962:	4b59      	ldr	r3, [pc, #356]	; (8016ac8 <dhcp_create_msg+0x194>)
 8016964:	f240 726a 	movw	r2, #1898	; 0x76a
 8016968:	495a      	ldr	r1, [pc, #360]	; (8016ad4 <dhcp_create_msg+0x1a0>)
 801696a:	4859      	ldr	r0, [pc, #356]	; (8016ad0 <dhcp_create_msg+0x19c>)
 801696c:	f002 fdfe 	bl	801956c <iprintf>
 8016970:	2300      	movs	r3, #0
 8016972:	e0a5      	b.n	8016ac0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016974:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016978:	f44f 719a 	mov.w	r1, #308	; 0x134
 801697c:	2036      	movs	r0, #54	; 0x36
 801697e:	f7f6 fdd7 	bl	800d530 <pbuf_alloc>
 8016982:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016984:	69bb      	ldr	r3, [r7, #24]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d101      	bne.n	801698e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801698a:	2300      	movs	r3, #0
 801698c:	e098      	b.n	8016ac0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801698e:	69bb      	ldr	r3, [r7, #24]
 8016990:	895b      	ldrh	r3, [r3, #10]
 8016992:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8016996:	d206      	bcs.n	80169a6 <dhcp_create_msg+0x72>
 8016998:	4b4b      	ldr	r3, [pc, #300]	; (8016ac8 <dhcp_create_msg+0x194>)
 801699a:	f240 7272 	movw	r2, #1906	; 0x772
 801699e:	494e      	ldr	r1, [pc, #312]	; (8016ad8 <dhcp_create_msg+0x1a4>)
 80169a0:	484b      	ldr	r0, [pc, #300]	; (8016ad0 <dhcp_create_msg+0x19c>)
 80169a2:	f002 fde3 	bl	801956c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80169a6:	79fb      	ldrb	r3, [r7, #7]
 80169a8:	2b03      	cmp	r3, #3
 80169aa:	d103      	bne.n	80169b4 <dhcp_create_msg+0x80>
 80169ac:	68bb      	ldr	r3, [r7, #8]
 80169ae:	795b      	ldrb	r3, [r3, #5]
 80169b0:	2b03      	cmp	r3, #3
 80169b2:	d10d      	bne.n	80169d0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80169b4:	68bb      	ldr	r3, [r7, #8]
 80169b6:	799b      	ldrb	r3, [r3, #6]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d105      	bne.n	80169c8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80169bc:	f002 fdee 	bl	801959c <rand>
 80169c0:	4603      	mov	r3, r0
 80169c2:	461a      	mov	r2, r3
 80169c4:	4b45      	ldr	r3, [pc, #276]	; (8016adc <dhcp_create_msg+0x1a8>)
 80169c6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80169c8:	4b44      	ldr	r3, [pc, #272]	; (8016adc <dhcp_create_msg+0x1a8>)
 80169ca:	681a      	ldr	r2, [r3, #0]
 80169cc:	68bb      	ldr	r3, [r7, #8]
 80169ce:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80169d0:	69bb      	ldr	r3, [r7, #24]
 80169d2:	685b      	ldr	r3, [r3, #4]
 80169d4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80169d6:	f44f 729a 	mov.w	r2, #308	; 0x134
 80169da:	2100      	movs	r1, #0
 80169dc:	6978      	ldr	r0, [r7, #20]
 80169de:	f002 fdbc 	bl	801955a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80169e2:	697b      	ldr	r3, [r7, #20]
 80169e4:	2201      	movs	r2, #1
 80169e6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80169e8:	697b      	ldr	r3, [r7, #20]
 80169ea:	2201      	movs	r2, #1
 80169ec:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80169f4:	697b      	ldr	r3, [r7, #20]
 80169f6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80169f8:	68bb      	ldr	r3, [r7, #8]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	4618      	mov	r0, r3
 80169fe:	f7f5 fca2 	bl	800c346 <lwip_htonl>
 8016a02:	4602      	mov	r2, r0
 8016a04:	697b      	ldr	r3, [r7, #20]
 8016a06:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8016a08:	79fb      	ldrb	r3, [r7, #7]
 8016a0a:	2b08      	cmp	r3, #8
 8016a0c:	d010      	beq.n	8016a30 <dhcp_create_msg+0xfc>
 8016a0e:	79fb      	ldrb	r3, [r7, #7]
 8016a10:	2b04      	cmp	r3, #4
 8016a12:	d00d      	beq.n	8016a30 <dhcp_create_msg+0xfc>
 8016a14:	79fb      	ldrb	r3, [r7, #7]
 8016a16:	2b07      	cmp	r3, #7
 8016a18:	d00a      	beq.n	8016a30 <dhcp_create_msg+0xfc>
 8016a1a:	79fb      	ldrb	r3, [r7, #7]
 8016a1c:	2b03      	cmp	r3, #3
 8016a1e:	d10c      	bne.n	8016a3a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016a20:	68bb      	ldr	r3, [r7, #8]
 8016a22:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016a24:	2b05      	cmp	r3, #5
 8016a26:	d003      	beq.n	8016a30 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016a28:	68bb      	ldr	r3, [r7, #8]
 8016a2a:	795b      	ldrb	r3, [r3, #5]
 8016a2c:	2b04      	cmp	r3, #4
 8016a2e:	d104      	bne.n	8016a3a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	3304      	adds	r3, #4
 8016a34:	681a      	ldr	r2, [r3, #0]
 8016a36:	697b      	ldr	r3, [r7, #20]
 8016a38:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	83fb      	strh	r3, [r7, #30]
 8016a3e:	e00c      	b.n	8016a5a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8016a40:	8bfa      	ldrh	r2, [r7, #30]
 8016a42:	8bfb      	ldrh	r3, [r7, #30]
 8016a44:	68f9      	ldr	r1, [r7, #12]
 8016a46:	440a      	add	r2, r1
 8016a48:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016a4c:	697a      	ldr	r2, [r7, #20]
 8016a4e:	4413      	add	r3, r2
 8016a50:	460a      	mov	r2, r1
 8016a52:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016a54:	8bfb      	ldrh	r3, [r7, #30]
 8016a56:	3301      	adds	r3, #1
 8016a58:	83fb      	strh	r3, [r7, #30]
 8016a5a:	8bfb      	ldrh	r3, [r7, #30]
 8016a5c:	2b05      	cmp	r3, #5
 8016a5e:	d9ef      	bls.n	8016a40 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8016a60:	697b      	ldr	r3, [r7, #20]
 8016a62:	2200      	movs	r2, #0
 8016a64:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016a68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8016a72:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8016a76:	2200      	movs	r2, #0
 8016a78:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016a7c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016a80:	2200      	movs	r2, #0
 8016a82:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8016a86:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8016a8a:	697b      	ldr	r3, [r7, #20]
 8016a8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016a90:	2301      	movs	r3, #1
 8016a92:	2235      	movs	r2, #53	; 0x35
 8016a94:	2000      	movs	r0, #0
 8016a96:	f7ff fadd 	bl	8016054 <dhcp_option>
 8016a9a:	4603      	mov	r3, r0
 8016a9c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016aa4:	79fa      	ldrb	r2, [r7, #7]
 8016aa6:	8a7b      	ldrh	r3, [r7, #18]
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f7ff fb07 	bl	80160bc <dhcp_option_byte>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016ab2:	683b      	ldr	r3, [r7, #0]
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	d002      	beq.n	8016abe <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	8a7a      	ldrh	r2, [r7, #18]
 8016abc:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016abe:	69bb      	ldr	r3, [r7, #24]
}
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	3720      	adds	r7, #32
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}
 8016ac8:	0801d9b8 	.word	0x0801d9b8
 8016acc:	0801dcd8 	.word	0x0801dcd8
 8016ad0:	0801da18 	.word	0x0801da18
 8016ad4:	0801dcf8 	.word	0x0801dcf8
 8016ad8:	0801dd18 	.word	0x0801dd18
 8016adc:	200102a0 	.word	0x200102a0

08016ae0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016ae0:	b580      	push	{r7, lr}
 8016ae2:	b084      	sub	sp, #16
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	60b9      	str	r1, [r7, #8]
 8016aea:	607a      	str	r2, [r7, #4]
 8016aec:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016aee:	89fb      	ldrh	r3, [r7, #14]
 8016af0:	1c5a      	adds	r2, r3, #1
 8016af2:	81fa      	strh	r2, [r7, #14]
 8016af4:	461a      	mov	r2, r3
 8016af6:	68bb      	ldr	r3, [r7, #8]
 8016af8:	4413      	add	r3, r2
 8016afa:	22ff      	movs	r2, #255	; 0xff
 8016afc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016afe:	e007      	b.n	8016b10 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016b00:	89fb      	ldrh	r3, [r7, #14]
 8016b02:	1c5a      	adds	r2, r3, #1
 8016b04:	81fa      	strh	r2, [r7, #14]
 8016b06:	461a      	mov	r2, r3
 8016b08:	68bb      	ldr	r3, [r7, #8]
 8016b0a:	4413      	add	r3, r2
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016b10:	89fb      	ldrh	r3, [r7, #14]
 8016b12:	2b43      	cmp	r3, #67	; 0x43
 8016b14:	d904      	bls.n	8016b20 <dhcp_option_trailer+0x40>
 8016b16:	89fb      	ldrh	r3, [r7, #14]
 8016b18:	f003 0303 	and.w	r3, r3, #3
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d002      	beq.n	8016b26 <dhcp_option_trailer+0x46>
 8016b20:	89fb      	ldrh	r3, [r7, #14]
 8016b22:	2b43      	cmp	r3, #67	; 0x43
 8016b24:	d9ec      	bls.n	8016b00 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016b26:	89fb      	ldrh	r3, [r7, #14]
 8016b28:	33f0      	adds	r3, #240	; 0xf0
 8016b2a:	b29b      	uxth	r3, r3
 8016b2c:	4619      	mov	r1, r3
 8016b2e:	6878      	ldr	r0, [r7, #4]
 8016b30:	f7f6 fe58 	bl	800d7e4 <pbuf_realloc>
}
 8016b34:	bf00      	nop
 8016b36:	3710      	adds	r7, #16
 8016b38:	46bd      	mov	sp, r7
 8016b3a:	bd80      	pop	{r7, pc}

08016b3c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016b3c:	b480      	push	{r7}
 8016b3e:	b085      	sub	sp, #20
 8016b40:	af00      	add	r7, sp, #0
 8016b42:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d017      	beq.n	8016b7a <dhcp_supplied_address+0x3e>
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d013      	beq.n	8016b7a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b56:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	795b      	ldrb	r3, [r3, #5]
 8016b5c:	2b0a      	cmp	r3, #10
 8016b5e:	d007      	beq.n	8016b70 <dhcp_supplied_address+0x34>
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	795b      	ldrb	r3, [r3, #5]
 8016b64:	2b05      	cmp	r3, #5
 8016b66:	d003      	beq.n	8016b70 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016b6c:	2b04      	cmp	r3, #4
 8016b6e:	d101      	bne.n	8016b74 <dhcp_supplied_address+0x38>
 8016b70:	2301      	movs	r3, #1
 8016b72:	e000      	b.n	8016b76 <dhcp_supplied_address+0x3a>
 8016b74:	2300      	movs	r3, #0
 8016b76:	b2db      	uxtb	r3, r3
 8016b78:	e000      	b.n	8016b7c <dhcp_supplied_address+0x40>
  }
  return 0;
 8016b7a:	2300      	movs	r3, #0
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	3714      	adds	r7, #20
 8016b80:	46bd      	mov	sp, r7
 8016b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b86:	4770      	bx	lr

08016b88 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b082      	sub	sp, #8
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016b90:	4915      	ldr	r1, [pc, #84]	; (8016be8 <etharp_free_entry+0x60>)
 8016b92:	687a      	ldr	r2, [r7, #4]
 8016b94:	4613      	mov	r3, r2
 8016b96:	005b      	lsls	r3, r3, #1
 8016b98:	4413      	add	r3, r2
 8016b9a:	00db      	lsls	r3, r3, #3
 8016b9c:	440b      	add	r3, r1
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d013      	beq.n	8016bcc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016ba4:	4910      	ldr	r1, [pc, #64]	; (8016be8 <etharp_free_entry+0x60>)
 8016ba6:	687a      	ldr	r2, [r7, #4]
 8016ba8:	4613      	mov	r3, r2
 8016baa:	005b      	lsls	r3, r3, #1
 8016bac:	4413      	add	r3, r2
 8016bae:	00db      	lsls	r3, r3, #3
 8016bb0:	440b      	add	r3, r1
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f7f6 ff9b 	bl	800daf0 <pbuf_free>
    arp_table[i].q = NULL;
 8016bba:	490b      	ldr	r1, [pc, #44]	; (8016be8 <etharp_free_entry+0x60>)
 8016bbc:	687a      	ldr	r2, [r7, #4]
 8016bbe:	4613      	mov	r3, r2
 8016bc0:	005b      	lsls	r3, r3, #1
 8016bc2:	4413      	add	r3, r2
 8016bc4:	00db      	lsls	r3, r3, #3
 8016bc6:	440b      	add	r3, r1
 8016bc8:	2200      	movs	r2, #0
 8016bca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016bcc:	4906      	ldr	r1, [pc, #24]	; (8016be8 <etharp_free_entry+0x60>)
 8016bce:	687a      	ldr	r2, [r7, #4]
 8016bd0:	4613      	mov	r3, r2
 8016bd2:	005b      	lsls	r3, r3, #1
 8016bd4:	4413      	add	r3, r2
 8016bd6:	00db      	lsls	r3, r3, #3
 8016bd8:	440b      	add	r3, r1
 8016bda:	3314      	adds	r3, #20
 8016bdc:	2200      	movs	r2, #0
 8016bde:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016be0:	bf00      	nop
 8016be2:	3708      	adds	r7, #8
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd80      	pop	{r7, pc}
 8016be8:	200102a4 	.word	0x200102a4

08016bec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b082      	sub	sp, #8
 8016bf0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	607b      	str	r3, [r7, #4]
 8016bf6:	e096      	b.n	8016d26 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016bf8:	494f      	ldr	r1, [pc, #316]	; (8016d38 <etharp_tmr+0x14c>)
 8016bfa:	687a      	ldr	r2, [r7, #4]
 8016bfc:	4613      	mov	r3, r2
 8016bfe:	005b      	lsls	r3, r3, #1
 8016c00:	4413      	add	r3, r2
 8016c02:	00db      	lsls	r3, r3, #3
 8016c04:	440b      	add	r3, r1
 8016c06:	3314      	adds	r3, #20
 8016c08:	781b      	ldrb	r3, [r3, #0]
 8016c0a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016c0c:	78fb      	ldrb	r3, [r7, #3]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	f000 8086 	beq.w	8016d20 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016c14:	4948      	ldr	r1, [pc, #288]	; (8016d38 <etharp_tmr+0x14c>)
 8016c16:	687a      	ldr	r2, [r7, #4]
 8016c18:	4613      	mov	r3, r2
 8016c1a:	005b      	lsls	r3, r3, #1
 8016c1c:	4413      	add	r3, r2
 8016c1e:	00db      	lsls	r3, r3, #3
 8016c20:	440b      	add	r3, r1
 8016c22:	3312      	adds	r3, #18
 8016c24:	881b      	ldrh	r3, [r3, #0]
 8016c26:	3301      	adds	r3, #1
 8016c28:	b298      	uxth	r0, r3
 8016c2a:	4943      	ldr	r1, [pc, #268]	; (8016d38 <etharp_tmr+0x14c>)
 8016c2c:	687a      	ldr	r2, [r7, #4]
 8016c2e:	4613      	mov	r3, r2
 8016c30:	005b      	lsls	r3, r3, #1
 8016c32:	4413      	add	r3, r2
 8016c34:	00db      	lsls	r3, r3, #3
 8016c36:	440b      	add	r3, r1
 8016c38:	3312      	adds	r3, #18
 8016c3a:	4602      	mov	r2, r0
 8016c3c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016c3e:	493e      	ldr	r1, [pc, #248]	; (8016d38 <etharp_tmr+0x14c>)
 8016c40:	687a      	ldr	r2, [r7, #4]
 8016c42:	4613      	mov	r3, r2
 8016c44:	005b      	lsls	r3, r3, #1
 8016c46:	4413      	add	r3, r2
 8016c48:	00db      	lsls	r3, r3, #3
 8016c4a:	440b      	add	r3, r1
 8016c4c:	3312      	adds	r3, #18
 8016c4e:	881b      	ldrh	r3, [r3, #0]
 8016c50:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016c54:	d215      	bcs.n	8016c82 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016c56:	4938      	ldr	r1, [pc, #224]	; (8016d38 <etharp_tmr+0x14c>)
 8016c58:	687a      	ldr	r2, [r7, #4]
 8016c5a:	4613      	mov	r3, r2
 8016c5c:	005b      	lsls	r3, r3, #1
 8016c5e:	4413      	add	r3, r2
 8016c60:	00db      	lsls	r3, r3, #3
 8016c62:	440b      	add	r3, r1
 8016c64:	3314      	adds	r3, #20
 8016c66:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016c68:	2b01      	cmp	r3, #1
 8016c6a:	d10e      	bne.n	8016c8a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016c6c:	4932      	ldr	r1, [pc, #200]	; (8016d38 <etharp_tmr+0x14c>)
 8016c6e:	687a      	ldr	r2, [r7, #4]
 8016c70:	4613      	mov	r3, r2
 8016c72:	005b      	lsls	r3, r3, #1
 8016c74:	4413      	add	r3, r2
 8016c76:	00db      	lsls	r3, r3, #3
 8016c78:	440b      	add	r3, r1
 8016c7a:	3312      	adds	r3, #18
 8016c7c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016c7e:	2b04      	cmp	r3, #4
 8016c80:	d903      	bls.n	8016c8a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016c82:	6878      	ldr	r0, [r7, #4]
 8016c84:	f7ff ff80 	bl	8016b88 <etharp_free_entry>
 8016c88:	e04a      	b.n	8016d20 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016c8a:	492b      	ldr	r1, [pc, #172]	; (8016d38 <etharp_tmr+0x14c>)
 8016c8c:	687a      	ldr	r2, [r7, #4]
 8016c8e:	4613      	mov	r3, r2
 8016c90:	005b      	lsls	r3, r3, #1
 8016c92:	4413      	add	r3, r2
 8016c94:	00db      	lsls	r3, r3, #3
 8016c96:	440b      	add	r3, r1
 8016c98:	3314      	adds	r3, #20
 8016c9a:	781b      	ldrb	r3, [r3, #0]
 8016c9c:	2b03      	cmp	r3, #3
 8016c9e:	d10a      	bne.n	8016cb6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016ca0:	4925      	ldr	r1, [pc, #148]	; (8016d38 <etharp_tmr+0x14c>)
 8016ca2:	687a      	ldr	r2, [r7, #4]
 8016ca4:	4613      	mov	r3, r2
 8016ca6:	005b      	lsls	r3, r3, #1
 8016ca8:	4413      	add	r3, r2
 8016caa:	00db      	lsls	r3, r3, #3
 8016cac:	440b      	add	r3, r1
 8016cae:	3314      	adds	r3, #20
 8016cb0:	2204      	movs	r2, #4
 8016cb2:	701a      	strb	r2, [r3, #0]
 8016cb4:	e034      	b.n	8016d20 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016cb6:	4920      	ldr	r1, [pc, #128]	; (8016d38 <etharp_tmr+0x14c>)
 8016cb8:	687a      	ldr	r2, [r7, #4]
 8016cba:	4613      	mov	r3, r2
 8016cbc:	005b      	lsls	r3, r3, #1
 8016cbe:	4413      	add	r3, r2
 8016cc0:	00db      	lsls	r3, r3, #3
 8016cc2:	440b      	add	r3, r1
 8016cc4:	3314      	adds	r3, #20
 8016cc6:	781b      	ldrb	r3, [r3, #0]
 8016cc8:	2b04      	cmp	r3, #4
 8016cca:	d10a      	bne.n	8016ce2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016ccc:	491a      	ldr	r1, [pc, #104]	; (8016d38 <etharp_tmr+0x14c>)
 8016cce:	687a      	ldr	r2, [r7, #4]
 8016cd0:	4613      	mov	r3, r2
 8016cd2:	005b      	lsls	r3, r3, #1
 8016cd4:	4413      	add	r3, r2
 8016cd6:	00db      	lsls	r3, r3, #3
 8016cd8:	440b      	add	r3, r1
 8016cda:	3314      	adds	r3, #20
 8016cdc:	2202      	movs	r2, #2
 8016cde:	701a      	strb	r2, [r3, #0]
 8016ce0:	e01e      	b.n	8016d20 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016ce2:	4915      	ldr	r1, [pc, #84]	; (8016d38 <etharp_tmr+0x14c>)
 8016ce4:	687a      	ldr	r2, [r7, #4]
 8016ce6:	4613      	mov	r3, r2
 8016ce8:	005b      	lsls	r3, r3, #1
 8016cea:	4413      	add	r3, r2
 8016cec:	00db      	lsls	r3, r3, #3
 8016cee:	440b      	add	r3, r1
 8016cf0:	3314      	adds	r3, #20
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	2b01      	cmp	r3, #1
 8016cf6:	d113      	bne.n	8016d20 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016cf8:	490f      	ldr	r1, [pc, #60]	; (8016d38 <etharp_tmr+0x14c>)
 8016cfa:	687a      	ldr	r2, [r7, #4]
 8016cfc:	4613      	mov	r3, r2
 8016cfe:	005b      	lsls	r3, r3, #1
 8016d00:	4413      	add	r3, r2
 8016d02:	00db      	lsls	r3, r3, #3
 8016d04:	440b      	add	r3, r1
 8016d06:	3308      	adds	r3, #8
 8016d08:	6818      	ldr	r0, [r3, #0]
 8016d0a:	687a      	ldr	r2, [r7, #4]
 8016d0c:	4613      	mov	r3, r2
 8016d0e:	005b      	lsls	r3, r3, #1
 8016d10:	4413      	add	r3, r2
 8016d12:	00db      	lsls	r3, r3, #3
 8016d14:	4a08      	ldr	r2, [pc, #32]	; (8016d38 <etharp_tmr+0x14c>)
 8016d16:	4413      	add	r3, r2
 8016d18:	3304      	adds	r3, #4
 8016d1a:	4619      	mov	r1, r3
 8016d1c:	f000 fe72 	bl	8017a04 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	3301      	adds	r3, #1
 8016d24:	607b      	str	r3, [r7, #4]
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	2b09      	cmp	r3, #9
 8016d2a:	f77f af65 	ble.w	8016bf8 <etharp_tmr+0xc>
      }
    }
  }
}
 8016d2e:	bf00      	nop
 8016d30:	3708      	adds	r7, #8
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}
 8016d36:	bf00      	nop
 8016d38:	200102a4 	.word	0x200102a4

08016d3c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b08a      	sub	sp, #40	; 0x28
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	60f8      	str	r0, [r7, #12]
 8016d44:	460b      	mov	r3, r1
 8016d46:	607a      	str	r2, [r7, #4]
 8016d48:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016d4a:	230a      	movs	r3, #10
 8016d4c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016d4e:	230a      	movs	r3, #10
 8016d50:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016d52:	230a      	movs	r3, #10
 8016d54:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016d56:	2300      	movs	r3, #0
 8016d58:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016d5a:	230a      	movs	r3, #10
 8016d5c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016d5e:	2300      	movs	r3, #0
 8016d60:	83bb      	strh	r3, [r7, #28]
 8016d62:	2300      	movs	r3, #0
 8016d64:	837b      	strh	r3, [r7, #26]
 8016d66:	2300      	movs	r3, #0
 8016d68:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	843b      	strh	r3, [r7, #32]
 8016d6e:	e0ae      	b.n	8016ece <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016d70:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d74:	49a6      	ldr	r1, [pc, #664]	; (8017010 <etharp_find_entry+0x2d4>)
 8016d76:	4613      	mov	r3, r2
 8016d78:	005b      	lsls	r3, r3, #1
 8016d7a:	4413      	add	r3, r2
 8016d7c:	00db      	lsls	r3, r3, #3
 8016d7e:	440b      	add	r3, r1
 8016d80:	3314      	adds	r3, #20
 8016d82:	781b      	ldrb	r3, [r3, #0]
 8016d84:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016d86:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016d8a:	2b0a      	cmp	r3, #10
 8016d8c:	d105      	bne.n	8016d9a <etharp_find_entry+0x5e>
 8016d8e:	7dfb      	ldrb	r3, [r7, #23]
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d102      	bne.n	8016d9a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016d94:	8c3b      	ldrh	r3, [r7, #32]
 8016d96:	847b      	strh	r3, [r7, #34]	; 0x22
 8016d98:	e095      	b.n	8016ec6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016d9a:	7dfb      	ldrb	r3, [r7, #23]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	f000 8092 	beq.w	8016ec6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016da2:	7dfb      	ldrb	r3, [r7, #23]
 8016da4:	2b01      	cmp	r3, #1
 8016da6:	d009      	beq.n	8016dbc <etharp_find_entry+0x80>
 8016da8:	7dfb      	ldrb	r3, [r7, #23]
 8016daa:	2b01      	cmp	r3, #1
 8016dac:	d806      	bhi.n	8016dbc <etharp_find_entry+0x80>
 8016dae:	4b99      	ldr	r3, [pc, #612]	; (8017014 <etharp_find_entry+0x2d8>)
 8016db0:	f44f 7292 	mov.w	r2, #292	; 0x124
 8016db4:	4998      	ldr	r1, [pc, #608]	; (8017018 <etharp_find_entry+0x2dc>)
 8016db6:	4899      	ldr	r0, [pc, #612]	; (801701c <etharp_find_entry+0x2e0>)
 8016db8:	f002 fbd8 	bl	801956c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d020      	beq.n	8016e04 <etharp_find_entry+0xc8>
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	6819      	ldr	r1, [r3, #0]
 8016dc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016dca:	4891      	ldr	r0, [pc, #580]	; (8017010 <etharp_find_entry+0x2d4>)
 8016dcc:	4613      	mov	r3, r2
 8016dce:	005b      	lsls	r3, r3, #1
 8016dd0:	4413      	add	r3, r2
 8016dd2:	00db      	lsls	r3, r3, #3
 8016dd4:	4403      	add	r3, r0
 8016dd6:	3304      	adds	r3, #4
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	4299      	cmp	r1, r3
 8016ddc:	d112      	bne.n	8016e04 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d00c      	beq.n	8016dfe <etharp_find_entry+0xc2>
 8016de4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016de8:	4989      	ldr	r1, [pc, #548]	; (8017010 <etharp_find_entry+0x2d4>)
 8016dea:	4613      	mov	r3, r2
 8016dec:	005b      	lsls	r3, r3, #1
 8016dee:	4413      	add	r3, r2
 8016df0:	00db      	lsls	r3, r3, #3
 8016df2:	440b      	add	r3, r1
 8016df4:	3308      	adds	r3, #8
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	687a      	ldr	r2, [r7, #4]
 8016dfa:	429a      	cmp	r2, r3
 8016dfc:	d102      	bne.n	8016e04 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016dfe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016e02:	e100      	b.n	8017006 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016e04:	7dfb      	ldrb	r3, [r7, #23]
 8016e06:	2b01      	cmp	r3, #1
 8016e08:	d140      	bne.n	8016e8c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016e0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e0e:	4980      	ldr	r1, [pc, #512]	; (8017010 <etharp_find_entry+0x2d4>)
 8016e10:	4613      	mov	r3, r2
 8016e12:	005b      	lsls	r3, r3, #1
 8016e14:	4413      	add	r3, r2
 8016e16:	00db      	lsls	r3, r3, #3
 8016e18:	440b      	add	r3, r1
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d01a      	beq.n	8016e56 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016e20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e24:	497a      	ldr	r1, [pc, #488]	; (8017010 <etharp_find_entry+0x2d4>)
 8016e26:	4613      	mov	r3, r2
 8016e28:	005b      	lsls	r3, r3, #1
 8016e2a:	4413      	add	r3, r2
 8016e2c:	00db      	lsls	r3, r3, #3
 8016e2e:	440b      	add	r3, r1
 8016e30:	3312      	adds	r3, #18
 8016e32:	881b      	ldrh	r3, [r3, #0]
 8016e34:	8bba      	ldrh	r2, [r7, #28]
 8016e36:	429a      	cmp	r2, r3
 8016e38:	d845      	bhi.n	8016ec6 <etharp_find_entry+0x18a>
            old_queue = i;
 8016e3a:	8c3b      	ldrh	r3, [r7, #32]
 8016e3c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016e3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e42:	4973      	ldr	r1, [pc, #460]	; (8017010 <etharp_find_entry+0x2d4>)
 8016e44:	4613      	mov	r3, r2
 8016e46:	005b      	lsls	r3, r3, #1
 8016e48:	4413      	add	r3, r2
 8016e4a:	00db      	lsls	r3, r3, #3
 8016e4c:	440b      	add	r3, r1
 8016e4e:	3312      	adds	r3, #18
 8016e50:	881b      	ldrh	r3, [r3, #0]
 8016e52:	83bb      	strh	r3, [r7, #28]
 8016e54:	e037      	b.n	8016ec6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016e56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e5a:	496d      	ldr	r1, [pc, #436]	; (8017010 <etharp_find_entry+0x2d4>)
 8016e5c:	4613      	mov	r3, r2
 8016e5e:	005b      	lsls	r3, r3, #1
 8016e60:	4413      	add	r3, r2
 8016e62:	00db      	lsls	r3, r3, #3
 8016e64:	440b      	add	r3, r1
 8016e66:	3312      	adds	r3, #18
 8016e68:	881b      	ldrh	r3, [r3, #0]
 8016e6a:	8b7a      	ldrh	r2, [r7, #26]
 8016e6c:	429a      	cmp	r2, r3
 8016e6e:	d82a      	bhi.n	8016ec6 <etharp_find_entry+0x18a>
            old_pending = i;
 8016e70:	8c3b      	ldrh	r3, [r7, #32]
 8016e72:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016e74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e78:	4965      	ldr	r1, [pc, #404]	; (8017010 <etharp_find_entry+0x2d4>)
 8016e7a:	4613      	mov	r3, r2
 8016e7c:	005b      	lsls	r3, r3, #1
 8016e7e:	4413      	add	r3, r2
 8016e80:	00db      	lsls	r3, r3, #3
 8016e82:	440b      	add	r3, r1
 8016e84:	3312      	adds	r3, #18
 8016e86:	881b      	ldrh	r3, [r3, #0]
 8016e88:	837b      	strh	r3, [r7, #26]
 8016e8a:	e01c      	b.n	8016ec6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016e8c:	7dfb      	ldrb	r3, [r7, #23]
 8016e8e:	2b01      	cmp	r3, #1
 8016e90:	d919      	bls.n	8016ec6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016e92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e96:	495e      	ldr	r1, [pc, #376]	; (8017010 <etharp_find_entry+0x2d4>)
 8016e98:	4613      	mov	r3, r2
 8016e9a:	005b      	lsls	r3, r3, #1
 8016e9c:	4413      	add	r3, r2
 8016e9e:	00db      	lsls	r3, r3, #3
 8016ea0:	440b      	add	r3, r1
 8016ea2:	3312      	adds	r3, #18
 8016ea4:	881b      	ldrh	r3, [r3, #0]
 8016ea6:	8b3a      	ldrh	r2, [r7, #24]
 8016ea8:	429a      	cmp	r2, r3
 8016eaa:	d80c      	bhi.n	8016ec6 <etharp_find_entry+0x18a>
            old_stable = i;
 8016eac:	8c3b      	ldrh	r3, [r7, #32]
 8016eae:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016eb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016eb4:	4956      	ldr	r1, [pc, #344]	; (8017010 <etharp_find_entry+0x2d4>)
 8016eb6:	4613      	mov	r3, r2
 8016eb8:	005b      	lsls	r3, r3, #1
 8016eba:	4413      	add	r3, r2
 8016ebc:	00db      	lsls	r3, r3, #3
 8016ebe:	440b      	add	r3, r1
 8016ec0:	3312      	adds	r3, #18
 8016ec2:	881b      	ldrh	r3, [r3, #0]
 8016ec4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016ec6:	8c3b      	ldrh	r3, [r7, #32]
 8016ec8:	3301      	adds	r3, #1
 8016eca:	b29b      	uxth	r3, r3
 8016ecc:	843b      	strh	r3, [r7, #32]
 8016ece:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016ed2:	2b09      	cmp	r3, #9
 8016ed4:	f77f af4c 	ble.w	8016d70 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016ed8:	7afb      	ldrb	r3, [r7, #11]
 8016eda:	f003 0302 	and.w	r3, r3, #2
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d108      	bne.n	8016ef4 <etharp_find_entry+0x1b8>
 8016ee2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016ee6:	2b0a      	cmp	r3, #10
 8016ee8:	d107      	bne.n	8016efa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016eea:	7afb      	ldrb	r3, [r7, #11]
 8016eec:	f003 0301 	and.w	r3, r3, #1
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d102      	bne.n	8016efa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ef8:	e085      	b.n	8017006 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016efa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016efe:	2b09      	cmp	r3, #9
 8016f00:	dc02      	bgt.n	8016f08 <etharp_find_entry+0x1cc>
    i = empty;
 8016f02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f04:	843b      	strh	r3, [r7, #32]
 8016f06:	e039      	b.n	8016f7c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016f08:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016f0c:	2b09      	cmp	r3, #9
 8016f0e:	dc14      	bgt.n	8016f3a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016f10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016f12:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016f14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f18:	493d      	ldr	r1, [pc, #244]	; (8017010 <etharp_find_entry+0x2d4>)
 8016f1a:	4613      	mov	r3, r2
 8016f1c:	005b      	lsls	r3, r3, #1
 8016f1e:	4413      	add	r3, r2
 8016f20:	00db      	lsls	r3, r3, #3
 8016f22:	440b      	add	r3, r1
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d018      	beq.n	8016f5c <etharp_find_entry+0x220>
 8016f2a:	4b3a      	ldr	r3, [pc, #232]	; (8017014 <etharp_find_entry+0x2d8>)
 8016f2c:	f240 126d 	movw	r2, #365	; 0x16d
 8016f30:	493b      	ldr	r1, [pc, #236]	; (8017020 <etharp_find_entry+0x2e4>)
 8016f32:	483a      	ldr	r0, [pc, #232]	; (801701c <etharp_find_entry+0x2e0>)
 8016f34:	f002 fb1a 	bl	801956c <iprintf>
 8016f38:	e010      	b.n	8016f5c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016f3a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016f3e:	2b09      	cmp	r3, #9
 8016f40:	dc02      	bgt.n	8016f48 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016f42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016f44:	843b      	strh	r3, [r7, #32]
 8016f46:	e009      	b.n	8016f5c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016f48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016f4c:	2b09      	cmp	r3, #9
 8016f4e:	dc02      	bgt.n	8016f56 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016f50:	8bfb      	ldrh	r3, [r7, #30]
 8016f52:	843b      	strh	r3, [r7, #32]
 8016f54:	e002      	b.n	8016f5c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016f56:	f04f 33ff 	mov.w	r3, #4294967295
 8016f5a:	e054      	b.n	8017006 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016f5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016f60:	2b09      	cmp	r3, #9
 8016f62:	dd06      	ble.n	8016f72 <etharp_find_entry+0x236>
 8016f64:	4b2b      	ldr	r3, [pc, #172]	; (8017014 <etharp_find_entry+0x2d8>)
 8016f66:	f240 127f 	movw	r2, #383	; 0x17f
 8016f6a:	492e      	ldr	r1, [pc, #184]	; (8017024 <etharp_find_entry+0x2e8>)
 8016f6c:	482b      	ldr	r0, [pc, #172]	; (801701c <etharp_find_entry+0x2e0>)
 8016f6e:	f002 fafd 	bl	801956c <iprintf>
    etharp_free_entry(i);
 8016f72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016f76:	4618      	mov	r0, r3
 8016f78:	f7ff fe06 	bl	8016b88 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016f7c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016f80:	2b09      	cmp	r3, #9
 8016f82:	dd06      	ble.n	8016f92 <etharp_find_entry+0x256>
 8016f84:	4b23      	ldr	r3, [pc, #140]	; (8017014 <etharp_find_entry+0x2d8>)
 8016f86:	f240 1283 	movw	r2, #387	; 0x183
 8016f8a:	4926      	ldr	r1, [pc, #152]	; (8017024 <etharp_find_entry+0x2e8>)
 8016f8c:	4823      	ldr	r0, [pc, #140]	; (801701c <etharp_find_entry+0x2e0>)
 8016f8e:	f002 faed 	bl	801956c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016f92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f96:	491e      	ldr	r1, [pc, #120]	; (8017010 <etharp_find_entry+0x2d4>)
 8016f98:	4613      	mov	r3, r2
 8016f9a:	005b      	lsls	r3, r3, #1
 8016f9c:	4413      	add	r3, r2
 8016f9e:	00db      	lsls	r3, r3, #3
 8016fa0:	440b      	add	r3, r1
 8016fa2:	3314      	adds	r3, #20
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d006      	beq.n	8016fb8 <etharp_find_entry+0x27c>
 8016faa:	4b1a      	ldr	r3, [pc, #104]	; (8017014 <etharp_find_entry+0x2d8>)
 8016fac:	f240 1285 	movw	r2, #389	; 0x185
 8016fb0:	491d      	ldr	r1, [pc, #116]	; (8017028 <etharp_find_entry+0x2ec>)
 8016fb2:	481a      	ldr	r0, [pc, #104]	; (801701c <etharp_find_entry+0x2e0>)
 8016fb4:	f002 fada 	bl	801956c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d00b      	beq.n	8016fd6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016fbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	6819      	ldr	r1, [r3, #0]
 8016fc6:	4812      	ldr	r0, [pc, #72]	; (8017010 <etharp_find_entry+0x2d4>)
 8016fc8:	4613      	mov	r3, r2
 8016fca:	005b      	lsls	r3, r3, #1
 8016fcc:	4413      	add	r3, r2
 8016fce:	00db      	lsls	r3, r3, #3
 8016fd0:	4403      	add	r3, r0
 8016fd2:	3304      	adds	r3, #4
 8016fd4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016fd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016fda:	490d      	ldr	r1, [pc, #52]	; (8017010 <etharp_find_entry+0x2d4>)
 8016fdc:	4613      	mov	r3, r2
 8016fde:	005b      	lsls	r3, r3, #1
 8016fe0:	4413      	add	r3, r2
 8016fe2:	00db      	lsls	r3, r3, #3
 8016fe4:	440b      	add	r3, r1
 8016fe6:	3312      	adds	r3, #18
 8016fe8:	2200      	movs	r2, #0
 8016fea:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016fec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ff0:	4907      	ldr	r1, [pc, #28]	; (8017010 <etharp_find_entry+0x2d4>)
 8016ff2:	4613      	mov	r3, r2
 8016ff4:	005b      	lsls	r3, r3, #1
 8016ff6:	4413      	add	r3, r2
 8016ff8:	00db      	lsls	r3, r3, #3
 8016ffa:	440b      	add	r3, r1
 8016ffc:	3308      	adds	r3, #8
 8016ffe:	687a      	ldr	r2, [r7, #4]
 8017000:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017002:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017006:	4618      	mov	r0, r3
 8017008:	3728      	adds	r7, #40	; 0x28
 801700a:	46bd      	mov	sp, r7
 801700c:	bd80      	pop	{r7, pc}
 801700e:	bf00      	nop
 8017010:	200102a4 	.word	0x200102a4
 8017014:	0801dd58 	.word	0x0801dd58
 8017018:	0801dd90 	.word	0x0801dd90
 801701c:	0801ddd0 	.word	0x0801ddd0
 8017020:	0801ddf8 	.word	0x0801ddf8
 8017024:	0801de10 	.word	0x0801de10
 8017028:	0801de24 	.word	0x0801de24

0801702c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b088      	sub	sp, #32
 8017030:	af02      	add	r7, sp, #8
 8017032:	60f8      	str	r0, [r7, #12]
 8017034:	60b9      	str	r1, [r7, #8]
 8017036:	607a      	str	r2, [r7, #4]
 8017038:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017040:	2b06      	cmp	r3, #6
 8017042:	d006      	beq.n	8017052 <etharp_update_arp_entry+0x26>
 8017044:	4b48      	ldr	r3, [pc, #288]	; (8017168 <etharp_update_arp_entry+0x13c>)
 8017046:	f240 12a9 	movw	r2, #425	; 0x1a9
 801704a:	4948      	ldr	r1, [pc, #288]	; (801716c <etharp_update_arp_entry+0x140>)
 801704c:	4848      	ldr	r0, [pc, #288]	; (8017170 <etharp_update_arp_entry+0x144>)
 801704e:	f002 fa8d 	bl	801956c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017052:	68bb      	ldr	r3, [r7, #8]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d012      	beq.n	801707e <etharp_update_arp_entry+0x52>
 8017058:	68bb      	ldr	r3, [r7, #8]
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d00e      	beq.n	801707e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017060:	68bb      	ldr	r3, [r7, #8]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	68f9      	ldr	r1, [r7, #12]
 8017066:	4618      	mov	r0, r3
 8017068:	f001 f91e 	bl	80182a8 <ip4_addr_isbroadcast_u32>
 801706c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801706e:	2b00      	cmp	r3, #0
 8017070:	d105      	bne.n	801707e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017072:	68bb      	ldr	r3, [r7, #8]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801707a:	2be0      	cmp	r3, #224	; 0xe0
 801707c:	d102      	bne.n	8017084 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801707e:	f06f 030f 	mvn.w	r3, #15
 8017082:	e06c      	b.n	801715e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017084:	78fb      	ldrb	r3, [r7, #3]
 8017086:	68fa      	ldr	r2, [r7, #12]
 8017088:	4619      	mov	r1, r3
 801708a:	68b8      	ldr	r0, [r7, #8]
 801708c:	f7ff fe56 	bl	8016d3c <etharp_find_entry>
 8017090:	4603      	mov	r3, r0
 8017092:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017094:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017098:	2b00      	cmp	r3, #0
 801709a:	da02      	bge.n	80170a2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801709c:	8afb      	ldrh	r3, [r7, #22]
 801709e:	b25b      	sxtb	r3, r3
 80170a0:	e05d      	b.n	801715e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80170a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80170a6:	4933      	ldr	r1, [pc, #204]	; (8017174 <etharp_update_arp_entry+0x148>)
 80170a8:	4613      	mov	r3, r2
 80170aa:	005b      	lsls	r3, r3, #1
 80170ac:	4413      	add	r3, r2
 80170ae:	00db      	lsls	r3, r3, #3
 80170b0:	440b      	add	r3, r1
 80170b2:	3314      	adds	r3, #20
 80170b4:	2202      	movs	r2, #2
 80170b6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80170b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80170bc:	492d      	ldr	r1, [pc, #180]	; (8017174 <etharp_update_arp_entry+0x148>)
 80170be:	4613      	mov	r3, r2
 80170c0:	005b      	lsls	r3, r3, #1
 80170c2:	4413      	add	r3, r2
 80170c4:	00db      	lsls	r3, r3, #3
 80170c6:	440b      	add	r3, r1
 80170c8:	3308      	adds	r3, #8
 80170ca:	68fa      	ldr	r2, [r7, #12]
 80170cc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80170ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80170d2:	4613      	mov	r3, r2
 80170d4:	005b      	lsls	r3, r3, #1
 80170d6:	4413      	add	r3, r2
 80170d8:	00db      	lsls	r3, r3, #3
 80170da:	3308      	adds	r3, #8
 80170dc:	4a25      	ldr	r2, [pc, #148]	; (8017174 <etharp_update_arp_entry+0x148>)
 80170de:	4413      	add	r3, r2
 80170e0:	3304      	adds	r3, #4
 80170e2:	2206      	movs	r2, #6
 80170e4:	6879      	ldr	r1, [r7, #4]
 80170e6:	4618      	mov	r0, r3
 80170e8:	f002 fa13 	bl	8019512 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80170ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80170f0:	4920      	ldr	r1, [pc, #128]	; (8017174 <etharp_update_arp_entry+0x148>)
 80170f2:	4613      	mov	r3, r2
 80170f4:	005b      	lsls	r3, r3, #1
 80170f6:	4413      	add	r3, r2
 80170f8:	00db      	lsls	r3, r3, #3
 80170fa:	440b      	add	r3, r1
 80170fc:	3312      	adds	r3, #18
 80170fe:	2200      	movs	r2, #0
 8017100:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017102:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017106:	491b      	ldr	r1, [pc, #108]	; (8017174 <etharp_update_arp_entry+0x148>)
 8017108:	4613      	mov	r3, r2
 801710a:	005b      	lsls	r3, r3, #1
 801710c:	4413      	add	r3, r2
 801710e:	00db      	lsls	r3, r3, #3
 8017110:	440b      	add	r3, r1
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	2b00      	cmp	r3, #0
 8017116:	d021      	beq.n	801715c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017118:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801711c:	4915      	ldr	r1, [pc, #84]	; (8017174 <etharp_update_arp_entry+0x148>)
 801711e:	4613      	mov	r3, r2
 8017120:	005b      	lsls	r3, r3, #1
 8017122:	4413      	add	r3, r2
 8017124:	00db      	lsls	r3, r3, #3
 8017126:	440b      	add	r3, r1
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801712c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017130:	4910      	ldr	r1, [pc, #64]	; (8017174 <etharp_update_arp_entry+0x148>)
 8017132:	4613      	mov	r3, r2
 8017134:	005b      	lsls	r3, r3, #1
 8017136:	4413      	add	r3, r2
 8017138:	00db      	lsls	r3, r3, #3
 801713a:	440b      	add	r3, r1
 801713c:	2200      	movs	r2, #0
 801713e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017146:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801714a:	9300      	str	r3, [sp, #0]
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	6939      	ldr	r1, [r7, #16]
 8017150:	68f8      	ldr	r0, [r7, #12]
 8017152:	f001 ffad 	bl	80190b0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017156:	6938      	ldr	r0, [r7, #16]
 8017158:	f7f6 fcca 	bl	800daf0 <pbuf_free>
  }
  return ERR_OK;
 801715c:	2300      	movs	r3, #0
}
 801715e:	4618      	mov	r0, r3
 8017160:	3718      	adds	r7, #24
 8017162:	46bd      	mov	sp, r7
 8017164:	bd80      	pop	{r7, pc}
 8017166:	bf00      	nop
 8017168:	0801dd58 	.word	0x0801dd58
 801716c:	0801de50 	.word	0x0801de50
 8017170:	0801ddd0 	.word	0x0801ddd0
 8017174:	200102a4 	.word	0x200102a4

08017178 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017178:	b580      	push	{r7, lr}
 801717a:	b084      	sub	sp, #16
 801717c:	af00      	add	r7, sp, #0
 801717e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017180:	2300      	movs	r3, #0
 8017182:	60fb      	str	r3, [r7, #12]
 8017184:	e01e      	b.n	80171c4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017186:	4913      	ldr	r1, [pc, #76]	; (80171d4 <etharp_cleanup_netif+0x5c>)
 8017188:	68fa      	ldr	r2, [r7, #12]
 801718a:	4613      	mov	r3, r2
 801718c:	005b      	lsls	r3, r3, #1
 801718e:	4413      	add	r3, r2
 8017190:	00db      	lsls	r3, r3, #3
 8017192:	440b      	add	r3, r1
 8017194:	3314      	adds	r3, #20
 8017196:	781b      	ldrb	r3, [r3, #0]
 8017198:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801719a:	7afb      	ldrb	r3, [r7, #11]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d00e      	beq.n	80171be <etharp_cleanup_netif+0x46>
 80171a0:	490c      	ldr	r1, [pc, #48]	; (80171d4 <etharp_cleanup_netif+0x5c>)
 80171a2:	68fa      	ldr	r2, [r7, #12]
 80171a4:	4613      	mov	r3, r2
 80171a6:	005b      	lsls	r3, r3, #1
 80171a8:	4413      	add	r3, r2
 80171aa:	00db      	lsls	r3, r3, #3
 80171ac:	440b      	add	r3, r1
 80171ae:	3308      	adds	r3, #8
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	687a      	ldr	r2, [r7, #4]
 80171b4:	429a      	cmp	r2, r3
 80171b6:	d102      	bne.n	80171be <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80171b8:	68f8      	ldr	r0, [r7, #12]
 80171ba:	f7ff fce5 	bl	8016b88 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	3301      	adds	r3, #1
 80171c2:	60fb      	str	r3, [r7, #12]
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	2b09      	cmp	r3, #9
 80171c8:	dddd      	ble.n	8017186 <etharp_cleanup_netif+0xe>
    }
  }
}
 80171ca:	bf00      	nop
 80171cc:	3710      	adds	r7, #16
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bd80      	pop	{r7, pc}
 80171d2:	bf00      	nop
 80171d4:	200102a4 	.word	0x200102a4

080171d8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80171d8:	b5b0      	push	{r4, r5, r7, lr}
 80171da:	b08a      	sub	sp, #40	; 0x28
 80171dc:	af04      	add	r7, sp, #16
 80171de:	6078      	str	r0, [r7, #4]
 80171e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80171e2:	683b      	ldr	r3, [r7, #0]
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d107      	bne.n	80171f8 <etharp_input+0x20>
 80171e8:	4b3f      	ldr	r3, [pc, #252]	; (80172e8 <etharp_input+0x110>)
 80171ea:	f240 228a 	movw	r2, #650	; 0x28a
 80171ee:	493f      	ldr	r1, [pc, #252]	; (80172ec <etharp_input+0x114>)
 80171f0:	483f      	ldr	r0, [pc, #252]	; (80172f0 <etharp_input+0x118>)
 80171f2:	f002 f9bb 	bl	801956c <iprintf>
 80171f6:	e074      	b.n	80172e2 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	685b      	ldr	r3, [r3, #4]
 80171fc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80171fe:	693b      	ldr	r3, [r7, #16]
 8017200:	881b      	ldrh	r3, [r3, #0]
 8017202:	b29b      	uxth	r3, r3
 8017204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017208:	d10c      	bne.n	8017224 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801720a:	693b      	ldr	r3, [r7, #16]
 801720c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801720e:	2b06      	cmp	r3, #6
 8017210:	d108      	bne.n	8017224 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017212:	693b      	ldr	r3, [r7, #16]
 8017214:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017216:	2b04      	cmp	r3, #4
 8017218:	d104      	bne.n	8017224 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801721a:	693b      	ldr	r3, [r7, #16]
 801721c:	885b      	ldrh	r3, [r3, #2]
 801721e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017220:	2b08      	cmp	r3, #8
 8017222:	d003      	beq.n	801722c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017224:	6878      	ldr	r0, [r7, #4]
 8017226:	f7f6 fc63 	bl	800daf0 <pbuf_free>
    return;
 801722a:	e05a      	b.n	80172e2 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801722c:	693b      	ldr	r3, [r7, #16]
 801722e:	330e      	adds	r3, #14
 8017230:	681b      	ldr	r3, [r3, #0]
 8017232:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017234:	693b      	ldr	r3, [r7, #16]
 8017236:	3318      	adds	r3, #24
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	3304      	adds	r3, #4
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	2b00      	cmp	r3, #0
 8017244:	d102      	bne.n	801724c <etharp_input+0x74>
    for_us = 0;
 8017246:	2300      	movs	r3, #0
 8017248:	75fb      	strb	r3, [r7, #23]
 801724a:	e009      	b.n	8017260 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801724c:	68ba      	ldr	r2, [r7, #8]
 801724e:	683b      	ldr	r3, [r7, #0]
 8017250:	3304      	adds	r3, #4
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	429a      	cmp	r2, r3
 8017256:	bf0c      	ite	eq
 8017258:	2301      	moveq	r3, #1
 801725a:	2300      	movne	r3, #0
 801725c:	b2db      	uxtb	r3, r3
 801725e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017260:	693b      	ldr	r3, [r7, #16]
 8017262:	f103 0208 	add.w	r2, r3, #8
 8017266:	7dfb      	ldrb	r3, [r7, #23]
 8017268:	2b00      	cmp	r3, #0
 801726a:	d001      	beq.n	8017270 <etharp_input+0x98>
 801726c:	2301      	movs	r3, #1
 801726e:	e000      	b.n	8017272 <etharp_input+0x9a>
 8017270:	2302      	movs	r3, #2
 8017272:	f107 010c 	add.w	r1, r7, #12
 8017276:	6838      	ldr	r0, [r7, #0]
 8017278:	f7ff fed8 	bl	801702c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801727c:	693b      	ldr	r3, [r7, #16]
 801727e:	88db      	ldrh	r3, [r3, #6]
 8017280:	b29b      	uxth	r3, r3
 8017282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017286:	d003      	beq.n	8017290 <etharp_input+0xb8>
 8017288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801728c:	d01e      	beq.n	80172cc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801728e:	e025      	b.n	80172dc <etharp_input+0x104>
      if (for_us) {
 8017290:	7dfb      	ldrb	r3, [r7, #23]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d021      	beq.n	80172da <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017296:	683b      	ldr	r3, [r7, #0]
 8017298:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801729c:	693b      	ldr	r3, [r7, #16]
 801729e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80172a2:	683b      	ldr	r3, [r7, #0]
 80172a4:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80172ac:	693a      	ldr	r2, [r7, #16]
 80172ae:	3208      	adds	r2, #8
        etharp_raw(netif,
 80172b0:	2102      	movs	r1, #2
 80172b2:	9103      	str	r1, [sp, #12]
 80172b4:	f107 010c 	add.w	r1, r7, #12
 80172b8:	9102      	str	r1, [sp, #8]
 80172ba:	9201      	str	r2, [sp, #4]
 80172bc:	9300      	str	r3, [sp, #0]
 80172be:	462b      	mov	r3, r5
 80172c0:	4622      	mov	r2, r4
 80172c2:	4601      	mov	r1, r0
 80172c4:	6838      	ldr	r0, [r7, #0]
 80172c6:	f000 faef 	bl	80178a8 <etharp_raw>
      break;
 80172ca:	e006      	b.n	80172da <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80172cc:	f107 030c 	add.w	r3, r7, #12
 80172d0:	4619      	mov	r1, r3
 80172d2:	6838      	ldr	r0, [r7, #0]
 80172d4:	f7fe f9f2 	bl	80156bc <dhcp_arp_reply>
      break;
 80172d8:	e000      	b.n	80172dc <etharp_input+0x104>
      break;
 80172da:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f7f6 fc07 	bl	800daf0 <pbuf_free>
}
 80172e2:	3718      	adds	r7, #24
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bdb0      	pop	{r4, r5, r7, pc}
 80172e8:	0801dd58 	.word	0x0801dd58
 80172ec:	0801dea8 	.word	0x0801dea8
 80172f0:	0801ddd0 	.word	0x0801ddd0

080172f4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b086      	sub	sp, #24
 80172f8:	af02      	add	r7, sp, #8
 80172fa:	60f8      	str	r0, [r7, #12]
 80172fc:	60b9      	str	r1, [r7, #8]
 80172fe:	4613      	mov	r3, r2
 8017300:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017302:	79fa      	ldrb	r2, [r7, #7]
 8017304:	4944      	ldr	r1, [pc, #272]	; (8017418 <etharp_output_to_arp_index+0x124>)
 8017306:	4613      	mov	r3, r2
 8017308:	005b      	lsls	r3, r3, #1
 801730a:	4413      	add	r3, r2
 801730c:	00db      	lsls	r3, r3, #3
 801730e:	440b      	add	r3, r1
 8017310:	3314      	adds	r3, #20
 8017312:	781b      	ldrb	r3, [r3, #0]
 8017314:	2b01      	cmp	r3, #1
 8017316:	d806      	bhi.n	8017326 <etharp_output_to_arp_index+0x32>
 8017318:	4b40      	ldr	r3, [pc, #256]	; (801741c <etharp_output_to_arp_index+0x128>)
 801731a:	f240 22ef 	movw	r2, #751	; 0x2ef
 801731e:	4940      	ldr	r1, [pc, #256]	; (8017420 <etharp_output_to_arp_index+0x12c>)
 8017320:	4840      	ldr	r0, [pc, #256]	; (8017424 <etharp_output_to_arp_index+0x130>)
 8017322:	f002 f923 	bl	801956c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017326:	79fa      	ldrb	r2, [r7, #7]
 8017328:	493b      	ldr	r1, [pc, #236]	; (8017418 <etharp_output_to_arp_index+0x124>)
 801732a:	4613      	mov	r3, r2
 801732c:	005b      	lsls	r3, r3, #1
 801732e:	4413      	add	r3, r2
 8017330:	00db      	lsls	r3, r3, #3
 8017332:	440b      	add	r3, r1
 8017334:	3314      	adds	r3, #20
 8017336:	781b      	ldrb	r3, [r3, #0]
 8017338:	2b02      	cmp	r3, #2
 801733a:	d153      	bne.n	80173e4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801733c:	79fa      	ldrb	r2, [r7, #7]
 801733e:	4936      	ldr	r1, [pc, #216]	; (8017418 <etharp_output_to_arp_index+0x124>)
 8017340:	4613      	mov	r3, r2
 8017342:	005b      	lsls	r3, r3, #1
 8017344:	4413      	add	r3, r2
 8017346:	00db      	lsls	r3, r3, #3
 8017348:	440b      	add	r3, r1
 801734a:	3312      	adds	r3, #18
 801734c:	881b      	ldrh	r3, [r3, #0]
 801734e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017352:	d919      	bls.n	8017388 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017354:	79fa      	ldrb	r2, [r7, #7]
 8017356:	4613      	mov	r3, r2
 8017358:	005b      	lsls	r3, r3, #1
 801735a:	4413      	add	r3, r2
 801735c:	00db      	lsls	r3, r3, #3
 801735e:	4a2e      	ldr	r2, [pc, #184]	; (8017418 <etharp_output_to_arp_index+0x124>)
 8017360:	4413      	add	r3, r2
 8017362:	3304      	adds	r3, #4
 8017364:	4619      	mov	r1, r3
 8017366:	68f8      	ldr	r0, [r7, #12]
 8017368:	f000 fb4c 	bl	8017a04 <etharp_request>
 801736c:	4603      	mov	r3, r0
 801736e:	2b00      	cmp	r3, #0
 8017370:	d138      	bne.n	80173e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017372:	79fa      	ldrb	r2, [r7, #7]
 8017374:	4928      	ldr	r1, [pc, #160]	; (8017418 <etharp_output_to_arp_index+0x124>)
 8017376:	4613      	mov	r3, r2
 8017378:	005b      	lsls	r3, r3, #1
 801737a:	4413      	add	r3, r2
 801737c:	00db      	lsls	r3, r3, #3
 801737e:	440b      	add	r3, r1
 8017380:	3314      	adds	r3, #20
 8017382:	2203      	movs	r2, #3
 8017384:	701a      	strb	r2, [r3, #0]
 8017386:	e02d      	b.n	80173e4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017388:	79fa      	ldrb	r2, [r7, #7]
 801738a:	4923      	ldr	r1, [pc, #140]	; (8017418 <etharp_output_to_arp_index+0x124>)
 801738c:	4613      	mov	r3, r2
 801738e:	005b      	lsls	r3, r3, #1
 8017390:	4413      	add	r3, r2
 8017392:	00db      	lsls	r3, r3, #3
 8017394:	440b      	add	r3, r1
 8017396:	3312      	adds	r3, #18
 8017398:	881b      	ldrh	r3, [r3, #0]
 801739a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801739e:	d321      	bcc.n	80173e4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80173a0:	79fa      	ldrb	r2, [r7, #7]
 80173a2:	4613      	mov	r3, r2
 80173a4:	005b      	lsls	r3, r3, #1
 80173a6:	4413      	add	r3, r2
 80173a8:	00db      	lsls	r3, r3, #3
 80173aa:	4a1b      	ldr	r2, [pc, #108]	; (8017418 <etharp_output_to_arp_index+0x124>)
 80173ac:	4413      	add	r3, r2
 80173ae:	1d19      	adds	r1, r3, #4
 80173b0:	79fa      	ldrb	r2, [r7, #7]
 80173b2:	4613      	mov	r3, r2
 80173b4:	005b      	lsls	r3, r3, #1
 80173b6:	4413      	add	r3, r2
 80173b8:	00db      	lsls	r3, r3, #3
 80173ba:	3308      	adds	r3, #8
 80173bc:	4a16      	ldr	r2, [pc, #88]	; (8017418 <etharp_output_to_arp_index+0x124>)
 80173be:	4413      	add	r3, r2
 80173c0:	3304      	adds	r3, #4
 80173c2:	461a      	mov	r2, r3
 80173c4:	68f8      	ldr	r0, [r7, #12]
 80173c6:	f000 fafb 	bl	80179c0 <etharp_request_dst>
 80173ca:	4603      	mov	r3, r0
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d109      	bne.n	80173e4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80173d0:	79fa      	ldrb	r2, [r7, #7]
 80173d2:	4911      	ldr	r1, [pc, #68]	; (8017418 <etharp_output_to_arp_index+0x124>)
 80173d4:	4613      	mov	r3, r2
 80173d6:	005b      	lsls	r3, r3, #1
 80173d8:	4413      	add	r3, r2
 80173da:	00db      	lsls	r3, r3, #3
 80173dc:	440b      	add	r3, r1
 80173de:	3314      	adds	r3, #20
 80173e0:	2203      	movs	r2, #3
 80173e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80173ea:	79fa      	ldrb	r2, [r7, #7]
 80173ec:	4613      	mov	r3, r2
 80173ee:	005b      	lsls	r3, r3, #1
 80173f0:	4413      	add	r3, r2
 80173f2:	00db      	lsls	r3, r3, #3
 80173f4:	3308      	adds	r3, #8
 80173f6:	4a08      	ldr	r2, [pc, #32]	; (8017418 <etharp_output_to_arp_index+0x124>)
 80173f8:	4413      	add	r3, r2
 80173fa:	1d1a      	adds	r2, r3, #4
 80173fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017400:	9300      	str	r3, [sp, #0]
 8017402:	4613      	mov	r3, r2
 8017404:	460a      	mov	r2, r1
 8017406:	68b9      	ldr	r1, [r7, #8]
 8017408:	68f8      	ldr	r0, [r7, #12]
 801740a:	f001 fe51 	bl	80190b0 <ethernet_output>
 801740e:	4603      	mov	r3, r0
}
 8017410:	4618      	mov	r0, r3
 8017412:	3710      	adds	r7, #16
 8017414:	46bd      	mov	sp, r7
 8017416:	bd80      	pop	{r7, pc}
 8017418:	200102a4 	.word	0x200102a4
 801741c:	0801dd58 	.word	0x0801dd58
 8017420:	0801dec8 	.word	0x0801dec8
 8017424:	0801ddd0 	.word	0x0801ddd0

08017428 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017428:	b580      	push	{r7, lr}
 801742a:	b08a      	sub	sp, #40	; 0x28
 801742c:	af02      	add	r7, sp, #8
 801742e:	60f8      	str	r0, [r7, #12]
 8017430:	60b9      	str	r1, [r7, #8]
 8017432:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d106      	bne.n	801744c <etharp_output+0x24>
 801743e:	4b73      	ldr	r3, [pc, #460]	; (801760c <etharp_output+0x1e4>)
 8017440:	f240 321e 	movw	r2, #798	; 0x31e
 8017444:	4972      	ldr	r1, [pc, #456]	; (8017610 <etharp_output+0x1e8>)
 8017446:	4873      	ldr	r0, [pc, #460]	; (8017614 <etharp_output+0x1ec>)
 8017448:	f002 f890 	bl	801956c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801744c:	68bb      	ldr	r3, [r7, #8]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d106      	bne.n	8017460 <etharp_output+0x38>
 8017452:	4b6e      	ldr	r3, [pc, #440]	; (801760c <etharp_output+0x1e4>)
 8017454:	f240 321f 	movw	r2, #799	; 0x31f
 8017458:	496f      	ldr	r1, [pc, #444]	; (8017618 <etharp_output+0x1f0>)
 801745a:	486e      	ldr	r0, [pc, #440]	; (8017614 <etharp_output+0x1ec>)
 801745c:	f002 f886 	bl	801956c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d106      	bne.n	8017474 <etharp_output+0x4c>
 8017466:	4b69      	ldr	r3, [pc, #420]	; (801760c <etharp_output+0x1e4>)
 8017468:	f44f 7248 	mov.w	r2, #800	; 0x320
 801746c:	496b      	ldr	r1, [pc, #428]	; (801761c <etharp_output+0x1f4>)
 801746e:	4869      	ldr	r0, [pc, #420]	; (8017614 <etharp_output+0x1ec>)
 8017470:	f002 f87c 	bl	801956c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	68f9      	ldr	r1, [r7, #12]
 801747a:	4618      	mov	r0, r3
 801747c:	f000 ff14 	bl	80182a8 <ip4_addr_isbroadcast_u32>
 8017480:	4603      	mov	r3, r0
 8017482:	2b00      	cmp	r3, #0
 8017484:	d002      	beq.n	801748c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017486:	4b66      	ldr	r3, [pc, #408]	; (8017620 <etharp_output+0x1f8>)
 8017488:	61fb      	str	r3, [r7, #28]
 801748a:	e0af      	b.n	80175ec <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	681b      	ldr	r3, [r3, #0]
 8017490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017494:	2be0      	cmp	r3, #224	; 0xe0
 8017496:	d118      	bne.n	80174ca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017498:	2301      	movs	r3, #1
 801749a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801749c:	2300      	movs	r3, #0
 801749e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80174a0:	235e      	movs	r3, #94	; 0x5e
 80174a2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	3301      	adds	r3, #1
 80174a8:	781b      	ldrb	r3, [r3, #0]
 80174aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80174ae:	b2db      	uxtb	r3, r3
 80174b0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	3302      	adds	r3, #2
 80174b6:	781b      	ldrb	r3, [r3, #0]
 80174b8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	3303      	adds	r3, #3
 80174be:	781b      	ldrb	r3, [r3, #0]
 80174c0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80174c2:	f107 0310 	add.w	r3, r7, #16
 80174c6:	61fb      	str	r3, [r7, #28]
 80174c8:	e090      	b.n	80175ec <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	681a      	ldr	r2, [r3, #0]
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	3304      	adds	r3, #4
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	405a      	eors	r2, r3
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	3308      	adds	r3, #8
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	4013      	ands	r3, r2
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d012      	beq.n	8017508 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80174e8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80174ec:	4293      	cmp	r3, r2
 80174ee:	d00b      	beq.n	8017508 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	330c      	adds	r3, #12
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d003      	beq.n	8017502 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	330c      	adds	r3, #12
 80174fe:	61bb      	str	r3, [r7, #24]
 8017500:	e002      	b.n	8017508 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017502:	f06f 0303 	mvn.w	r3, #3
 8017506:	e07d      	b.n	8017604 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017508:	4b46      	ldr	r3, [pc, #280]	; (8017624 <etharp_output+0x1fc>)
 801750a:	781b      	ldrb	r3, [r3, #0]
 801750c:	4619      	mov	r1, r3
 801750e:	4a46      	ldr	r2, [pc, #280]	; (8017628 <etharp_output+0x200>)
 8017510:	460b      	mov	r3, r1
 8017512:	005b      	lsls	r3, r3, #1
 8017514:	440b      	add	r3, r1
 8017516:	00db      	lsls	r3, r3, #3
 8017518:	4413      	add	r3, r2
 801751a:	3314      	adds	r3, #20
 801751c:	781b      	ldrb	r3, [r3, #0]
 801751e:	2b01      	cmp	r3, #1
 8017520:	d925      	bls.n	801756e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017522:	4b40      	ldr	r3, [pc, #256]	; (8017624 <etharp_output+0x1fc>)
 8017524:	781b      	ldrb	r3, [r3, #0]
 8017526:	4619      	mov	r1, r3
 8017528:	4a3f      	ldr	r2, [pc, #252]	; (8017628 <etharp_output+0x200>)
 801752a:	460b      	mov	r3, r1
 801752c:	005b      	lsls	r3, r3, #1
 801752e:	440b      	add	r3, r1
 8017530:	00db      	lsls	r3, r3, #3
 8017532:	4413      	add	r3, r2
 8017534:	3308      	adds	r3, #8
 8017536:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017538:	68fa      	ldr	r2, [r7, #12]
 801753a:	429a      	cmp	r2, r3
 801753c:	d117      	bne.n	801756e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801753e:	69bb      	ldr	r3, [r7, #24]
 8017540:	681a      	ldr	r2, [r3, #0]
 8017542:	4b38      	ldr	r3, [pc, #224]	; (8017624 <etharp_output+0x1fc>)
 8017544:	781b      	ldrb	r3, [r3, #0]
 8017546:	4618      	mov	r0, r3
 8017548:	4937      	ldr	r1, [pc, #220]	; (8017628 <etharp_output+0x200>)
 801754a:	4603      	mov	r3, r0
 801754c:	005b      	lsls	r3, r3, #1
 801754e:	4403      	add	r3, r0
 8017550:	00db      	lsls	r3, r3, #3
 8017552:	440b      	add	r3, r1
 8017554:	3304      	adds	r3, #4
 8017556:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017558:	429a      	cmp	r2, r3
 801755a:	d108      	bne.n	801756e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801755c:	4b31      	ldr	r3, [pc, #196]	; (8017624 <etharp_output+0x1fc>)
 801755e:	781b      	ldrb	r3, [r3, #0]
 8017560:	461a      	mov	r2, r3
 8017562:	68b9      	ldr	r1, [r7, #8]
 8017564:	68f8      	ldr	r0, [r7, #12]
 8017566:	f7ff fec5 	bl	80172f4 <etharp_output_to_arp_index>
 801756a:	4603      	mov	r3, r0
 801756c:	e04a      	b.n	8017604 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801756e:	2300      	movs	r3, #0
 8017570:	75fb      	strb	r3, [r7, #23]
 8017572:	e031      	b.n	80175d8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017574:	7dfa      	ldrb	r2, [r7, #23]
 8017576:	492c      	ldr	r1, [pc, #176]	; (8017628 <etharp_output+0x200>)
 8017578:	4613      	mov	r3, r2
 801757a:	005b      	lsls	r3, r3, #1
 801757c:	4413      	add	r3, r2
 801757e:	00db      	lsls	r3, r3, #3
 8017580:	440b      	add	r3, r1
 8017582:	3314      	adds	r3, #20
 8017584:	781b      	ldrb	r3, [r3, #0]
 8017586:	2b01      	cmp	r3, #1
 8017588:	d923      	bls.n	80175d2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801758a:	7dfa      	ldrb	r2, [r7, #23]
 801758c:	4926      	ldr	r1, [pc, #152]	; (8017628 <etharp_output+0x200>)
 801758e:	4613      	mov	r3, r2
 8017590:	005b      	lsls	r3, r3, #1
 8017592:	4413      	add	r3, r2
 8017594:	00db      	lsls	r3, r3, #3
 8017596:	440b      	add	r3, r1
 8017598:	3308      	adds	r3, #8
 801759a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801759c:	68fa      	ldr	r2, [r7, #12]
 801759e:	429a      	cmp	r2, r3
 80175a0:	d117      	bne.n	80175d2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80175a2:	69bb      	ldr	r3, [r7, #24]
 80175a4:	6819      	ldr	r1, [r3, #0]
 80175a6:	7dfa      	ldrb	r2, [r7, #23]
 80175a8:	481f      	ldr	r0, [pc, #124]	; (8017628 <etharp_output+0x200>)
 80175aa:	4613      	mov	r3, r2
 80175ac:	005b      	lsls	r3, r3, #1
 80175ae:	4413      	add	r3, r2
 80175b0:	00db      	lsls	r3, r3, #3
 80175b2:	4403      	add	r3, r0
 80175b4:	3304      	adds	r3, #4
 80175b6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80175b8:	4299      	cmp	r1, r3
 80175ba:	d10a      	bne.n	80175d2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80175bc:	4a19      	ldr	r2, [pc, #100]	; (8017624 <etharp_output+0x1fc>)
 80175be:	7dfb      	ldrb	r3, [r7, #23]
 80175c0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80175c2:	7dfb      	ldrb	r3, [r7, #23]
 80175c4:	461a      	mov	r2, r3
 80175c6:	68b9      	ldr	r1, [r7, #8]
 80175c8:	68f8      	ldr	r0, [r7, #12]
 80175ca:	f7ff fe93 	bl	80172f4 <etharp_output_to_arp_index>
 80175ce:	4603      	mov	r3, r0
 80175d0:	e018      	b.n	8017604 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80175d2:	7dfb      	ldrb	r3, [r7, #23]
 80175d4:	3301      	adds	r3, #1
 80175d6:	75fb      	strb	r3, [r7, #23]
 80175d8:	7dfb      	ldrb	r3, [r7, #23]
 80175da:	2b09      	cmp	r3, #9
 80175dc:	d9ca      	bls.n	8017574 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80175de:	68ba      	ldr	r2, [r7, #8]
 80175e0:	69b9      	ldr	r1, [r7, #24]
 80175e2:	68f8      	ldr	r0, [r7, #12]
 80175e4:	f000 f822 	bl	801762c <etharp_query>
 80175e8:	4603      	mov	r3, r0
 80175ea:	e00b      	b.n	8017604 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80175f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80175f6:	9300      	str	r3, [sp, #0]
 80175f8:	69fb      	ldr	r3, [r7, #28]
 80175fa:	68b9      	ldr	r1, [r7, #8]
 80175fc:	68f8      	ldr	r0, [r7, #12]
 80175fe:	f001 fd57 	bl	80190b0 <ethernet_output>
 8017602:	4603      	mov	r3, r0
}
 8017604:	4618      	mov	r0, r3
 8017606:	3720      	adds	r7, #32
 8017608:	46bd      	mov	sp, r7
 801760a:	bd80      	pop	{r7, pc}
 801760c:	0801dd58 	.word	0x0801dd58
 8017610:	0801dea8 	.word	0x0801dea8
 8017614:	0801ddd0 	.word	0x0801ddd0
 8017618:	0801def8 	.word	0x0801def8
 801761c:	0801de98 	.word	0x0801de98
 8017620:	08023078 	.word	0x08023078
 8017624:	20010394 	.word	0x20010394
 8017628:	200102a4 	.word	0x200102a4

0801762c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b08c      	sub	sp, #48	; 0x30
 8017630:	af02      	add	r7, sp, #8
 8017632:	60f8      	str	r0, [r7, #12]
 8017634:	60b9      	str	r1, [r7, #8]
 8017636:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	332a      	adds	r3, #42	; 0x2a
 801763c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801763e:	23ff      	movs	r3, #255	; 0xff
 8017640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017644:	2300      	movs	r3, #0
 8017646:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017648:	68bb      	ldr	r3, [r7, #8]
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	68f9      	ldr	r1, [r7, #12]
 801764e:	4618      	mov	r0, r3
 8017650:	f000 fe2a 	bl	80182a8 <ip4_addr_isbroadcast_u32>
 8017654:	4603      	mov	r3, r0
 8017656:	2b00      	cmp	r3, #0
 8017658:	d10c      	bne.n	8017674 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801765a:	68bb      	ldr	r3, [r7, #8]
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017662:	2be0      	cmp	r3, #224	; 0xe0
 8017664:	d006      	beq.n	8017674 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017666:	68bb      	ldr	r3, [r7, #8]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d003      	beq.n	8017674 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801766c:	68bb      	ldr	r3, [r7, #8]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d102      	bne.n	801767a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017674:	f06f 030f 	mvn.w	r3, #15
 8017678:	e102      	b.n	8017880 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801767a:	68fa      	ldr	r2, [r7, #12]
 801767c:	2101      	movs	r1, #1
 801767e:	68b8      	ldr	r0, [r7, #8]
 8017680:	f7ff fb5c 	bl	8016d3c <etharp_find_entry>
 8017684:	4603      	mov	r3, r0
 8017686:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017688:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801768c:	2b00      	cmp	r3, #0
 801768e:	da02      	bge.n	8017696 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017690:	8a7b      	ldrh	r3, [r7, #18]
 8017692:	b25b      	sxtb	r3, r3
 8017694:	e0f4      	b.n	8017880 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017696:	8a7b      	ldrh	r3, [r7, #18]
 8017698:	2b7e      	cmp	r3, #126	; 0x7e
 801769a:	d906      	bls.n	80176aa <etharp_query+0x7e>
 801769c:	4b7a      	ldr	r3, [pc, #488]	; (8017888 <etharp_query+0x25c>)
 801769e:	f240 32c1 	movw	r2, #961	; 0x3c1
 80176a2:	497a      	ldr	r1, [pc, #488]	; (801788c <etharp_query+0x260>)
 80176a4:	487a      	ldr	r0, [pc, #488]	; (8017890 <etharp_query+0x264>)
 80176a6:	f001 ff61 	bl	801956c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80176aa:	8a7b      	ldrh	r3, [r7, #18]
 80176ac:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80176ae:	7c7a      	ldrb	r2, [r7, #17]
 80176b0:	4978      	ldr	r1, [pc, #480]	; (8017894 <etharp_query+0x268>)
 80176b2:	4613      	mov	r3, r2
 80176b4:	005b      	lsls	r3, r3, #1
 80176b6:	4413      	add	r3, r2
 80176b8:	00db      	lsls	r3, r3, #3
 80176ba:	440b      	add	r3, r1
 80176bc:	3314      	adds	r3, #20
 80176be:	781b      	ldrb	r3, [r3, #0]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d115      	bne.n	80176f0 <etharp_query+0xc4>
    is_new_entry = 1;
 80176c4:	2301      	movs	r3, #1
 80176c6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80176c8:	7c7a      	ldrb	r2, [r7, #17]
 80176ca:	4972      	ldr	r1, [pc, #456]	; (8017894 <etharp_query+0x268>)
 80176cc:	4613      	mov	r3, r2
 80176ce:	005b      	lsls	r3, r3, #1
 80176d0:	4413      	add	r3, r2
 80176d2:	00db      	lsls	r3, r3, #3
 80176d4:	440b      	add	r3, r1
 80176d6:	3314      	adds	r3, #20
 80176d8:	2201      	movs	r2, #1
 80176da:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80176dc:	7c7a      	ldrb	r2, [r7, #17]
 80176de:	496d      	ldr	r1, [pc, #436]	; (8017894 <etharp_query+0x268>)
 80176e0:	4613      	mov	r3, r2
 80176e2:	005b      	lsls	r3, r3, #1
 80176e4:	4413      	add	r3, r2
 80176e6:	00db      	lsls	r3, r3, #3
 80176e8:	440b      	add	r3, r1
 80176ea:	3308      	adds	r3, #8
 80176ec:	68fa      	ldr	r2, [r7, #12]
 80176ee:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80176f0:	7c7a      	ldrb	r2, [r7, #17]
 80176f2:	4968      	ldr	r1, [pc, #416]	; (8017894 <etharp_query+0x268>)
 80176f4:	4613      	mov	r3, r2
 80176f6:	005b      	lsls	r3, r3, #1
 80176f8:	4413      	add	r3, r2
 80176fa:	00db      	lsls	r3, r3, #3
 80176fc:	440b      	add	r3, r1
 80176fe:	3314      	adds	r3, #20
 8017700:	781b      	ldrb	r3, [r3, #0]
 8017702:	2b01      	cmp	r3, #1
 8017704:	d011      	beq.n	801772a <etharp_query+0xfe>
 8017706:	7c7a      	ldrb	r2, [r7, #17]
 8017708:	4962      	ldr	r1, [pc, #392]	; (8017894 <etharp_query+0x268>)
 801770a:	4613      	mov	r3, r2
 801770c:	005b      	lsls	r3, r3, #1
 801770e:	4413      	add	r3, r2
 8017710:	00db      	lsls	r3, r3, #3
 8017712:	440b      	add	r3, r1
 8017714:	3314      	adds	r3, #20
 8017716:	781b      	ldrb	r3, [r3, #0]
 8017718:	2b01      	cmp	r3, #1
 801771a:	d806      	bhi.n	801772a <etharp_query+0xfe>
 801771c:	4b5a      	ldr	r3, [pc, #360]	; (8017888 <etharp_query+0x25c>)
 801771e:	f240 32cf 	movw	r2, #975	; 0x3cf
 8017722:	495d      	ldr	r1, [pc, #372]	; (8017898 <etharp_query+0x26c>)
 8017724:	485a      	ldr	r0, [pc, #360]	; (8017890 <etharp_query+0x264>)
 8017726:	f001 ff21 	bl	801956c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801772a:	6a3b      	ldr	r3, [r7, #32]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d102      	bne.n	8017736 <etharp_query+0x10a>
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d10c      	bne.n	8017750 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017736:	68b9      	ldr	r1, [r7, #8]
 8017738:	68f8      	ldr	r0, [r7, #12]
 801773a:	f000 f963 	bl	8017a04 <etharp_request>
 801773e:	4603      	mov	r3, r0
 8017740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d102      	bne.n	8017750 <etharp_query+0x124>
      return result;
 801774a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801774e:	e097      	b.n	8017880 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d106      	bne.n	8017764 <etharp_query+0x138>
 8017756:	4b4c      	ldr	r3, [pc, #304]	; (8017888 <etharp_query+0x25c>)
 8017758:	f240 32e1 	movw	r2, #993	; 0x3e1
 801775c:	494f      	ldr	r1, [pc, #316]	; (801789c <etharp_query+0x270>)
 801775e:	484c      	ldr	r0, [pc, #304]	; (8017890 <etharp_query+0x264>)
 8017760:	f001 ff04 	bl	801956c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017764:	7c7a      	ldrb	r2, [r7, #17]
 8017766:	494b      	ldr	r1, [pc, #300]	; (8017894 <etharp_query+0x268>)
 8017768:	4613      	mov	r3, r2
 801776a:	005b      	lsls	r3, r3, #1
 801776c:	4413      	add	r3, r2
 801776e:	00db      	lsls	r3, r3, #3
 8017770:	440b      	add	r3, r1
 8017772:	3314      	adds	r3, #20
 8017774:	781b      	ldrb	r3, [r3, #0]
 8017776:	2b01      	cmp	r3, #1
 8017778:	d918      	bls.n	80177ac <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801777a:	4a49      	ldr	r2, [pc, #292]	; (80178a0 <etharp_query+0x274>)
 801777c:	7c7b      	ldrb	r3, [r7, #17]
 801777e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017780:	7c7a      	ldrb	r2, [r7, #17]
 8017782:	4613      	mov	r3, r2
 8017784:	005b      	lsls	r3, r3, #1
 8017786:	4413      	add	r3, r2
 8017788:	00db      	lsls	r3, r3, #3
 801778a:	3308      	adds	r3, #8
 801778c:	4a41      	ldr	r2, [pc, #260]	; (8017894 <etharp_query+0x268>)
 801778e:	4413      	add	r3, r2
 8017790:	1d1a      	adds	r2, r3, #4
 8017792:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017796:	9300      	str	r3, [sp, #0]
 8017798:	4613      	mov	r3, r2
 801779a:	697a      	ldr	r2, [r7, #20]
 801779c:	6879      	ldr	r1, [r7, #4]
 801779e:	68f8      	ldr	r0, [r7, #12]
 80177a0:	f001 fc86 	bl	80190b0 <ethernet_output>
 80177a4:	4603      	mov	r3, r0
 80177a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80177aa:	e067      	b.n	801787c <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80177ac:	7c7a      	ldrb	r2, [r7, #17]
 80177ae:	4939      	ldr	r1, [pc, #228]	; (8017894 <etharp_query+0x268>)
 80177b0:	4613      	mov	r3, r2
 80177b2:	005b      	lsls	r3, r3, #1
 80177b4:	4413      	add	r3, r2
 80177b6:	00db      	lsls	r3, r3, #3
 80177b8:	440b      	add	r3, r1
 80177ba:	3314      	adds	r3, #20
 80177bc:	781b      	ldrb	r3, [r3, #0]
 80177be:	2b01      	cmp	r3, #1
 80177c0:	d15c      	bne.n	801787c <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80177c2:	2300      	movs	r3, #0
 80177c4:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	61fb      	str	r3, [r7, #28]
    while (p) {
 80177ca:	e01c      	b.n	8017806 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80177cc:	69fb      	ldr	r3, [r7, #28]
 80177ce:	895a      	ldrh	r2, [r3, #10]
 80177d0:	69fb      	ldr	r3, [r7, #28]
 80177d2:	891b      	ldrh	r3, [r3, #8]
 80177d4:	429a      	cmp	r2, r3
 80177d6:	d10a      	bne.n	80177ee <etharp_query+0x1c2>
 80177d8:	69fb      	ldr	r3, [r7, #28]
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d006      	beq.n	80177ee <etharp_query+0x1c2>
 80177e0:	4b29      	ldr	r3, [pc, #164]	; (8017888 <etharp_query+0x25c>)
 80177e2:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80177e6:	492f      	ldr	r1, [pc, #188]	; (80178a4 <etharp_query+0x278>)
 80177e8:	4829      	ldr	r0, [pc, #164]	; (8017890 <etharp_query+0x264>)
 80177ea:	f001 febf 	bl	801956c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80177ee:	69fb      	ldr	r3, [r7, #28]
 80177f0:	7b1b      	ldrb	r3, [r3, #12]
 80177f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d002      	beq.n	8017800 <etharp_query+0x1d4>
        copy_needed = 1;
 80177fa:	2301      	movs	r3, #1
 80177fc:	61bb      	str	r3, [r7, #24]
        break;
 80177fe:	e005      	b.n	801780c <etharp_query+0x1e0>
      }
      p = p->next;
 8017800:	69fb      	ldr	r3, [r7, #28]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017806:	69fb      	ldr	r3, [r7, #28]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d1df      	bne.n	80177cc <etharp_query+0x1a0>
    }
    if (copy_needed) {
 801780c:	69bb      	ldr	r3, [r7, #24]
 801780e:	2b00      	cmp	r3, #0
 8017810:	d007      	beq.n	8017822 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017812:	687a      	ldr	r2, [r7, #4]
 8017814:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017818:	200e      	movs	r0, #14
 801781a:	f7f6 fbe1 	bl	800dfe0 <pbuf_clone>
 801781e:	61f8      	str	r0, [r7, #28]
 8017820:	e004      	b.n	801782c <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017826:	69f8      	ldr	r0, [r7, #28]
 8017828:	f7f6 fa08 	bl	800dc3c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801782c:	69fb      	ldr	r3, [r7, #28]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d021      	beq.n	8017876 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017832:	7c7a      	ldrb	r2, [r7, #17]
 8017834:	4917      	ldr	r1, [pc, #92]	; (8017894 <etharp_query+0x268>)
 8017836:	4613      	mov	r3, r2
 8017838:	005b      	lsls	r3, r3, #1
 801783a:	4413      	add	r3, r2
 801783c:	00db      	lsls	r3, r3, #3
 801783e:	440b      	add	r3, r1
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d00a      	beq.n	801785c <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017846:	7c7a      	ldrb	r2, [r7, #17]
 8017848:	4912      	ldr	r1, [pc, #72]	; (8017894 <etharp_query+0x268>)
 801784a:	4613      	mov	r3, r2
 801784c:	005b      	lsls	r3, r3, #1
 801784e:	4413      	add	r3, r2
 8017850:	00db      	lsls	r3, r3, #3
 8017852:	440b      	add	r3, r1
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	4618      	mov	r0, r3
 8017858:	f7f6 f94a 	bl	800daf0 <pbuf_free>
      }
      arp_table[i].q = p;
 801785c:	7c7a      	ldrb	r2, [r7, #17]
 801785e:	490d      	ldr	r1, [pc, #52]	; (8017894 <etharp_query+0x268>)
 8017860:	4613      	mov	r3, r2
 8017862:	005b      	lsls	r3, r3, #1
 8017864:	4413      	add	r3, r2
 8017866:	00db      	lsls	r3, r3, #3
 8017868:	440b      	add	r3, r1
 801786a:	69fa      	ldr	r2, [r7, #28]
 801786c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801786e:	2300      	movs	r3, #0
 8017870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017874:	e002      	b.n	801787c <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017876:	23ff      	movs	r3, #255	; 0xff
 8017878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801787c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017880:	4618      	mov	r0, r3
 8017882:	3728      	adds	r7, #40	; 0x28
 8017884:	46bd      	mov	sp, r7
 8017886:	bd80      	pop	{r7, pc}
 8017888:	0801dd58 	.word	0x0801dd58
 801788c:	0801df04 	.word	0x0801df04
 8017890:	0801ddd0 	.word	0x0801ddd0
 8017894:	200102a4 	.word	0x200102a4
 8017898:	0801df14 	.word	0x0801df14
 801789c:	0801def8 	.word	0x0801def8
 80178a0:	20010394 	.word	0x20010394
 80178a4:	0801df3c 	.word	0x0801df3c

080178a8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80178a8:	b580      	push	{r7, lr}
 80178aa:	b08a      	sub	sp, #40	; 0x28
 80178ac:	af02      	add	r7, sp, #8
 80178ae:	60f8      	str	r0, [r7, #12]
 80178b0:	60b9      	str	r1, [r7, #8]
 80178b2:	607a      	str	r2, [r7, #4]
 80178b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80178b6:	2300      	movs	r3, #0
 80178b8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d106      	bne.n	80178ce <etharp_raw+0x26>
 80178c0:	4b3a      	ldr	r3, [pc, #232]	; (80179ac <etharp_raw+0x104>)
 80178c2:	f240 4257 	movw	r2, #1111	; 0x457
 80178c6:	493a      	ldr	r1, [pc, #232]	; (80179b0 <etharp_raw+0x108>)
 80178c8:	483a      	ldr	r0, [pc, #232]	; (80179b4 <etharp_raw+0x10c>)
 80178ca:	f001 fe4f 	bl	801956c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80178ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80178d2:	211c      	movs	r1, #28
 80178d4:	200e      	movs	r0, #14
 80178d6:	f7f5 fe2b 	bl	800d530 <pbuf_alloc>
 80178da:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80178dc:	69bb      	ldr	r3, [r7, #24]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d102      	bne.n	80178e8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80178e2:	f04f 33ff 	mov.w	r3, #4294967295
 80178e6:	e05d      	b.n	80179a4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80178e8:	69bb      	ldr	r3, [r7, #24]
 80178ea:	895b      	ldrh	r3, [r3, #10]
 80178ec:	2b1b      	cmp	r3, #27
 80178ee:	d806      	bhi.n	80178fe <etharp_raw+0x56>
 80178f0:	4b2e      	ldr	r3, [pc, #184]	; (80179ac <etharp_raw+0x104>)
 80178f2:	f240 4263 	movw	r2, #1123	; 0x463
 80178f6:	4930      	ldr	r1, [pc, #192]	; (80179b8 <etharp_raw+0x110>)
 80178f8:	482e      	ldr	r0, [pc, #184]	; (80179b4 <etharp_raw+0x10c>)
 80178fa:	f001 fe37 	bl	801956c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80178fe:	69bb      	ldr	r3, [r7, #24]
 8017900:	685b      	ldr	r3, [r3, #4]
 8017902:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017904:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017906:	4618      	mov	r0, r3
 8017908:	f7f4 fd08 	bl	800c31c <lwip_htons>
 801790c:	4603      	mov	r3, r0
 801790e:	461a      	mov	r2, r3
 8017910:	697b      	ldr	r3, [r7, #20]
 8017912:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801791a:	2b06      	cmp	r3, #6
 801791c:	d006      	beq.n	801792c <etharp_raw+0x84>
 801791e:	4b23      	ldr	r3, [pc, #140]	; (80179ac <etharp_raw+0x104>)
 8017920:	f240 426a 	movw	r2, #1130	; 0x46a
 8017924:	4925      	ldr	r1, [pc, #148]	; (80179bc <etharp_raw+0x114>)
 8017926:	4823      	ldr	r0, [pc, #140]	; (80179b4 <etharp_raw+0x10c>)
 8017928:	f001 fe20 	bl	801956c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801792c:	697b      	ldr	r3, [r7, #20]
 801792e:	3308      	adds	r3, #8
 8017930:	2206      	movs	r2, #6
 8017932:	6839      	ldr	r1, [r7, #0]
 8017934:	4618      	mov	r0, r3
 8017936:	f001 fdec 	bl	8019512 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801793a:	697b      	ldr	r3, [r7, #20]
 801793c:	3312      	adds	r3, #18
 801793e:	2206      	movs	r2, #6
 8017940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017942:	4618      	mov	r0, r3
 8017944:	f001 fde5 	bl	8019512 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017948:	697b      	ldr	r3, [r7, #20]
 801794a:	330e      	adds	r3, #14
 801794c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801794e:	6812      	ldr	r2, [r2, #0]
 8017950:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017952:	697b      	ldr	r3, [r7, #20]
 8017954:	3318      	adds	r3, #24
 8017956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017958:	6812      	ldr	r2, [r2, #0]
 801795a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801795c:	697b      	ldr	r3, [r7, #20]
 801795e:	2200      	movs	r2, #0
 8017960:	701a      	strb	r2, [r3, #0]
 8017962:	2200      	movs	r2, #0
 8017964:	f042 0201 	orr.w	r2, r2, #1
 8017968:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801796a:	697b      	ldr	r3, [r7, #20]
 801796c:	2200      	movs	r2, #0
 801796e:	f042 0208 	orr.w	r2, r2, #8
 8017972:	709a      	strb	r2, [r3, #2]
 8017974:	2200      	movs	r2, #0
 8017976:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017978:	697b      	ldr	r3, [r7, #20]
 801797a:	2206      	movs	r2, #6
 801797c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801797e:	697b      	ldr	r3, [r7, #20]
 8017980:	2204      	movs	r2, #4
 8017982:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017984:	f640 0306 	movw	r3, #2054	; 0x806
 8017988:	9300      	str	r3, [sp, #0]
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	68ba      	ldr	r2, [r7, #8]
 801798e:	69b9      	ldr	r1, [r7, #24]
 8017990:	68f8      	ldr	r0, [r7, #12]
 8017992:	f001 fb8d 	bl	80190b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017996:	69b8      	ldr	r0, [r7, #24]
 8017998:	f7f6 f8aa 	bl	800daf0 <pbuf_free>
  p = NULL;
 801799c:	2300      	movs	r3, #0
 801799e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80179a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80179a4:	4618      	mov	r0, r3
 80179a6:	3720      	adds	r7, #32
 80179a8:	46bd      	mov	sp, r7
 80179aa:	bd80      	pop	{r7, pc}
 80179ac:	0801dd58 	.word	0x0801dd58
 80179b0:	0801dea8 	.word	0x0801dea8
 80179b4:	0801ddd0 	.word	0x0801ddd0
 80179b8:	0801df58 	.word	0x0801df58
 80179bc:	0801df8c 	.word	0x0801df8c

080179c0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b088      	sub	sp, #32
 80179c4:	af04      	add	r7, sp, #16
 80179c6:	60f8      	str	r0, [r7, #12]
 80179c8:	60b9      	str	r1, [r7, #8]
 80179ca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80179d2:	68fb      	ldr	r3, [r7, #12]
 80179d4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80179d8:	68fb      	ldr	r3, [r7, #12]
 80179da:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80179dc:	2201      	movs	r2, #1
 80179de:	9203      	str	r2, [sp, #12]
 80179e0:	68ba      	ldr	r2, [r7, #8]
 80179e2:	9202      	str	r2, [sp, #8]
 80179e4:	4a06      	ldr	r2, [pc, #24]	; (8017a00 <etharp_request_dst+0x40>)
 80179e6:	9201      	str	r2, [sp, #4]
 80179e8:	9300      	str	r3, [sp, #0]
 80179ea:	4603      	mov	r3, r0
 80179ec:	687a      	ldr	r2, [r7, #4]
 80179ee:	68f8      	ldr	r0, [r7, #12]
 80179f0:	f7ff ff5a 	bl	80178a8 <etharp_raw>
 80179f4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80179f6:	4618      	mov	r0, r3
 80179f8:	3710      	adds	r7, #16
 80179fa:	46bd      	mov	sp, r7
 80179fc:	bd80      	pop	{r7, pc}
 80179fe:	bf00      	nop
 8017a00:	08023080 	.word	0x08023080

08017a04 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b082      	sub	sp, #8
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
 8017a0c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017a0e:	4a05      	ldr	r2, [pc, #20]	; (8017a24 <etharp_request+0x20>)
 8017a10:	6839      	ldr	r1, [r7, #0]
 8017a12:	6878      	ldr	r0, [r7, #4]
 8017a14:	f7ff ffd4 	bl	80179c0 <etharp_request_dst>
 8017a18:	4603      	mov	r3, r0
}
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	3708      	adds	r7, #8
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bd80      	pop	{r7, pc}
 8017a22:	bf00      	nop
 8017a24:	08023078 	.word	0x08023078

08017a28 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b08e      	sub	sp, #56	; 0x38
 8017a2c:	af04      	add	r7, sp, #16
 8017a2e:	6078      	str	r0, [r7, #4]
 8017a30:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017a32:	4b79      	ldr	r3, [pc, #484]	; (8017c18 <icmp_input+0x1f0>)
 8017a34:	689b      	ldr	r3, [r3, #8]
 8017a36:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a3a:	781b      	ldrb	r3, [r3, #0]
 8017a3c:	f003 030f 	and.w	r3, r3, #15
 8017a40:	b2db      	uxtb	r3, r3
 8017a42:	009b      	lsls	r3, r3, #2
 8017a44:	b2db      	uxtb	r3, r3
 8017a46:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017a48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a4a:	2b13      	cmp	r3, #19
 8017a4c:	f240 80cd 	bls.w	8017bea <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	895b      	ldrh	r3, [r3, #10]
 8017a54:	2b03      	cmp	r3, #3
 8017a56:	f240 80ca 	bls.w	8017bee <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	685b      	ldr	r3, [r3, #4]
 8017a5e:	781b      	ldrb	r3, [r3, #0]
 8017a60:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017a64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	f000 80b7 	beq.w	8017bdc <icmp_input+0x1b4>
 8017a6e:	2b08      	cmp	r3, #8
 8017a70:	f040 80b7 	bne.w	8017be2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017a74:	4b69      	ldr	r3, [pc, #420]	; (8017c1c <icmp_input+0x1f4>)
 8017a76:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017a78:	4b67      	ldr	r3, [pc, #412]	; (8017c18 <icmp_input+0x1f0>)
 8017a7a:	695b      	ldr	r3, [r3, #20]
 8017a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017a80:	2be0      	cmp	r3, #224	; 0xe0
 8017a82:	f000 80bb 	beq.w	8017bfc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017a86:	4b64      	ldr	r3, [pc, #400]	; (8017c18 <icmp_input+0x1f0>)
 8017a88:	695a      	ldr	r2, [r3, #20]
 8017a8a:	4b63      	ldr	r3, [pc, #396]	; (8017c18 <icmp_input+0x1f0>)
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	4619      	mov	r1, r3
 8017a90:	4610      	mov	r0, r2
 8017a92:	f000 fc09 	bl	80182a8 <ip4_addr_isbroadcast_u32>
 8017a96:	4603      	mov	r3, r0
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	f040 80b1 	bne.w	8017c00 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	891b      	ldrh	r3, [r3, #8]
 8017aa2:	2b07      	cmp	r3, #7
 8017aa4:	f240 80a5 	bls.w	8017bf2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017aa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017aaa:	330e      	adds	r3, #14
 8017aac:	4619      	mov	r1, r3
 8017aae:	6878      	ldr	r0, [r7, #4]
 8017ab0:	f7f5 ff88 	bl	800d9c4 <pbuf_add_header>
 8017ab4:	4603      	mov	r3, r0
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d04b      	beq.n	8017b52 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	891a      	ldrh	r2, [r3, #8]
 8017abe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ac0:	4413      	add	r3, r2
 8017ac2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	891b      	ldrh	r3, [r3, #8]
 8017ac8:	8b7a      	ldrh	r2, [r7, #26]
 8017aca:	429a      	cmp	r2, r3
 8017acc:	f0c0 809a 	bcc.w	8017c04 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017ad0:	8b7b      	ldrh	r3, [r7, #26]
 8017ad2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017ad6:	4619      	mov	r1, r3
 8017ad8:	200e      	movs	r0, #14
 8017ada:	f7f5 fd29 	bl	800d530 <pbuf_alloc>
 8017ade:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017ae0:	697b      	ldr	r3, [r7, #20]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	f000 8090 	beq.w	8017c08 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017ae8:	697b      	ldr	r3, [r7, #20]
 8017aea:	895b      	ldrh	r3, [r3, #10]
 8017aec:	461a      	mov	r2, r3
 8017aee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017af0:	3308      	adds	r3, #8
 8017af2:	429a      	cmp	r2, r3
 8017af4:	d203      	bcs.n	8017afe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017af6:	6978      	ldr	r0, [r7, #20]
 8017af8:	f7f5 fffa 	bl	800daf0 <pbuf_free>
          goto icmperr;
 8017afc:	e085      	b.n	8017c0a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017afe:	697b      	ldr	r3, [r7, #20]
 8017b00:	685b      	ldr	r3, [r3, #4]
 8017b02:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017b06:	4618      	mov	r0, r3
 8017b08:	f001 fd03 	bl	8019512 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017b0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b0e:	4619      	mov	r1, r3
 8017b10:	6978      	ldr	r0, [r7, #20]
 8017b12:	f7f5 ff67 	bl	800d9e4 <pbuf_remove_header>
 8017b16:	4603      	mov	r3, r0
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d009      	beq.n	8017b30 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017b1c:	4b40      	ldr	r3, [pc, #256]	; (8017c20 <icmp_input+0x1f8>)
 8017b1e:	22b6      	movs	r2, #182	; 0xb6
 8017b20:	4940      	ldr	r1, [pc, #256]	; (8017c24 <icmp_input+0x1fc>)
 8017b22:	4841      	ldr	r0, [pc, #260]	; (8017c28 <icmp_input+0x200>)
 8017b24:	f001 fd22 	bl	801956c <iprintf>
          pbuf_free(r);
 8017b28:	6978      	ldr	r0, [r7, #20]
 8017b2a:	f7f5 ffe1 	bl	800daf0 <pbuf_free>
          goto icmperr;
 8017b2e:	e06c      	b.n	8017c0a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017b30:	6879      	ldr	r1, [r7, #4]
 8017b32:	6978      	ldr	r0, [r7, #20]
 8017b34:	f7f6 f910 	bl	800dd58 <pbuf_copy>
 8017b38:	4603      	mov	r3, r0
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d003      	beq.n	8017b46 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017b3e:	6978      	ldr	r0, [r7, #20]
 8017b40:	f7f5 ffd6 	bl	800daf0 <pbuf_free>
          goto icmperr;
 8017b44:	e061      	b.n	8017c0a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017b46:	6878      	ldr	r0, [r7, #4]
 8017b48:	f7f5 ffd2 	bl	800daf0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017b4c:	697b      	ldr	r3, [r7, #20]
 8017b4e:	607b      	str	r3, [r7, #4]
 8017b50:	e00f      	b.n	8017b72 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017b52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b54:	330e      	adds	r3, #14
 8017b56:	4619      	mov	r1, r3
 8017b58:	6878      	ldr	r0, [r7, #4]
 8017b5a:	f7f5 ff43 	bl	800d9e4 <pbuf_remove_header>
 8017b5e:	4603      	mov	r3, r0
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d006      	beq.n	8017b72 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017b64:	4b2e      	ldr	r3, [pc, #184]	; (8017c20 <icmp_input+0x1f8>)
 8017b66:	22c7      	movs	r2, #199	; 0xc7
 8017b68:	4930      	ldr	r1, [pc, #192]	; (8017c2c <icmp_input+0x204>)
 8017b6a:	482f      	ldr	r0, [pc, #188]	; (8017c28 <icmp_input+0x200>)
 8017b6c:	f001 fcfe 	bl	801956c <iprintf>
          goto icmperr;
 8017b70:	e04b      	b.n	8017c0a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	685b      	ldr	r3, [r3, #4]
 8017b76:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017b78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017b7a:	4619      	mov	r1, r3
 8017b7c:	6878      	ldr	r0, [r7, #4]
 8017b7e:	f7f5 ff21 	bl	800d9c4 <pbuf_add_header>
 8017b82:	4603      	mov	r3, r0
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d12b      	bne.n	8017be0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	685b      	ldr	r3, [r3, #4]
 8017b8c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017b8e:	69fb      	ldr	r3, [r7, #28]
 8017b90:	681a      	ldr	r2, [r3, #0]
 8017b92:	68fb      	ldr	r3, [r7, #12]
 8017b94:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017b96:	4b20      	ldr	r3, [pc, #128]	; (8017c18 <icmp_input+0x1f0>)
 8017b98:	691a      	ldr	r2, [r3, #16]
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017b9e:	693b      	ldr	r3, [r7, #16]
 8017ba0:	2200      	movs	r2, #0
 8017ba2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017ba4:	693b      	ldr	r3, [r7, #16]
 8017ba6:	2200      	movs	r2, #0
 8017ba8:	709a      	strb	r2, [r3, #2]
 8017baa:	2200      	movs	r2, #0
 8017bac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	22ff      	movs	r2, #255	; 0xff
 8017bb2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	729a      	strb	r2, [r3, #10]
 8017bba:	2200      	movs	r2, #0
 8017bbc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017bbe:	683b      	ldr	r3, [r7, #0]
 8017bc0:	9302      	str	r3, [sp, #8]
 8017bc2:	2301      	movs	r3, #1
 8017bc4:	9301      	str	r3, [sp, #4]
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	9300      	str	r3, [sp, #0]
 8017bca:	23ff      	movs	r3, #255	; 0xff
 8017bcc:	2200      	movs	r2, #0
 8017bce:	69f9      	ldr	r1, [r7, #28]
 8017bd0:	6878      	ldr	r0, [r7, #4]
 8017bd2:	f000 fa91 	bl	80180f8 <ip4_output_if>
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017bda:	e001      	b.n	8017be0 <icmp_input+0x1b8>
      break;
 8017bdc:	bf00      	nop
 8017bde:	e000      	b.n	8017be2 <icmp_input+0x1ba>
      break;
 8017be0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017be2:	6878      	ldr	r0, [r7, #4]
 8017be4:	f7f5 ff84 	bl	800daf0 <pbuf_free>
  return;
 8017be8:	e013      	b.n	8017c12 <icmp_input+0x1ea>
    goto lenerr;
 8017bea:	bf00      	nop
 8017bec:	e002      	b.n	8017bf4 <icmp_input+0x1cc>
    goto lenerr;
 8017bee:	bf00      	nop
 8017bf0:	e000      	b.n	8017bf4 <icmp_input+0x1cc>
        goto lenerr;
 8017bf2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017bf4:	6878      	ldr	r0, [r7, #4]
 8017bf6:	f7f5 ff7b 	bl	800daf0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017bfa:	e00a      	b.n	8017c12 <icmp_input+0x1ea>
        goto icmperr;
 8017bfc:	bf00      	nop
 8017bfe:	e004      	b.n	8017c0a <icmp_input+0x1e2>
        goto icmperr;
 8017c00:	bf00      	nop
 8017c02:	e002      	b.n	8017c0a <icmp_input+0x1e2>
          goto icmperr;
 8017c04:	bf00      	nop
 8017c06:	e000      	b.n	8017c0a <icmp_input+0x1e2>
          goto icmperr;
 8017c08:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017c0a:	6878      	ldr	r0, [r7, #4]
 8017c0c:	f7f5 ff70 	bl	800daf0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017c10:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017c12:	3728      	adds	r7, #40	; 0x28
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}
 8017c18:	200136e0 	.word	0x200136e0
 8017c1c:	200136f4 	.word	0x200136f4
 8017c20:	0801dfd0 	.word	0x0801dfd0
 8017c24:	0801e008 	.word	0x0801e008
 8017c28:	0801e040 	.word	0x0801e040
 8017c2c:	0801e068 	.word	0x0801e068

08017c30 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b082      	sub	sp, #8
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
 8017c38:	460b      	mov	r3, r1
 8017c3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017c3c:	78fb      	ldrb	r3, [r7, #3]
 8017c3e:	461a      	mov	r2, r3
 8017c40:	2103      	movs	r1, #3
 8017c42:	6878      	ldr	r0, [r7, #4]
 8017c44:	f000 f814 	bl	8017c70 <icmp_send_response>
}
 8017c48:	bf00      	nop
 8017c4a:	3708      	adds	r7, #8
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}

08017c50 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b082      	sub	sp, #8
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
 8017c58:	460b      	mov	r3, r1
 8017c5a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017c5c:	78fb      	ldrb	r3, [r7, #3]
 8017c5e:	461a      	mov	r2, r3
 8017c60:	210b      	movs	r1, #11
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f000 f804 	bl	8017c70 <icmp_send_response>
}
 8017c68:	bf00      	nop
 8017c6a:	3708      	adds	r7, #8
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	bd80      	pop	{r7, pc}

08017c70 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b08c      	sub	sp, #48	; 0x30
 8017c74:	af04      	add	r7, sp, #16
 8017c76:	6078      	str	r0, [r7, #4]
 8017c78:	460b      	mov	r3, r1
 8017c7a:	70fb      	strb	r3, [r7, #3]
 8017c7c:	4613      	mov	r3, r2
 8017c7e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017c80:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c84:	2124      	movs	r1, #36	; 0x24
 8017c86:	2022      	movs	r0, #34	; 0x22
 8017c88:	f7f5 fc52 	bl	800d530 <pbuf_alloc>
 8017c8c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017c8e:	69fb      	ldr	r3, [r7, #28]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d04c      	beq.n	8017d2e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017c94:	69fb      	ldr	r3, [r7, #28]
 8017c96:	895b      	ldrh	r3, [r3, #10]
 8017c98:	2b23      	cmp	r3, #35	; 0x23
 8017c9a:	d806      	bhi.n	8017caa <icmp_send_response+0x3a>
 8017c9c:	4b26      	ldr	r3, [pc, #152]	; (8017d38 <icmp_send_response+0xc8>)
 8017c9e:	f240 1269 	movw	r2, #361	; 0x169
 8017ca2:	4926      	ldr	r1, [pc, #152]	; (8017d3c <icmp_send_response+0xcc>)
 8017ca4:	4826      	ldr	r0, [pc, #152]	; (8017d40 <icmp_send_response+0xd0>)
 8017ca6:	f001 fc61 	bl	801956c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	685b      	ldr	r3, [r3, #4]
 8017cae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017cb0:	69fb      	ldr	r3, [r7, #28]
 8017cb2:	685b      	ldr	r3, [r3, #4]
 8017cb4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017cb6:	697b      	ldr	r3, [r7, #20]
 8017cb8:	78fa      	ldrb	r2, [r7, #3]
 8017cba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017cbc:	697b      	ldr	r3, [r7, #20]
 8017cbe:	78ba      	ldrb	r2, [r7, #2]
 8017cc0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017cc2:	697b      	ldr	r3, [r7, #20]
 8017cc4:	2200      	movs	r2, #0
 8017cc6:	711a      	strb	r2, [r3, #4]
 8017cc8:	2200      	movs	r2, #0
 8017cca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017ccc:	697b      	ldr	r3, [r7, #20]
 8017cce:	2200      	movs	r2, #0
 8017cd0:	719a      	strb	r2, [r3, #6]
 8017cd2:	2200      	movs	r2, #0
 8017cd4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017cd6:	69fb      	ldr	r3, [r7, #28]
 8017cd8:	685b      	ldr	r3, [r3, #4]
 8017cda:	f103 0008 	add.w	r0, r3, #8
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	685b      	ldr	r3, [r3, #4]
 8017ce2:	221c      	movs	r2, #28
 8017ce4:	4619      	mov	r1, r3
 8017ce6:	f001 fc14 	bl	8019512 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017cea:	69bb      	ldr	r3, [r7, #24]
 8017cec:	68db      	ldr	r3, [r3, #12]
 8017cee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017cf0:	f107 030c 	add.w	r3, r7, #12
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	f000 f825 	bl	8017d44 <ip4_route>
 8017cfa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017cfc:	693b      	ldr	r3, [r7, #16]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d011      	beq.n	8017d26 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017d02:	697b      	ldr	r3, [r7, #20]
 8017d04:	2200      	movs	r2, #0
 8017d06:	709a      	strb	r2, [r3, #2]
 8017d08:	2200      	movs	r2, #0
 8017d0a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017d0c:	f107 020c 	add.w	r2, r7, #12
 8017d10:	693b      	ldr	r3, [r7, #16]
 8017d12:	9302      	str	r3, [sp, #8]
 8017d14:	2301      	movs	r3, #1
 8017d16:	9301      	str	r3, [sp, #4]
 8017d18:	2300      	movs	r3, #0
 8017d1a:	9300      	str	r3, [sp, #0]
 8017d1c:	23ff      	movs	r3, #255	; 0xff
 8017d1e:	2100      	movs	r1, #0
 8017d20:	69f8      	ldr	r0, [r7, #28]
 8017d22:	f000 f9e9 	bl	80180f8 <ip4_output_if>
  }
  pbuf_free(q);
 8017d26:	69f8      	ldr	r0, [r7, #28]
 8017d28:	f7f5 fee2 	bl	800daf0 <pbuf_free>
 8017d2c:	e000      	b.n	8017d30 <icmp_send_response+0xc0>
    return;
 8017d2e:	bf00      	nop
}
 8017d30:	3720      	adds	r7, #32
 8017d32:	46bd      	mov	sp, r7
 8017d34:	bd80      	pop	{r7, pc}
 8017d36:	bf00      	nop
 8017d38:	0801dfd0 	.word	0x0801dfd0
 8017d3c:	0801e09c 	.word	0x0801e09c
 8017d40:	0801e040 	.word	0x0801e040

08017d44 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017d44:	b480      	push	{r7}
 8017d46:	b085      	sub	sp, #20
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017d4c:	4b33      	ldr	r3, [pc, #204]	; (8017e1c <ip4_route+0xd8>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	60fb      	str	r3, [r7, #12]
 8017d52:	e036      	b.n	8017dc2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017d5a:	f003 0301 	and.w	r3, r3, #1
 8017d5e:	b2db      	uxtb	r3, r3
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d02b      	beq.n	8017dbc <ip4_route+0x78>
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017d6a:	089b      	lsrs	r3, r3, #2
 8017d6c:	f003 0301 	and.w	r3, r3, #1
 8017d70:	b2db      	uxtb	r3, r3
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d022      	beq.n	8017dbc <ip4_route+0x78>
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	3304      	adds	r3, #4
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d01d      	beq.n	8017dbc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	681a      	ldr	r2, [r3, #0]
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	3304      	adds	r3, #4
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	405a      	eors	r2, r3
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	3308      	adds	r3, #8
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	4013      	ands	r3, r2
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d101      	bne.n	8017d9c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	e038      	b.n	8017e0e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017d9c:	68fb      	ldr	r3, [r7, #12]
 8017d9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017da2:	f003 0302 	and.w	r3, r3, #2
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d108      	bne.n	8017dbc <ip4_route+0x78>
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	681a      	ldr	r2, [r3, #0]
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	330c      	adds	r3, #12
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	429a      	cmp	r2, r3
 8017db6:	d101      	bne.n	8017dbc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	e028      	b.n	8017e0e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	60fb      	str	r3, [r7, #12]
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d1c5      	bne.n	8017d54 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017dc8:	4b15      	ldr	r3, [pc, #84]	; (8017e20 <ip4_route+0xdc>)
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d01a      	beq.n	8017e06 <ip4_route+0xc2>
 8017dd0:	4b13      	ldr	r3, [pc, #76]	; (8017e20 <ip4_route+0xdc>)
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017dd8:	f003 0301 	and.w	r3, r3, #1
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d012      	beq.n	8017e06 <ip4_route+0xc2>
 8017de0:	4b0f      	ldr	r3, [pc, #60]	; (8017e20 <ip4_route+0xdc>)
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017de8:	f003 0304 	and.w	r3, r3, #4
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d00a      	beq.n	8017e06 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017df0:	4b0b      	ldr	r3, [pc, #44]	; (8017e20 <ip4_route+0xdc>)
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	3304      	adds	r3, #4
 8017df6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d004      	beq.n	8017e06 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	b2db      	uxtb	r3, r3
 8017e02:	2b7f      	cmp	r3, #127	; 0x7f
 8017e04:	d101      	bne.n	8017e0a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017e06:	2300      	movs	r3, #0
 8017e08:	e001      	b.n	8017e0e <ip4_route+0xca>
  }

  return netif_default;
 8017e0a:	4b05      	ldr	r3, [pc, #20]	; (8017e20 <ip4_route+0xdc>)
 8017e0c:	681b      	ldr	r3, [r3, #0]
}
 8017e0e:	4618      	mov	r0, r3
 8017e10:	3714      	adds	r7, #20
 8017e12:	46bd      	mov	sp, r7
 8017e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e18:	4770      	bx	lr
 8017e1a:	bf00      	nop
 8017e1c:	20016e04 	.word	0x20016e04
 8017e20:	20016e08 	.word	0x20016e08

08017e24 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017e24:	b580      	push	{r7, lr}
 8017e26:	b082      	sub	sp, #8
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017e32:	f003 0301 	and.w	r3, r3, #1
 8017e36:	b2db      	uxtb	r3, r3
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d016      	beq.n	8017e6a <ip4_input_accept+0x46>
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	3304      	adds	r3, #4
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d011      	beq.n	8017e6a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017e46:	4b0b      	ldr	r3, [pc, #44]	; (8017e74 <ip4_input_accept+0x50>)
 8017e48:	695a      	ldr	r2, [r3, #20]
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	3304      	adds	r3, #4
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	429a      	cmp	r2, r3
 8017e52:	d008      	beq.n	8017e66 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017e54:	4b07      	ldr	r3, [pc, #28]	; (8017e74 <ip4_input_accept+0x50>)
 8017e56:	695b      	ldr	r3, [r3, #20]
 8017e58:	6879      	ldr	r1, [r7, #4]
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	f000 fa24 	bl	80182a8 <ip4_addr_isbroadcast_u32>
 8017e60:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d001      	beq.n	8017e6a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017e66:	2301      	movs	r3, #1
 8017e68:	e000      	b.n	8017e6c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017e6a:	2300      	movs	r3, #0
}
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	3708      	adds	r7, #8
 8017e70:	46bd      	mov	sp, r7
 8017e72:	bd80      	pop	{r7, pc}
 8017e74:	200136e0 	.word	0x200136e0

08017e78 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b088      	sub	sp, #32
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	6078      	str	r0, [r7, #4]
 8017e80:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017e82:	2301      	movs	r3, #1
 8017e84:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	685b      	ldr	r3, [r3, #4]
 8017e8a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017e8c:	69fb      	ldr	r3, [r7, #28]
 8017e8e:	781b      	ldrb	r3, [r3, #0]
 8017e90:	091b      	lsrs	r3, r3, #4
 8017e92:	b2db      	uxtb	r3, r3
 8017e94:	2b04      	cmp	r3, #4
 8017e96:	d004      	beq.n	8017ea2 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017e98:	6878      	ldr	r0, [r7, #4]
 8017e9a:	f7f5 fe29 	bl	800daf0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	e121      	b.n	80180e6 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017ea2:	69fb      	ldr	r3, [r7, #28]
 8017ea4:	781b      	ldrb	r3, [r3, #0]
 8017ea6:	f003 030f 	and.w	r3, r3, #15
 8017eaa:	b2db      	uxtb	r3, r3
 8017eac:	009b      	lsls	r3, r3, #2
 8017eae:	b2db      	uxtb	r3, r3
 8017eb0:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017eb2:	69fb      	ldr	r3, [r7, #28]
 8017eb4:	885b      	ldrh	r3, [r3, #2]
 8017eb6:	b29b      	uxth	r3, r3
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f7f4 fa2f 	bl	800c31c <lwip_htons>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	891b      	ldrh	r3, [r3, #8]
 8017ec6:	8a3a      	ldrh	r2, [r7, #16]
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d204      	bcs.n	8017ed6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017ecc:	8a3b      	ldrh	r3, [r7, #16]
 8017ece:	4619      	mov	r1, r3
 8017ed0:	6878      	ldr	r0, [r7, #4]
 8017ed2:	f7f5 fc87 	bl	800d7e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	895b      	ldrh	r3, [r3, #10]
 8017eda:	8a7a      	ldrh	r2, [r7, #18]
 8017edc:	429a      	cmp	r2, r3
 8017ede:	d807      	bhi.n	8017ef0 <ip4_input+0x78>
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	891b      	ldrh	r3, [r3, #8]
 8017ee4:	8a3a      	ldrh	r2, [r7, #16]
 8017ee6:	429a      	cmp	r2, r3
 8017ee8:	d802      	bhi.n	8017ef0 <ip4_input+0x78>
 8017eea:	8a7b      	ldrh	r3, [r7, #18]
 8017eec:	2b13      	cmp	r3, #19
 8017eee:	d804      	bhi.n	8017efa <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017ef0:	6878      	ldr	r0, [r7, #4]
 8017ef2:	f7f5 fdfd 	bl	800daf0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	e0f5      	b.n	80180e6 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017efa:	69fb      	ldr	r3, [r7, #28]
 8017efc:	691b      	ldr	r3, [r3, #16]
 8017efe:	4a7c      	ldr	r2, [pc, #496]	; (80180f0 <ip4_input+0x278>)
 8017f00:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017f02:	69fb      	ldr	r3, [r7, #28]
 8017f04:	68db      	ldr	r3, [r3, #12]
 8017f06:	4a7a      	ldr	r2, [pc, #488]	; (80180f0 <ip4_input+0x278>)
 8017f08:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017f0a:	4b79      	ldr	r3, [pc, #484]	; (80180f0 <ip4_input+0x278>)
 8017f0c:	695b      	ldr	r3, [r3, #20]
 8017f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017f12:	2be0      	cmp	r3, #224	; 0xe0
 8017f14:	d112      	bne.n	8017f3c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017f16:	683b      	ldr	r3, [r7, #0]
 8017f18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017f1c:	f003 0301 	and.w	r3, r3, #1
 8017f20:	b2db      	uxtb	r3, r3
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d007      	beq.n	8017f36 <ip4_input+0xbe>
 8017f26:	683b      	ldr	r3, [r7, #0]
 8017f28:	3304      	adds	r3, #4
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d002      	beq.n	8017f36 <ip4_input+0xbe>
      netif = inp;
 8017f30:	683b      	ldr	r3, [r7, #0]
 8017f32:	61bb      	str	r3, [r7, #24]
 8017f34:	e02a      	b.n	8017f8c <ip4_input+0x114>
    } else {
      netif = NULL;
 8017f36:	2300      	movs	r3, #0
 8017f38:	61bb      	str	r3, [r7, #24]
 8017f3a:	e027      	b.n	8017f8c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017f3c:	6838      	ldr	r0, [r7, #0]
 8017f3e:	f7ff ff71 	bl	8017e24 <ip4_input_accept>
 8017f42:	4603      	mov	r3, r0
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d002      	beq.n	8017f4e <ip4_input+0xd6>
      netif = inp;
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	61bb      	str	r3, [r7, #24]
 8017f4c:	e01e      	b.n	8017f8c <ip4_input+0x114>
    } else {
      netif = NULL;
 8017f4e:	2300      	movs	r3, #0
 8017f50:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017f52:	4b67      	ldr	r3, [pc, #412]	; (80180f0 <ip4_input+0x278>)
 8017f54:	695b      	ldr	r3, [r3, #20]
 8017f56:	b2db      	uxtb	r3, r3
 8017f58:	2b7f      	cmp	r3, #127	; 0x7f
 8017f5a:	d017      	beq.n	8017f8c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017f5c:	4b65      	ldr	r3, [pc, #404]	; (80180f4 <ip4_input+0x27c>)
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	61bb      	str	r3, [r7, #24]
 8017f62:	e00e      	b.n	8017f82 <ip4_input+0x10a>
          if (netif == inp) {
 8017f64:	69ba      	ldr	r2, [r7, #24]
 8017f66:	683b      	ldr	r3, [r7, #0]
 8017f68:	429a      	cmp	r2, r3
 8017f6a:	d006      	beq.n	8017f7a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017f6c:	69b8      	ldr	r0, [r7, #24]
 8017f6e:	f7ff ff59 	bl	8017e24 <ip4_input_accept>
 8017f72:	4603      	mov	r3, r0
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d108      	bne.n	8017f8a <ip4_input+0x112>
 8017f78:	e000      	b.n	8017f7c <ip4_input+0x104>
            continue;
 8017f7a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017f7c:	69bb      	ldr	r3, [r7, #24]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	61bb      	str	r3, [r7, #24]
 8017f82:	69bb      	ldr	r3, [r7, #24]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d1ed      	bne.n	8017f64 <ip4_input+0xec>
 8017f88:	e000      	b.n	8017f8c <ip4_input+0x114>
            break;
 8017f8a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017f8c:	69bb      	ldr	r3, [r7, #24]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d111      	bne.n	8017fb6 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017f92:	69fb      	ldr	r3, [r7, #28]
 8017f94:	7a5b      	ldrb	r3, [r3, #9]
 8017f96:	2b11      	cmp	r3, #17
 8017f98:	d10d      	bne.n	8017fb6 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017f9a:	8a7b      	ldrh	r3, [r7, #18]
 8017f9c:	69fa      	ldr	r2, [r7, #28]
 8017f9e:	4413      	add	r3, r2
 8017fa0:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	885b      	ldrh	r3, [r3, #2]
 8017fa6:	b29b      	uxth	r3, r3
 8017fa8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017fac:	d103      	bne.n	8017fb6 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017fae:	683b      	ldr	r3, [r7, #0]
 8017fb0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017fb6:	697b      	ldr	r3, [r7, #20]
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d017      	beq.n	8017fec <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017fbc:	4b4c      	ldr	r3, [pc, #304]	; (80180f0 <ip4_input+0x278>)
 8017fbe:	691b      	ldr	r3, [r3, #16]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d013      	beq.n	8017fec <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017fc4:	4b4a      	ldr	r3, [pc, #296]	; (80180f0 <ip4_input+0x278>)
 8017fc6:	691b      	ldr	r3, [r3, #16]
 8017fc8:	6839      	ldr	r1, [r7, #0]
 8017fca:	4618      	mov	r0, r3
 8017fcc:	f000 f96c 	bl	80182a8 <ip4_addr_isbroadcast_u32>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d105      	bne.n	8017fe2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017fd6:	4b46      	ldr	r3, [pc, #280]	; (80180f0 <ip4_input+0x278>)
 8017fd8:	691b      	ldr	r3, [r3, #16]
 8017fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017fde:	2be0      	cmp	r3, #224	; 0xe0
 8017fe0:	d104      	bne.n	8017fec <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017fe2:	6878      	ldr	r0, [r7, #4]
 8017fe4:	f7f5 fd84 	bl	800daf0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017fe8:	2300      	movs	r3, #0
 8017fea:	e07c      	b.n	80180e6 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017fec:	69bb      	ldr	r3, [r7, #24]
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d104      	bne.n	8017ffc <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017ff2:	6878      	ldr	r0, [r7, #4]
 8017ff4:	f7f5 fd7c 	bl	800daf0 <pbuf_free>
    return ERR_OK;
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	e074      	b.n	80180e6 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017ffc:	69fb      	ldr	r3, [r7, #28]
 8017ffe:	88db      	ldrh	r3, [r3, #6]
 8018000:	b29b      	uxth	r3, r3
 8018002:	461a      	mov	r2, r3
 8018004:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018008:	4013      	ands	r3, r2
 801800a:	2b00      	cmp	r3, #0
 801800c:	d00b      	beq.n	8018026 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801800e:	6878      	ldr	r0, [r7, #4]
 8018010:	f000 fc90 	bl	8018934 <ip4_reass>
 8018014:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d101      	bne.n	8018020 <ip4_input+0x1a8>
      return ERR_OK;
 801801c:	2300      	movs	r3, #0
 801801e:	e062      	b.n	80180e6 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	685b      	ldr	r3, [r3, #4]
 8018024:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018026:	4a32      	ldr	r2, [pc, #200]	; (80180f0 <ip4_input+0x278>)
 8018028:	69bb      	ldr	r3, [r7, #24]
 801802a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801802c:	4a30      	ldr	r2, [pc, #192]	; (80180f0 <ip4_input+0x278>)
 801802e:	683b      	ldr	r3, [r7, #0]
 8018030:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018032:	4a2f      	ldr	r2, [pc, #188]	; (80180f0 <ip4_input+0x278>)
 8018034:	69fb      	ldr	r3, [r7, #28]
 8018036:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018038:	69fb      	ldr	r3, [r7, #28]
 801803a:	781b      	ldrb	r3, [r3, #0]
 801803c:	f003 030f 	and.w	r3, r3, #15
 8018040:	b2db      	uxtb	r3, r3
 8018042:	009b      	lsls	r3, r3, #2
 8018044:	b2db      	uxtb	r3, r3
 8018046:	b29a      	uxth	r2, r3
 8018048:	4b29      	ldr	r3, [pc, #164]	; (80180f0 <ip4_input+0x278>)
 801804a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801804c:	8a7b      	ldrh	r3, [r7, #18]
 801804e:	4619      	mov	r1, r3
 8018050:	6878      	ldr	r0, [r7, #4]
 8018052:	f7f5 fcc7 	bl	800d9e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018056:	69fb      	ldr	r3, [r7, #28]
 8018058:	7a5b      	ldrb	r3, [r3, #9]
 801805a:	2b06      	cmp	r3, #6
 801805c:	d009      	beq.n	8018072 <ip4_input+0x1fa>
 801805e:	2b11      	cmp	r3, #17
 8018060:	d002      	beq.n	8018068 <ip4_input+0x1f0>
 8018062:	2b01      	cmp	r3, #1
 8018064:	d00a      	beq.n	801807c <ip4_input+0x204>
 8018066:	e00e      	b.n	8018086 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018068:	6839      	ldr	r1, [r7, #0]
 801806a:	6878      	ldr	r0, [r7, #4]
 801806c:	f7fc fac4 	bl	80145f8 <udp_input>
        break;
 8018070:	e026      	b.n	80180c0 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018072:	6839      	ldr	r1, [r7, #0]
 8018074:	6878      	ldr	r0, [r7, #4]
 8018076:	f7f7 fe73 	bl	800fd60 <tcp_input>
        break;
 801807a:	e021      	b.n	80180c0 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801807c:	6839      	ldr	r1, [r7, #0]
 801807e:	6878      	ldr	r0, [r7, #4]
 8018080:	f7ff fcd2 	bl	8017a28 <icmp_input>
        break;
 8018084:	e01c      	b.n	80180c0 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018086:	4b1a      	ldr	r3, [pc, #104]	; (80180f0 <ip4_input+0x278>)
 8018088:	695b      	ldr	r3, [r3, #20]
 801808a:	69b9      	ldr	r1, [r7, #24]
 801808c:	4618      	mov	r0, r3
 801808e:	f000 f90b 	bl	80182a8 <ip4_addr_isbroadcast_u32>
 8018092:	4603      	mov	r3, r0
 8018094:	2b00      	cmp	r3, #0
 8018096:	d10f      	bne.n	80180b8 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018098:	4b15      	ldr	r3, [pc, #84]	; (80180f0 <ip4_input+0x278>)
 801809a:	695b      	ldr	r3, [r3, #20]
 801809c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80180a0:	2be0      	cmp	r3, #224	; 0xe0
 80180a2:	d009      	beq.n	80180b8 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80180a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80180a8:	4619      	mov	r1, r3
 80180aa:	6878      	ldr	r0, [r7, #4]
 80180ac:	f7f5 fd0d 	bl	800daca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80180b0:	2102      	movs	r1, #2
 80180b2:	6878      	ldr	r0, [r7, #4]
 80180b4:	f7ff fdbc 	bl	8017c30 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80180b8:	6878      	ldr	r0, [r7, #4]
 80180ba:	f7f5 fd19 	bl	800daf0 <pbuf_free>
        break;
 80180be:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80180c0:	4b0b      	ldr	r3, [pc, #44]	; (80180f0 <ip4_input+0x278>)
 80180c2:	2200      	movs	r2, #0
 80180c4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80180c6:	4b0a      	ldr	r3, [pc, #40]	; (80180f0 <ip4_input+0x278>)
 80180c8:	2200      	movs	r2, #0
 80180ca:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80180cc:	4b08      	ldr	r3, [pc, #32]	; (80180f0 <ip4_input+0x278>)
 80180ce:	2200      	movs	r2, #0
 80180d0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80180d2:	4b07      	ldr	r3, [pc, #28]	; (80180f0 <ip4_input+0x278>)
 80180d4:	2200      	movs	r2, #0
 80180d6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80180d8:	4b05      	ldr	r3, [pc, #20]	; (80180f0 <ip4_input+0x278>)
 80180da:	2200      	movs	r2, #0
 80180dc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80180de:	4b04      	ldr	r3, [pc, #16]	; (80180f0 <ip4_input+0x278>)
 80180e0:	2200      	movs	r2, #0
 80180e2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80180e4:	2300      	movs	r3, #0
}
 80180e6:	4618      	mov	r0, r3
 80180e8:	3720      	adds	r7, #32
 80180ea:	46bd      	mov	sp, r7
 80180ec:	bd80      	pop	{r7, pc}
 80180ee:	bf00      	nop
 80180f0:	200136e0 	.word	0x200136e0
 80180f4:	20016e04 	.word	0x20016e04

080180f8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b08a      	sub	sp, #40	; 0x28
 80180fc:	af04      	add	r7, sp, #16
 80180fe:	60f8      	str	r0, [r7, #12]
 8018100:	60b9      	str	r1, [r7, #8]
 8018102:	607a      	str	r2, [r7, #4]
 8018104:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018106:	68bb      	ldr	r3, [r7, #8]
 8018108:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d009      	beq.n	8018124 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018110:	68bb      	ldr	r3, [r7, #8]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d003      	beq.n	801811e <ip4_output_if+0x26>
 8018116:	68bb      	ldr	r3, [r7, #8]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	2b00      	cmp	r3, #0
 801811c:	d102      	bne.n	8018124 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018120:	3304      	adds	r3, #4
 8018122:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018124:	78fa      	ldrb	r2, [r7, #3]
 8018126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018128:	9302      	str	r3, [sp, #8]
 801812a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801812e:	9301      	str	r3, [sp, #4]
 8018130:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018134:	9300      	str	r3, [sp, #0]
 8018136:	4613      	mov	r3, r2
 8018138:	687a      	ldr	r2, [r7, #4]
 801813a:	6979      	ldr	r1, [r7, #20]
 801813c:	68f8      	ldr	r0, [r7, #12]
 801813e:	f000 f805 	bl	801814c <ip4_output_if_src>
 8018142:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018144:	4618      	mov	r0, r3
 8018146:	3718      	adds	r7, #24
 8018148:	46bd      	mov	sp, r7
 801814a:	bd80      	pop	{r7, pc}

0801814c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b088      	sub	sp, #32
 8018150:	af00      	add	r7, sp, #0
 8018152:	60f8      	str	r0, [r7, #12]
 8018154:	60b9      	str	r1, [r7, #8]
 8018156:	607a      	str	r2, [r7, #4]
 8018158:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	7b9b      	ldrb	r3, [r3, #14]
 801815e:	2b01      	cmp	r3, #1
 8018160:	d006      	beq.n	8018170 <ip4_output_if_src+0x24>
 8018162:	4b4b      	ldr	r3, [pc, #300]	; (8018290 <ip4_output_if_src+0x144>)
 8018164:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018168:	494a      	ldr	r1, [pc, #296]	; (8018294 <ip4_output_if_src+0x148>)
 801816a:	484b      	ldr	r0, [pc, #300]	; (8018298 <ip4_output_if_src+0x14c>)
 801816c:	f001 f9fe 	bl	801956c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	2b00      	cmp	r3, #0
 8018174:	d060      	beq.n	8018238 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018176:	2314      	movs	r3, #20
 8018178:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801817a:	2114      	movs	r1, #20
 801817c:	68f8      	ldr	r0, [r7, #12]
 801817e:	f7f5 fc21 	bl	800d9c4 <pbuf_add_header>
 8018182:	4603      	mov	r3, r0
 8018184:	2b00      	cmp	r3, #0
 8018186:	d002      	beq.n	801818e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018188:	f06f 0301 	mvn.w	r3, #1
 801818c:	e07c      	b.n	8018288 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	685b      	ldr	r3, [r3, #4]
 8018192:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	895b      	ldrh	r3, [r3, #10]
 8018198:	2b13      	cmp	r3, #19
 801819a:	d806      	bhi.n	80181aa <ip4_output_if_src+0x5e>
 801819c:	4b3c      	ldr	r3, [pc, #240]	; (8018290 <ip4_output_if_src+0x144>)
 801819e:	f240 3289 	movw	r2, #905	; 0x389
 80181a2:	493e      	ldr	r1, [pc, #248]	; (801829c <ip4_output_if_src+0x150>)
 80181a4:	483c      	ldr	r0, [pc, #240]	; (8018298 <ip4_output_if_src+0x14c>)
 80181a6:	f001 f9e1 	bl	801956c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80181aa:	69fb      	ldr	r3, [r7, #28]
 80181ac:	78fa      	ldrb	r2, [r7, #3]
 80181ae:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80181b0:	69fb      	ldr	r3, [r7, #28]
 80181b2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80181b6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	681a      	ldr	r2, [r3, #0]
 80181bc:	69fb      	ldr	r3, [r7, #28]
 80181be:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80181c0:	8b7b      	ldrh	r3, [r7, #26]
 80181c2:	089b      	lsrs	r3, r3, #2
 80181c4:	b29b      	uxth	r3, r3
 80181c6:	b2db      	uxtb	r3, r3
 80181c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181cc:	b2da      	uxtb	r2, r3
 80181ce:	69fb      	ldr	r3, [r7, #28]
 80181d0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80181d2:	69fb      	ldr	r3, [r7, #28]
 80181d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80181d8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80181da:	68fb      	ldr	r3, [r7, #12]
 80181dc:	891b      	ldrh	r3, [r3, #8]
 80181de:	4618      	mov	r0, r3
 80181e0:	f7f4 f89c 	bl	800c31c <lwip_htons>
 80181e4:	4603      	mov	r3, r0
 80181e6:	461a      	mov	r2, r3
 80181e8:	69fb      	ldr	r3, [r7, #28]
 80181ea:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80181ec:	69fb      	ldr	r3, [r7, #28]
 80181ee:	2200      	movs	r2, #0
 80181f0:	719a      	strb	r2, [r3, #6]
 80181f2:	2200      	movs	r2, #0
 80181f4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80181f6:	4b2a      	ldr	r3, [pc, #168]	; (80182a0 <ip4_output_if_src+0x154>)
 80181f8:	881b      	ldrh	r3, [r3, #0]
 80181fa:	4618      	mov	r0, r3
 80181fc:	f7f4 f88e 	bl	800c31c <lwip_htons>
 8018200:	4603      	mov	r3, r0
 8018202:	461a      	mov	r2, r3
 8018204:	69fb      	ldr	r3, [r7, #28]
 8018206:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018208:	4b25      	ldr	r3, [pc, #148]	; (80182a0 <ip4_output_if_src+0x154>)
 801820a:	881b      	ldrh	r3, [r3, #0]
 801820c:	3301      	adds	r3, #1
 801820e:	b29a      	uxth	r2, r3
 8018210:	4b23      	ldr	r3, [pc, #140]	; (80182a0 <ip4_output_if_src+0x154>)
 8018212:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018214:	68bb      	ldr	r3, [r7, #8]
 8018216:	2b00      	cmp	r3, #0
 8018218:	d104      	bne.n	8018224 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801821a:	4b22      	ldr	r3, [pc, #136]	; (80182a4 <ip4_output_if_src+0x158>)
 801821c:	681a      	ldr	r2, [r3, #0]
 801821e:	69fb      	ldr	r3, [r7, #28]
 8018220:	60da      	str	r2, [r3, #12]
 8018222:	e003      	b.n	801822c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018224:	68bb      	ldr	r3, [r7, #8]
 8018226:	681a      	ldr	r2, [r3, #0]
 8018228:	69fb      	ldr	r3, [r7, #28]
 801822a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801822c:	69fb      	ldr	r3, [r7, #28]
 801822e:	2200      	movs	r2, #0
 8018230:	729a      	strb	r2, [r3, #10]
 8018232:	2200      	movs	r2, #0
 8018234:	72da      	strb	r2, [r3, #11]
 8018236:	e00f      	b.n	8018258 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	895b      	ldrh	r3, [r3, #10]
 801823c:	2b13      	cmp	r3, #19
 801823e:	d802      	bhi.n	8018246 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018240:	f06f 0301 	mvn.w	r3, #1
 8018244:	e020      	b.n	8018288 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	685b      	ldr	r3, [r3, #4]
 801824a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801824c:	69fb      	ldr	r3, [r7, #28]
 801824e:	691b      	ldr	r3, [r3, #16]
 8018250:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018252:	f107 0314 	add.w	r3, r7, #20
 8018256:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801825a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801825c:	2b00      	cmp	r3, #0
 801825e:	d00c      	beq.n	801827a <ip4_output_if_src+0x12e>
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	891a      	ldrh	r2, [r3, #8]
 8018264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018268:	429a      	cmp	r2, r3
 801826a:	d906      	bls.n	801827a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801826c:	687a      	ldr	r2, [r7, #4]
 801826e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018270:	68f8      	ldr	r0, [r7, #12]
 8018272:	f000 fd4b 	bl	8018d0c <ip4_frag>
 8018276:	4603      	mov	r3, r0
 8018278:	e006      	b.n	8018288 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801827c:	695b      	ldr	r3, [r3, #20]
 801827e:	687a      	ldr	r2, [r7, #4]
 8018280:	68f9      	ldr	r1, [r7, #12]
 8018282:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018284:	4798      	blx	r3
 8018286:	4603      	mov	r3, r0
}
 8018288:	4618      	mov	r0, r3
 801828a:	3720      	adds	r7, #32
 801828c:	46bd      	mov	sp, r7
 801828e:	bd80      	pop	{r7, pc}
 8018290:	0801e0c8 	.word	0x0801e0c8
 8018294:	0801e0fc 	.word	0x0801e0fc
 8018298:	0801e108 	.word	0x0801e108
 801829c:	0801e130 	.word	0x0801e130
 80182a0:	20010396 	.word	0x20010396
 80182a4:	08023070 	.word	0x08023070

080182a8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80182a8:	b480      	push	{r7}
 80182aa:	b085      	sub	sp, #20
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
 80182b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182bc:	d002      	beq.n	80182c4 <ip4_addr_isbroadcast_u32+0x1c>
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d101      	bne.n	80182c8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80182c4:	2301      	movs	r3, #1
 80182c6:	e02a      	b.n	801831e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80182c8:	683b      	ldr	r3, [r7, #0]
 80182ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80182ce:	f003 0302 	and.w	r3, r3, #2
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d101      	bne.n	80182da <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80182d6:	2300      	movs	r3, #0
 80182d8:	e021      	b.n	801831e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80182da:	683b      	ldr	r3, [r7, #0]
 80182dc:	3304      	adds	r3, #4
 80182de:	681b      	ldr	r3, [r3, #0]
 80182e0:	687a      	ldr	r2, [r7, #4]
 80182e2:	429a      	cmp	r2, r3
 80182e4:	d101      	bne.n	80182ea <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80182e6:	2300      	movs	r3, #0
 80182e8:	e019      	b.n	801831e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80182ea:	68fa      	ldr	r2, [r7, #12]
 80182ec:	683b      	ldr	r3, [r7, #0]
 80182ee:	3304      	adds	r3, #4
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	405a      	eors	r2, r3
 80182f4:	683b      	ldr	r3, [r7, #0]
 80182f6:	3308      	adds	r3, #8
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	4013      	ands	r3, r2
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d10d      	bne.n	801831c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018300:	683b      	ldr	r3, [r7, #0]
 8018302:	3308      	adds	r3, #8
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	43da      	mvns	r2, r3
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801830c:	683b      	ldr	r3, [r7, #0]
 801830e:	3308      	adds	r3, #8
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018314:	429a      	cmp	r2, r3
 8018316:	d101      	bne.n	801831c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018318:	2301      	movs	r3, #1
 801831a:	e000      	b.n	801831e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801831c:	2300      	movs	r3, #0
  }
}
 801831e:	4618      	mov	r0, r3
 8018320:	3714      	adds	r7, #20
 8018322:	46bd      	mov	sp, r7
 8018324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018328:	4770      	bx	lr
	...

0801832c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801832c:	b580      	push	{r7, lr}
 801832e:	b084      	sub	sp, #16
 8018330:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018332:	2300      	movs	r3, #0
 8018334:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018336:	4b12      	ldr	r3, [pc, #72]	; (8018380 <ip_reass_tmr+0x54>)
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801833c:	e018      	b.n	8018370 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	7fdb      	ldrb	r3, [r3, #31]
 8018342:	2b00      	cmp	r3, #0
 8018344:	d00b      	beq.n	801835e <ip_reass_tmr+0x32>
      r->timer--;
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	7fdb      	ldrb	r3, [r3, #31]
 801834a:	3b01      	subs	r3, #1
 801834c:	b2da      	uxtb	r2, r3
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	60fb      	str	r3, [r7, #12]
 801835c:	e008      	b.n	8018370 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018368:	68b9      	ldr	r1, [r7, #8]
 801836a:	6878      	ldr	r0, [r7, #4]
 801836c:	f000 f80a 	bl	8018384 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d1e3      	bne.n	801833e <ip_reass_tmr+0x12>
    }
  }
}
 8018376:	bf00      	nop
 8018378:	3710      	adds	r7, #16
 801837a:	46bd      	mov	sp, r7
 801837c:	bd80      	pop	{r7, pc}
 801837e:	bf00      	nop
 8018380:	20010398 	.word	0x20010398

08018384 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018384:	b580      	push	{r7, lr}
 8018386:	b088      	sub	sp, #32
 8018388:	af00      	add	r7, sp, #0
 801838a:	6078      	str	r0, [r7, #4]
 801838c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801838e:	2300      	movs	r3, #0
 8018390:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018392:	683a      	ldr	r2, [r7, #0]
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	429a      	cmp	r2, r3
 8018398:	d105      	bne.n	80183a6 <ip_reass_free_complete_datagram+0x22>
 801839a:	4b45      	ldr	r3, [pc, #276]	; (80184b0 <ip_reass_free_complete_datagram+0x12c>)
 801839c:	22ab      	movs	r2, #171	; 0xab
 801839e:	4945      	ldr	r1, [pc, #276]	; (80184b4 <ip_reass_free_complete_datagram+0x130>)
 80183a0:	4845      	ldr	r0, [pc, #276]	; (80184b8 <ip_reass_free_complete_datagram+0x134>)
 80183a2:	f001 f8e3 	bl	801956c <iprintf>
  if (prev != NULL) {
 80183a6:	683b      	ldr	r3, [r7, #0]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d00a      	beq.n	80183c2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80183ac:	683b      	ldr	r3, [r7, #0]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	687a      	ldr	r2, [r7, #4]
 80183b2:	429a      	cmp	r2, r3
 80183b4:	d005      	beq.n	80183c2 <ip_reass_free_complete_datagram+0x3e>
 80183b6:	4b3e      	ldr	r3, [pc, #248]	; (80184b0 <ip_reass_free_complete_datagram+0x12c>)
 80183b8:	22ad      	movs	r2, #173	; 0xad
 80183ba:	4940      	ldr	r1, [pc, #256]	; (80184bc <ip_reass_free_complete_datagram+0x138>)
 80183bc:	483e      	ldr	r0, [pc, #248]	; (80184b8 <ip_reass_free_complete_datagram+0x134>)
 80183be:	f001 f8d5 	bl	801956c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	685b      	ldr	r3, [r3, #4]
 80183c6:	685b      	ldr	r3, [r3, #4]
 80183c8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80183ca:	697b      	ldr	r3, [r7, #20]
 80183cc:	889b      	ldrh	r3, [r3, #4]
 80183ce:	b29b      	uxth	r3, r3
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d12a      	bne.n	801842a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	685b      	ldr	r3, [r3, #4]
 80183d8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80183da:	697b      	ldr	r3, [r7, #20]
 80183dc:	681a      	ldr	r2, [r3, #0]
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80183e2:	69bb      	ldr	r3, [r7, #24]
 80183e4:	6858      	ldr	r0, [r3, #4]
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	3308      	adds	r3, #8
 80183ea:	2214      	movs	r2, #20
 80183ec:	4619      	mov	r1, r3
 80183ee:	f001 f890 	bl	8019512 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80183f2:	2101      	movs	r1, #1
 80183f4:	69b8      	ldr	r0, [r7, #24]
 80183f6:	f7ff fc2b 	bl	8017c50 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80183fa:	69b8      	ldr	r0, [r7, #24]
 80183fc:	f7f5 fc06 	bl	800dc0c <pbuf_clen>
 8018400:	4603      	mov	r3, r0
 8018402:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018404:	8bfa      	ldrh	r2, [r7, #30]
 8018406:	8a7b      	ldrh	r3, [r7, #18]
 8018408:	4413      	add	r3, r2
 801840a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801840e:	db05      	blt.n	801841c <ip_reass_free_complete_datagram+0x98>
 8018410:	4b27      	ldr	r3, [pc, #156]	; (80184b0 <ip_reass_free_complete_datagram+0x12c>)
 8018412:	22bc      	movs	r2, #188	; 0xbc
 8018414:	492a      	ldr	r1, [pc, #168]	; (80184c0 <ip_reass_free_complete_datagram+0x13c>)
 8018416:	4828      	ldr	r0, [pc, #160]	; (80184b8 <ip_reass_free_complete_datagram+0x134>)
 8018418:	f001 f8a8 	bl	801956c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801841c:	8bfa      	ldrh	r2, [r7, #30]
 801841e:	8a7b      	ldrh	r3, [r7, #18]
 8018420:	4413      	add	r3, r2
 8018422:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018424:	69b8      	ldr	r0, [r7, #24]
 8018426:	f7f5 fb63 	bl	800daf0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	685b      	ldr	r3, [r3, #4]
 801842e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018430:	e01f      	b.n	8018472 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018432:	69bb      	ldr	r3, [r7, #24]
 8018434:	685b      	ldr	r3, [r3, #4]
 8018436:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018438:	69bb      	ldr	r3, [r7, #24]
 801843a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801843c:	697b      	ldr	r3, [r7, #20]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018442:	68f8      	ldr	r0, [r7, #12]
 8018444:	f7f5 fbe2 	bl	800dc0c <pbuf_clen>
 8018448:	4603      	mov	r3, r0
 801844a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801844c:	8bfa      	ldrh	r2, [r7, #30]
 801844e:	8a7b      	ldrh	r3, [r7, #18]
 8018450:	4413      	add	r3, r2
 8018452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018456:	db05      	blt.n	8018464 <ip_reass_free_complete_datagram+0xe0>
 8018458:	4b15      	ldr	r3, [pc, #84]	; (80184b0 <ip_reass_free_complete_datagram+0x12c>)
 801845a:	22cc      	movs	r2, #204	; 0xcc
 801845c:	4918      	ldr	r1, [pc, #96]	; (80184c0 <ip_reass_free_complete_datagram+0x13c>)
 801845e:	4816      	ldr	r0, [pc, #88]	; (80184b8 <ip_reass_free_complete_datagram+0x134>)
 8018460:	f001 f884 	bl	801956c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018464:	8bfa      	ldrh	r2, [r7, #30]
 8018466:	8a7b      	ldrh	r3, [r7, #18]
 8018468:	4413      	add	r3, r2
 801846a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801846c:	68f8      	ldr	r0, [r7, #12]
 801846e:	f7f5 fb3f 	bl	800daf0 <pbuf_free>
  while (p != NULL) {
 8018472:	69bb      	ldr	r3, [r7, #24]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d1dc      	bne.n	8018432 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018478:	6839      	ldr	r1, [r7, #0]
 801847a:	6878      	ldr	r0, [r7, #4]
 801847c:	f000 f8c2 	bl	8018604 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018480:	4b10      	ldr	r3, [pc, #64]	; (80184c4 <ip_reass_free_complete_datagram+0x140>)
 8018482:	881b      	ldrh	r3, [r3, #0]
 8018484:	8bfa      	ldrh	r2, [r7, #30]
 8018486:	429a      	cmp	r2, r3
 8018488:	d905      	bls.n	8018496 <ip_reass_free_complete_datagram+0x112>
 801848a:	4b09      	ldr	r3, [pc, #36]	; (80184b0 <ip_reass_free_complete_datagram+0x12c>)
 801848c:	22d2      	movs	r2, #210	; 0xd2
 801848e:	490e      	ldr	r1, [pc, #56]	; (80184c8 <ip_reass_free_complete_datagram+0x144>)
 8018490:	4809      	ldr	r0, [pc, #36]	; (80184b8 <ip_reass_free_complete_datagram+0x134>)
 8018492:	f001 f86b 	bl	801956c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018496:	4b0b      	ldr	r3, [pc, #44]	; (80184c4 <ip_reass_free_complete_datagram+0x140>)
 8018498:	881a      	ldrh	r2, [r3, #0]
 801849a:	8bfb      	ldrh	r3, [r7, #30]
 801849c:	1ad3      	subs	r3, r2, r3
 801849e:	b29a      	uxth	r2, r3
 80184a0:	4b08      	ldr	r3, [pc, #32]	; (80184c4 <ip_reass_free_complete_datagram+0x140>)
 80184a2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80184a4:	8bfb      	ldrh	r3, [r7, #30]
}
 80184a6:	4618      	mov	r0, r3
 80184a8:	3720      	adds	r7, #32
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd80      	pop	{r7, pc}
 80184ae:	bf00      	nop
 80184b0:	0801e160 	.word	0x0801e160
 80184b4:	0801e19c 	.word	0x0801e19c
 80184b8:	0801e1a8 	.word	0x0801e1a8
 80184bc:	0801e1d0 	.word	0x0801e1d0
 80184c0:	0801e1e4 	.word	0x0801e1e4
 80184c4:	2001039c 	.word	0x2001039c
 80184c8:	0801e204 	.word	0x0801e204

080184cc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b08a      	sub	sp, #40	; 0x28
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	6078      	str	r0, [r7, #4]
 80184d4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80184d6:	2300      	movs	r3, #0
 80184d8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80184da:	2300      	movs	r3, #0
 80184dc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80184de:	2300      	movs	r3, #0
 80184e0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80184e2:	2300      	movs	r3, #0
 80184e4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80184e6:	2300      	movs	r3, #0
 80184e8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80184ea:	4b28      	ldr	r3, [pc, #160]	; (801858c <ip_reass_remove_oldest_datagram+0xc0>)
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80184f0:	e030      	b.n	8018554 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80184f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184f4:	695a      	ldr	r2, [r3, #20]
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	68db      	ldr	r3, [r3, #12]
 80184fa:	429a      	cmp	r2, r3
 80184fc:	d10c      	bne.n	8018518 <ip_reass_remove_oldest_datagram+0x4c>
 80184fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018500:	699a      	ldr	r2, [r3, #24]
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	691b      	ldr	r3, [r3, #16]
 8018506:	429a      	cmp	r2, r3
 8018508:	d106      	bne.n	8018518 <ip_reass_remove_oldest_datagram+0x4c>
 801850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801850c:	899a      	ldrh	r2, [r3, #12]
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	889b      	ldrh	r3, [r3, #4]
 8018512:	b29b      	uxth	r3, r3
 8018514:	429a      	cmp	r2, r3
 8018516:	d014      	beq.n	8018542 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018518:	693b      	ldr	r3, [r7, #16]
 801851a:	3301      	adds	r3, #1
 801851c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801851e:	6a3b      	ldr	r3, [r7, #32]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d104      	bne.n	801852e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018526:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018528:	69fb      	ldr	r3, [r7, #28]
 801852a:	61bb      	str	r3, [r7, #24]
 801852c:	e009      	b.n	8018542 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018530:	7fda      	ldrb	r2, [r3, #31]
 8018532:	6a3b      	ldr	r3, [r7, #32]
 8018534:	7fdb      	ldrb	r3, [r3, #31]
 8018536:	429a      	cmp	r2, r3
 8018538:	d803      	bhi.n	8018542 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801853c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801853e:	69fb      	ldr	r3, [r7, #28]
 8018540:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	2b00      	cmp	r3, #0
 8018548:	d001      	beq.n	801854e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801854c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801854e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018556:	2b00      	cmp	r3, #0
 8018558:	d1cb      	bne.n	80184f2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801855a:	6a3b      	ldr	r3, [r7, #32]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d008      	beq.n	8018572 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018560:	69b9      	ldr	r1, [r7, #24]
 8018562:	6a38      	ldr	r0, [r7, #32]
 8018564:	f7ff ff0e 	bl	8018384 <ip_reass_free_complete_datagram>
 8018568:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801856a:	697a      	ldr	r2, [r7, #20]
 801856c:	68fb      	ldr	r3, [r7, #12]
 801856e:	4413      	add	r3, r2
 8018570:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018572:	697a      	ldr	r2, [r7, #20]
 8018574:	683b      	ldr	r3, [r7, #0]
 8018576:	429a      	cmp	r2, r3
 8018578:	da02      	bge.n	8018580 <ip_reass_remove_oldest_datagram+0xb4>
 801857a:	693b      	ldr	r3, [r7, #16]
 801857c:	2b01      	cmp	r3, #1
 801857e:	dcac      	bgt.n	80184da <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018580:	697b      	ldr	r3, [r7, #20]
}
 8018582:	4618      	mov	r0, r3
 8018584:	3728      	adds	r7, #40	; 0x28
 8018586:	46bd      	mov	sp, r7
 8018588:	bd80      	pop	{r7, pc}
 801858a:	bf00      	nop
 801858c:	20010398 	.word	0x20010398

08018590 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b084      	sub	sp, #16
 8018594:	af00      	add	r7, sp, #0
 8018596:	6078      	str	r0, [r7, #4]
 8018598:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801859a:	2004      	movs	r0, #4
 801859c:	f7f4 fbaa 	bl	800ccf4 <memp_malloc>
 80185a0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d110      	bne.n	80185ca <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80185a8:	6839      	ldr	r1, [r7, #0]
 80185aa:	6878      	ldr	r0, [r7, #4]
 80185ac:	f7ff ff8e 	bl	80184cc <ip_reass_remove_oldest_datagram>
 80185b0:	4602      	mov	r2, r0
 80185b2:	683b      	ldr	r3, [r7, #0]
 80185b4:	4293      	cmp	r3, r2
 80185b6:	dc03      	bgt.n	80185c0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80185b8:	2004      	movs	r0, #4
 80185ba:	f7f4 fb9b 	bl	800ccf4 <memp_malloc>
 80185be:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d101      	bne.n	80185ca <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80185c6:	2300      	movs	r3, #0
 80185c8:	e016      	b.n	80185f8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80185ca:	2220      	movs	r2, #32
 80185cc:	2100      	movs	r1, #0
 80185ce:	68f8      	ldr	r0, [r7, #12]
 80185d0:	f000 ffc3 	bl	801955a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	220f      	movs	r2, #15
 80185d8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80185da:	4b09      	ldr	r3, [pc, #36]	; (8018600 <ip_reass_enqueue_new_datagram+0x70>)
 80185dc:	681a      	ldr	r2, [r3, #0]
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80185e2:	4a07      	ldr	r2, [pc, #28]	; (8018600 <ip_reass_enqueue_new_datagram+0x70>)
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	3308      	adds	r3, #8
 80185ec:	2214      	movs	r2, #20
 80185ee:	6879      	ldr	r1, [r7, #4]
 80185f0:	4618      	mov	r0, r3
 80185f2:	f000 ff8e 	bl	8019512 <memcpy>
  return ipr;
 80185f6:	68fb      	ldr	r3, [r7, #12]
}
 80185f8:	4618      	mov	r0, r3
 80185fa:	3710      	adds	r7, #16
 80185fc:	46bd      	mov	sp, r7
 80185fe:	bd80      	pop	{r7, pc}
 8018600:	20010398 	.word	0x20010398

08018604 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	b082      	sub	sp, #8
 8018608:	af00      	add	r7, sp, #0
 801860a:	6078      	str	r0, [r7, #4]
 801860c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801860e:	4b10      	ldr	r3, [pc, #64]	; (8018650 <ip_reass_dequeue_datagram+0x4c>)
 8018610:	681b      	ldr	r3, [r3, #0]
 8018612:	687a      	ldr	r2, [r7, #4]
 8018614:	429a      	cmp	r2, r3
 8018616:	d104      	bne.n	8018622 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	4a0c      	ldr	r2, [pc, #48]	; (8018650 <ip_reass_dequeue_datagram+0x4c>)
 801861e:	6013      	str	r3, [r2, #0]
 8018620:	e00d      	b.n	801863e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018622:	683b      	ldr	r3, [r7, #0]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d106      	bne.n	8018636 <ip_reass_dequeue_datagram+0x32>
 8018628:	4b0a      	ldr	r3, [pc, #40]	; (8018654 <ip_reass_dequeue_datagram+0x50>)
 801862a:	f240 1245 	movw	r2, #325	; 0x145
 801862e:	490a      	ldr	r1, [pc, #40]	; (8018658 <ip_reass_dequeue_datagram+0x54>)
 8018630:	480a      	ldr	r0, [pc, #40]	; (801865c <ip_reass_dequeue_datagram+0x58>)
 8018632:	f000 ff9b 	bl	801956c <iprintf>
    prev->next = ipr->next;
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	681a      	ldr	r2, [r3, #0]
 801863a:	683b      	ldr	r3, [r7, #0]
 801863c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801863e:	6879      	ldr	r1, [r7, #4]
 8018640:	2004      	movs	r0, #4
 8018642:	f7f4 fba9 	bl	800cd98 <memp_free>
}
 8018646:	bf00      	nop
 8018648:	3708      	adds	r7, #8
 801864a:	46bd      	mov	sp, r7
 801864c:	bd80      	pop	{r7, pc}
 801864e:	bf00      	nop
 8018650:	20010398 	.word	0x20010398
 8018654:	0801e160 	.word	0x0801e160
 8018658:	0801e228 	.word	0x0801e228
 801865c:	0801e1a8 	.word	0x0801e1a8

08018660 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b08c      	sub	sp, #48	; 0x30
 8018664:	af00      	add	r7, sp, #0
 8018666:	60f8      	str	r0, [r7, #12]
 8018668:	60b9      	str	r1, [r7, #8]
 801866a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801866c:	2300      	movs	r3, #0
 801866e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018670:	2301      	movs	r3, #1
 8018672:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018674:	68bb      	ldr	r3, [r7, #8]
 8018676:	685b      	ldr	r3, [r3, #4]
 8018678:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801867a:	69fb      	ldr	r3, [r7, #28]
 801867c:	885b      	ldrh	r3, [r3, #2]
 801867e:	b29b      	uxth	r3, r3
 8018680:	4618      	mov	r0, r3
 8018682:	f7f3 fe4b 	bl	800c31c <lwip_htons>
 8018686:	4603      	mov	r3, r0
 8018688:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801868a:	69fb      	ldr	r3, [r7, #28]
 801868c:	781b      	ldrb	r3, [r3, #0]
 801868e:	f003 030f 	and.w	r3, r3, #15
 8018692:	b2db      	uxtb	r3, r3
 8018694:	009b      	lsls	r3, r3, #2
 8018696:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018698:	7e7b      	ldrb	r3, [r7, #25]
 801869a:	b29b      	uxth	r3, r3
 801869c:	8b7a      	ldrh	r2, [r7, #26]
 801869e:	429a      	cmp	r2, r3
 80186a0:	d202      	bcs.n	80186a8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80186a2:	f04f 33ff 	mov.w	r3, #4294967295
 80186a6:	e135      	b.n	8018914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80186a8:	7e7b      	ldrb	r3, [r7, #25]
 80186aa:	b29b      	uxth	r3, r3
 80186ac:	8b7a      	ldrh	r2, [r7, #26]
 80186ae:	1ad3      	subs	r3, r2, r3
 80186b0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80186b2:	69fb      	ldr	r3, [r7, #28]
 80186b4:	88db      	ldrh	r3, [r3, #6]
 80186b6:	b29b      	uxth	r3, r3
 80186b8:	4618      	mov	r0, r3
 80186ba:	f7f3 fe2f 	bl	800c31c <lwip_htons>
 80186be:	4603      	mov	r3, r0
 80186c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80186c4:	b29b      	uxth	r3, r3
 80186c6:	00db      	lsls	r3, r3, #3
 80186c8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80186ca:	68bb      	ldr	r3, [r7, #8]
 80186cc:	685b      	ldr	r3, [r3, #4]
 80186ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80186d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186d2:	2200      	movs	r2, #0
 80186d4:	701a      	strb	r2, [r3, #0]
 80186d6:	2200      	movs	r2, #0
 80186d8:	705a      	strb	r2, [r3, #1]
 80186da:	2200      	movs	r2, #0
 80186dc:	709a      	strb	r2, [r3, #2]
 80186de:	2200      	movs	r2, #0
 80186e0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80186e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186e4:	8afa      	ldrh	r2, [r7, #22]
 80186e6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80186e8:	8afa      	ldrh	r2, [r7, #22]
 80186ea:	8b7b      	ldrh	r3, [r7, #26]
 80186ec:	4413      	add	r3, r2
 80186ee:	b29a      	uxth	r2, r3
 80186f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186f2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80186f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186f6:	88db      	ldrh	r3, [r3, #6]
 80186f8:	b29b      	uxth	r3, r3
 80186fa:	8afa      	ldrh	r2, [r7, #22]
 80186fc:	429a      	cmp	r2, r3
 80186fe:	d902      	bls.n	8018706 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018700:	f04f 33ff 	mov.w	r3, #4294967295
 8018704:	e106      	b.n	8018914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	685b      	ldr	r3, [r3, #4]
 801870a:	627b      	str	r3, [r7, #36]	; 0x24
 801870c:	e068      	b.n	80187e0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018710:	685b      	ldr	r3, [r3, #4]
 8018712:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018716:	889b      	ldrh	r3, [r3, #4]
 8018718:	b29a      	uxth	r2, r3
 801871a:	693b      	ldr	r3, [r7, #16]
 801871c:	889b      	ldrh	r3, [r3, #4]
 801871e:	b29b      	uxth	r3, r3
 8018720:	429a      	cmp	r2, r3
 8018722:	d235      	bcs.n	8018790 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018728:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801872c:	2b00      	cmp	r3, #0
 801872e:	d020      	beq.n	8018772 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018732:	889b      	ldrh	r3, [r3, #4]
 8018734:	b29a      	uxth	r2, r3
 8018736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018738:	88db      	ldrh	r3, [r3, #6]
 801873a:	b29b      	uxth	r3, r3
 801873c:	429a      	cmp	r2, r3
 801873e:	d307      	bcc.n	8018750 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018742:	88db      	ldrh	r3, [r3, #6]
 8018744:	b29a      	uxth	r2, r3
 8018746:	693b      	ldr	r3, [r7, #16]
 8018748:	889b      	ldrh	r3, [r3, #4]
 801874a:	b29b      	uxth	r3, r3
 801874c:	429a      	cmp	r2, r3
 801874e:	d902      	bls.n	8018756 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018750:	f04f 33ff 	mov.w	r3, #4294967295
 8018754:	e0de      	b.n	8018914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018758:	68ba      	ldr	r2, [r7, #8]
 801875a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801875e:	88db      	ldrh	r3, [r3, #6]
 8018760:	b29a      	uxth	r2, r3
 8018762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018764:	889b      	ldrh	r3, [r3, #4]
 8018766:	b29b      	uxth	r3, r3
 8018768:	429a      	cmp	r2, r3
 801876a:	d03d      	beq.n	80187e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801876c:	2300      	movs	r3, #0
 801876e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018770:	e03a      	b.n	80187e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018774:	88db      	ldrh	r3, [r3, #6]
 8018776:	b29a      	uxth	r2, r3
 8018778:	693b      	ldr	r3, [r7, #16]
 801877a:	889b      	ldrh	r3, [r3, #4]
 801877c:	b29b      	uxth	r3, r3
 801877e:	429a      	cmp	r2, r3
 8018780:	d902      	bls.n	8018788 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018782:	f04f 33ff 	mov.w	r3, #4294967295
 8018786:	e0c5      	b.n	8018914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	68ba      	ldr	r2, [r7, #8]
 801878c:	605a      	str	r2, [r3, #4]
      break;
 801878e:	e02b      	b.n	80187e8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018792:	889b      	ldrh	r3, [r3, #4]
 8018794:	b29a      	uxth	r2, r3
 8018796:	693b      	ldr	r3, [r7, #16]
 8018798:	889b      	ldrh	r3, [r3, #4]
 801879a:	b29b      	uxth	r3, r3
 801879c:	429a      	cmp	r2, r3
 801879e:	d102      	bne.n	80187a6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80187a0:	f04f 33ff 	mov.w	r3, #4294967295
 80187a4:	e0b6      	b.n	8018914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80187a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a8:	889b      	ldrh	r3, [r3, #4]
 80187aa:	b29a      	uxth	r2, r3
 80187ac:	693b      	ldr	r3, [r7, #16]
 80187ae:	88db      	ldrh	r3, [r3, #6]
 80187b0:	b29b      	uxth	r3, r3
 80187b2:	429a      	cmp	r2, r3
 80187b4:	d202      	bcs.n	80187bc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80187b6:	f04f 33ff 	mov.w	r3, #4294967295
 80187ba:	e0ab      	b.n	8018914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80187bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d009      	beq.n	80187d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80187c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c4:	88db      	ldrh	r3, [r3, #6]
 80187c6:	b29a      	uxth	r2, r3
 80187c8:	693b      	ldr	r3, [r7, #16]
 80187ca:	889b      	ldrh	r3, [r3, #4]
 80187cc:	b29b      	uxth	r3, r3
 80187ce:	429a      	cmp	r2, r3
 80187d0:	d001      	beq.n	80187d6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80187d2:	2300      	movs	r3, #0
 80187d4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80187d6:	693b      	ldr	r3, [r7, #16]
 80187d8:	681b      	ldr	r3, [r3, #0]
 80187da:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80187dc:	693b      	ldr	r3, [r7, #16]
 80187de:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80187e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d193      	bne.n	801870e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80187e6:	e000      	b.n	80187ea <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80187e8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80187ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d12d      	bne.n	801884c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80187f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d01c      	beq.n	8018830 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80187f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187f8:	88db      	ldrh	r3, [r3, #6]
 80187fa:	b29a      	uxth	r2, r3
 80187fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187fe:	889b      	ldrh	r3, [r3, #4]
 8018800:	b29b      	uxth	r3, r3
 8018802:	429a      	cmp	r2, r3
 8018804:	d906      	bls.n	8018814 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018806:	4b45      	ldr	r3, [pc, #276]	; (801891c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018808:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801880c:	4944      	ldr	r1, [pc, #272]	; (8018920 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801880e:	4845      	ldr	r0, [pc, #276]	; (8018924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018810:	f000 feac 	bl	801956c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018816:	68ba      	ldr	r2, [r7, #8]
 8018818:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801881c:	88db      	ldrh	r3, [r3, #6]
 801881e:	b29a      	uxth	r2, r3
 8018820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018822:	889b      	ldrh	r3, [r3, #4]
 8018824:	b29b      	uxth	r3, r3
 8018826:	429a      	cmp	r2, r3
 8018828:	d010      	beq.n	801884c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801882a:	2300      	movs	r3, #0
 801882c:	623b      	str	r3, [r7, #32]
 801882e:	e00d      	b.n	801884c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	685b      	ldr	r3, [r3, #4]
 8018834:	2b00      	cmp	r3, #0
 8018836:	d006      	beq.n	8018846 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018838:	4b38      	ldr	r3, [pc, #224]	; (801891c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801883a:	f240 12bf 	movw	r2, #447	; 0x1bf
 801883e:	493a      	ldr	r1, [pc, #232]	; (8018928 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018840:	4838      	ldr	r0, [pc, #224]	; (8018924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018842:	f000 fe93 	bl	801956c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	68ba      	ldr	r2, [r7, #8]
 801884a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	2b00      	cmp	r3, #0
 8018850:	d105      	bne.n	801885e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	7f9b      	ldrb	r3, [r3, #30]
 8018856:	f003 0301 	and.w	r3, r3, #1
 801885a:	2b00      	cmp	r3, #0
 801885c:	d059      	beq.n	8018912 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801885e:	6a3b      	ldr	r3, [r7, #32]
 8018860:	2b00      	cmp	r3, #0
 8018862:	d04f      	beq.n	8018904 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	685b      	ldr	r3, [r3, #4]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d006      	beq.n	801887a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801886c:	68fb      	ldr	r3, [r7, #12]
 801886e:	685b      	ldr	r3, [r3, #4]
 8018870:	685b      	ldr	r3, [r3, #4]
 8018872:	889b      	ldrh	r3, [r3, #4]
 8018874:	b29b      	uxth	r3, r3
 8018876:	2b00      	cmp	r3, #0
 8018878:	d002      	beq.n	8018880 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801887a:	2300      	movs	r3, #0
 801887c:	623b      	str	r3, [r7, #32]
 801887e:	e041      	b.n	8018904 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018882:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801888a:	e012      	b.n	80188b2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801888e:	685b      	ldr	r3, [r3, #4]
 8018890:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018894:	88db      	ldrh	r3, [r3, #6]
 8018896:	b29a      	uxth	r2, r3
 8018898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801889a:	889b      	ldrh	r3, [r3, #4]
 801889c:	b29b      	uxth	r3, r3
 801889e:	429a      	cmp	r2, r3
 80188a0:	d002      	beq.n	80188a8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80188a2:	2300      	movs	r3, #0
 80188a4:	623b      	str	r3, [r7, #32]
            break;
 80188a6:	e007      	b.n	80188b8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80188a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188aa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80188ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80188b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d1e9      	bne.n	801888c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80188b8:	6a3b      	ldr	r3, [r7, #32]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d022      	beq.n	8018904 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80188be:	68fb      	ldr	r3, [r7, #12]
 80188c0:	685b      	ldr	r3, [r3, #4]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d106      	bne.n	80188d4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80188c6:	4b15      	ldr	r3, [pc, #84]	; (801891c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80188c8:	f240 12df 	movw	r2, #479	; 0x1df
 80188cc:	4917      	ldr	r1, [pc, #92]	; (801892c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80188ce:	4815      	ldr	r0, [pc, #84]	; (8018924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80188d0:	f000 fe4c 	bl	801956c <iprintf>
          LWIP_ASSERT("sanity check",
 80188d4:	68fb      	ldr	r3, [r7, #12]
 80188d6:	685b      	ldr	r3, [r3, #4]
 80188d8:	685b      	ldr	r3, [r3, #4]
 80188da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80188dc:	429a      	cmp	r2, r3
 80188de:	d106      	bne.n	80188ee <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80188e0:	4b0e      	ldr	r3, [pc, #56]	; (801891c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80188e2:	f240 12e1 	movw	r2, #481	; 0x1e1
 80188e6:	4911      	ldr	r1, [pc, #68]	; (801892c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80188e8:	480e      	ldr	r0, [pc, #56]	; (8018924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80188ea:	f000 fe3f 	bl	801956c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80188ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d006      	beq.n	8018904 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80188f6:	4b09      	ldr	r3, [pc, #36]	; (801891c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80188f8:	f240 12e3 	movw	r2, #483	; 0x1e3
 80188fc:	490c      	ldr	r1, [pc, #48]	; (8018930 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80188fe:	4809      	ldr	r0, [pc, #36]	; (8018924 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018900:	f000 fe34 	bl	801956c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018904:	6a3b      	ldr	r3, [r7, #32]
 8018906:	2b00      	cmp	r3, #0
 8018908:	bf14      	ite	ne
 801890a:	2301      	movne	r3, #1
 801890c:	2300      	moveq	r3, #0
 801890e:	b2db      	uxtb	r3, r3
 8018910:	e000      	b.n	8018914 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018912:	2300      	movs	r3, #0
}
 8018914:	4618      	mov	r0, r3
 8018916:	3730      	adds	r7, #48	; 0x30
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}
 801891c:	0801e160 	.word	0x0801e160
 8018920:	0801e244 	.word	0x0801e244
 8018924:	0801e1a8 	.word	0x0801e1a8
 8018928:	0801e264 	.word	0x0801e264
 801892c:	0801e29c 	.word	0x0801e29c
 8018930:	0801e2ac 	.word	0x0801e2ac

08018934 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b08e      	sub	sp, #56	; 0x38
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	685b      	ldr	r3, [r3, #4]
 8018940:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018944:	781b      	ldrb	r3, [r3, #0]
 8018946:	f003 030f 	and.w	r3, r3, #15
 801894a:	b2db      	uxtb	r3, r3
 801894c:	009b      	lsls	r3, r3, #2
 801894e:	b2db      	uxtb	r3, r3
 8018950:	2b14      	cmp	r3, #20
 8018952:	f040 8167 	bne.w	8018c24 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018958:	88db      	ldrh	r3, [r3, #6]
 801895a:	b29b      	uxth	r3, r3
 801895c:	4618      	mov	r0, r3
 801895e:	f7f3 fcdd 	bl	800c31c <lwip_htons>
 8018962:	4603      	mov	r3, r0
 8018964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018968:	b29b      	uxth	r3, r3
 801896a:	00db      	lsls	r3, r3, #3
 801896c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018970:	885b      	ldrh	r3, [r3, #2]
 8018972:	b29b      	uxth	r3, r3
 8018974:	4618      	mov	r0, r3
 8018976:	f7f3 fcd1 	bl	800c31c <lwip_htons>
 801897a:	4603      	mov	r3, r0
 801897c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801897e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018980:	781b      	ldrb	r3, [r3, #0]
 8018982:	f003 030f 	and.w	r3, r3, #15
 8018986:	b2db      	uxtb	r3, r3
 8018988:	009b      	lsls	r3, r3, #2
 801898a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801898e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018992:	b29b      	uxth	r3, r3
 8018994:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018996:	429a      	cmp	r2, r3
 8018998:	f0c0 8146 	bcc.w	8018c28 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801899c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80189a0:	b29b      	uxth	r3, r3
 80189a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80189a4:	1ad3      	subs	r3, r2, r3
 80189a6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80189a8:	6878      	ldr	r0, [r7, #4]
 80189aa:	f7f5 f92f 	bl	800dc0c <pbuf_clen>
 80189ae:	4603      	mov	r3, r0
 80189b0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80189b2:	4ba3      	ldr	r3, [pc, #652]	; (8018c40 <ip4_reass+0x30c>)
 80189b4:	881b      	ldrh	r3, [r3, #0]
 80189b6:	461a      	mov	r2, r3
 80189b8:	8c3b      	ldrh	r3, [r7, #32]
 80189ba:	4413      	add	r3, r2
 80189bc:	2b0a      	cmp	r3, #10
 80189be:	dd10      	ble.n	80189e2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80189c0:	8c3b      	ldrh	r3, [r7, #32]
 80189c2:	4619      	mov	r1, r3
 80189c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189c6:	f7ff fd81 	bl	80184cc <ip_reass_remove_oldest_datagram>
 80189ca:	4603      	mov	r3, r0
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	f000 812d 	beq.w	8018c2c <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80189d2:	4b9b      	ldr	r3, [pc, #620]	; (8018c40 <ip4_reass+0x30c>)
 80189d4:	881b      	ldrh	r3, [r3, #0]
 80189d6:	461a      	mov	r2, r3
 80189d8:	8c3b      	ldrh	r3, [r7, #32]
 80189da:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80189dc:	2b0a      	cmp	r3, #10
 80189de:	f300 8125 	bgt.w	8018c2c <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80189e2:	4b98      	ldr	r3, [pc, #608]	; (8018c44 <ip4_reass+0x310>)
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	633b      	str	r3, [r7, #48]	; 0x30
 80189e8:	e015      	b.n	8018a16 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80189ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189ec:	695a      	ldr	r2, [r3, #20]
 80189ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189f0:	68db      	ldr	r3, [r3, #12]
 80189f2:	429a      	cmp	r2, r3
 80189f4:	d10c      	bne.n	8018a10 <ip4_reass+0xdc>
 80189f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189f8:	699a      	ldr	r2, [r3, #24]
 80189fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189fc:	691b      	ldr	r3, [r3, #16]
 80189fe:	429a      	cmp	r2, r3
 8018a00:	d106      	bne.n	8018a10 <ip4_reass+0xdc>
 8018a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a04:	899a      	ldrh	r2, [r3, #12]
 8018a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a08:	889b      	ldrh	r3, [r3, #4]
 8018a0a:	b29b      	uxth	r3, r3
 8018a0c:	429a      	cmp	r2, r3
 8018a0e:	d006      	beq.n	8018a1e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	633b      	str	r3, [r7, #48]	; 0x30
 8018a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d1e6      	bne.n	80189ea <ip4_reass+0xb6>
 8018a1c:	e000      	b.n	8018a20 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018a1e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d109      	bne.n	8018a3a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018a26:	8c3b      	ldrh	r3, [r7, #32]
 8018a28:	4619      	mov	r1, r3
 8018a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a2c:	f7ff fdb0 	bl	8018590 <ip_reass_enqueue_new_datagram>
 8018a30:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d11c      	bne.n	8018a72 <ip4_reass+0x13e>
      goto nullreturn;
 8018a38:	e0f9      	b.n	8018c2e <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a3c:	88db      	ldrh	r3, [r3, #6]
 8018a3e:	b29b      	uxth	r3, r3
 8018a40:	4618      	mov	r0, r3
 8018a42:	f7f3 fc6b 	bl	800c31c <lwip_htons>
 8018a46:	4603      	mov	r3, r0
 8018a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d110      	bne.n	8018a72 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a52:	89db      	ldrh	r3, [r3, #14]
 8018a54:	4618      	mov	r0, r3
 8018a56:	f7f3 fc61 	bl	800c31c <lwip_htons>
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d006      	beq.n	8018a72 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a66:	3308      	adds	r3, #8
 8018a68:	2214      	movs	r2, #20
 8018a6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f000 fd50 	bl	8019512 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a74:	88db      	ldrh	r3, [r3, #6]
 8018a76:	b29b      	uxth	r3, r3
 8018a78:	f003 0320 	and.w	r3, r3, #32
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	bf0c      	ite	eq
 8018a80:	2301      	moveq	r3, #1
 8018a82:	2300      	movne	r3, #0
 8018a84:	b2db      	uxtb	r3, r3
 8018a86:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018a88:	69fb      	ldr	r3, [r7, #28]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d00e      	beq.n	8018aac <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018a8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a92:	4413      	add	r3, r2
 8018a94:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018a96:	8b7a      	ldrh	r2, [r7, #26]
 8018a98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018a9a:	429a      	cmp	r2, r3
 8018a9c:	f0c0 80a0 	bcc.w	8018be0 <ip4_reass+0x2ac>
 8018aa0:	8b7b      	ldrh	r3, [r7, #26]
 8018aa2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018aa6:	4293      	cmp	r3, r2
 8018aa8:	f200 809a 	bhi.w	8018be0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018aac:	69fa      	ldr	r2, [r7, #28]
 8018aae:	6879      	ldr	r1, [r7, #4]
 8018ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ab2:	f7ff fdd5 	bl	8018660 <ip_reass_chain_frag_into_datagram_and_validate>
 8018ab6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018ab8:	697b      	ldr	r3, [r7, #20]
 8018aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018abe:	f000 8091 	beq.w	8018be4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018ac2:	4b5f      	ldr	r3, [pc, #380]	; (8018c40 <ip4_reass+0x30c>)
 8018ac4:	881a      	ldrh	r2, [r3, #0]
 8018ac6:	8c3b      	ldrh	r3, [r7, #32]
 8018ac8:	4413      	add	r3, r2
 8018aca:	b29a      	uxth	r2, r3
 8018acc:	4b5c      	ldr	r3, [pc, #368]	; (8018c40 <ip4_reass+0x30c>)
 8018ace:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018ad0:	69fb      	ldr	r3, [r7, #28]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d00d      	beq.n	8018af2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018ad6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ada:	4413      	add	r3, r2
 8018adc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ae0:	8a7a      	ldrh	r2, [r7, #18]
 8018ae2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ae6:	7f9b      	ldrb	r3, [r3, #30]
 8018ae8:	f043 0301 	orr.w	r3, r3, #1
 8018aec:	b2da      	uxtb	r2, r3
 8018aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018af0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018af2:	697b      	ldr	r3, [r7, #20]
 8018af4:	2b01      	cmp	r3, #1
 8018af6:	d171      	bne.n	8018bdc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018afa:	8b9b      	ldrh	r3, [r3, #28]
 8018afc:	3314      	adds	r3, #20
 8018afe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b02:	685b      	ldr	r3, [r3, #4]
 8018b04:	685b      	ldr	r3, [r3, #4]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b0c:	685b      	ldr	r3, [r3, #4]
 8018b0e:	685b      	ldr	r3, [r3, #4]
 8018b10:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b14:	3308      	adds	r3, #8
 8018b16:	2214      	movs	r2, #20
 8018b18:	4619      	mov	r1, r3
 8018b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b1c:	f000 fcf9 	bl	8019512 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018b20:	8a3b      	ldrh	r3, [r7, #16]
 8018b22:	4618      	mov	r0, r3
 8018b24:	f7f3 fbfa 	bl	800c31c <lwip_htons>
 8018b28:	4603      	mov	r3, r0
 8018b2a:	461a      	mov	r2, r3
 8018b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b2e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b32:	2200      	movs	r2, #0
 8018b34:	719a      	strb	r2, [r3, #6]
 8018b36:	2200      	movs	r2, #0
 8018b38:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b3c:	2200      	movs	r2, #0
 8018b3e:	729a      	strb	r2, [r3, #10]
 8018b40:	2200      	movs	r2, #0
 8018b42:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b46:	685b      	ldr	r3, [r3, #4]
 8018b48:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018b4a:	e00d      	b.n	8018b68 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b4e:	685b      	ldr	r3, [r3, #4]
 8018b50:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018b52:	2114      	movs	r1, #20
 8018b54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018b56:	f7f4 ff45 	bl	800d9e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018b5a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018b5c:	6878      	ldr	r0, [r7, #4]
 8018b5e:	f7f5 f895 	bl	800dc8c <pbuf_cat>
      r = iprh->next_pbuf;
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	681b      	ldr	r3, [r3, #0]
 8018b66:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d1ee      	bne.n	8018b4c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018b6e:	4b35      	ldr	r3, [pc, #212]	; (8018c44 <ip4_reass+0x310>)
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b74:	429a      	cmp	r2, r3
 8018b76:	d102      	bne.n	8018b7e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018b78:	2300      	movs	r3, #0
 8018b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b7c:	e010      	b.n	8018ba0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018b7e:	4b31      	ldr	r3, [pc, #196]	; (8018c44 <ip4_reass+0x310>)
 8018b80:	681b      	ldr	r3, [r3, #0]
 8018b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b84:	e007      	b.n	8018b96 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b8c:	429a      	cmp	r2, r3
 8018b8e:	d006      	beq.n	8018b9e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d1f4      	bne.n	8018b86 <ip4_reass+0x252>
 8018b9c:	e000      	b.n	8018ba0 <ip4_reass+0x26c>
          break;
 8018b9e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018ba2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ba4:	f7ff fd2e 	bl	8018604 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018ba8:	6878      	ldr	r0, [r7, #4]
 8018baa:	f7f5 f82f 	bl	800dc0c <pbuf_clen>
 8018bae:	4603      	mov	r3, r0
 8018bb0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018bb2:	4b23      	ldr	r3, [pc, #140]	; (8018c40 <ip4_reass+0x30c>)
 8018bb4:	881b      	ldrh	r3, [r3, #0]
 8018bb6:	8c3a      	ldrh	r2, [r7, #32]
 8018bb8:	429a      	cmp	r2, r3
 8018bba:	d906      	bls.n	8018bca <ip4_reass+0x296>
 8018bbc:	4b22      	ldr	r3, [pc, #136]	; (8018c48 <ip4_reass+0x314>)
 8018bbe:	f240 229b 	movw	r2, #667	; 0x29b
 8018bc2:	4922      	ldr	r1, [pc, #136]	; (8018c4c <ip4_reass+0x318>)
 8018bc4:	4822      	ldr	r0, [pc, #136]	; (8018c50 <ip4_reass+0x31c>)
 8018bc6:	f000 fcd1 	bl	801956c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018bca:	4b1d      	ldr	r3, [pc, #116]	; (8018c40 <ip4_reass+0x30c>)
 8018bcc:	881a      	ldrh	r2, [r3, #0]
 8018bce:	8c3b      	ldrh	r3, [r7, #32]
 8018bd0:	1ad3      	subs	r3, r2, r3
 8018bd2:	b29a      	uxth	r2, r3
 8018bd4:	4b1a      	ldr	r3, [pc, #104]	; (8018c40 <ip4_reass+0x30c>)
 8018bd6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	e02c      	b.n	8018c36 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018bdc:	2300      	movs	r3, #0
 8018bde:	e02a      	b.n	8018c36 <ip4_reass+0x302>

nullreturn_ipr:
 8018be0:	bf00      	nop
 8018be2:	e000      	b.n	8018be6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8018be4:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	d106      	bne.n	8018bfa <ip4_reass+0x2c6>
 8018bec:	4b16      	ldr	r3, [pc, #88]	; (8018c48 <ip4_reass+0x314>)
 8018bee:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018bf2:	4918      	ldr	r1, [pc, #96]	; (8018c54 <ip4_reass+0x320>)
 8018bf4:	4816      	ldr	r0, [pc, #88]	; (8018c50 <ip4_reass+0x31c>)
 8018bf6:	f000 fcb9 	bl	801956c <iprintf>
  if (ipr->p == NULL) {
 8018bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018bfc:	685b      	ldr	r3, [r3, #4]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d114      	bne.n	8018c2c <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018c02:	4b10      	ldr	r3, [pc, #64]	; (8018c44 <ip4_reass+0x310>)
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018c08:	429a      	cmp	r2, r3
 8018c0a:	d006      	beq.n	8018c1a <ip4_reass+0x2e6>
 8018c0c:	4b0e      	ldr	r3, [pc, #56]	; (8018c48 <ip4_reass+0x314>)
 8018c0e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018c12:	4911      	ldr	r1, [pc, #68]	; (8018c58 <ip4_reass+0x324>)
 8018c14:	480e      	ldr	r0, [pc, #56]	; (8018c50 <ip4_reass+0x31c>)
 8018c16:	f000 fca9 	bl	801956c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018c1a:	2100      	movs	r1, #0
 8018c1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018c1e:	f7ff fcf1 	bl	8018604 <ip_reass_dequeue_datagram>
 8018c22:	e004      	b.n	8018c2e <ip4_reass+0x2fa>
    goto nullreturn;
 8018c24:	bf00      	nop
 8018c26:	e002      	b.n	8018c2e <ip4_reass+0x2fa>
    goto nullreturn;
 8018c28:	bf00      	nop
 8018c2a:	e000      	b.n	8018c2e <ip4_reass+0x2fa>
  }

nullreturn:
 8018c2c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018c2e:	6878      	ldr	r0, [r7, #4]
 8018c30:	f7f4 ff5e 	bl	800daf0 <pbuf_free>
  return NULL;
 8018c34:	2300      	movs	r3, #0
}
 8018c36:	4618      	mov	r0, r3
 8018c38:	3738      	adds	r7, #56	; 0x38
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	bd80      	pop	{r7, pc}
 8018c3e:	bf00      	nop
 8018c40:	2001039c 	.word	0x2001039c
 8018c44:	20010398 	.word	0x20010398
 8018c48:	0801e160 	.word	0x0801e160
 8018c4c:	0801e2d0 	.word	0x0801e2d0
 8018c50:	0801e1a8 	.word	0x0801e1a8
 8018c54:	0801e2ec 	.word	0x0801e2ec
 8018c58:	0801e2f8 	.word	0x0801e2f8

08018c5c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018c60:	2005      	movs	r0, #5
 8018c62:	f7f4 f847 	bl	800ccf4 <memp_malloc>
 8018c66:	4603      	mov	r3, r0
}
 8018c68:	4618      	mov	r0, r3
 8018c6a:	bd80      	pop	{r7, pc}

08018c6c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b082      	sub	sp, #8
 8018c70:	af00      	add	r7, sp, #0
 8018c72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	2b00      	cmp	r3, #0
 8018c78:	d106      	bne.n	8018c88 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018c7a:	4b07      	ldr	r3, [pc, #28]	; (8018c98 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018c7c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018c80:	4906      	ldr	r1, [pc, #24]	; (8018c9c <ip_frag_free_pbuf_custom_ref+0x30>)
 8018c82:	4807      	ldr	r0, [pc, #28]	; (8018ca0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018c84:	f000 fc72 	bl	801956c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018c88:	6879      	ldr	r1, [r7, #4]
 8018c8a:	2005      	movs	r0, #5
 8018c8c:	f7f4 f884 	bl	800cd98 <memp_free>
}
 8018c90:	bf00      	nop
 8018c92:	3708      	adds	r7, #8
 8018c94:	46bd      	mov	sp, r7
 8018c96:	bd80      	pop	{r7, pc}
 8018c98:	0801e160 	.word	0x0801e160
 8018c9c:	0801e318 	.word	0x0801e318
 8018ca0:	0801e1a8 	.word	0x0801e1a8

08018ca4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b084      	sub	sp, #16
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d106      	bne.n	8018cc4 <ipfrag_free_pbuf_custom+0x20>
 8018cb6:	4b11      	ldr	r3, [pc, #68]	; (8018cfc <ipfrag_free_pbuf_custom+0x58>)
 8018cb8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018cbc:	4910      	ldr	r1, [pc, #64]	; (8018d00 <ipfrag_free_pbuf_custom+0x5c>)
 8018cbe:	4811      	ldr	r0, [pc, #68]	; (8018d04 <ipfrag_free_pbuf_custom+0x60>)
 8018cc0:	f000 fc54 	bl	801956c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018cc4:	68fa      	ldr	r2, [r7, #12]
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	429a      	cmp	r2, r3
 8018cca:	d006      	beq.n	8018cda <ipfrag_free_pbuf_custom+0x36>
 8018ccc:	4b0b      	ldr	r3, [pc, #44]	; (8018cfc <ipfrag_free_pbuf_custom+0x58>)
 8018cce:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018cd2:	490d      	ldr	r1, [pc, #52]	; (8018d08 <ipfrag_free_pbuf_custom+0x64>)
 8018cd4:	480b      	ldr	r0, [pc, #44]	; (8018d04 <ipfrag_free_pbuf_custom+0x60>)
 8018cd6:	f000 fc49 	bl	801956c <iprintf>
  if (pcr->original != NULL) {
 8018cda:	68fb      	ldr	r3, [r7, #12]
 8018cdc:	695b      	ldr	r3, [r3, #20]
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d004      	beq.n	8018cec <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	695b      	ldr	r3, [r3, #20]
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	f7f4 ff02 	bl	800daf0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018cec:	68f8      	ldr	r0, [r7, #12]
 8018cee:	f7ff ffbd 	bl	8018c6c <ip_frag_free_pbuf_custom_ref>
}
 8018cf2:	bf00      	nop
 8018cf4:	3710      	adds	r7, #16
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	bd80      	pop	{r7, pc}
 8018cfa:	bf00      	nop
 8018cfc:	0801e160 	.word	0x0801e160
 8018d00:	0801e324 	.word	0x0801e324
 8018d04:	0801e1a8 	.word	0x0801e1a8
 8018d08:	0801e330 	.word	0x0801e330

08018d0c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018d0c:	b580      	push	{r7, lr}
 8018d0e:	b094      	sub	sp, #80	; 0x50
 8018d10:	af02      	add	r7, sp, #8
 8018d12:	60f8      	str	r0, [r7, #12]
 8018d14:	60b9      	str	r1, [r7, #8]
 8018d16:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018d18:	2300      	movs	r3, #0
 8018d1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018d1e:	68bb      	ldr	r3, [r7, #8]
 8018d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018d22:	3b14      	subs	r3, #20
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	da00      	bge.n	8018d2a <ip4_frag+0x1e>
 8018d28:	3307      	adds	r3, #7
 8018d2a:	10db      	asrs	r3, r3, #3
 8018d2c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018d2e:	2314      	movs	r3, #20
 8018d30:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	685b      	ldr	r3, [r3, #4]
 8018d36:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018d3a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d3e:	781b      	ldrb	r3, [r3, #0]
 8018d40:	f003 030f 	and.w	r3, r3, #15
 8018d44:	b2db      	uxtb	r3, r3
 8018d46:	009b      	lsls	r3, r3, #2
 8018d48:	b2db      	uxtb	r3, r3
 8018d4a:	2b14      	cmp	r3, #20
 8018d4c:	d002      	beq.n	8018d54 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018d4e:	f06f 0305 	mvn.w	r3, #5
 8018d52:	e10f      	b.n	8018f74 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	895b      	ldrh	r3, [r3, #10]
 8018d58:	2b13      	cmp	r3, #19
 8018d5a:	d809      	bhi.n	8018d70 <ip4_frag+0x64>
 8018d5c:	4b87      	ldr	r3, [pc, #540]	; (8018f7c <ip4_frag+0x270>)
 8018d5e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018d62:	4987      	ldr	r1, [pc, #540]	; (8018f80 <ip4_frag+0x274>)
 8018d64:	4887      	ldr	r0, [pc, #540]	; (8018f84 <ip4_frag+0x278>)
 8018d66:	f000 fc01 	bl	801956c <iprintf>
 8018d6a:	f06f 0305 	mvn.w	r3, #5
 8018d6e:	e101      	b.n	8018f74 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d72:	88db      	ldrh	r3, [r3, #6]
 8018d74:	b29b      	uxth	r3, r3
 8018d76:	4618      	mov	r0, r3
 8018d78:	f7f3 fad0 	bl	800c31c <lwip_htons>
 8018d7c:	4603      	mov	r3, r0
 8018d7e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018d80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018d82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018d86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018d8a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018d90:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	891b      	ldrh	r3, [r3, #8]
 8018d96:	3b14      	subs	r3, #20
 8018d98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018d9c:	e0e0      	b.n	8018f60 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018d9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018da0:	00db      	lsls	r3, r3, #3
 8018da2:	b29b      	uxth	r3, r3
 8018da4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018da8:	4293      	cmp	r3, r2
 8018daa:	bf28      	it	cs
 8018dac:	4613      	movcs	r3, r2
 8018dae:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018db0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018db4:	2114      	movs	r1, #20
 8018db6:	200e      	movs	r0, #14
 8018db8:	f7f4 fbba 	bl	800d530 <pbuf_alloc>
 8018dbc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	f000 80d4 	beq.w	8018f6e <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dc8:	895b      	ldrh	r3, [r3, #10]
 8018dca:	2b13      	cmp	r3, #19
 8018dcc:	d806      	bhi.n	8018ddc <ip4_frag+0xd0>
 8018dce:	4b6b      	ldr	r3, [pc, #428]	; (8018f7c <ip4_frag+0x270>)
 8018dd0:	f240 3225 	movw	r2, #805	; 0x325
 8018dd4:	496c      	ldr	r1, [pc, #432]	; (8018f88 <ip4_frag+0x27c>)
 8018dd6:	486b      	ldr	r0, [pc, #428]	; (8018f84 <ip4_frag+0x278>)
 8018dd8:	f000 fbc8 	bl	801956c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dde:	685b      	ldr	r3, [r3, #4]
 8018de0:	2214      	movs	r2, #20
 8018de2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018de4:	4618      	mov	r0, r3
 8018de6:	f000 fb94 	bl	8019512 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dec:	685b      	ldr	r3, [r3, #4]
 8018dee:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018df0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018df2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018df6:	e064      	b.n	8018ec2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	895a      	ldrh	r2, [r3, #10]
 8018dfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018dfe:	1ad3      	subs	r3, r2, r3
 8018e00:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	895b      	ldrh	r3, [r3, #10]
 8018e06:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018e08:	429a      	cmp	r2, r3
 8018e0a:	d906      	bls.n	8018e1a <ip4_frag+0x10e>
 8018e0c:	4b5b      	ldr	r3, [pc, #364]	; (8018f7c <ip4_frag+0x270>)
 8018e0e:	f240 322d 	movw	r2, #813	; 0x32d
 8018e12:	495e      	ldr	r1, [pc, #376]	; (8018f8c <ip4_frag+0x280>)
 8018e14:	485b      	ldr	r0, [pc, #364]	; (8018f84 <ip4_frag+0x278>)
 8018e16:	f000 fba9 	bl	801956c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018e1a:	8bfa      	ldrh	r2, [r7, #30]
 8018e1c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018e20:	4293      	cmp	r3, r2
 8018e22:	bf28      	it	cs
 8018e24:	4613      	movcs	r3, r2
 8018e26:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018e2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d105      	bne.n	8018e3e <ip4_frag+0x132>
        poff = 0;
 8018e32:	2300      	movs	r3, #0
 8018e34:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	60fb      	str	r3, [r7, #12]
        continue;
 8018e3c:	e041      	b.n	8018ec2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018e3e:	f7ff ff0d 	bl	8018c5c <ip_frag_alloc_pbuf_custom_ref>
 8018e42:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018e44:	69bb      	ldr	r3, [r7, #24]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d103      	bne.n	8018e52 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018e4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e4c:	f7f4 fe50 	bl	800daf0 <pbuf_free>
        goto memerr;
 8018e50:	e08e      	b.n	8018f70 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018e52:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018e58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018e5a:	4413      	add	r3, r2
 8018e5c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018e60:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018e64:	9201      	str	r2, [sp, #4]
 8018e66:	9300      	str	r3, [sp, #0]
 8018e68:	4603      	mov	r3, r0
 8018e6a:	2241      	movs	r2, #65	; 0x41
 8018e6c:	2000      	movs	r0, #0
 8018e6e:	f7f4 fc85 	bl	800d77c <pbuf_alloced_custom>
 8018e72:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018e74:	697b      	ldr	r3, [r7, #20]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d106      	bne.n	8018e88 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018e7a:	69b8      	ldr	r0, [r7, #24]
 8018e7c:	f7ff fef6 	bl	8018c6c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e82:	f7f4 fe35 	bl	800daf0 <pbuf_free>
        goto memerr;
 8018e86:	e073      	b.n	8018f70 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8018e88:	68f8      	ldr	r0, [r7, #12]
 8018e8a:	f7f4 fed7 	bl	800dc3c <pbuf_ref>
      pcr->original = p;
 8018e8e:	69bb      	ldr	r3, [r7, #24]
 8018e90:	68fa      	ldr	r2, [r7, #12]
 8018e92:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018e94:	69bb      	ldr	r3, [r7, #24]
 8018e96:	4a3e      	ldr	r2, [pc, #248]	; (8018f90 <ip4_frag+0x284>)
 8018e98:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018e9a:	6979      	ldr	r1, [r7, #20]
 8018e9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018e9e:	f7f4 fef5 	bl	800dc8c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018ea2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018ea6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018eaa:	1ad3      	subs	r3, r2, r3
 8018eac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018eb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d004      	beq.n	8018ec2 <ip4_frag+0x1b6>
        poff = 0;
 8018eb8:	2300      	movs	r3, #0
 8018eba:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018ec2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	d196      	bne.n	8018df8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018eca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018ecc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018ed0:	4413      	add	r3, r2
 8018ed2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018ed4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018ed8:	68bb      	ldr	r3, [r7, #8]
 8018eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018edc:	3b14      	subs	r3, #20
 8018ede:	429a      	cmp	r2, r3
 8018ee0:	bfd4      	ite	le
 8018ee2:	2301      	movle	r3, #1
 8018ee4:	2300      	movgt	r3, #0
 8018ee6:	b2db      	uxtb	r3, r3
 8018ee8:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018eea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018eee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018ef2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018ef4:	6a3b      	ldr	r3, [r7, #32]
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d002      	beq.n	8018f00 <ip4_frag+0x1f4>
 8018efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d003      	beq.n	8018f08 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018f00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018f02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018f06:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018f08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	f7f3 fa06 	bl	800c31c <lwip_htons>
 8018f10:	4603      	mov	r3, r0
 8018f12:	461a      	mov	r2, r3
 8018f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f16:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018f18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018f1a:	3314      	adds	r3, #20
 8018f1c:	b29b      	uxth	r3, r3
 8018f1e:	4618      	mov	r0, r3
 8018f20:	f7f3 f9fc 	bl	800c31c <lwip_htons>
 8018f24:	4603      	mov	r3, r0
 8018f26:	461a      	mov	r2, r3
 8018f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f2a:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f2e:	2200      	movs	r2, #0
 8018f30:	729a      	strb	r2, [r3, #10]
 8018f32:	2200      	movs	r2, #0
 8018f34:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018f36:	68bb      	ldr	r3, [r7, #8]
 8018f38:	695b      	ldr	r3, [r3, #20]
 8018f3a:	687a      	ldr	r2, [r7, #4]
 8018f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018f3e:	68b8      	ldr	r0, [r7, #8]
 8018f40:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018f44:	f7f4 fdd4 	bl	800daf0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018f48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018f4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018f4e:	1ad3      	subs	r3, r2, r3
 8018f50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018f54:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018f58:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018f5a:	4413      	add	r3, r2
 8018f5c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018f60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	f47f af1a 	bne.w	8018d9e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018f6a:	2300      	movs	r3, #0
 8018f6c:	e002      	b.n	8018f74 <ip4_frag+0x268>
      goto memerr;
 8018f6e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018f74:	4618      	mov	r0, r3
 8018f76:	3748      	adds	r7, #72	; 0x48
 8018f78:	46bd      	mov	sp, r7
 8018f7a:	bd80      	pop	{r7, pc}
 8018f7c:	0801e160 	.word	0x0801e160
 8018f80:	0801e33c 	.word	0x0801e33c
 8018f84:	0801e1a8 	.word	0x0801e1a8
 8018f88:	0801e358 	.word	0x0801e358
 8018f8c:	0801e378 	.word	0x0801e378
 8018f90:	08018ca5 	.word	0x08018ca5

08018f94 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018f94:	b580      	push	{r7, lr}
 8018f96:	b086      	sub	sp, #24
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	6078      	str	r0, [r7, #4]
 8018f9c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018f9e:	230e      	movs	r3, #14
 8018fa0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	895b      	ldrh	r3, [r3, #10]
 8018fa6:	2b0e      	cmp	r3, #14
 8018fa8:	d96e      	bls.n	8019088 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	7bdb      	ldrb	r3, [r3, #15]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d106      	bne.n	8018fc0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018fb2:	683b      	ldr	r3, [r7, #0]
 8018fb4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018fb8:	3301      	adds	r3, #1
 8018fba:	b2da      	uxtb	r2, r3
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	685b      	ldr	r3, [r3, #4]
 8018fc4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018fc6:	693b      	ldr	r3, [r7, #16]
 8018fc8:	7b1a      	ldrb	r2, [r3, #12]
 8018fca:	7b5b      	ldrb	r3, [r3, #13]
 8018fcc:	021b      	lsls	r3, r3, #8
 8018fce:	4313      	orrs	r3, r2
 8018fd0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018fd2:	693b      	ldr	r3, [r7, #16]
 8018fd4:	781b      	ldrb	r3, [r3, #0]
 8018fd6:	f003 0301 	and.w	r3, r3, #1
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d023      	beq.n	8019026 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018fde:	693b      	ldr	r3, [r7, #16]
 8018fe0:	781b      	ldrb	r3, [r3, #0]
 8018fe2:	2b01      	cmp	r3, #1
 8018fe4:	d10f      	bne.n	8019006 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018fe6:	693b      	ldr	r3, [r7, #16]
 8018fe8:	785b      	ldrb	r3, [r3, #1]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d11b      	bne.n	8019026 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018fee:	693b      	ldr	r3, [r7, #16]
 8018ff0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018ff2:	2b5e      	cmp	r3, #94	; 0x5e
 8018ff4:	d117      	bne.n	8019026 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	7b5b      	ldrb	r3, [r3, #13]
 8018ffa:	f043 0310 	orr.w	r3, r3, #16
 8018ffe:	b2da      	uxtb	r2, r3
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	735a      	strb	r2, [r3, #13]
 8019004:	e00f      	b.n	8019026 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019006:	693b      	ldr	r3, [r7, #16]
 8019008:	2206      	movs	r2, #6
 801900a:	4928      	ldr	r1, [pc, #160]	; (80190ac <ethernet_input+0x118>)
 801900c:	4618      	mov	r0, r3
 801900e:	f000 fa71 	bl	80194f4 <memcmp>
 8019012:	4603      	mov	r3, r0
 8019014:	2b00      	cmp	r3, #0
 8019016:	d106      	bne.n	8019026 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	7b5b      	ldrb	r3, [r3, #13]
 801901c:	f043 0308 	orr.w	r3, r3, #8
 8019020:	b2da      	uxtb	r2, r3
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019026:	89fb      	ldrh	r3, [r7, #14]
 8019028:	2b08      	cmp	r3, #8
 801902a:	d003      	beq.n	8019034 <ethernet_input+0xa0>
 801902c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019030:	d014      	beq.n	801905c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019032:	e032      	b.n	801909a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019034:	683b      	ldr	r3, [r7, #0]
 8019036:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801903a:	f003 0308 	and.w	r3, r3, #8
 801903e:	2b00      	cmp	r3, #0
 8019040:	d024      	beq.n	801908c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019042:	8afb      	ldrh	r3, [r7, #22]
 8019044:	4619      	mov	r1, r3
 8019046:	6878      	ldr	r0, [r7, #4]
 8019048:	f7f4 fccc 	bl	800d9e4 <pbuf_remove_header>
 801904c:	4603      	mov	r3, r0
 801904e:	2b00      	cmp	r3, #0
 8019050:	d11e      	bne.n	8019090 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019052:	6839      	ldr	r1, [r7, #0]
 8019054:	6878      	ldr	r0, [r7, #4]
 8019056:	f7fe ff0f 	bl	8017e78 <ip4_input>
      break;
 801905a:	e013      	b.n	8019084 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801905c:	683b      	ldr	r3, [r7, #0]
 801905e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019062:	f003 0308 	and.w	r3, r3, #8
 8019066:	2b00      	cmp	r3, #0
 8019068:	d014      	beq.n	8019094 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801906a:	8afb      	ldrh	r3, [r7, #22]
 801906c:	4619      	mov	r1, r3
 801906e:	6878      	ldr	r0, [r7, #4]
 8019070:	f7f4 fcb8 	bl	800d9e4 <pbuf_remove_header>
 8019074:	4603      	mov	r3, r0
 8019076:	2b00      	cmp	r3, #0
 8019078:	d10e      	bne.n	8019098 <ethernet_input+0x104>
        etharp_input(p, netif);
 801907a:	6839      	ldr	r1, [r7, #0]
 801907c:	6878      	ldr	r0, [r7, #4]
 801907e:	f7fe f8ab 	bl	80171d8 <etharp_input>
      break;
 8019082:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019084:	2300      	movs	r3, #0
 8019086:	e00c      	b.n	80190a2 <ethernet_input+0x10e>
    goto free_and_return;
 8019088:	bf00      	nop
 801908a:	e006      	b.n	801909a <ethernet_input+0x106>
        goto free_and_return;
 801908c:	bf00      	nop
 801908e:	e004      	b.n	801909a <ethernet_input+0x106>
        goto free_and_return;
 8019090:	bf00      	nop
 8019092:	e002      	b.n	801909a <ethernet_input+0x106>
        goto free_and_return;
 8019094:	bf00      	nop
 8019096:	e000      	b.n	801909a <ethernet_input+0x106>
        goto free_and_return;
 8019098:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801909a:	6878      	ldr	r0, [r7, #4]
 801909c:	f7f4 fd28 	bl	800daf0 <pbuf_free>
  return ERR_OK;
 80190a0:	2300      	movs	r3, #0
}
 80190a2:	4618      	mov	r0, r3
 80190a4:	3718      	adds	r7, #24
 80190a6:	46bd      	mov	sp, r7
 80190a8:	bd80      	pop	{r7, pc}
 80190aa:	bf00      	nop
 80190ac:	08023078 	.word	0x08023078

080190b0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80190b0:	b580      	push	{r7, lr}
 80190b2:	b086      	sub	sp, #24
 80190b4:	af00      	add	r7, sp, #0
 80190b6:	60f8      	str	r0, [r7, #12]
 80190b8:	60b9      	str	r1, [r7, #8]
 80190ba:	607a      	str	r2, [r7, #4]
 80190bc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80190be:	8c3b      	ldrh	r3, [r7, #32]
 80190c0:	4618      	mov	r0, r3
 80190c2:	f7f3 f92b 	bl	800c31c <lwip_htons>
 80190c6:	4603      	mov	r3, r0
 80190c8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80190ca:	210e      	movs	r1, #14
 80190cc:	68b8      	ldr	r0, [r7, #8]
 80190ce:	f7f4 fc79 	bl	800d9c4 <pbuf_add_header>
 80190d2:	4603      	mov	r3, r0
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d125      	bne.n	8019124 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80190d8:	68bb      	ldr	r3, [r7, #8]
 80190da:	685b      	ldr	r3, [r3, #4]
 80190dc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80190de:	693b      	ldr	r3, [r7, #16]
 80190e0:	8afa      	ldrh	r2, [r7, #22]
 80190e2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80190e4:	693b      	ldr	r3, [r7, #16]
 80190e6:	2206      	movs	r2, #6
 80190e8:	6839      	ldr	r1, [r7, #0]
 80190ea:	4618      	mov	r0, r3
 80190ec:	f000 fa11 	bl	8019512 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80190f0:	693b      	ldr	r3, [r7, #16]
 80190f2:	3306      	adds	r3, #6
 80190f4:	2206      	movs	r2, #6
 80190f6:	6879      	ldr	r1, [r7, #4]
 80190f8:	4618      	mov	r0, r3
 80190fa:	f000 fa0a 	bl	8019512 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019104:	2b06      	cmp	r3, #6
 8019106:	d006      	beq.n	8019116 <ethernet_output+0x66>
 8019108:	4b0a      	ldr	r3, [pc, #40]	; (8019134 <ethernet_output+0x84>)
 801910a:	f240 1233 	movw	r2, #307	; 0x133
 801910e:	490a      	ldr	r1, [pc, #40]	; (8019138 <ethernet_output+0x88>)
 8019110:	480a      	ldr	r0, [pc, #40]	; (801913c <ethernet_output+0x8c>)
 8019112:	f000 fa2b 	bl	801956c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	699b      	ldr	r3, [r3, #24]
 801911a:	68b9      	ldr	r1, [r7, #8]
 801911c:	68f8      	ldr	r0, [r7, #12]
 801911e:	4798      	blx	r3
 8019120:	4603      	mov	r3, r0
 8019122:	e002      	b.n	801912a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019124:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019126:	f06f 0301 	mvn.w	r3, #1
}
 801912a:	4618      	mov	r0, r3
 801912c:	3718      	adds	r7, #24
 801912e:	46bd      	mov	sp, r7
 8019130:	bd80      	pop	{r7, pc}
 8019132:	bf00      	nop
 8019134:	0801e388 	.word	0x0801e388
 8019138:	0801e3c0 	.word	0x0801e3c0
 801913c:	0801e3f4 	.word	0x0801e3f4

08019140 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019140:	b580      	push	{r7, lr}
 8019142:	b082      	sub	sp, #8
 8019144:	af00      	add	r7, sp, #0
 8019146:	6078      	str	r0, [r7, #4]
 8019148:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801914a:	683b      	ldr	r3, [r7, #0]
 801914c:	2200      	movs	r2, #0
 801914e:	2104      	movs	r1, #4
 8019150:	4618      	mov	r0, r3
 8019152:	f7ec f8cb 	bl	80052ec <osMessageQueueNew>
 8019156:	4602      	mov	r2, r0
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	2b00      	cmp	r3, #0
 8019162:	d102      	bne.n	801916a <sys_mbox_new+0x2a>
    return ERR_MEM;
 8019164:	f04f 33ff 	mov.w	r3, #4294967295
 8019168:	e000      	b.n	801916c <sys_mbox_new+0x2c>

  return ERR_OK;
 801916a:	2300      	movs	r3, #0
}
 801916c:	4618      	mov	r0, r3
 801916e:	3708      	adds	r7, #8
 8019170:	46bd      	mov	sp, r7
 8019172:	bd80      	pop	{r7, pc}

08019174 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8019174:	b580      	push	{r7, lr}
 8019176:	b082      	sub	sp, #8
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	4618      	mov	r0, r3
 8019182:	f7ec fa1f 	bl	80055c4 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	4618      	mov	r0, r3
 801918c:	f7ec fa4c 	bl	8005628 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019190:	bf00      	nop
 8019192:	3708      	adds	r7, #8
 8019194:	46bd      	mov	sp, r7
 8019196:	bd80      	pop	{r7, pc}

08019198 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019198:	b580      	push	{r7, lr}
 801919a:	b084      	sub	sp, #16
 801919c:	af00      	add	r7, sp, #0
 801919e:	6078      	str	r0, [r7, #4]
 80191a0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	6818      	ldr	r0, [r3, #0]
 80191a6:	4639      	mov	r1, r7
 80191a8:	2300      	movs	r3, #0
 80191aa:	2200      	movs	r2, #0
 80191ac:	f7ec f924 	bl	80053f8 <osMessageQueuePut>
 80191b0:	4603      	mov	r3, r0
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d102      	bne.n	80191bc <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80191b6:	2300      	movs	r3, #0
 80191b8:	73fb      	strb	r3, [r7, #15]
 80191ba:	e001      	b.n	80191c0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80191bc:	23ff      	movs	r3, #255	; 0xff
 80191be:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80191c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80191c4:	4618      	mov	r0, r3
 80191c6:	3710      	adds	r7, #16
 80191c8:	46bd      	mov	sp, r7
 80191ca:	bd80      	pop	{r7, pc}

080191cc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80191cc:	b580      	push	{r7, lr}
 80191ce:	b086      	sub	sp, #24
 80191d0:	af00      	add	r7, sp, #0
 80191d2:	60f8      	str	r0, [r7, #12]
 80191d4:	60b9      	str	r1, [r7, #8]
 80191d6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80191d8:	f7eb fcb2 	bl	8004b40 <osKernelGetTickCount>
 80191dc:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	d013      	beq.n	801920c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	6818      	ldr	r0, [r3, #0]
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	2200      	movs	r2, #0
 80191ec:	68b9      	ldr	r1, [r7, #8]
 80191ee:	f7ec f977 	bl	80054e0 <osMessageQueueGet>
 80191f2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80191f4:	693b      	ldr	r3, [r7, #16]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d105      	bne.n	8019206 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80191fa:	f7eb fca1 	bl	8004b40 <osKernelGetTickCount>
 80191fe:	4602      	mov	r2, r0
 8019200:	697b      	ldr	r3, [r7, #20]
 8019202:	1ad3      	subs	r3, r2, r3
 8019204:	e00f      	b.n	8019226 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019206:	f04f 33ff 	mov.w	r3, #4294967295
 801920a:	e00c      	b.n	8019226 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801920c:	68fb      	ldr	r3, [r7, #12]
 801920e:	6818      	ldr	r0, [r3, #0]
 8019210:	f04f 33ff 	mov.w	r3, #4294967295
 8019214:	2200      	movs	r2, #0
 8019216:	68b9      	ldr	r1, [r7, #8]
 8019218:	f7ec f962 	bl	80054e0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801921c:	f7eb fc90 	bl	8004b40 <osKernelGetTickCount>
 8019220:	4602      	mov	r2, r0
 8019222:	697b      	ldr	r3, [r7, #20]
 8019224:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8019226:	4618      	mov	r0, r3
 8019228:	3718      	adds	r7, #24
 801922a:	46bd      	mov	sp, r7
 801922c:	bd80      	pop	{r7, pc}

0801922e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801922e:	b580      	push	{r7, lr}
 8019230:	b082      	sub	sp, #8
 8019232:	af00      	add	r7, sp, #0
 8019234:	6078      	str	r0, [r7, #4]
 8019236:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	6818      	ldr	r0, [r3, #0]
 801923c:	2300      	movs	r3, #0
 801923e:	2200      	movs	r2, #0
 8019240:	6839      	ldr	r1, [r7, #0]
 8019242:	f7ec f94d 	bl	80054e0 <osMessageQueueGet>
 8019246:	4603      	mov	r3, r0
 8019248:	2b00      	cmp	r3, #0
 801924a:	d101      	bne.n	8019250 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801924c:	2300      	movs	r3, #0
 801924e:	e001      	b.n	8019254 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8019250:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8019254:	4618      	mov	r0, r3
 8019256:	3708      	adds	r7, #8
 8019258:	46bd      	mov	sp, r7
 801925a:	bd80      	pop	{r7, pc}

0801925c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801925c:	b480      	push	{r7}
 801925e:	b083      	sub	sp, #12
 8019260:	af00      	add	r7, sp, #0
 8019262:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	2b00      	cmp	r3, #0
 801926a:	d101      	bne.n	8019270 <sys_mbox_valid+0x14>
    return 0;
 801926c:	2300      	movs	r3, #0
 801926e:	e000      	b.n	8019272 <sys_mbox_valid+0x16>
  else
    return 1;
 8019270:	2301      	movs	r3, #1
}
 8019272:	4618      	mov	r0, r3
 8019274:	370c      	adds	r7, #12
 8019276:	46bd      	mov	sp, r7
 8019278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801927c:	4770      	bx	lr

0801927e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801927e:	b480      	push	{r7}
 8019280:	b083      	sub	sp, #12
 8019282:	af00      	add	r7, sp, #0
 8019284:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	2200      	movs	r2, #0
 801928a:	601a      	str	r2, [r3, #0]
}
 801928c:	bf00      	nop
 801928e:	370c      	adds	r7, #12
 8019290:	46bd      	mov	sp, r7
 8019292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019296:	4770      	bx	lr

08019298 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b082      	sub	sp, #8
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
 80192a0:	460b      	mov	r3, r1
 80192a2:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 80192a4:	78fb      	ldrb	r3, [r7, #3]
 80192a6:	2200      	movs	r2, #0
 80192a8:	4619      	mov	r1, r3
 80192aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80192ae:	f7eb fe8b 	bl	8004fc8 <osSemaphoreNew>
 80192b2:	4602      	mov	r2, r0
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d102      	bne.n	80192c6 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80192c0:	f04f 33ff 	mov.w	r3, #4294967295
 80192c4:	e009      	b.n	80192da <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80192c6:	78fb      	ldrb	r3, [r7, #3]
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d105      	bne.n	80192d8 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	2100      	movs	r1, #0
 80192d2:	4618      	mov	r0, r3
 80192d4:	f7eb ff16 	bl	8005104 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80192d8:	2300      	movs	r3, #0
}
 80192da:	4618      	mov	r0, r3
 80192dc:	3708      	adds	r7, #8
 80192de:	46bd      	mov	sp, r7
 80192e0:	bd80      	pop	{r7, pc}

080192e2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80192e2:	b580      	push	{r7, lr}
 80192e4:	b084      	sub	sp, #16
 80192e6:	af00      	add	r7, sp, #0
 80192e8:	6078      	str	r0, [r7, #4]
 80192ea:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80192ec:	f7eb fc28 	bl	8004b40 <osKernelGetTickCount>
 80192f0:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80192f2:	683b      	ldr	r3, [r7, #0]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d011      	beq.n	801931c <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	6839      	ldr	r1, [r7, #0]
 80192fe:	4618      	mov	r0, r3
 8019300:	f7eb ff00 	bl	8005104 <osSemaphoreAcquire>
 8019304:	4603      	mov	r3, r0
 8019306:	2b00      	cmp	r3, #0
 8019308:	d105      	bne.n	8019316 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801930a:	f7eb fc19 	bl	8004b40 <osKernelGetTickCount>
 801930e:	4602      	mov	r2, r0
 8019310:	68fb      	ldr	r3, [r7, #12]
 8019312:	1ad3      	subs	r3, r2, r3
 8019314:	e012      	b.n	801933c <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019316:	f04f 33ff 	mov.w	r3, #4294967295
 801931a:	e00f      	b.n	801933c <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801931c:	bf00      	nop
 801931e:	687b      	ldr	r3, [r7, #4]
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	f04f 31ff 	mov.w	r1, #4294967295
 8019326:	4618      	mov	r0, r3
 8019328:	f7eb feec 	bl	8005104 <osSemaphoreAcquire>
 801932c:	4603      	mov	r3, r0
 801932e:	2b00      	cmp	r3, #0
 8019330:	d1f5      	bne.n	801931e <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8019332:	f7eb fc05 	bl	8004b40 <osKernelGetTickCount>
 8019336:	4602      	mov	r2, r0
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801933c:	4618      	mov	r0, r3
 801933e:	3710      	adds	r7, #16
 8019340:	46bd      	mov	sp, r7
 8019342:	bd80      	pop	{r7, pc}

08019344 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8019344:	b580      	push	{r7, lr}
 8019346:	b082      	sub	sp, #8
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	4618      	mov	r0, r3
 8019352:	f7eb ff3d 	bl	80051d0 <osSemaphoreRelease>
}
 8019356:	bf00      	nop
 8019358:	3708      	adds	r7, #8
 801935a:	46bd      	mov	sp, r7
 801935c:	bd80      	pop	{r7, pc}

0801935e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801935e:	b580      	push	{r7, lr}
 8019360:	b082      	sub	sp, #8
 8019362:	af00      	add	r7, sp, #0
 8019364:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	4618      	mov	r0, r3
 801936c:	f7eb ff88 	bl	8005280 <osSemaphoreDelete>
}
 8019370:	bf00      	nop
 8019372:	3708      	adds	r7, #8
 8019374:	46bd      	mov	sp, r7
 8019376:	bd80      	pop	{r7, pc}

08019378 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019378:	b480      	push	{r7}
 801937a:	b083      	sub	sp, #12
 801937c:	af00      	add	r7, sp, #0
 801937e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	2b00      	cmp	r3, #0
 8019386:	d101      	bne.n	801938c <sys_sem_valid+0x14>
    return 0;
 8019388:	2300      	movs	r3, #0
 801938a:	e000      	b.n	801938e <sys_sem_valid+0x16>
  else
    return 1;
 801938c:	2301      	movs	r3, #1
}
 801938e:	4618      	mov	r0, r3
 8019390:	370c      	adds	r7, #12
 8019392:	46bd      	mov	sp, r7
 8019394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019398:	4770      	bx	lr

0801939a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801939a:	b480      	push	{r7}
 801939c:	b083      	sub	sp, #12
 801939e:	af00      	add	r7, sp, #0
 80193a0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	2200      	movs	r2, #0
 80193a6:	601a      	str	r2, [r3, #0]
}
 80193a8:	bf00      	nop
 80193aa:	370c      	adds	r7, #12
 80193ac:	46bd      	mov	sp, r7
 80193ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b2:	4770      	bx	lr

080193b4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80193b4:	b580      	push	{r7, lr}
 80193b6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80193b8:	2000      	movs	r0, #0
 80193ba:	f7eb fcbd 	bl	8004d38 <osMutexNew>
 80193be:	4602      	mov	r2, r0
 80193c0:	4b01      	ldr	r3, [pc, #4]	; (80193c8 <sys_init+0x14>)
 80193c2:	601a      	str	r2, [r3, #0]
#endif
}
 80193c4:	bf00      	nop
 80193c6:	bd80      	pop	{r7, pc}
 80193c8:	20016e5c 	.word	0x20016e5c

080193cc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80193cc:	b580      	push	{r7, lr}
 80193ce:	b082      	sub	sp, #8
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80193d4:	2000      	movs	r0, #0
 80193d6:	f7eb fcaf 	bl	8004d38 <osMutexNew>
 80193da:	4602      	mov	r2, r0
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	681b      	ldr	r3, [r3, #0]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d102      	bne.n	80193ee <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80193e8:	f04f 33ff 	mov.w	r3, #4294967295
 80193ec:	e000      	b.n	80193f0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80193ee:	2300      	movs	r3, #0
}
 80193f0:	4618      	mov	r0, r3
 80193f2:	3708      	adds	r7, #8
 80193f4:	46bd      	mov	sp, r7
 80193f6:	bd80      	pop	{r7, pc}

080193f8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80193f8:	b580      	push	{r7, lr}
 80193fa:	b082      	sub	sp, #8
 80193fc:	af00      	add	r7, sp, #0
 80193fe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	f04f 31ff 	mov.w	r1, #4294967295
 8019408:	4618      	mov	r0, r3
 801940a:	f7eb fd2f 	bl	8004e6c <osMutexAcquire>
#endif
}
 801940e:	bf00      	nop
 8019410:	3708      	adds	r7, #8
 8019412:	46bd      	mov	sp, r7
 8019414:	bd80      	pop	{r7, pc}

08019416 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019416:	b580      	push	{r7, lr}
 8019418:	b082      	sub	sp, #8
 801941a:	af00      	add	r7, sp, #0
 801941c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	4618      	mov	r0, r3
 8019424:	f7eb fd80 	bl	8004f28 <osMutexRelease>
}
 8019428:	bf00      	nop
 801942a:	3708      	adds	r7, #8
 801942c:	46bd      	mov	sp, r7
 801942e:	bd80      	pop	{r7, pc}

08019430 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b08e      	sub	sp, #56	; 0x38
 8019434:	af00      	add	r7, sp, #0
 8019436:	60f8      	str	r0, [r7, #12]
 8019438:	60b9      	str	r1, [r7, #8]
 801943a:	607a      	str	r2, [r7, #4]
 801943c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801943e:	f107 0314 	add.w	r3, r7, #20
 8019442:	2224      	movs	r2, #36	; 0x24
 8019444:	2100      	movs	r1, #0
 8019446:	4618      	mov	r0, r3
 8019448:	f000 f887 	bl	801955a <memset>
 801944c:	68fb      	ldr	r3, [r7, #12]
 801944e:	617b      	str	r3, [r7, #20]
 8019450:	683b      	ldr	r3, [r7, #0]
 8019452:	62bb      	str	r3, [r7, #40]	; 0x28
 8019454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019456:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019458:	f107 0314 	add.w	r3, r7, #20
 801945c:	461a      	mov	r2, r3
 801945e:	6879      	ldr	r1, [r7, #4]
 8019460:	68b8      	ldr	r0, [r7, #8]
 8019462:	f7eb fb95 	bl	8004b90 <osThreadNew>
 8019466:	4603      	mov	r3, r0
#endif
}
 8019468:	4618      	mov	r0, r3
 801946a:	3738      	adds	r7, #56	; 0x38
 801946c:	46bd      	mov	sp, r7
 801946e:	bd80      	pop	{r7, pc}

08019470 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019470:	b580      	push	{r7, lr}
 8019472:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8019474:	4b04      	ldr	r3, [pc, #16]	; (8019488 <sys_arch_protect+0x18>)
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	f04f 31ff 	mov.w	r1, #4294967295
 801947c:	4618      	mov	r0, r3
 801947e:	f7eb fcf5 	bl	8004e6c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8019482:	2301      	movs	r3, #1
}
 8019484:	4618      	mov	r0, r3
 8019486:	bd80      	pop	{r7, pc}
 8019488:	20016e5c 	.word	0x20016e5c

0801948c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801948c:	b580      	push	{r7, lr}
 801948e:	b082      	sub	sp, #8
 8019490:	af00      	add	r7, sp, #0
 8019492:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019494:	4b04      	ldr	r3, [pc, #16]	; (80194a8 <sys_arch_unprotect+0x1c>)
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	4618      	mov	r0, r3
 801949a:	f7eb fd45 	bl	8004f28 <osMutexRelease>
}
 801949e:	bf00      	nop
 80194a0:	3708      	adds	r7, #8
 80194a2:	46bd      	mov	sp, r7
 80194a4:	bd80      	pop	{r7, pc}
 80194a6:	bf00      	nop
 80194a8:	20016e5c 	.word	0x20016e5c

080194ac <__libc_init_array>:
 80194ac:	b570      	push	{r4, r5, r6, lr}
 80194ae:	4e0d      	ldr	r6, [pc, #52]	; (80194e4 <__libc_init_array+0x38>)
 80194b0:	4c0d      	ldr	r4, [pc, #52]	; (80194e8 <__libc_init_array+0x3c>)
 80194b2:	1ba4      	subs	r4, r4, r6
 80194b4:	10a4      	asrs	r4, r4, #2
 80194b6:	2500      	movs	r5, #0
 80194b8:	42a5      	cmp	r5, r4
 80194ba:	d109      	bne.n	80194d0 <__libc_init_array+0x24>
 80194bc:	4e0b      	ldr	r6, [pc, #44]	; (80194ec <__libc_init_array+0x40>)
 80194be:	4c0c      	ldr	r4, [pc, #48]	; (80194f0 <__libc_init_array+0x44>)
 80194c0:	f001 f95c 	bl	801a77c <_init>
 80194c4:	1ba4      	subs	r4, r4, r6
 80194c6:	10a4      	asrs	r4, r4, #2
 80194c8:	2500      	movs	r5, #0
 80194ca:	42a5      	cmp	r5, r4
 80194cc:	d105      	bne.n	80194da <__libc_init_array+0x2e>
 80194ce:	bd70      	pop	{r4, r5, r6, pc}
 80194d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80194d4:	4798      	blx	r3
 80194d6:	3501      	adds	r5, #1
 80194d8:	e7ee      	b.n	80194b8 <__libc_init_array+0xc>
 80194da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80194de:	4798      	blx	r3
 80194e0:	3501      	adds	r5, #1
 80194e2:	e7f2      	b.n	80194ca <__libc_init_array+0x1e>
 80194e4:	08023128 	.word	0x08023128
 80194e8:	08023128 	.word	0x08023128
 80194ec:	08023128 	.word	0x08023128
 80194f0:	0802312c 	.word	0x0802312c

080194f4 <memcmp>:
 80194f4:	b530      	push	{r4, r5, lr}
 80194f6:	2400      	movs	r4, #0
 80194f8:	42a2      	cmp	r2, r4
 80194fa:	d101      	bne.n	8019500 <memcmp+0xc>
 80194fc:	2000      	movs	r0, #0
 80194fe:	e007      	b.n	8019510 <memcmp+0x1c>
 8019500:	5d03      	ldrb	r3, [r0, r4]
 8019502:	3401      	adds	r4, #1
 8019504:	190d      	adds	r5, r1, r4
 8019506:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801950a:	42ab      	cmp	r3, r5
 801950c:	d0f4      	beq.n	80194f8 <memcmp+0x4>
 801950e:	1b58      	subs	r0, r3, r5
 8019510:	bd30      	pop	{r4, r5, pc}

08019512 <memcpy>:
 8019512:	b510      	push	{r4, lr}
 8019514:	1e43      	subs	r3, r0, #1
 8019516:	440a      	add	r2, r1
 8019518:	4291      	cmp	r1, r2
 801951a:	d100      	bne.n	801951e <memcpy+0xc>
 801951c:	bd10      	pop	{r4, pc}
 801951e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019526:	e7f7      	b.n	8019518 <memcpy+0x6>

08019528 <memmove>:
 8019528:	4288      	cmp	r0, r1
 801952a:	b510      	push	{r4, lr}
 801952c:	eb01 0302 	add.w	r3, r1, r2
 8019530:	d807      	bhi.n	8019542 <memmove+0x1a>
 8019532:	1e42      	subs	r2, r0, #1
 8019534:	4299      	cmp	r1, r3
 8019536:	d00a      	beq.n	801954e <memmove+0x26>
 8019538:	f811 4b01 	ldrb.w	r4, [r1], #1
 801953c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019540:	e7f8      	b.n	8019534 <memmove+0xc>
 8019542:	4283      	cmp	r3, r0
 8019544:	d9f5      	bls.n	8019532 <memmove+0xa>
 8019546:	1881      	adds	r1, r0, r2
 8019548:	1ad2      	subs	r2, r2, r3
 801954a:	42d3      	cmn	r3, r2
 801954c:	d100      	bne.n	8019550 <memmove+0x28>
 801954e:	bd10      	pop	{r4, pc}
 8019550:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019554:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019558:	e7f7      	b.n	801954a <memmove+0x22>

0801955a <memset>:
 801955a:	4402      	add	r2, r0
 801955c:	4603      	mov	r3, r0
 801955e:	4293      	cmp	r3, r2
 8019560:	d100      	bne.n	8019564 <memset+0xa>
 8019562:	4770      	bx	lr
 8019564:	f803 1b01 	strb.w	r1, [r3], #1
 8019568:	e7f9      	b.n	801955e <memset+0x4>
	...

0801956c <iprintf>:
 801956c:	b40f      	push	{r0, r1, r2, r3}
 801956e:	4b0a      	ldr	r3, [pc, #40]	; (8019598 <iprintf+0x2c>)
 8019570:	b513      	push	{r0, r1, r4, lr}
 8019572:	681c      	ldr	r4, [r3, #0]
 8019574:	b124      	cbz	r4, 8019580 <iprintf+0x14>
 8019576:	69a3      	ldr	r3, [r4, #24]
 8019578:	b913      	cbnz	r3, 8019580 <iprintf+0x14>
 801957a:	4620      	mov	r0, r4
 801957c:	f000 f8ea 	bl	8019754 <__sinit>
 8019580:	ab05      	add	r3, sp, #20
 8019582:	9a04      	ldr	r2, [sp, #16]
 8019584:	68a1      	ldr	r1, [r4, #8]
 8019586:	9301      	str	r3, [sp, #4]
 8019588:	4620      	mov	r0, r4
 801958a:	f000 fb99 	bl	8019cc0 <_vfiprintf_r>
 801958e:	b002      	add	sp, #8
 8019590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019594:	b004      	add	sp, #16
 8019596:	4770      	bx	lr
 8019598:	20000020 	.word	0x20000020

0801959c <rand>:
 801959c:	b538      	push	{r3, r4, r5, lr}
 801959e:	4b13      	ldr	r3, [pc, #76]	; (80195ec <rand+0x50>)
 80195a0:	681c      	ldr	r4, [r3, #0]
 80195a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80195a4:	b97b      	cbnz	r3, 80195c6 <rand+0x2a>
 80195a6:	2018      	movs	r0, #24
 80195a8:	f000 f95e 	bl	8019868 <malloc>
 80195ac:	4a10      	ldr	r2, [pc, #64]	; (80195f0 <rand+0x54>)
 80195ae:	4b11      	ldr	r3, [pc, #68]	; (80195f4 <rand+0x58>)
 80195b0:	63a0      	str	r0, [r4, #56]	; 0x38
 80195b2:	e9c0 2300 	strd	r2, r3, [r0]
 80195b6:	4b10      	ldr	r3, [pc, #64]	; (80195f8 <rand+0x5c>)
 80195b8:	6083      	str	r3, [r0, #8]
 80195ba:	230b      	movs	r3, #11
 80195bc:	8183      	strh	r3, [r0, #12]
 80195be:	2201      	movs	r2, #1
 80195c0:	2300      	movs	r3, #0
 80195c2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80195c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80195c8:	480c      	ldr	r0, [pc, #48]	; (80195fc <rand+0x60>)
 80195ca:	690a      	ldr	r2, [r1, #16]
 80195cc:	694b      	ldr	r3, [r1, #20]
 80195ce:	4c0c      	ldr	r4, [pc, #48]	; (8019600 <rand+0x64>)
 80195d0:	4350      	muls	r0, r2
 80195d2:	fb04 0003 	mla	r0, r4, r3, r0
 80195d6:	fba2 2304 	umull	r2, r3, r2, r4
 80195da:	4403      	add	r3, r0
 80195dc:	1c54      	adds	r4, r2, #1
 80195de:	f143 0500 	adc.w	r5, r3, #0
 80195e2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80195e6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80195ea:	bd38      	pop	{r3, r4, r5, pc}
 80195ec:	20000020 	.word	0x20000020
 80195f0:	abcd330e 	.word	0xabcd330e
 80195f4:	e66d1234 	.word	0xe66d1234
 80195f8:	0005deec 	.word	0x0005deec
 80195fc:	5851f42d 	.word	0x5851f42d
 8019600:	4c957f2d 	.word	0x4c957f2d

08019604 <siprintf>:
 8019604:	b40e      	push	{r1, r2, r3}
 8019606:	b500      	push	{lr}
 8019608:	b09c      	sub	sp, #112	; 0x70
 801960a:	ab1d      	add	r3, sp, #116	; 0x74
 801960c:	9002      	str	r0, [sp, #8]
 801960e:	9006      	str	r0, [sp, #24]
 8019610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019614:	4809      	ldr	r0, [pc, #36]	; (801963c <siprintf+0x38>)
 8019616:	9107      	str	r1, [sp, #28]
 8019618:	9104      	str	r1, [sp, #16]
 801961a:	4909      	ldr	r1, [pc, #36]	; (8019640 <siprintf+0x3c>)
 801961c:	f853 2b04 	ldr.w	r2, [r3], #4
 8019620:	9105      	str	r1, [sp, #20]
 8019622:	6800      	ldr	r0, [r0, #0]
 8019624:	9301      	str	r3, [sp, #4]
 8019626:	a902      	add	r1, sp, #8
 8019628:	f000 fa28 	bl	8019a7c <_svfiprintf_r>
 801962c:	9b02      	ldr	r3, [sp, #8]
 801962e:	2200      	movs	r2, #0
 8019630:	701a      	strb	r2, [r3, #0]
 8019632:	b01c      	add	sp, #112	; 0x70
 8019634:	f85d eb04 	ldr.w	lr, [sp], #4
 8019638:	b003      	add	sp, #12
 801963a:	4770      	bx	lr
 801963c:	20000020 	.word	0x20000020
 8019640:	ffff0208 	.word	0xffff0208

08019644 <strchr>:
 8019644:	b2c9      	uxtb	r1, r1
 8019646:	4603      	mov	r3, r0
 8019648:	f810 2b01 	ldrb.w	r2, [r0], #1
 801964c:	b11a      	cbz	r2, 8019656 <strchr+0x12>
 801964e:	428a      	cmp	r2, r1
 8019650:	d1f9      	bne.n	8019646 <strchr+0x2>
 8019652:	4618      	mov	r0, r3
 8019654:	4770      	bx	lr
 8019656:	2900      	cmp	r1, #0
 8019658:	bf18      	it	ne
 801965a:	2300      	movne	r3, #0
 801965c:	e7f9      	b.n	8019652 <strchr+0xe>

0801965e <strcpy>:
 801965e:	4603      	mov	r3, r0
 8019660:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019664:	f803 2b01 	strb.w	r2, [r3], #1
 8019668:	2a00      	cmp	r2, #0
 801966a:	d1f9      	bne.n	8019660 <strcpy+0x2>
 801966c:	4770      	bx	lr

0801966e <strncmp>:
 801966e:	b510      	push	{r4, lr}
 8019670:	b16a      	cbz	r2, 801968e <strncmp+0x20>
 8019672:	3901      	subs	r1, #1
 8019674:	1884      	adds	r4, r0, r2
 8019676:	f810 3b01 	ldrb.w	r3, [r0], #1
 801967a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801967e:	4293      	cmp	r3, r2
 8019680:	d103      	bne.n	801968a <strncmp+0x1c>
 8019682:	42a0      	cmp	r0, r4
 8019684:	d001      	beq.n	801968a <strncmp+0x1c>
 8019686:	2b00      	cmp	r3, #0
 8019688:	d1f5      	bne.n	8019676 <strncmp+0x8>
 801968a:	1a98      	subs	r0, r3, r2
 801968c:	bd10      	pop	{r4, pc}
 801968e:	4610      	mov	r0, r2
 8019690:	e7fc      	b.n	801968c <strncmp+0x1e>
	...

08019694 <_vsiprintf_r>:
 8019694:	b500      	push	{lr}
 8019696:	b09b      	sub	sp, #108	; 0x6c
 8019698:	9100      	str	r1, [sp, #0]
 801969a:	9104      	str	r1, [sp, #16]
 801969c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80196a0:	9105      	str	r1, [sp, #20]
 80196a2:	9102      	str	r1, [sp, #8]
 80196a4:	4905      	ldr	r1, [pc, #20]	; (80196bc <_vsiprintf_r+0x28>)
 80196a6:	9103      	str	r1, [sp, #12]
 80196a8:	4669      	mov	r1, sp
 80196aa:	f000 f9e7 	bl	8019a7c <_svfiprintf_r>
 80196ae:	9b00      	ldr	r3, [sp, #0]
 80196b0:	2200      	movs	r2, #0
 80196b2:	701a      	strb	r2, [r3, #0]
 80196b4:	b01b      	add	sp, #108	; 0x6c
 80196b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80196ba:	bf00      	nop
 80196bc:	ffff0208 	.word	0xffff0208

080196c0 <vsiprintf>:
 80196c0:	4613      	mov	r3, r2
 80196c2:	460a      	mov	r2, r1
 80196c4:	4601      	mov	r1, r0
 80196c6:	4802      	ldr	r0, [pc, #8]	; (80196d0 <vsiprintf+0x10>)
 80196c8:	6800      	ldr	r0, [r0, #0]
 80196ca:	f7ff bfe3 	b.w	8019694 <_vsiprintf_r>
 80196ce:	bf00      	nop
 80196d0:	20000020 	.word	0x20000020

080196d4 <std>:
 80196d4:	2300      	movs	r3, #0
 80196d6:	b510      	push	{r4, lr}
 80196d8:	4604      	mov	r4, r0
 80196da:	e9c0 3300 	strd	r3, r3, [r0]
 80196de:	6083      	str	r3, [r0, #8]
 80196e0:	8181      	strh	r1, [r0, #12]
 80196e2:	6643      	str	r3, [r0, #100]	; 0x64
 80196e4:	81c2      	strh	r2, [r0, #14]
 80196e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80196ea:	6183      	str	r3, [r0, #24]
 80196ec:	4619      	mov	r1, r3
 80196ee:	2208      	movs	r2, #8
 80196f0:	305c      	adds	r0, #92	; 0x5c
 80196f2:	f7ff ff32 	bl	801955a <memset>
 80196f6:	4b05      	ldr	r3, [pc, #20]	; (801970c <std+0x38>)
 80196f8:	6263      	str	r3, [r4, #36]	; 0x24
 80196fa:	4b05      	ldr	r3, [pc, #20]	; (8019710 <std+0x3c>)
 80196fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80196fe:	4b05      	ldr	r3, [pc, #20]	; (8019714 <std+0x40>)
 8019700:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019702:	4b05      	ldr	r3, [pc, #20]	; (8019718 <std+0x44>)
 8019704:	6224      	str	r4, [r4, #32]
 8019706:	6323      	str	r3, [r4, #48]	; 0x30
 8019708:	bd10      	pop	{r4, pc}
 801970a:	bf00      	nop
 801970c:	0801a21d 	.word	0x0801a21d
 8019710:	0801a23f 	.word	0x0801a23f
 8019714:	0801a277 	.word	0x0801a277
 8019718:	0801a29b 	.word	0x0801a29b

0801971c <_cleanup_r>:
 801971c:	4901      	ldr	r1, [pc, #4]	; (8019724 <_cleanup_r+0x8>)
 801971e:	f000 b885 	b.w	801982c <_fwalk_reent>
 8019722:	bf00      	nop
 8019724:	0801a575 	.word	0x0801a575

08019728 <__sfmoreglue>:
 8019728:	b570      	push	{r4, r5, r6, lr}
 801972a:	1e4a      	subs	r2, r1, #1
 801972c:	2568      	movs	r5, #104	; 0x68
 801972e:	4355      	muls	r5, r2
 8019730:	460e      	mov	r6, r1
 8019732:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019736:	f000 f8ed 	bl	8019914 <_malloc_r>
 801973a:	4604      	mov	r4, r0
 801973c:	b140      	cbz	r0, 8019750 <__sfmoreglue+0x28>
 801973e:	2100      	movs	r1, #0
 8019740:	e9c0 1600 	strd	r1, r6, [r0]
 8019744:	300c      	adds	r0, #12
 8019746:	60a0      	str	r0, [r4, #8]
 8019748:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801974c:	f7ff ff05 	bl	801955a <memset>
 8019750:	4620      	mov	r0, r4
 8019752:	bd70      	pop	{r4, r5, r6, pc}

08019754 <__sinit>:
 8019754:	6983      	ldr	r3, [r0, #24]
 8019756:	b510      	push	{r4, lr}
 8019758:	4604      	mov	r4, r0
 801975a:	bb33      	cbnz	r3, 80197aa <__sinit+0x56>
 801975c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8019760:	6503      	str	r3, [r0, #80]	; 0x50
 8019762:	4b12      	ldr	r3, [pc, #72]	; (80197ac <__sinit+0x58>)
 8019764:	4a12      	ldr	r2, [pc, #72]	; (80197b0 <__sinit+0x5c>)
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	6282      	str	r2, [r0, #40]	; 0x28
 801976a:	4298      	cmp	r0, r3
 801976c:	bf04      	itt	eq
 801976e:	2301      	moveq	r3, #1
 8019770:	6183      	streq	r3, [r0, #24]
 8019772:	f000 f81f 	bl	80197b4 <__sfp>
 8019776:	6060      	str	r0, [r4, #4]
 8019778:	4620      	mov	r0, r4
 801977a:	f000 f81b 	bl	80197b4 <__sfp>
 801977e:	60a0      	str	r0, [r4, #8]
 8019780:	4620      	mov	r0, r4
 8019782:	f000 f817 	bl	80197b4 <__sfp>
 8019786:	2200      	movs	r2, #0
 8019788:	60e0      	str	r0, [r4, #12]
 801978a:	2104      	movs	r1, #4
 801978c:	6860      	ldr	r0, [r4, #4]
 801978e:	f7ff ffa1 	bl	80196d4 <std>
 8019792:	2201      	movs	r2, #1
 8019794:	2109      	movs	r1, #9
 8019796:	68a0      	ldr	r0, [r4, #8]
 8019798:	f7ff ff9c 	bl	80196d4 <std>
 801979c:	2202      	movs	r2, #2
 801979e:	2112      	movs	r1, #18
 80197a0:	68e0      	ldr	r0, [r4, #12]
 80197a2:	f7ff ff97 	bl	80196d4 <std>
 80197a6:	2301      	movs	r3, #1
 80197a8:	61a3      	str	r3, [r4, #24]
 80197aa:	bd10      	pop	{r4, pc}
 80197ac:	08023088 	.word	0x08023088
 80197b0:	0801971d 	.word	0x0801971d

080197b4 <__sfp>:
 80197b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197b6:	4b1b      	ldr	r3, [pc, #108]	; (8019824 <__sfp+0x70>)
 80197b8:	681e      	ldr	r6, [r3, #0]
 80197ba:	69b3      	ldr	r3, [r6, #24]
 80197bc:	4607      	mov	r7, r0
 80197be:	b913      	cbnz	r3, 80197c6 <__sfp+0x12>
 80197c0:	4630      	mov	r0, r6
 80197c2:	f7ff ffc7 	bl	8019754 <__sinit>
 80197c6:	3648      	adds	r6, #72	; 0x48
 80197c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80197cc:	3b01      	subs	r3, #1
 80197ce:	d503      	bpl.n	80197d8 <__sfp+0x24>
 80197d0:	6833      	ldr	r3, [r6, #0]
 80197d2:	b133      	cbz	r3, 80197e2 <__sfp+0x2e>
 80197d4:	6836      	ldr	r6, [r6, #0]
 80197d6:	e7f7      	b.n	80197c8 <__sfp+0x14>
 80197d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80197dc:	b16d      	cbz	r5, 80197fa <__sfp+0x46>
 80197de:	3468      	adds	r4, #104	; 0x68
 80197e0:	e7f4      	b.n	80197cc <__sfp+0x18>
 80197e2:	2104      	movs	r1, #4
 80197e4:	4638      	mov	r0, r7
 80197e6:	f7ff ff9f 	bl	8019728 <__sfmoreglue>
 80197ea:	6030      	str	r0, [r6, #0]
 80197ec:	2800      	cmp	r0, #0
 80197ee:	d1f1      	bne.n	80197d4 <__sfp+0x20>
 80197f0:	230c      	movs	r3, #12
 80197f2:	603b      	str	r3, [r7, #0]
 80197f4:	4604      	mov	r4, r0
 80197f6:	4620      	mov	r0, r4
 80197f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197fa:	4b0b      	ldr	r3, [pc, #44]	; (8019828 <__sfp+0x74>)
 80197fc:	6665      	str	r5, [r4, #100]	; 0x64
 80197fe:	e9c4 5500 	strd	r5, r5, [r4]
 8019802:	60a5      	str	r5, [r4, #8]
 8019804:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019808:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801980c:	2208      	movs	r2, #8
 801980e:	4629      	mov	r1, r5
 8019810:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019814:	f7ff fea1 	bl	801955a <memset>
 8019818:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801981c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019820:	e7e9      	b.n	80197f6 <__sfp+0x42>
 8019822:	bf00      	nop
 8019824:	08023088 	.word	0x08023088
 8019828:	ffff0001 	.word	0xffff0001

0801982c <_fwalk_reent>:
 801982c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019830:	4680      	mov	r8, r0
 8019832:	4689      	mov	r9, r1
 8019834:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019838:	2600      	movs	r6, #0
 801983a:	b914      	cbnz	r4, 8019842 <_fwalk_reent+0x16>
 801983c:	4630      	mov	r0, r6
 801983e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019842:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8019846:	3f01      	subs	r7, #1
 8019848:	d501      	bpl.n	801984e <_fwalk_reent+0x22>
 801984a:	6824      	ldr	r4, [r4, #0]
 801984c:	e7f5      	b.n	801983a <_fwalk_reent+0xe>
 801984e:	89ab      	ldrh	r3, [r5, #12]
 8019850:	2b01      	cmp	r3, #1
 8019852:	d907      	bls.n	8019864 <_fwalk_reent+0x38>
 8019854:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019858:	3301      	adds	r3, #1
 801985a:	d003      	beq.n	8019864 <_fwalk_reent+0x38>
 801985c:	4629      	mov	r1, r5
 801985e:	4640      	mov	r0, r8
 8019860:	47c8      	blx	r9
 8019862:	4306      	orrs	r6, r0
 8019864:	3568      	adds	r5, #104	; 0x68
 8019866:	e7ee      	b.n	8019846 <_fwalk_reent+0x1a>

08019868 <malloc>:
 8019868:	4b02      	ldr	r3, [pc, #8]	; (8019874 <malloc+0xc>)
 801986a:	4601      	mov	r1, r0
 801986c:	6818      	ldr	r0, [r3, #0]
 801986e:	f000 b851 	b.w	8019914 <_malloc_r>
 8019872:	bf00      	nop
 8019874:	20000020 	.word	0x20000020

08019878 <_free_r>:
 8019878:	b538      	push	{r3, r4, r5, lr}
 801987a:	4605      	mov	r5, r0
 801987c:	2900      	cmp	r1, #0
 801987e:	d045      	beq.n	801990c <_free_r+0x94>
 8019880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019884:	1f0c      	subs	r4, r1, #4
 8019886:	2b00      	cmp	r3, #0
 8019888:	bfb8      	it	lt
 801988a:	18e4      	addlt	r4, r4, r3
 801988c:	f000 ff12 	bl	801a6b4 <__malloc_lock>
 8019890:	4a1f      	ldr	r2, [pc, #124]	; (8019910 <_free_r+0x98>)
 8019892:	6813      	ldr	r3, [r2, #0]
 8019894:	4610      	mov	r0, r2
 8019896:	b933      	cbnz	r3, 80198a6 <_free_r+0x2e>
 8019898:	6063      	str	r3, [r4, #4]
 801989a:	6014      	str	r4, [r2, #0]
 801989c:	4628      	mov	r0, r5
 801989e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80198a2:	f000 bf08 	b.w	801a6b6 <__malloc_unlock>
 80198a6:	42a3      	cmp	r3, r4
 80198a8:	d90c      	bls.n	80198c4 <_free_r+0x4c>
 80198aa:	6821      	ldr	r1, [r4, #0]
 80198ac:	1862      	adds	r2, r4, r1
 80198ae:	4293      	cmp	r3, r2
 80198b0:	bf04      	itt	eq
 80198b2:	681a      	ldreq	r2, [r3, #0]
 80198b4:	685b      	ldreq	r3, [r3, #4]
 80198b6:	6063      	str	r3, [r4, #4]
 80198b8:	bf04      	itt	eq
 80198ba:	1852      	addeq	r2, r2, r1
 80198bc:	6022      	streq	r2, [r4, #0]
 80198be:	6004      	str	r4, [r0, #0]
 80198c0:	e7ec      	b.n	801989c <_free_r+0x24>
 80198c2:	4613      	mov	r3, r2
 80198c4:	685a      	ldr	r2, [r3, #4]
 80198c6:	b10a      	cbz	r2, 80198cc <_free_r+0x54>
 80198c8:	42a2      	cmp	r2, r4
 80198ca:	d9fa      	bls.n	80198c2 <_free_r+0x4a>
 80198cc:	6819      	ldr	r1, [r3, #0]
 80198ce:	1858      	adds	r0, r3, r1
 80198d0:	42a0      	cmp	r0, r4
 80198d2:	d10b      	bne.n	80198ec <_free_r+0x74>
 80198d4:	6820      	ldr	r0, [r4, #0]
 80198d6:	4401      	add	r1, r0
 80198d8:	1858      	adds	r0, r3, r1
 80198da:	4282      	cmp	r2, r0
 80198dc:	6019      	str	r1, [r3, #0]
 80198de:	d1dd      	bne.n	801989c <_free_r+0x24>
 80198e0:	6810      	ldr	r0, [r2, #0]
 80198e2:	6852      	ldr	r2, [r2, #4]
 80198e4:	605a      	str	r2, [r3, #4]
 80198e6:	4401      	add	r1, r0
 80198e8:	6019      	str	r1, [r3, #0]
 80198ea:	e7d7      	b.n	801989c <_free_r+0x24>
 80198ec:	d902      	bls.n	80198f4 <_free_r+0x7c>
 80198ee:	230c      	movs	r3, #12
 80198f0:	602b      	str	r3, [r5, #0]
 80198f2:	e7d3      	b.n	801989c <_free_r+0x24>
 80198f4:	6820      	ldr	r0, [r4, #0]
 80198f6:	1821      	adds	r1, r4, r0
 80198f8:	428a      	cmp	r2, r1
 80198fa:	bf04      	itt	eq
 80198fc:	6811      	ldreq	r1, [r2, #0]
 80198fe:	6852      	ldreq	r2, [r2, #4]
 8019900:	6062      	str	r2, [r4, #4]
 8019902:	bf04      	itt	eq
 8019904:	1809      	addeq	r1, r1, r0
 8019906:	6021      	streq	r1, [r4, #0]
 8019908:	605c      	str	r4, [r3, #4]
 801990a:	e7c7      	b.n	801989c <_free_r+0x24>
 801990c:	bd38      	pop	{r3, r4, r5, pc}
 801990e:	bf00      	nop
 8019910:	200103a0 	.word	0x200103a0

08019914 <_malloc_r>:
 8019914:	b570      	push	{r4, r5, r6, lr}
 8019916:	1ccd      	adds	r5, r1, #3
 8019918:	f025 0503 	bic.w	r5, r5, #3
 801991c:	3508      	adds	r5, #8
 801991e:	2d0c      	cmp	r5, #12
 8019920:	bf38      	it	cc
 8019922:	250c      	movcc	r5, #12
 8019924:	2d00      	cmp	r5, #0
 8019926:	4606      	mov	r6, r0
 8019928:	db01      	blt.n	801992e <_malloc_r+0x1a>
 801992a:	42a9      	cmp	r1, r5
 801992c:	d903      	bls.n	8019936 <_malloc_r+0x22>
 801992e:	230c      	movs	r3, #12
 8019930:	6033      	str	r3, [r6, #0]
 8019932:	2000      	movs	r0, #0
 8019934:	bd70      	pop	{r4, r5, r6, pc}
 8019936:	f000 febd 	bl	801a6b4 <__malloc_lock>
 801993a:	4a21      	ldr	r2, [pc, #132]	; (80199c0 <_malloc_r+0xac>)
 801993c:	6814      	ldr	r4, [r2, #0]
 801993e:	4621      	mov	r1, r4
 8019940:	b991      	cbnz	r1, 8019968 <_malloc_r+0x54>
 8019942:	4c20      	ldr	r4, [pc, #128]	; (80199c4 <_malloc_r+0xb0>)
 8019944:	6823      	ldr	r3, [r4, #0]
 8019946:	b91b      	cbnz	r3, 8019950 <_malloc_r+0x3c>
 8019948:	4630      	mov	r0, r6
 801994a:	f000 fc57 	bl	801a1fc <_sbrk_r>
 801994e:	6020      	str	r0, [r4, #0]
 8019950:	4629      	mov	r1, r5
 8019952:	4630      	mov	r0, r6
 8019954:	f000 fc52 	bl	801a1fc <_sbrk_r>
 8019958:	1c43      	adds	r3, r0, #1
 801995a:	d124      	bne.n	80199a6 <_malloc_r+0x92>
 801995c:	230c      	movs	r3, #12
 801995e:	6033      	str	r3, [r6, #0]
 8019960:	4630      	mov	r0, r6
 8019962:	f000 fea8 	bl	801a6b6 <__malloc_unlock>
 8019966:	e7e4      	b.n	8019932 <_malloc_r+0x1e>
 8019968:	680b      	ldr	r3, [r1, #0]
 801996a:	1b5b      	subs	r3, r3, r5
 801996c:	d418      	bmi.n	80199a0 <_malloc_r+0x8c>
 801996e:	2b0b      	cmp	r3, #11
 8019970:	d90f      	bls.n	8019992 <_malloc_r+0x7e>
 8019972:	600b      	str	r3, [r1, #0]
 8019974:	50cd      	str	r5, [r1, r3]
 8019976:	18cc      	adds	r4, r1, r3
 8019978:	4630      	mov	r0, r6
 801997a:	f000 fe9c 	bl	801a6b6 <__malloc_unlock>
 801997e:	f104 000b 	add.w	r0, r4, #11
 8019982:	1d23      	adds	r3, r4, #4
 8019984:	f020 0007 	bic.w	r0, r0, #7
 8019988:	1ac3      	subs	r3, r0, r3
 801998a:	d0d3      	beq.n	8019934 <_malloc_r+0x20>
 801998c:	425a      	negs	r2, r3
 801998e:	50e2      	str	r2, [r4, r3]
 8019990:	e7d0      	b.n	8019934 <_malloc_r+0x20>
 8019992:	428c      	cmp	r4, r1
 8019994:	684b      	ldr	r3, [r1, #4]
 8019996:	bf16      	itet	ne
 8019998:	6063      	strne	r3, [r4, #4]
 801999a:	6013      	streq	r3, [r2, #0]
 801999c:	460c      	movne	r4, r1
 801999e:	e7eb      	b.n	8019978 <_malloc_r+0x64>
 80199a0:	460c      	mov	r4, r1
 80199a2:	6849      	ldr	r1, [r1, #4]
 80199a4:	e7cc      	b.n	8019940 <_malloc_r+0x2c>
 80199a6:	1cc4      	adds	r4, r0, #3
 80199a8:	f024 0403 	bic.w	r4, r4, #3
 80199ac:	42a0      	cmp	r0, r4
 80199ae:	d005      	beq.n	80199bc <_malloc_r+0xa8>
 80199b0:	1a21      	subs	r1, r4, r0
 80199b2:	4630      	mov	r0, r6
 80199b4:	f000 fc22 	bl	801a1fc <_sbrk_r>
 80199b8:	3001      	adds	r0, #1
 80199ba:	d0cf      	beq.n	801995c <_malloc_r+0x48>
 80199bc:	6025      	str	r5, [r4, #0]
 80199be:	e7db      	b.n	8019978 <_malloc_r+0x64>
 80199c0:	200103a0 	.word	0x200103a0
 80199c4:	200103a4 	.word	0x200103a4

080199c8 <__ssputs_r>:
 80199c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199cc:	688e      	ldr	r6, [r1, #8]
 80199ce:	429e      	cmp	r6, r3
 80199d0:	4682      	mov	sl, r0
 80199d2:	460c      	mov	r4, r1
 80199d4:	4690      	mov	r8, r2
 80199d6:	4699      	mov	r9, r3
 80199d8:	d837      	bhi.n	8019a4a <__ssputs_r+0x82>
 80199da:	898a      	ldrh	r2, [r1, #12]
 80199dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80199e0:	d031      	beq.n	8019a46 <__ssputs_r+0x7e>
 80199e2:	6825      	ldr	r5, [r4, #0]
 80199e4:	6909      	ldr	r1, [r1, #16]
 80199e6:	1a6f      	subs	r7, r5, r1
 80199e8:	6965      	ldr	r5, [r4, #20]
 80199ea:	2302      	movs	r3, #2
 80199ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80199f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80199f4:	f109 0301 	add.w	r3, r9, #1
 80199f8:	443b      	add	r3, r7
 80199fa:	429d      	cmp	r5, r3
 80199fc:	bf38      	it	cc
 80199fe:	461d      	movcc	r5, r3
 8019a00:	0553      	lsls	r3, r2, #21
 8019a02:	d530      	bpl.n	8019a66 <__ssputs_r+0x9e>
 8019a04:	4629      	mov	r1, r5
 8019a06:	f7ff ff85 	bl	8019914 <_malloc_r>
 8019a0a:	4606      	mov	r6, r0
 8019a0c:	b950      	cbnz	r0, 8019a24 <__ssputs_r+0x5c>
 8019a0e:	230c      	movs	r3, #12
 8019a10:	f8ca 3000 	str.w	r3, [sl]
 8019a14:	89a3      	ldrh	r3, [r4, #12]
 8019a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a1a:	81a3      	strh	r3, [r4, #12]
 8019a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8019a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a24:	463a      	mov	r2, r7
 8019a26:	6921      	ldr	r1, [r4, #16]
 8019a28:	f7ff fd73 	bl	8019512 <memcpy>
 8019a2c:	89a3      	ldrh	r3, [r4, #12]
 8019a2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a36:	81a3      	strh	r3, [r4, #12]
 8019a38:	6126      	str	r6, [r4, #16]
 8019a3a:	6165      	str	r5, [r4, #20]
 8019a3c:	443e      	add	r6, r7
 8019a3e:	1bed      	subs	r5, r5, r7
 8019a40:	6026      	str	r6, [r4, #0]
 8019a42:	60a5      	str	r5, [r4, #8]
 8019a44:	464e      	mov	r6, r9
 8019a46:	454e      	cmp	r6, r9
 8019a48:	d900      	bls.n	8019a4c <__ssputs_r+0x84>
 8019a4a:	464e      	mov	r6, r9
 8019a4c:	4632      	mov	r2, r6
 8019a4e:	4641      	mov	r1, r8
 8019a50:	6820      	ldr	r0, [r4, #0]
 8019a52:	f7ff fd69 	bl	8019528 <memmove>
 8019a56:	68a3      	ldr	r3, [r4, #8]
 8019a58:	1b9b      	subs	r3, r3, r6
 8019a5a:	60a3      	str	r3, [r4, #8]
 8019a5c:	6823      	ldr	r3, [r4, #0]
 8019a5e:	441e      	add	r6, r3
 8019a60:	6026      	str	r6, [r4, #0]
 8019a62:	2000      	movs	r0, #0
 8019a64:	e7dc      	b.n	8019a20 <__ssputs_r+0x58>
 8019a66:	462a      	mov	r2, r5
 8019a68:	f000 fe26 	bl	801a6b8 <_realloc_r>
 8019a6c:	4606      	mov	r6, r0
 8019a6e:	2800      	cmp	r0, #0
 8019a70:	d1e2      	bne.n	8019a38 <__ssputs_r+0x70>
 8019a72:	6921      	ldr	r1, [r4, #16]
 8019a74:	4650      	mov	r0, sl
 8019a76:	f7ff feff 	bl	8019878 <_free_r>
 8019a7a:	e7c8      	b.n	8019a0e <__ssputs_r+0x46>

08019a7c <_svfiprintf_r>:
 8019a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a80:	461d      	mov	r5, r3
 8019a82:	898b      	ldrh	r3, [r1, #12]
 8019a84:	061f      	lsls	r7, r3, #24
 8019a86:	b09d      	sub	sp, #116	; 0x74
 8019a88:	4680      	mov	r8, r0
 8019a8a:	460c      	mov	r4, r1
 8019a8c:	4616      	mov	r6, r2
 8019a8e:	d50f      	bpl.n	8019ab0 <_svfiprintf_r+0x34>
 8019a90:	690b      	ldr	r3, [r1, #16]
 8019a92:	b96b      	cbnz	r3, 8019ab0 <_svfiprintf_r+0x34>
 8019a94:	2140      	movs	r1, #64	; 0x40
 8019a96:	f7ff ff3d 	bl	8019914 <_malloc_r>
 8019a9a:	6020      	str	r0, [r4, #0]
 8019a9c:	6120      	str	r0, [r4, #16]
 8019a9e:	b928      	cbnz	r0, 8019aac <_svfiprintf_r+0x30>
 8019aa0:	230c      	movs	r3, #12
 8019aa2:	f8c8 3000 	str.w	r3, [r8]
 8019aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8019aaa:	e0c8      	b.n	8019c3e <_svfiprintf_r+0x1c2>
 8019aac:	2340      	movs	r3, #64	; 0x40
 8019aae:	6163      	str	r3, [r4, #20]
 8019ab0:	2300      	movs	r3, #0
 8019ab2:	9309      	str	r3, [sp, #36]	; 0x24
 8019ab4:	2320      	movs	r3, #32
 8019ab6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019aba:	2330      	movs	r3, #48	; 0x30
 8019abc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019ac0:	9503      	str	r5, [sp, #12]
 8019ac2:	f04f 0b01 	mov.w	fp, #1
 8019ac6:	4637      	mov	r7, r6
 8019ac8:	463d      	mov	r5, r7
 8019aca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019ace:	b10b      	cbz	r3, 8019ad4 <_svfiprintf_r+0x58>
 8019ad0:	2b25      	cmp	r3, #37	; 0x25
 8019ad2:	d13e      	bne.n	8019b52 <_svfiprintf_r+0xd6>
 8019ad4:	ebb7 0a06 	subs.w	sl, r7, r6
 8019ad8:	d00b      	beq.n	8019af2 <_svfiprintf_r+0x76>
 8019ada:	4653      	mov	r3, sl
 8019adc:	4632      	mov	r2, r6
 8019ade:	4621      	mov	r1, r4
 8019ae0:	4640      	mov	r0, r8
 8019ae2:	f7ff ff71 	bl	80199c8 <__ssputs_r>
 8019ae6:	3001      	adds	r0, #1
 8019ae8:	f000 80a4 	beq.w	8019c34 <_svfiprintf_r+0x1b8>
 8019aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019aee:	4453      	add	r3, sl
 8019af0:	9309      	str	r3, [sp, #36]	; 0x24
 8019af2:	783b      	ldrb	r3, [r7, #0]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	f000 809d 	beq.w	8019c34 <_svfiprintf_r+0x1b8>
 8019afa:	2300      	movs	r3, #0
 8019afc:	f04f 32ff 	mov.w	r2, #4294967295
 8019b00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b04:	9304      	str	r3, [sp, #16]
 8019b06:	9307      	str	r3, [sp, #28]
 8019b08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b0c:	931a      	str	r3, [sp, #104]	; 0x68
 8019b0e:	462f      	mov	r7, r5
 8019b10:	2205      	movs	r2, #5
 8019b12:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019b16:	4850      	ldr	r0, [pc, #320]	; (8019c58 <_svfiprintf_r+0x1dc>)
 8019b18:	f7e6 fb82 	bl	8000220 <memchr>
 8019b1c:	9b04      	ldr	r3, [sp, #16]
 8019b1e:	b9d0      	cbnz	r0, 8019b56 <_svfiprintf_r+0xda>
 8019b20:	06d9      	lsls	r1, r3, #27
 8019b22:	bf44      	itt	mi
 8019b24:	2220      	movmi	r2, #32
 8019b26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019b2a:	071a      	lsls	r2, r3, #28
 8019b2c:	bf44      	itt	mi
 8019b2e:	222b      	movmi	r2, #43	; 0x2b
 8019b30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019b34:	782a      	ldrb	r2, [r5, #0]
 8019b36:	2a2a      	cmp	r2, #42	; 0x2a
 8019b38:	d015      	beq.n	8019b66 <_svfiprintf_r+0xea>
 8019b3a:	9a07      	ldr	r2, [sp, #28]
 8019b3c:	462f      	mov	r7, r5
 8019b3e:	2000      	movs	r0, #0
 8019b40:	250a      	movs	r5, #10
 8019b42:	4639      	mov	r1, r7
 8019b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019b48:	3b30      	subs	r3, #48	; 0x30
 8019b4a:	2b09      	cmp	r3, #9
 8019b4c:	d94d      	bls.n	8019bea <_svfiprintf_r+0x16e>
 8019b4e:	b1b8      	cbz	r0, 8019b80 <_svfiprintf_r+0x104>
 8019b50:	e00f      	b.n	8019b72 <_svfiprintf_r+0xf6>
 8019b52:	462f      	mov	r7, r5
 8019b54:	e7b8      	b.n	8019ac8 <_svfiprintf_r+0x4c>
 8019b56:	4a40      	ldr	r2, [pc, #256]	; (8019c58 <_svfiprintf_r+0x1dc>)
 8019b58:	1a80      	subs	r0, r0, r2
 8019b5a:	fa0b f000 	lsl.w	r0, fp, r0
 8019b5e:	4318      	orrs	r0, r3
 8019b60:	9004      	str	r0, [sp, #16]
 8019b62:	463d      	mov	r5, r7
 8019b64:	e7d3      	b.n	8019b0e <_svfiprintf_r+0x92>
 8019b66:	9a03      	ldr	r2, [sp, #12]
 8019b68:	1d11      	adds	r1, r2, #4
 8019b6a:	6812      	ldr	r2, [r2, #0]
 8019b6c:	9103      	str	r1, [sp, #12]
 8019b6e:	2a00      	cmp	r2, #0
 8019b70:	db01      	blt.n	8019b76 <_svfiprintf_r+0xfa>
 8019b72:	9207      	str	r2, [sp, #28]
 8019b74:	e004      	b.n	8019b80 <_svfiprintf_r+0x104>
 8019b76:	4252      	negs	r2, r2
 8019b78:	f043 0302 	orr.w	r3, r3, #2
 8019b7c:	9207      	str	r2, [sp, #28]
 8019b7e:	9304      	str	r3, [sp, #16]
 8019b80:	783b      	ldrb	r3, [r7, #0]
 8019b82:	2b2e      	cmp	r3, #46	; 0x2e
 8019b84:	d10c      	bne.n	8019ba0 <_svfiprintf_r+0x124>
 8019b86:	787b      	ldrb	r3, [r7, #1]
 8019b88:	2b2a      	cmp	r3, #42	; 0x2a
 8019b8a:	d133      	bne.n	8019bf4 <_svfiprintf_r+0x178>
 8019b8c:	9b03      	ldr	r3, [sp, #12]
 8019b8e:	1d1a      	adds	r2, r3, #4
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	9203      	str	r2, [sp, #12]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	bfb8      	it	lt
 8019b98:	f04f 33ff 	movlt.w	r3, #4294967295
 8019b9c:	3702      	adds	r7, #2
 8019b9e:	9305      	str	r3, [sp, #20]
 8019ba0:	4d2e      	ldr	r5, [pc, #184]	; (8019c5c <_svfiprintf_r+0x1e0>)
 8019ba2:	7839      	ldrb	r1, [r7, #0]
 8019ba4:	2203      	movs	r2, #3
 8019ba6:	4628      	mov	r0, r5
 8019ba8:	f7e6 fb3a 	bl	8000220 <memchr>
 8019bac:	b138      	cbz	r0, 8019bbe <_svfiprintf_r+0x142>
 8019bae:	2340      	movs	r3, #64	; 0x40
 8019bb0:	1b40      	subs	r0, r0, r5
 8019bb2:	fa03 f000 	lsl.w	r0, r3, r0
 8019bb6:	9b04      	ldr	r3, [sp, #16]
 8019bb8:	4303      	orrs	r3, r0
 8019bba:	3701      	adds	r7, #1
 8019bbc:	9304      	str	r3, [sp, #16]
 8019bbe:	7839      	ldrb	r1, [r7, #0]
 8019bc0:	4827      	ldr	r0, [pc, #156]	; (8019c60 <_svfiprintf_r+0x1e4>)
 8019bc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019bc6:	2206      	movs	r2, #6
 8019bc8:	1c7e      	adds	r6, r7, #1
 8019bca:	f7e6 fb29 	bl	8000220 <memchr>
 8019bce:	2800      	cmp	r0, #0
 8019bd0:	d038      	beq.n	8019c44 <_svfiprintf_r+0x1c8>
 8019bd2:	4b24      	ldr	r3, [pc, #144]	; (8019c64 <_svfiprintf_r+0x1e8>)
 8019bd4:	bb13      	cbnz	r3, 8019c1c <_svfiprintf_r+0x1a0>
 8019bd6:	9b03      	ldr	r3, [sp, #12]
 8019bd8:	3307      	adds	r3, #7
 8019bda:	f023 0307 	bic.w	r3, r3, #7
 8019bde:	3308      	adds	r3, #8
 8019be0:	9303      	str	r3, [sp, #12]
 8019be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019be4:	444b      	add	r3, r9
 8019be6:	9309      	str	r3, [sp, #36]	; 0x24
 8019be8:	e76d      	b.n	8019ac6 <_svfiprintf_r+0x4a>
 8019bea:	fb05 3202 	mla	r2, r5, r2, r3
 8019bee:	2001      	movs	r0, #1
 8019bf0:	460f      	mov	r7, r1
 8019bf2:	e7a6      	b.n	8019b42 <_svfiprintf_r+0xc6>
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	3701      	adds	r7, #1
 8019bf8:	9305      	str	r3, [sp, #20]
 8019bfa:	4619      	mov	r1, r3
 8019bfc:	250a      	movs	r5, #10
 8019bfe:	4638      	mov	r0, r7
 8019c00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c04:	3a30      	subs	r2, #48	; 0x30
 8019c06:	2a09      	cmp	r2, #9
 8019c08:	d903      	bls.n	8019c12 <_svfiprintf_r+0x196>
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d0c8      	beq.n	8019ba0 <_svfiprintf_r+0x124>
 8019c0e:	9105      	str	r1, [sp, #20]
 8019c10:	e7c6      	b.n	8019ba0 <_svfiprintf_r+0x124>
 8019c12:	fb05 2101 	mla	r1, r5, r1, r2
 8019c16:	2301      	movs	r3, #1
 8019c18:	4607      	mov	r7, r0
 8019c1a:	e7f0      	b.n	8019bfe <_svfiprintf_r+0x182>
 8019c1c:	ab03      	add	r3, sp, #12
 8019c1e:	9300      	str	r3, [sp, #0]
 8019c20:	4622      	mov	r2, r4
 8019c22:	4b11      	ldr	r3, [pc, #68]	; (8019c68 <_svfiprintf_r+0x1ec>)
 8019c24:	a904      	add	r1, sp, #16
 8019c26:	4640      	mov	r0, r8
 8019c28:	f3af 8000 	nop.w
 8019c2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019c30:	4681      	mov	r9, r0
 8019c32:	d1d6      	bne.n	8019be2 <_svfiprintf_r+0x166>
 8019c34:	89a3      	ldrh	r3, [r4, #12]
 8019c36:	065b      	lsls	r3, r3, #25
 8019c38:	f53f af35 	bmi.w	8019aa6 <_svfiprintf_r+0x2a>
 8019c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019c3e:	b01d      	add	sp, #116	; 0x74
 8019c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c44:	ab03      	add	r3, sp, #12
 8019c46:	9300      	str	r3, [sp, #0]
 8019c48:	4622      	mov	r2, r4
 8019c4a:	4b07      	ldr	r3, [pc, #28]	; (8019c68 <_svfiprintf_r+0x1ec>)
 8019c4c:	a904      	add	r1, sp, #16
 8019c4e:	4640      	mov	r0, r8
 8019c50:	f000 f9c2 	bl	8019fd8 <_printf_i>
 8019c54:	e7ea      	b.n	8019c2c <_svfiprintf_r+0x1b0>
 8019c56:	bf00      	nop
 8019c58:	080230ec 	.word	0x080230ec
 8019c5c:	080230f2 	.word	0x080230f2
 8019c60:	080230f6 	.word	0x080230f6
 8019c64:	00000000 	.word	0x00000000
 8019c68:	080199c9 	.word	0x080199c9

08019c6c <__sfputc_r>:
 8019c6c:	6893      	ldr	r3, [r2, #8]
 8019c6e:	3b01      	subs	r3, #1
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	b410      	push	{r4}
 8019c74:	6093      	str	r3, [r2, #8]
 8019c76:	da08      	bge.n	8019c8a <__sfputc_r+0x1e>
 8019c78:	6994      	ldr	r4, [r2, #24]
 8019c7a:	42a3      	cmp	r3, r4
 8019c7c:	db01      	blt.n	8019c82 <__sfputc_r+0x16>
 8019c7e:	290a      	cmp	r1, #10
 8019c80:	d103      	bne.n	8019c8a <__sfputc_r+0x1e>
 8019c82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c86:	f000 bb0d 	b.w	801a2a4 <__swbuf_r>
 8019c8a:	6813      	ldr	r3, [r2, #0]
 8019c8c:	1c58      	adds	r0, r3, #1
 8019c8e:	6010      	str	r0, [r2, #0]
 8019c90:	7019      	strb	r1, [r3, #0]
 8019c92:	4608      	mov	r0, r1
 8019c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c98:	4770      	bx	lr

08019c9a <__sfputs_r>:
 8019c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c9c:	4606      	mov	r6, r0
 8019c9e:	460f      	mov	r7, r1
 8019ca0:	4614      	mov	r4, r2
 8019ca2:	18d5      	adds	r5, r2, r3
 8019ca4:	42ac      	cmp	r4, r5
 8019ca6:	d101      	bne.n	8019cac <__sfputs_r+0x12>
 8019ca8:	2000      	movs	r0, #0
 8019caa:	e007      	b.n	8019cbc <__sfputs_r+0x22>
 8019cac:	463a      	mov	r2, r7
 8019cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019cb2:	4630      	mov	r0, r6
 8019cb4:	f7ff ffda 	bl	8019c6c <__sfputc_r>
 8019cb8:	1c43      	adds	r3, r0, #1
 8019cba:	d1f3      	bne.n	8019ca4 <__sfputs_r+0xa>
 8019cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019cc0 <_vfiprintf_r>:
 8019cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cc4:	460c      	mov	r4, r1
 8019cc6:	b09d      	sub	sp, #116	; 0x74
 8019cc8:	4617      	mov	r7, r2
 8019cca:	461d      	mov	r5, r3
 8019ccc:	4606      	mov	r6, r0
 8019cce:	b118      	cbz	r0, 8019cd8 <_vfiprintf_r+0x18>
 8019cd0:	6983      	ldr	r3, [r0, #24]
 8019cd2:	b90b      	cbnz	r3, 8019cd8 <_vfiprintf_r+0x18>
 8019cd4:	f7ff fd3e 	bl	8019754 <__sinit>
 8019cd8:	4b7c      	ldr	r3, [pc, #496]	; (8019ecc <_vfiprintf_r+0x20c>)
 8019cda:	429c      	cmp	r4, r3
 8019cdc:	d158      	bne.n	8019d90 <_vfiprintf_r+0xd0>
 8019cde:	6874      	ldr	r4, [r6, #4]
 8019ce0:	89a3      	ldrh	r3, [r4, #12]
 8019ce2:	0718      	lsls	r0, r3, #28
 8019ce4:	d55e      	bpl.n	8019da4 <_vfiprintf_r+0xe4>
 8019ce6:	6923      	ldr	r3, [r4, #16]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d05b      	beq.n	8019da4 <_vfiprintf_r+0xe4>
 8019cec:	2300      	movs	r3, #0
 8019cee:	9309      	str	r3, [sp, #36]	; 0x24
 8019cf0:	2320      	movs	r3, #32
 8019cf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019cf6:	2330      	movs	r3, #48	; 0x30
 8019cf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019cfc:	9503      	str	r5, [sp, #12]
 8019cfe:	f04f 0b01 	mov.w	fp, #1
 8019d02:	46b8      	mov	r8, r7
 8019d04:	4645      	mov	r5, r8
 8019d06:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019d0a:	b10b      	cbz	r3, 8019d10 <_vfiprintf_r+0x50>
 8019d0c:	2b25      	cmp	r3, #37	; 0x25
 8019d0e:	d154      	bne.n	8019dba <_vfiprintf_r+0xfa>
 8019d10:	ebb8 0a07 	subs.w	sl, r8, r7
 8019d14:	d00b      	beq.n	8019d2e <_vfiprintf_r+0x6e>
 8019d16:	4653      	mov	r3, sl
 8019d18:	463a      	mov	r2, r7
 8019d1a:	4621      	mov	r1, r4
 8019d1c:	4630      	mov	r0, r6
 8019d1e:	f7ff ffbc 	bl	8019c9a <__sfputs_r>
 8019d22:	3001      	adds	r0, #1
 8019d24:	f000 80c2 	beq.w	8019eac <_vfiprintf_r+0x1ec>
 8019d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019d2a:	4453      	add	r3, sl
 8019d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8019d2e:	f898 3000 	ldrb.w	r3, [r8]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	f000 80ba 	beq.w	8019eac <_vfiprintf_r+0x1ec>
 8019d38:	2300      	movs	r3, #0
 8019d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8019d3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d42:	9304      	str	r3, [sp, #16]
 8019d44:	9307      	str	r3, [sp, #28]
 8019d46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d4a:	931a      	str	r3, [sp, #104]	; 0x68
 8019d4c:	46a8      	mov	r8, r5
 8019d4e:	2205      	movs	r2, #5
 8019d50:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019d54:	485e      	ldr	r0, [pc, #376]	; (8019ed0 <_vfiprintf_r+0x210>)
 8019d56:	f7e6 fa63 	bl	8000220 <memchr>
 8019d5a:	9b04      	ldr	r3, [sp, #16]
 8019d5c:	bb78      	cbnz	r0, 8019dbe <_vfiprintf_r+0xfe>
 8019d5e:	06d9      	lsls	r1, r3, #27
 8019d60:	bf44      	itt	mi
 8019d62:	2220      	movmi	r2, #32
 8019d64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019d68:	071a      	lsls	r2, r3, #28
 8019d6a:	bf44      	itt	mi
 8019d6c:	222b      	movmi	r2, #43	; 0x2b
 8019d6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019d72:	782a      	ldrb	r2, [r5, #0]
 8019d74:	2a2a      	cmp	r2, #42	; 0x2a
 8019d76:	d02a      	beq.n	8019dce <_vfiprintf_r+0x10e>
 8019d78:	9a07      	ldr	r2, [sp, #28]
 8019d7a:	46a8      	mov	r8, r5
 8019d7c:	2000      	movs	r0, #0
 8019d7e:	250a      	movs	r5, #10
 8019d80:	4641      	mov	r1, r8
 8019d82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d86:	3b30      	subs	r3, #48	; 0x30
 8019d88:	2b09      	cmp	r3, #9
 8019d8a:	d969      	bls.n	8019e60 <_vfiprintf_r+0x1a0>
 8019d8c:	b360      	cbz	r0, 8019de8 <_vfiprintf_r+0x128>
 8019d8e:	e024      	b.n	8019dda <_vfiprintf_r+0x11a>
 8019d90:	4b50      	ldr	r3, [pc, #320]	; (8019ed4 <_vfiprintf_r+0x214>)
 8019d92:	429c      	cmp	r4, r3
 8019d94:	d101      	bne.n	8019d9a <_vfiprintf_r+0xda>
 8019d96:	68b4      	ldr	r4, [r6, #8]
 8019d98:	e7a2      	b.n	8019ce0 <_vfiprintf_r+0x20>
 8019d9a:	4b4f      	ldr	r3, [pc, #316]	; (8019ed8 <_vfiprintf_r+0x218>)
 8019d9c:	429c      	cmp	r4, r3
 8019d9e:	bf08      	it	eq
 8019da0:	68f4      	ldreq	r4, [r6, #12]
 8019da2:	e79d      	b.n	8019ce0 <_vfiprintf_r+0x20>
 8019da4:	4621      	mov	r1, r4
 8019da6:	4630      	mov	r0, r6
 8019da8:	f000 fae0 	bl	801a36c <__swsetup_r>
 8019dac:	2800      	cmp	r0, #0
 8019dae:	d09d      	beq.n	8019cec <_vfiprintf_r+0x2c>
 8019db0:	f04f 30ff 	mov.w	r0, #4294967295
 8019db4:	b01d      	add	sp, #116	; 0x74
 8019db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dba:	46a8      	mov	r8, r5
 8019dbc:	e7a2      	b.n	8019d04 <_vfiprintf_r+0x44>
 8019dbe:	4a44      	ldr	r2, [pc, #272]	; (8019ed0 <_vfiprintf_r+0x210>)
 8019dc0:	1a80      	subs	r0, r0, r2
 8019dc2:	fa0b f000 	lsl.w	r0, fp, r0
 8019dc6:	4318      	orrs	r0, r3
 8019dc8:	9004      	str	r0, [sp, #16]
 8019dca:	4645      	mov	r5, r8
 8019dcc:	e7be      	b.n	8019d4c <_vfiprintf_r+0x8c>
 8019dce:	9a03      	ldr	r2, [sp, #12]
 8019dd0:	1d11      	adds	r1, r2, #4
 8019dd2:	6812      	ldr	r2, [r2, #0]
 8019dd4:	9103      	str	r1, [sp, #12]
 8019dd6:	2a00      	cmp	r2, #0
 8019dd8:	db01      	blt.n	8019dde <_vfiprintf_r+0x11e>
 8019dda:	9207      	str	r2, [sp, #28]
 8019ddc:	e004      	b.n	8019de8 <_vfiprintf_r+0x128>
 8019dde:	4252      	negs	r2, r2
 8019de0:	f043 0302 	orr.w	r3, r3, #2
 8019de4:	9207      	str	r2, [sp, #28]
 8019de6:	9304      	str	r3, [sp, #16]
 8019de8:	f898 3000 	ldrb.w	r3, [r8]
 8019dec:	2b2e      	cmp	r3, #46	; 0x2e
 8019dee:	d10e      	bne.n	8019e0e <_vfiprintf_r+0x14e>
 8019df0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019df4:	2b2a      	cmp	r3, #42	; 0x2a
 8019df6:	d138      	bne.n	8019e6a <_vfiprintf_r+0x1aa>
 8019df8:	9b03      	ldr	r3, [sp, #12]
 8019dfa:	1d1a      	adds	r2, r3, #4
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	9203      	str	r2, [sp, #12]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	bfb8      	it	lt
 8019e04:	f04f 33ff 	movlt.w	r3, #4294967295
 8019e08:	f108 0802 	add.w	r8, r8, #2
 8019e0c:	9305      	str	r3, [sp, #20]
 8019e0e:	4d33      	ldr	r5, [pc, #204]	; (8019edc <_vfiprintf_r+0x21c>)
 8019e10:	f898 1000 	ldrb.w	r1, [r8]
 8019e14:	2203      	movs	r2, #3
 8019e16:	4628      	mov	r0, r5
 8019e18:	f7e6 fa02 	bl	8000220 <memchr>
 8019e1c:	b140      	cbz	r0, 8019e30 <_vfiprintf_r+0x170>
 8019e1e:	2340      	movs	r3, #64	; 0x40
 8019e20:	1b40      	subs	r0, r0, r5
 8019e22:	fa03 f000 	lsl.w	r0, r3, r0
 8019e26:	9b04      	ldr	r3, [sp, #16]
 8019e28:	4303      	orrs	r3, r0
 8019e2a:	f108 0801 	add.w	r8, r8, #1
 8019e2e:	9304      	str	r3, [sp, #16]
 8019e30:	f898 1000 	ldrb.w	r1, [r8]
 8019e34:	482a      	ldr	r0, [pc, #168]	; (8019ee0 <_vfiprintf_r+0x220>)
 8019e36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e3a:	2206      	movs	r2, #6
 8019e3c:	f108 0701 	add.w	r7, r8, #1
 8019e40:	f7e6 f9ee 	bl	8000220 <memchr>
 8019e44:	2800      	cmp	r0, #0
 8019e46:	d037      	beq.n	8019eb8 <_vfiprintf_r+0x1f8>
 8019e48:	4b26      	ldr	r3, [pc, #152]	; (8019ee4 <_vfiprintf_r+0x224>)
 8019e4a:	bb1b      	cbnz	r3, 8019e94 <_vfiprintf_r+0x1d4>
 8019e4c:	9b03      	ldr	r3, [sp, #12]
 8019e4e:	3307      	adds	r3, #7
 8019e50:	f023 0307 	bic.w	r3, r3, #7
 8019e54:	3308      	adds	r3, #8
 8019e56:	9303      	str	r3, [sp, #12]
 8019e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e5a:	444b      	add	r3, r9
 8019e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8019e5e:	e750      	b.n	8019d02 <_vfiprintf_r+0x42>
 8019e60:	fb05 3202 	mla	r2, r5, r2, r3
 8019e64:	2001      	movs	r0, #1
 8019e66:	4688      	mov	r8, r1
 8019e68:	e78a      	b.n	8019d80 <_vfiprintf_r+0xc0>
 8019e6a:	2300      	movs	r3, #0
 8019e6c:	f108 0801 	add.w	r8, r8, #1
 8019e70:	9305      	str	r3, [sp, #20]
 8019e72:	4619      	mov	r1, r3
 8019e74:	250a      	movs	r5, #10
 8019e76:	4640      	mov	r0, r8
 8019e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e7c:	3a30      	subs	r2, #48	; 0x30
 8019e7e:	2a09      	cmp	r2, #9
 8019e80:	d903      	bls.n	8019e8a <_vfiprintf_r+0x1ca>
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d0c3      	beq.n	8019e0e <_vfiprintf_r+0x14e>
 8019e86:	9105      	str	r1, [sp, #20]
 8019e88:	e7c1      	b.n	8019e0e <_vfiprintf_r+0x14e>
 8019e8a:	fb05 2101 	mla	r1, r5, r1, r2
 8019e8e:	2301      	movs	r3, #1
 8019e90:	4680      	mov	r8, r0
 8019e92:	e7f0      	b.n	8019e76 <_vfiprintf_r+0x1b6>
 8019e94:	ab03      	add	r3, sp, #12
 8019e96:	9300      	str	r3, [sp, #0]
 8019e98:	4622      	mov	r2, r4
 8019e9a:	4b13      	ldr	r3, [pc, #76]	; (8019ee8 <_vfiprintf_r+0x228>)
 8019e9c:	a904      	add	r1, sp, #16
 8019e9e:	4630      	mov	r0, r6
 8019ea0:	f3af 8000 	nop.w
 8019ea4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019ea8:	4681      	mov	r9, r0
 8019eaa:	d1d5      	bne.n	8019e58 <_vfiprintf_r+0x198>
 8019eac:	89a3      	ldrh	r3, [r4, #12]
 8019eae:	065b      	lsls	r3, r3, #25
 8019eb0:	f53f af7e 	bmi.w	8019db0 <_vfiprintf_r+0xf0>
 8019eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019eb6:	e77d      	b.n	8019db4 <_vfiprintf_r+0xf4>
 8019eb8:	ab03      	add	r3, sp, #12
 8019eba:	9300      	str	r3, [sp, #0]
 8019ebc:	4622      	mov	r2, r4
 8019ebe:	4b0a      	ldr	r3, [pc, #40]	; (8019ee8 <_vfiprintf_r+0x228>)
 8019ec0:	a904      	add	r1, sp, #16
 8019ec2:	4630      	mov	r0, r6
 8019ec4:	f000 f888 	bl	8019fd8 <_printf_i>
 8019ec8:	e7ec      	b.n	8019ea4 <_vfiprintf_r+0x1e4>
 8019eca:	bf00      	nop
 8019ecc:	080230ac 	.word	0x080230ac
 8019ed0:	080230ec 	.word	0x080230ec
 8019ed4:	080230cc 	.word	0x080230cc
 8019ed8:	0802308c 	.word	0x0802308c
 8019edc:	080230f2 	.word	0x080230f2
 8019ee0:	080230f6 	.word	0x080230f6
 8019ee4:	00000000 	.word	0x00000000
 8019ee8:	08019c9b 	.word	0x08019c9b

08019eec <_printf_common>:
 8019eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ef0:	4691      	mov	r9, r2
 8019ef2:	461f      	mov	r7, r3
 8019ef4:	688a      	ldr	r2, [r1, #8]
 8019ef6:	690b      	ldr	r3, [r1, #16]
 8019ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019efc:	4293      	cmp	r3, r2
 8019efe:	bfb8      	it	lt
 8019f00:	4613      	movlt	r3, r2
 8019f02:	f8c9 3000 	str.w	r3, [r9]
 8019f06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019f0a:	4606      	mov	r6, r0
 8019f0c:	460c      	mov	r4, r1
 8019f0e:	b112      	cbz	r2, 8019f16 <_printf_common+0x2a>
 8019f10:	3301      	adds	r3, #1
 8019f12:	f8c9 3000 	str.w	r3, [r9]
 8019f16:	6823      	ldr	r3, [r4, #0]
 8019f18:	0699      	lsls	r1, r3, #26
 8019f1a:	bf42      	ittt	mi
 8019f1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8019f20:	3302      	addmi	r3, #2
 8019f22:	f8c9 3000 	strmi.w	r3, [r9]
 8019f26:	6825      	ldr	r5, [r4, #0]
 8019f28:	f015 0506 	ands.w	r5, r5, #6
 8019f2c:	d107      	bne.n	8019f3e <_printf_common+0x52>
 8019f2e:	f104 0a19 	add.w	sl, r4, #25
 8019f32:	68e3      	ldr	r3, [r4, #12]
 8019f34:	f8d9 2000 	ldr.w	r2, [r9]
 8019f38:	1a9b      	subs	r3, r3, r2
 8019f3a:	42ab      	cmp	r3, r5
 8019f3c:	dc28      	bgt.n	8019f90 <_printf_common+0xa4>
 8019f3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019f42:	6822      	ldr	r2, [r4, #0]
 8019f44:	3300      	adds	r3, #0
 8019f46:	bf18      	it	ne
 8019f48:	2301      	movne	r3, #1
 8019f4a:	0692      	lsls	r2, r2, #26
 8019f4c:	d42d      	bmi.n	8019faa <_printf_common+0xbe>
 8019f4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019f52:	4639      	mov	r1, r7
 8019f54:	4630      	mov	r0, r6
 8019f56:	47c0      	blx	r8
 8019f58:	3001      	adds	r0, #1
 8019f5a:	d020      	beq.n	8019f9e <_printf_common+0xb2>
 8019f5c:	6823      	ldr	r3, [r4, #0]
 8019f5e:	68e5      	ldr	r5, [r4, #12]
 8019f60:	f8d9 2000 	ldr.w	r2, [r9]
 8019f64:	f003 0306 	and.w	r3, r3, #6
 8019f68:	2b04      	cmp	r3, #4
 8019f6a:	bf08      	it	eq
 8019f6c:	1aad      	subeq	r5, r5, r2
 8019f6e:	68a3      	ldr	r3, [r4, #8]
 8019f70:	6922      	ldr	r2, [r4, #16]
 8019f72:	bf0c      	ite	eq
 8019f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019f78:	2500      	movne	r5, #0
 8019f7a:	4293      	cmp	r3, r2
 8019f7c:	bfc4      	itt	gt
 8019f7e:	1a9b      	subgt	r3, r3, r2
 8019f80:	18ed      	addgt	r5, r5, r3
 8019f82:	f04f 0900 	mov.w	r9, #0
 8019f86:	341a      	adds	r4, #26
 8019f88:	454d      	cmp	r5, r9
 8019f8a:	d11a      	bne.n	8019fc2 <_printf_common+0xd6>
 8019f8c:	2000      	movs	r0, #0
 8019f8e:	e008      	b.n	8019fa2 <_printf_common+0xb6>
 8019f90:	2301      	movs	r3, #1
 8019f92:	4652      	mov	r2, sl
 8019f94:	4639      	mov	r1, r7
 8019f96:	4630      	mov	r0, r6
 8019f98:	47c0      	blx	r8
 8019f9a:	3001      	adds	r0, #1
 8019f9c:	d103      	bne.n	8019fa6 <_printf_common+0xba>
 8019f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8019fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fa6:	3501      	adds	r5, #1
 8019fa8:	e7c3      	b.n	8019f32 <_printf_common+0x46>
 8019faa:	18e1      	adds	r1, r4, r3
 8019fac:	1c5a      	adds	r2, r3, #1
 8019fae:	2030      	movs	r0, #48	; 0x30
 8019fb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019fb4:	4422      	add	r2, r4
 8019fb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019fba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019fbe:	3302      	adds	r3, #2
 8019fc0:	e7c5      	b.n	8019f4e <_printf_common+0x62>
 8019fc2:	2301      	movs	r3, #1
 8019fc4:	4622      	mov	r2, r4
 8019fc6:	4639      	mov	r1, r7
 8019fc8:	4630      	mov	r0, r6
 8019fca:	47c0      	blx	r8
 8019fcc:	3001      	adds	r0, #1
 8019fce:	d0e6      	beq.n	8019f9e <_printf_common+0xb2>
 8019fd0:	f109 0901 	add.w	r9, r9, #1
 8019fd4:	e7d8      	b.n	8019f88 <_printf_common+0x9c>
	...

08019fd8 <_printf_i>:
 8019fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019fdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8019fe0:	460c      	mov	r4, r1
 8019fe2:	7e09      	ldrb	r1, [r1, #24]
 8019fe4:	b085      	sub	sp, #20
 8019fe6:	296e      	cmp	r1, #110	; 0x6e
 8019fe8:	4617      	mov	r7, r2
 8019fea:	4606      	mov	r6, r0
 8019fec:	4698      	mov	r8, r3
 8019fee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019ff0:	f000 80b3 	beq.w	801a15a <_printf_i+0x182>
 8019ff4:	d822      	bhi.n	801a03c <_printf_i+0x64>
 8019ff6:	2963      	cmp	r1, #99	; 0x63
 8019ff8:	d036      	beq.n	801a068 <_printf_i+0x90>
 8019ffa:	d80a      	bhi.n	801a012 <_printf_i+0x3a>
 8019ffc:	2900      	cmp	r1, #0
 8019ffe:	f000 80b9 	beq.w	801a174 <_printf_i+0x19c>
 801a002:	2958      	cmp	r1, #88	; 0x58
 801a004:	f000 8083 	beq.w	801a10e <_printf_i+0x136>
 801a008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a00c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a010:	e032      	b.n	801a078 <_printf_i+0xa0>
 801a012:	2964      	cmp	r1, #100	; 0x64
 801a014:	d001      	beq.n	801a01a <_printf_i+0x42>
 801a016:	2969      	cmp	r1, #105	; 0x69
 801a018:	d1f6      	bne.n	801a008 <_printf_i+0x30>
 801a01a:	6820      	ldr	r0, [r4, #0]
 801a01c:	6813      	ldr	r3, [r2, #0]
 801a01e:	0605      	lsls	r5, r0, #24
 801a020:	f103 0104 	add.w	r1, r3, #4
 801a024:	d52a      	bpl.n	801a07c <_printf_i+0xa4>
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	6011      	str	r1, [r2, #0]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	da03      	bge.n	801a036 <_printf_i+0x5e>
 801a02e:	222d      	movs	r2, #45	; 0x2d
 801a030:	425b      	negs	r3, r3
 801a032:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a036:	486f      	ldr	r0, [pc, #444]	; (801a1f4 <_printf_i+0x21c>)
 801a038:	220a      	movs	r2, #10
 801a03a:	e039      	b.n	801a0b0 <_printf_i+0xd8>
 801a03c:	2973      	cmp	r1, #115	; 0x73
 801a03e:	f000 809d 	beq.w	801a17c <_printf_i+0x1a4>
 801a042:	d808      	bhi.n	801a056 <_printf_i+0x7e>
 801a044:	296f      	cmp	r1, #111	; 0x6f
 801a046:	d020      	beq.n	801a08a <_printf_i+0xb2>
 801a048:	2970      	cmp	r1, #112	; 0x70
 801a04a:	d1dd      	bne.n	801a008 <_printf_i+0x30>
 801a04c:	6823      	ldr	r3, [r4, #0]
 801a04e:	f043 0320 	orr.w	r3, r3, #32
 801a052:	6023      	str	r3, [r4, #0]
 801a054:	e003      	b.n	801a05e <_printf_i+0x86>
 801a056:	2975      	cmp	r1, #117	; 0x75
 801a058:	d017      	beq.n	801a08a <_printf_i+0xb2>
 801a05a:	2978      	cmp	r1, #120	; 0x78
 801a05c:	d1d4      	bne.n	801a008 <_printf_i+0x30>
 801a05e:	2378      	movs	r3, #120	; 0x78
 801a060:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a064:	4864      	ldr	r0, [pc, #400]	; (801a1f8 <_printf_i+0x220>)
 801a066:	e055      	b.n	801a114 <_printf_i+0x13c>
 801a068:	6813      	ldr	r3, [r2, #0]
 801a06a:	1d19      	adds	r1, r3, #4
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	6011      	str	r1, [r2, #0]
 801a070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a078:	2301      	movs	r3, #1
 801a07a:	e08c      	b.n	801a196 <_printf_i+0x1be>
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	6011      	str	r1, [r2, #0]
 801a080:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a084:	bf18      	it	ne
 801a086:	b21b      	sxthne	r3, r3
 801a088:	e7cf      	b.n	801a02a <_printf_i+0x52>
 801a08a:	6813      	ldr	r3, [r2, #0]
 801a08c:	6825      	ldr	r5, [r4, #0]
 801a08e:	1d18      	adds	r0, r3, #4
 801a090:	6010      	str	r0, [r2, #0]
 801a092:	0628      	lsls	r0, r5, #24
 801a094:	d501      	bpl.n	801a09a <_printf_i+0xc2>
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	e002      	b.n	801a0a0 <_printf_i+0xc8>
 801a09a:	0668      	lsls	r0, r5, #25
 801a09c:	d5fb      	bpl.n	801a096 <_printf_i+0xbe>
 801a09e:	881b      	ldrh	r3, [r3, #0]
 801a0a0:	4854      	ldr	r0, [pc, #336]	; (801a1f4 <_printf_i+0x21c>)
 801a0a2:	296f      	cmp	r1, #111	; 0x6f
 801a0a4:	bf14      	ite	ne
 801a0a6:	220a      	movne	r2, #10
 801a0a8:	2208      	moveq	r2, #8
 801a0aa:	2100      	movs	r1, #0
 801a0ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a0b0:	6865      	ldr	r5, [r4, #4]
 801a0b2:	60a5      	str	r5, [r4, #8]
 801a0b4:	2d00      	cmp	r5, #0
 801a0b6:	f2c0 8095 	blt.w	801a1e4 <_printf_i+0x20c>
 801a0ba:	6821      	ldr	r1, [r4, #0]
 801a0bc:	f021 0104 	bic.w	r1, r1, #4
 801a0c0:	6021      	str	r1, [r4, #0]
 801a0c2:	2b00      	cmp	r3, #0
 801a0c4:	d13d      	bne.n	801a142 <_printf_i+0x16a>
 801a0c6:	2d00      	cmp	r5, #0
 801a0c8:	f040 808e 	bne.w	801a1e8 <_printf_i+0x210>
 801a0cc:	4665      	mov	r5, ip
 801a0ce:	2a08      	cmp	r2, #8
 801a0d0:	d10b      	bne.n	801a0ea <_printf_i+0x112>
 801a0d2:	6823      	ldr	r3, [r4, #0]
 801a0d4:	07db      	lsls	r3, r3, #31
 801a0d6:	d508      	bpl.n	801a0ea <_printf_i+0x112>
 801a0d8:	6923      	ldr	r3, [r4, #16]
 801a0da:	6862      	ldr	r2, [r4, #4]
 801a0dc:	429a      	cmp	r2, r3
 801a0de:	bfde      	ittt	le
 801a0e0:	2330      	movle	r3, #48	; 0x30
 801a0e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a0e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a0ea:	ebac 0305 	sub.w	r3, ip, r5
 801a0ee:	6123      	str	r3, [r4, #16]
 801a0f0:	f8cd 8000 	str.w	r8, [sp]
 801a0f4:	463b      	mov	r3, r7
 801a0f6:	aa03      	add	r2, sp, #12
 801a0f8:	4621      	mov	r1, r4
 801a0fa:	4630      	mov	r0, r6
 801a0fc:	f7ff fef6 	bl	8019eec <_printf_common>
 801a100:	3001      	adds	r0, #1
 801a102:	d14d      	bne.n	801a1a0 <_printf_i+0x1c8>
 801a104:	f04f 30ff 	mov.w	r0, #4294967295
 801a108:	b005      	add	sp, #20
 801a10a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a10e:	4839      	ldr	r0, [pc, #228]	; (801a1f4 <_printf_i+0x21c>)
 801a110:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a114:	6813      	ldr	r3, [r2, #0]
 801a116:	6821      	ldr	r1, [r4, #0]
 801a118:	1d1d      	adds	r5, r3, #4
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	6015      	str	r5, [r2, #0]
 801a11e:	060a      	lsls	r2, r1, #24
 801a120:	d50b      	bpl.n	801a13a <_printf_i+0x162>
 801a122:	07ca      	lsls	r2, r1, #31
 801a124:	bf44      	itt	mi
 801a126:	f041 0120 	orrmi.w	r1, r1, #32
 801a12a:	6021      	strmi	r1, [r4, #0]
 801a12c:	b91b      	cbnz	r3, 801a136 <_printf_i+0x15e>
 801a12e:	6822      	ldr	r2, [r4, #0]
 801a130:	f022 0220 	bic.w	r2, r2, #32
 801a134:	6022      	str	r2, [r4, #0]
 801a136:	2210      	movs	r2, #16
 801a138:	e7b7      	b.n	801a0aa <_printf_i+0xd2>
 801a13a:	064d      	lsls	r5, r1, #25
 801a13c:	bf48      	it	mi
 801a13e:	b29b      	uxthmi	r3, r3
 801a140:	e7ef      	b.n	801a122 <_printf_i+0x14a>
 801a142:	4665      	mov	r5, ip
 801a144:	fbb3 f1f2 	udiv	r1, r3, r2
 801a148:	fb02 3311 	mls	r3, r2, r1, r3
 801a14c:	5cc3      	ldrb	r3, [r0, r3]
 801a14e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a152:	460b      	mov	r3, r1
 801a154:	2900      	cmp	r1, #0
 801a156:	d1f5      	bne.n	801a144 <_printf_i+0x16c>
 801a158:	e7b9      	b.n	801a0ce <_printf_i+0xf6>
 801a15a:	6813      	ldr	r3, [r2, #0]
 801a15c:	6825      	ldr	r5, [r4, #0]
 801a15e:	6961      	ldr	r1, [r4, #20]
 801a160:	1d18      	adds	r0, r3, #4
 801a162:	6010      	str	r0, [r2, #0]
 801a164:	0628      	lsls	r0, r5, #24
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	d501      	bpl.n	801a16e <_printf_i+0x196>
 801a16a:	6019      	str	r1, [r3, #0]
 801a16c:	e002      	b.n	801a174 <_printf_i+0x19c>
 801a16e:	066a      	lsls	r2, r5, #25
 801a170:	d5fb      	bpl.n	801a16a <_printf_i+0x192>
 801a172:	8019      	strh	r1, [r3, #0]
 801a174:	2300      	movs	r3, #0
 801a176:	6123      	str	r3, [r4, #16]
 801a178:	4665      	mov	r5, ip
 801a17a:	e7b9      	b.n	801a0f0 <_printf_i+0x118>
 801a17c:	6813      	ldr	r3, [r2, #0]
 801a17e:	1d19      	adds	r1, r3, #4
 801a180:	6011      	str	r1, [r2, #0]
 801a182:	681d      	ldr	r5, [r3, #0]
 801a184:	6862      	ldr	r2, [r4, #4]
 801a186:	2100      	movs	r1, #0
 801a188:	4628      	mov	r0, r5
 801a18a:	f7e6 f849 	bl	8000220 <memchr>
 801a18e:	b108      	cbz	r0, 801a194 <_printf_i+0x1bc>
 801a190:	1b40      	subs	r0, r0, r5
 801a192:	6060      	str	r0, [r4, #4]
 801a194:	6863      	ldr	r3, [r4, #4]
 801a196:	6123      	str	r3, [r4, #16]
 801a198:	2300      	movs	r3, #0
 801a19a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a19e:	e7a7      	b.n	801a0f0 <_printf_i+0x118>
 801a1a0:	6923      	ldr	r3, [r4, #16]
 801a1a2:	462a      	mov	r2, r5
 801a1a4:	4639      	mov	r1, r7
 801a1a6:	4630      	mov	r0, r6
 801a1a8:	47c0      	blx	r8
 801a1aa:	3001      	adds	r0, #1
 801a1ac:	d0aa      	beq.n	801a104 <_printf_i+0x12c>
 801a1ae:	6823      	ldr	r3, [r4, #0]
 801a1b0:	079b      	lsls	r3, r3, #30
 801a1b2:	d413      	bmi.n	801a1dc <_printf_i+0x204>
 801a1b4:	68e0      	ldr	r0, [r4, #12]
 801a1b6:	9b03      	ldr	r3, [sp, #12]
 801a1b8:	4298      	cmp	r0, r3
 801a1ba:	bfb8      	it	lt
 801a1bc:	4618      	movlt	r0, r3
 801a1be:	e7a3      	b.n	801a108 <_printf_i+0x130>
 801a1c0:	2301      	movs	r3, #1
 801a1c2:	464a      	mov	r2, r9
 801a1c4:	4639      	mov	r1, r7
 801a1c6:	4630      	mov	r0, r6
 801a1c8:	47c0      	blx	r8
 801a1ca:	3001      	adds	r0, #1
 801a1cc:	d09a      	beq.n	801a104 <_printf_i+0x12c>
 801a1ce:	3501      	adds	r5, #1
 801a1d0:	68e3      	ldr	r3, [r4, #12]
 801a1d2:	9a03      	ldr	r2, [sp, #12]
 801a1d4:	1a9b      	subs	r3, r3, r2
 801a1d6:	42ab      	cmp	r3, r5
 801a1d8:	dcf2      	bgt.n	801a1c0 <_printf_i+0x1e8>
 801a1da:	e7eb      	b.n	801a1b4 <_printf_i+0x1dc>
 801a1dc:	2500      	movs	r5, #0
 801a1de:	f104 0919 	add.w	r9, r4, #25
 801a1e2:	e7f5      	b.n	801a1d0 <_printf_i+0x1f8>
 801a1e4:	2b00      	cmp	r3, #0
 801a1e6:	d1ac      	bne.n	801a142 <_printf_i+0x16a>
 801a1e8:	7803      	ldrb	r3, [r0, #0]
 801a1ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a1ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a1f2:	e76c      	b.n	801a0ce <_printf_i+0xf6>
 801a1f4:	080230fd 	.word	0x080230fd
 801a1f8:	0802310e 	.word	0x0802310e

0801a1fc <_sbrk_r>:
 801a1fc:	b538      	push	{r3, r4, r5, lr}
 801a1fe:	4c06      	ldr	r4, [pc, #24]	; (801a218 <_sbrk_r+0x1c>)
 801a200:	2300      	movs	r3, #0
 801a202:	4605      	mov	r5, r0
 801a204:	4608      	mov	r0, r1
 801a206:	6023      	str	r3, [r4, #0]
 801a208:	f7e6 fd90 	bl	8000d2c <_sbrk>
 801a20c:	1c43      	adds	r3, r0, #1
 801a20e:	d102      	bne.n	801a216 <_sbrk_r+0x1a>
 801a210:	6823      	ldr	r3, [r4, #0]
 801a212:	b103      	cbz	r3, 801a216 <_sbrk_r+0x1a>
 801a214:	602b      	str	r3, [r5, #0]
 801a216:	bd38      	pop	{r3, r4, r5, pc}
 801a218:	20016e58 	.word	0x20016e58

0801a21c <__sread>:
 801a21c:	b510      	push	{r4, lr}
 801a21e:	460c      	mov	r4, r1
 801a220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a224:	f000 fa6e 	bl	801a704 <_read_r>
 801a228:	2800      	cmp	r0, #0
 801a22a:	bfab      	itete	ge
 801a22c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a22e:	89a3      	ldrhlt	r3, [r4, #12]
 801a230:	181b      	addge	r3, r3, r0
 801a232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a236:	bfac      	ite	ge
 801a238:	6563      	strge	r3, [r4, #84]	; 0x54
 801a23a:	81a3      	strhlt	r3, [r4, #12]
 801a23c:	bd10      	pop	{r4, pc}

0801a23e <__swrite>:
 801a23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a242:	461f      	mov	r7, r3
 801a244:	898b      	ldrh	r3, [r1, #12]
 801a246:	05db      	lsls	r3, r3, #23
 801a248:	4605      	mov	r5, r0
 801a24a:	460c      	mov	r4, r1
 801a24c:	4616      	mov	r6, r2
 801a24e:	d505      	bpl.n	801a25c <__swrite+0x1e>
 801a250:	2302      	movs	r3, #2
 801a252:	2200      	movs	r2, #0
 801a254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a258:	f000 f9b6 	bl	801a5c8 <_lseek_r>
 801a25c:	89a3      	ldrh	r3, [r4, #12]
 801a25e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a266:	81a3      	strh	r3, [r4, #12]
 801a268:	4632      	mov	r2, r6
 801a26a:	463b      	mov	r3, r7
 801a26c:	4628      	mov	r0, r5
 801a26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a272:	f000 b869 	b.w	801a348 <_write_r>

0801a276 <__sseek>:
 801a276:	b510      	push	{r4, lr}
 801a278:	460c      	mov	r4, r1
 801a27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a27e:	f000 f9a3 	bl	801a5c8 <_lseek_r>
 801a282:	1c43      	adds	r3, r0, #1
 801a284:	89a3      	ldrh	r3, [r4, #12]
 801a286:	bf15      	itete	ne
 801a288:	6560      	strne	r0, [r4, #84]	; 0x54
 801a28a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a28e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a292:	81a3      	strheq	r3, [r4, #12]
 801a294:	bf18      	it	ne
 801a296:	81a3      	strhne	r3, [r4, #12]
 801a298:	bd10      	pop	{r4, pc}

0801a29a <__sclose>:
 801a29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a29e:	f000 b8d3 	b.w	801a448 <_close_r>
	...

0801a2a4 <__swbuf_r>:
 801a2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2a6:	460e      	mov	r6, r1
 801a2a8:	4614      	mov	r4, r2
 801a2aa:	4605      	mov	r5, r0
 801a2ac:	b118      	cbz	r0, 801a2b6 <__swbuf_r+0x12>
 801a2ae:	6983      	ldr	r3, [r0, #24]
 801a2b0:	b90b      	cbnz	r3, 801a2b6 <__swbuf_r+0x12>
 801a2b2:	f7ff fa4f 	bl	8019754 <__sinit>
 801a2b6:	4b21      	ldr	r3, [pc, #132]	; (801a33c <__swbuf_r+0x98>)
 801a2b8:	429c      	cmp	r4, r3
 801a2ba:	d12a      	bne.n	801a312 <__swbuf_r+0x6e>
 801a2bc:	686c      	ldr	r4, [r5, #4]
 801a2be:	69a3      	ldr	r3, [r4, #24]
 801a2c0:	60a3      	str	r3, [r4, #8]
 801a2c2:	89a3      	ldrh	r3, [r4, #12]
 801a2c4:	071a      	lsls	r2, r3, #28
 801a2c6:	d52e      	bpl.n	801a326 <__swbuf_r+0x82>
 801a2c8:	6923      	ldr	r3, [r4, #16]
 801a2ca:	b363      	cbz	r3, 801a326 <__swbuf_r+0x82>
 801a2cc:	6923      	ldr	r3, [r4, #16]
 801a2ce:	6820      	ldr	r0, [r4, #0]
 801a2d0:	1ac0      	subs	r0, r0, r3
 801a2d2:	6963      	ldr	r3, [r4, #20]
 801a2d4:	b2f6      	uxtb	r6, r6
 801a2d6:	4283      	cmp	r3, r0
 801a2d8:	4637      	mov	r7, r6
 801a2da:	dc04      	bgt.n	801a2e6 <__swbuf_r+0x42>
 801a2dc:	4621      	mov	r1, r4
 801a2de:	4628      	mov	r0, r5
 801a2e0:	f000 f948 	bl	801a574 <_fflush_r>
 801a2e4:	bb28      	cbnz	r0, 801a332 <__swbuf_r+0x8e>
 801a2e6:	68a3      	ldr	r3, [r4, #8]
 801a2e8:	3b01      	subs	r3, #1
 801a2ea:	60a3      	str	r3, [r4, #8]
 801a2ec:	6823      	ldr	r3, [r4, #0]
 801a2ee:	1c5a      	adds	r2, r3, #1
 801a2f0:	6022      	str	r2, [r4, #0]
 801a2f2:	701e      	strb	r6, [r3, #0]
 801a2f4:	6963      	ldr	r3, [r4, #20]
 801a2f6:	3001      	adds	r0, #1
 801a2f8:	4283      	cmp	r3, r0
 801a2fa:	d004      	beq.n	801a306 <__swbuf_r+0x62>
 801a2fc:	89a3      	ldrh	r3, [r4, #12]
 801a2fe:	07db      	lsls	r3, r3, #31
 801a300:	d519      	bpl.n	801a336 <__swbuf_r+0x92>
 801a302:	2e0a      	cmp	r6, #10
 801a304:	d117      	bne.n	801a336 <__swbuf_r+0x92>
 801a306:	4621      	mov	r1, r4
 801a308:	4628      	mov	r0, r5
 801a30a:	f000 f933 	bl	801a574 <_fflush_r>
 801a30e:	b190      	cbz	r0, 801a336 <__swbuf_r+0x92>
 801a310:	e00f      	b.n	801a332 <__swbuf_r+0x8e>
 801a312:	4b0b      	ldr	r3, [pc, #44]	; (801a340 <__swbuf_r+0x9c>)
 801a314:	429c      	cmp	r4, r3
 801a316:	d101      	bne.n	801a31c <__swbuf_r+0x78>
 801a318:	68ac      	ldr	r4, [r5, #8]
 801a31a:	e7d0      	b.n	801a2be <__swbuf_r+0x1a>
 801a31c:	4b09      	ldr	r3, [pc, #36]	; (801a344 <__swbuf_r+0xa0>)
 801a31e:	429c      	cmp	r4, r3
 801a320:	bf08      	it	eq
 801a322:	68ec      	ldreq	r4, [r5, #12]
 801a324:	e7cb      	b.n	801a2be <__swbuf_r+0x1a>
 801a326:	4621      	mov	r1, r4
 801a328:	4628      	mov	r0, r5
 801a32a:	f000 f81f 	bl	801a36c <__swsetup_r>
 801a32e:	2800      	cmp	r0, #0
 801a330:	d0cc      	beq.n	801a2cc <__swbuf_r+0x28>
 801a332:	f04f 37ff 	mov.w	r7, #4294967295
 801a336:	4638      	mov	r0, r7
 801a338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a33a:	bf00      	nop
 801a33c:	080230ac 	.word	0x080230ac
 801a340:	080230cc 	.word	0x080230cc
 801a344:	0802308c 	.word	0x0802308c

0801a348 <_write_r>:
 801a348:	b538      	push	{r3, r4, r5, lr}
 801a34a:	4c07      	ldr	r4, [pc, #28]	; (801a368 <_write_r+0x20>)
 801a34c:	4605      	mov	r5, r0
 801a34e:	4608      	mov	r0, r1
 801a350:	4611      	mov	r1, r2
 801a352:	2200      	movs	r2, #0
 801a354:	6022      	str	r2, [r4, #0]
 801a356:	461a      	mov	r2, r3
 801a358:	f7e6 fc97 	bl	8000c8a <_write>
 801a35c:	1c43      	adds	r3, r0, #1
 801a35e:	d102      	bne.n	801a366 <_write_r+0x1e>
 801a360:	6823      	ldr	r3, [r4, #0]
 801a362:	b103      	cbz	r3, 801a366 <_write_r+0x1e>
 801a364:	602b      	str	r3, [r5, #0]
 801a366:	bd38      	pop	{r3, r4, r5, pc}
 801a368:	20016e58 	.word	0x20016e58

0801a36c <__swsetup_r>:
 801a36c:	4b32      	ldr	r3, [pc, #200]	; (801a438 <__swsetup_r+0xcc>)
 801a36e:	b570      	push	{r4, r5, r6, lr}
 801a370:	681d      	ldr	r5, [r3, #0]
 801a372:	4606      	mov	r6, r0
 801a374:	460c      	mov	r4, r1
 801a376:	b125      	cbz	r5, 801a382 <__swsetup_r+0x16>
 801a378:	69ab      	ldr	r3, [r5, #24]
 801a37a:	b913      	cbnz	r3, 801a382 <__swsetup_r+0x16>
 801a37c:	4628      	mov	r0, r5
 801a37e:	f7ff f9e9 	bl	8019754 <__sinit>
 801a382:	4b2e      	ldr	r3, [pc, #184]	; (801a43c <__swsetup_r+0xd0>)
 801a384:	429c      	cmp	r4, r3
 801a386:	d10f      	bne.n	801a3a8 <__swsetup_r+0x3c>
 801a388:	686c      	ldr	r4, [r5, #4]
 801a38a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a38e:	b29a      	uxth	r2, r3
 801a390:	0715      	lsls	r5, r2, #28
 801a392:	d42c      	bmi.n	801a3ee <__swsetup_r+0x82>
 801a394:	06d0      	lsls	r0, r2, #27
 801a396:	d411      	bmi.n	801a3bc <__swsetup_r+0x50>
 801a398:	2209      	movs	r2, #9
 801a39a:	6032      	str	r2, [r6, #0]
 801a39c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3a0:	81a3      	strh	r3, [r4, #12]
 801a3a2:	f04f 30ff 	mov.w	r0, #4294967295
 801a3a6:	e03e      	b.n	801a426 <__swsetup_r+0xba>
 801a3a8:	4b25      	ldr	r3, [pc, #148]	; (801a440 <__swsetup_r+0xd4>)
 801a3aa:	429c      	cmp	r4, r3
 801a3ac:	d101      	bne.n	801a3b2 <__swsetup_r+0x46>
 801a3ae:	68ac      	ldr	r4, [r5, #8]
 801a3b0:	e7eb      	b.n	801a38a <__swsetup_r+0x1e>
 801a3b2:	4b24      	ldr	r3, [pc, #144]	; (801a444 <__swsetup_r+0xd8>)
 801a3b4:	429c      	cmp	r4, r3
 801a3b6:	bf08      	it	eq
 801a3b8:	68ec      	ldreq	r4, [r5, #12]
 801a3ba:	e7e6      	b.n	801a38a <__swsetup_r+0x1e>
 801a3bc:	0751      	lsls	r1, r2, #29
 801a3be:	d512      	bpl.n	801a3e6 <__swsetup_r+0x7a>
 801a3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a3c2:	b141      	cbz	r1, 801a3d6 <__swsetup_r+0x6a>
 801a3c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a3c8:	4299      	cmp	r1, r3
 801a3ca:	d002      	beq.n	801a3d2 <__swsetup_r+0x66>
 801a3cc:	4630      	mov	r0, r6
 801a3ce:	f7ff fa53 	bl	8019878 <_free_r>
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	6363      	str	r3, [r4, #52]	; 0x34
 801a3d6:	89a3      	ldrh	r3, [r4, #12]
 801a3d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a3dc:	81a3      	strh	r3, [r4, #12]
 801a3de:	2300      	movs	r3, #0
 801a3e0:	6063      	str	r3, [r4, #4]
 801a3e2:	6923      	ldr	r3, [r4, #16]
 801a3e4:	6023      	str	r3, [r4, #0]
 801a3e6:	89a3      	ldrh	r3, [r4, #12]
 801a3e8:	f043 0308 	orr.w	r3, r3, #8
 801a3ec:	81a3      	strh	r3, [r4, #12]
 801a3ee:	6923      	ldr	r3, [r4, #16]
 801a3f0:	b94b      	cbnz	r3, 801a406 <__swsetup_r+0x9a>
 801a3f2:	89a3      	ldrh	r3, [r4, #12]
 801a3f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a3fc:	d003      	beq.n	801a406 <__swsetup_r+0x9a>
 801a3fe:	4621      	mov	r1, r4
 801a400:	4630      	mov	r0, r6
 801a402:	f000 f917 	bl	801a634 <__smakebuf_r>
 801a406:	89a2      	ldrh	r2, [r4, #12]
 801a408:	f012 0301 	ands.w	r3, r2, #1
 801a40c:	d00c      	beq.n	801a428 <__swsetup_r+0xbc>
 801a40e:	2300      	movs	r3, #0
 801a410:	60a3      	str	r3, [r4, #8]
 801a412:	6963      	ldr	r3, [r4, #20]
 801a414:	425b      	negs	r3, r3
 801a416:	61a3      	str	r3, [r4, #24]
 801a418:	6923      	ldr	r3, [r4, #16]
 801a41a:	b953      	cbnz	r3, 801a432 <__swsetup_r+0xc6>
 801a41c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a420:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a424:	d1ba      	bne.n	801a39c <__swsetup_r+0x30>
 801a426:	bd70      	pop	{r4, r5, r6, pc}
 801a428:	0792      	lsls	r2, r2, #30
 801a42a:	bf58      	it	pl
 801a42c:	6963      	ldrpl	r3, [r4, #20]
 801a42e:	60a3      	str	r3, [r4, #8]
 801a430:	e7f2      	b.n	801a418 <__swsetup_r+0xac>
 801a432:	2000      	movs	r0, #0
 801a434:	e7f7      	b.n	801a426 <__swsetup_r+0xba>
 801a436:	bf00      	nop
 801a438:	20000020 	.word	0x20000020
 801a43c:	080230ac 	.word	0x080230ac
 801a440:	080230cc 	.word	0x080230cc
 801a444:	0802308c 	.word	0x0802308c

0801a448 <_close_r>:
 801a448:	b538      	push	{r3, r4, r5, lr}
 801a44a:	4c06      	ldr	r4, [pc, #24]	; (801a464 <_close_r+0x1c>)
 801a44c:	2300      	movs	r3, #0
 801a44e:	4605      	mov	r5, r0
 801a450:	4608      	mov	r0, r1
 801a452:	6023      	str	r3, [r4, #0]
 801a454:	f7e6 fc35 	bl	8000cc2 <_close>
 801a458:	1c43      	adds	r3, r0, #1
 801a45a:	d102      	bne.n	801a462 <_close_r+0x1a>
 801a45c:	6823      	ldr	r3, [r4, #0]
 801a45e:	b103      	cbz	r3, 801a462 <_close_r+0x1a>
 801a460:	602b      	str	r3, [r5, #0]
 801a462:	bd38      	pop	{r3, r4, r5, pc}
 801a464:	20016e58 	.word	0x20016e58

0801a468 <__sflush_r>:
 801a468:	898a      	ldrh	r2, [r1, #12]
 801a46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a46e:	4605      	mov	r5, r0
 801a470:	0710      	lsls	r0, r2, #28
 801a472:	460c      	mov	r4, r1
 801a474:	d458      	bmi.n	801a528 <__sflush_r+0xc0>
 801a476:	684b      	ldr	r3, [r1, #4]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	dc05      	bgt.n	801a488 <__sflush_r+0x20>
 801a47c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a47e:	2b00      	cmp	r3, #0
 801a480:	dc02      	bgt.n	801a488 <__sflush_r+0x20>
 801a482:	2000      	movs	r0, #0
 801a484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a48a:	2e00      	cmp	r6, #0
 801a48c:	d0f9      	beq.n	801a482 <__sflush_r+0x1a>
 801a48e:	2300      	movs	r3, #0
 801a490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a494:	682f      	ldr	r7, [r5, #0]
 801a496:	6a21      	ldr	r1, [r4, #32]
 801a498:	602b      	str	r3, [r5, #0]
 801a49a:	d032      	beq.n	801a502 <__sflush_r+0x9a>
 801a49c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a49e:	89a3      	ldrh	r3, [r4, #12]
 801a4a0:	075a      	lsls	r2, r3, #29
 801a4a2:	d505      	bpl.n	801a4b0 <__sflush_r+0x48>
 801a4a4:	6863      	ldr	r3, [r4, #4]
 801a4a6:	1ac0      	subs	r0, r0, r3
 801a4a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a4aa:	b10b      	cbz	r3, 801a4b0 <__sflush_r+0x48>
 801a4ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a4ae:	1ac0      	subs	r0, r0, r3
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	4602      	mov	r2, r0
 801a4b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a4b6:	6a21      	ldr	r1, [r4, #32]
 801a4b8:	4628      	mov	r0, r5
 801a4ba:	47b0      	blx	r6
 801a4bc:	1c43      	adds	r3, r0, #1
 801a4be:	89a3      	ldrh	r3, [r4, #12]
 801a4c0:	d106      	bne.n	801a4d0 <__sflush_r+0x68>
 801a4c2:	6829      	ldr	r1, [r5, #0]
 801a4c4:	291d      	cmp	r1, #29
 801a4c6:	d848      	bhi.n	801a55a <__sflush_r+0xf2>
 801a4c8:	4a29      	ldr	r2, [pc, #164]	; (801a570 <__sflush_r+0x108>)
 801a4ca:	40ca      	lsrs	r2, r1
 801a4cc:	07d6      	lsls	r6, r2, #31
 801a4ce:	d544      	bpl.n	801a55a <__sflush_r+0xf2>
 801a4d0:	2200      	movs	r2, #0
 801a4d2:	6062      	str	r2, [r4, #4]
 801a4d4:	04d9      	lsls	r1, r3, #19
 801a4d6:	6922      	ldr	r2, [r4, #16]
 801a4d8:	6022      	str	r2, [r4, #0]
 801a4da:	d504      	bpl.n	801a4e6 <__sflush_r+0x7e>
 801a4dc:	1c42      	adds	r2, r0, #1
 801a4de:	d101      	bne.n	801a4e4 <__sflush_r+0x7c>
 801a4e0:	682b      	ldr	r3, [r5, #0]
 801a4e2:	b903      	cbnz	r3, 801a4e6 <__sflush_r+0x7e>
 801a4e4:	6560      	str	r0, [r4, #84]	; 0x54
 801a4e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a4e8:	602f      	str	r7, [r5, #0]
 801a4ea:	2900      	cmp	r1, #0
 801a4ec:	d0c9      	beq.n	801a482 <__sflush_r+0x1a>
 801a4ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a4f2:	4299      	cmp	r1, r3
 801a4f4:	d002      	beq.n	801a4fc <__sflush_r+0x94>
 801a4f6:	4628      	mov	r0, r5
 801a4f8:	f7ff f9be 	bl	8019878 <_free_r>
 801a4fc:	2000      	movs	r0, #0
 801a4fe:	6360      	str	r0, [r4, #52]	; 0x34
 801a500:	e7c0      	b.n	801a484 <__sflush_r+0x1c>
 801a502:	2301      	movs	r3, #1
 801a504:	4628      	mov	r0, r5
 801a506:	47b0      	blx	r6
 801a508:	1c41      	adds	r1, r0, #1
 801a50a:	d1c8      	bne.n	801a49e <__sflush_r+0x36>
 801a50c:	682b      	ldr	r3, [r5, #0]
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d0c5      	beq.n	801a49e <__sflush_r+0x36>
 801a512:	2b1d      	cmp	r3, #29
 801a514:	d001      	beq.n	801a51a <__sflush_r+0xb2>
 801a516:	2b16      	cmp	r3, #22
 801a518:	d101      	bne.n	801a51e <__sflush_r+0xb6>
 801a51a:	602f      	str	r7, [r5, #0]
 801a51c:	e7b1      	b.n	801a482 <__sflush_r+0x1a>
 801a51e:	89a3      	ldrh	r3, [r4, #12]
 801a520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a524:	81a3      	strh	r3, [r4, #12]
 801a526:	e7ad      	b.n	801a484 <__sflush_r+0x1c>
 801a528:	690f      	ldr	r7, [r1, #16]
 801a52a:	2f00      	cmp	r7, #0
 801a52c:	d0a9      	beq.n	801a482 <__sflush_r+0x1a>
 801a52e:	0793      	lsls	r3, r2, #30
 801a530:	680e      	ldr	r6, [r1, #0]
 801a532:	bf08      	it	eq
 801a534:	694b      	ldreq	r3, [r1, #20]
 801a536:	600f      	str	r7, [r1, #0]
 801a538:	bf18      	it	ne
 801a53a:	2300      	movne	r3, #0
 801a53c:	eba6 0807 	sub.w	r8, r6, r7
 801a540:	608b      	str	r3, [r1, #8]
 801a542:	f1b8 0f00 	cmp.w	r8, #0
 801a546:	dd9c      	ble.n	801a482 <__sflush_r+0x1a>
 801a548:	4643      	mov	r3, r8
 801a54a:	463a      	mov	r2, r7
 801a54c:	6a21      	ldr	r1, [r4, #32]
 801a54e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a550:	4628      	mov	r0, r5
 801a552:	47b0      	blx	r6
 801a554:	2800      	cmp	r0, #0
 801a556:	dc06      	bgt.n	801a566 <__sflush_r+0xfe>
 801a558:	89a3      	ldrh	r3, [r4, #12]
 801a55a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a55e:	81a3      	strh	r3, [r4, #12]
 801a560:	f04f 30ff 	mov.w	r0, #4294967295
 801a564:	e78e      	b.n	801a484 <__sflush_r+0x1c>
 801a566:	4407      	add	r7, r0
 801a568:	eba8 0800 	sub.w	r8, r8, r0
 801a56c:	e7e9      	b.n	801a542 <__sflush_r+0xda>
 801a56e:	bf00      	nop
 801a570:	20400001 	.word	0x20400001

0801a574 <_fflush_r>:
 801a574:	b538      	push	{r3, r4, r5, lr}
 801a576:	690b      	ldr	r3, [r1, #16]
 801a578:	4605      	mov	r5, r0
 801a57a:	460c      	mov	r4, r1
 801a57c:	b1db      	cbz	r3, 801a5b6 <_fflush_r+0x42>
 801a57e:	b118      	cbz	r0, 801a588 <_fflush_r+0x14>
 801a580:	6983      	ldr	r3, [r0, #24]
 801a582:	b90b      	cbnz	r3, 801a588 <_fflush_r+0x14>
 801a584:	f7ff f8e6 	bl	8019754 <__sinit>
 801a588:	4b0c      	ldr	r3, [pc, #48]	; (801a5bc <_fflush_r+0x48>)
 801a58a:	429c      	cmp	r4, r3
 801a58c:	d109      	bne.n	801a5a2 <_fflush_r+0x2e>
 801a58e:	686c      	ldr	r4, [r5, #4]
 801a590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a594:	b17b      	cbz	r3, 801a5b6 <_fflush_r+0x42>
 801a596:	4621      	mov	r1, r4
 801a598:	4628      	mov	r0, r5
 801a59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a59e:	f7ff bf63 	b.w	801a468 <__sflush_r>
 801a5a2:	4b07      	ldr	r3, [pc, #28]	; (801a5c0 <_fflush_r+0x4c>)
 801a5a4:	429c      	cmp	r4, r3
 801a5a6:	d101      	bne.n	801a5ac <_fflush_r+0x38>
 801a5a8:	68ac      	ldr	r4, [r5, #8]
 801a5aa:	e7f1      	b.n	801a590 <_fflush_r+0x1c>
 801a5ac:	4b05      	ldr	r3, [pc, #20]	; (801a5c4 <_fflush_r+0x50>)
 801a5ae:	429c      	cmp	r4, r3
 801a5b0:	bf08      	it	eq
 801a5b2:	68ec      	ldreq	r4, [r5, #12]
 801a5b4:	e7ec      	b.n	801a590 <_fflush_r+0x1c>
 801a5b6:	2000      	movs	r0, #0
 801a5b8:	bd38      	pop	{r3, r4, r5, pc}
 801a5ba:	bf00      	nop
 801a5bc:	080230ac 	.word	0x080230ac
 801a5c0:	080230cc 	.word	0x080230cc
 801a5c4:	0802308c 	.word	0x0802308c

0801a5c8 <_lseek_r>:
 801a5c8:	b538      	push	{r3, r4, r5, lr}
 801a5ca:	4c07      	ldr	r4, [pc, #28]	; (801a5e8 <_lseek_r+0x20>)
 801a5cc:	4605      	mov	r5, r0
 801a5ce:	4608      	mov	r0, r1
 801a5d0:	4611      	mov	r1, r2
 801a5d2:	2200      	movs	r2, #0
 801a5d4:	6022      	str	r2, [r4, #0]
 801a5d6:	461a      	mov	r2, r3
 801a5d8:	f7e6 fb9a 	bl	8000d10 <_lseek>
 801a5dc:	1c43      	adds	r3, r0, #1
 801a5de:	d102      	bne.n	801a5e6 <_lseek_r+0x1e>
 801a5e0:	6823      	ldr	r3, [r4, #0]
 801a5e2:	b103      	cbz	r3, 801a5e6 <_lseek_r+0x1e>
 801a5e4:	602b      	str	r3, [r5, #0]
 801a5e6:	bd38      	pop	{r3, r4, r5, pc}
 801a5e8:	20016e58 	.word	0x20016e58

0801a5ec <__swhatbuf_r>:
 801a5ec:	b570      	push	{r4, r5, r6, lr}
 801a5ee:	460e      	mov	r6, r1
 801a5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a5f4:	2900      	cmp	r1, #0
 801a5f6:	b096      	sub	sp, #88	; 0x58
 801a5f8:	4614      	mov	r4, r2
 801a5fa:	461d      	mov	r5, r3
 801a5fc:	da07      	bge.n	801a60e <__swhatbuf_r+0x22>
 801a5fe:	2300      	movs	r3, #0
 801a600:	602b      	str	r3, [r5, #0]
 801a602:	89b3      	ldrh	r3, [r6, #12]
 801a604:	061a      	lsls	r2, r3, #24
 801a606:	d410      	bmi.n	801a62a <__swhatbuf_r+0x3e>
 801a608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a60c:	e00e      	b.n	801a62c <__swhatbuf_r+0x40>
 801a60e:	466a      	mov	r2, sp
 801a610:	f000 f88a 	bl	801a728 <_fstat_r>
 801a614:	2800      	cmp	r0, #0
 801a616:	dbf2      	blt.n	801a5fe <__swhatbuf_r+0x12>
 801a618:	9a01      	ldr	r2, [sp, #4]
 801a61a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a61e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a622:	425a      	negs	r2, r3
 801a624:	415a      	adcs	r2, r3
 801a626:	602a      	str	r2, [r5, #0]
 801a628:	e7ee      	b.n	801a608 <__swhatbuf_r+0x1c>
 801a62a:	2340      	movs	r3, #64	; 0x40
 801a62c:	2000      	movs	r0, #0
 801a62e:	6023      	str	r3, [r4, #0]
 801a630:	b016      	add	sp, #88	; 0x58
 801a632:	bd70      	pop	{r4, r5, r6, pc}

0801a634 <__smakebuf_r>:
 801a634:	898b      	ldrh	r3, [r1, #12]
 801a636:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a638:	079d      	lsls	r5, r3, #30
 801a63a:	4606      	mov	r6, r0
 801a63c:	460c      	mov	r4, r1
 801a63e:	d507      	bpl.n	801a650 <__smakebuf_r+0x1c>
 801a640:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a644:	6023      	str	r3, [r4, #0]
 801a646:	6123      	str	r3, [r4, #16]
 801a648:	2301      	movs	r3, #1
 801a64a:	6163      	str	r3, [r4, #20]
 801a64c:	b002      	add	sp, #8
 801a64e:	bd70      	pop	{r4, r5, r6, pc}
 801a650:	ab01      	add	r3, sp, #4
 801a652:	466a      	mov	r2, sp
 801a654:	f7ff ffca 	bl	801a5ec <__swhatbuf_r>
 801a658:	9900      	ldr	r1, [sp, #0]
 801a65a:	4605      	mov	r5, r0
 801a65c:	4630      	mov	r0, r6
 801a65e:	f7ff f959 	bl	8019914 <_malloc_r>
 801a662:	b948      	cbnz	r0, 801a678 <__smakebuf_r+0x44>
 801a664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a668:	059a      	lsls	r2, r3, #22
 801a66a:	d4ef      	bmi.n	801a64c <__smakebuf_r+0x18>
 801a66c:	f023 0303 	bic.w	r3, r3, #3
 801a670:	f043 0302 	orr.w	r3, r3, #2
 801a674:	81a3      	strh	r3, [r4, #12]
 801a676:	e7e3      	b.n	801a640 <__smakebuf_r+0xc>
 801a678:	4b0d      	ldr	r3, [pc, #52]	; (801a6b0 <__smakebuf_r+0x7c>)
 801a67a:	62b3      	str	r3, [r6, #40]	; 0x28
 801a67c:	89a3      	ldrh	r3, [r4, #12]
 801a67e:	6020      	str	r0, [r4, #0]
 801a680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a684:	81a3      	strh	r3, [r4, #12]
 801a686:	9b00      	ldr	r3, [sp, #0]
 801a688:	6163      	str	r3, [r4, #20]
 801a68a:	9b01      	ldr	r3, [sp, #4]
 801a68c:	6120      	str	r0, [r4, #16]
 801a68e:	b15b      	cbz	r3, 801a6a8 <__smakebuf_r+0x74>
 801a690:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a694:	4630      	mov	r0, r6
 801a696:	f000 f859 	bl	801a74c <_isatty_r>
 801a69a:	b128      	cbz	r0, 801a6a8 <__smakebuf_r+0x74>
 801a69c:	89a3      	ldrh	r3, [r4, #12]
 801a69e:	f023 0303 	bic.w	r3, r3, #3
 801a6a2:	f043 0301 	orr.w	r3, r3, #1
 801a6a6:	81a3      	strh	r3, [r4, #12]
 801a6a8:	89a3      	ldrh	r3, [r4, #12]
 801a6aa:	431d      	orrs	r5, r3
 801a6ac:	81a5      	strh	r5, [r4, #12]
 801a6ae:	e7cd      	b.n	801a64c <__smakebuf_r+0x18>
 801a6b0:	0801971d 	.word	0x0801971d

0801a6b4 <__malloc_lock>:
 801a6b4:	4770      	bx	lr

0801a6b6 <__malloc_unlock>:
 801a6b6:	4770      	bx	lr

0801a6b8 <_realloc_r>:
 801a6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6ba:	4607      	mov	r7, r0
 801a6bc:	4614      	mov	r4, r2
 801a6be:	460e      	mov	r6, r1
 801a6c0:	b921      	cbnz	r1, 801a6cc <_realloc_r+0x14>
 801a6c2:	4611      	mov	r1, r2
 801a6c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a6c8:	f7ff b924 	b.w	8019914 <_malloc_r>
 801a6cc:	b922      	cbnz	r2, 801a6d8 <_realloc_r+0x20>
 801a6ce:	f7ff f8d3 	bl	8019878 <_free_r>
 801a6d2:	4625      	mov	r5, r4
 801a6d4:	4628      	mov	r0, r5
 801a6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6d8:	f000 f848 	bl	801a76c <_malloc_usable_size_r>
 801a6dc:	42a0      	cmp	r0, r4
 801a6de:	d20f      	bcs.n	801a700 <_realloc_r+0x48>
 801a6e0:	4621      	mov	r1, r4
 801a6e2:	4638      	mov	r0, r7
 801a6e4:	f7ff f916 	bl	8019914 <_malloc_r>
 801a6e8:	4605      	mov	r5, r0
 801a6ea:	2800      	cmp	r0, #0
 801a6ec:	d0f2      	beq.n	801a6d4 <_realloc_r+0x1c>
 801a6ee:	4631      	mov	r1, r6
 801a6f0:	4622      	mov	r2, r4
 801a6f2:	f7fe ff0e 	bl	8019512 <memcpy>
 801a6f6:	4631      	mov	r1, r6
 801a6f8:	4638      	mov	r0, r7
 801a6fa:	f7ff f8bd 	bl	8019878 <_free_r>
 801a6fe:	e7e9      	b.n	801a6d4 <_realloc_r+0x1c>
 801a700:	4635      	mov	r5, r6
 801a702:	e7e7      	b.n	801a6d4 <_realloc_r+0x1c>

0801a704 <_read_r>:
 801a704:	b538      	push	{r3, r4, r5, lr}
 801a706:	4c07      	ldr	r4, [pc, #28]	; (801a724 <_read_r+0x20>)
 801a708:	4605      	mov	r5, r0
 801a70a:	4608      	mov	r0, r1
 801a70c:	4611      	mov	r1, r2
 801a70e:	2200      	movs	r2, #0
 801a710:	6022      	str	r2, [r4, #0]
 801a712:	461a      	mov	r2, r3
 801a714:	f7e6 fa9c 	bl	8000c50 <_read>
 801a718:	1c43      	adds	r3, r0, #1
 801a71a:	d102      	bne.n	801a722 <_read_r+0x1e>
 801a71c:	6823      	ldr	r3, [r4, #0]
 801a71e:	b103      	cbz	r3, 801a722 <_read_r+0x1e>
 801a720:	602b      	str	r3, [r5, #0]
 801a722:	bd38      	pop	{r3, r4, r5, pc}
 801a724:	20016e58 	.word	0x20016e58

0801a728 <_fstat_r>:
 801a728:	b538      	push	{r3, r4, r5, lr}
 801a72a:	4c07      	ldr	r4, [pc, #28]	; (801a748 <_fstat_r+0x20>)
 801a72c:	2300      	movs	r3, #0
 801a72e:	4605      	mov	r5, r0
 801a730:	4608      	mov	r0, r1
 801a732:	4611      	mov	r1, r2
 801a734:	6023      	str	r3, [r4, #0]
 801a736:	f7e6 fad0 	bl	8000cda <_fstat>
 801a73a:	1c43      	adds	r3, r0, #1
 801a73c:	d102      	bne.n	801a744 <_fstat_r+0x1c>
 801a73e:	6823      	ldr	r3, [r4, #0]
 801a740:	b103      	cbz	r3, 801a744 <_fstat_r+0x1c>
 801a742:	602b      	str	r3, [r5, #0]
 801a744:	bd38      	pop	{r3, r4, r5, pc}
 801a746:	bf00      	nop
 801a748:	20016e58 	.word	0x20016e58

0801a74c <_isatty_r>:
 801a74c:	b538      	push	{r3, r4, r5, lr}
 801a74e:	4c06      	ldr	r4, [pc, #24]	; (801a768 <_isatty_r+0x1c>)
 801a750:	2300      	movs	r3, #0
 801a752:	4605      	mov	r5, r0
 801a754:	4608      	mov	r0, r1
 801a756:	6023      	str	r3, [r4, #0]
 801a758:	f7e6 facf 	bl	8000cfa <_isatty>
 801a75c:	1c43      	adds	r3, r0, #1
 801a75e:	d102      	bne.n	801a766 <_isatty_r+0x1a>
 801a760:	6823      	ldr	r3, [r4, #0]
 801a762:	b103      	cbz	r3, 801a766 <_isatty_r+0x1a>
 801a764:	602b      	str	r3, [r5, #0]
 801a766:	bd38      	pop	{r3, r4, r5, pc}
 801a768:	20016e58 	.word	0x20016e58

0801a76c <_malloc_usable_size_r>:
 801a76c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a770:	1f18      	subs	r0, r3, #4
 801a772:	2b00      	cmp	r3, #0
 801a774:	bfbc      	itt	lt
 801a776:	580b      	ldrlt	r3, [r1, r0]
 801a778:	18c0      	addlt	r0, r0, r3
 801a77a:	4770      	bx	lr

0801a77c <_init>:
 801a77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a77e:	bf00      	nop
 801a780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a782:	bc08      	pop	{r3}
 801a784:	469e      	mov	lr, r3
 801a786:	4770      	bx	lr

0801a788 <_fini>:
 801a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a78a:	bf00      	nop
 801a78c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a78e:	bc08      	pop	{r3}
 801a790:	469e      	mov	lr, r3
 801a792:	4770      	bx	lr


socket_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001afb0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000251c4  0801b160  0801b160  0002b160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08040324  08040324  00060108  2**0
                  CONTENTS
  4 .ARM          00000008  08040324  08040324  00050324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804032c  0804032c  00060108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804032c  0804032c  0005032c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08040330  08040330  00050330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08040334  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00016de8  20000108  0804043c  00060108  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20016ef0  0804043c  00066ef0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060108  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a811  00000000  00000000  00060138  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000082db  00000000  00000000  000aa949  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002538  00000000  00000000  000b2c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002360  00000000  00000000  000b5160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000365e6  00000000  00000000  000b74c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f8de  00000000  00000000  000edaa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00101654  00000000  00000000  0011d384  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021e9d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0cc  00000000  00000000  0021ea54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000108 	.word	0x20000108
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801b148 	.word	0x0801b148

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	0801b148 	.word	0x0801b148

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
	return 0;
 80005d2:	2300      	movs	r3, #0
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
	...

080005e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005e4:	f000 fdb4 	bl	8001150 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005e8:	f000 f818 	bl	800061c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005ec:	f000 f8aa 	bl	8000744 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80005f0:	f000 f87e 	bl	80006f0 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80005f4:	f004 fa82 	bl	8004afc <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80005f8:	4a05      	ldr	r2, [pc, #20]	; (8000610 <main+0x30>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	4805      	ldr	r0, [pc, #20]	; (8000614 <main+0x34>)
 80005fe:	f004 fb0f 	bl	8004c20 <osThreadNew>
 8000602:	4602      	mov	r2, r0
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <main+0x38>)
 8000606:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000608:	f004 faac 	bl	8004b64 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800060c:	e7fe      	b.n	800060c <main+0x2c>
 800060e:	bf00      	nop
 8000610:	0801eeb4 	.word	0x0801eeb4
 8000614:	08000951 	.word	0x08000951
 8000618:	20010438 	.word	0x20010438

0800061c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f019 fc7b 	bl	8019f26 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemClock_Config+0xcc>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a27      	ldr	r2, [pc, #156]	; (80006e8 <SystemClock_Config+0xcc>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <SystemClock_Config+0xcc>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xd0>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xd0>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xd0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000678:	2301      	movs	r3, #1
 800067a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000690:	23a8      	movs	r3, #168	; 0xa8
 8000692:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fa05 	bl	8002ab0 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x94>
		Error_Handler();
 80006ac:	f000 f9c0 	bl	8000a30 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2105      	movs	r1, #5
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 fc5e 	bl	8002f90 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
		Error_Handler();
 80006da:	f000 f9a9 	bl	8000a30 <Error_Handler>
	}
}
 80006de:	bf00      	nop
 80006e0:	3750      	adds	r7, #80	; 0x50
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART3_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART3_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART3_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART3_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART3_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART3_UART_Init+0x4c>)
 8000728:	f003 f894 	bl	8003854 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000732:	f000 f97d 	bl	8000a30 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2001043c 	.word	0x2001043c
 8000740:	40004800 	.word	0x40004800

08000744 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4b4b      	ldr	r3, [pc, #300]	; (800088c <MX_GPIO_Init+0x148>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a4a      	ldr	r2, [pc, #296]	; (800088c <MX_GPIO_Init+0x148>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b48      	ldr	r3, [pc, #288]	; (800088c <MX_GPIO_Init+0x148>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b44      	ldr	r3, [pc, #272]	; (800088c <MX_GPIO_Init+0x148>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a43      	ldr	r2, [pc, #268]	; (800088c <MX_GPIO_Init+0x148>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b41      	ldr	r3, [pc, #260]	; (800088c <MX_GPIO_Init+0x148>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b3d      	ldr	r3, [pc, #244]	; (800088c <MX_GPIO_Init+0x148>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a3c      	ldr	r2, [pc, #240]	; (800088c <MX_GPIO_Init+0x148>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b3a      	ldr	r3, [pc, #232]	; (800088c <MX_GPIO_Init+0x148>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b36      	ldr	r3, [pc, #216]	; (800088c <MX_GPIO_Init+0x148>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a35      	ldr	r2, [pc, #212]	; (800088c <MX_GPIO_Init+0x148>)
 80007b8:	f043 0302 	orr.w	r3, r3, #2
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <MX_GPIO_Init+0x148>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_GPIO_Init+0x148>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2e      	ldr	r2, [pc, #184]	; (800088c <MX_GPIO_Init+0x148>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_GPIO_Init+0x148>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b28      	ldr	r3, [pc, #160]	; (800088c <MX_GPIO_Init+0x148>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a27      	ldr	r2, [pc, #156]	; (800088c <MX_GPIO_Init+0x148>)
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_GPIO_Init+0x148>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f244 0181 	movw	r1, #16513	; 0x4081
 8000808:	4821      	ldr	r0, [pc, #132]	; (8000890 <MX_GPIO_Init+0x14c>)
 800080a:	f002 f937 	bl	8002a7c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 800080e:	2200      	movs	r2, #0
 8000810:	2140      	movs	r1, #64	; 0x40
 8000812:	4820      	ldr	r0, [pc, #128]	; (8000894 <MX_GPIO_Init+0x150>)
 8000814:	f002 f932 	bl	8002a7c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_GPIO_Init+0x154>)
 8000820:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	4619      	mov	r1, r3
 800082c:	481b      	ldr	r0, [pc, #108]	; (800089c <MX_GPIO_Init+0x158>)
 800082e:	f001 ff7b 	bl	8002728 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000832:	f244 0381 	movw	r3, #16513	; 0x4081
 8000836:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	; (8000890 <MX_GPIO_Init+0x14c>)
 800084c:	f001 ff6c 	bl	8002728 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000850:	2340      	movs	r3, #64	; 0x40
 8000852:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	480b      	ldr	r0, [pc, #44]	; (8000894 <MX_GPIO_Init+0x150>)
 8000868:	f001 ff5e 	bl	8002728 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800086c:	2380      	movs	r3, #128	; 0x80
 800086e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_GPIO_Init+0x150>)
 8000880:	f001 ff52 	bl	8002728 <HAL_GPIO_Init>

}
 8000884:	bf00      	nop
 8000886:	3730      	adds	r7, #48	; 0x30
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020400 	.word	0x40020400
 8000894:	40021800 	.word	0x40021800
 8000898:	10110000 	.word	0x10110000
 800089c:	40020800 	.word	0x40020800

080008a0 <http_server_netconn_serve>:
		"<html><head><title>Congrats!</title></head><body><h1>Welcome to our lwIP HTTP server!</h1><p>This is a small test page, served by httpserver-netconn.</body></html>";

char task_desc_buf[256];

/** Serve one HTTP connection accepted in the http thread */
static void http_server_netconn_serve(struct netconn *conn) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af02      	add	r7, sp, #8
 80008a6:	6078      	str	r0, [r7, #4]
	u16_t buflen;
	err_t err;

	/* Read the data from the port, blocking if nothing yet there.
	 We assume the request (the part we care about) is in one netbuf */
	err = netconn_recv(conn, &inbuf);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f008 ffd0 	bl	8009854 <netconn_recv>
 80008b4:	4603      	mov	r3, r0
 80008b6:	75fb      	strb	r3, [r7, #23]

	if (err == ERR_OK) {
 80008b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d135      	bne.n	800092c <http_server_netconn_serve+0x8c>
		netbuf_data(inbuf, (void**) &buf, &buflen);
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	f107 020a 	add.w	r2, r7, #10
 80008c6:	f107 010c 	add.w	r1, r7, #12
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00a fd56 	bl	800b37c <netbuf_data>

		/* Is this an HTTP GET command? (only check the first 5 chars, since
		 there are other formats for GET, and we're keeping it very simple )*/
		if (buflen >= 5 && buf[0] == 'G' && buf[1] == 'E' && buf[2] == 'T'
 80008d0:	897b      	ldrh	r3, [r7, #10]
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	d92a      	bls.n	800092c <http_server_netconn_serve+0x8c>
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b47      	cmp	r3, #71	; 0x47
 80008dc:	d126      	bne.n	800092c <http_server_netconn_serve+0x8c>
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3301      	adds	r3, #1
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b45      	cmp	r3, #69	; 0x45
 80008e6:	d121      	bne.n	800092c <http_server_netconn_serve+0x8c>
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3302      	adds	r3, #2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b54      	cmp	r3, #84	; 0x54
 80008f0:	d11c      	bne.n	800092c <http_server_netconn_serve+0x8c>
				&& buf[3] == ' ' && buf[4] == '/') {
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3303      	adds	r3, #3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b20      	cmp	r3, #32
 80008fa:	d117      	bne.n	800092c <http_server_netconn_serve+0x8c>
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3304      	adds	r3, #4
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b2f      	cmp	r3, #47	; 0x2f
 8000904:	d112      	bne.n	800092c <http_server_netconn_serve+0x8c>

			/* Send the HTML header
			 * subtract 1 from the size, since we dont send the \0 in the string
			 * NETCONN_NOCOPY: our data is const static, so no need to copy it
			 */
			vTaskGetRunTimeStats(task_desc_buf); //TODO:
 8000906:	480f      	ldr	r0, [pc, #60]	; (8000944 <http_server_netconn_serve+0xa4>)
 8000908:	f007 fc1a 	bl	8008140 <vTaskGetRunTimeStats>
			netconn_write(conn, http_html_hdr, sizeof(http_html_hdr) - 1,
 800090c:	2300      	movs	r3, #0
 800090e:	9300      	str	r3, [sp, #0]
 8000910:	2300      	movs	r3, #0
 8000912:	222c      	movs	r2, #44	; 0x2c
 8000914:	490c      	ldr	r1, [pc, #48]	; (8000948 <http_server_netconn_serve+0xa8>)
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f009 f816 	bl	8009948 <netconn_write_partly>
					NETCONN_NOCOPY);

			/* Send our HTML page */
			netconn_write(conn, http_index_html, sizeof(http_index_html) - 1,
 800091c:	2300      	movs	r3, #0
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2300      	movs	r3, #0
 8000922:	22a3      	movs	r2, #163	; 0xa3
 8000924:	4909      	ldr	r1, [pc, #36]	; (800094c <http_server_netconn_serve+0xac>)
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f009 f80e 	bl	8009948 <netconn_write_partly>
					NETCONN_NOCOPY);
		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f009 f90d 	bl	8009b4c <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
	 so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	4618      	mov	r0, r3
 8000936:	f00a fd01 	bl	800b33c <netbuf_delete>
}
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	2001047c 	.word	0x2001047c
 8000948:	0801eed8 	.word	0x0801eed8
 800094c:	0801ef08 	.word	0x0801ef08

08000950 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 8000958:	f003 fc28 	bl	80041ac <MX_LWIP_Init>
	/* USER CODE BEGIN 5 */



	UartTaskInit(&huart3);
 800095c:	4827      	ldr	r0, [pc, #156]	; (80009fc <StartDefaultTask+0xac>)
 800095e:	f000 fb37 	bl	8000fd0 <UartTaskInit>
	StartDhcpTask();
 8000962:	f000 fa57 	bl	8000e14 <StartDhcpTask>
	while (GetDhcpState() != DHCP_ADDRESS_ASSIGNED )
 8000966:	e002      	b.n	800096e <StartDefaultTask+0x1e>
		osDelay(100);
 8000968:	2064      	movs	r0, #100	; 0x64
 800096a:	f004 f9ff 	bl	8004d6c <osDelay>
	while (GetDhcpState() != DHCP_ADDRESS_ASSIGNED )
 800096e:	f000 fb23 	bl	8000fb8 <GetDhcpState>
 8000972:	4603      	mov	r3, r0
 8000974:	2b03      	cmp	r3, #3
 8000976:	d1f7      	bne.n	8000968 <StartDefaultTask+0x18>
	httpd_init();
 8000978:	f00c f962 	bl	800cc40 <httpd_init>

	while (1) {
		osDelay(50);
 800097c:	2032      	movs	r0, #50	; 0x32
 800097e:	f004 f9f5 	bl	8004d6c <osDelay>
		// raw sewer http, only for debug test
		struct netconn *conn, *newconn;
		err_t err;

		// Create a new TCP connection handle
		conn = netconn_new(NETCONN_TCP);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2010      	movs	r0, #16
 8000988:	f008 fc3e 	bl	8009208 <netconn_new_with_proto_and_callback>
 800098c:	6178      	str	r0, [r7, #20]
		LWIP_ERROR("http_server: invalid conn", (conn != NULL), return;);
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d107      	bne.n	80009a4 <StartDefaultTask+0x54>
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <StartDefaultTask+0xb0>)
 8000996:	f240 1265 	movw	r2, #357	; 0x165
 800099a:	491a      	ldr	r1, [pc, #104]	; (8000a04 <StartDefaultTask+0xb4>)
 800099c:	481a      	ldr	r0, [pc, #104]	; (8000a08 <StartDefaultTask+0xb8>)
 800099e:	f019 facb 	bl	8019f38 <iprintf>
 80009a2:	e028      	b.n	80009f6 <StartDefaultTask+0xa6>

		// Bind to port 80 (HTTP) with default IP address
		netconn_bind(conn, NULL, 443);
 80009a4:	f240 12bb 	movw	r2, #443	; 0x1bb
 80009a8:	2100      	movs	r1, #0
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f008 fce6 	bl	800937c <netconn_bind>

		// Put the connection into LISTEN state
		netconn_listen(conn);
 80009b0:	21ff      	movs	r1, #255	; 0xff
 80009b2:	6978      	ldr	r0, [r7, #20]
 80009b4:	f008 fd1a 	bl	80093ec <netconn_listen_with_backlog>
		do {
			err = netconn_accept(conn, &newconn);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4619      	mov	r1, r3
 80009be:	6978      	ldr	r0, [r7, #20]
 80009c0:	f008 fd40 	bl	8009444 <netconn_accept>
 80009c4:	4603      	mov	r3, r0
 80009c6:	74fb      	strb	r3, [r7, #19]
			if (err == ERR_OK) {
 80009c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d107      	bne.n	80009e0 <StartDefaultTask+0x90>
				http_server_netconn_serve(newconn);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff ff64 	bl	80008a0 <http_server_netconn_serve>
				netconn_delete(newconn);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4618      	mov	r0, r3
 80009dc:	f008 fcb2 	bl	8009344 <netconn_delete>
			}
		} while (err == ERR_OK);LWIP_DEBUGF(HTTPD_DEBUG,
 80009e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d0e7      	beq.n	80009b8 <StartDefaultTask+0x68>
				("http_server_netconn_thread: netconn_accept received error %d, shutting down",
						err));
		netconn_close(conn);
 80009e8:	6978      	ldr	r0, [r7, #20]
 80009ea:	f009 f8af 	bl	8009b4c <netconn_close>
		netconn_delete(conn);
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	f008 fca8 	bl	8009344 <netconn_delete>
	while (1) {
 80009f4:	e7c2      	b.n	800097c <StartDefaultTask+0x2c>

	}
	/* USER CODE END 5 */
}
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2001043c 	.word	0x2001043c
 8000a00:	0801b16c 	.word	0x0801b16c
 8000a04:	0801b180 	.word	0x0801b180
 8000a08:	0801b19c 	.word	0x0801b19c

08000a0c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM10) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000a1e:	f000 fbb9 	bl	8001194 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40014400 	.word	0x40014400

08000a30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <HAL_MspInit+0x84>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <HAL_MspInit+0x84>)
 8000a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a54:	6453      	str	r3, [r2, #68]	; 0x44
 8000a56:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <HAL_MspInit+0x84>)
 8000a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <HAL_MspInit+0x84>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a16      	ldr	r2, [pc, #88]	; (8000ac4 <HAL_MspInit+0x84>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <HAL_MspInit+0x84>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 10, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	210a      	movs	r1, #10
 8000a82:	f06f 000b 	mvn.w	r0, #11
 8000a86:	f000 fc7f 	bl	8001388 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 10, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	210a      	movs	r1, #10
 8000a8e:	f06f 000a 	mvn.w	r0, #10
 8000a92:	f000 fc79 	bl	8001388 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 10, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	210a      	movs	r1, #10
 8000a9a:	f06f 0009 	mvn.w	r0, #9
 8000a9e:	f000 fc73 	bl	8001388 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 10, 0);
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	210a      	movs	r1, #10
 8000aa6:	f06f 0003 	mvn.w	r0, #3
 8000aaa:	f000 fc6d 	bl	8001388 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	210f      	movs	r1, #15
 8000ab2:	f06f 0001 	mvn.w	r0, #1
 8000ab6:	f000 fc67 	bl	8001388 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_UART_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12c      	bne.n	8000b44 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af2:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000af8:	6413      	str	r3, [r2, #64]	; 0x40
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b10:	f043 0308 	orr.w	r3, r3, #8
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_UART_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0308 	and.w	r3, r3, #8
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b30:	2303      	movs	r3, #3
 8000b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b34:	2307      	movs	r3, #7
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_UART_MspInit+0x8c>)
 8000b40:	f001 fdf2 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	; 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40004800 	.word	0x40004800
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020c00 	.word	0x40020c00

08000b58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08c      	sub	sp, #48	; 0x30
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	2019      	movs	r0, #25
 8000b6e:	f000 fc0b 	bl	8001388 <HAL_NVIC_SetPriority>

  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b72:	2019      	movs	r0, #25
 8000b74:	f000 fc24 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <HAL_InitTick+0xa4>)
 8000b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b80:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <HAL_InitTick+0xa4>)
 8000b82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b86:	6453      	str	r3, [r2, #68]	; 0x44
 8000b88:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_InitTick+0xa4>)
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b94:	f107 0210 	add.w	r2, r7, #16
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4611      	mov	r1, r2
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 fbe8 	bl	8003374 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000ba4:	f002 fbd2 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb0:	4a13      	ldr	r2, [pc, #76]	; (8000c00 <HAL_InitTick+0xa8>)
 8000bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb6:	0c9b      	lsrs	r3, r3, #18
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_InitTick+0xac>)
 8000bbe:	4a12      	ldr	r2, [pc, #72]	; (8000c08 <HAL_InitTick+0xb0>)
 8000bc0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8000bc2:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <HAL_InitTick+0xac>)
 8000bc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bc8:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000bca:	4a0e      	ldr	r2, [pc, #56]	; (8000c04 <HAL_InitTick+0xac>)
 8000bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bce:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <HAL_InitTick+0xac>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <HAL_InitTick+0xac>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <HAL_InitTick+0xac>)
 8000bde:	f002 fbfb 	bl	80033d8 <HAL_TIM_Base_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d104      	bne.n	8000bf2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <HAL_InitTick+0xac>)
 8000bea:	f002 fc2a 	bl	8003442 <HAL_TIM_Base_Start_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	e000      	b.n	8000bf4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3730      	adds	r7, #48	; 0x30
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	431bde83 	.word	0x431bde83
 8000c04:	2001057c 	.word	0x2001057c
 8000c08:	40014400 	.word	0x40014400

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c46:	f002 fc20 	bl	800348a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2001057c 	.word	0x2001057c

08000c54 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <ETH_IRQHandler+0x10>)
 8000c5a:	f000 ffa5 	bl	8001ba8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20011f14 	.word	0x20011f14

08000c68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	e00a      	b.n	8000c90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c7a:	f3af 8000 	nop.w
 8000c7e:	4601      	mov	r1, r0
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	60ba      	str	r2, [r7, #8]
 8000c86:	b2ca      	uxtb	r2, r1
 8000c88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dbf0      	blt.n	8000c7a <_read+0x12>
	}

return len;
 8000c98:	687b      	ldr	r3, [r7, #4]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	e009      	b.n	8000cc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	60ba      	str	r2, [r7, #8]
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbf1      	blt.n	8000cb4 <_write+0x12>
	}
	return len;
 8000cd0:	687b      	ldr	r3, [r7, #4]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <_close>:

int _close(int file)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d02:	605a      	str	r2, [r3, #4]
	return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <_isatty>:

int _isatty(int file)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
	return 1;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
	return 0;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3714      	adds	r7, #20
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b087      	sub	sp, #28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d4c:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <_sbrk+0x5c>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <_sbrk+0x60>)
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <_sbrk+0x64>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <_sbrk+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d205      	bcs.n	8000d80 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <_sbrk+0x6c>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	371c      	adds	r7, #28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	20030000 	.word	0x20030000
 8000da4:	00004000 	.word	0x00004000
 8000da8:	20000124 	.word	0x20000124
 8000dac:	20016ef0 	.word	0x20016ef0
 8000db0:	20016ee8 	.word	0x20016ee8

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <SystemInit+0x28>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <SystemInit+0x28>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SystemInit+0x28>)
 8000dca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dce:	609a      	str	r2, [r3, #8]
#endif
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <getRandom>:
const osThreadAttr_t dhcpTask_attributes = { .name = "dhcpTask", .priority =
		(osPriority_t) osPriorityNormal, .stack_size = 1024 * 4 };


int getRandom(int lower, int upper)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
	int num = (rand() % (upper - lower + 1)) + lower;
 8000dea:	f019 f8bd 	bl	8019f68 <rand>
 8000dee:	4602      	mov	r2, r0
 8000df0:	6839      	ldr	r1, [r7, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	1acb      	subs	r3, r1, r3
 8000df6:	3301      	adds	r3, #1
 8000df8:	fb92 f1f3 	sdiv	r1, r2, r3
 8000dfc:	fb03 f301 	mul.w	r3, r3, r1
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]
	return num;
 8000e08:	68fb      	ldr	r3, [r7, #12]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <StartDhcpTask>:


void Dhcp_thread(void *argument);
void Dhcp_process(void const *argument);

void StartDhcpTask() {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	dhcpTaskHandle = osThreadNew(Dhcp_thread, NULL, &dhcpTask_attributes);
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <StartDhcpTask+0x18>)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <StartDhcpTask+0x1c>)
 8000e1e:	f003 feff 	bl	8004c20 <osThreadNew>
 8000e22:	4602      	mov	r2, r0
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <StartDhcpTask+0x20>)
 8000e26:	601a      	str	r2, [r3, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	0801efc4 	.word	0x0801efc4
 8000e30:	08000e39 	.word	0x08000e39
 8000e34:	200105bc 	.word	0x200105bc

08000e38 <Dhcp_thread>:

void Dhcp_thread(void *argument) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	while (1) {
		Dhcp_process(&gnetif);
 8000e40:	4801      	ldr	r0, [pc, #4]	; (8000e48 <Dhcp_thread+0x10>)
 8000e42:	f000 f803 	bl	8000e4c <Dhcp_process>
 8000e46:	e7fb      	b.n	8000e40 <Dhcp_thread+0x8>
 8000e48:	20010600 	.word	0x20010600

08000e4c <Dhcp_process>:





void Dhcp_process(void const *argument) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	; 0x30
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	6078      	str	r0, [r7, #4]
	struct netif *netif = (struct netif*) argument;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	61fb      	str	r3, [r7, #28]
	ip_addr_t ipaddr;
	ip_addr_t netmask;
	ip_addr_t gw;
	struct dhcp *dhcp;

	UartDbg("Starting DHCP...\n\r");
 8000e58:	484d      	ldr	r0, [pc, #308]	; (8000f90 <Dhcp_process+0x144>)
 8000e5a:	f000 f901 	bl	8001060 <UartDbg>
	if (netif_is_up(netif)){
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d006      	beq.n	8000e7c <Dhcp_process+0x30>
	    DHCP_state = DHCP_START;
 8000e6e:	4b49      	ldr	r3, [pc, #292]	; (8000f94 <Dhcp_process+0x148>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	701a      	strb	r2, [r3, #0]
		UartDbg("Ethernet link up!\n\r");
 8000e74:	4848      	ldr	r0, [pc, #288]	; (8000f98 <Dhcp_process+0x14c>)
 8000e76:	f000 f8f3 	bl	8001060 <UartDbg>
 8000e7a:	e005      	b.n	8000e88 <Dhcp_process+0x3c>
	}
	else {
	    DHCP_state = DHCP_LINK_DOWN;
 8000e7c:	4b45      	ldr	r3, [pc, #276]	; (8000f94 <Dhcp_process+0x148>)
 8000e7e:	2205      	movs	r2, #5
 8000e80:	701a      	strb	r2, [r3, #0]
		UartDbg("Ethernet link down!\n\r");
 8000e82:	4846      	ldr	r0, [pc, #280]	; (8000f9c <Dhcp_process+0x150>)
 8000e84:	f000 f8ec 	bl	8001060 <UartDbg>
	}

	for (;;) {
		switch (DHCP_state) {
 8000e88:	4b42      	ldr	r3, [pc, #264]	; (8000f94 <Dhcp_process+0x148>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d017      	beq.n	8000ec2 <Dhcp_process+0x76>
 8000e92:	2b05      	cmp	r3, #5
 8000e94:	d057      	beq.n	8000f46 <Dhcp_process+0xfa>
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d000      	beq.n	8000e9c <Dhcp_process+0x50>
			dhcp_stop(netif);
			DHCP_state = DHCP_OFF;
		}
			break;
		default:
			break;
 8000e9a:	e05c      	b.n	8000f56 <Dhcp_process+0x10a>
			UartDbg("Waiting for IP address...\n\r");
 8000e9c:	4840      	ldr	r0, [pc, #256]	; (8000fa0 <Dhcp_process+0x154>)
 8000e9e:	f000 f8df 	bl	8001060 <UartDbg>
			ip_addr_set_zero_ip4(&netif->ip_addr);
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
			ip_addr_set_zero_ip4(&netif->netmask);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
			ip_addr_set_zero_ip4(&netif->gw);
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
			dhcp_start(netif);
 8000eb4:	69f8      	ldr	r0, [r7, #28]
 8000eb6:	f015 f81b 	bl	8015ef0 <dhcp_start>
			DHCP_state = DHCP_WAIT_ADDRESS;
 8000eba:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <Dhcp_process+0x148>)
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	701a      	strb	r2, [r3, #0]
			break;
 8000ec0:	e049      	b.n	8000f56 <Dhcp_process+0x10a>
			if (dhcp_supplied_address(netif)) {
 8000ec2:	69f8      	ldr	r0, [r7, #28]
 8000ec4:	f016 fb20 	bl	8017508 <dhcp_supplied_address>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d015      	beq.n	8000efa <Dhcp_process+0xae>
				DHCP_state = DHCP_ADDRESS_ASSIGNED;
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <Dhcp_process+0x148>)
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	701a      	strb	r2, [r3, #0]
				uint32_t temp_ip = dhcp->offered_ip_addr.addr;
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed6:	69db      	ldr	r3, [r3, #28]
 8000ed8:	61bb      	str	r3, [r7, #24]
				UartDbg("IP address assigned by a DHCP server: [%03d.%03d.%03d.%03d]\n\r",
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	b2d9      	uxtb	r1, r3
					temp_ip&0xFF, (temp_ip>>8)&0xFF, (temp_ip>>16)&0xFF, (temp_ip>>24)&0xFF);
 8000ede:	69bb      	ldr	r3, [r7, #24]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
				UartDbg("IP address assigned by a DHCP server: [%03d.%03d.%03d.%03d]\n\r",
 8000ee2:	b2da      	uxtb	r2, r3
					temp_ip&0xFF, (temp_ip>>8)&0xFF, (temp_ip>>16)&0xFF, (temp_ip>>24)&0xFF);
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	0c1b      	lsrs	r3, r3, #16
				UartDbg("IP address assigned by a DHCP server: [%03d.%03d.%03d.%03d]\n\r",
 8000ee8:	b2d8      	uxtb	r0, r3
					temp_ip&0xFF, (temp_ip>>8)&0xFF, (temp_ip>>16)&0xFF, (temp_ip>>24)&0xFF);
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	0e1b      	lsrs	r3, r3, #24
				UartDbg("IP address assigned by a DHCP server: [%03d.%03d.%03d.%03d]\n\r",
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	482c      	ldr	r0, [pc, #176]	; (8000fa4 <Dhcp_process+0x158>)
 8000ef4:	f000 f8b4 	bl	8001060 <UartDbg>
			break;
 8000ef8:	e02c      	b.n	8000f54 <Dhcp_process+0x108>
				dhcp = (struct dhcp*) netif_get_client_data(netif,
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
				if (dhcp->tries > MAX_DHCP_TRIES) {
 8000f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f02:	799b      	ldrb	r3, [r3, #6]
 8000f04:	2b04      	cmp	r3, #4
 8000f06:	d925      	bls.n	8000f54 <Dhcp_process+0x108>
					DHCP_state = DHCP_TIMEOUT;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <Dhcp_process+0x148>)
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	701a      	strb	r2, [r3, #0]
					dhcp_stop(netif);
 8000f0e:	69f8      	ldr	r0, [r7, #28]
 8000f10:	f015 fd60 	bl	80169d4 <dhcp_stop>
					IP_ADDR4(&ipaddr, IP_ADDR0, IP_ADDR1, IP_ADDR2, IP_ADDR3);
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <Dhcp_process+0x15c>)
 8000f16:	613b      	str	r3, [r7, #16]
					IP_ADDR4(&netmask, NETMASK_ADDR0, NETMASK_ADDR1,
 8000f18:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000f1c:	60fb      	str	r3, [r7, #12]
					IP_ADDR4(&gw, GW_ADDR0, GW_ADDR1, GW_ADDR2, GW_ADDR3);
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <Dhcp_process+0x160>)
 8000f20:	60bb      	str	r3, [r7, #8]
					netif_set_addr(netif, ip_2_ip4(&ipaddr), ip_2_ip4(&netmask),
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	f107 020c 	add.w	r2, r7, #12
 8000f2a:	f107 0110 	add.w	r1, r7, #16
 8000f2e:	69f8      	ldr	r0, [r7, #28]
 8000f30:	f00c fdba 	bl	800daa8 <netif_set_addr>
					UartDbg("Timeout, set to static IP address [%03d.%03d.%03d.%03d]\n\r",IP_ADDR0,
 8000f34:	230a      	movs	r3, #10
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2308      	movs	r3, #8
 8000f3a:	22a8      	movs	r2, #168	; 0xa8
 8000f3c:	21c0      	movs	r1, #192	; 0xc0
 8000f3e:	481c      	ldr	r0, [pc, #112]	; (8000fb0 <Dhcp_process+0x164>)
 8000f40:	f000 f88e 	bl	8001060 <UartDbg>
			break;
 8000f44:	e006      	b.n	8000f54 <Dhcp_process+0x108>
			dhcp_stop(netif);
 8000f46:	69f8      	ldr	r0, [r7, #28]
 8000f48:	f015 fd44 	bl	80169d4 <dhcp_stop>
			DHCP_state = DHCP_OFF;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <Dhcp_process+0x148>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
			break;
 8000f52:	e000      	b.n	8000f56 <Dhcp_process+0x10a>
			break;
 8000f54:	bf00      	nop
		}
		/* wait 250 ms */
		osDelay(250);
 8000f56:	20fa      	movs	r0, #250	; 0xfa
 8000f58:	f003 ff08 	bl	8004d6c <osDelay>
		// feed json with random data
		for(int i =0;i<7;i++){
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
 8000f60:	e012      	b.n	8000f88 <Dhcp_process+0x13c>
			int idx = 11+17+63+28+1;
 8000f62:	2378      	movs	r3, #120	; 0x78
 8000f64:	617b      	str	r3, [r7, #20]
			data__data_json[idx+2*i]=getRandom(0,9)+'0';
 8000f66:	2109      	movs	r1, #9
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff ff39 	bl	8000de0 <getRandom>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	0059      	lsls	r1, r3, #1
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	440b      	add	r3, r1
 8000f7a:	3230      	adds	r2, #48	; 0x30
 8000f7c:	b2d1      	uxtb	r1, r2
 8000f7e:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <Dhcp_process+0x168>)
 8000f80:	54d1      	strb	r1, [r2, r3]
		for(int i =0;i<7;i++){
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	3301      	adds	r3, #1
 8000f86:	623b      	str	r3, [r7, #32]
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	dde9      	ble.n	8000f62 <Dhcp_process+0x116>
		switch (DHCP_state) {
 8000f8e:	e77b      	b.n	8000e88 <Dhcp_process+0x3c>
 8000f90:	0801b1d0 	.word	0x0801b1d0
 8000f94:	200105c0 	.word	0x200105c0
 8000f98:	0801b1e4 	.word	0x0801b1e4
 8000f9c:	0801b1f8 	.word	0x0801b1f8
 8000fa0:	0801b210 	.word	0x0801b210
 8000fa4:	0801b22c 	.word	0x0801b22c
 8000fa8:	0a08a8c0 	.word	0x0a08a8c0
 8000fac:	0108a8c0 	.word	0x0108a8c0
 8000fb0:	0801b26c 	.word	0x0801b26c
 8000fb4:	20000010 	.word	0x20000010

08000fb8 <GetDhcpState>:

	}
}


int GetDhcpState(void){
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
	return DHCP_state;
 8000fbc:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <GetDhcpState+0x14>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2db      	uxtb	r3, r3
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	200105c0 	.word	0x200105c0

08000fd0 <UartTaskInit>:
//osThreadId uartTaskHandle;



// init uart send task
void UartTaskInit(UART_HandleTypeDef *uart_handle) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  dbg_uart = uart_handle;
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <UartTaskInit+0x38>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6013      	str	r3, [r2, #0]
  uart_messages = xQueueCreate(32, sizeof(uint8_t*));
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	2020      	movs	r0, #32
 8000fe4:	f004 fd61 	bl	8005aaa <xQueueGenericCreate>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <UartTaskInit+0x3c>)
 8000fec:	601a      	str	r2, [r3, #0]
  // fix to use with freertoss V2 api
  uartTaskHandle = osThreadNew(StartUartTask, NULL, &uartTask_attributes);
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <UartTaskInit+0x40>)
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4808      	ldr	r0, [pc, #32]	; (8001014 <UartTaskInit+0x44>)
 8000ff4:	f003 fe14 	bl	8004c20 <osThreadNew>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	4b07      	ldr	r3, [pc, #28]	; (8001018 <UartTaskInit+0x48>)
 8000ffc:	601a      	str	r2, [r3, #0]
  //osThreadDef(uartTask, StartUartTask, UART_TASK_PRIORITY, 0, 1024);
  //uartTaskHandle = osThreadCreate(osThread(uartTask), NULL);
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200105c4 	.word	0x200105c4
 800100c:	200105cc 	.word	0x200105cc
 8001010:	0801efe8 	.word	0x0801efe8
 8001014:	0800109d 	.word	0x0800109d
 8001018:	200105c8 	.word	0x200105c8

0800101c <vprint>:

// sprintf implementation to easy use
void vprint(const char *fmt, va_list argp) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  char *txt;
  txt = pvPortMalloc(100);
 8001026:	2064      	movs	r0, #100	; 0x64
 8001028:	f007 fefa 	bl	8008e20 <pvPortMalloc>
 800102c:	4603      	mov	r3, r0
 800102e:	60fb      	str	r3, [r7, #12]
  if (0 < vsprintf(txt, fmt, argp)) // build string
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	4618      	mov	r0, r3
 8001038:	f019 f828 	bl	801a08c <vsiprintf>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	dd07      	ble.n	8001052 <vprint+0x36>
  {
    xQueueSend(uart_messages,&txt,0);
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <vprint+0x40>)
 8001044:	6818      	ldr	r0, [r3, #0]
 8001046:	f107 010c 	add.w	r1, r7, #12
 800104a:	2300      	movs	r3, #0
 800104c:	2200      	movs	r2, #0
 800104e:	f004 fea9 	bl	8005da4 <xQueueGenericSend>
  }
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200105cc 	.word	0x200105cc

08001060 <UartDbg>:

// caller to send data funtion
void UartDbg(const char *fmt, ...) // custom printf() function
{
 8001060:	b40f      	push	{r0, r1, r2, r3}
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
  vTaskSuspendAll();
 8001068:	f006 f95e 	bl	8007328 <vTaskSuspendAll>
  va_list argp;
  va_start(argp, fmt);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	607b      	str	r3, [r7, #4]
  vprint(fmt, argp);
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	6938      	ldr	r0, [r7, #16]
 8001076:	f7ff ffd1 	bl	800101c <vprint>
  va_end(argp);
  vTaskResume(uartTaskHandle);// resume main sending task
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <UartDbg+0x38>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f006 f88e 	bl	80071a0 <vTaskResume>
  xTaskResumeAll();
 8001084:	f006 f95e 	bl	8007344 <xTaskResumeAll>

}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001092:	b004      	add	sp, #16
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	200105c8 	.word	0x200105c8

0800109c <StartUartTask>:

// main sending task
void StartUartTask(void *argument) {
 800109c:	b5b0      	push	{r4, r5, r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  // set priority to lower value, when task init finished
  vTaskPrioritySet(NULL,UART_TASK_PRIORITY);
 80010a4:	2119      	movs	r1, #25
 80010a6:	2000      	movs	r0, #0
 80010a8:	f005 ff3a 	bl	8006f20 <vTaskPrioritySet>
  uint8_t *mes=NULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  while (1) {
    while (xQueueReceive(uart_messages, &mes, 0) == pdTRUE) {
 80010b0:	e011      	b.n	80010d6 <StartUartTask+0x3a>
      // DMA version not working when LWIP init func is called,
      // probably problem with static allocation for lwip task
      // or disabling DMA module for ETH interface init
      //while(!(dbg_uart->gState == HAL_UART_STATE_READY)) { }
      //HAL_UART_Transmit_DMA(dbg_uart, (uint8_t*)mes, strlen((char*)mes));
      HAL_UART_Transmit(dbg_uart, (uint8_t*)mes, strlen((char*)mes), 10);
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <StartUartTask+0x58>)
 80010b4:	681c      	ldr	r4, [r3, #0]
 80010b6:	68fd      	ldr	r5, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f8a2 	bl	8000204 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	230a      	movs	r3, #10
 80010c6:	4629      	mov	r1, r5
 80010c8:	4620      	mov	r0, r4
 80010ca:	f002 fc10 	bl	80038ee <HAL_UART_Transmit>
      vPortFree(mes);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f007 ff67 	bl	8008fa4 <vPortFree>
    while (xQueueReceive(uart_messages, &mes, 0) == pdTRUE) {
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <StartUartTask+0x5c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f107 010c 	add.w	r1, r7, #12
 80010de:	2200      	movs	r2, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f005 f877 	bl	80061d4 <xQueueReceive>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d0e2      	beq.n	80010b2 <StartUartTask+0x16>
    }
    vTaskSuspend(NULL); // sleep this task
 80010ec:	2000      	movs	r0, #0
 80010ee:	f005 ffb3 	bl	8007058 <vTaskSuspend>
    while (xQueueReceive(uart_messages, &mes, 0) == pdTRUE) {
 80010f2:	e7f0      	b.n	80010d6 <StartUartTask+0x3a>
 80010f4:	200105c4 	.word	0x200105c4
 80010f8:	200105cc 	.word	0x200105cc

080010fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001134 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001100:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001102:	e003      	b.n	800110c <LoopCopyDataInit>

08001104 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001106:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001108:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800110a:	3104      	adds	r1, #4

0800110c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800110c:	480b      	ldr	r0, [pc, #44]	; (800113c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001110:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001112:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001114:	d3f6      	bcc.n	8001104 <CopyDataInit>
  ldr  r2, =_sbss
 8001116:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001118:	e002      	b.n	8001120 <LoopFillZerobss>

0800111a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800111a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800111c:	f842 3b04 	str.w	r3, [r2], #4

08001120 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001122:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001124:	d3f9      	bcc.n	800111a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001126:	f7ff fe45 	bl	8000db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800112a:	f018 fea5 	bl	8019e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112e:	f7ff fa57 	bl	80005e0 <main>
  bx  lr    
 8001132:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001134:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001138:	08040334 	.word	0x08040334
  ldr  r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001140:	20000108 	.word	0x20000108
  ldr  r2, =_sbss
 8001144:	20000108 	.word	0x20000108
  ldr  r3, = _ebss
 8001148:	20016ef0 	.word	0x20016ef0

0800114c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC_IRQHandler>
	...

08001150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <HAL_Init+0x40>)
 800115a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_Init+0x40>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_Init+0x40>)
 8001166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <HAL_Init+0x40>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a07      	ldr	r2, [pc, #28]	; (8001190 <HAL_Init+0x40>)
 8001172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001178:	2003      	movs	r0, #3
 800117a:	f000 f8fa 	bl	8001372 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117e:	2000      	movs	r0, #0
 8001180:	f7ff fcea 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001184:	f7ff fc5c 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023c00 	.word	0x40023c00

08001194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x20>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x24>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4413      	add	r3, r2
 80011a4:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <HAL_IncTick+0x24>)
 80011a6:	6013      	str	r3, [r2, #0]
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000008 	.word	0x20000008
 80011b8:	200105d0 	.word	0x200105d0

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	200105d0 	.word	0x200105d0

080011d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff ffee 	bl	80011bc <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ec:	d005      	beq.n	80011fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_Delay+0x40>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	4413      	add	r3, r2
 80011f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011fa:	bf00      	nop
 80011fc:	f7ff ffde 	bl	80011bc <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	68fa      	ldr	r2, [r7, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d8f7      	bhi.n	80011fc <HAL_Delay+0x28>
  {
  }
}
 800120c:	bf00      	nop
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000008 	.word	0x20000008

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db0b      	blt.n	80012a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 021f 	and.w	r2, r3, #31
 8001294:	4907      	ldr	r1, [pc, #28]	; (80012b4 <__NVIC_EnableIRQ+0x38>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	2001      	movs	r0, #1
 800129e:	fa00 f202 	lsl.w	r2, r0, r2
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff4c 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139a:	f7ff ff61 	bl	8001260 <__NVIC_GetPriorityGrouping>
 800139e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	6978      	ldr	r0, [r7, #20]
 80013a6:	f7ff ffb1 	bl	800130c <NVIC_EncodePriority>
 80013aa:	4602      	mov	r2, r0
 80013ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff80 	bl	80012b8 <__NVIC_SetPriority>
}
 80013b8:	bf00      	nop
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff54 	bl	800127c <__NVIC_EnableIRQ>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80013ec:	4baa      	ldr	r3, [pc, #680]	; (8001698 <HAL_ETH_Init+0x2bc>)
 80013ee:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e185      	b.n	800170e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f002 ff3c 	bl	8004294 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	4b9e      	ldr	r3, [pc, #632]	; (800169c <HAL_ETH_Init+0x2c0>)
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	4a9d      	ldr	r2, [pc, #628]	; (800169c <HAL_ETH_Init+0x2c0>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142a:	6453      	str	r3, [r2, #68]	; 0x44
 800142c:	4b9b      	ldr	r3, [pc, #620]	; (800169c <HAL_ETH_Init+0x2c0>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001438:	4b99      	ldr	r3, [pc, #612]	; (80016a0 <HAL_ETH_Init+0x2c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a98      	ldr	r2, [pc, #608]	; (80016a0 <HAL_ETH_Init+0x2c4>)
 800143e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001442:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001444:	4b96      	ldr	r3, [pc, #600]	; (80016a0 <HAL_ETH_Init+0x2c4>)
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4994      	ldr	r1, [pc, #592]	; (80016a0 <HAL_ETH_Init+0x2c4>)
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 0201 	orr.w	r2, r2, #1
 8001464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001468:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800146a:	f7ff fea7 	bl	80011bc <HAL_GetTick>
 800146e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001470:	e011      	b.n	8001496 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001472:	f7ff fea3 	bl	80011bc <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001480:	d909      	bls.n	8001496 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2203      	movs	r2, #3
 8001486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e13b      	b.n	800170e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1e4      	bne.n	8001472 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f023 031c 	bic.w	r3, r3, #28
 80014b6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014b8:	f001 ff28 	bl	800330c <HAL_RCC_GetHCLKFreq>
 80014bc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4a78      	ldr	r2, [pc, #480]	; (80016a4 <HAL_ETH_Init+0x2c8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d908      	bls.n	80014d8 <HAL_ETH_Init+0xfc>
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4a77      	ldr	r2, [pc, #476]	; (80016a8 <HAL_ETH_Init+0x2cc>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d804      	bhi.n	80014d8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	e027      	b.n	8001528 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	4a73      	ldr	r2, [pc, #460]	; (80016a8 <HAL_ETH_Init+0x2cc>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d908      	bls.n	80014f2 <HAL_ETH_Init+0x116>
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	4a72      	ldr	r2, [pc, #456]	; (80016ac <HAL_ETH_Init+0x2d0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d804      	bhi.n	80014f2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f043 030c 	orr.w	r3, r3, #12
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	e01a      	b.n	8001528 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4a6d      	ldr	r2, [pc, #436]	; (80016ac <HAL_ETH_Init+0x2d0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d903      	bls.n	8001502 <HAL_ETH_Init+0x126>
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4a6c      	ldr	r2, [pc, #432]	; (80016b0 <HAL_ETH_Init+0x2d4>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d911      	bls.n	8001526 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4a6a      	ldr	r2, [pc, #424]	; (80016b0 <HAL_ETH_Init+0x2d4>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d908      	bls.n	800151c <HAL_ETH_Init+0x140>
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4a69      	ldr	r2, [pc, #420]	; (80016b4 <HAL_ETH_Init+0x2d8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d804      	bhi.n	800151c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	e005      	b.n	8001528 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f043 0310 	orr.w	r3, r3, #16
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	e000      	b.n	8001528 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001526:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001530:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001534:	2100      	movs	r1, #0
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 fc19 	bl	8001d6e <HAL_ETH_WritePHYRegister>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001546:	6939      	ldr	r1, [r7, #16]
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fdcf 	bl	80020ec <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0d9      	b.n	800170e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800155a:	20ff      	movs	r0, #255	; 0xff
 800155c:	f7ff fe3a 	bl	80011d4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80a7 	beq.w	80016b8 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800156a:	f7ff fe27 	bl	80011bc <HAL_GetTick>
 800156e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	461a      	mov	r2, r3
 8001576:	2101      	movs	r1, #1
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 fb90 	bl	8001c9e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800157e:	f7ff fe1d 	bl	80011bc <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d90f      	bls.n	80015b0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001594:	6939      	ldr	r1, [r7, #16]
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fda8 	bl	80020ec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e0ae      	b.n	800170e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0da      	beq.n	8001570 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80015ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015be:	2100      	movs	r1, #0
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fbd4 	bl	8001d6e <HAL_ETH_WritePHYRegister>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00b      	beq.n	80015e4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015d0:	6939      	ldr	r1, [r7, #16]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fd8a 	bl	80020ec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015e0:	2301      	movs	r3, #1
 80015e2:	e094      	b.n	800170e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80015e4:	f7ff fdea 	bl	80011bc <HAL_GetTick>
 80015e8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	461a      	mov	r2, r3
 80015f0:	2101      	movs	r1, #1
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 fb53 	bl	8001c9e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015f8:	f7ff fde0 	bl	80011bc <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d90f      	bls.n	800162a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800160e:	6939      	ldr	r1, [r7, #16]
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 fd6b 	bl	80020ec <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e071      	b.n	800170e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f003 0320 	and.w	r3, r3, #32
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0da      	beq.n	80015ea <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	461a      	mov	r2, r3
 800163a:	211f      	movs	r1, #31
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fb2e 	bl	8001c9e <HAL_ETH_ReadPHYRegister>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00b      	beq.n	8001660 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800164c:	6939      	ldr	r1, [r7, #16]
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fd4c 	bl	80020ec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800165c:	2301      	movs	r3, #1
 800165e:	e056      	b.n	800170e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	e002      	b.n	800167a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	e037      	b.n	80016fc <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	e032      	b.n	80016fc <HAL_ETH_Init+0x320>
 8001696:	bf00      	nop
 8001698:	03938700 	.word	0x03938700
 800169c:	40023800 	.word	0x40023800
 80016a0:	40013800 	.word	0x40013800
 80016a4:	01312cff 	.word	0x01312cff
 80016a8:	02160ebf 	.word	0x02160ebf
 80016ac:	039386ff 	.word	0x039386ff
 80016b0:	05f5e0ff 	.word	0x05f5e0ff
 80016b4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	08db      	lsrs	r3, r3, #3
 80016be:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	085b      	lsrs	r3, r3, #1
 80016c6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	461a      	mov	r2, r3
 80016ce:	2100      	movs	r1, #0
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fb4c 	bl	8001d6e <HAL_ETH_WritePHYRegister>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d00b      	beq.n	80016f4 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016e0:	6939      	ldr	r1, [r7, #16]
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fd02 	bl	80020ec <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e00c      	b.n	800170e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016f4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016f8:	f7ff fd6c 	bl	80011d4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016fc:	6939      	ldr	r1, [r7, #16]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 fcf4 	bl	80020ec <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop

08001718 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_ETH_DMATxDescListInit+0x20>
 8001734:	2302      	movs	r3, #2
 8001736:	e052      	b.n	80017de <HAL_ETH_DMATxDescListInit+0xc6>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2202      	movs	r2, #2
 8001744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	68ba      	ldr	r2, [r7, #8]
 800174c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e030      	b.n	80017b6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	015b      	lsls	r3, r3, #5
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	4413      	add	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001764:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800176c:	fb02 f303 	mul.w	r3, r2, r3
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	4413      	add	r3, r2
 8001774:	461a      	mov	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d105      	bne.n	800178e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	3b01      	subs	r3, #1
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	d208      	bcs.n	80017aa <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	3301      	adds	r3, #1
 800179c:	015b      	lsls	r3, r3, #5
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	4413      	add	r3, r2
 80017a2:	461a      	mov	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	60da      	str	r2, [r3, #12]
 80017a8:	e002      	b.n	80017b0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	3301      	adds	r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d3ca      	bcc.n	8001754 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c8:	3310      	adds	r3, #16
 80017ca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	371c      	adds	r7, #28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b087      	sub	sp, #28
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_ETH_DMARxDescListInit+0x20>
 8001806:	2302      	movs	r3, #2
 8001808:	e056      	b.n	80018b8 <HAL_ETH_DMARxDescListInit+0xce>
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2202      	movs	r2, #2
 8001816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e034      	b.n	8001890 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	015b      	lsls	r3, r3, #5
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	4413      	add	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001836:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800183e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001846:	fb02 f303 	mul.w	r3, r2, r3
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	461a      	mov	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d105      	bne.n	8001868 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	3b01      	subs	r3, #1
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	429a      	cmp	r2, r3
 8001870:	d208      	bcs.n	8001884 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3301      	adds	r3, #1
 8001876:	015b      	lsls	r3, r3, #5
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	4413      	add	r3, r2
 800187c:	461a      	mov	r2, r3
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	e002      	b.n	800188a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	429a      	cmp	r2, r3
 8001896:	d3c6      	bcc.n	8001826 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a2:	330c      	adds	r3, #12
 80018a4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	371c      	adds	r7, #28
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_ETH_TransmitFrame+0x24>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e0cd      	b.n	8001a84 <HAL_ETH_TransmitFrame+0x1c0>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2202      	movs	r2, #2
 80018f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800190e:	2301      	movs	r3, #1
 8001910:	e0b8      	b.n	8001a84 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	da09      	bge.n	8001930 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2212      	movs	r2, #18
 8001920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e0a9      	b.n	8001a84 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001936:	4293      	cmp	r3, r2
 8001938:	d915      	bls.n	8001966 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	4a54      	ldr	r2, [pc, #336]	; (8001a90 <HAL_ETH_TransmitFrame+0x1cc>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0a9b      	lsrs	r3, r3, #10
 8001944:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	4b51      	ldr	r3, [pc, #324]	; (8001a90 <HAL_ETH_TransmitFrame+0x1cc>)
 800194a:	fba3 1302 	umull	r1, r3, r3, r2
 800194e:	0a9b      	lsrs	r3, r3, #10
 8001950:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3301      	adds	r3, #1
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e001      	b.n	800196a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001966:	2301      	movs	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d11c      	bne.n	80019aa <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800197e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800198a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800199a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80019a8:	e04b      	b.n	8001a42 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	e044      	b.n	8001a3a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019be:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d107      	bne.n	80019d6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019d4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019de:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d116      	bne.n	8001a18 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019f8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <HAL_ETH_TransmitFrame+0x1d0>)
 80019fe:	fb02 f203 	mul.w	r2, r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a0a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a16:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a22:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a26:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	3301      	adds	r3, #1
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d3b6      	bcc.n	80019b0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4a:	3314      	adds	r3, #20
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00d      	beq.n	8001a72 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5e:	3314      	adds	r3, #20
 8001a60:	2204      	movs	r2, #4
 8001a62:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	ac02b00b 	.word	0xac02b00b
 8001a94:	fffffa0c 	.word	0xfffffa0c

08001a98 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e074      	b.n	8001b9c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2202      	movs	r2, #2
 8001abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ac2:	e05a      	b.n	8001b7a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad8:	d10d      	bne.n	8001af6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	461a      	mov	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
 8001af4:	e041      	b.n	8001b7a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10b      	bne.n	8001b1c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	461a      	mov	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	629a      	str	r2, [r3, #40]	; 0x28
 8001b1a:	e02e      	b.n	8001b7a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d103      	bne.n	8001b3e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0c1b      	lsrs	r3, r3, #16
 8001b46:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b4a:	1f1a      	subs	r2, r3, #4
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	461a      	mov	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e010      	b.n	8001b9c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db02      	blt.n	8001b8a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d99c      	bls.n	8001ac4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb8:	3314      	adds	r3, #20
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc0:	2b40      	cmp	r3, #64	; 0x40
 8001bc2:	d112      	bne.n	8001bea <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f002 fc33 	bl	8004430 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bd2:	3314      	adds	r3, #20
 8001bd4:	2240      	movs	r2, #64	; 0x40
 8001bd6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001be8:	e01b      	b.n	8001c22 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf2:	3314      	adds	r3, #20
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d111      	bne.n	8001c22 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f839 	bl	8001c76 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c0c:	3314      	adds	r3, #20
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2a:	3314      	adds	r3, #20
 8001c2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c30:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3a:	3314      	adds	r3, #20
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c46:	d112      	bne.n	8001c6e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 f81e 	bl	8001c8a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c56:	3314      	adds	r3, #20
 8001c58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c5c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b82      	cmp	r3, #130	; 0x82
 8001cbe:	d101      	bne.n	8001cc4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e050      	b.n	8001d66 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2282      	movs	r2, #130	; 0x82
 8001cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 031c 	and.w	r3, r3, #28
 8001cda:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8a1b      	ldrh	r3, [r3, #16]
 8001ce0:	02db      	lsls	r3, r3, #11
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001cea:	897b      	ldrh	r3, [r7, #10]
 8001cec:	019b      	lsls	r3, r3, #6
 8001cee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	f023 0302 	bic.w	r3, r3, #2
 8001cfe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d10:	f7ff fa54 	bl	80011bc <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d16:	e015      	b.n	8001d44 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d18:	f7ff fa50 	bl	80011bc <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d26:	d309      	bcc.n	8001d3c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e014      	b.n	8001d66 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1e4      	bne.n	8001d18 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b086      	sub	sp, #24
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	460b      	mov	r3, r1
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b42      	cmp	r3, #66	; 0x42
 8001d8e:	d101      	bne.n	8001d94 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d90:	2302      	movs	r3, #2
 8001d92:	e04e      	b.n	8001e32 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2242      	movs	r2, #66	; 0x42
 8001d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f003 031c 	and.w	r3, r3, #28
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8a1b      	ldrh	r3, [r3, #16]
 8001db0:	02db      	lsls	r3, r3, #11
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001dba:	897b      	ldrh	r3, [r7, #10]
 8001dbc:	019b      	lsls	r3, r3, #6
 8001dbe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001dea:	f7ff f9e7 	bl	80011bc <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001df0:	e015      	b.n	8001e1e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001df2:	f7ff f9e3 	bl	80011bc <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e00:	d309      	bcc.n	8001e16 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e00d      	b.n	8001e32 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1e4      	bne.n	8001df2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3718      	adds	r7, #24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_ETH_Start+0x16>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e01f      	b.n	8001e90 <HAL_ETH_Start+0x56>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fb45 	bl	80024f0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fb7c 	bl	8002564 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fc13 	bl	8002698 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fbb0 	bl	80025d8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fbdd 	bl	8002638 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <HAL_ETH_Stop+0x16>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e01f      	b.n	8001eee <HAL_ETH_Stop+0x56>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fba2 	bl	8002608 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fbcf 	bl	8002668 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fb67 	bl	800259e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f000 fbe1 	bl	8002698 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fb27 	bl	800252a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_ETH_ConfigMAC+0x1c>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e0e4      	b.n	80020de <HAL_ETH_ConfigMAC+0x1e6>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 80b1 	beq.w	800208e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4b6c      	ldr	r3, [pc, #432]	; (80020e8 <HAL_ETH_ConfigMAC+0x1f0>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f44:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001f4a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f50:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f56:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f5c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f62:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001f68:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001f6e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001f74:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001f7a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001f80:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001f86:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f9e:	2001      	movs	r0, #1
 8001fa0:	f7ff f918 	bl	80011d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fb4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001fba:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001fc0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001fc6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001fcc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001fd2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001fde:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fe0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f7ff f8f2 	bl	80011d4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002000:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800200a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	f64f 7341 	movw	r3, #65345	; 0xff41
 800201a:	4013      	ands	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002022:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002028:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800202e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002034:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800203a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002040:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002058:	2001      	movs	r0, #1
 800205a:	f7ff f8bb 	bl	80011d4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800207e:	2001      	movs	r0, #1
 8002080:	f7ff f8a8 	bl	80011d4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	61da      	str	r2, [r3, #28]
 800208c:	e01e      	b.n	80020cc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800209c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020be:	2001      	movs	r0, #1
 80020c0:	f7ff f888 	bl	80011d4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	ff20810f 	.word	0xff20810f

080020ec <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b0b0      	sub	sp, #192	; 0xc0
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002108:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002110:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800211a:	2300      	movs	r3, #0
 800211c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d103      	bne.n	800213a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002136:	663b      	str	r3, [r7, #96]	; 0x60
 8002138:	e001      	b.n	800213e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800213e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002142:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002148:	2300      	movs	r3, #0
 800214a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002158:	2340      	movs	r3, #64	; 0x40
 800215a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002162:	2300      	movs	r3, #0
 8002164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800216e:	2300      	movs	r3, #0
 8002170:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800217a:	2300      	movs	r3, #0
 800217c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800218c:	2380      	movs	r3, #128	; 0x80
 800218e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002192:	2300      	movs	r3, #0
 8002194:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c4:	4bac      	ldr	r3, [pc, #688]	; (8002478 <ETH_MACDMAConfig+0x38c>)
 80021c6:	4013      	ands	r3, r2
 80021c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80021cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80021ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80021d0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80021d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80021d4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80021d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80021d8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80021de:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80021e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80021e2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80021e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80021e6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80021ec:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80021ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80021f0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80021f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80021f4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80021f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80021f8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80021fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80021fc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80021fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002200:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002202:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002214:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002220:	2001      	movs	r0, #1
 8002222:	f7fe ffd7 	bl	80011d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800222e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002230:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002234:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002236:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002238:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800223a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800223e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002244:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002246:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800224a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800224c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002250:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002254:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800225c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800225e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800226a:	2001      	movs	r0, #1
 800226c:	f7fe ffb2 	bl	80011d4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002278:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002282:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800228c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002298:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800229c:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022a0:	4013      	ands	r3, r2
 80022a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80022a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022aa:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80022ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80022b0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80022b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80022b6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80022b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80022bc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80022be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80022c2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80022c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80022c8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80022ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022dc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e8:	2001      	movs	r0, #1
 80022ea:	f7fe ff73 	bl	80011d4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022f6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022f8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80022fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002312:	2001      	movs	r0, #1
 8002314:	f7fe ff5e 	bl	80011d4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002320:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002322:	2300      	movs	r3, #0
 8002324:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002326:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800232a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002330:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002334:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002342:	2300      	movs	r3, #0
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002346:	2304      	movs	r3, #4
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800234a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002350:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002354:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800235a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800235c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002360:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002366:	2300      	movs	r3, #0
 8002368:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800236a:	2300      	movs	r3, #0
 800236c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002376:	3318      	adds	r3, #24
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800237e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002382:	4b3e      	ldr	r3, [pc, #248]	; (800247c <ETH_MACDMAConfig+0x390>)
 8002384:	4013      	ands	r3, r2
 8002386:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800238a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800238c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800238e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002390:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002392:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002394:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002396:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002398:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800239a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800239c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800239e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80023a0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80023a2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80023a6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80023a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80023aa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023be:	3318      	adds	r3, #24
 80023c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023c4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ce:	3318      	adds	r3, #24
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023d6:	2001      	movs	r0, #1
 80023d8:	f7fe fefc 	bl	80011d4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e4:	3318      	adds	r3, #24
 80023e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ea:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80023ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023f0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80023f4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80023f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023f8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80023fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80023fc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80023fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002400:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002402:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002406:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002414:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002424:	2001      	movs	r0, #1
 8002426:	f7fe fed5 	bl	80011d4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002432:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002436:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d10f      	bne.n	8002460 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002448:	331c      	adds	r3, #28
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002454:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800245c:	331c      	adds	r3, #28
 800245e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	461a      	mov	r2, r3
 8002466:	2100      	movs	r1, #0
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f809 	bl	8002480 <ETH_MACAddressConfig>
}
 800246e:	bf00      	nop
 8002470:	37c0      	adds	r7, #192	; 0xc0
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	ff20810f 	.word	0xff20810f
 800247c:	f8de3f23 	.word	0xf8de3f23

08002480 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3305      	adds	r3, #5
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	3204      	adds	r2, #4
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <ETH_MACAddressConfig+0x68>)
 80024a2:	4413      	add	r3, r2
 80024a4:	461a      	mov	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3303      	adds	r3, #3
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	061a      	lsls	r2, r3, #24
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3302      	adds	r3, #2
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	041b      	lsls	r3, r3, #16
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3301      	adds	r3, #1
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	4313      	orrs	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <ETH_MACAddressConfig+0x6c>)
 80024d2:	4413      	add	r3, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	6013      	str	r3, [r2, #0]
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40028040 	.word	0x40028040
 80024ec:	40028044 	.word	0x40028044

080024f0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 0208 	orr.w	r2, r2, #8
 800250a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002514:	2001      	movs	r0, #1
 8002516:	f000 f8e9 	bl	80026ec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	601a      	str	r2, [r3, #0]
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0208 	bic.w	r2, r2, #8
 8002544:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800254e:	2001      	movs	r0, #1
 8002550:	f000 f8cc 	bl	80026ec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	601a      	str	r2, [r3, #0]
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0204 	orr.w	r2, r2, #4
 800257e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002588:	2001      	movs	r0, #1
 800258a:	f000 f8af 	bl	80026ec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	601a      	str	r2, [r3, #0]
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0204 	bic.w	r2, r2, #4
 80025b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025c2:	2001      	movs	r0, #1
 80025c4:	f000 f892 	bl	80026ec <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	601a      	str	r2, [r3, #0]
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e8:	3318      	adds	r3, #24
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f8:	3318      	adds	r3, #24
 80025fa:	601a      	str	r2, [r3, #0]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002618:	3318      	adds	r3, #24
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002628:	3318      	adds	r3, #24
 800262a:	601a      	str	r2, [r3, #0]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002648:	3318      	adds	r3, #24
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0202 	orr.w	r2, r2, #2
 8002654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002658:	3318      	adds	r3, #24
 800265a:	601a      	str	r2, [r3, #0]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002678:	3318      	adds	r3, #24
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0202 	bic.w	r2, r2, #2
 8002684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002688:	3318      	adds	r3, #24
 800268a:	601a      	str	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ac:	3318      	adds	r3, #24
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026bc:	3318      	adds	r3, #24
 80026be:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c8:	3318      	adds	r3, #24
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80026ce:	2001      	movs	r0, #1
 80026d0:	f000 f80c 	bl	80026ec <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026de:	3318      	adds	r3, #24
 80026e0:	601a      	str	r2, [r3, #0]
}
 80026e2:	bf00      	nop
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026f4:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <ETH_Delay+0x34>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <ETH_Delay+0x38>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0a5b      	lsrs	r3, r3, #9
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002708:	bf00      	nop
  } 
  while (Delay --);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1e5a      	subs	r2, r3, #1
 800270e:	60fa      	str	r2, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f9      	bne.n	8002708 <ETH_Delay+0x1c>
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	20000000 	.word	0x20000000
 8002724:	10624dd3 	.word	0x10624dd3

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	e177      	b.n	8002a34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002744:	2201      	movs	r2, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	429a      	cmp	r2, r3
 800275e:	f040 8166 	bne.w	8002a2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d00b      	beq.n	8002782 <HAL_GPIO_Init+0x5a>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d007      	beq.n	8002782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002776:	2b11      	cmp	r3, #17
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b12      	cmp	r3, #18
 8002780:	d130      	bne.n	80027e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	2203      	movs	r2, #3
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4013      	ands	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b8:	2201      	movs	r2, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 0201 	and.w	r2, r3, #1
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	2203      	movs	r2, #3
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	4313      	orrs	r3, r2
 800280c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d003      	beq.n	8002824 <HAL_GPIO_Init+0xfc>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b12      	cmp	r3, #18
 8002822:	d123      	bne.n	800286c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	08da      	lsrs	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3208      	adds	r2, #8
 800282c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	220f      	movs	r2, #15
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	08da      	lsrs	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3208      	adds	r2, #8
 8002866:	69b9      	ldr	r1, [r7, #24]
 8002868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0203 	and.w	r2, r3, #3
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80c0 	beq.w	8002a2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b65      	ldr	r3, [pc, #404]	; (8002a48 <HAL_GPIO_Init+0x320>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a64      	ldr	r2, [pc, #400]	; (8002a48 <HAL_GPIO_Init+0x320>)
 80028b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b62      	ldr	r3, [pc, #392]	; (8002a48 <HAL_GPIO_Init+0x320>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ca:	4a60      	ldr	r2, [pc, #384]	; (8002a4c <HAL_GPIO_Init+0x324>)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	3302      	adds	r3, #2
 80028d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	220f      	movs	r2, #15
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <HAL_GPIO_Init+0x328>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d037      	beq.n	8002966 <HAL_GPIO_Init+0x23e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a56      	ldr	r2, [pc, #344]	; (8002a54 <HAL_GPIO_Init+0x32c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d031      	beq.n	8002962 <HAL_GPIO_Init+0x23a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a55      	ldr	r2, [pc, #340]	; (8002a58 <HAL_GPIO_Init+0x330>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02b      	beq.n	800295e <HAL_GPIO_Init+0x236>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a54      	ldr	r2, [pc, #336]	; (8002a5c <HAL_GPIO_Init+0x334>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d025      	beq.n	800295a <HAL_GPIO_Init+0x232>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a53      	ldr	r2, [pc, #332]	; (8002a60 <HAL_GPIO_Init+0x338>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01f      	beq.n	8002956 <HAL_GPIO_Init+0x22e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a52      	ldr	r2, [pc, #328]	; (8002a64 <HAL_GPIO_Init+0x33c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d019      	beq.n	8002952 <HAL_GPIO_Init+0x22a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a51      	ldr	r2, [pc, #324]	; (8002a68 <HAL_GPIO_Init+0x340>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_GPIO_Init+0x226>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a50      	ldr	r2, [pc, #320]	; (8002a6c <HAL_GPIO_Init+0x344>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00d      	beq.n	800294a <HAL_GPIO_Init+0x222>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <HAL_GPIO_Init+0x348>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <HAL_GPIO_Init+0x21e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4e      	ldr	r2, [pc, #312]	; (8002a74 <HAL_GPIO_Init+0x34c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d101      	bne.n	8002942 <HAL_GPIO_Init+0x21a>
 800293e:	2309      	movs	r3, #9
 8002940:	e012      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002942:	230a      	movs	r3, #10
 8002944:	e010      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002946:	2308      	movs	r3, #8
 8002948:	e00e      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800294a:	2307      	movs	r3, #7
 800294c:	e00c      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800294e:	2306      	movs	r3, #6
 8002950:	e00a      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002952:	2305      	movs	r3, #5
 8002954:	e008      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002956:	2304      	movs	r3, #4
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800295a:	2303      	movs	r3, #3
 800295c:	e004      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800295e:	2302      	movs	r3, #2
 8002960:	e002      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002966:	2300      	movs	r3, #0
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f002 0203 	and.w	r2, r2, #3
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	4093      	lsls	r3, r2
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002978:	4934      	ldr	r1, [pc, #208]	; (8002a4c <HAL_GPIO_Init+0x324>)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002986:	4b3c      	ldr	r3, [pc, #240]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029aa:	4a33      	ldr	r2, [pc, #204]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029b0:	4b31      	ldr	r3, [pc, #196]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d4:	4a28      	ldr	r2, [pc, #160]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029da:	4b27      	ldr	r3, [pc, #156]	; (8002a78 <HAL_GPIO_Init+0x350>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fe:	4a1e      	ldr	r2, [pc, #120]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a28:	4a13      	ldr	r2, [pc, #76]	; (8002a78 <HAL_GPIO_Init+0x350>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	f67f ae84 	bls.w	8002744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	3724      	adds	r7, #36	; 0x24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	40013800 	.word	0x40013800
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400
 8002a58:	40020800 	.word	0x40020800
 8002a5c:	40020c00 	.word	0x40020c00
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40021400 	.word	0x40021400
 8002a68:	40021800 	.word	0x40021800
 8002a6c:	40021c00 	.word	0x40021c00
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40022400 	.word	0x40022400
 8002a78:	40013c00 	.word	0x40013c00

08002a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	807b      	strh	r3, [r7, #2]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a8c:	787b      	ldrb	r3, [r7, #1]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a92:	887a      	ldrh	r2, [r7, #2]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a98:	e003      	b.n	8002aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a9a:	887b      	ldrh	r3, [r7, #2]
 8002a9c:	041a      	lsls	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	619a      	str	r2, [r3, #24]
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e25b      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d075      	beq.n	8002bba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ace:	4ba3      	ldr	r3, [pc, #652]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d00c      	beq.n	8002af4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ada:	4ba0      	ldr	r3, [pc, #640]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d112      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ae6:	4b9d      	ldr	r3, [pc, #628]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002af2:	d10b      	bne.n	8002b0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002af4:	4b99      	ldr	r3, [pc, #612]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d05b      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x108>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d157      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e236      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b14:	d106      	bne.n	8002b24 <HAL_RCC_OscConfig+0x74>
 8002b16:	4b91      	ldr	r3, [pc, #580]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a90      	ldr	r2, [pc, #576]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 8002b22:	e01d      	b.n	8002b60 <HAL_RCC_OscConfig+0xb0>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x98>
 8002b2e:	4b8b      	ldr	r3, [pc, #556]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a8a      	ldr	r2, [pc, #552]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b88      	ldr	r3, [pc, #544]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a87      	ldr	r2, [pc, #540]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e00b      	b.n	8002b60 <HAL_RCC_OscConfig+0xb0>
 8002b48:	4b84      	ldr	r3, [pc, #528]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a83      	ldr	r2, [pc, #524]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	4b81      	ldr	r3, [pc, #516]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a80      	ldr	r2, [pc, #512]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d013      	beq.n	8002b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7fe fb28 	bl	80011bc <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b70:	f7fe fb24 	bl	80011bc <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e1fb      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	4b76      	ldr	r3, [pc, #472]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0xc0>
 8002b8e:	e014      	b.n	8002bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fb14 	bl	80011bc <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b98:	f7fe fb10 	bl	80011bc <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b64      	cmp	r3, #100	; 0x64
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e1e7      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	4b6c      	ldr	r3, [pc, #432]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0xe8>
 8002bb6:	e000      	b.n	8002bba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d063      	beq.n	8002c8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bc6:	4b65      	ldr	r3, [pc, #404]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bd2:	4b62      	ldr	r3, [pc, #392]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d11c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bde:	4b5f      	ldr	r3, [pc, #380]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d116      	bne.n	8002c18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	4b5c      	ldr	r3, [pc, #368]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d005      	beq.n	8002c02 <HAL_RCC_OscConfig+0x152>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d001      	beq.n	8002c02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e1bb      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c02:	4b56      	ldr	r3, [pc, #344]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4952      	ldr	r1, [pc, #328]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	e03a      	b.n	8002c8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d020      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c20:	4b4f      	ldr	r3, [pc, #316]	; (8002d60 <HAL_RCC_OscConfig+0x2b0>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c26:	f7fe fac9 	bl	80011bc <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2c:	e008      	b.n	8002c40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c2e:	f7fe fac5 	bl	80011bc <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e19c      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c40:	4b46      	ldr	r3, [pc, #280]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0f0      	beq.n	8002c2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4c:	4b43      	ldr	r3, [pc, #268]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4940      	ldr	r1, [pc, #256]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	600b      	str	r3, [r1, #0]
 8002c60:	e015      	b.n	8002c8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c62:	4b3f      	ldr	r3, [pc, #252]	; (8002d60 <HAL_RCC_OscConfig+0x2b0>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe faa8 	bl	80011bc <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c70:	f7fe faa4 	bl	80011bc <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e17b      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c82:	4b36      	ldr	r3, [pc, #216]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d030      	beq.n	8002cfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ca2:	4b30      	ldr	r3, [pc, #192]	; (8002d64 <HAL_RCC_OscConfig+0x2b4>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe fa88 	bl	80011bc <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb0:	f7fe fa84 	bl	80011bc <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e15b      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x200>
 8002cce:	e015      	b.n	8002cfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cd0:	4b24      	ldr	r3, [pc, #144]	; (8002d64 <HAL_RCC_OscConfig+0x2b4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fa71 	bl	80011bc <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cde:	f7fe fa6d 	bl	80011bc <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e144      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f0      	bne.n	8002cde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80a0 	beq.w	8002e4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d0e:	4b13      	ldr	r3, [pc, #76]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	4a0e      	ldr	r2, [pc, #56]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d28:	6413      	str	r3, [r2, #64]	; 0x40
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d36:	2301      	movs	r3, #1
 8002d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_RCC_OscConfig+0x2b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d121      	bne.n	8002d8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d46:	4b08      	ldr	r3, [pc, #32]	; (8002d68 <HAL_RCC_OscConfig+0x2b8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a07      	ldr	r2, [pc, #28]	; (8002d68 <HAL_RCC_OscConfig+0x2b8>)
 8002d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d52:	f7fe fa33 	bl	80011bc <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d58:	e011      	b.n	8002d7e <HAL_RCC_OscConfig+0x2ce>
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	42470000 	.word	0x42470000
 8002d64:	42470e80 	.word	0x42470e80
 8002d68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6c:	f7fe fa26 	bl	80011bc <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0fd      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7e:	4b81      	ldr	r3, [pc, #516]	; (8002f84 <HAL_RCC_OscConfig+0x4d4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d106      	bne.n	8002da0 <HAL_RCC_OscConfig+0x2f0>
 8002d92:	4b7d      	ldr	r3, [pc, #500]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	4a7c      	ldr	r2, [pc, #496]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9e:	e01c      	b.n	8002dda <HAL_RCC_OscConfig+0x32a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d10c      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x312>
 8002da8:	4b77      	ldr	r3, [pc, #476]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	4a76      	ldr	r2, [pc, #472]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	6713      	str	r3, [r2, #112]	; 0x70
 8002db4:	4b74      	ldr	r3, [pc, #464]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	4a73      	ldr	r2, [pc, #460]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8002dc0:	e00b      	b.n	8002dda <HAL_RCC_OscConfig+0x32a>
 8002dc2:	4b71      	ldr	r3, [pc, #452]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc6:	4a70      	ldr	r2, [pc, #448]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002dc8:	f023 0301 	bic.w	r3, r3, #1
 8002dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8002dce:	4b6e      	ldr	r3, [pc, #440]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd2:	4a6d      	ldr	r2, [pc, #436]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002dd4:	f023 0304 	bic.w	r3, r3, #4
 8002dd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d015      	beq.n	8002e0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de2:	f7fe f9eb 	bl	80011bc <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7fe f9e7 	bl	80011bc <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e0bc      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e00:	4b61      	ldr	r3, [pc, #388]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0ee      	beq.n	8002dea <HAL_RCC_OscConfig+0x33a>
 8002e0c:	e014      	b.n	8002e38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe f9d5 	bl	80011bc <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe f9d1 	bl	80011bc <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e0a6      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e2c:	4b56      	ldr	r3, [pc, #344]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ee      	bne.n	8002e16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e38:	7dfb      	ldrb	r3, [r7, #23]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d105      	bne.n	8002e4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e3e:	4b52      	ldr	r3, [pc, #328]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a51      	ldr	r2, [pc, #324]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8092 	beq.w	8002f78 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e54:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d05c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d141      	bne.n	8002eec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b48      	ldr	r3, [pc, #288]	; (8002f8c <HAL_RCC_OscConfig+0x4dc>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6e:	f7fe f9a5 	bl	80011bc <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e76:	f7fe f9a1 	bl	80011bc <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e078      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e88:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f0      	bne.n	8002e76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	019b      	lsls	r3, r3, #6
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eaa:	085b      	lsrs	r3, r3, #1
 8002eac:	3b01      	subs	r3, #1
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	061b      	lsls	r3, r3, #24
 8002eb8:	4933      	ldr	r1, [pc, #204]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ebe:	4b33      	ldr	r3, [pc, #204]	; (8002f8c <HAL_RCC_OscConfig+0x4dc>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe f97a 	bl	80011bc <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe f976 	bl	80011bc <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e04d      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ede:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f0      	beq.n	8002ecc <HAL_RCC_OscConfig+0x41c>
 8002eea:	e045      	b.n	8002f78 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eec:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <HAL_RCC_OscConfig+0x4dc>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef2:	f7fe f963 	bl	80011bc <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efa:	f7fe f95f 	bl	80011bc <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e036      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f0c:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <HAL_RCC_OscConfig+0x44a>
 8002f18:	e02e      	b.n	8002f78 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e029      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f26:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <HAL_RCC_OscConfig+0x4d8>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d11c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d115      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f4e:	4013      	ands	r3, r2
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d10d      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d106      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40007000 	.word	0x40007000
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	42470060 	.word	0x42470060

08002f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0cc      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b68      	ldr	r3, [pc, #416]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d90c      	bls.n	8002fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b65      	ldr	r3, [pc, #404]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fba:	4b63      	ldr	r3, [pc, #396]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	683a      	ldr	r2, [r7, #0]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d001      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0b8      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d020      	beq.n	800301a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe4:	4b59      	ldr	r3, [pc, #356]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a58      	ldr	r2, [pc, #352]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ffc:	4b53      	ldr	r3, [pc, #332]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	4a52      	ldr	r2, [pc, #328]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003008:	4b50      	ldr	r3, [pc, #320]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	494d      	ldr	r1, [pc, #308]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	4313      	orrs	r3, r2
 8003018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d044      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302e:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d119      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e07f      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d003      	beq.n	800304e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800304a:	2b03      	cmp	r3, #3
 800304c:	d107      	bne.n	800305e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800304e:	4b3f      	ldr	r3, [pc, #252]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d109      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e06f      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800305e:	4b3b      	ldr	r3, [pc, #236]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e067      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800306e:	4b37      	ldr	r3, [pc, #220]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f023 0203 	bic.w	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4934      	ldr	r1, [pc, #208]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 800307c:	4313      	orrs	r3, r2
 800307e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003080:	f7fe f89c 	bl	80011bc <HAL_GetTick>
 8003084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	e00a      	b.n	800309e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003088:	f7fe f898 	bl	80011bc <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	; 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e04f      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800309e:	4b2b      	ldr	r3, [pc, #172]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 020c 	and.w	r2, r3, #12
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d1eb      	bne.n	8003088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030b0:	4b25      	ldr	r3, [pc, #148]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d20c      	bcs.n	80030d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030be:	4b22      	ldr	r3, [pc, #136]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c6:	4b20      	ldr	r3, [pc, #128]	; (8003148 <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d001      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e032      	b.n	800313e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d008      	beq.n	80030f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e4:	4b19      	ldr	r3, [pc, #100]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	4916      	ldr	r1, [pc, #88]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d009      	beq.n	8003116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003102:	4b12      	ldr	r3, [pc, #72]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	490e      	ldr	r1, [pc, #56]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003116:	f000 f821 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800311a:	4601      	mov	r1, r0
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	091b      	lsrs	r3, r3, #4
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	5cd3      	ldrb	r3, [r2, r3]
 800312a:	fa21 f303 	lsr.w	r3, r1, r3
 800312e:	4a09      	ldr	r2, [pc, #36]	; (8003154 <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003132:	4b09      	ldr	r3, [pc, #36]	; (8003158 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd fd0e 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023c00 	.word	0x40023c00
 800314c:	40023800 	.word	0x40023800
 8003150:	0801efac 	.word	0x0801efac
 8003154:	20000000 	.word	0x20000000
 8003158:	20000004 	.word	0x20000004

0800315c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	2300      	movs	r3, #0
 800316c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003172:	4b63      	ldr	r3, [pc, #396]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	2b04      	cmp	r3, #4
 800317c:	d007      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x32>
 800317e:	2b08      	cmp	r3, #8
 8003180:	d008      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x38>
 8003182:	2b00      	cmp	r3, #0
 8003184:	f040 80b4 	bne.w	80032f0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003188:	4b5e      	ldr	r3, [pc, #376]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800318a:	60bb      	str	r3, [r7, #8]
       break;
 800318c:	e0b3      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800318e:	4b5e      	ldr	r3, [pc, #376]	; (8003308 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003190:	60bb      	str	r3, [r7, #8]
      break;
 8003192:	e0b0      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003194:	4b5a      	ldr	r3, [pc, #360]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800319c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800319e:	4b58      	ldr	r3, [pc, #352]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d04a      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031aa:	4b55      	ldr	r3, [pc, #340]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	099b      	lsrs	r3, r3, #6
 80031b0:	f04f 0400 	mov.w	r4, #0
 80031b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	ea03 0501 	and.w	r5, r3, r1
 80031c0:	ea04 0602 	and.w	r6, r4, r2
 80031c4:	4629      	mov	r1, r5
 80031c6:	4632      	mov	r2, r6
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	f04f 0400 	mov.w	r4, #0
 80031d0:	0154      	lsls	r4, r2, #5
 80031d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031d6:	014b      	lsls	r3, r1, #5
 80031d8:	4619      	mov	r1, r3
 80031da:	4622      	mov	r2, r4
 80031dc:	1b49      	subs	r1, r1, r5
 80031de:	eb62 0206 	sbc.w	r2, r2, r6
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	f04f 0400 	mov.w	r4, #0
 80031ea:	0194      	lsls	r4, r2, #6
 80031ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80031f0:	018b      	lsls	r3, r1, #6
 80031f2:	1a5b      	subs	r3, r3, r1
 80031f4:	eb64 0402 	sbc.w	r4, r4, r2
 80031f8:	f04f 0100 	mov.w	r1, #0
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	00e2      	lsls	r2, r4, #3
 8003202:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003206:	00d9      	lsls	r1, r3, #3
 8003208:	460b      	mov	r3, r1
 800320a:	4614      	mov	r4, r2
 800320c:	195b      	adds	r3, r3, r5
 800320e:	eb44 0406 	adc.w	r4, r4, r6
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	0262      	lsls	r2, r4, #9
 800321c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003220:	0259      	lsls	r1, r3, #9
 8003222:	460b      	mov	r3, r1
 8003224:	4614      	mov	r4, r2
 8003226:	4618      	mov	r0, r3
 8003228:	4621      	mov	r1, r4
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f04f 0400 	mov.w	r4, #0
 8003230:	461a      	mov	r2, r3
 8003232:	4623      	mov	r3, r4
 8003234:	f7fd f844 	bl	80002c0 <__aeabi_uldivmod>
 8003238:	4603      	mov	r3, r0
 800323a:	460c      	mov	r4, r1
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e049      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003240:	4b2f      	ldr	r3, [pc, #188]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	099b      	lsrs	r3, r3, #6
 8003246:	f04f 0400 	mov.w	r4, #0
 800324a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	ea03 0501 	and.w	r5, r3, r1
 8003256:	ea04 0602 	and.w	r6, r4, r2
 800325a:	4629      	mov	r1, r5
 800325c:	4632      	mov	r2, r6
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	f04f 0400 	mov.w	r4, #0
 8003266:	0154      	lsls	r4, r2, #5
 8003268:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800326c:	014b      	lsls	r3, r1, #5
 800326e:	4619      	mov	r1, r3
 8003270:	4622      	mov	r2, r4
 8003272:	1b49      	subs	r1, r1, r5
 8003274:	eb62 0206 	sbc.w	r2, r2, r6
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	f04f 0400 	mov.w	r4, #0
 8003280:	0194      	lsls	r4, r2, #6
 8003282:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003286:	018b      	lsls	r3, r1, #6
 8003288:	1a5b      	subs	r3, r3, r1
 800328a:	eb64 0402 	sbc.w	r4, r4, r2
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	00e2      	lsls	r2, r4, #3
 8003298:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800329c:	00d9      	lsls	r1, r3, #3
 800329e:	460b      	mov	r3, r1
 80032a0:	4614      	mov	r4, r2
 80032a2:	195b      	adds	r3, r3, r5
 80032a4:	eb44 0406 	adc.w	r4, r4, r6
 80032a8:	f04f 0100 	mov.w	r1, #0
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	02a2      	lsls	r2, r4, #10
 80032b2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80032b6:	0299      	lsls	r1, r3, #10
 80032b8:	460b      	mov	r3, r1
 80032ba:	4614      	mov	r4, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	4621      	mov	r1, r4
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f04f 0400 	mov.w	r4, #0
 80032c6:	461a      	mov	r2, r3
 80032c8:	4623      	mov	r3, r4
 80032ca:	f7fc fff9 	bl	80002c0 <__aeabi_uldivmod>
 80032ce:	4603      	mov	r3, r0
 80032d0:	460c      	mov	r4, r1
 80032d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	0c1b      	lsrs	r3, r3, #16
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	3301      	adds	r3, #1
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ec:	60bb      	str	r3, [r7, #8]
      break;
 80032ee:	e002      	b.n	80032f6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032f2:	60bb      	str	r3, [r7, #8]
      break;
 80032f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f6:	68bb      	ldr	r3, [r7, #8]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	00f42400 	.word	0x00f42400
 8003308:	007a1200 	.word	0x007a1200

0800330c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <HAL_RCC_GetHCLKFreq+0x14>)
 8003312:	681b      	ldr	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000000 	.word	0x20000000

08003324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003328:	f7ff fff0 	bl	800330c <HAL_RCC_GetHCLKFreq>
 800332c:	4601      	mov	r1, r0
 800332e:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	0a9b      	lsrs	r3, r3, #10
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	4a03      	ldr	r2, [pc, #12]	; (8003348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40023800 	.word	0x40023800
 8003348:	0801efbc 	.word	0x0801efbc

0800334c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003350:	f7ff ffdc 	bl	800330c <HAL_RCC_GetHCLKFreq>
 8003354:	4601      	mov	r1, r0
 8003356:	4b05      	ldr	r3, [pc, #20]	; (800336c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	0b5b      	lsrs	r3, r3, #13
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4a03      	ldr	r2, [pc, #12]	; (8003370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003362:	5cd3      	ldrb	r3, [r2, r3]
 8003364:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40023800 	.word	0x40023800
 8003370:	0801efbc 	.word	0x0801efbc

08003374 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	220f      	movs	r2, #15
 8003382:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003384:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0203 	and.w	r2, r3, #3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <HAL_RCC_GetClockConfig+0x5c>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800339c:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <HAL_RCC_GetClockConfig+0x5c>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_GetClockConfig+0x5c>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	08db      	lsrs	r3, r3, #3
 80033ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033b6:	4b07      	ldr	r3, [pc, #28]	; (80033d4 <HAL_RCC_GetClockConfig+0x60>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 020f 	and.w	r2, r3, #15
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	601a      	str	r2, [r3, #0]
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40023c00 	.word	0x40023c00

080033d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e01d      	b.n	8003426 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d106      	bne.n	8003404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f815 	bl	800342e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3304      	adds	r3, #4
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f000 f968 	bl	80036ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f042 0201 	orr.w	r2, r2, #1
 8003458:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b06      	cmp	r3, #6
 800346a:	d007      	beq.n	800347c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b02      	cmp	r3, #2
 800349e:	d122      	bne.n	80034e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d11b      	bne.n	80034e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f06f 0202 	mvn.w	r2, #2
 80034b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0303 	and.w	r3, r3, #3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f000 f8ee 	bl	80036ae <HAL_TIM_IC_CaptureCallback>
 80034d2:	e005      	b.n	80034e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 f8e0 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f8f1 	bl	80036c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d122      	bne.n	800353a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d11b      	bne.n	800353a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f06f 0204 	mvn.w	r2, #4
 800350a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f8c4 	bl	80036ae <HAL_TIM_IC_CaptureCallback>
 8003526:	e005      	b.n	8003534 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 f8b6 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f8c7 	bl	80036c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b08      	cmp	r3, #8
 8003546:	d122      	bne.n	800358e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b08      	cmp	r3, #8
 8003554:	d11b      	bne.n	800358e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0208 	mvn.w	r2, #8
 800355e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2204      	movs	r2, #4
 8003564:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f89a 	bl	80036ae <HAL_TIM_IC_CaptureCallback>
 800357a:	e005      	b.n	8003588 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f88c 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f89d 	bl	80036c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b10      	cmp	r3, #16
 800359a:	d122      	bne.n	80035e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d11b      	bne.n	80035e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f06f 0210 	mvn.w	r2, #16
 80035b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2208      	movs	r2, #8
 80035b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f870 	bl	80036ae <HAL_TIM_IC_CaptureCallback>
 80035ce:	e005      	b.n	80035dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f862 	bl	800369a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f873 	bl	80036c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d10e      	bne.n	800360e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d107      	bne.n	800360e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f06f 0201 	mvn.w	r2, #1
 8003606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7fd f9ff 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003618:	2b80      	cmp	r3, #128	; 0x80
 800361a:	d10e      	bne.n	800363a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d107      	bne.n	800363a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f903 	bl	8003840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b40      	cmp	r3, #64	; 0x40
 8003646:	d10e      	bne.n	8003666 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d107      	bne.n	8003666 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800365e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 f838 	bl	80036d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b20      	cmp	r3, #32
 8003672:	d10e      	bne.n	8003692 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f003 0320 	and.w	r3, r3, #32
 800367e:	2b20      	cmp	r3, #32
 8003680:	d107      	bne.n	8003692 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f06f 0220 	mvn.w	r2, #32
 800368a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f8cd 	bl	800382c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a40      	ldr	r2, [pc, #256]	; (8003800 <TIM_Base_SetConfig+0x114>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370a:	d00f      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a3d      	ldr	r2, [pc, #244]	; (8003804 <TIM_Base_SetConfig+0x118>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00b      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a3c      	ldr	r2, [pc, #240]	; (8003808 <TIM_Base_SetConfig+0x11c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d007      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a3b      	ldr	r2, [pc, #236]	; (800380c <TIM_Base_SetConfig+0x120>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a3a      	ldr	r2, [pc, #232]	; (8003810 <TIM_Base_SetConfig+0x124>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d108      	bne.n	800373e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a2f      	ldr	r2, [pc, #188]	; (8003800 <TIM_Base_SetConfig+0x114>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d02b      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374c:	d027      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a2c      	ldr	r2, [pc, #176]	; (8003804 <TIM_Base_SetConfig+0x118>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d023      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a2b      	ldr	r2, [pc, #172]	; (8003808 <TIM_Base_SetConfig+0x11c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d01f      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2a      	ldr	r2, [pc, #168]	; (800380c <TIM_Base_SetConfig+0x120>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01b      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a29      	ldr	r2, [pc, #164]	; (8003810 <TIM_Base_SetConfig+0x124>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d017      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a28      	ldr	r2, [pc, #160]	; (8003814 <TIM_Base_SetConfig+0x128>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d013      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a27      	ldr	r2, [pc, #156]	; (8003818 <TIM_Base_SetConfig+0x12c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d00f      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a26      	ldr	r2, [pc, #152]	; (800381c <TIM_Base_SetConfig+0x130>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00b      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a25      	ldr	r2, [pc, #148]	; (8003820 <TIM_Base_SetConfig+0x134>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a24      	ldr	r2, [pc, #144]	; (8003824 <TIM_Base_SetConfig+0x138>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d003      	beq.n	800379e <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a23      	ldr	r2, [pc, #140]	; (8003828 <TIM_Base_SetConfig+0x13c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d108      	bne.n	80037b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <TIM_Base_SetConfig+0x114>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d003      	beq.n	80037e4 <TIM_Base_SetConfig+0xf8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a0c      	ldr	r2, [pc, #48]	; (8003810 <TIM_Base_SetConfig+0x124>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d103      	bne.n	80037ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	615a      	str	r2, [r3, #20]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40010000 	.word	0x40010000
 8003804:	40000400 	.word	0x40000400
 8003808:	40000800 	.word	0x40000800
 800380c:	40000c00 	.word	0x40000c00
 8003810:	40010400 	.word	0x40010400
 8003814:	40014000 	.word	0x40014000
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800
 8003820:	40001800 	.word	0x40001800
 8003824:	40001c00 	.word	0x40001c00
 8003828:	40002000 	.word	0x40002000

0800382c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e03f      	b.n	80038e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7fd f924 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2224      	movs	r2, #36	; 0x24
 8003884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003896:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f90b 	bl	8003ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695a      	ldr	r2, [r3, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b088      	sub	sp, #32
 80038f2:	af02      	add	r7, sp, #8
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	603b      	str	r3, [r7, #0]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b20      	cmp	r3, #32
 800390c:	f040 8083 	bne.w	8003a16 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <HAL_UART_Transmit+0x2e>
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e07b      	b.n	8003a18 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <HAL_UART_Transmit+0x40>
 800392a:	2302      	movs	r3, #2
 800392c:	e074      	b.n	8003a18 <HAL_UART_Transmit+0x12a>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2221      	movs	r2, #33	; 0x21
 8003940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003944:	f7fd fc3a 	bl	80011bc <HAL_GetTick>
 8003948:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	88fa      	ldrh	r2, [r7, #6]
 800394e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	88fa      	ldrh	r2, [r7, #6]
 8003954:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800395e:	e042      	b.n	80039e6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003976:	d122      	bne.n	80039be <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2200      	movs	r2, #0
 8003980:	2180      	movs	r1, #128	; 0x80
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f84c 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e042      	b.n	8003a18 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	3302      	adds	r3, #2
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	e017      	b.n	80039e6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	3301      	adds	r3, #1
 80039ba:	60bb      	str	r3, [r7, #8]
 80039bc:	e013      	b.n	80039e6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2180      	movs	r1, #128	; 0x80
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f829 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e01f      	b.n	8003a18 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	60ba      	str	r2, [r7, #8]
 80039de:	781a      	ldrb	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1b7      	bne.n	8003960 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2200      	movs	r2, #0
 80039f8:	2140      	movs	r1, #64	; 0x40
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 f810 	bl	8003a20 <UART_WaitOnFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e006      	b.n	8003a18 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	e000      	b.n	8003a18 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
  }
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a30:	e02c      	b.n	8003a8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d028      	beq.n	8003a8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a40:	f7fd fbbc 	bl	80011bc <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d21d      	bcs.n	8003a8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68da      	ldr	r2, [r3, #12]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e00f      	b.n	8003aac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4013      	ands	r3, r2
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d0c3      	beq.n	8003a32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab8:	b085      	sub	sp, #20
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003af6:	f023 030c 	bic.w	r3, r3, #12
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	68f9      	ldr	r1, [r7, #12]
 8003b00:	430b      	orrs	r3, r1
 8003b02:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699a      	ldr	r2, [r3, #24]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b22:	f040 818b 	bne.w	8003e3c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4ac1      	ldr	r2, [pc, #772]	; (8003e30 <UART_SetConfig+0x37c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d005      	beq.n	8003b3c <UART_SetConfig+0x88>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4abf      	ldr	r2, [pc, #764]	; (8003e34 <UART_SetConfig+0x380>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	f040 80bd 	bne.w	8003cb6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b3c:	f7ff fc06 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8003b40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	461d      	mov	r5, r3
 8003b46:	f04f 0600 	mov.w	r6, #0
 8003b4a:	46a8      	mov	r8, r5
 8003b4c:	46b1      	mov	r9, r6
 8003b4e:	eb18 0308 	adds.w	r3, r8, r8
 8003b52:	eb49 0409 	adc.w	r4, r9, r9
 8003b56:	4698      	mov	r8, r3
 8003b58:	46a1      	mov	r9, r4
 8003b5a:	eb18 0805 	adds.w	r8, r8, r5
 8003b5e:	eb49 0906 	adc.w	r9, r9, r6
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b76:	4688      	mov	r8, r1
 8003b78:	4691      	mov	r9, r2
 8003b7a:	eb18 0005 	adds.w	r0, r8, r5
 8003b7e:	eb49 0106 	adc.w	r1, r9, r6
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	461d      	mov	r5, r3
 8003b88:	f04f 0600 	mov.w	r6, #0
 8003b8c:	196b      	adds	r3, r5, r5
 8003b8e:	eb46 0406 	adc.w	r4, r6, r6
 8003b92:	461a      	mov	r2, r3
 8003b94:	4623      	mov	r3, r4
 8003b96:	f7fc fb93 	bl	80002c0 <__aeabi_uldivmod>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4ba5      	ldr	r3, [pc, #660]	; (8003e38 <UART_SetConfig+0x384>)
 8003ba2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	461d      	mov	r5, r3
 8003bb0:	f04f 0600 	mov.w	r6, #0
 8003bb4:	46a9      	mov	r9, r5
 8003bb6:	46b2      	mov	sl, r6
 8003bb8:	eb19 0309 	adds.w	r3, r9, r9
 8003bbc:	eb4a 040a 	adc.w	r4, sl, sl
 8003bc0:	4699      	mov	r9, r3
 8003bc2:	46a2      	mov	sl, r4
 8003bc4:	eb19 0905 	adds.w	r9, r9, r5
 8003bc8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bcc:	f04f 0100 	mov.w	r1, #0
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003be0:	4689      	mov	r9, r1
 8003be2:	4692      	mov	sl, r2
 8003be4:	eb19 0005 	adds.w	r0, r9, r5
 8003be8:	eb4a 0106 	adc.w	r1, sl, r6
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	461d      	mov	r5, r3
 8003bf2:	f04f 0600 	mov.w	r6, #0
 8003bf6:	196b      	adds	r3, r5, r5
 8003bf8:	eb46 0406 	adc.w	r4, r6, r6
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4623      	mov	r3, r4
 8003c00:	f7fc fb5e 	bl	80002c0 <__aeabi_uldivmod>
 8003c04:	4603      	mov	r3, r0
 8003c06:	460c      	mov	r4, r1
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4b8b      	ldr	r3, [pc, #556]	; (8003e38 <UART_SetConfig+0x384>)
 8003c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	2164      	movs	r1, #100	; 0x64
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	3332      	adds	r3, #50	; 0x32
 8003c1e:	4a86      	ldr	r2, [pc, #536]	; (8003e38 <UART_SetConfig+0x384>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c2c:	4498      	add	r8, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	461d      	mov	r5, r3
 8003c32:	f04f 0600 	mov.w	r6, #0
 8003c36:	46a9      	mov	r9, r5
 8003c38:	46b2      	mov	sl, r6
 8003c3a:	eb19 0309 	adds.w	r3, r9, r9
 8003c3e:	eb4a 040a 	adc.w	r4, sl, sl
 8003c42:	4699      	mov	r9, r3
 8003c44:	46a2      	mov	sl, r4
 8003c46:	eb19 0905 	adds.w	r9, r9, r5
 8003c4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c4e:	f04f 0100 	mov.w	r1, #0
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c62:	4689      	mov	r9, r1
 8003c64:	4692      	mov	sl, r2
 8003c66:	eb19 0005 	adds.w	r0, r9, r5
 8003c6a:	eb4a 0106 	adc.w	r1, sl, r6
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	461d      	mov	r5, r3
 8003c74:	f04f 0600 	mov.w	r6, #0
 8003c78:	196b      	adds	r3, r5, r5
 8003c7a:	eb46 0406 	adc.w	r4, r6, r6
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4623      	mov	r3, r4
 8003c82:	f7fc fb1d 	bl	80002c0 <__aeabi_uldivmod>
 8003c86:	4603      	mov	r3, r0
 8003c88:	460c      	mov	r4, r1
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4b6a      	ldr	r3, [pc, #424]	; (8003e38 <UART_SetConfig+0x384>)
 8003c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	2164      	movs	r1, #100	; 0x64
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	3332      	adds	r3, #50	; 0x32
 8003ca0:	4a65      	ldr	r2, [pc, #404]	; (8003e38 <UART_SetConfig+0x384>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	f003 0207 	and.w	r2, r3, #7
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4442      	add	r2, r8
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	e26f      	b.n	8004196 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cb6:	f7ff fb35 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8003cba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	461d      	mov	r5, r3
 8003cc0:	f04f 0600 	mov.w	r6, #0
 8003cc4:	46a8      	mov	r8, r5
 8003cc6:	46b1      	mov	r9, r6
 8003cc8:	eb18 0308 	adds.w	r3, r8, r8
 8003ccc:	eb49 0409 	adc.w	r4, r9, r9
 8003cd0:	4698      	mov	r8, r3
 8003cd2:	46a1      	mov	r9, r4
 8003cd4:	eb18 0805 	adds.w	r8, r8, r5
 8003cd8:	eb49 0906 	adc.w	r9, r9, r6
 8003cdc:	f04f 0100 	mov.w	r1, #0
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ce8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cf0:	4688      	mov	r8, r1
 8003cf2:	4691      	mov	r9, r2
 8003cf4:	eb18 0005 	adds.w	r0, r8, r5
 8003cf8:	eb49 0106 	adc.w	r1, r9, r6
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	461d      	mov	r5, r3
 8003d02:	f04f 0600 	mov.w	r6, #0
 8003d06:	196b      	adds	r3, r5, r5
 8003d08:	eb46 0406 	adc.w	r4, r6, r6
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4623      	mov	r3, r4
 8003d10:	f7fc fad6 	bl	80002c0 <__aeabi_uldivmod>
 8003d14:	4603      	mov	r3, r0
 8003d16:	460c      	mov	r4, r1
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b47      	ldr	r3, [pc, #284]	; (8003e38 <UART_SetConfig+0x384>)
 8003d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	461d      	mov	r5, r3
 8003d2a:	f04f 0600 	mov.w	r6, #0
 8003d2e:	46a9      	mov	r9, r5
 8003d30:	46b2      	mov	sl, r6
 8003d32:	eb19 0309 	adds.w	r3, r9, r9
 8003d36:	eb4a 040a 	adc.w	r4, sl, sl
 8003d3a:	4699      	mov	r9, r3
 8003d3c:	46a2      	mov	sl, r4
 8003d3e:	eb19 0905 	adds.w	r9, r9, r5
 8003d42:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d46:	f04f 0100 	mov.w	r1, #0
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d5a:	4689      	mov	r9, r1
 8003d5c:	4692      	mov	sl, r2
 8003d5e:	eb19 0005 	adds.w	r0, r9, r5
 8003d62:	eb4a 0106 	adc.w	r1, sl, r6
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	461d      	mov	r5, r3
 8003d6c:	f04f 0600 	mov.w	r6, #0
 8003d70:	196b      	adds	r3, r5, r5
 8003d72:	eb46 0406 	adc.w	r4, r6, r6
 8003d76:	461a      	mov	r2, r3
 8003d78:	4623      	mov	r3, r4
 8003d7a:	f7fc faa1 	bl	80002c0 <__aeabi_uldivmod>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	460c      	mov	r4, r1
 8003d82:	461a      	mov	r2, r3
 8003d84:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <UART_SetConfig+0x384>)
 8003d86:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	2164      	movs	r1, #100	; 0x64
 8003d8e:	fb01 f303 	mul.w	r3, r1, r3
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	3332      	adds	r3, #50	; 0x32
 8003d98:	4a27      	ldr	r2, [pc, #156]	; (8003e38 <UART_SetConfig+0x384>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003da6:	4498      	add	r8, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	461d      	mov	r5, r3
 8003dac:	f04f 0600 	mov.w	r6, #0
 8003db0:	46a9      	mov	r9, r5
 8003db2:	46b2      	mov	sl, r6
 8003db4:	eb19 0309 	adds.w	r3, r9, r9
 8003db8:	eb4a 040a 	adc.w	r4, sl, sl
 8003dbc:	4699      	mov	r9, r3
 8003dbe:	46a2      	mov	sl, r4
 8003dc0:	eb19 0905 	adds.w	r9, r9, r5
 8003dc4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dc8:	f04f 0100 	mov.w	r1, #0
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ddc:	4689      	mov	r9, r1
 8003dde:	4692      	mov	sl, r2
 8003de0:	eb19 0005 	adds.w	r0, r9, r5
 8003de4:	eb4a 0106 	adc.w	r1, sl, r6
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	461d      	mov	r5, r3
 8003dee:	f04f 0600 	mov.w	r6, #0
 8003df2:	196b      	adds	r3, r5, r5
 8003df4:	eb46 0406 	adc.w	r4, r6, r6
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4623      	mov	r3, r4
 8003dfc:	f7fc fa60 	bl	80002c0 <__aeabi_uldivmod>
 8003e00:	4603      	mov	r3, r0
 8003e02:	460c      	mov	r4, r1
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <UART_SetConfig+0x384>)
 8003e08:	fba3 1302 	umull	r1, r3, r3, r2
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	2164      	movs	r1, #100	; 0x64
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	3332      	adds	r3, #50	; 0x32
 8003e1a:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <UART_SetConfig+0x384>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	f003 0207 	and.w	r2, r3, #7
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4442      	add	r2, r8
 8003e2c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003e2e:	e1b2      	b.n	8004196 <UART_SetConfig+0x6e2>
 8003e30:	40011000 	.word	0x40011000
 8003e34:	40011400 	.word	0x40011400
 8003e38:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4ad7      	ldr	r2, [pc, #860]	; (80041a0 <UART_SetConfig+0x6ec>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d005      	beq.n	8003e52 <UART_SetConfig+0x39e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4ad6      	ldr	r2, [pc, #856]	; (80041a4 <UART_SetConfig+0x6f0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	f040 80d1 	bne.w	8003ff4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e52:	f7ff fa7b 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8003e56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	469a      	mov	sl, r3
 8003e5c:	f04f 0b00 	mov.w	fp, #0
 8003e60:	46d0      	mov	r8, sl
 8003e62:	46d9      	mov	r9, fp
 8003e64:	eb18 0308 	adds.w	r3, r8, r8
 8003e68:	eb49 0409 	adc.w	r4, r9, r9
 8003e6c:	4698      	mov	r8, r3
 8003e6e:	46a1      	mov	r9, r4
 8003e70:	eb18 080a 	adds.w	r8, r8, sl
 8003e74:	eb49 090b 	adc.w	r9, r9, fp
 8003e78:	f04f 0100 	mov.w	r1, #0
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e8c:	4688      	mov	r8, r1
 8003e8e:	4691      	mov	r9, r2
 8003e90:	eb1a 0508 	adds.w	r5, sl, r8
 8003e94:	eb4b 0609 	adc.w	r6, fp, r9
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	f04f 0400 	mov.w	r4, #0
 8003eaa:	0094      	lsls	r4, r2, #2
 8003eac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eb0:	008b      	lsls	r3, r1, #2
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4623      	mov	r3, r4
 8003eb6:	4628      	mov	r0, r5
 8003eb8:	4631      	mov	r1, r6
 8003eba:	f7fc fa01 	bl	80002c0 <__aeabi_uldivmod>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4bb8      	ldr	r3, [pc, #736]	; (80041a8 <UART_SetConfig+0x6f4>)
 8003ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	469b      	mov	fp, r3
 8003ed4:	f04f 0c00 	mov.w	ip, #0
 8003ed8:	46d9      	mov	r9, fp
 8003eda:	46e2      	mov	sl, ip
 8003edc:	eb19 0309 	adds.w	r3, r9, r9
 8003ee0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ee4:	4699      	mov	r9, r3
 8003ee6:	46a2      	mov	sl, r4
 8003ee8:	eb19 090b 	adds.w	r9, r9, fp
 8003eec:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003efc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f04:	4689      	mov	r9, r1
 8003f06:	4692      	mov	sl, r2
 8003f08:	eb1b 0509 	adds.w	r5, fp, r9
 8003f0c:	eb4c 060a 	adc.w	r6, ip, sl
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4619      	mov	r1, r3
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	f04f 0400 	mov.w	r4, #0
 8003f22:	0094      	lsls	r4, r2, #2
 8003f24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f28:	008b      	lsls	r3, r1, #2
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4623      	mov	r3, r4
 8003f2e:	4628      	mov	r0, r5
 8003f30:	4631      	mov	r1, r6
 8003f32:	f7fc f9c5 	bl	80002c0 <__aeabi_uldivmod>
 8003f36:	4603      	mov	r3, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b9a      	ldr	r3, [pc, #616]	; (80041a8 <UART_SetConfig+0x6f4>)
 8003f3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f42:	095b      	lsrs	r3, r3, #5
 8003f44:	2164      	movs	r1, #100	; 0x64
 8003f46:	fb01 f303 	mul.w	r3, r1, r3
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	3332      	adds	r3, #50	; 0x32
 8003f50:	4a95      	ldr	r2, [pc, #596]	; (80041a8 <UART_SetConfig+0x6f4>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	095b      	lsrs	r3, r3, #5
 8003f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f5c:	4498      	add	r8, r3
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	469b      	mov	fp, r3
 8003f62:	f04f 0c00 	mov.w	ip, #0
 8003f66:	46d9      	mov	r9, fp
 8003f68:	46e2      	mov	sl, ip
 8003f6a:	eb19 0309 	adds.w	r3, r9, r9
 8003f6e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f72:	4699      	mov	r9, r3
 8003f74:	46a2      	mov	sl, r4
 8003f76:	eb19 090b 	adds.w	r9, r9, fp
 8003f7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f7e:	f04f 0100 	mov.w	r1, #0
 8003f82:	f04f 0200 	mov.w	r2, #0
 8003f86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f92:	4689      	mov	r9, r1
 8003f94:	4692      	mov	sl, r2
 8003f96:	eb1b 0509 	adds.w	r5, fp, r9
 8003f9a:	eb4c 060a 	adc.w	r6, ip, sl
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	f04f 0400 	mov.w	r4, #0
 8003fb0:	0094      	lsls	r4, r2, #2
 8003fb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fb6:	008b      	lsls	r3, r1, #2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	4623      	mov	r3, r4
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	4631      	mov	r1, r6
 8003fc0:	f7fc f97e 	bl	80002c0 <__aeabi_uldivmod>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4b77      	ldr	r3, [pc, #476]	; (80041a8 <UART_SetConfig+0x6f4>)
 8003fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	2164      	movs	r1, #100	; 0x64
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	3332      	adds	r3, #50	; 0x32
 8003fde:	4a72      	ldr	r2, [pc, #456]	; (80041a8 <UART_SetConfig+0x6f4>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	f003 020f 	and.w	r2, r3, #15
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4442      	add	r2, r8
 8003ff0:	609a      	str	r2, [r3, #8]
 8003ff2:	e0d0      	b.n	8004196 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ff4:	f7ff f996 	bl	8003324 <HAL_RCC_GetPCLK1Freq>
 8003ff8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	469a      	mov	sl, r3
 8003ffe:	f04f 0b00 	mov.w	fp, #0
 8004002:	46d0      	mov	r8, sl
 8004004:	46d9      	mov	r9, fp
 8004006:	eb18 0308 	adds.w	r3, r8, r8
 800400a:	eb49 0409 	adc.w	r4, r9, r9
 800400e:	4698      	mov	r8, r3
 8004010:	46a1      	mov	r9, r4
 8004012:	eb18 080a 	adds.w	r8, r8, sl
 8004016:	eb49 090b 	adc.w	r9, r9, fp
 800401a:	f04f 0100 	mov.w	r1, #0
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004026:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800402a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800402e:	4688      	mov	r8, r1
 8004030:	4691      	mov	r9, r2
 8004032:	eb1a 0508 	adds.w	r5, sl, r8
 8004036:	eb4b 0609 	adc.w	r6, fp, r9
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4619      	mov	r1, r3
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	f04f 0300 	mov.w	r3, #0
 8004048:	f04f 0400 	mov.w	r4, #0
 800404c:	0094      	lsls	r4, r2, #2
 800404e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004052:	008b      	lsls	r3, r1, #2
 8004054:	461a      	mov	r2, r3
 8004056:	4623      	mov	r3, r4
 8004058:	4628      	mov	r0, r5
 800405a:	4631      	mov	r1, r6
 800405c:	f7fc f930 	bl	80002c0 <__aeabi_uldivmod>
 8004060:	4603      	mov	r3, r0
 8004062:	460c      	mov	r4, r1
 8004064:	461a      	mov	r2, r3
 8004066:	4b50      	ldr	r3, [pc, #320]	; (80041a8 <UART_SetConfig+0x6f4>)
 8004068:	fba3 2302 	umull	r2, r3, r3, r2
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	469b      	mov	fp, r3
 8004076:	f04f 0c00 	mov.w	ip, #0
 800407a:	46d9      	mov	r9, fp
 800407c:	46e2      	mov	sl, ip
 800407e:	eb19 0309 	adds.w	r3, r9, r9
 8004082:	eb4a 040a 	adc.w	r4, sl, sl
 8004086:	4699      	mov	r9, r3
 8004088:	46a2      	mov	sl, r4
 800408a:	eb19 090b 	adds.w	r9, r9, fp
 800408e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004092:	f04f 0100 	mov.w	r1, #0
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800409e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040a6:	4689      	mov	r9, r1
 80040a8:	4692      	mov	sl, r2
 80040aa:	eb1b 0509 	adds.w	r5, fp, r9
 80040ae:	eb4c 060a 	adc.w	r6, ip, sl
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	4619      	mov	r1, r3
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	f04f 0400 	mov.w	r4, #0
 80040c4:	0094      	lsls	r4, r2, #2
 80040c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040ca:	008b      	lsls	r3, r1, #2
 80040cc:	461a      	mov	r2, r3
 80040ce:	4623      	mov	r3, r4
 80040d0:	4628      	mov	r0, r5
 80040d2:	4631      	mov	r1, r6
 80040d4:	f7fc f8f4 	bl	80002c0 <__aeabi_uldivmod>
 80040d8:	4603      	mov	r3, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	461a      	mov	r2, r3
 80040de:	4b32      	ldr	r3, [pc, #200]	; (80041a8 <UART_SetConfig+0x6f4>)
 80040e0:	fba3 1302 	umull	r1, r3, r3, r2
 80040e4:	095b      	lsrs	r3, r3, #5
 80040e6:	2164      	movs	r1, #100	; 0x64
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	3332      	adds	r3, #50	; 0x32
 80040f2:	4a2d      	ldr	r2, [pc, #180]	; (80041a8 <UART_SetConfig+0x6f4>)
 80040f4:	fba2 2303 	umull	r2, r3, r2, r3
 80040f8:	095b      	lsrs	r3, r3, #5
 80040fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040fe:	4498      	add	r8, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	469b      	mov	fp, r3
 8004104:	f04f 0c00 	mov.w	ip, #0
 8004108:	46d9      	mov	r9, fp
 800410a:	46e2      	mov	sl, ip
 800410c:	eb19 0309 	adds.w	r3, r9, r9
 8004110:	eb4a 040a 	adc.w	r4, sl, sl
 8004114:	4699      	mov	r9, r3
 8004116:	46a2      	mov	sl, r4
 8004118:	eb19 090b 	adds.w	r9, r9, fp
 800411c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004120:	f04f 0100 	mov.w	r1, #0
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800412c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004130:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004134:	4689      	mov	r9, r1
 8004136:	4692      	mov	sl, r2
 8004138:	eb1b 0509 	adds.w	r5, fp, r9
 800413c:	eb4c 060a 	adc.w	r6, ip, sl
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	4619      	mov	r1, r3
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	f04f 0400 	mov.w	r4, #0
 8004152:	0094      	lsls	r4, r2, #2
 8004154:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004158:	008b      	lsls	r3, r1, #2
 800415a:	461a      	mov	r2, r3
 800415c:	4623      	mov	r3, r4
 800415e:	4628      	mov	r0, r5
 8004160:	4631      	mov	r1, r6
 8004162:	f7fc f8ad 	bl	80002c0 <__aeabi_uldivmod>
 8004166:	4603      	mov	r3, r0
 8004168:	460c      	mov	r4, r1
 800416a:	461a      	mov	r2, r3
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <UART_SetConfig+0x6f4>)
 800416e:	fba3 1302 	umull	r1, r3, r3, r2
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2164      	movs	r1, #100	; 0x64
 8004176:	fb01 f303 	mul.w	r3, r1, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	3332      	adds	r3, #50	; 0x32
 8004180:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <UART_SetConfig+0x6f4>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4442      	add	r2, r8
 8004192:	609a      	str	r2, [r3, #8]
}
 8004194:	e7ff      	b.n	8004196 <UART_SetConfig+0x6e2>
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a0:	40011000 	.word	0x40011000
 80041a4:	40011400 	.word	0x40011400
 80041a8:	51eb851f 	.word	0x51eb851f

080041ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80041b2:	2100      	movs	r1, #0
 80041b4:	2000      	movs	r0, #0
 80041b6:	f007 fa95 	bl	800b6e4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80041ba:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <MX_LWIP_Init+0xb8>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80041c0:	4b29      	ldr	r3, [pc, #164]	; (8004268 <MX_LWIP_Init+0xbc>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80041c6:	4b29      	ldr	r3, [pc, #164]	; (800426c <MX_LWIP_Init+0xc0>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80041cc:	4b28      	ldr	r3, [pc, #160]	; (8004270 <MX_LWIP_Init+0xc4>)
 80041ce:	9302      	str	r3, [sp, #8]
 80041d0:	4b28      	ldr	r3, [pc, #160]	; (8004274 <MX_LWIP_Init+0xc8>)
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	2300      	movs	r3, #0
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	4b24      	ldr	r3, [pc, #144]	; (800426c <MX_LWIP_Init+0xc0>)
 80041da:	4a23      	ldr	r2, [pc, #140]	; (8004268 <MX_LWIP_Init+0xbc>)
 80041dc:	4921      	ldr	r1, [pc, #132]	; (8004264 <MX_LWIP_Init+0xb8>)
 80041de:	4826      	ldr	r0, [pc, #152]	; (8004278 <MX_LWIP_Init+0xcc>)
 80041e0:	f009 faf2 	bl	800d7c8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80041e4:	4824      	ldr	r0, [pc, #144]	; (8004278 <MX_LWIP_Init+0xcc>)
 80041e6:	f009 fca9 	bl	800db3c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80041ea:	4b23      	ldr	r3, [pc, #140]	; (8004278 <MX_LWIP_Init+0xcc>)
 80041ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80041f0:	089b      	lsrs	r3, r3, #2
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80041fc:	481e      	ldr	r0, [pc, #120]	; (8004278 <MX_LWIP_Init+0xcc>)
 80041fe:	f009 fcad 	bl	800db5c <netif_set_up>
 8004202:	e002      	b.n	800420a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004204:	481c      	ldr	r0, [pc, #112]	; (8004278 <MX_LWIP_Init+0xcc>)
 8004206:	f009 fd15 	bl	800dc34 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800420a:	491c      	ldr	r1, [pc, #112]	; (800427c <MX_LWIP_Init+0xd0>)
 800420c:	481a      	ldr	r0, [pc, #104]	; (8004278 <MX_LWIP_Init+0xcc>)
 800420e:	f009 fdab 	bl	800dd68 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8004212:	2200      	movs	r2, #0
 8004214:	2101      	movs	r1, #1
 8004216:	2001      	movs	r0, #1
 8004218:	f000 ff1e 	bl	8005058 <osSemaphoreNew>
 800421c:	4602      	mov	r2, r0
 800421e:	4b18      	ldr	r3, [pc, #96]	; (8004280 <MX_LWIP_Init+0xd4>)
 8004220:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8004222:	4b18      	ldr	r3, [pc, #96]	; (8004284 <MX_LWIP_Init+0xd8>)
 8004224:	4a14      	ldr	r2, [pc, #80]	; (8004278 <MX_LWIP_Init+0xcc>)
 8004226:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004228:	4b15      	ldr	r3, [pc, #84]	; (8004280 <MX_LWIP_Init+0xd4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a15      	ldr	r2, [pc, #84]	; (8004284 <MX_LWIP_Init+0xd8>)
 800422e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004230:	2224      	movs	r2, #36	; 0x24
 8004232:	2100      	movs	r1, #0
 8004234:	4814      	ldr	r0, [pc, #80]	; (8004288 <MX_LWIP_Init+0xdc>)
 8004236:	f015 fe76 	bl	8019f26 <memset>
  attributes.name = "LinkThr";
 800423a:	4b13      	ldr	r3, [pc, #76]	; (8004288 <MX_LWIP_Init+0xdc>)
 800423c:	4a13      	ldr	r2, [pc, #76]	; (800428c <MX_LWIP_Init+0xe0>)
 800423e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004240:	4b11      	ldr	r3, [pc, #68]	; (8004288 <MX_LWIP_Init+0xdc>)
 8004242:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004246:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004248:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <MX_LWIP_Init+0xdc>)
 800424a:	2210      	movs	r2, #16
 800424c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 800424e:	4a0e      	ldr	r2, [pc, #56]	; (8004288 <MX_LWIP_Init+0xdc>)
 8004250:	490c      	ldr	r1, [pc, #48]	; (8004284 <MX_LWIP_Init+0xd8>)
 8004252:	480f      	ldr	r0, [pc, #60]	; (8004290 <MX_LWIP_Init+0xe4>)
 8004254:	f000 fce4 	bl	8004c20 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8004258:	4807      	ldr	r0, [pc, #28]	; (8004278 <MX_LWIP_Init+0xcc>)
 800425a:	f011 fe49 	bl	8015ef0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800425e:	bf00      	nop
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20010638 	.word	0x20010638
 8004268:	2001063c 	.word	0x2001063c
 800426c:	20010640 	.word	0x20010640
 8004270:	0800b5f5 	.word	0x0800b5f5
 8004274:	080048fd 	.word	0x080048fd
 8004278:	20010600 	.word	0x20010600
 800427c:	080049e1 	.word	0x080049e1
 8004280:	20000128 	.word	0x20000128
 8004284:	200105d4 	.word	0x200105d4
 8004288:	200105dc 	.word	0x200105dc
 800428c:	0801b2b4 	.word	0x0801b2b4
 8004290:	08004969 	.word	0x08004969

08004294 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08e      	sub	sp, #56	; 0x38
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800429c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	609a      	str	r2, [r3, #8]
 80042a8:	60da      	str	r2, [r3, #12]
 80042aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a59      	ldr	r2, [pc, #356]	; (8004418 <HAL_ETH_MspInit+0x184>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	f040 80ac 	bne.w	8004410 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80042b8:	2300      	movs	r3, #0
 80042ba:	623b      	str	r3, [r7, #32]
 80042bc:	4b57      	ldr	r3, [pc, #348]	; (800441c <HAL_ETH_MspInit+0x188>)
 80042be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c0:	4a56      	ldr	r2, [pc, #344]	; (800441c <HAL_ETH_MspInit+0x188>)
 80042c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042c6:	6313      	str	r3, [r2, #48]	; 0x30
 80042c8:	4b54      	ldr	r3, [pc, #336]	; (800441c <HAL_ETH_MspInit+0x188>)
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d0:	623b      	str	r3, [r7, #32]
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
 80042d8:	4b50      	ldr	r3, [pc, #320]	; (800441c <HAL_ETH_MspInit+0x188>)
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	4a4f      	ldr	r2, [pc, #316]	; (800441c <HAL_ETH_MspInit+0x188>)
 80042de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80042e2:	6313      	str	r3, [r2, #48]	; 0x30
 80042e4:	4b4d      	ldr	r3, [pc, #308]	; (800441c <HAL_ETH_MspInit+0x188>)
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	2300      	movs	r3, #0
 80042f2:	61bb      	str	r3, [r7, #24]
 80042f4:	4b49      	ldr	r3, [pc, #292]	; (800441c <HAL_ETH_MspInit+0x188>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	4a48      	ldr	r2, [pc, #288]	; (800441c <HAL_ETH_MspInit+0x188>)
 80042fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004300:	4b46      	ldr	r3, [pc, #280]	; (800441c <HAL_ETH_MspInit+0x188>)
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004308:	61bb      	str	r3, [r7, #24]
 800430a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	4b42      	ldr	r3, [pc, #264]	; (800441c <HAL_ETH_MspInit+0x188>)
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	4a41      	ldr	r2, [pc, #260]	; (800441c <HAL_ETH_MspInit+0x188>)
 8004316:	f043 0304 	orr.w	r3, r3, #4
 800431a:	6313      	str	r3, [r2, #48]	; 0x30
 800431c:	4b3f      	ldr	r3, [pc, #252]	; (800441c <HAL_ETH_MspInit+0x188>)
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	617b      	str	r3, [r7, #20]
 8004326:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]
 800432c:	4b3b      	ldr	r3, [pc, #236]	; (800441c <HAL_ETH_MspInit+0x188>)
 800432e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004330:	4a3a      	ldr	r2, [pc, #232]	; (800441c <HAL_ETH_MspInit+0x188>)
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	6313      	str	r3, [r2, #48]	; 0x30
 8004338:	4b38      	ldr	r3, [pc, #224]	; (800441c <HAL_ETH_MspInit+0x188>)
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	4b34      	ldr	r3, [pc, #208]	; (800441c <HAL_ETH_MspInit+0x188>)
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	4a33      	ldr	r2, [pc, #204]	; (800441c <HAL_ETH_MspInit+0x188>)
 800434e:	f043 0302 	orr.w	r3, r3, #2
 8004352:	6313      	str	r3, [r2, #48]	; 0x30
 8004354:	4b31      	ldr	r3, [pc, #196]	; (800441c <HAL_ETH_MspInit+0x188>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	60fb      	str	r3, [r7, #12]
 800435e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004360:	2300      	movs	r3, #0
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	4b2d      	ldr	r3, [pc, #180]	; (800441c <HAL_ETH_MspInit+0x188>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	4a2c      	ldr	r2, [pc, #176]	; (800441c <HAL_ETH_MspInit+0x188>)
 800436a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800436e:	6313      	str	r3, [r2, #48]	; 0x30
 8004370:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_ETH_MspInit+0x188>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800437c:	2332      	movs	r3, #50	; 0x32
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004380:	2302      	movs	r3, #2
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004384:	2300      	movs	r3, #0
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004388:	2303      	movs	r3, #3
 800438a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800438c:	230b      	movs	r3, #11
 800438e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004394:	4619      	mov	r1, r3
 8004396:	4822      	ldr	r0, [pc, #136]	; (8004420 <HAL_ETH_MspInit+0x18c>)
 8004398:	f7fe f9c6 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800439c:	2386      	movs	r3, #134	; 0x86
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a0:	2302      	movs	r3, #2
 80043a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043a8:	2303      	movs	r3, #3
 80043aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043ac:	230b      	movs	r3, #11
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043b4:	4619      	mov	r1, r3
 80043b6:	481b      	ldr	r0, [pc, #108]	; (8004424 <HAL_ETH_MspInit+0x190>)
 80043b8:	f7fe f9b6 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80043bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c2:	2302      	movs	r3, #2
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ca:	2303      	movs	r3, #3
 80043cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043ce:	230b      	movs	r3, #11
 80043d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80043d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043d6:	4619      	mov	r1, r3
 80043d8:	4813      	ldr	r0, [pc, #76]	; (8004428 <HAL_ETH_MspInit+0x194>)
 80043da:	f7fe f9a5 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80043de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e4:	2302      	movs	r3, #2
 80043e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ec:	2303      	movs	r3, #3
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80043f0:	230b      	movs	r3, #11
 80043f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043f8:	4619      	mov	r1, r3
 80043fa:	480c      	ldr	r0, [pc, #48]	; (800442c <HAL_ETH_MspInit+0x198>)
 80043fc:	f7fe f994 	bl	8002728 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 10, 0);
 8004400:	2200      	movs	r2, #0
 8004402:	210a      	movs	r1, #10
 8004404:	203d      	movs	r0, #61	; 0x3d
 8004406:	f7fc ffbf 	bl	8001388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800440a:	203d      	movs	r0, #61	; 0x3d
 800440c:	f7fc ffd8 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004410:	bf00      	nop
 8004412:	3738      	adds	r7, #56	; 0x38
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40028000 	.word	0x40028000
 800441c:	40023800 	.word	0x40023800
 8004420:	40020800 	.word	0x40020800
 8004424:	40020000 	.word	0x40020000
 8004428:	40020400 	.word	0x40020400
 800442c:	40021800 	.word	0x40021800

08004430 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004438:	4b04      	ldr	r3, [pc, #16]	; (800444c <HAL_ETH_RxCpltCallback+0x1c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f000 ff0f 	bl	8005260 <osSemaphoreRelease>
}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	2000012c 	.word	0x2000012c

08004450 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b090      	sub	sp, #64	; 0x40
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800445c:	4b5d      	ldr	r3, [pc, #372]	; (80045d4 <low_level_init+0x184>)
 800445e:	4a5e      	ldr	r2, [pc, #376]	; (80045d8 <low_level_init+0x188>)
 8004460:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004462:	4b5c      	ldr	r3, [pc, #368]	; (80045d4 <low_level_init+0x184>)
 8004464:	2201      	movs	r2, #1
 8004466:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004468:	4b5a      	ldr	r3, [pc, #360]	; (80045d4 <low_level_init+0x184>)
 800446a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800446e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004470:	4b58      	ldr	r3, [pc, #352]	; (80045d4 <low_level_init+0x184>)
 8004472:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004476:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004478:	4b56      	ldr	r3, [pc, #344]	; (80045d4 <low_level_init+0x184>)
 800447a:	2200      	movs	r2, #0
 800447c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800447e:	2300      	movs	r3, #0
 8004480:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8004482:	2380      	movs	r3, #128	; 0x80
 8004484:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8004486:	23e1      	movs	r3, #225	; 0xe1
 8004488:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800448a:	2300      	movs	r3, #0
 800448c:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800448e:	2300      	movs	r3, #0
 8004490:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8004492:	2300      	movs	r3, #0
 8004494:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8004496:	4a4f      	ldr	r2, [pc, #316]	; (80045d4 <low_level_init+0x184>)
 8004498:	f107 030c 	add.w	r3, r7, #12
 800449c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800449e:	4b4d      	ldr	r3, [pc, #308]	; (80045d4 <low_level_init+0x184>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80044a4:	4b4b      	ldr	r3, [pc, #300]	; (80045d4 <low_level_init+0x184>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80044aa:	4b4a      	ldr	r3, [pc, #296]	; (80045d4 <low_level_init+0x184>)
 80044ac:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80044b0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80044b2:	4848      	ldr	r0, [pc, #288]	; (80045d4 <low_level_init+0x184>)
 80044b4:	f7fc ff92 	bl	80013dc <HAL_ETH_Init>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80044be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d108      	bne.n	80044d8 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044cc:	f043 0304 	orr.w	r3, r3, #4
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80044d8:	2304      	movs	r3, #4
 80044da:	4a40      	ldr	r2, [pc, #256]	; (80045dc <low_level_init+0x18c>)
 80044dc:	4940      	ldr	r1, [pc, #256]	; (80045e0 <low_level_init+0x190>)
 80044de:	483d      	ldr	r0, [pc, #244]	; (80045d4 <low_level_init+0x184>)
 80044e0:	f7fd f91a 	bl	8001718 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80044e4:	2304      	movs	r3, #4
 80044e6:	4a3f      	ldr	r2, [pc, #252]	; (80045e4 <low_level_init+0x194>)
 80044e8:	493f      	ldr	r1, [pc, #252]	; (80045e8 <low_level_init+0x198>)
 80044ea:	483a      	ldr	r0, [pc, #232]	; (80045d4 <low_level_init+0x184>)
 80044ec:	f7fd f97d 	bl	80017ea <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2206      	movs	r2, #6
 80044f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80044f8:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <low_level_init+0x184>)
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004504:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <low_level_init+0x184>)
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	785a      	ldrb	r2, [r3, #1]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004510:	4b30      	ldr	r3, [pc, #192]	; (80045d4 <low_level_init+0x184>)
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	789a      	ldrb	r2, [r3, #2]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800451c:	4b2d      	ldr	r3, [pc, #180]	; (80045d4 <low_level_init+0x184>)
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	78da      	ldrb	r2, [r3, #3]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004528:	4b2a      	ldr	r3, [pc, #168]	; (80045d4 <low_level_init+0x184>)
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	791a      	ldrb	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004534:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <low_level_init+0x184>)
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	795a      	ldrb	r2, [r3, #5]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004546:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800454e:	f043 030a 	orr.w	r3, r3, #10
 8004552:	b2da      	uxtb	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800455a:	2200      	movs	r2, #0
 800455c:	2101      	movs	r1, #1
 800455e:	2001      	movs	r0, #1
 8004560:	f000 fd7a 	bl	8005058 <osSemaphoreNew>
 8004564:	4602      	mov	r2, r0
 8004566:	4b21      	ldr	r3, [pc, #132]	; (80045ec <low_level_init+0x19c>)
 8004568:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800456a:	f107 0314 	add.w	r3, r7, #20
 800456e:	2224      	movs	r2, #36	; 0x24
 8004570:	2100      	movs	r1, #0
 8004572:	4618      	mov	r0, r3
 8004574:	f015 fcd7 	bl	8019f26 <memset>
  attributes.name = "EthIf";
 8004578:	4b1d      	ldr	r3, [pc, #116]	; (80045f0 <low_level_init+0x1a0>)
 800457a:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800457c:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8004582:	2330      	movs	r3, #48	; 0x30
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004586:	f107 0314 	add.w	r3, r7, #20
 800458a:	461a      	mov	r2, r3
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4819      	ldr	r0, [pc, #100]	; (80045f4 <low_level_init+0x1a4>)
 8004590:	f000 fb46 	bl	8004c20 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004594:	480f      	ldr	r0, [pc, #60]	; (80045d4 <low_level_init+0x184>)
 8004596:	f7fd fc50 	bl	8001e3a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800459a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800459e:	461a      	mov	r2, r3
 80045a0:	211d      	movs	r1, #29
 80045a2:	480c      	ldr	r0, [pc, #48]	; (80045d4 <low_level_init+0x184>)
 80045a4:	f7fd fb7b 	bl	8001c9e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	f043 030b 	orr.w	r3, r3, #11
 80045ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	461a      	mov	r2, r3
 80045b4:	211d      	movs	r1, #29
 80045b6:	4807      	ldr	r0, [pc, #28]	; (80045d4 <low_level_init+0x184>)
 80045b8:	f7fd fbd9 	bl	8001d6e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80045bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045c0:	461a      	mov	r2, r3
 80045c2:	211d      	movs	r1, #29
 80045c4:	4803      	ldr	r0, [pc, #12]	; (80045d4 <low_level_init+0x184>)
 80045c6:	f7fd fb6a 	bl	8001c9e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80045ca:	bf00      	nop
 80045cc:	3740      	adds	r7, #64	; 0x40
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20011f14 	.word	0x20011f14
 80045d8:	40028000 	.word	0x40028000
 80045dc:	20011f5c 	.word	0x20011f5c
 80045e0:	20010644 	.word	0x20010644
 80045e4:	200106c4 	.word	0x200106c4
 80045e8:	20011e94 	.word	0x20011e94
 80045ec:	2000012c 	.word	0x2000012c
 80045f0:	0801b2bc 	.word	0x0801b2bc
 80045f4:	0800489d 	.word	0x0800489d

080045f8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	; 0x28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8004602:	4b4b      	ldr	r3, [pc, #300]	; (8004730 <low_level_output+0x138>)
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800461a:	4b45      	ldr	r3, [pc, #276]	; (8004730 <low_level_output+0x138>)
 800461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	623b      	str	r3, [r7, #32]
 8004628:	e05a      	b.n	80046e0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	da03      	bge.n	800463a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8004632:	23f8      	movs	r3, #248	; 0xf8
 8004634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004638:	e05c      	b.n	80046f4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	895b      	ldrh	r3, [r3, #10]
 800463e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004644:	e02f      	b.n	80046a6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004646:	69fa      	ldr	r2, [r7, #28]
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	18d0      	adds	r0, r2, r3
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	18d1      	adds	r1, r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800465a:	3304      	adds	r3, #4
 800465c:	461a      	mov	r2, r3
 800465e:	f015 fc3e 	bl	8019ede <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	da03      	bge.n	8004678 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004670:	23f8      	movs	r3, #248	; 0xf8
 8004672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004676:	e03d      	b.n	80046f4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4413      	add	r3, r2
 8004684:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004688:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004694:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80046a0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4413      	add	r3, r2
 80046ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d8c8      	bhi.n	8004646 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	18d0      	adds	r0, r2, r3
 80046ba:	6a3b      	ldr	r3, [r7, #32]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4413      	add	r3, r2
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4619      	mov	r1, r3
 80046c6:	f015 fc0a 	bl	8019ede <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	623b      	str	r3, [r7, #32]
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1a1      	bne.n	800462a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80046e6:	6979      	ldr	r1, [r7, #20]
 80046e8:	4811      	ldr	r0, [pc, #68]	; (8004730 <low_level_output+0x138>)
 80046ea:	f7fd f8eb 	bl	80018c4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80046f4:	4b0e      	ldr	r3, [pc, #56]	; (8004730 <low_level_output+0x138>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fc:	3314      	adds	r3, #20
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00d      	beq.n	8004724 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004708:	4b09      	ldr	r3, [pc, #36]	; (8004730 <low_level_output+0x138>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004710:	3314      	adds	r3, #20
 8004712:	2220      	movs	r2, #32
 8004714:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004716:	4b06      	ldr	r3, [pc, #24]	; (8004730 <low_level_output+0x138>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471e:	3304      	adds	r3, #4
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004728:	4618      	mov	r0, r3
 800472a:	3728      	adds	r7, #40	; 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20011f14 	.word	0x20011f14

08004734 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08c      	sub	sp, #48	; 0x30
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004758:	484f      	ldr	r0, [pc, #316]	; (8004898 <low_level_input+0x164>)
 800475a:	f7fd f99d 	bl	8001a98 <HAL_ETH_GetReceivedFrame_IT>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <low_level_input+0x34>

    return NULL;
 8004764:	2300      	movs	r3, #0
 8004766:	e092      	b.n	800488e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004768:	4b4b      	ldr	r3, [pc, #300]	; (8004898 <low_level_input+0x164>)
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800476e:	4b4a      	ldr	r3, [pc, #296]	; (8004898 <low_level_input+0x164>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004774:	89fb      	ldrh	r3, [r7, #14]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800477a:	89fb      	ldrh	r3, [r7, #14]
 800477c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004780:	4619      	mov	r1, r3
 8004782:	2000      	movs	r0, #0
 8004784:	f009 fbba 	bl	800defc <pbuf_alloc>
 8004788:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d04b      	beq.n	8004828 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004790:	4b41      	ldr	r3, [pc, #260]	; (8004898 <low_level_input+0x164>)
 8004792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004794:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
 800479e:	e040      	b.n	8004822 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	895b      	ldrh	r3, [r3, #10]
 80047a4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80047aa:	e021      	b.n	80047f0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	18d0      	adds	r0, r2, r3
 80047b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	18d1      	adds	r1, r2, r3
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80047c0:	3304      	adds	r3, #4
 80047c2:	461a      	mov	r2, r3
 80047c4:	f015 fb8b 	bl	8019ede <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80047c8:	6a3b      	ldr	r3, [r7, #32]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	4413      	add	r3, r2
 80047da:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80047de:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80047ea:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	4413      	add	r3, r2
 80047f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d8d6      	bhi.n	80047ac <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	18d0      	adds	r0, r2, r3
 8004806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	4413      	add	r3, r2
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4619      	mov	r1, r3
 8004810:	f015 fb65 	bl	8019ede <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004814:	69fa      	ldr	r2, [r7, #28]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	4413      	add	r3, r2
 800481a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	2b00      	cmp	r3, #0
 8004826:	d1bb      	bne.n	80047a0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004828:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <low_level_input+0x164>)
 800482a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800482e:	2300      	movs	r3, #0
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	e00b      	b.n	800484c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	3301      	adds	r3, #1
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	4b12      	ldr	r3, [pc, #72]	; (8004898 <low_level_input+0x164>)
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	429a      	cmp	r2, r3
 8004854:	d3ee      	bcc.n	8004834 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <low_level_input+0x164>)
 8004858:	2200      	movs	r2, #0
 800485a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800485c:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <low_level_input+0x164>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004864:	3314      	adds	r3, #20
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00d      	beq.n	800488c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004870:	4b09      	ldr	r3, [pc, #36]	; (8004898 <low_level_input+0x164>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004878:	3314      	adds	r3, #20
 800487a:	2280      	movs	r2, #128	; 0x80
 800487c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800487e:	4b06      	ldr	r3, [pc, #24]	; (8004898 <low_level_input+0x164>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004886:	3308      	adds	r3, #8
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800488c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800488e:	4618      	mov	r0, r3
 8004890:	3730      	adds	r7, #48	; 0x30
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20011f14 	.word	0x20011f14

0800489c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80048a8:	4b12      	ldr	r3, [pc, #72]	; (80048f4 <ethernetif_input+0x58>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f04f 31ff 	mov.w	r1, #4294967295
 80048b0:	4618      	mov	r0, r3
 80048b2:	f000 fc6f 	bl	8005194 <osSemaphoreAcquire>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f5      	bne.n	80048a8 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80048bc:	480e      	ldr	r0, [pc, #56]	; (80048f8 <ethernetif_input+0x5c>)
 80048be:	f015 fa81 	bl	8019dc4 <sys_mutex_lock>
        p = low_level_input( netif );
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f7ff ff36 	bl	8004734 <low_level_input>
 80048c8:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	68f9      	ldr	r1, [r7, #12]
 80048d6:	68b8      	ldr	r0, [r7, #8]
 80048d8:	4798      	blx	r3
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80048e0:	68b8      	ldr	r0, [r7, #8]
 80048e2:	f009 fdeb 	bl	800e4bc <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80048e6:	4804      	ldr	r0, [pc, #16]	; (80048f8 <ethernetif_input+0x5c>)
 80048e8:	f015 fa7b 	bl	8019de2 <sys_mutex_unlock>
      } while(p!=NULL);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1e4      	bne.n	80048bc <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80048f2:	e7d9      	b.n	80048a8 <ethernetif_input+0xc>
 80048f4:	2000012c 	.word	0x2000012c
 80048f8:	2001376c 	.word	0x2001376c

080048fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d106      	bne.n	8004918 <ethernetif_init+0x1c>
 800490a:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <ethernetif_init+0x48>)
 800490c:	f240 223a 	movw	r2, #570	; 0x23a
 8004910:	490d      	ldr	r1, [pc, #52]	; (8004948 <ethernetif_init+0x4c>)
 8004912:	480e      	ldr	r0, [pc, #56]	; (800494c <ethernetif_init+0x50>)
 8004914:	f015 fb10 	bl	8019f38 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2273      	movs	r2, #115	; 0x73
 800491c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2274      	movs	r2, #116	; 0x74
 8004924:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a09      	ldr	r2, [pc, #36]	; (8004950 <ethernetif_init+0x54>)
 800492c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a08      	ldr	r2, [pc, #32]	; (8004954 <ethernetif_init+0x58>)
 8004932:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff fd8b 	bl	8004450 <low_level_init>

  return ERR_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3708      	adds	r7, #8
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	0801b2c4 	.word	0x0801b2c4
 8004948:	0801b2e0 	.word	0x0801b2e0
 800494c:	0801b2f0 	.word	0x0801b2f0
 8004950:	08017df5 	.word	0x08017df5
 8004954:	080045f9 	.word	0x080045f9

08004958 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800495c:	f7fc fc2e 	bl	80011bc <HAL_GetTick>
 8004960:	4603      	mov	r3, r0
}
 8004962:	4618      	mov	r0, r3
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004978:	f107 0308 	add.w	r3, r7, #8
 800497c:	461a      	mov	r2, r3
 800497e:	2101      	movs	r1, #1
 8004980:	4816      	ldr	r0, [pc, #88]	; (80049dc <ethernetif_set_link+0x74>)
 8004982:	f7fd f98c 	bl	8001c9e <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004996:	f003 0304 	and.w	r3, r3, #4
 800499a:	2b00      	cmp	r3, #0
 800499c:	d108      	bne.n	80049b0 <ethernetif_set_link+0x48>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f009 f975 	bl	800dc98 <netif_set_link_up>
 80049ae:	e011      	b.n	80049d4 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049b8:	089b      	lsrs	r3, r3, #2
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <ethernetif_set_link+0x6c>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d104      	bne.n	80049d4 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f009 f99a 	bl	800dd08 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80049d4:	20c8      	movs	r0, #200	; 0xc8
 80049d6:	f000 f9c9 	bl	8004d6c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80049da:	e7cd      	b.n	8004978 <ethernetif_set_link+0x10>
 80049dc:	20011f14 	.word	0x20011f14

080049e0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d05d      	beq.n	8004abe <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004a02:	4b34      	ldr	r3, [pc, #208]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d03f      	beq.n	8004a8a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004a0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a0e:	2100      	movs	r1, #0
 8004a10:	4830      	ldr	r0, [pc, #192]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004a12:	f7fd f9ac 	bl	8001d6e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004a16:	f7fc fbd1 	bl	80011bc <HAL_GetTick>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004a1e:	f107 0308 	add.w	r3, r7, #8
 8004a22:	461a      	mov	r2, r3
 8004a24:	2101      	movs	r1, #1
 8004a26:	482b      	ldr	r0, [pc, #172]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004a28:	f7fd f939 	bl	8001c9e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004a2c:	f7fc fbc6 	bl	80011bc <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a3a:	d828      	bhi.n	8004a8e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0eb      	beq.n	8004a1e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004a46:	f107 0308 	add.w	r3, r7, #8
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	211f      	movs	r1, #31
 8004a4e:	4821      	ldr	r0, [pc, #132]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004a50:	f7fd f925 	bl	8001c9e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d004      	beq.n	8004a68 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004a5e:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a64:	60da      	str	r2, [r3, #12]
 8004a66:	e002      	b.n	8004a6e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004a68:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004a78:	4b16      	ldr	r3, [pc, #88]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	609a      	str	r2, [r3, #8]
 8004a7e:	e016      	b.n	8004aae <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004a80:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004a82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a86:	609a      	str	r2, [r3, #8]
 8004a88:	e011      	b.n	8004aae <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <ethernetif_update_config+0xb0>
          goto error;
 8004a8e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004a90:	4b10      	ldr	r3, [pc, #64]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	08db      	lsrs	r3, r3, #3
 8004a96:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	085b      	lsrs	r3, r3, #1
 8004a9e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	480a      	ldr	r0, [pc, #40]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004aaa:	f7fd f960 	bl	8001d6e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4808      	ldr	r0, [pc, #32]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004ab2:	f7fd fa21 	bl	8001ef8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004ab6:	4807      	ldr	r0, [pc, #28]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004ab8:	f7fd f9bf 	bl	8001e3a <HAL_ETH_Start>
 8004abc:	e002      	b.n	8004ac4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004abe:	4805      	ldr	r0, [pc, #20]	; (8004ad4 <ethernetif_update_config+0xf4>)
 8004ac0:	f7fd f9ea 	bl	8001e98 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f807 	bl	8004ad8 <ethernetif_notify_conn_changed>
}
 8004aca:	bf00      	nop
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20011f14 	.word	0x20011f14

08004ad8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004af0:	bf00      	nop
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b02:	f3ef 8305 	mrs	r3, IPSR
 8004b06:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b08:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10f      	bne.n	8004b2e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b12:	607b      	str	r3, [r7, #4]
  return(result);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b1e:	603b      	str	r3, [r7, #0]
  return(result);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <osKernelInitialize+0x3a>
 8004b26:	4b0e      	ldr	r3, [pc, #56]	; (8004b60 <osKernelInitialize+0x64>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d103      	bne.n	8004b36 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004b2e:	f06f 0305 	mvn.w	r3, #5
 8004b32:	60fb      	str	r3, [r7, #12]
 8004b34:	e00c      	b.n	8004b50 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004b36:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <osKernelInitialize+0x64>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d105      	bne.n	8004b4a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004b3e:	4b08      	ldr	r3, [pc, #32]	; (8004b60 <osKernelInitialize+0x64>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
 8004b48:	e002      	b.n	8004b50 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004b50:	68fb      	ldr	r3, [r7, #12]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000130 	.word	0x20000130

08004b64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b6a:	f3ef 8305 	mrs	r3, IPSR
 8004b6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10f      	bne.n	8004b96 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b76:	f3ef 8310 	mrs	r3, PRIMASK
 8004b7a:	607b      	str	r3, [r7, #4]
  return(result);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d105      	bne.n	8004b8e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b82:	f3ef 8311 	mrs	r3, BASEPRI
 8004b86:	603b      	str	r3, [r7, #0]
  return(result);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <osKernelStart+0x3a>
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <osKernelStart+0x68>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d103      	bne.n	8004b9e <osKernelStart+0x3a>
    stat = osErrorISR;
 8004b96:	f06f 0305 	mvn.w	r3, #5
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	e010      	b.n	8004bc0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <osKernelStart+0x68>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d109      	bne.n	8004bba <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ba6:	f7ff ffa1 	bl	8004aec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004baa:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <osKernelStart+0x68>)
 8004bac:	2202      	movs	r2, #2
 8004bae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004bb0:	f002 fb54 	bl	800725c <vTaskStartScheduler>
      stat = osOK;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	e002      	b.n	8004bc0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004bba:	f04f 33ff 	mov.w	r3, #4294967295
 8004bbe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000130 	.word	0x20000130

08004bd0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bd6:	f3ef 8305 	mrs	r3, IPSR
 8004bda:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10f      	bne.n	8004c02 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004be2:	f3ef 8310 	mrs	r3, PRIMASK
 8004be6:	607b      	str	r3, [r7, #4]
  return(result);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d105      	bne.n	8004bfa <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004bee:	f3ef 8311 	mrs	r3, BASEPRI
 8004bf2:	603b      	str	r3, [r7, #0]
  return(result);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d007      	beq.n	8004c0a <osKernelGetTickCount+0x3a>
 8004bfa:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <osKernelGetTickCount+0x4c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d103      	bne.n	8004c0a <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8004c02:	f002 fc4b 	bl	800749c <xTaskGetTickCountFromISR>
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	e002      	b.n	8004c10 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8004c0a:	f002 fc37 	bl	800747c <xTaskGetTickCount>
 8004c0e:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8004c10:	68fb      	ldr	r3, [r7, #12]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000130 	.word	0x20000130

08004c20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b090      	sub	sp, #64	; 0x40
 8004c24:	af04      	add	r7, sp, #16
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c30:	f3ef 8305 	mrs	r3, IPSR
 8004c34:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c36:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f040 808f 	bne.w	8004d5c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c42:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d105      	bne.n	8004c56 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c4a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c4e:	617b      	str	r3, [r7, #20]
  return(result);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <osThreadNew+0x3e>
 8004c56:	4b44      	ldr	r3, [pc, #272]	; (8004d68 <osThreadNew+0x148>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d07e      	beq.n	8004d5c <osThreadNew+0x13c>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d07b      	beq.n	8004d5c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004c64:	2380      	movs	r3, #128	; 0x80
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004c68:	2318      	movs	r3, #24
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004c70:	f04f 33ff 	mov.w	r3, #4294967295
 8004c74:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d045      	beq.n	8004d08 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <osThreadNew+0x6a>
        name = attr->name;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d002      	beq.n	8004c98 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <osThreadNew+0x90>
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	2b38      	cmp	r3, #56	; 0x38
 8004ca2:	d805      	bhi.n	8004cb0 <osThreadNew+0x90>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <osThreadNew+0x94>
        return (NULL);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e054      	b.n	8004d5e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	089b      	lsrs	r3, r3, #2
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00e      	beq.n	8004cea <osThreadNew+0xca>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	2b5f      	cmp	r3, #95	; 0x5f
 8004cd2:	d90a      	bls.n	8004cea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d006      	beq.n	8004cea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d002      	beq.n	8004cea <osThreadNew+0xca>
        mem = 1;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	623b      	str	r3, [r7, #32]
 8004ce8:	e010      	b.n	8004d0c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10c      	bne.n	8004d0c <osThreadNew+0xec>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d108      	bne.n	8004d0c <osThreadNew+0xec>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d104      	bne.n	8004d0c <osThreadNew+0xec>
          mem = 0;
 8004d02:	2300      	movs	r3, #0
 8004d04:	623b      	str	r3, [r7, #32]
 8004d06:	e001      	b.n	8004d0c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d110      	bne.n	8004d34 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d1a:	9202      	str	r2, [sp, #8]
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f001 febf 	bl	8006aac <xTaskCreateStatic>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	e013      	b.n	8004d5c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d110      	bne.n	8004d5c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	f107 0310 	add.w	r3, r7, #16
 8004d42:	9301      	str	r3, [sp, #4]
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	9300      	str	r3, [sp, #0]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f001 ff07 	bl	8006b60 <xTaskCreate>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d001      	beq.n	8004d5c <osThreadNew+0x13c>
          hTask = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d5c:	693b      	ldr	r3, [r7, #16]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3730      	adds	r7, #48	; 0x30
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20000130 	.word	0x20000130

08004d6c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d74:	f3ef 8305 	mrs	r3, IPSR
 8004d78:	613b      	str	r3, [r7, #16]
  return(result);
 8004d7a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10f      	bne.n	8004da0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d80:	f3ef 8310 	mrs	r3, PRIMASK
 8004d84:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004d90:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d007      	beq.n	8004da8 <osDelay+0x3c>
 8004d98:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <osDelay+0x58>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d103      	bne.n	8004da8 <osDelay+0x3c>
    stat = osErrorISR;
 8004da0:	f06f 0305 	mvn.w	r3, #5
 8004da4:	617b      	str	r3, [r7, #20]
 8004da6:	e007      	b.n	8004db8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f002 f81a 	bl	8006dec <vTaskDelay>
    }
  }

  return (stat);
 8004db8:	697b      	ldr	r3, [r7, #20]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000130 	.word	0x20000130

08004dc8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b08a      	sub	sp, #40	; 0x28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dd4:	f3ef 8305 	mrs	r3, IPSR
 8004dd8:	613b      	str	r3, [r7, #16]
  return(result);
 8004dda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f040 8085 	bne.w	8004eec <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de2:	f3ef 8310 	mrs	r3, PRIMASK
 8004de6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d105      	bne.n	8004dfa <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dee:	f3ef 8311 	mrs	r3, BASEPRI
 8004df2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <osMutexNew+0x3a>
 8004dfa:	4b3f      	ldr	r3, [pc, #252]	; (8004ef8 <osMutexNew+0x130>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d074      	beq.n	8004eec <osMutexNew+0x124>
    if (attr != NULL) {
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <osMutexNew+0x48>
      type = attr->attr_bits;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	623b      	str	r3, [r7, #32]
 8004e0e:	e001      	b.n	8004e14 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8004e10:	2300      	movs	r3, #0
 8004e12:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <osMutexNew+0x5c>
      rmtx = 1U;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	61fb      	str	r3, [r7, #28]
 8004e22:	e001      	b.n	8004e28 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004e28:	6a3b      	ldr	r3, [r7, #32]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d15c      	bne.n	8004eec <osMutexNew+0x124>
      mem = -1;
 8004e32:	f04f 33ff 	mov.w	r3, #4294967295
 8004e36:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d015      	beq.n	8004e6a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d006      	beq.n	8004e54 <osMutexNew+0x8c>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	2b4f      	cmp	r3, #79	; 0x4f
 8004e4c:	d902      	bls.n	8004e54 <osMutexNew+0x8c>
          mem = 1;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	e00c      	b.n	8004e6e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d108      	bne.n	8004e6e <osMutexNew+0xa6>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d104      	bne.n	8004e6e <osMutexNew+0xa6>
            mem = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61bb      	str	r3, [r7, #24]
 8004e68:	e001      	b.n	8004e6e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d112      	bne.n	8004e9a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	2004      	movs	r0, #4
 8004e82:	f000 fea6 	bl	8005bd2 <xQueueCreateMutexStatic>
 8004e86:	6278      	str	r0, [r7, #36]	; 0x24
 8004e88:	e016      	b.n	8004eb8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	2001      	movs	r0, #1
 8004e92:	f000 fe9e 	bl	8005bd2 <xQueueCreateMutexStatic>
 8004e96:	6278      	str	r0, [r7, #36]	; 0x24
 8004e98:	e00e      	b.n	8004eb8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d004      	beq.n	8004eb0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004ea6:	2004      	movs	r0, #4
 8004ea8:	f000 fe7b 	bl	8005ba2 <xQueueCreateMutex>
 8004eac:	6278      	str	r0, [r7, #36]	; 0x24
 8004eae:	e003      	b.n	8004eb8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004eb0:	2001      	movs	r0, #1
 8004eb2:	f000 fe76 	bl	8005ba2 <xQueueCreateMutex>
 8004eb6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00c      	beq.n	8004ed8 <osMutexNew+0x110>
        if (attr != NULL) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <osMutexNew+0x104>
          name = attr->name;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	617b      	str	r3, [r7, #20]
 8004eca:	e001      	b.n	8004ed0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004ed0:	6979      	ldr	r1, [r7, #20]
 8004ed2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ed4:	f001 fd64 	bl	80069a0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d006      	beq.n	8004eec <osMutexNew+0x124>
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3728      	adds	r7, #40	; 0x28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000130 	.word	0x20000130

08004efc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f1a:	f3ef 8305 	mrs	r3, IPSR
 8004f1e:	613b      	str	r3, [r7, #16]
  return(result);
 8004f20:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10f      	bne.n	8004f46 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f26:	f3ef 8310 	mrs	r3, PRIMASK
 8004f2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d105      	bne.n	8004f3e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f32:	f3ef 8311 	mrs	r3, BASEPRI
 8004f36:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <osMutexAcquire+0x52>
 8004f3e:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <osMutexAcquire+0xb8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d103      	bne.n	8004f4e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004f46:	f06f 0305 	mvn.w	r3, #5
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	e02c      	b.n	8004fa8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d103      	bne.n	8004f5c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004f54:	f06f 0303 	mvn.w	r3, #3
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	e025      	b.n	8004fa8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d011      	beq.n	8004f86 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	69b8      	ldr	r0, [r7, #24]
 8004f66:	f000 fe82 	bl	8005c6e <xQueueTakeMutexRecursive>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d01b      	beq.n	8004fa8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004f76:	f06f 0301 	mvn.w	r3, #1
 8004f7a:	61fb      	str	r3, [r7, #28]
 8004f7c:	e014      	b.n	8004fa8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004f7e:	f06f 0302 	mvn.w	r3, #2
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e010      	b.n	8004fa8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	69b8      	ldr	r0, [r7, #24]
 8004f8a:	f001 f9ff 	bl	800638c <xQueueSemaphoreTake>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d009      	beq.n	8004fa8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004f9a:	f06f 0301 	mvn.w	r3, #1
 8004f9e:	61fb      	str	r3, [r7, #28]
 8004fa0:	e002      	b.n	8004fa8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004fa2:	f06f 0302 	mvn.w	r3, #2
 8004fa6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004fa8:	69fb      	ldr	r3, [r7, #28]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000130 	.word	0x20000130

08004fb8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fd4:	f3ef 8305 	mrs	r3, IPSR
 8004fd8:	613b      	str	r3, [r7, #16]
  return(result);
 8004fda:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10f      	bne.n	8005000 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d105      	bne.n	8004ff8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004fec:	f3ef 8311 	mrs	r3, BASEPRI
 8004ff0:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <osMutexRelease+0x50>
 8004ff8:	4b16      	ldr	r3, [pc, #88]	; (8005054 <osMutexRelease+0x9c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d103      	bne.n	8005008 <osMutexRelease+0x50>
    stat = osErrorISR;
 8005000:	f06f 0305 	mvn.w	r3, #5
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	e01f      	b.n	8005048 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d103      	bne.n	8005016 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800500e:	f06f 0303 	mvn.w	r3, #3
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	e018      	b.n	8005048 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d009      	beq.n	8005030 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800501c:	69b8      	ldr	r0, [r7, #24]
 800501e:	f000 fdf3 	bl	8005c08 <xQueueGiveMutexRecursive>
 8005022:	4603      	mov	r3, r0
 8005024:	2b01      	cmp	r3, #1
 8005026:	d00f      	beq.n	8005048 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005028:	f06f 0302 	mvn.w	r3, #2
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	e00b      	b.n	8005048 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005030:	2300      	movs	r3, #0
 8005032:	2200      	movs	r2, #0
 8005034:	2100      	movs	r1, #0
 8005036:	69b8      	ldr	r0, [r7, #24]
 8005038:	f000 feb4 	bl	8005da4 <xQueueGenericSend>
 800503c:	4603      	mov	r3, r0
 800503e:	2b01      	cmp	r3, #1
 8005040:	d002      	beq.n	8005048 <osMutexRelease+0x90>
        stat = osErrorResource;
 8005042:	f06f 0302 	mvn.w	r3, #2
 8005046:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8005048:	69fb      	ldr	r3, [r7, #28]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20000130 	.word	0x20000130

08005058 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005058:	b580      	push	{r7, lr}
 800505a:	b08c      	sub	sp, #48	; 0x30
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005068:	f3ef 8305 	mrs	r3, IPSR
 800506c:	61bb      	str	r3, [r7, #24]
  return(result);
 800506e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005070:	2b00      	cmp	r3, #0
 8005072:	f040 8087 	bne.w	8005184 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005076:	f3ef 8310 	mrs	r3, PRIMASK
 800507a:	617b      	str	r3, [r7, #20]
  return(result);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d105      	bne.n	800508e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005082:	f3ef 8311 	mrs	r3, BASEPRI
 8005086:	613b      	str	r3, [r7, #16]
  return(result);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <osSemaphoreNew+0x3e>
 800508e:	4b40      	ldr	r3, [pc, #256]	; (8005190 <osSemaphoreNew+0x138>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b02      	cmp	r3, #2
 8005094:	d076      	beq.n	8005184 <osSemaphoreNew+0x12c>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d073      	beq.n	8005184 <osSemaphoreNew+0x12c>
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d86f      	bhi.n	8005184 <osSemaphoreNew+0x12c>
    mem = -1;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d015      	beq.n	80050dc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d006      	beq.n	80050c6 <osSemaphoreNew+0x6e>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	2b4f      	cmp	r3, #79	; 0x4f
 80050be:	d902      	bls.n	80050c6 <osSemaphoreNew+0x6e>
        mem = 1;
 80050c0:	2301      	movs	r3, #1
 80050c2:	623b      	str	r3, [r7, #32]
 80050c4:	e00c      	b.n	80050e0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d108      	bne.n	80050e0 <osSemaphoreNew+0x88>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d104      	bne.n	80050e0 <osSemaphoreNew+0x88>
          mem = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	623b      	str	r3, [r7, #32]
 80050da:	e001      	b.n	80050e0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e6:	d04d      	beq.n	8005184 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d129      	bne.n	8005142 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d10b      	bne.n	800510c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	2303      	movs	r3, #3
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	2200      	movs	r2, #0
 8005100:	2100      	movs	r1, #0
 8005102:	2001      	movs	r0, #1
 8005104:	f000 fc5e 	bl	80059c4 <xQueueGenericCreateStatic>
 8005108:	6278      	str	r0, [r7, #36]	; 0x24
 800510a:	e005      	b.n	8005118 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800510c:	2203      	movs	r2, #3
 800510e:	2100      	movs	r1, #0
 8005110:	2001      	movs	r0, #1
 8005112:	f000 fcca 	bl	8005aaa <xQueueGenericCreate>
 8005116:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d022      	beq.n	8005164 <osSemaphoreNew+0x10c>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d01f      	beq.n	8005164 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005124:	2300      	movs	r3, #0
 8005126:	2200      	movs	r2, #0
 8005128:	2100      	movs	r1, #0
 800512a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800512c:	f000 fe3a 	bl	8005da4 <xQueueGenericSend>
 8005130:	4603      	mov	r3, r0
 8005132:	2b01      	cmp	r3, #1
 8005134:	d016      	beq.n	8005164 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8005136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005138:	f001 fae7 	bl	800670a <vQueueDelete>
            hSemaphore = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	627b      	str	r3, [r7, #36]	; 0x24
 8005140:	e010      	b.n	8005164 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d108      	bne.n	800515a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	461a      	mov	r2, r3
 800514e:	68b9      	ldr	r1, [r7, #8]
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 fdc1 	bl	8005cd8 <xQueueCreateCountingSemaphoreStatic>
 8005156:	6278      	str	r0, [r7, #36]	; 0x24
 8005158:	e004      	b.n	8005164 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 fdf0 	bl	8005d42 <xQueueCreateCountingSemaphore>
 8005162:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d003      	beq.n	8005178 <osSemaphoreNew+0x120>
          name = attr->name;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	61fb      	str	r3, [r7, #28]
 8005176:	e001      	b.n	800517c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8005178:	2300      	movs	r3, #0
 800517a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800517c:	69f9      	ldr	r1, [r7, #28]
 800517e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005180:	f001 fc0e 	bl	80069a0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005186:	4618      	mov	r0, r3
 8005188:	3728      	adds	r7, #40	; 0x28
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	20000130 	.word	0x20000130

08005194 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d103      	bne.n	80051b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80051ac:	f06f 0303 	mvn.w	r3, #3
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	e04b      	b.n	800524c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051b4:	f3ef 8305 	mrs	r3, IPSR
 80051b8:	617b      	str	r3, [r7, #20]
  return(result);
 80051ba:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10f      	bne.n	80051e0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c0:	f3ef 8310 	mrs	r3, PRIMASK
 80051c4:	613b      	str	r3, [r7, #16]
  return(result);
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d105      	bne.n	80051d8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051cc:	f3ef 8311 	mrs	r3, BASEPRI
 80051d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d026      	beq.n	8005226 <osSemaphoreAcquire+0x92>
 80051d8:	4b1f      	ldr	r3, [pc, #124]	; (8005258 <osSemaphoreAcquire+0xc4>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d122      	bne.n	8005226 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80051e6:	f06f 0303 	mvn.w	r3, #3
 80051ea:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80051ec:	e02d      	b.n	800524a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80051f2:	f107 0308 	add.w	r3, r7, #8
 80051f6:	461a      	mov	r2, r3
 80051f8:	2100      	movs	r1, #0
 80051fa:	69b8      	ldr	r0, [r7, #24]
 80051fc:	f001 f9ce 	bl	800659c <xQueueReceiveFromISR>
 8005200:	4603      	mov	r3, r0
 8005202:	2b01      	cmp	r3, #1
 8005204:	d003      	beq.n	800520e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005206:	f06f 0302 	mvn.w	r3, #2
 800520a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800520c:	e01d      	b.n	800524a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01a      	beq.n	800524a <osSemaphoreAcquire+0xb6>
 8005214:	4b11      	ldr	r3, [pc, #68]	; (800525c <osSemaphoreAcquire+0xc8>)
 8005216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005224:	e011      	b.n	800524a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005226:	6839      	ldr	r1, [r7, #0]
 8005228:	69b8      	ldr	r0, [r7, #24]
 800522a:	f001 f8af 	bl	800638c <xQueueSemaphoreTake>
 800522e:	4603      	mov	r3, r0
 8005230:	2b01      	cmp	r3, #1
 8005232:	d00b      	beq.n	800524c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800523a:	f06f 0301 	mvn.w	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	e004      	b.n	800524c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005242:	f06f 0302 	mvn.w	r3, #2
 8005246:	61fb      	str	r3, [r7, #28]
 8005248:	e000      	b.n	800524c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800524a:	bf00      	nop
      }
    }
  }

  return (stat);
 800524c:	69fb      	ldr	r3, [r7, #28]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3720      	adds	r7, #32
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000130 	.word	0x20000130
 800525c:	e000ed04 	.word	0xe000ed04

08005260 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005276:	f06f 0303 	mvn.w	r3, #3
 800527a:	61fb      	str	r3, [r7, #28]
 800527c:	e03e      	b.n	80052fc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800527e:	f3ef 8305 	mrs	r3, IPSR
 8005282:	617b      	str	r3, [r7, #20]
  return(result);
 8005284:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10f      	bne.n	80052aa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528a:	f3ef 8310 	mrs	r3, PRIMASK
 800528e:	613b      	str	r3, [r7, #16]
  return(result);
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d105      	bne.n	80052a2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005296:	f3ef 8311 	mrs	r3, BASEPRI
 800529a:	60fb      	str	r3, [r7, #12]
  return(result);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d01e      	beq.n	80052e0 <osSemaphoreRelease+0x80>
 80052a2:	4b19      	ldr	r3, [pc, #100]	; (8005308 <osSemaphoreRelease+0xa8>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d11a      	bne.n	80052e0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80052ae:	f107 0308 	add.w	r3, r7, #8
 80052b2:	4619      	mov	r1, r3
 80052b4:	69b8      	ldr	r0, [r7, #24]
 80052b6:	f000 ff03 	bl	80060c0 <xQueueGiveFromISR>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d003      	beq.n	80052c8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80052c0:	f06f 0302 	mvn.w	r3, #2
 80052c4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80052c6:	e018      	b.n	80052fa <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d015      	beq.n	80052fa <osSemaphoreRelease+0x9a>
 80052ce:	4b0f      	ldr	r3, [pc, #60]	; (800530c <osSemaphoreRelease+0xac>)
 80052d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80052de:	e00c      	b.n	80052fa <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80052e0:	2300      	movs	r3, #0
 80052e2:	2200      	movs	r2, #0
 80052e4:	2100      	movs	r1, #0
 80052e6:	69b8      	ldr	r0, [r7, #24]
 80052e8:	f000 fd5c 	bl	8005da4 <xQueueGenericSend>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d004      	beq.n	80052fc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80052f2:	f06f 0302 	mvn.w	r3, #2
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	e000      	b.n	80052fc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80052fa:	bf00      	nop
    }
  }

  return (stat);
 80052fc:	69fb      	ldr	r3, [r7, #28]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3720      	adds	r7, #32
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000130 	.word	0x20000130
 800530c:	e000ed04 	.word	0xe000ed04

08005310 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800531c:	f3ef 8305 	mrs	r3, IPSR
 8005320:	617b      	str	r3, [r7, #20]
  return(result);
 8005322:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10f      	bne.n	8005348 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005328:	f3ef 8310 	mrs	r3, PRIMASK
 800532c:	613b      	str	r3, [r7, #16]
  return(result);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d105      	bne.n	8005340 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005334:	f3ef 8311 	mrs	r3, BASEPRI
 8005338:	60fb      	str	r3, [r7, #12]
  return(result);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <osSemaphoreDelete+0x40>
 8005340:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <osSemaphoreDelete+0x68>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b02      	cmp	r3, #2
 8005346:	d103      	bne.n	8005350 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8005348:	f06f 0305 	mvn.w	r3, #5
 800534c:	61fb      	str	r3, [r7, #28]
 800534e:	e00e      	b.n	800536e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d103      	bne.n	800535e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8005356:	f06f 0303 	mvn.w	r3, #3
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	e007      	b.n	800536e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800535e:	69b8      	ldr	r0, [r7, #24]
 8005360:	f001 fb46 	bl	80069f0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005364:	2300      	movs	r3, #0
 8005366:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8005368:	69b8      	ldr	r0, [r7, #24]
 800536a:	f001 f9ce 	bl	800670a <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800536e:	69fb      	ldr	r3, [r7, #28]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3720      	adds	r7, #32
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	20000130 	.word	0x20000130

0800537c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b08c      	sub	sp, #48	; 0x30
 8005380:	af02      	add	r7, sp, #8
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800538c:	f3ef 8305 	mrs	r3, IPSR
 8005390:	61bb      	str	r3, [r7, #24]
  return(result);
 8005392:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005394:	2b00      	cmp	r3, #0
 8005396:	d170      	bne.n	800547a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005398:	f3ef 8310 	mrs	r3, PRIMASK
 800539c:	617b      	str	r3, [r7, #20]
  return(result);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d105      	bne.n	80053b0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053a4:	f3ef 8311 	mrs	r3, BASEPRI
 80053a8:	613b      	str	r3, [r7, #16]
  return(result);
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <osMessageQueueNew+0x3c>
 80053b0:	4b34      	ldr	r3, [pc, #208]	; (8005484 <osMessageQueueNew+0x108>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d060      	beq.n	800547a <osMessageQueueNew+0xfe>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d05d      	beq.n	800547a <osMessageQueueNew+0xfe>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d05a      	beq.n	800547a <osMessageQueueNew+0xfe>
    mem = -1;
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295
 80053c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d029      	beq.n	8005424 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d012      	beq.n	80053fe <osMessageQueueNew+0x82>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b4f      	cmp	r3, #79	; 0x4f
 80053de:	d90e      	bls.n	80053fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	68b9      	ldr	r1, [r7, #8]
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d302      	bcc.n	80053fe <osMessageQueueNew+0x82>
        mem = 1;
 80053f8:	2301      	movs	r3, #1
 80053fa:	623b      	str	r3, [r7, #32]
 80053fc:	e014      	b.n	8005428 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d110      	bne.n	8005428 <osMessageQueueNew+0xac>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10c      	bne.n	8005428 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005412:	2b00      	cmp	r3, #0
 8005414:	d108      	bne.n	8005428 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d104      	bne.n	8005428 <osMessageQueueNew+0xac>
          mem = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	e001      	b.n	8005428 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d10c      	bne.n	8005448 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691a      	ldr	r2, [r3, #16]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6899      	ldr	r1, [r3, #8]
 8005436:	2300      	movs	r3, #0
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	460b      	mov	r3, r1
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fac0 	bl	80059c4 <xQueueGenericCreateStatic>
 8005444:	6278      	str	r0, [r7, #36]	; 0x24
 8005446:	e008      	b.n	800545a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d105      	bne.n	800545a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 800544e:	2200      	movs	r2, #0
 8005450:	68b9      	ldr	r1, [r7, #8]
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 fb29 	bl	8005aaa <xQueueGenericCreate>
 8005458:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00c      	beq.n	800547a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <osMessageQueueNew+0xf2>
        name = attr->name;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	e001      	b.n	8005472 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800546e:	2300      	movs	r3, #0
 8005470:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005472:	69f9      	ldr	r1, [r7, #28]
 8005474:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005476:	f001 fa93 	bl	80069a0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800547c:	4618      	mov	r0, r3
 800547e:	3728      	adds	r7, #40	; 0x28
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20000130 	.word	0x20000130

08005488 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	; 0x28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800549c:	2300      	movs	r3, #0
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054a0:	f3ef 8305 	mrs	r3, IPSR
 80054a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80054a6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10f      	bne.n	80054cc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ac:	f3ef 8310 	mrs	r3, PRIMASK
 80054b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d105      	bne.n	80054c4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80054b8:	f3ef 8311 	mrs	r3, BASEPRI
 80054bc:	617b      	str	r3, [r7, #20]
  return(result);
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d02c      	beq.n	800551e <osMessageQueuePut+0x96>
 80054c4:	4b28      	ldr	r3, [pc, #160]	; (8005568 <osMessageQueuePut+0xe0>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d128      	bne.n	800551e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <osMessageQueuePut+0x56>
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <osMessageQueuePut+0x56>
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80054de:	f06f 0303 	mvn.w	r3, #3
 80054e2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054e4:	e039      	b.n	800555a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80054ea:	f107 0210 	add.w	r2, r7, #16
 80054ee:	2300      	movs	r3, #0
 80054f0:	68b9      	ldr	r1, [r7, #8]
 80054f2:	6a38      	ldr	r0, [r7, #32]
 80054f4:	f000 fd50 	bl	8005f98 <xQueueGenericSendFromISR>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d003      	beq.n	8005506 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80054fe:	f06f 0302 	mvn.w	r3, #2
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005504:	e029      	b.n	800555a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d026      	beq.n	800555a <osMessageQueuePut+0xd2>
 800550c:	4b17      	ldr	r3, [pc, #92]	; (800556c <osMessageQueuePut+0xe4>)
 800550e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800551c:	e01d      	b.n	800555a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <osMessageQueuePut+0xa2>
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800552a:	f06f 0303 	mvn.w	r3, #3
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
 8005530:	e014      	b.n	800555c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005532:	2300      	movs	r3, #0
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	6a38      	ldr	r0, [r7, #32]
 800553a:	f000 fc33 	bl	8005da4 <xQueueGenericSend>
 800553e:	4603      	mov	r3, r0
 8005540:	2b01      	cmp	r3, #1
 8005542:	d00b      	beq.n	800555c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800554a:	f06f 0301 	mvn.w	r3, #1
 800554e:	627b      	str	r3, [r7, #36]	; 0x24
 8005550:	e004      	b.n	800555c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005552:	f06f 0302 	mvn.w	r3, #2
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
 8005558:	e000      	b.n	800555c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800555a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800555e:	4618      	mov	r0, r3
 8005560:	3728      	adds	r7, #40	; 0x28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20000130 	.word	0x20000130
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	; 0x28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005582:	2300      	movs	r3, #0
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005586:	f3ef 8305 	mrs	r3, IPSR
 800558a:	61fb      	str	r3, [r7, #28]
  return(result);
 800558c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10f      	bne.n	80055b2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005592:	f3ef 8310 	mrs	r3, PRIMASK
 8005596:	61bb      	str	r3, [r7, #24]
  return(result);
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d105      	bne.n	80055aa <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800559e:	f3ef 8311 	mrs	r3, BASEPRI
 80055a2:	617b      	str	r3, [r7, #20]
  return(result);
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d02c      	beq.n	8005604 <osMessageQueueGet+0x94>
 80055aa:	4b28      	ldr	r3, [pc, #160]	; (800564c <osMessageQueueGet+0xdc>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d128      	bne.n	8005604 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d005      	beq.n	80055c4 <osMessageQueueGet+0x54>
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <osMessageQueueGet+0x54>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80055c4:	f06f 0303 	mvn.w	r3, #3
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055ca:	e038      	b.n	800563e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80055cc:	2300      	movs	r3, #0
 80055ce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80055d0:	f107 0310 	add.w	r3, r7, #16
 80055d4:	461a      	mov	r2, r3
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	6a38      	ldr	r0, [r7, #32]
 80055da:	f000 ffdf 	bl	800659c <xQueueReceiveFromISR>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d003      	beq.n	80055ec <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80055e4:	f06f 0302 	mvn.w	r3, #2
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055ea:	e028      	b.n	800563e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d025      	beq.n	800563e <osMessageQueueGet+0xce>
 80055f2:	4b17      	ldr	r3, [pc, #92]	; (8005650 <osMessageQueueGet+0xe0>)
 80055f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005602:	e01c      	b.n	800563e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005604:	6a3b      	ldr	r3, [r7, #32]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <osMessageQueueGet+0xa0>
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d103      	bne.n	8005618 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005610:	f06f 0303 	mvn.w	r3, #3
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
 8005616:	e013      	b.n	8005640 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	6a38      	ldr	r0, [r7, #32]
 800561e:	f000 fdd9 	bl	80061d4 <xQueueReceive>
 8005622:	4603      	mov	r3, r0
 8005624:	2b01      	cmp	r3, #1
 8005626:	d00b      	beq.n	8005640 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d003      	beq.n	8005636 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800562e:	f06f 0301 	mvn.w	r3, #1
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
 8005634:	e004      	b.n	8005640 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005636:	f06f 0302 	mvn.w	r3, #2
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
 800563c:	e000      	b.n	8005640 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800563e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005642:	4618      	mov	r0, r3
 8005644:	3728      	adds	r7, #40	; 0x28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000130 	.word	0x20000130
 8005650:	e000ed04 	.word	0xe000ed04

08005654 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <osMessageQueueGetCount+0x18>
    count = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	61fb      	str	r3, [r7, #28]
 800566a:	e01e      	b.n	80056aa <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800566c:	f3ef 8305 	mrs	r3, IPSR
 8005670:	617b      	str	r3, [r7, #20]
  return(result);
 8005672:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10f      	bne.n	8005698 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005678:	f3ef 8310 	mrs	r3, PRIMASK
 800567c:	613b      	str	r3, [r7, #16]
  return(result);
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d105      	bne.n	8005690 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005684:	f3ef 8311 	mrs	r3, BASEPRI
 8005688:	60fb      	str	r3, [r7, #12]
  return(result);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d008      	beq.n	80056a2 <osMessageQueueGetCount+0x4e>
 8005690:	4b08      	ldr	r3, [pc, #32]	; (80056b4 <osMessageQueueGetCount+0x60>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d104      	bne.n	80056a2 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005698:	69b8      	ldr	r0, [r7, #24]
 800569a:	f001 f819 	bl	80066d0 <uxQueueMessagesWaitingFromISR>
 800569e:	61f8      	str	r0, [r7, #28]
 80056a0:	e003      	b.n	80056aa <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80056a2:	69b8      	ldr	r0, [r7, #24]
 80056a4:	f000 fff7 	bl	8006696 <uxQueueMessagesWaiting>
 80056a8:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80056aa:	69fb      	ldr	r3, [r7, #28]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3720      	adds	r7, #32
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000130 	.word	0x20000130

080056b8 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056c4:	f3ef 8305 	mrs	r3, IPSR
 80056c8:	617b      	str	r3, [r7, #20]
  return(result);
 80056ca:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10f      	bne.n	80056f0 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d0:	f3ef 8310 	mrs	r3, PRIMASK
 80056d4:	613b      	str	r3, [r7, #16]
  return(result);
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056dc:	f3ef 8311 	mrs	r3, BASEPRI
 80056e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <osMessageQueueDelete+0x40>
 80056e8:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <osMessageQueueDelete+0x68>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d103      	bne.n	80056f8 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 80056f0:	f06f 0305 	mvn.w	r3, #5
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	e00e      	b.n	8005716 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d103      	bne.n	8005706 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 80056fe:	f06f 0303 	mvn.w	r3, #3
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	e007      	b.n	8005716 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005706:	69b8      	ldr	r0, [r7, #24]
 8005708:	f001 f972 	bl	80069f0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800570c:	2300      	movs	r3, #0
 800570e:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 8005710:	69b8      	ldr	r0, [r7, #24]
 8005712:	f000 fffa 	bl	800670a <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005716:	69fb      	ldr	r3, [r7, #28]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3720      	adds	r7, #32
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20000130 	.word	0x20000130

08005724 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4a07      	ldr	r2, [pc, #28]	; (8005750 <vApplicationGetIdleTaskMemory+0x2c>)
 8005734:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	4a06      	ldr	r2, [pc, #24]	; (8005754 <vApplicationGetIdleTaskMemory+0x30>)
 800573a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2280      	movs	r2, #128	; 0x80
 8005740:	601a      	str	r2, [r3, #0]
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	20000134 	.word	0x20000134
 8005754:	20000194 	.word	0x20000194

08005758 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4a07      	ldr	r2, [pc, #28]	; (8005784 <vApplicationGetTimerTaskMemory+0x2c>)
 8005768:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	4a06      	ldr	r2, [pc, #24]	; (8005788 <vApplicationGetTimerTaskMemory+0x30>)
 800576e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005776:	601a      	str	r2, [r3, #0]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	20000394 	.word	0x20000394
 8005788:	200003f4 	.word	0x200003f4

0800578c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f103 0208 	add.w	r2, r3, #8
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f04f 32ff 	mov.w	r2, #4294967295
 80057a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f103 0208 	add.w	r2, r3, #8
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f103 0208 	add.w	r2, r3, #8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	601a      	str	r2, [r3, #0]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005844:	d103      	bne.n	800584e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	60fb      	str	r3, [r7, #12]
 800584c:	e00c      	b.n	8005868 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3308      	adds	r3, #8
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e002      	b.n	800585c <vListInsert+0x2e>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	429a      	cmp	r2, r3
 8005866:	d2f6      	bcs.n	8005856 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	601a      	str	r2, [r3, #0]
}
 8005894:	bf00      	nop
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6892      	ldr	r2, [r2, #8]
 80058b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6852      	ldr	r2, [r2, #4]
 80058c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d103      	bne.n	80058d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	1e5a      	subs	r2, r3, #1
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	e7fe      	b.n	800591a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800591c:	f003 f966 	bl	8008bec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005928:	68f9      	ldr	r1, [r7, #12]
 800592a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800592c:	fb01 f303 	mul.w	r3, r1, r3
 8005930:	441a      	add	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594c:	3b01      	subs	r3, #1
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005952:	fb01 f303 	mul.w	r3, r1, r3
 8005956:	441a      	add	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	22ff      	movs	r2, #255	; 0xff
 8005960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	22ff      	movs	r2, #255	; 0xff
 8005968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d114      	bne.n	800599c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01a      	beq.n	80059b0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3310      	adds	r3, #16
 800597e:	4618      	mov	r0, r3
 8005980:	f001 ffac 	bl	80078dc <xTaskRemoveFromEventList>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d012      	beq.n	80059b0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800598a:	4b0d      	ldr	r3, [pc, #52]	; (80059c0 <xQueueGenericReset+0xcc>)
 800598c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	e009      	b.n	80059b0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3310      	adds	r3, #16
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff fef3 	bl	800578c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3324      	adds	r3, #36	; 0x24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff feee 	bl	800578c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059b0:	f003 f94a 	bl	8008c48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059b4:	2301      	movs	r3, #1
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	e000ed04 	.word	0xe000ed04

080059c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08e      	sub	sp, #56	; 0x38
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <xQueueGenericCreateStatic+0x28>
 80059d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059ea:	e7fe      	b.n	80059ea <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d109      	bne.n	8005a06 <xQueueGenericCreateStatic+0x42>
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
 8005a04:	e7fe      	b.n	8005a04 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <xQueueGenericCreateStatic+0x4e>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <xQueueGenericCreateStatic+0x52>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <xQueueGenericCreateStatic+0x54>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <xQueueGenericCreateStatic+0x6c>
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	623b      	str	r3, [r7, #32]
 8005a2e:	e7fe      	b.n	8005a2e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d102      	bne.n	8005a3c <xQueueGenericCreateStatic+0x78>
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <xQueueGenericCreateStatic+0x7c>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e000      	b.n	8005a42 <xQueueGenericCreateStatic+0x7e>
 8005a40:	2300      	movs	r3, #0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <xQueueGenericCreateStatic+0x96>
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	e7fe      	b.n	8005a58 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a5a:	2350      	movs	r3, #80	; 0x50
 8005a5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	2b50      	cmp	r3, #80	; 0x50
 8005a62:	d009      	beq.n	8005a78 <xQueueGenericCreateStatic+0xb4>
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	e7fe      	b.n	8005a76 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00d      	beq.n	8005aa0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a8c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	4613      	mov	r3, r2
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 f844 	bl	8005b28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3730      	adds	r7, #48	; 0x30
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b08a      	sub	sp, #40	; 0x28
 8005aae:	af02      	add	r7, sp, #8
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <xQueueGenericCreate+0x28>
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	613b      	str	r3, [r7, #16]
 8005ad0:	e7fe      	b.n	8005ad0 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d102      	bne.n	8005ade <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	e004      	b.n	8005ae8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
 8005ae6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	3350      	adds	r3, #80	; 0x50
 8005aec:	4618      	mov	r0, r3
 8005aee:	f003 f997 	bl	8008e20 <pvPortMalloc>
 8005af2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d011      	beq.n	8005b1e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	3350      	adds	r3, #80	; 0x50
 8005b02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b0c:	79fa      	ldrb	r2, [r7, #7]
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	4613      	mov	r3, r2
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f805 	bl	8005b28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b1e:	69bb      	ldr	r3, [r7, #24]
	}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3720      	adds	r7, #32
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
 8005b34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	e002      	b.n	8005b4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b56:	2101      	movs	r1, #1
 8005b58:	69b8      	ldr	r0, [r7, #24]
 8005b5a:	f7ff fecb 	bl	80058f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	78fa      	ldrb	r2, [r7, #3]
 8005b62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b66:	bf00      	nop
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b082      	sub	sp, #8
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00e      	beq.n	8005b9a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005b8e:	2300      	movs	r3, #0
 8005b90:	2200      	movs	r2, #0
 8005b92:	2100      	movs	r1, #0
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f905 	bl	8005da4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005b9a:	bf00      	nop
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b086      	sub	sp, #24
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	4603      	mov	r3, r0
 8005baa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bac:	2301      	movs	r3, #1
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6939      	ldr	r1, [r7, #16]
 8005bba:	6978      	ldr	r0, [r7, #20]
 8005bbc:	f7ff ff75 	bl	8005aaa <xQueueGenericCreate>
 8005bc0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f7ff ffd3 	bl	8005b6e <prvInitialiseMutex>

		return xNewQueue;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
	}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b088      	sub	sp, #32
 8005bd6:	af02      	add	r7, sp, #8
 8005bd8:	4603      	mov	r3, r0
 8005bda:	6039      	str	r1, [r7, #0]
 8005bdc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bde:	2301      	movs	r3, #1
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	2300      	movs	r3, #0
 8005be4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2200      	movs	r2, #0
 8005bee:	6939      	ldr	r1, [r7, #16]
 8005bf0:	6978      	ldr	r0, [r7, #20]
 8005bf2:	f7ff fee7 	bl	80059c4 <xQueueGenericCreateStatic>
 8005bf6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005bf8:	68f8      	ldr	r0, [r7, #12]
 8005bfa:	f7ff ffb8 	bl	8005b6e <prvInitialiseMutex>

		return xNewQueue;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
	}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d109      	bne.n	8005c2e <xQueueGiveMutexRecursive+0x26>
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e7fe      	b.n	8005c2c <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	689c      	ldr	r4, [r3, #8]
 8005c32:	f002 f8dd 	bl	8007df0 <xTaskGetCurrentTaskHandle>
 8005c36:	4603      	mov	r3, r0
 8005c38:	429c      	cmp	r4, r3
 8005c3a:	d111      	bne.n	8005c60 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	1e5a      	subs	r2, r3, #1
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d105      	bne.n	8005c5a <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005c4e:	2300      	movs	r3, #0
 8005c50:	2200      	movs	r2, #0
 8005c52:	2100      	movs	r1, #0
 8005c54:	6938      	ldr	r0, [r7, #16]
 8005c56:	f000 f8a5 	bl	8005da4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	617b      	str	r3, [r7, #20]
 8005c5e:	e001      	b.n	8005c64 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005c64:	697b      	ldr	r3, [r7, #20]
	}
 8005c66:	4618      	mov	r0, r3
 8005c68:	371c      	adds	r7, #28
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd90      	pop	{r4, r7, pc}

08005c6e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005c6e:	b590      	push	{r4, r7, lr}
 8005c70:	b087      	sub	sp, #28
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d109      	bne.n	8005c96 <xQueueTakeMutexRecursive+0x28>
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	e7fe      	b.n	8005c94 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	689c      	ldr	r4, [r3, #8]
 8005c9a:	f002 f8a9 	bl	8007df0 <xTaskGetCurrentTaskHandle>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	429c      	cmp	r4, r3
 8005ca2:	d107      	bne.n	8005cb4 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	e00c      	b.n	8005cce <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	6938      	ldr	r0, [r7, #16]
 8005cb8:	f000 fb68 	bl	800638c <xQueueSemaphoreTake>
 8005cbc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	1c5a      	adds	r2, r3, #1
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005cce:	697b      	ldr	r3, [r7, #20]
	}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd90      	pop	{r4, r7, pc}

08005cd8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08a      	sub	sp, #40	; 0x28
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <xQueueCreateCountingSemaphoreStatic+0x26>
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	61bb      	str	r3, [r7, #24]
 8005cfc:	e7fe      	b.n	8005cfc <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d909      	bls.n	8005d1a <xQueueCreateCountingSemaphoreStatic+0x42>
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	e7fe      	b.n	8005d18 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	2100      	movs	r1, #0
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff fe4d 	bl	80059c4 <xQueueGenericCreateStatic>
 8005d2a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d38:	69fb      	ldr	r3, [r7, #28]
	}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3720      	adds	r7, #32
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b086      	sub	sp, #24
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <xQueueCreateCountingSemaphore+0x24>
 8005d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	e7fe      	b.n	8005d64 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d909      	bls.n	8005d82 <xQueueCreateCountingSemaphore+0x40>
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	e7fe      	b.n	8005d80 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005d82:	2202      	movs	r2, #2
 8005d84:	2100      	movs	r1, #0
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff fe8f 	bl	8005aaa <xQueueGenericCreate>
 8005d8c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005d9a:	697b      	ldr	r3, [r7, #20]
	}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08e      	sub	sp, #56	; 0x38
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005db2:	2300      	movs	r3, #0
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d109      	bne.n	8005dd4 <xQueueGenericSend+0x30>
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dd2:	e7fe      	b.n	8005dd2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d103      	bne.n	8005de2 <xQueueGenericSend+0x3e>
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <xQueueGenericSend+0x42>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <xQueueGenericSend+0x44>
 8005de6:	2300      	movs	r3, #0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <xQueueGenericSend+0x5c>
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8005dfe:	e7fe      	b.n	8005dfe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d103      	bne.n	8005e0e <xQueueGenericSend+0x6a>
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <xQueueGenericSend+0x6e>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <xQueueGenericSend+0x70>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d109      	bne.n	8005e2c <xQueueGenericSend+0x88>
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	623b      	str	r3, [r7, #32]
 8005e2a:	e7fe      	b.n	8005e2a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e2c:	f001 fff0 	bl	8007e10 <xTaskGetSchedulerState>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d102      	bne.n	8005e3c <xQueueGenericSend+0x98>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <xQueueGenericSend+0x9c>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <xQueueGenericSend+0x9e>
 8005e40:	2300      	movs	r3, #0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d109      	bne.n	8005e5a <xQueueGenericSend+0xb6>
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	e7fe      	b.n	8005e58 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e5a:	f002 fec7 	bl	8008bec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d302      	bcc.n	8005e70 <xQueueGenericSend+0xcc>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d129      	bne.n	8005ec4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e70:	683a      	ldr	r2, [r7, #0]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e76:	f000 fc82 	bl	800677e <prvCopyDataToQueue>
 8005e7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d010      	beq.n	8005ea6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e86:	3324      	adds	r3, #36	; 0x24
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 fd27 	bl	80078dc <xTaskRemoveFromEventList>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d013      	beq.n	8005ebc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e94:	4b3f      	ldr	r3, [pc, #252]	; (8005f94 <xQueueGenericSend+0x1f0>)
 8005e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	e00a      	b.n	8005ebc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d007      	beq.n	8005ebc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005eac:	4b39      	ldr	r3, [pc, #228]	; (8005f94 <xQueueGenericSend+0x1f0>)
 8005eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb2:	601a      	str	r2, [r3, #0]
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ebc:	f002 fec4 	bl	8008c48 <vPortExitCritical>
				return pdPASS;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e063      	b.n	8005f8c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d103      	bne.n	8005ed2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005eca:	f002 febd 	bl	8008c48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e05c      	b.n	8005f8c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ed8:	f107 0314 	add.w	r3, r7, #20
 8005edc:	4618      	mov	r0, r3
 8005ede:	f001 fd5f 	bl	80079a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ee6:	f002 feaf 	bl	8008c48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005eea:	f001 fa1d 	bl	8007328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005eee:	f002 fe7d 	bl	8008bec <vPortEnterCritical>
 8005ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ef8:	b25b      	sxtb	r3, r3
 8005efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efe:	d103      	bne.n	8005f08 <xQueueGenericSend+0x164>
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f0e:	b25b      	sxtb	r3, r3
 8005f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f14:	d103      	bne.n	8005f1e <xQueueGenericSend+0x17a>
 8005f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f1e:	f002 fe93 	bl	8008c48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f22:	1d3a      	adds	r2, r7, #4
 8005f24:	f107 0314 	add.w	r3, r7, #20
 8005f28:	4611      	mov	r1, r2
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 fd4e 	bl	80079cc <xTaskCheckForTimeOut>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d124      	bne.n	8005f80 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005f36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f38:	f000 fd19 	bl	800696e <prvIsQueueFull>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d018      	beq.n	8005f74 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f44:	3310      	adds	r3, #16
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4611      	mov	r1, r2
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f001 fc78 	bl	8007840 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f52:	f000 fca4 	bl	800689e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f56:	f001 f9f5 	bl	8007344 <xTaskResumeAll>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f47f af7c 	bne.w	8005e5a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005f62:	4b0c      	ldr	r3, [pc, #48]	; (8005f94 <xQueueGenericSend+0x1f0>)
 8005f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f68:	601a      	str	r2, [r3, #0]
 8005f6a:	f3bf 8f4f 	dsb	sy
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	e772      	b.n	8005e5a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f76:	f000 fc92 	bl	800689e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f7a:	f001 f9e3 	bl	8007344 <xTaskResumeAll>
 8005f7e:	e76c      	b.n	8005e5a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f82:	f000 fc8c 	bl	800689e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f86:	f001 f9dd 	bl	8007344 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3738      	adds	r7, #56	; 0x38
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	e000ed04 	.word	0xe000ed04

08005f98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08e      	sub	sp, #56	; 0x38
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d109      	bne.n	8005fc4 <xQueueGenericSendFromISR+0x2c>
 8005fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb4:	f383 8811 	msr	BASEPRI, r3
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	f3bf 8f4f 	dsb	sy
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fc2:	e7fe      	b.n	8005fc2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d103      	bne.n	8005fd2 <xQueueGenericSendFromISR+0x3a>
 8005fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <xQueueGenericSendFromISR+0x3e>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <xQueueGenericSendFromISR+0x40>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <xQueueGenericSendFromISR+0x58>
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	623b      	str	r3, [r7, #32]
 8005fee:	e7fe      	b.n	8005fee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d103      	bne.n	8005ffe <xQueueGenericSendFromISR+0x66>
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <xQueueGenericSendFromISR+0x6a>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <xQueueGenericSendFromISR+0x6c>
 8006002:	2300      	movs	r3, #0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d109      	bne.n	800601c <xQueueGenericSendFromISR+0x84>
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	61fb      	str	r3, [r7, #28]
 800601a:	e7fe      	b.n	800601a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800601c:	f002 fec2 	bl	8008da4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006020:	f3ef 8211 	mrs	r2, BASEPRI
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	61ba      	str	r2, [r7, #24]
 8006036:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006038:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800603a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006044:	429a      	cmp	r2, r3
 8006046:	d302      	bcc.n	800604e <xQueueGenericSendFromISR+0xb6>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d12c      	bne.n	80060a8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006054:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800605e:	f000 fb8e 	bl	800677e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006062:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d112      	bne.n	8006092 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006070:	2b00      	cmp	r3, #0
 8006072:	d016      	beq.n	80060a2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006076:	3324      	adds	r3, #36	; 0x24
 8006078:	4618      	mov	r0, r3
 800607a:	f001 fc2f 	bl	80078dc <xTaskRemoveFromEventList>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00e      	beq.n	80060a2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00b      	beq.n	80060a2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e007      	b.n	80060a2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006092:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006096:	3301      	adds	r3, #1
 8006098:	b2db      	uxtb	r3, r3
 800609a:	b25a      	sxtb	r2, r3
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060a2:	2301      	movs	r3, #1
 80060a4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80060a6:	e001      	b.n	80060ac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060a8:	2300      	movs	r3, #0
 80060aa:	637b      	str	r3, [r7, #52]	; 0x34
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3738      	adds	r7, #56	; 0x38
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08e      	sub	sp, #56	; 0x38
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d109      	bne.n	80060e8 <xQueueGiveFromISR+0x28>
	__asm volatile
 80060d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d8:	f383 8811 	msr	BASEPRI, r3
 80060dc:	f3bf 8f6f 	isb	sy
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	623b      	str	r3, [r7, #32]
 80060e6:	e7fe      	b.n	80060e6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d009      	beq.n	8006104 <xQueueGiveFromISR+0x44>
 80060f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	61fb      	str	r3, [r7, #28]
 8006102:	e7fe      	b.n	8006102 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d103      	bne.n	8006114 <xQueueGiveFromISR+0x54>
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <xQueueGiveFromISR+0x58>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <xQueueGiveFromISR+0x5a>
 8006118:	2300      	movs	r3, #0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d109      	bne.n	8006132 <xQueueGiveFromISR+0x72>
 800611e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	e7fe      	b.n	8006130 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006132:	f002 fe37 	bl	8008da4 <vPortValidateInterruptPriority>
	__asm volatile
 8006136:	f3ef 8211 	mrs	r2, BASEPRI
 800613a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	617a      	str	r2, [r7, #20]
 800614c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800614e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006150:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006156:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800615e:	429a      	cmp	r2, r3
 8006160:	d22b      	bcs.n	80061ba <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006174:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617c:	d112      	bne.n	80061a4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800617e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	2b00      	cmp	r3, #0
 8006184:	d016      	beq.n	80061b4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006188:	3324      	adds	r3, #36	; 0x24
 800618a:	4618      	mov	r0, r3
 800618c:	f001 fba6 	bl	80078dc <xTaskRemoveFromEventList>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00e      	beq.n	80061b4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00b      	beq.n	80061b4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2201      	movs	r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	e007      	b.n	80061b4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061a8:	3301      	adds	r3, #1
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	b25a      	sxtb	r2, r3
 80061ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061b4:	2301      	movs	r3, #1
 80061b6:	637b      	str	r3, [r7, #52]	; 0x34
 80061b8:	e001      	b.n	80061be <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061ba:	2300      	movs	r3, #0
 80061bc:	637b      	str	r3, [r7, #52]	; 0x34
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3738      	adds	r7, #56	; 0x38
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b08c      	sub	sp, #48	; 0x30
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061e0:	2300      	movs	r3, #0
 80061e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d109      	bne.n	8006202 <xQueueReceive+0x2e>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	623b      	str	r3, [r7, #32]
 8006200:	e7fe      	b.n	8006200 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d103      	bne.n	8006210 <xQueueReceive+0x3c>
 8006208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <xQueueReceive+0x40>
 8006210:	2301      	movs	r3, #1
 8006212:	e000      	b.n	8006216 <xQueueReceive+0x42>
 8006214:	2300      	movs	r3, #0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d109      	bne.n	800622e <xQueueReceive+0x5a>
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	61fb      	str	r3, [r7, #28]
 800622c:	e7fe      	b.n	800622c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800622e:	f001 fdef 	bl	8007e10 <xTaskGetSchedulerState>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d102      	bne.n	800623e <xQueueReceive+0x6a>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <xQueueReceive+0x6e>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <xQueueReceive+0x70>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d109      	bne.n	800625c <xQueueReceive+0x88>
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	61bb      	str	r3, [r7, #24]
 800625a:	e7fe      	b.n	800625a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800625c:	f002 fcc6 	bl	8008bec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d01f      	beq.n	80062ac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800626c:	68b9      	ldr	r1, [r7, #8]
 800626e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006270:	f000 faef 	bl	8006852 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006276:	1e5a      	subs	r2, r3, #1
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00f      	beq.n	80062a4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	3310      	adds	r3, #16
 8006288:	4618      	mov	r0, r3
 800628a:	f001 fb27 	bl	80078dc <xTaskRemoveFromEventList>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d007      	beq.n	80062a4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006294:	4b3c      	ldr	r3, [pc, #240]	; (8006388 <xQueueReceive+0x1b4>)
 8006296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062a4:	f002 fcd0 	bl	8008c48 <vPortExitCritical>
				return pdPASS;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e069      	b.n	8006380 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d103      	bne.n	80062ba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062b2:	f002 fcc9 	bl	8008c48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062b6:	2300      	movs	r3, #0
 80062b8:	e062      	b.n	8006380 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d106      	bne.n	80062ce <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062c0:	f107 0310 	add.w	r3, r7, #16
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 fb6b 	bl	80079a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062ca:	2301      	movs	r3, #1
 80062cc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062ce:	f002 fcbb 	bl	8008c48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062d2:	f001 f829 	bl	8007328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062d6:	f002 fc89 	bl	8008bec <vPortEnterCritical>
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062e0:	b25b      	sxtb	r3, r3
 80062e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e6:	d103      	bne.n	80062f0 <xQueueReceive+0x11c>
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062f6:	b25b      	sxtb	r3, r3
 80062f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062fc:	d103      	bne.n	8006306 <xQueueReceive+0x132>
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006306:	f002 fc9f 	bl	8008c48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800630a:	1d3a      	adds	r2, r7, #4
 800630c:	f107 0310 	add.w	r3, r7, #16
 8006310:	4611      	mov	r1, r2
 8006312:	4618      	mov	r0, r3
 8006314:	f001 fb5a 	bl	80079cc <xTaskCheckForTimeOut>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d123      	bne.n	8006366 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800631e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006320:	f000 fb0f 	bl	8006942 <prvIsQueueEmpty>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d017      	beq.n	800635a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	3324      	adds	r3, #36	; 0x24
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	4611      	mov	r1, r2
 8006332:	4618      	mov	r0, r3
 8006334:	f001 fa84 	bl	8007840 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800633a:	f000 fab0 	bl	800689e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800633e:	f001 f801 	bl	8007344 <xTaskResumeAll>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d189      	bne.n	800625c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006348:	4b0f      	ldr	r3, [pc, #60]	; (8006388 <xQueueReceive+0x1b4>)
 800634a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	e780      	b.n	800625c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800635a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635c:	f000 fa9f 	bl	800689e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006360:	f000 fff0 	bl	8007344 <xTaskResumeAll>
 8006364:	e77a      	b.n	800625c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006368:	f000 fa99 	bl	800689e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800636c:	f000 ffea 	bl	8007344 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006372:	f000 fae6 	bl	8006942 <prvIsQueueEmpty>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	f43f af6f 	beq.w	800625c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800637e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006380:	4618      	mov	r0, r3
 8006382:	3730      	adds	r7, #48	; 0x30
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08e      	sub	sp, #56	; 0x38
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006396:	2300      	movs	r3, #0
 8006398:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800639e:	2300      	movs	r3, #0
 80063a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d109      	bne.n	80063bc <xQueueSemaphoreTake+0x30>
 80063a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	623b      	str	r3, [r7, #32]
 80063ba:	e7fe      	b.n	80063ba <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d009      	beq.n	80063d8 <xQueueSemaphoreTake+0x4c>
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	e7fe      	b.n	80063d6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063d8:	f001 fd1a 	bl	8007e10 <xTaskGetSchedulerState>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d102      	bne.n	80063e8 <xQueueSemaphoreTake+0x5c>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <xQueueSemaphoreTake+0x60>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <xQueueSemaphoreTake+0x62>
 80063ec:	2300      	movs	r3, #0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <xQueueSemaphoreTake+0x7a>
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	61bb      	str	r3, [r7, #24]
 8006404:	e7fe      	b.n	8006404 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006406:	f002 fbf1 	bl	8008bec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	2b00      	cmp	r3, #0
 8006414:	d024      	beq.n	8006460 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	1e5a      	subs	r2, r3, #1
 800641a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d104      	bne.n	8006430 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006426:	f001 ff0f 	bl	8008248 <pvTaskIncrementMutexHeldCount>
 800642a:	4602      	mov	r2, r0
 800642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00f      	beq.n	8006458 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	3310      	adds	r3, #16
 800643c:	4618      	mov	r0, r3
 800643e:	f001 fa4d 	bl	80078dc <xTaskRemoveFromEventList>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d007      	beq.n	8006458 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006448:	4b53      	ldr	r3, [pc, #332]	; (8006598 <xQueueSemaphoreTake+0x20c>)
 800644a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800644e:	601a      	str	r2, [r3, #0]
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006458:	f002 fbf6 	bl	8008c48 <vPortExitCritical>
				return pdPASS;
 800645c:	2301      	movs	r3, #1
 800645e:	e096      	b.n	800658e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d110      	bne.n	8006488 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	2b00      	cmp	r3, #0
 800646a:	d009      	beq.n	8006480 <xQueueSemaphoreTake+0xf4>
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	e7fe      	b.n	800647e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006480:	f002 fbe2 	bl	8008c48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006484:	2300      	movs	r3, #0
 8006486:	e082      	b.n	800658e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800648e:	f107 030c 	add.w	r3, r7, #12
 8006492:	4618      	mov	r0, r3
 8006494:	f001 fa84 	bl	80079a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006498:	2301      	movs	r3, #1
 800649a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800649c:	f002 fbd4 	bl	8008c48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064a0:	f000 ff42 	bl	8007328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064a4:	f002 fba2 	bl	8008bec <vPortEnterCritical>
 80064a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064ae:	b25b      	sxtb	r3, r3
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d103      	bne.n	80064be <xQueueSemaphoreTake+0x132>
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064c4:	b25b      	sxtb	r3, r3
 80064c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ca:	d103      	bne.n	80064d4 <xQueueSemaphoreTake+0x148>
 80064cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064d4:	f002 fbb8 	bl	8008c48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064d8:	463a      	mov	r2, r7
 80064da:	f107 030c 	add.w	r3, r7, #12
 80064de:	4611      	mov	r1, r2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f001 fa73 	bl	80079cc <xTaskCheckForTimeOut>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d132      	bne.n	8006552 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064ee:	f000 fa28 	bl	8006942 <prvIsQueueEmpty>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d026      	beq.n	8006546 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80064f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d109      	bne.n	8006514 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006500:	f002 fb74 	bl	8008bec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	4618      	mov	r0, r3
 800650a:	f001 fc9f 	bl	8007e4c <xTaskPriorityInherit>
 800650e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006510:	f002 fb9a 	bl	8008c48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	3324      	adds	r3, #36	; 0x24
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	4611      	mov	r1, r2
 800651c:	4618      	mov	r0, r3
 800651e:	f001 f98f 	bl	8007840 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006524:	f000 f9bb 	bl	800689e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006528:	f000 ff0c 	bl	8007344 <xTaskResumeAll>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	f47f af69 	bne.w	8006406 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8006534:	4b18      	ldr	r3, [pc, #96]	; (8006598 <xQueueSemaphoreTake+0x20c>)
 8006536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	e75f      	b.n	8006406 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006548:	f000 f9a9 	bl	800689e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800654c:	f000 fefa 	bl	8007344 <xTaskResumeAll>
 8006550:	e759      	b.n	8006406 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006554:	f000 f9a3 	bl	800689e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006558:	f000 fef4 	bl	8007344 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800655c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800655e:	f000 f9f0 	bl	8006942 <prvIsQueueEmpty>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	f43f af4e 	beq.w	8006406 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00d      	beq.n	800658c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006570:	f002 fb3c 	bl	8008bec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006574:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006576:	f000 f8ea 	bl	800674e <prvGetDisinheritPriorityAfterTimeout>
 800657a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006582:	4618      	mov	r0, r3
 8006584:	f001 fd36 	bl	8007ff4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006588:	f002 fb5e 	bl	8008c48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800658c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800658e:	4618      	mov	r0, r3
 8006590:	3738      	adds	r7, #56	; 0x38
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08e      	sub	sp, #56	; 0x38
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d109      	bne.n	80065c6 <xQueueReceiveFromISR+0x2a>
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	623b      	str	r3, [r7, #32]
 80065c4:	e7fe      	b.n	80065c4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d103      	bne.n	80065d4 <xQueueReceiveFromISR+0x38>
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <xQueueReceiveFromISR+0x3c>
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <xQueueReceiveFromISR+0x3e>
 80065d8:	2300      	movs	r3, #0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d109      	bne.n	80065f2 <xQueueReceiveFromISR+0x56>
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	61fb      	str	r3, [r7, #28]
 80065f0:	e7fe      	b.n	80065f0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065f2:	f002 fbd7 	bl	8008da4 <vPortValidateInterruptPriority>
	__asm volatile
 80065f6:	f3ef 8211 	mrs	r2, BASEPRI
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	61ba      	str	r2, [r7, #24]
 800660c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800660e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006610:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	2b00      	cmp	r3, #0
 800661c:	d02f      	beq.n	800667e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800662c:	f000 f911 	bl	8006852 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	1e5a      	subs	r2, r3, #1
 8006634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006636:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006638:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800663c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006640:	d112      	bne.n	8006668 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d016      	beq.n	8006678 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	3310      	adds	r3, #16
 800664e:	4618      	mov	r0, r3
 8006650:	f001 f944 	bl	80078dc <xTaskRemoveFromEventList>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00e      	beq.n	8006678 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	e007      	b.n	8006678 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800666c:	3301      	adds	r3, #1
 800666e:	b2db      	uxtb	r3, r3
 8006670:	b25a      	sxtb	r2, r3
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006678:	2301      	movs	r3, #1
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
 800667c:	e001      	b.n	8006682 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800667e:	2300      	movs	r3, #0
 8006680:	637b      	str	r3, [r7, #52]	; 0x34
 8006682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006684:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800668c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800668e:	4618      	mov	r0, r3
 8006690:	3738      	adds	r7, #56	; 0x38
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d109      	bne.n	80066b8 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	60bb      	str	r3, [r7, #8]
 80066b6:	e7fe      	b.n	80066b6 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80066b8:	f002 fa98 	bl	8008bec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80066c2:	f002 fac1 	bl	8008c48 <vPortExitCritical>

	return uxReturn;
 80066c6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d109      	bne.n	80066f6 <uxQueueMessagesWaitingFromISR+0x26>
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e7fe      	b.n	80066f4 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fa:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80066fc:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80066fe:	4618      	mov	r0, r3
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d109      	bne.n	8006730 <vQueueDelete+0x26>
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	60bb      	str	r3, [r7, #8]
 800672e:	e7fe      	b.n	800672e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f95d 	bl	80069f0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800673c:	2b00      	cmp	r3, #0
 800673e:	d102      	bne.n	8006746 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f002 fc2f 	bl	8008fa4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006746:	bf00      	nop
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	2b00      	cmp	r3, #0
 800675c:	d006      	beq.n	800676c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	e001      	b.n	8006770 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006770:	68fb      	ldr	r3, [r7, #12]
	}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10d      	bne.n	80067b8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d14d      	bne.n	8006840 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f001 fbb7 	bl	8007f1c <xTaskPriorityDisinherit>
 80067ae:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	609a      	str	r2, [r3, #8]
 80067b6:	e043      	b.n	8006840 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d119      	bne.n	80067f2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6858      	ldr	r0, [r3, #4]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	461a      	mov	r2, r3
 80067c8:	68b9      	ldr	r1, [r7, #8]
 80067ca:	f013 fb88 	bl	8019ede <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	441a      	add	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d32b      	bcc.n	8006840 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	605a      	str	r2, [r3, #4]
 80067f0:	e026      	b.n	8006840 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	68d8      	ldr	r0, [r3, #12]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fa:	461a      	mov	r2, r3
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	f013 fb6e 	bl	8019ede <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	425b      	negs	r3, r3
 800680c:	441a      	add	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d207      	bcs.n	800682e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	425b      	negs	r3, r3
 8006828:	441a      	add	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d105      	bne.n	8006840 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	3b01      	subs	r3, #1
 800683e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006848:	697b      	ldr	r3, [r7, #20]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b082      	sub	sp, #8
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006860:	2b00      	cmp	r3, #0
 8006862:	d018      	beq.n	8006896 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68da      	ldr	r2, [r3, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	441a      	add	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	429a      	cmp	r2, r3
 800687c:	d303      	bcc.n	8006886 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68d9      	ldr	r1, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	461a      	mov	r2, r3
 8006890:	6838      	ldr	r0, [r7, #0]
 8006892:	f013 fb24 	bl	8019ede <memcpy>
	}
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068a6:	f002 f9a1 	bl	8008bec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068b0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068b2:	e011      	b.n	80068d8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d012      	beq.n	80068e2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	3324      	adds	r3, #36	; 0x24
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 f80b 	bl	80078dc <xTaskRemoveFromEventList>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d001      	beq.n	80068d0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068cc:	f001 f8de 	bl	8007a8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	dce9      	bgt.n	80068b4 <prvUnlockQueue+0x16>
 80068e0:	e000      	b.n	80068e4 <prvUnlockQueue+0x46>
					break;
 80068e2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	22ff      	movs	r2, #255	; 0xff
 80068e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068ec:	f002 f9ac 	bl	8008c48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068f0:	f002 f97c 	bl	8008bec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068fa:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068fc:	e011      	b.n	8006922 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d012      	beq.n	800692c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3310      	adds	r3, #16
 800690a:	4618      	mov	r0, r3
 800690c:	f000 ffe6 	bl	80078dc <xTaskRemoveFromEventList>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006916:	f001 f8b9 	bl	8007a8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	3b01      	subs	r3, #1
 800691e:	b2db      	uxtb	r3, r3
 8006920:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006922:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006926:	2b00      	cmp	r3, #0
 8006928:	dce9      	bgt.n	80068fe <prvUnlockQueue+0x60>
 800692a:	e000      	b.n	800692e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800692c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	22ff      	movs	r2, #255	; 0xff
 8006932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006936:	f002 f987 	bl	8008c48 <vPortExitCritical>
}
 800693a:	bf00      	nop
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800694a:	f002 f94f 	bl	8008bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006952:	2b00      	cmp	r3, #0
 8006954:	d102      	bne.n	800695c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006956:	2301      	movs	r3, #1
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	e001      	b.n	8006960 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006960:	f002 f972 	bl	8008c48 <vPortExitCritical>

	return xReturn;
 8006964:	68fb      	ldr	r3, [r7, #12]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006976:	f002 f939 	bl	8008bec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006982:	429a      	cmp	r2, r3
 8006984:	d102      	bne.n	800698c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006986:	2301      	movs	r3, #1
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	e001      	b.n	8006990 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006990:	f002 f95a 	bl	8008c48 <vPortExitCritical>

	return xReturn;
 8006994:	68fb      	ldr	r3, [r7, #12]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069aa:	2300      	movs	r3, #0
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	e014      	b.n	80069da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80069b0:	4a0e      	ldr	r2, [pc, #56]	; (80069ec <vQueueAddToRegistry+0x4c>)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10b      	bne.n	80069d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80069bc:	490b      	ldr	r1, [pc, #44]	; (80069ec <vQueueAddToRegistry+0x4c>)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80069c6:	4a09      	ldr	r2, [pc, #36]	; (80069ec <vQueueAddToRegistry+0x4c>)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	4413      	add	r3, r2
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80069d2:	e005      	b.n	80069e0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3301      	adds	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2b07      	cmp	r3, #7
 80069de:	d9e7      	bls.n	80069b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069e0:	bf00      	nop
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	2001372c 	.word	0x2001372c

080069f0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069f8:	2300      	movs	r3, #0
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	e016      	b.n	8006a2c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80069fe:	4a10      	ldr	r2, [pc, #64]	; (8006a40 <vQueueUnregisterQueue+0x50>)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	4413      	add	r3, r2
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d10b      	bne.n	8006a26 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006a0e:	4a0c      	ldr	r2, [pc, #48]	; (8006a40 <vQueueUnregisterQueue+0x50>)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2100      	movs	r1, #0
 8006a14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006a18:	4a09      	ldr	r2, [pc, #36]	; (8006a40 <vQueueUnregisterQueue+0x50>)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	00db      	lsls	r3, r3, #3
 8006a1e:	4413      	add	r3, r2
 8006a20:	2200      	movs	r2, #0
 8006a22:	605a      	str	r2, [r3, #4]
				break;
 8006a24:	e005      	b.n	8006a32 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b07      	cmp	r3, #7
 8006a30:	d9e5      	bls.n	80069fe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006a32:	bf00      	nop
 8006a34:	3714      	adds	r7, #20
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	2001372c 	.word	0x2001372c

08006a44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a54:	f002 f8ca 	bl	8008bec <vPortEnterCritical>
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a5e:	b25b      	sxtb	r3, r3
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a64:	d103      	bne.n	8006a6e <vQueueWaitForMessageRestricted+0x2a>
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a74:	b25b      	sxtb	r3, r3
 8006a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7a:	d103      	bne.n	8006a84 <vQueueWaitForMessageRestricted+0x40>
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a84:	f002 f8e0 	bl	8008c48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d106      	bne.n	8006a9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	3324      	adds	r3, #36	; 0x24
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 fef5 	bl	8007888 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a9e:	6978      	ldr	r0, [r7, #20]
 8006aa0:	f7ff fefd 	bl	800689e <prvUnlockQueue>
	}
 8006aa4:	bf00      	nop
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b08e      	sub	sp, #56	; 0x38
 8006ab0:	af04      	add	r7, sp, #16
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
 8006ab8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d109      	bne.n	8006ad4 <xTaskCreateStatic+0x28>
 8006ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	623b      	str	r3, [r7, #32]
 8006ad2:	e7fe      	b.n	8006ad2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d109      	bne.n	8006aee <xTaskCreateStatic+0x42>
 8006ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	e7fe      	b.n	8006aec <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006aee:	2360      	movs	r3, #96	; 0x60
 8006af0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b60      	cmp	r3, #96	; 0x60
 8006af6:	d009      	beq.n	8006b0c <xTaskCreateStatic+0x60>
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	e7fe      	b.n	8006b0a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d01e      	beq.n	8006b52 <xTaskCreateStatic+0xa6>
 8006b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d01b      	beq.n	8006b52 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b22:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9303      	str	r3, [sp, #12]
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	9302      	str	r3, [sp, #8]
 8006b34:	f107 0314 	add.w	r3, r7, #20
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f850 	bl	8006bea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b4c:	f000 f8de 	bl	8006d0c <prvAddNewTaskToReadyList>
 8006b50:	e001      	b.n	8006b56 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b56:	697b      	ldr	r3, [r7, #20]
	}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3728      	adds	r7, #40	; 0x28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08c      	sub	sp, #48	; 0x30
 8006b64:	af04      	add	r7, sp, #16
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	603b      	str	r3, [r7, #0]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b70:	88fb      	ldrh	r3, [r7, #6]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4618      	mov	r0, r3
 8006b76:	f002 f953 	bl	8008e20 <pvPortMalloc>
 8006b7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00e      	beq.n	8006ba0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b82:	2060      	movs	r0, #96	; 0x60
 8006b84:	f002 f94c 	bl	8008e20 <pvPortMalloc>
 8006b88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	631a      	str	r2, [r3, #48]	; 0x30
 8006b96:	e005      	b.n	8006ba4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b98:	6978      	ldr	r0, [r7, #20]
 8006b9a:	f002 fa03 	bl	8008fa4 <vPortFree>
 8006b9e:	e001      	b.n	8006ba4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d017      	beq.n	8006bda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006bb2:	88fa      	ldrh	r2, [r7, #6]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9303      	str	r3, [sp, #12]
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	9302      	str	r3, [sp, #8]
 8006bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	9300      	str	r3, [sp, #0]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f000 f80e 	bl	8006bea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bce:	69f8      	ldr	r0, [r7, #28]
 8006bd0:	f000 f89c 	bl	8006d0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	61bb      	str	r3, [r7, #24]
 8006bd8:	e002      	b.n	8006be0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bda:	f04f 33ff 	mov.w	r3, #4294967295
 8006bde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006be0:	69bb      	ldr	r3, [r7, #24]
	}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3720      	adds	r7, #32
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b088      	sub	sp, #32
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	60f8      	str	r0, [r7, #12]
 8006bf2:	60b9      	str	r1, [r7, #8]
 8006bf4:	607a      	str	r2, [r7, #4]
 8006bf6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	461a      	mov	r2, r3
 8006c02:	21a5      	movs	r1, #165	; 0xa5
 8006c04:	f013 f98f 	bl	8019f26 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c12:	3b01      	subs	r3, #1
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	f023 0307 	bic.w	r3, r3, #7
 8006c20:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f003 0307 	and.w	r3, r3, #7
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d009      	beq.n	8006c40 <prvInitialiseNewTask+0x56>
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	e7fe      	b.n	8006c3e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d01f      	beq.n	8006c86 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c46:	2300      	movs	r3, #0
 8006c48:	61fb      	str	r3, [r7, #28]
 8006c4a:	e012      	b.n	8006c72 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	4413      	add	r3, r2
 8006c52:	7819      	ldrb	r1, [r3, #0]
 8006c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	4413      	add	r3, r2
 8006c5a:	3334      	adds	r3, #52	; 0x34
 8006c5c:	460a      	mov	r2, r1
 8006c5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	4413      	add	r3, r2
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d006      	beq.n	8006c7a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	2b0f      	cmp	r3, #15
 8006c76:	d9e9      	bls.n	8006c4c <prvInitialiseNewTask+0x62>
 8006c78:	e000      	b.n	8006c7c <prvInitialiseNewTask+0x92>
			{
				break;
 8006c7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c84:	e003      	b.n	8006c8e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c90:	2b37      	cmp	r3, #55	; 0x37
 8006c92:	d901      	bls.n	8006c98 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c94:	2337      	movs	r3, #55	; 0x37
 8006c96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ca2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cac:	3304      	adds	r3, #4
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe fd8c 	bl	80057cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	3318      	adds	r3, #24
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fe fd87 	bl	80057cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	2200      	movs	r2, #0
 8006cde:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ce8:	683a      	ldr	r2, [r7, #0]
 8006cea:	68f9      	ldr	r1, [r7, #12]
 8006cec:	69b8      	ldr	r0, [r7, #24]
 8006cee:	f001 fe59 	bl	80089a4 <pxPortInitialiseStack>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d02:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d04:	bf00      	nop
 8006d06:	3720      	adds	r7, #32
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d14:	f001 ff6a 	bl	8008bec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d18:	4b2d      	ldr	r3, [pc, #180]	; (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	4a2c      	ldr	r2, [pc, #176]	; (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d22:	4b2c      	ldr	r3, [pc, #176]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d109      	bne.n	8006d3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d2a:	4a2a      	ldr	r2, [pc, #168]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d30:	4b27      	ldr	r3, [pc, #156]	; (8006dd0 <prvAddNewTaskToReadyList+0xc4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d110      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d38:	f000 fecc 	bl	8007ad4 <prvInitialiseTaskLists>
 8006d3c:	e00d      	b.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d3e:	4b26      	ldr	r3, [pc, #152]	; (8006dd8 <prvAddNewTaskToReadyList+0xcc>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d46:	4b23      	ldr	r3, [pc, #140]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d802      	bhi.n	8006d5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d54:	4a1f      	ldr	r2, [pc, #124]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d5a:	4b20      	ldr	r3, [pc, #128]	; (8006ddc <prvAddNewTaskToReadyList+0xd0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	4a1e      	ldr	r2, [pc, #120]	; (8006ddc <prvAddNewTaskToReadyList+0xd0>)
 8006d62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d64:	4b1d      	ldr	r3, [pc, #116]	; (8006ddc <prvAddNewTaskToReadyList+0xd0>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d70:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <prvAddNewTaskToReadyList+0xd4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d903      	bls.n	8006d80 <prvAddNewTaskToReadyList+0x74>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	4a18      	ldr	r2, [pc, #96]	; (8006de0 <prvAddNewTaskToReadyList+0xd4>)
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d84:	4613      	mov	r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4a15      	ldr	r2, [pc, #84]	; (8006de4 <prvAddNewTaskToReadyList+0xd8>)
 8006d8e:	441a      	add	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4619      	mov	r1, r3
 8006d96:	4610      	mov	r0, r2
 8006d98:	f7fe fd25 	bl	80057e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d9c:	f001 ff54 	bl	8008c48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006da0:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <prvAddNewTaskToReadyList+0xcc>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00e      	beq.n	8006dc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006da8:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <prvAddNewTaskToReadyList+0xc8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d207      	bcs.n	8006dc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006db6:	4b0c      	ldr	r3, [pc, #48]	; (8006de8 <prvAddNewTaskToReadyList+0xdc>)
 8006db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20000cc8 	.word	0x20000cc8
 8006dd4:	200007f4 	.word	0x200007f4
 8006dd8:	20000cd4 	.word	0x20000cd4
 8006ddc:	20000ce4 	.word	0x20000ce4
 8006de0:	20000cd0 	.word	0x20000cd0
 8006de4:	200007f8 	.word	0x200007f8
 8006de8:	e000ed04 	.word	0xe000ed04

08006dec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d016      	beq.n	8006e2c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006dfe:	4b13      	ldr	r3, [pc, #76]	; (8006e4c <vTaskDelay+0x60>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d009      	beq.n	8006e1a <vTaskDelay+0x2e>
 8006e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	60bb      	str	r3, [r7, #8]
 8006e18:	e7fe      	b.n	8006e18 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006e1a:	f000 fa85 	bl	8007328 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e1e:	2100      	movs	r1, #0
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f001 fa25 	bl	8008270 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e26:	f000 fa8d 	bl	8007344 <xTaskResumeAll>
 8006e2a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d107      	bne.n	8006e42 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006e32:	4b07      	ldr	r3, [pc, #28]	; (8006e50 <vTaskDelay+0x64>)
 8006e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000cf0 	.word	0x20000cf0
 8006e50:	e000ed04 	.word	0xe000ed04

08006e54 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d109      	bne.n	8006e7a <eTaskGetState+0x26>
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	60bb      	str	r3, [r7, #8]
 8006e78:	e7fe      	b.n	8006e78 <eTaskGetState+0x24>

		if( pxTCB == pxCurrentTCB )
 8006e7a:	4b24      	ldr	r3, [pc, #144]	; (8006f0c <eTaskGetState+0xb8>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69ba      	ldr	r2, [r7, #24]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d102      	bne.n	8006e8a <eTaskGetState+0x36>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006e84:	2300      	movs	r3, #0
 8006e86:	77fb      	strb	r3, [r7, #31]
 8006e88:	e03a      	b.n	8006f00 <eTaskGetState+0xac>
		}
		else
		{
			taskENTER_CRITICAL();
 8006e8a:	f001 feaf 	bl	8008bec <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006e94:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <eTaskGetState+0xbc>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8006e9a:	4b1e      	ldr	r3, [pc, #120]	; (8006f14 <eTaskGetState+0xc0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006ea0:	f001 fed2 	bl	8008c48 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d003      	beq.n	8006eb4 <eTaskGetState+0x60>
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d102      	bne.n	8006eba <eTaskGetState+0x66>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	e022      	b.n	8006f00 <eTaskGetState+0xac>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	4a16      	ldr	r2, [pc, #88]	; (8006f18 <eTaskGetState+0xc4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d112      	bne.n	8006ee8 <eTaskGetState+0x94>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10b      	bne.n	8006ee2 <eTaskGetState+0x8e>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d102      	bne.n	8006edc <eTaskGetState+0x88>
							{
								eReturn = eBlocked;
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	77fb      	strb	r3, [r7, #31]
 8006eda:	e011      	b.n	8006f00 <eTaskGetState+0xac>
							}
							else
							{
								eReturn = eSuspended;
 8006edc:	2303      	movs	r3, #3
 8006ede:	77fb      	strb	r3, [r7, #31]
 8006ee0:	e00e      	b.n	8006f00 <eTaskGetState+0xac>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	77fb      	strb	r3, [r7, #31]
 8006ee6:	e00b      	b.n	8006f00 <eTaskGetState+0xac>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	4a0c      	ldr	r2, [pc, #48]	; (8006f1c <eTaskGetState+0xc8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d002      	beq.n	8006ef6 <eTaskGetState+0xa2>
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d102      	bne.n	8006efc <eTaskGetState+0xa8>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006ef6:	2304      	movs	r3, #4
 8006ef8:	77fb      	strb	r3, [r7, #31]
 8006efa:	e001      	b.n	8006f00 <eTaskGetState+0xac>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006efc:	2301      	movs	r3, #1
 8006efe:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8006f00:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006f02:	4618      	mov	r0, r3
 8006f04:	3720      	adds	r7, #32
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	200007f4 	.word	0x200007f4
 8006f10:	20000c80 	.word	0x20000c80
 8006f14:	20000c84 	.word	0x20000c84
 8006f18:	20000cb4 	.word	0x20000cb4
 8006f1c:	20000c9c 	.word	0x20000c9c

08006f20 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b37      	cmp	r3, #55	; 0x37
 8006f32:	d909      	bls.n	8006f48 <vTaskPrioritySet+0x28>
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	60fb      	str	r3, [r7, #12]
 8006f46:	e7fe      	b.n	8006f46 <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2b37      	cmp	r3, #55	; 0x37
 8006f4c:	d901      	bls.n	8006f52 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f4e:	2337      	movs	r3, #55	; 0x37
 8006f50:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8006f52:	f001 fe4b 	bl	8008bec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d102      	bne.n	8006f62 <vTaskPrioritySet+0x42>
 8006f5c:	4b3a      	ldr	r3, [pc, #232]	; (8007048 <vTaskPrioritySet+0x128>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	e000      	b.n	8006f64 <vTaskPrioritySet+0x44>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6a:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d063      	beq.n	800703c <vTaskPrioritySet+0x11c>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d90d      	bls.n	8006f98 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8006f7c:	4b32      	ldr	r3, [pc, #200]	; (8007048 <vTaskPrioritySet+0x128>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d00f      	beq.n	8006fa6 <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8006f86:	4b30      	ldr	r3, [pc, #192]	; (8007048 <vTaskPrioritySet+0x128>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d309      	bcc.n	8006fa6 <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 8006f92:	2301      	movs	r3, #1
 8006f94:	61fb      	str	r3, [r7, #28]
 8006f96:	e006      	b.n	8006fa6 <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8006f98:	4b2b      	ldr	r3, [pc, #172]	; (8007048 <vTaskPrioritySet+0x128>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	69ba      	ldr	r2, [r7, #24]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d101      	bne.n	8006fa6 <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006faa:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d102      	bne.n	8006fbe <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	db04      	blt.n	8006fd6 <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	6959      	ldr	r1, [r3, #20]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4a19      	ldr	r2, [pc, #100]	; (800704c <vTaskPrioritySet+0x12c>)
 8006fe6:	4413      	add	r3, r2
 8006fe8:	4299      	cmp	r1, r3
 8006fea:	d11c      	bne.n	8007026 <vTaskPrioritySet+0x106>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fe fc55 	bl	80058a0 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffa:	4b15      	ldr	r3, [pc, #84]	; (8007050 <vTaskPrioritySet+0x130>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d903      	bls.n	800700a <vTaskPrioritySet+0xea>
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	4a12      	ldr	r2, [pc, #72]	; (8007050 <vTaskPrioritySet+0x130>)
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4a0d      	ldr	r2, [pc, #52]	; (800704c <vTaskPrioritySet+0x12c>)
 8007018:	441a      	add	r2, r3
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	3304      	adds	r3, #4
 800701e:	4619      	mov	r1, r3
 8007020:	4610      	mov	r0, r2
 8007022:	f7fe fbe0 	bl	80057e6 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d007      	beq.n	800703c <vTaskPrioritySet+0x11c>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800702c:	4b09      	ldr	r3, [pc, #36]	; (8007054 <vTaskPrioritySet+0x134>)
 800702e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800703c:	f001 fe04 	bl	8008c48 <vPortExitCritical>
	}
 8007040:	bf00      	nop
 8007042:	3720      	adds	r7, #32
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	200007f4 	.word	0x200007f4
 800704c:	200007f8 	.word	0x200007f8
 8007050:	20000cd0 	.word	0x20000cd0
 8007054:	e000ed04 	.word	0xe000ed04

08007058 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007060:	f001 fdc4 	bl	8008bec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d102      	bne.n	8007070 <vTaskSuspend+0x18>
 800706a:	4b2f      	ldr	r3, [pc, #188]	; (8007128 <vTaskSuspend+0xd0>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	e000      	b.n	8007072 <vTaskSuspend+0x1a>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3304      	adds	r3, #4
 8007078:	4618      	mov	r0, r3
 800707a:	f7fe fc11 	bl	80058a0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3318      	adds	r3, #24
 800708a:	4618      	mov	r0, r3
 800708c:	f7fe fc08 	bl	80058a0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	3304      	adds	r3, #4
 8007094:	4619      	mov	r1, r3
 8007096:	4825      	ldr	r0, [pc, #148]	; (800712c <vTaskSuspend+0xd4>)
 8007098:	f7fe fba5 	bl	80057e6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d103      	bne.n	80070b0 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80070b0:	f001 fdca 	bl	8008c48 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80070b4:	4b1e      	ldr	r3, [pc, #120]	; (8007130 <vTaskSuspend+0xd8>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80070bc:	f001 fd96 	bl	8008bec <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80070c0:	f000 fe76 	bl	8007db0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80070c4:	f001 fdc0 	bl	8008c48 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80070c8:	4b17      	ldr	r3, [pc, #92]	; (8007128 <vTaskSuspend+0xd0>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d126      	bne.n	8007120 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 80070d2:	4b17      	ldr	r3, [pc, #92]	; (8007130 <vTaskSuspend+0xd8>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d016      	beq.n	8007108 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80070da:	4b16      	ldr	r3, [pc, #88]	; (8007134 <vTaskSuspend+0xdc>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <vTaskSuspend+0x9e>
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	60bb      	str	r3, [r7, #8]
 80070f4:	e7fe      	b.n	80070f4 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 80070f6:	4b10      	ldr	r3, [pc, #64]	; (8007138 <vTaskSuspend+0xe0>)
 80070f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007106:	e00b      	b.n	8007120 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8007108:	4b08      	ldr	r3, [pc, #32]	; (800712c <vTaskSuspend+0xd4>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	4b0b      	ldr	r3, [pc, #44]	; (800713c <vTaskSuspend+0xe4>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	429a      	cmp	r2, r3
 8007112:	d103      	bne.n	800711c <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <vTaskSuspend+0xd0>)
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]
	}
 800711a:	e001      	b.n	8007120 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 800711c:	f000 fb18 	bl	8007750 <vTaskSwitchContext>
	}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	200007f4 	.word	0x200007f4
 800712c:	20000cb4 	.word	0x20000cb4
 8007130:	20000cd4 	.word	0x20000cd4
 8007134:	20000cf0 	.word	0x20000cf0
 8007138:	e000ed04 	.word	0xe000ed04
 800713c:	20000cc8 	.word	0x20000cc8

08007140 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8007148:	2300      	movs	r3, #0
 800714a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <prvTaskIsTaskSuspended+0x2a>
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	e7fe      	b.n	8007168 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	4a0a      	ldr	r2, [pc, #40]	; (8007198 <prvTaskIsTaskSuspended+0x58>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d10a      	bne.n	800718a <prvTaskIsTaskSuspended+0x4a>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007178:	4a08      	ldr	r2, [pc, #32]	; (800719c <prvTaskIsTaskSuspended+0x5c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d005      	beq.n	800718a <prvTaskIsTaskSuspended+0x4a>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <prvTaskIsTaskSuspended+0x4a>
				{
					xReturn = pdTRUE;
 8007186:	2301      	movs	r3, #1
 8007188:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800718a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800718c:	4618      	mov	r0, r3
 800718e:	371c      	adds	r7, #28
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	20000cb4 	.word	0x20000cb4
 800719c:	20000c88 	.word	0x20000c88

080071a0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d109      	bne.n	80071c6 <vTaskResume+0x26>
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	60bb      	str	r3, [r7, #8]
 80071c4:	e7fe      	b.n	80071c4 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80071c6:	4b21      	ldr	r3, [pc, #132]	; (800724c <vTaskResume+0xac>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d038      	beq.n	8007242 <vTaskResume+0xa2>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d035      	beq.n	8007242 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 80071d6:	f001 fd09 	bl	8008bec <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7ff ffb0 	bl	8007140 <prvTaskIsTaskSuspended>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d02b      	beq.n	800723e <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3304      	adds	r3, #4
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fb58 	bl	80058a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	4b16      	ldr	r3, [pc, #88]	; (8007250 <vTaskResume+0xb0>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d903      	bls.n	8007204 <vTaskResume+0x64>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007200:	4a13      	ldr	r2, [pc, #76]	; (8007250 <vTaskResume+0xb0>)
 8007202:	6013      	str	r3, [r2, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007208:	4613      	mov	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4a10      	ldr	r2, [pc, #64]	; (8007254 <vTaskResume+0xb4>)
 8007212:	441a      	add	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3304      	adds	r3, #4
 8007218:	4619      	mov	r1, r3
 800721a:	4610      	mov	r0, r2
 800721c:	f7fe fae3 	bl	80057e6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007224:	4b09      	ldr	r3, [pc, #36]	; (800724c <vTaskResume+0xac>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722a:	429a      	cmp	r2, r3
 800722c:	d307      	bcc.n	800723e <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800722e:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <vTaskResume+0xb8>)
 8007230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	f3bf 8f4f 	dsb	sy
 800723a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800723e:	f001 fd03 	bl	8008c48 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007242:	bf00      	nop
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	200007f4 	.word	0x200007f4
 8007250:	20000cd0 	.word	0x20000cd0
 8007254:	200007f8 	.word	0x200007f8
 8007258:	e000ed04 	.word	0xe000ed04

0800725c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08a      	sub	sp, #40	; 0x28
 8007260:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007266:	2300      	movs	r3, #0
 8007268:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800726a:	463a      	mov	r2, r7
 800726c:	1d39      	adds	r1, r7, #4
 800726e:	f107 0308 	add.w	r3, r7, #8
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fa56 	bl	8005724 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	9202      	str	r2, [sp, #8]
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	2300      	movs	r3, #0
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	2300      	movs	r3, #0
 8007288:	460a      	mov	r2, r1
 800728a:	4921      	ldr	r1, [pc, #132]	; (8007310 <vTaskStartScheduler+0xb4>)
 800728c:	4821      	ldr	r0, [pc, #132]	; (8007314 <vTaskStartScheduler+0xb8>)
 800728e:	f7ff fc0d 	bl	8006aac <xTaskCreateStatic>
 8007292:	4602      	mov	r2, r0
 8007294:	4b20      	ldr	r3, [pc, #128]	; (8007318 <vTaskStartScheduler+0xbc>)
 8007296:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007298:	4b1f      	ldr	r3, [pc, #124]	; (8007318 <vTaskStartScheduler+0xbc>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80072a0:	2301      	movs	r3, #1
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	e001      	b.n	80072aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80072a6:	2300      	movs	r3, #0
 80072a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d102      	bne.n	80072b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80072b0:	f001 f832 	bl	8008318 <xTimerCreateTimerTask>
 80072b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d117      	bne.n	80072ec <vTaskStartScheduler+0x90>
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072ce:	4b13      	ldr	r3, [pc, #76]	; (800731c <vTaskStartScheduler+0xc0>)
 80072d0:	f04f 32ff 	mov.w	r2, #4294967295
 80072d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072d6:	4b12      	ldr	r3, [pc, #72]	; (8007320 <vTaskStartScheduler+0xc4>)
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072dc:	4b11      	ldr	r3, [pc, #68]	; (8007324 <vTaskStartScheduler+0xc8>)
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80072e2:	f7f9 f96d 	bl	80005c0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072e6:	f001 fbe3 	bl	8008ab0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072ea:	e00d      	b.n	8007308 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f2:	d109      	bne.n	8007308 <vTaskStartScheduler+0xac>
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	60fb      	str	r3, [r7, #12]
 8007306:	e7fe      	b.n	8007306 <vTaskStartScheduler+0xaa>
}
 8007308:	bf00      	nop
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	0801b318 	.word	0x0801b318
 8007314:	08007aa5 	.word	0x08007aa5
 8007318:	20000cec 	.word	0x20000cec
 800731c:	20000ce8 	.word	0x20000ce8
 8007320:	20000cd4 	.word	0x20000cd4
 8007324:	20000ccc 	.word	0x20000ccc

08007328 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007328:	b480      	push	{r7}
 800732a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800732c:	4b04      	ldr	r3, [pc, #16]	; (8007340 <vTaskSuspendAll+0x18>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3301      	adds	r3, #1
 8007332:	4a03      	ldr	r2, [pc, #12]	; (8007340 <vTaskSuspendAll+0x18>)
 8007334:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007336:	bf00      	nop
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	20000cf0 	.word	0x20000cf0

08007344 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800734e:	2300      	movs	r3, #0
 8007350:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007352:	4b41      	ldr	r3, [pc, #260]	; (8007458 <xTaskResumeAll+0x114>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d109      	bne.n	800736e <xTaskResumeAll+0x2a>
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	e7fe      	b.n	800736c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800736e:	f001 fc3d 	bl	8008bec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007372:	4b39      	ldr	r3, [pc, #228]	; (8007458 <xTaskResumeAll+0x114>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	3b01      	subs	r3, #1
 8007378:	4a37      	ldr	r2, [pc, #220]	; (8007458 <xTaskResumeAll+0x114>)
 800737a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800737c:	4b36      	ldr	r3, [pc, #216]	; (8007458 <xTaskResumeAll+0x114>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d162      	bne.n	800744a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007384:	4b35      	ldr	r3, [pc, #212]	; (800745c <xTaskResumeAll+0x118>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d05e      	beq.n	800744a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800738c:	e02f      	b.n	80073ee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800738e:	4b34      	ldr	r3, [pc, #208]	; (8007460 <xTaskResumeAll+0x11c>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3318      	adds	r3, #24
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fa80 	bl	80058a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3304      	adds	r3, #4
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fe fa7b 	bl	80058a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ae:	4b2d      	ldr	r3, [pc, #180]	; (8007464 <xTaskResumeAll+0x120>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d903      	bls.n	80073be <xTaskResumeAll+0x7a>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ba:	4a2a      	ldr	r2, [pc, #168]	; (8007464 <xTaskResumeAll+0x120>)
 80073bc:	6013      	str	r3, [r2, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c2:	4613      	mov	r3, r2
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	4413      	add	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4a27      	ldr	r2, [pc, #156]	; (8007468 <xTaskResumeAll+0x124>)
 80073cc:	441a      	add	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4619      	mov	r1, r3
 80073d4:	4610      	mov	r0, r2
 80073d6:	f7fe fa06 	bl	80057e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073de:	4b23      	ldr	r3, [pc, #140]	; (800746c <xTaskResumeAll+0x128>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d302      	bcc.n	80073ee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80073e8:	4b21      	ldr	r3, [pc, #132]	; (8007470 <xTaskResumeAll+0x12c>)
 80073ea:	2201      	movs	r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073ee:	4b1c      	ldr	r3, [pc, #112]	; (8007460 <xTaskResumeAll+0x11c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1cb      	bne.n	800738e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073fc:	f000 fcd8 	bl	8007db0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007400:	4b1c      	ldr	r3, [pc, #112]	; (8007474 <xTaskResumeAll+0x130>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d010      	beq.n	800742e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800740c:	f000 f8e8 	bl	80075e0 <xTaskIncrementTick>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007416:	4b16      	ldr	r3, [pc, #88]	; (8007470 <xTaskResumeAll+0x12c>)
 8007418:	2201      	movs	r2, #1
 800741a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3b01      	subs	r3, #1
 8007420:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1f1      	bne.n	800740c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007428:	4b12      	ldr	r3, [pc, #72]	; (8007474 <xTaskResumeAll+0x130>)
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800742e:	4b10      	ldr	r3, [pc, #64]	; (8007470 <xTaskResumeAll+0x12c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d009      	beq.n	800744a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007436:	2301      	movs	r3, #1
 8007438:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800743a:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <xTaskResumeAll+0x134>)
 800743c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800744a:	f001 fbfd 	bl	8008c48 <vPortExitCritical>

	return xAlreadyYielded;
 800744e:	68bb      	ldr	r3, [r7, #8]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	20000cf0 	.word	0x20000cf0
 800745c:	20000cc8 	.word	0x20000cc8
 8007460:	20000c88 	.word	0x20000c88
 8007464:	20000cd0 	.word	0x20000cd0
 8007468:	200007f8 	.word	0x200007f8
 800746c:	200007f4 	.word	0x200007f4
 8007470:	20000cdc 	.word	0x20000cdc
 8007474:	20000cd8 	.word	0x20000cd8
 8007478:	e000ed04 	.word	0xe000ed04

0800747c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007482:	4b05      	ldr	r3, [pc, #20]	; (8007498 <xTaskGetTickCount+0x1c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007488:	687b      	ldr	r3, [r7, #4]
}
 800748a:	4618      	mov	r0, r3
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	20000ccc 	.word	0x20000ccc

0800749c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074a2:	f001 fc7f 	bl	8008da4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80074a6:	2300      	movs	r3, #0
 80074a8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80074aa:	4b04      	ldr	r3, [pc, #16]	; (80074bc <xTaskGetTickCountFromISR+0x20>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80074b0:	683b      	ldr	r3, [r7, #0]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20000ccc 	.word	0x20000ccc

080074c0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b086      	sub	sp, #24
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80074cc:	2300      	movs	r3, #0
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	2338      	movs	r3, #56	; 0x38
 80074d2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80074d4:	f7ff ff28 	bl	8007328 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80074d8:	4b3b      	ldr	r3, [pc, #236]	; (80075c8 <uxTaskGetSystemState+0x108>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d36a      	bcc.n	80075b8 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	4613      	mov	r3, r2
 80074ec:	00db      	lsls	r3, r3, #3
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	461a      	mov	r2, r3
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	1898      	adds	r0, r3, r2
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	4613      	mov	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4a32      	ldr	r2, [pc, #200]	; (80075cc <uxTaskGetSystemState+0x10c>)
 8007504:	4413      	add	r3, r2
 8007506:	2201      	movs	r2, #1
 8007508:	4619      	mov	r1, r3
 800750a:	f000 fbb5 	bl	8007c78 <prvListTasksWithinSingleList>
 800750e:	4602      	mov	r2, r0
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	4413      	add	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e2      	bne.n	80074e2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800751c:	697a      	ldr	r2, [r7, #20]
 800751e:	4613      	mov	r3, r2
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	4413      	add	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	461a      	mov	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	1898      	adds	r0, r3, r2
 800752c:	4b28      	ldr	r3, [pc, #160]	; (80075d0 <uxTaskGetSystemState+0x110>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2202      	movs	r2, #2
 8007532:	4619      	mov	r1, r3
 8007534:	f000 fba0 	bl	8007c78 <prvListTasksWithinSingleList>
 8007538:	4602      	mov	r2, r0
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	4413      	add	r3, r2
 800753e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	4613      	mov	r3, r2
 8007544:	00db      	lsls	r3, r3, #3
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	461a      	mov	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	1898      	adds	r0, r3, r2
 8007550:	4b20      	ldr	r3, [pc, #128]	; (80075d4 <uxTaskGetSystemState+0x114>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2202      	movs	r2, #2
 8007556:	4619      	mov	r1, r3
 8007558:	f000 fb8e 	bl	8007c78 <prvListTasksWithinSingleList>
 800755c:	4602      	mov	r2, r0
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	4413      	add	r3, r2
 8007562:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	4613      	mov	r3, r2
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	461a      	mov	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	2204      	movs	r2, #4
 8007576:	4918      	ldr	r1, [pc, #96]	; (80075d8 <uxTaskGetSystemState+0x118>)
 8007578:	4618      	mov	r0, r3
 800757a:	f000 fb7d 	bl	8007c78 <prvListTasksWithinSingleList>
 800757e:	4602      	mov	r2, r0
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	4413      	add	r3, r2
 8007584:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	4613      	mov	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	4413      	add	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	461a      	mov	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	2203      	movs	r2, #3
 8007598:	4910      	ldr	r1, [pc, #64]	; (80075dc <uxTaskGetSystemState+0x11c>)
 800759a:	4618      	mov	r0, r3
 800759c:	f000 fb6c 	bl	8007c78 <prvListTasksWithinSingleList>
 80075a0:	4602      	mov	r2, r0
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	4413      	add	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d004      	beq.n	80075b8 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80075ae:	f7f9 f80e 	bl	80005ce <getRunTimeCounterValue>
 80075b2:	4602      	mov	r2, r0
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80075b8:	f7ff fec4 	bl	8007344 <xTaskResumeAll>

		return uxTask;
 80075bc:	697b      	ldr	r3, [r7, #20]
	}
 80075be:	4618      	mov	r0, r3
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20000cc8 	.word	0x20000cc8
 80075cc:	200007f8 	.word	0x200007f8
 80075d0:	20000c80 	.word	0x20000c80
 80075d4:	20000c84 	.word	0x20000c84
 80075d8:	20000c9c 	.word	0x20000c9c
 80075dc:	20000cb4 	.word	0x20000cb4

080075e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075e6:	2300      	movs	r3, #0
 80075e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ea:	4b4e      	ldr	r3, [pc, #312]	; (8007724 <xTaskIncrementTick+0x144>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f040 8088 	bne.w	8007704 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075f4:	4b4c      	ldr	r3, [pc, #304]	; (8007728 <xTaskIncrementTick+0x148>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3301      	adds	r3, #1
 80075fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075fc:	4a4a      	ldr	r2, [pc, #296]	; (8007728 <xTaskIncrementTick+0x148>)
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d11f      	bne.n	8007648 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007608:	4b48      	ldr	r3, [pc, #288]	; (800772c <xTaskIncrementTick+0x14c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d009      	beq.n	8007626 <xTaskIncrementTick+0x46>
 8007612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	e7fe      	b.n	8007624 <xTaskIncrementTick+0x44>
 8007626:	4b41      	ldr	r3, [pc, #260]	; (800772c <xTaskIncrementTick+0x14c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	4b40      	ldr	r3, [pc, #256]	; (8007730 <xTaskIncrementTick+0x150>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a3e      	ldr	r2, [pc, #248]	; (800772c <xTaskIncrementTick+0x14c>)
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	4a3e      	ldr	r2, [pc, #248]	; (8007730 <xTaskIncrementTick+0x150>)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	4b3e      	ldr	r3, [pc, #248]	; (8007734 <xTaskIncrementTick+0x154>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3301      	adds	r3, #1
 8007640:	4a3c      	ldr	r2, [pc, #240]	; (8007734 <xTaskIncrementTick+0x154>)
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	f000 fbb4 	bl	8007db0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007648:	4b3b      	ldr	r3, [pc, #236]	; (8007738 <xTaskIncrementTick+0x158>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	429a      	cmp	r2, r3
 8007650:	d349      	bcc.n	80076e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007652:	4b36      	ldr	r3, [pc, #216]	; (800772c <xTaskIncrementTick+0x14c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d104      	bne.n	8007666 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800765c:	4b36      	ldr	r3, [pc, #216]	; (8007738 <xTaskIncrementTick+0x158>)
 800765e:	f04f 32ff 	mov.w	r2, #4294967295
 8007662:	601a      	str	r2, [r3, #0]
					break;
 8007664:	e03f      	b.n	80076e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007666:	4b31      	ldr	r3, [pc, #196]	; (800772c <xTaskIncrementTick+0x14c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	429a      	cmp	r2, r3
 800767c:	d203      	bcs.n	8007686 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800767e:	4a2e      	ldr	r2, [pc, #184]	; (8007738 <xTaskIncrementTick+0x158>)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007684:	e02f      	b.n	80076e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	3304      	adds	r3, #4
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe f908 	bl	80058a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	3318      	adds	r3, #24
 800769c:	4618      	mov	r0, r3
 800769e:	f7fe f8ff 	bl	80058a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a6:	4b25      	ldr	r3, [pc, #148]	; (800773c <xTaskIncrementTick+0x15c>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d903      	bls.n	80076b6 <xTaskIncrementTick+0xd6>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b2:	4a22      	ldr	r2, [pc, #136]	; (800773c <xTaskIncrementTick+0x15c>)
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ba:	4613      	mov	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <xTaskIncrementTick+0x160>)
 80076c4:	441a      	add	r2, r3
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	3304      	adds	r3, #4
 80076ca:	4619      	mov	r1, r3
 80076cc:	4610      	mov	r0, r2
 80076ce:	f7fe f88a 	bl	80057e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d6:	4b1b      	ldr	r3, [pc, #108]	; (8007744 <xTaskIncrementTick+0x164>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076dc:	429a      	cmp	r2, r3
 80076de:	d3b8      	bcc.n	8007652 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80076e0:	2301      	movs	r3, #1
 80076e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076e4:	e7b5      	b.n	8007652 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076e6:	4b17      	ldr	r3, [pc, #92]	; (8007744 <xTaskIncrementTick+0x164>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ec:	4914      	ldr	r1, [pc, #80]	; (8007740 <xTaskIncrementTick+0x160>)
 80076ee:	4613      	mov	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	440b      	add	r3, r1
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d907      	bls.n	800770e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80076fe:	2301      	movs	r3, #1
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	e004      	b.n	800770e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007704:	4b10      	ldr	r3, [pc, #64]	; (8007748 <xTaskIncrementTick+0x168>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3301      	adds	r3, #1
 800770a:	4a0f      	ldr	r2, [pc, #60]	; (8007748 <xTaskIncrementTick+0x168>)
 800770c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800770e:	4b0f      	ldr	r3, [pc, #60]	; (800774c <xTaskIncrementTick+0x16c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007716:	2301      	movs	r3, #1
 8007718:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800771a:	697b      	ldr	r3, [r7, #20]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20000cf0 	.word	0x20000cf0
 8007728:	20000ccc 	.word	0x20000ccc
 800772c:	20000c80 	.word	0x20000c80
 8007730:	20000c84 	.word	0x20000c84
 8007734:	20000ce0 	.word	0x20000ce0
 8007738:	20000ce8 	.word	0x20000ce8
 800773c:	20000cd0 	.word	0x20000cd0
 8007740:	200007f8 	.word	0x200007f8
 8007744:	200007f4 	.word	0x200007f4
 8007748:	20000cd8 	.word	0x20000cd8
 800774c:	20000cdc 	.word	0x20000cdc

08007750 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007756:	4b33      	ldr	r3, [pc, #204]	; (8007824 <vTaskSwitchContext+0xd4>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800775e:	4b32      	ldr	r3, [pc, #200]	; (8007828 <vTaskSwitchContext+0xd8>)
 8007760:	2201      	movs	r2, #1
 8007762:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007764:	e059      	b.n	800781a <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8007766:	4b30      	ldr	r3, [pc, #192]	; (8007828 <vTaskSwitchContext+0xd8>)
 8007768:	2200      	movs	r2, #0
 800776a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800776c:	f7f8 ff2f 	bl	80005ce <getRunTimeCounterValue>
 8007770:	4602      	mov	r2, r0
 8007772:	4b2e      	ldr	r3, [pc, #184]	; (800782c <vTaskSwitchContext+0xdc>)
 8007774:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8007776:	4b2d      	ldr	r3, [pc, #180]	; (800782c <vTaskSwitchContext+0xdc>)
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	4b2d      	ldr	r3, [pc, #180]	; (8007830 <vTaskSwitchContext+0xe0>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	429a      	cmp	r2, r3
 8007780:	d909      	bls.n	8007796 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8007782:	4b2c      	ldr	r3, [pc, #176]	; (8007834 <vTaskSwitchContext+0xe4>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007788:	4a28      	ldr	r2, [pc, #160]	; (800782c <vTaskSwitchContext+0xdc>)
 800778a:	6810      	ldr	r0, [r2, #0]
 800778c:	4a28      	ldr	r2, [pc, #160]	; (8007830 <vTaskSwitchContext+0xe0>)
 800778e:	6812      	ldr	r2, [r2, #0]
 8007790:	1a82      	subs	r2, r0, r2
 8007792:	440a      	add	r2, r1
 8007794:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8007796:	4b25      	ldr	r3, [pc, #148]	; (800782c <vTaskSwitchContext+0xdc>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a25      	ldr	r2, [pc, #148]	; (8007830 <vTaskSwitchContext+0xe0>)
 800779c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800779e:	4b26      	ldr	r3, [pc, #152]	; (8007838 <vTaskSwitchContext+0xe8>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	e00f      	b.n	80077c6 <vTaskSwitchContext+0x76>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d109      	bne.n	80077c0 <vTaskSwitchContext+0x70>
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	e7fe      	b.n	80077be <vTaskSwitchContext+0x6e>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3b01      	subs	r3, #1
 80077c4:	60fb      	str	r3, [r7, #12]
 80077c6:	491d      	ldr	r1, [pc, #116]	; (800783c <vTaskSwitchContext+0xec>)
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	4613      	mov	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	4413      	add	r3, r2
 80077d0:	009b      	lsls	r3, r3, #2
 80077d2:	440b      	add	r3, r1
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0e5      	beq.n	80077a6 <vTaskSwitchContext+0x56>
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4613      	mov	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4a15      	ldr	r2, [pc, #84]	; (800783c <vTaskSwitchContext+0xec>)
 80077e6:	4413      	add	r3, r2
 80077e8:	60bb      	str	r3, [r7, #8]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	605a      	str	r2, [r3, #4]
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	3308      	adds	r3, #8
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d104      	bne.n	800780a <vTaskSwitchContext+0xba>
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	605a      	str	r2, [r3, #4]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	4a08      	ldr	r2, [pc, #32]	; (8007834 <vTaskSwitchContext+0xe4>)
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	4a08      	ldr	r2, [pc, #32]	; (8007838 <vTaskSwitchContext+0xe8>)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6013      	str	r3, [r2, #0]
}
 800781a:	bf00      	nop
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20000cf0 	.word	0x20000cf0
 8007828:	20000cdc 	.word	0x20000cdc
 800782c:	20000cf8 	.word	0x20000cf8
 8007830:	20000cf4 	.word	0x20000cf4
 8007834:	200007f4 	.word	0x200007f4
 8007838:	20000cd0 	.word	0x20000cd0
 800783c:	200007f8 	.word	0x200007f8

08007840 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d109      	bne.n	8007864 <vTaskPlaceOnEventList+0x24>
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	e7fe      	b.n	8007862 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007864:	4b07      	ldr	r3, [pc, #28]	; (8007884 <vTaskPlaceOnEventList+0x44>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	3318      	adds	r3, #24
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7fd ffde 	bl	800582e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007872:	2101      	movs	r1, #1
 8007874:	6838      	ldr	r0, [r7, #0]
 8007876:	f000 fcfb 	bl	8008270 <prvAddCurrentTaskToDelayedList>
}
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	200007f4 	.word	0x200007f4

08007888 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d109      	bne.n	80078ae <vTaskPlaceOnEventListRestricted+0x26>
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	e7fe      	b.n	80078ac <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078ae:	4b0a      	ldr	r3, [pc, #40]	; (80078d8 <vTaskPlaceOnEventListRestricted+0x50>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3318      	adds	r3, #24
 80078b4:	4619      	mov	r1, r3
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f7fd ff95 	bl	80057e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d002      	beq.n	80078c8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80078c2:	f04f 33ff 	mov.w	r3, #4294967295
 80078c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	68b8      	ldr	r0, [r7, #8]
 80078cc:	f000 fcd0 	bl	8008270 <prvAddCurrentTaskToDelayedList>
	}
 80078d0:	bf00      	nop
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	200007f4 	.word	0x200007f4

080078dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <xTaskRemoveFromEventList+0x2a>
 80078f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	e7fe      	b.n	8007904 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	3318      	adds	r3, #24
 800790a:	4618      	mov	r0, r3
 800790c:	f7fd ffc8 	bl	80058a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007910:	4b1d      	ldr	r3, [pc, #116]	; (8007988 <xTaskRemoveFromEventList+0xac>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d11d      	bne.n	8007954 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	3304      	adds	r3, #4
 800791c:	4618      	mov	r0, r3
 800791e:	f7fd ffbf 	bl	80058a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007926:	4b19      	ldr	r3, [pc, #100]	; (800798c <xTaskRemoveFromEventList+0xb0>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	429a      	cmp	r2, r3
 800792c:	d903      	bls.n	8007936 <xTaskRemoveFromEventList+0x5a>
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007932:	4a16      	ldr	r2, [pc, #88]	; (800798c <xTaskRemoveFromEventList+0xb0>)
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4a13      	ldr	r2, [pc, #76]	; (8007990 <xTaskRemoveFromEventList+0xb4>)
 8007944:	441a      	add	r2, r3
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	3304      	adds	r3, #4
 800794a:	4619      	mov	r1, r3
 800794c:	4610      	mov	r0, r2
 800794e:	f7fd ff4a 	bl	80057e6 <vListInsertEnd>
 8007952:	e005      	b.n	8007960 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	3318      	adds	r3, #24
 8007958:	4619      	mov	r1, r3
 800795a:	480e      	ldr	r0, [pc, #56]	; (8007994 <xTaskRemoveFromEventList+0xb8>)
 800795c:	f7fd ff43 	bl	80057e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007964:	4b0c      	ldr	r3, [pc, #48]	; (8007998 <xTaskRemoveFromEventList+0xbc>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796a:	429a      	cmp	r2, r3
 800796c:	d905      	bls.n	800797a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800796e:	2301      	movs	r3, #1
 8007970:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007972:	4b0a      	ldr	r3, [pc, #40]	; (800799c <xTaskRemoveFromEventList+0xc0>)
 8007974:	2201      	movs	r2, #1
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	e001      	b.n	800797e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800797a:	2300      	movs	r3, #0
 800797c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800797e:	697b      	ldr	r3, [r7, #20]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20000cf0 	.word	0x20000cf0
 800798c:	20000cd0 	.word	0x20000cd0
 8007990:	200007f8 	.word	0x200007f8
 8007994:	20000c88 	.word	0x20000c88
 8007998:	200007f4 	.word	0x200007f4
 800799c:	20000cdc 	.word	0x20000cdc

080079a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079a8:	4b06      	ldr	r3, [pc, #24]	; (80079c4 <vTaskInternalSetTimeOutState+0x24>)
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80079b0:	4b05      	ldr	r3, [pc, #20]	; (80079c8 <vTaskInternalSetTimeOutState+0x28>)
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	605a      	str	r2, [r3, #4]
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	20000ce0 	.word	0x20000ce0
 80079c8:	20000ccc 	.word	0x20000ccc

080079cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d109      	bne.n	80079f0 <xTaskCheckForTimeOut+0x24>
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	613b      	str	r3, [r7, #16]
 80079ee:	e7fe      	b.n	80079ee <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <xTaskCheckForTimeOut+0x3e>
 80079f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fa:	f383 8811 	msr	BASEPRI, r3
 80079fe:	f3bf 8f6f 	isb	sy
 8007a02:	f3bf 8f4f 	dsb	sy
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	e7fe      	b.n	8007a08 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007a0a:	f001 f8ef 	bl	8008bec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a0e:	4b1d      	ldr	r3, [pc, #116]	; (8007a84 <xTaskCheckForTimeOut+0xb8>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a26:	d102      	bne.n	8007a2e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61fb      	str	r3, [r7, #28]
 8007a2c:	e023      	b.n	8007a76 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	4b15      	ldr	r3, [pc, #84]	; (8007a88 <xTaskCheckForTimeOut+0xbc>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d007      	beq.n	8007a4a <xTaskCheckForTimeOut+0x7e>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d302      	bcc.n	8007a4a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a44:	2301      	movs	r3, #1
 8007a46:	61fb      	str	r3, [r7, #28]
 8007a48:	e015      	b.n	8007a76 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d20b      	bcs.n	8007a6c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	1ad2      	subs	r2, r2, r3
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff ff9d 	bl	80079a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	61fb      	str	r3, [r7, #28]
 8007a6a:	e004      	b.n	8007a76 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a72:	2301      	movs	r3, #1
 8007a74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a76:	f001 f8e7 	bl	8008c48 <vPortExitCritical>

	return xReturn;
 8007a7a:	69fb      	ldr	r3, [r7, #28]
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3720      	adds	r7, #32
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20000ccc 	.word	0x20000ccc
 8007a88:	20000ce0 	.word	0x20000ce0

08007a8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a90:	4b03      	ldr	r3, [pc, #12]	; (8007aa0 <vTaskMissedYield+0x14>)
 8007a92:	2201      	movs	r2, #1
 8007a94:	601a      	str	r2, [r3, #0]
}
 8007a96:	bf00      	nop
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	20000cdc 	.word	0x20000cdc

08007aa4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007aac:	f000 f852 	bl	8007b54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ab0:	4b06      	ldr	r3, [pc, #24]	; (8007acc <prvIdleTask+0x28>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d9f9      	bls.n	8007aac <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ab8:	4b05      	ldr	r3, [pc, #20]	; (8007ad0 <prvIdleTask+0x2c>)
 8007aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007abe:	601a      	str	r2, [r3, #0]
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ac8:	e7f0      	b.n	8007aac <prvIdleTask+0x8>
 8007aca:	bf00      	nop
 8007acc:	200007f8 	.word	0x200007f8
 8007ad0:	e000ed04 	.word	0xe000ed04

08007ad4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ada:	2300      	movs	r3, #0
 8007adc:	607b      	str	r3, [r7, #4]
 8007ade:	e00c      	b.n	8007afa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4a12      	ldr	r2, [pc, #72]	; (8007b34 <prvInitialiseTaskLists+0x60>)
 8007aec:	4413      	add	r3, r2
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fd fe4c 	bl	800578c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	3301      	adds	r3, #1
 8007af8:	607b      	str	r3, [r7, #4]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2b37      	cmp	r3, #55	; 0x37
 8007afe:	d9ef      	bls.n	8007ae0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b00:	480d      	ldr	r0, [pc, #52]	; (8007b38 <prvInitialiseTaskLists+0x64>)
 8007b02:	f7fd fe43 	bl	800578c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b06:	480d      	ldr	r0, [pc, #52]	; (8007b3c <prvInitialiseTaskLists+0x68>)
 8007b08:	f7fd fe40 	bl	800578c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b0c:	480c      	ldr	r0, [pc, #48]	; (8007b40 <prvInitialiseTaskLists+0x6c>)
 8007b0e:	f7fd fe3d 	bl	800578c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b12:	480c      	ldr	r0, [pc, #48]	; (8007b44 <prvInitialiseTaskLists+0x70>)
 8007b14:	f7fd fe3a 	bl	800578c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b18:	480b      	ldr	r0, [pc, #44]	; (8007b48 <prvInitialiseTaskLists+0x74>)
 8007b1a:	f7fd fe37 	bl	800578c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b1e:	4b0b      	ldr	r3, [pc, #44]	; (8007b4c <prvInitialiseTaskLists+0x78>)
 8007b20:	4a05      	ldr	r2, [pc, #20]	; (8007b38 <prvInitialiseTaskLists+0x64>)
 8007b22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b24:	4b0a      	ldr	r3, [pc, #40]	; (8007b50 <prvInitialiseTaskLists+0x7c>)
 8007b26:	4a05      	ldr	r2, [pc, #20]	; (8007b3c <prvInitialiseTaskLists+0x68>)
 8007b28:	601a      	str	r2, [r3, #0]
}
 8007b2a:	bf00      	nop
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	200007f8 	.word	0x200007f8
 8007b38:	20000c58 	.word	0x20000c58
 8007b3c:	20000c6c 	.word	0x20000c6c
 8007b40:	20000c88 	.word	0x20000c88
 8007b44:	20000c9c 	.word	0x20000c9c
 8007b48:	20000cb4 	.word	0x20000cb4
 8007b4c:	20000c80 	.word	0x20000c80
 8007b50:	20000c84 	.word	0x20000c84

08007b54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b5a:	e019      	b.n	8007b90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b5c:	f001 f846 	bl	8008bec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b60:	4b0f      	ldr	r3, [pc, #60]	; (8007ba0 <prvCheckTasksWaitingTermination+0x4c>)
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	3304      	adds	r3, #4
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fd fe97 	bl	80058a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b72:	4b0c      	ldr	r3, [pc, #48]	; (8007ba4 <prvCheckTasksWaitingTermination+0x50>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	4a0a      	ldr	r2, [pc, #40]	; (8007ba4 <prvCheckTasksWaitingTermination+0x50>)
 8007b7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ba8 <prvCheckTasksWaitingTermination+0x54>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	4a09      	ldr	r2, [pc, #36]	; (8007ba8 <prvCheckTasksWaitingTermination+0x54>)
 8007b84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b86:	f001 f85f 	bl	8008c48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f8e2 	bl	8007d54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b90:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <prvCheckTasksWaitingTermination+0x54>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e1      	bne.n	8007b5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b98:	bf00      	nop
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20000c9c 	.word	0x20000c9c
 8007ba4:	20000cc8 	.word	0x20000cc8
 8007ba8:	20000cb0 	.word	0x20000cb0

08007bac <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d102      	bne.n	8007bc6 <vTaskGetInfo+0x1a>
 8007bc0:	4b2c      	ldr	r3, [pc, #176]	; (8007c74 <vTaskGetInfo+0xc8>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	e000      	b.n	8007bc8 <vTaskGetInfo+0x1c>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	697a      	ldr	r2, [r7, #20]
 8007bce:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8007c02:	78fb      	ldrb	r3, [r7, #3]
 8007c04:	2b05      	cmp	r3, #5
 8007c06:	d01a      	beq.n	8007c3e <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8007c08:	4b1a      	ldr	r3, [pc, #104]	; (8007c74 <vTaskGetInfo+0xc8>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d103      	bne.n	8007c1a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2200      	movs	r2, #0
 8007c16:	731a      	strb	r2, [r3, #12]
 8007c18:	e018      	b.n	8007c4c <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	78fa      	ldrb	r2, [r7, #3]
 8007c1e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8007c20:	78fb      	ldrb	r3, [r7, #3]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d112      	bne.n	8007c4c <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8007c26:	f7ff fb7f 	bl	8007328 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2202      	movs	r2, #2
 8007c36:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8007c38:	f7ff fb84 	bl	8007344 <xTaskResumeAll>
 8007c3c:	e006      	b.n	8007c4c <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8007c3e:	6978      	ldr	r0, [r7, #20]
 8007c40:	f7ff f908 	bl	8006e54 <eTaskGetState>
 8007c44:	4603      	mov	r3, r0
 8007c46:	461a      	mov	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d009      	beq.n	8007c66 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c56:	4618      	mov	r0, r3
 8007c58:	f000 f860 	bl	8007d1c <prvTaskCheckFreeStackSpace>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8007c64:	e002      	b.n	8007c6c <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	841a      	strh	r2, [r3, #32]
	}
 8007c6c:	bf00      	nop
 8007c6e:	3718      	adds	r7, #24
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	200007f4 	.word	0x200007f4

08007c78 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	; 0x28
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8007c86:	2300      	movs	r3, #0
 8007c88:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d03f      	beq.n	8007d12 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	623b      	str	r3, [r7, #32]
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	685a      	ldr	r2, [r3, #4]
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	605a      	str	r2, [r3, #4]
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	6a3b      	ldr	r3, [r7, #32]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d104      	bne.n	8007cb6 <prvListTasksWithinSingleList+0x3e>
 8007cac:	6a3b      	ldr	r3, [r7, #32]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	685a      	ldr	r2, [r3, #4]
 8007cb2:	6a3b      	ldr	r3, [r7, #32]
 8007cb4:	605a      	str	r2, [r3, #4]
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	61bb      	str	r3, [r7, #24]
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	605a      	str	r2, [r3, #4]
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	3308      	adds	r3, #8
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d104      	bne.n	8007ce2 <prvListTasksWithinSingleList+0x6a>
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	605a      	str	r2, [r3, #4]
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8007cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cec:	4613      	mov	r3, r2
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	1899      	adds	r1, r3, r2
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	6978      	ldr	r0, [r7, #20]
 8007d00:	f7ff ff54 	bl	8007bac <vTaskGetInfo>
				uxTask++;
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	3301      	adds	r3, #1
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d1d5      	bne.n	8007cbe <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3728      	adds	r7, #40	; 0x28
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007d28:	e005      	b.n	8007d36 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	607b      	str	r3, [r7, #4]
			ulCount++;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3301      	adds	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	2ba5      	cmp	r3, #165	; 0xa5
 8007d3c:	d0f5      	beq.n	8007d2a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	089b      	lsrs	r3, r3, #2
 8007d42:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	b29b      	uxth	r3, r3
	}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d108      	bne.n	8007d78 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f001 f91a 	bl	8008fa4 <vPortFree>
				vPortFree( pxTCB );
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 f917 	bl	8008fa4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d76:	e017      	b.n	8007da8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d103      	bne.n	8007d8a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 f90e 	bl	8008fa4 <vPortFree>
	}
 8007d88:	e00e      	b.n	8007da8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	d009      	beq.n	8007da8 <prvDeleteTCB+0x54>
 8007d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d98:	f383 8811 	msr	BASEPRI, r3
 8007d9c:	f3bf 8f6f 	isb	sy
 8007da0:	f3bf 8f4f 	dsb	sy
 8007da4:	60fb      	str	r3, [r7, #12]
 8007da6:	e7fe      	b.n	8007da6 <prvDeleteTCB+0x52>
	}
 8007da8:	bf00      	nop
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007db6:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <prvResetNextTaskUnblockTime+0x38>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d104      	bne.n	8007dca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <prvResetNextTaskUnblockTime+0x3c>)
 8007dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007dc8:	e008      	b.n	8007ddc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dca:	4b07      	ldr	r3, [pc, #28]	; (8007de8 <prvResetNextTaskUnblockTime+0x38>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	4a04      	ldr	r2, [pc, #16]	; (8007dec <prvResetNextTaskUnblockTime+0x3c>)
 8007dda:	6013      	str	r3, [r2, #0]
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	20000c80 	.word	0x20000c80
 8007dec:	20000ce8 	.word	0x20000ce8

08007df0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007df6:	4b05      	ldr	r3, [pc, #20]	; (8007e0c <xTaskGetCurrentTaskHandle+0x1c>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007dfc:	687b      	ldr	r3, [r7, #4]
	}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	200007f4 	.word	0x200007f4

08007e10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007e16:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <xTaskGetSchedulerState+0x34>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d102      	bne.n	8007e24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	607b      	str	r3, [r7, #4]
 8007e22:	e008      	b.n	8007e36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e24:	4b08      	ldr	r3, [pc, #32]	; (8007e48 <xTaskGetSchedulerState+0x38>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d102      	bne.n	8007e32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	607b      	str	r3, [r7, #4]
 8007e30:	e001      	b.n	8007e36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e32:	2300      	movs	r3, #0
 8007e34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e36:	687b      	ldr	r3, [r7, #4]
	}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr
 8007e44:	20000cd4 	.word	0x20000cd4
 8007e48:	20000cf0 	.word	0x20000cf0

08007e4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d051      	beq.n	8007f06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e66:	4b2a      	ldr	r3, [pc, #168]	; (8007f10 <xTaskPriorityInherit+0xc4>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d241      	bcs.n	8007ef4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	db06      	blt.n	8007e86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e78:	4b25      	ldr	r3, [pc, #148]	; (8007f10 <xTaskPriorityInherit+0xc4>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	6959      	ldr	r1, [r3, #20]
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8e:	4613      	mov	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4413      	add	r3, r2
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	4a1f      	ldr	r2, [pc, #124]	; (8007f14 <xTaskPriorityInherit+0xc8>)
 8007e98:	4413      	add	r3, r2
 8007e9a:	4299      	cmp	r1, r3
 8007e9c:	d122      	bne.n	8007ee4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fd fcfc 	bl	80058a0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ea8:	4b19      	ldr	r3, [pc, #100]	; (8007f10 <xTaskPriorityInherit+0xc4>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb6:	4b18      	ldr	r3, [pc, #96]	; (8007f18 <xTaskPriorityInherit+0xcc>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d903      	bls.n	8007ec6 <xTaskPriorityInherit+0x7a>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec2:	4a15      	ldr	r2, [pc, #84]	; (8007f18 <xTaskPriorityInherit+0xcc>)
 8007ec4:	6013      	str	r3, [r2, #0]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eca:	4613      	mov	r3, r2
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4a10      	ldr	r2, [pc, #64]	; (8007f14 <xTaskPriorityInherit+0xc8>)
 8007ed4:	441a      	add	r2, r3
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	3304      	adds	r3, #4
 8007eda:	4619      	mov	r1, r3
 8007edc:	4610      	mov	r0, r2
 8007ede:	f7fd fc82 	bl	80057e6 <vListInsertEnd>
 8007ee2:	e004      	b.n	8007eee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ee4:	4b0a      	ldr	r3, [pc, #40]	; (8007f10 <xTaskPriorityInherit+0xc4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	e008      	b.n	8007f06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ef8:	4b05      	ldr	r3, [pc, #20]	; (8007f10 <xTaskPriorityInherit+0xc4>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d201      	bcs.n	8007f06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007f02:	2301      	movs	r3, #1
 8007f04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f06:	68fb      	ldr	r3, [r7, #12]
	}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}
 8007f10:	200007f4 	.word	0x200007f4
 8007f14:	200007f8 	.word	0x200007f8
 8007f18:	20000cd0 	.word	0x20000cd0

08007f1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d054      	beq.n	8007fdc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f32:	4b2d      	ldr	r3, [pc, #180]	; (8007fe8 <xTaskPriorityDisinherit+0xcc>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d009      	beq.n	8007f50 <xTaskPriorityDisinherit+0x34>
 8007f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	e7fe      	b.n	8007f4e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d109      	bne.n	8007f6c <xTaskPriorityDisinherit+0x50>
 8007f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	60bb      	str	r3, [r7, #8]
 8007f6a:	e7fe      	b.n	8007f6a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f70:	1e5a      	subs	r2, r3, #1
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d02c      	beq.n	8007fdc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d128      	bne.n	8007fdc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fd fc86 	bl	80058a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fac:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <xTaskPriorityDisinherit+0xd0>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d903      	bls.n	8007fbc <xTaskPriorityDisinherit+0xa0>
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	4a0c      	ldr	r2, [pc, #48]	; (8007fec <xTaskPriorityDisinherit+0xd0>)
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4a09      	ldr	r2, [pc, #36]	; (8007ff0 <xTaskPriorityDisinherit+0xd4>)
 8007fca:	441a      	add	r2, r3
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	f7fd fc07 	bl	80057e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fdc:	697b      	ldr	r3, [r7, #20]
	}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	200007f4 	.word	0x200007f4
 8007fec:	20000cd0 	.word	0x20000cd0
 8007ff0:	200007f8 	.word	0x200007f8

08007ff4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b088      	sub	sp, #32
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008002:	2301      	movs	r3, #1
 8008004:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d068      	beq.n	80080de <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008010:	2b00      	cmp	r3, #0
 8008012:	d109      	bne.n	8008028 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	60fb      	str	r3, [r7, #12]
 8008026:	e7fe      	b.n	8008026 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d902      	bls.n	8008038 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	61fb      	str	r3, [r7, #28]
 8008036:	e002      	b.n	800803e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	69fa      	ldr	r2, [r7, #28]
 8008044:	429a      	cmp	r2, r3
 8008046:	d04a      	beq.n	80080de <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800804c:	697a      	ldr	r2, [r7, #20]
 800804e:	429a      	cmp	r2, r3
 8008050:	d145      	bne.n	80080de <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008052:	4b25      	ldr	r3, [pc, #148]	; (80080e8 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	429a      	cmp	r2, r3
 800805a:	d109      	bne.n	8008070 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800805c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	60bb      	str	r3, [r7, #8]
 800806e:	e7fe      	b.n	800806e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008074:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	69fa      	ldr	r2, [r7, #28]
 800807a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	699b      	ldr	r3, [r3, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	db04      	blt.n	800808e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	6959      	ldr	r1, [r3, #20]
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4613      	mov	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	4a13      	ldr	r2, [pc, #76]	; (80080ec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800809e:	4413      	add	r3, r2
 80080a0:	4299      	cmp	r1, r3
 80080a2:	d11c      	bne.n	80080de <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	3304      	adds	r3, #4
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fd fbf9 	bl	80058a0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080b2:	4b0f      	ldr	r3, [pc, #60]	; (80080f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d903      	bls.n	80080c2 <vTaskPriorityDisinheritAfterTimeout+0xce>
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	4a0c      	ldr	r2, [pc, #48]	; (80080f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80080c0:	6013      	str	r3, [r2, #0]
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	4a07      	ldr	r2, [pc, #28]	; (80080ec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80080d0:	441a      	add	r2, r3
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	3304      	adds	r3, #4
 80080d6:	4619      	mov	r1, r3
 80080d8:	4610      	mov	r0, r2
 80080da:	f7fd fb84 	bl	80057e6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080de:	bf00      	nop
 80080e0:	3720      	adds	r7, #32
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	200007f4 	.word	0x200007f4
 80080ec:	200007f8 	.word	0x200007f8
 80080f0:	20000cd0 	.word	0x20000cd0

080080f4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f011 ff92 	bl	801a02a <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7f8 f87c 	bl	8000204 <strlen>
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	e007      	b.n	8008120 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	4413      	add	r3, r2
 8008116:	2220      	movs	r2, #32
 8008118:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3301      	adds	r3, #1
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b0e      	cmp	r3, #14
 8008124:	d9f4      	bls.n	8008110 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4413      	add	r3, r2
 800812c:	2200      	movs	r2, #0
 800812e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	4413      	add	r3, r2
	}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
	...

08008140 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800814e:	4b3a      	ldr	r3, [pc, #232]	; (8008238 <vTaskGetRunTimeStats+0xf8>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8008154:	4b38      	ldr	r3, [pc, #224]	; (8008238 <vTaskGetRunTimeStats+0xf8>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	4613      	mov	r3, r2
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4618      	mov	r0, r3
 8008162:	f000 fe5d 	bl	8008e20 <pvPortMalloc>
 8008166:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d05f      	beq.n	800822e <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800816e:	f107 030c 	add.w	r3, r7, #12
 8008172:	461a      	mov	r2, r3
 8008174:	69b9      	ldr	r1, [r7, #24]
 8008176:	6978      	ldr	r0, [r7, #20]
 8008178:	f7ff f9a2 	bl	80074c0 <uxTaskGetSystemState>
 800817c:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4a2e      	ldr	r2, [pc, #184]	; (800823c <vTaskGetRunTimeStats+0xfc>)
 8008182:	fba2 2303 	umull	r2, r3, r2, r3
 8008186:	095b      	lsrs	r3, r3, #5
 8008188:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d04b      	beq.n	8008228 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8008190:	2300      	movs	r3, #0
 8008192:	61fb      	str	r3, [r7, #28]
 8008194:	e044      	b.n	8008220 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8008196:	69fa      	ldr	r2, [r7, #28]
 8008198:	4613      	mov	r3, r2
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	461a      	mov	r2, r3
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	4413      	add	r3, r2
 80081a6:	699a      	ldr	r2, [r3, #24]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ae:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	4613      	mov	r3, r2
 80081b4:	00db      	lsls	r3, r3, #3
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	461a      	mov	r2, r3
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	4413      	add	r3, r2
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff ff95 	bl	80080f4 <prvWriteNameToBuffer>
 80081ca:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00e      	beq.n	80081f0 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	4613      	mov	r3, r2
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	4413      	add	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	461a      	mov	r2, r3
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	4413      	add	r3, r2
 80081e2:	699a      	ldr	r2, [r3, #24]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	4916      	ldr	r1, [pc, #88]	; (8008240 <vTaskGetRunTimeStats+0x100>)
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f011 fef1 	bl	8019fd0 <siprintf>
 80081ee:	e00d      	b.n	800820c <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80081f0:	69fa      	ldr	r2, [r7, #28]
 80081f2:	4613      	mov	r3, r2
 80081f4:	00db      	lsls	r3, r3, #3
 80081f6:	4413      	add	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	461a      	mov	r2, r3
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	4413      	add	r3, r2
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	461a      	mov	r2, r3
 8008204:	490f      	ldr	r1, [pc, #60]	; (8008244 <vTaskGetRunTimeStats+0x104>)
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f011 fee2 	bl	8019fd0 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f7f7 fff9 	bl	8000204 <strlen>
 8008212:	4602      	mov	r2, r0
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4413      	add	r3, r2
 8008218:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	3301      	adds	r3, #1
 800821e:	61fb      	str	r3, [r7, #28]
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	429a      	cmp	r2, r3
 8008226:	d3b6      	bcc.n	8008196 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8008228:	6978      	ldr	r0, [r7, #20]
 800822a:	f000 febb 	bl	8008fa4 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800822e:	bf00      	nop
 8008230:	3720      	adds	r7, #32
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000cc8 	.word	0x20000cc8
 800823c:	51eb851f 	.word	0x51eb851f
 8008240:	0801b330 	.word	0x0801b330
 8008244:	0801b33c 	.word	0x0801b33c

08008248 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800824c:	4b07      	ldr	r3, [pc, #28]	; (800826c <pvTaskIncrementMutexHeldCount+0x24>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d004      	beq.n	800825e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008254:	4b05      	ldr	r3, [pc, #20]	; (800826c <pvTaskIncrementMutexHeldCount+0x24>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800825a:	3201      	adds	r2, #1
 800825c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800825e:	4b03      	ldr	r3, [pc, #12]	; (800826c <pvTaskIncrementMutexHeldCount+0x24>)
 8008260:	681b      	ldr	r3, [r3, #0]
	}
 8008262:	4618      	mov	r0, r3
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	200007f4 	.word	0x200007f4

08008270 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800827a:	4b21      	ldr	r3, [pc, #132]	; (8008300 <prvAddCurrentTaskToDelayedList+0x90>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008280:	4b20      	ldr	r3, [pc, #128]	; (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	3304      	adds	r3, #4
 8008286:	4618      	mov	r0, r3
 8008288:	f7fd fb0a 	bl	80058a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008292:	d10a      	bne.n	80082aa <prvAddCurrentTaskToDelayedList+0x3a>
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d007      	beq.n	80082aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800829a:	4b1a      	ldr	r3, [pc, #104]	; (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3304      	adds	r3, #4
 80082a0:	4619      	mov	r1, r3
 80082a2:	4819      	ldr	r0, [pc, #100]	; (8008308 <prvAddCurrentTaskToDelayedList+0x98>)
 80082a4:	f7fd fa9f 	bl	80057e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082a8:	e026      	b.n	80082f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4413      	add	r3, r2
 80082b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082b2:	4b14      	ldr	r3, [pc, #80]	; (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d209      	bcs.n	80082d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082c2:	4b12      	ldr	r3, [pc, #72]	; (800830c <prvAddCurrentTaskToDelayedList+0x9c>)
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	4b0f      	ldr	r3, [pc, #60]	; (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4619      	mov	r1, r3
 80082ce:	4610      	mov	r0, r2
 80082d0:	f7fd faad 	bl	800582e <vListInsert>
}
 80082d4:	e010      	b.n	80082f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082d6:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <prvAddCurrentTaskToDelayedList+0x94>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3304      	adds	r3, #4
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f7fd faa3 	bl	800582e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082e8:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68ba      	ldr	r2, [r7, #8]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d202      	bcs.n	80082f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082f2:	4a08      	ldr	r2, [pc, #32]	; (8008314 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	6013      	str	r3, [r2, #0]
}
 80082f8:	bf00      	nop
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20000ccc 	.word	0x20000ccc
 8008304:	200007f4 	.word	0x200007f4
 8008308:	20000cb4 	.word	0x20000cb4
 800830c:	20000c84 	.word	0x20000c84
 8008310:	20000c80 	.word	0x20000c80
 8008314:	20000ce8 	.word	0x20000ce8

08008318 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	; 0x28
 800831c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800831e:	2300      	movs	r3, #0
 8008320:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008322:	f000 faff 	bl	8008924 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008326:	4b1c      	ldr	r3, [pc, #112]	; (8008398 <xTimerCreateTimerTask+0x80>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d021      	beq.n	8008372 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800832e:	2300      	movs	r3, #0
 8008330:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008332:	2300      	movs	r3, #0
 8008334:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008336:	1d3a      	adds	r2, r7, #4
 8008338:	f107 0108 	add.w	r1, r7, #8
 800833c:	f107 030c 	add.w	r3, r7, #12
 8008340:	4618      	mov	r0, r3
 8008342:	f7fd fa09 	bl	8005758 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008346:	6879      	ldr	r1, [r7, #4]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	9202      	str	r2, [sp, #8]
 800834e:	9301      	str	r3, [sp, #4]
 8008350:	2302      	movs	r3, #2
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	2300      	movs	r3, #0
 8008356:	460a      	mov	r2, r1
 8008358:	4910      	ldr	r1, [pc, #64]	; (800839c <xTimerCreateTimerTask+0x84>)
 800835a:	4811      	ldr	r0, [pc, #68]	; (80083a0 <xTimerCreateTimerTask+0x88>)
 800835c:	f7fe fba6 	bl	8006aac <xTaskCreateStatic>
 8008360:	4602      	mov	r2, r0
 8008362:	4b10      	ldr	r3, [pc, #64]	; (80083a4 <xTimerCreateTimerTask+0x8c>)
 8008364:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008366:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <xTimerCreateTimerTask+0x8c>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800836e:	2301      	movs	r3, #1
 8008370:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d109      	bne.n	800838c <xTimerCreateTimerTask+0x74>
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	f383 8811 	msr	BASEPRI, r3
 8008380:	f3bf 8f6f 	isb	sy
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	613b      	str	r3, [r7, #16]
 800838a:	e7fe      	b.n	800838a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800838c:	697b      	ldr	r3, [r7, #20]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3718      	adds	r7, #24
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000d2c 	.word	0x20000d2c
 800839c:	0801b348 	.word	0x0801b348
 80083a0:	080084d9 	.word	0x080084d9
 80083a4:	20000d30 	.word	0x20000d30

080083a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08a      	sub	sp, #40	; 0x28
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
 80083b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d109      	bne.n	80083d4 <xTimerGenericCommand+0x2c>
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	623b      	str	r3, [r7, #32]
 80083d2:	e7fe      	b.n	80083d2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083d4:	4b19      	ldr	r3, [pc, #100]	; (800843c <xTimerGenericCommand+0x94>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d02a      	beq.n	8008432 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b05      	cmp	r3, #5
 80083ec:	dc18      	bgt.n	8008420 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083ee:	f7ff fd0f 	bl	8007e10 <xTaskGetSchedulerState>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d109      	bne.n	800840c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083f8:	4b10      	ldr	r3, [pc, #64]	; (800843c <xTimerGenericCommand+0x94>)
 80083fa:	6818      	ldr	r0, [r3, #0]
 80083fc:	f107 0110 	add.w	r1, r7, #16
 8008400:	2300      	movs	r3, #0
 8008402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008404:	f7fd fcce 	bl	8005da4 <xQueueGenericSend>
 8008408:	6278      	str	r0, [r7, #36]	; 0x24
 800840a:	e012      	b.n	8008432 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800840c:	4b0b      	ldr	r3, [pc, #44]	; (800843c <xTimerGenericCommand+0x94>)
 800840e:	6818      	ldr	r0, [r3, #0]
 8008410:	f107 0110 	add.w	r1, r7, #16
 8008414:	2300      	movs	r3, #0
 8008416:	2200      	movs	r2, #0
 8008418:	f7fd fcc4 	bl	8005da4 <xQueueGenericSend>
 800841c:	6278      	str	r0, [r7, #36]	; 0x24
 800841e:	e008      	b.n	8008432 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008420:	4b06      	ldr	r3, [pc, #24]	; (800843c <xTimerGenericCommand+0x94>)
 8008422:	6818      	ldr	r0, [r3, #0]
 8008424:	f107 0110 	add.w	r1, r7, #16
 8008428:	2300      	movs	r3, #0
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	f7fd fdb4 	bl	8005f98 <xQueueGenericSendFromISR>
 8008430:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008434:	4618      	mov	r0, r3
 8008436:	3728      	adds	r7, #40	; 0x28
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	20000d2c 	.word	0x20000d2c

08008440 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b088      	sub	sp, #32
 8008444:	af02      	add	r7, sp, #8
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800844a:	4b22      	ldr	r3, [pc, #136]	; (80084d4 <prvProcessExpiredTimer+0x94>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	3304      	adds	r3, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f7fd fa21 	bl	80058a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008464:	f003 0304 	and.w	r3, r3, #4
 8008468:	2b00      	cmp	r3, #0
 800846a:	d021      	beq.n	80084b0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	699a      	ldr	r2, [r3, #24]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	18d1      	adds	r1, r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	6978      	ldr	r0, [r7, #20]
 800847a:	f000 f8d1 	bl	8008620 <prvInsertTimerInActiveList>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01e      	beq.n	80084c2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008484:	2300      	movs	r3, #0
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	2300      	movs	r3, #0
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	2100      	movs	r1, #0
 800848e:	6978      	ldr	r0, [r7, #20]
 8008490:	f7ff ff8a 	bl	80083a8 <xTimerGenericCommand>
 8008494:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d112      	bne.n	80084c2 <prvProcessExpiredTimer+0x82>
 800849c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	e7fe      	b.n	80084ae <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084b6:	f023 0301 	bic.w	r3, r3, #1
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	6a1b      	ldr	r3, [r3, #32]
 80084c6:	6978      	ldr	r0, [r7, #20]
 80084c8:	4798      	blx	r3
}
 80084ca:	bf00      	nop
 80084cc:	3718      	adds	r7, #24
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20000d24 	.word	0x20000d24

080084d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084e0:	f107 0308 	add.w	r3, r7, #8
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 f857 	bl	8008598 <prvGetNextExpireTime>
 80084ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	4619      	mov	r1, r3
 80084f0:	68f8      	ldr	r0, [r7, #12]
 80084f2:	f000 f803 	bl	80084fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084f6:	f000 f8d5 	bl	80086a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084fa:	e7f1      	b.n	80084e0 <prvTimerTask+0x8>

080084fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008506:	f7fe ff0f 	bl	8007328 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800850a:	f107 0308 	add.w	r3, r7, #8
 800850e:	4618      	mov	r0, r3
 8008510:	f000 f866 	bl	80085e0 <prvSampleTimeNow>
 8008514:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d130      	bne.n	800857e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10a      	bne.n	8008538 <prvProcessTimerOrBlockTask+0x3c>
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	429a      	cmp	r2, r3
 8008528:	d806      	bhi.n	8008538 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800852a:	f7fe ff0b 	bl	8007344 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800852e:	68f9      	ldr	r1, [r7, #12]
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7ff ff85 	bl	8008440 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008536:	e024      	b.n	8008582 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d008      	beq.n	8008550 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800853e:	4b13      	ldr	r3, [pc, #76]	; (800858c <prvProcessTimerOrBlockTask+0x90>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d101      	bne.n	800854c <prvProcessTimerOrBlockTask+0x50>
 8008548:	2301      	movs	r3, #1
 800854a:	e000      	b.n	800854e <prvProcessTimerOrBlockTask+0x52>
 800854c:	2300      	movs	r3, #0
 800854e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008550:	4b0f      	ldr	r3, [pc, #60]	; (8008590 <prvProcessTimerOrBlockTask+0x94>)
 8008552:	6818      	ldr	r0, [r3, #0]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	4619      	mov	r1, r3
 800855e:	f7fe fa71 	bl	8006a44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008562:	f7fe feef 	bl	8007344 <xTaskResumeAll>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10a      	bne.n	8008582 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800856c:	4b09      	ldr	r3, [pc, #36]	; (8008594 <prvProcessTimerOrBlockTask+0x98>)
 800856e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	f3bf 8f6f 	isb	sy
}
 800857c:	e001      	b.n	8008582 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800857e:	f7fe fee1 	bl	8007344 <xTaskResumeAll>
}
 8008582:	bf00      	nop
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20000d28 	.word	0x20000d28
 8008590:	20000d2c 	.word	0x20000d2c
 8008594:	e000ed04 	.word	0xe000ed04

08008598 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085a0:	4b0e      	ldr	r3, [pc, #56]	; (80085dc <prvGetNextExpireTime+0x44>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <prvGetNextExpireTime+0x16>
 80085aa:	2201      	movs	r2, #1
 80085ac:	e000      	b.n	80085b0 <prvGetNextExpireTime+0x18>
 80085ae:	2200      	movs	r2, #0
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d105      	bne.n	80085c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085bc:	4b07      	ldr	r3, [pc, #28]	; (80085dc <prvGetNextExpireTime+0x44>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	60fb      	str	r3, [r7, #12]
 80085c6:	e001      	b.n	80085cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085cc:	68fb      	ldr	r3, [r7, #12]
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	20000d24 	.word	0x20000d24

080085e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085e8:	f7fe ff48 	bl	800747c <xTaskGetTickCount>
 80085ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085ee:	4b0b      	ldr	r3, [pc, #44]	; (800861c <prvSampleTimeNow+0x3c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d205      	bcs.n	8008604 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085f8:	f000 f930 	bl	800885c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	e002      	b.n	800860a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800860a:	4a04      	ldr	r2, [pc, #16]	; (800861c <prvSampleTimeNow+0x3c>)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008610:	68fb      	ldr	r3, [r7, #12]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	20000d34 	.word	0x20000d34

08008620 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800862e:	2300      	movs	r3, #0
 8008630:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	429a      	cmp	r2, r3
 8008644:	d812      	bhi.n	800866c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	1ad2      	subs	r2, r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	429a      	cmp	r2, r3
 8008652:	d302      	bcc.n	800865a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008654:	2301      	movs	r3, #1
 8008656:	617b      	str	r3, [r7, #20]
 8008658:	e01b      	b.n	8008692 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800865a:	4b10      	ldr	r3, [pc, #64]	; (800869c <prvInsertTimerInActiveList+0x7c>)
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3304      	adds	r3, #4
 8008662:	4619      	mov	r1, r3
 8008664:	4610      	mov	r0, r2
 8008666:	f7fd f8e2 	bl	800582e <vListInsert>
 800866a:	e012      	b.n	8008692 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	429a      	cmp	r2, r3
 8008672:	d206      	bcs.n	8008682 <prvInsertTimerInActiveList+0x62>
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	429a      	cmp	r2, r3
 800867a:	d302      	bcc.n	8008682 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800867c:	2301      	movs	r3, #1
 800867e:	617b      	str	r3, [r7, #20]
 8008680:	e007      	b.n	8008692 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008682:	4b07      	ldr	r3, [pc, #28]	; (80086a0 <prvInsertTimerInActiveList+0x80>)
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3304      	adds	r3, #4
 800868a:	4619      	mov	r1, r3
 800868c:	4610      	mov	r0, r2
 800868e:	f7fd f8ce 	bl	800582e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008692:	697b      	ldr	r3, [r7, #20]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	20000d28 	.word	0x20000d28
 80086a0:	20000d24 	.word	0x20000d24

080086a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08e      	sub	sp, #56	; 0x38
 80086a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086aa:	e0c6      	b.n	800883a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	da17      	bge.n	80086e2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086b2:	1d3b      	adds	r3, r7, #4
 80086b4:	3304      	adds	r3, #4
 80086b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d109      	bne.n	80086d2 <prvProcessReceivedCommands+0x2e>
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	61fb      	str	r3, [r7, #28]
 80086d0:	e7fe      	b.n	80086d0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086d8:	6850      	ldr	r0, [r2, #4]
 80086da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086dc:	6892      	ldr	r2, [r2, #8]
 80086de:	4611      	mov	r1, r2
 80086e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f2c0 80a7 	blt.w	8008838 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d004      	beq.n	8008700 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	3304      	adds	r3, #4
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fd f8d0 	bl	80058a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008700:	463b      	mov	r3, r7
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff ff6c 	bl	80085e0 <prvSampleTimeNow>
 8008708:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b09      	cmp	r3, #9
 800870e:	f200 8094 	bhi.w	800883a <prvProcessReceivedCommands+0x196>
 8008712:	a201      	add	r2, pc, #4	; (adr r2, 8008718 <prvProcessReceivedCommands+0x74>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	08008741 	.word	0x08008741
 800871c:	08008741 	.word	0x08008741
 8008720:	08008741 	.word	0x08008741
 8008724:	080087b3 	.word	0x080087b3
 8008728:	080087c7 	.word	0x080087c7
 800872c:	0800880f 	.word	0x0800880f
 8008730:	08008741 	.word	0x08008741
 8008734:	08008741 	.word	0x08008741
 8008738:	080087b3 	.word	0x080087b3
 800873c:	080087c7 	.word	0x080087c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008746:	f043 0301 	orr.w	r3, r3, #1
 800874a:	b2da      	uxtb	r2, r3
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	18d1      	adds	r1, r2, r3
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008760:	f7ff ff5e 	bl	8008620 <prvInsertTimerInActiveList>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d067      	beq.n	800883a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800876a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008770:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008774:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b00      	cmp	r3, #0
 800877e:	d05c      	beq.n	800883a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	441a      	add	r2, r3
 8008788:	2300      	movs	r3, #0
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	2300      	movs	r3, #0
 800878e:	2100      	movs	r1, #0
 8008790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008792:	f7ff fe09 	bl	80083a8 <xTimerGenericCommand>
 8008796:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008798:	6a3b      	ldr	r3, [r7, #32]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d14d      	bne.n	800883a <prvProcessReceivedCommands+0x196>
 800879e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	61bb      	str	r3, [r7, #24]
 80087b0:	e7fe      	b.n	80087b0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087b8:	f023 0301 	bic.w	r3, r3, #1
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80087c4:	e039      	b.n	800883a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087cc:	f043 0301 	orr.w	r3, r3, #1
 80087d0:	b2da      	uxtb	r2, r3
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80087de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d109      	bne.n	80087fa <prvProcessReceivedCommands+0x156>
 80087e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	e7fe      	b.n	80087f8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	699a      	ldr	r2, [r3, #24]
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	18d1      	adds	r1, r2, r3
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008808:	f7ff ff0a 	bl	8008620 <prvInsertTimerInActiveList>
					break;
 800880c:	e015      	b.n	800883a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008810:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008814:	f003 0302 	and.w	r3, r3, #2
 8008818:	2b00      	cmp	r3, #0
 800881a:	d103      	bne.n	8008824 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800881c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800881e:	f000 fbc1 	bl	8008fa4 <vPortFree>
 8008822:	e00a      	b.n	800883a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800882a:	f023 0301 	bic.w	r3, r3, #1
 800882e:	b2da      	uxtb	r2, r3
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008836:	e000      	b.n	800883a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008838:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800883a:	4b07      	ldr	r3, [pc, #28]	; (8008858 <prvProcessReceivedCommands+0x1b4>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	1d39      	adds	r1, r7, #4
 8008840:	2200      	movs	r2, #0
 8008842:	4618      	mov	r0, r3
 8008844:	f7fd fcc6 	bl	80061d4 <xQueueReceive>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	f47f af2e 	bne.w	80086ac <prvProcessReceivedCommands+0x8>
	}
}
 8008850:	bf00      	nop
 8008852:	3730      	adds	r7, #48	; 0x30
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	20000d2c 	.word	0x20000d2c

0800885c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b088      	sub	sp, #32
 8008860:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008862:	e047      	b.n	80088f4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008864:	4b2d      	ldr	r3, [pc, #180]	; (800891c <prvSwitchTimerLists+0xc0>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800886e:	4b2b      	ldr	r3, [pc, #172]	; (800891c <prvSwitchTimerLists+0xc0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3304      	adds	r3, #4
 800887c:	4618      	mov	r0, r3
 800887e:	f7fd f80f 	bl	80058a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b00      	cmp	r3, #0
 8008896:	d02d      	beq.n	80088f4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	699b      	ldr	r3, [r3, #24]
 800889c:	693a      	ldr	r2, [r7, #16]
 800889e:	4413      	add	r3, r2
 80088a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d90e      	bls.n	80088c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088b6:	4b19      	ldr	r3, [pc, #100]	; (800891c <prvSwitchTimerLists+0xc0>)
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3304      	adds	r3, #4
 80088be:	4619      	mov	r1, r3
 80088c0:	4610      	mov	r0, r2
 80088c2:	f7fc ffb4 	bl	800582e <vListInsert>
 80088c6:	e015      	b.n	80088f4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088c8:	2300      	movs	r3, #0
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	2300      	movs	r3, #0
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	2100      	movs	r1, #0
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f7ff fd68 	bl	80083a8 <xTimerGenericCommand>
 80088d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d109      	bne.n	80088f4 <prvSwitchTimerLists+0x98>
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	f383 8811 	msr	BASEPRI, r3
 80088e8:	f3bf 8f6f 	isb	sy
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	603b      	str	r3, [r7, #0]
 80088f2:	e7fe      	b.n	80088f2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088f4:	4b09      	ldr	r3, [pc, #36]	; (800891c <prvSwitchTimerLists+0xc0>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1b2      	bne.n	8008864 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088fe:	4b07      	ldr	r3, [pc, #28]	; (800891c <prvSwitchTimerLists+0xc0>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008904:	4b06      	ldr	r3, [pc, #24]	; (8008920 <prvSwitchTimerLists+0xc4>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a04      	ldr	r2, [pc, #16]	; (800891c <prvSwitchTimerLists+0xc0>)
 800890a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800890c:	4a04      	ldr	r2, [pc, #16]	; (8008920 <prvSwitchTimerLists+0xc4>)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	6013      	str	r3, [r2, #0]
}
 8008912:	bf00      	nop
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	20000d24 	.word	0x20000d24
 8008920:	20000d28 	.word	0x20000d28

08008924 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800892a:	f000 f95f 	bl	8008bec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800892e:	4b15      	ldr	r3, [pc, #84]	; (8008984 <prvCheckForValidListAndQueue+0x60>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d120      	bne.n	8008978 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008936:	4814      	ldr	r0, [pc, #80]	; (8008988 <prvCheckForValidListAndQueue+0x64>)
 8008938:	f7fc ff28 	bl	800578c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800893c:	4813      	ldr	r0, [pc, #76]	; (800898c <prvCheckForValidListAndQueue+0x68>)
 800893e:	f7fc ff25 	bl	800578c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008942:	4b13      	ldr	r3, [pc, #76]	; (8008990 <prvCheckForValidListAndQueue+0x6c>)
 8008944:	4a10      	ldr	r2, [pc, #64]	; (8008988 <prvCheckForValidListAndQueue+0x64>)
 8008946:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008948:	4b12      	ldr	r3, [pc, #72]	; (8008994 <prvCheckForValidListAndQueue+0x70>)
 800894a:	4a10      	ldr	r2, [pc, #64]	; (800898c <prvCheckForValidListAndQueue+0x68>)
 800894c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800894e:	2300      	movs	r3, #0
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	4b11      	ldr	r3, [pc, #68]	; (8008998 <prvCheckForValidListAndQueue+0x74>)
 8008954:	4a11      	ldr	r2, [pc, #68]	; (800899c <prvCheckForValidListAndQueue+0x78>)
 8008956:	2110      	movs	r1, #16
 8008958:	200a      	movs	r0, #10
 800895a:	f7fd f833 	bl	80059c4 <xQueueGenericCreateStatic>
 800895e:	4602      	mov	r2, r0
 8008960:	4b08      	ldr	r3, [pc, #32]	; (8008984 <prvCheckForValidListAndQueue+0x60>)
 8008962:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008964:	4b07      	ldr	r3, [pc, #28]	; (8008984 <prvCheckForValidListAndQueue+0x60>)
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d005      	beq.n	8008978 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800896c:	4b05      	ldr	r3, [pc, #20]	; (8008984 <prvCheckForValidListAndQueue+0x60>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	490b      	ldr	r1, [pc, #44]	; (80089a0 <prvCheckForValidListAndQueue+0x7c>)
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe f814 	bl	80069a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008978:	f000 f966 	bl	8008c48 <vPortExitCritical>
}
 800897c:	bf00      	nop
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000d2c 	.word	0x20000d2c
 8008988:	20000cfc 	.word	0x20000cfc
 800898c:	20000d10 	.word	0x20000d10
 8008990:	20000d24 	.word	0x20000d24
 8008994:	20000d28 	.word	0x20000d28
 8008998:	20000dd8 	.word	0x20000dd8
 800899c:	20000d38 	.word	0x20000d38
 80089a0:	0801b350 	.word	0x0801b350

080089a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	3b04      	subs	r3, #4
 80089b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80089bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3b04      	subs	r3, #4
 80089c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f023 0201 	bic.w	r2, r3, #1
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3b04      	subs	r3, #4
 80089d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80089d4:	4a0c      	ldr	r2, [pc, #48]	; (8008a08 <pxPortInitialiseStack+0x64>)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	3b14      	subs	r3, #20
 80089de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	3b04      	subs	r3, #4
 80089ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f06f 0202 	mvn.w	r2, #2
 80089f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	3b20      	subs	r3, #32
 80089f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089fa:	68fb      	ldr	r3, [r7, #12]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	08008a0d 	.word	0x08008a0d

08008a0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a12:	2300      	movs	r3, #0
 8008a14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a16:	4b11      	ldr	r3, [pc, #68]	; (8008a5c <prvTaskExitError+0x50>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1e:	d009      	beq.n	8008a34 <prvTaskExitError+0x28>
 8008a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	60fb      	str	r3, [r7, #12]
 8008a32:	e7fe      	b.n	8008a32 <prvTaskExitError+0x26>
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a46:	bf00      	nop
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d0fc      	beq.n	8008a48 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a4e:	bf00      	nop
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	2000000c 	.word	0x2000000c

08008a60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a60:	4b07      	ldr	r3, [pc, #28]	; (8008a80 <pxCurrentTCBConst2>)
 8008a62:	6819      	ldr	r1, [r3, #0]
 8008a64:	6808      	ldr	r0, [r1, #0]
 8008a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6a:	f380 8809 	msr	PSP, r0
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f04f 0000 	mov.w	r0, #0
 8008a76:	f380 8811 	msr	BASEPRI, r0
 8008a7a:	4770      	bx	lr
 8008a7c:	f3af 8000 	nop.w

08008a80 <pxCurrentTCBConst2>:
 8008a80:	200007f4 	.word	0x200007f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a84:	bf00      	nop
 8008a86:	bf00      	nop

08008a88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a88:	4808      	ldr	r0, [pc, #32]	; (8008aac <prvPortStartFirstTask+0x24>)
 8008a8a:	6800      	ldr	r0, [r0, #0]
 8008a8c:	6800      	ldr	r0, [r0, #0]
 8008a8e:	f380 8808 	msr	MSP, r0
 8008a92:	f04f 0000 	mov.w	r0, #0
 8008a96:	f380 8814 	msr	CONTROL, r0
 8008a9a:	b662      	cpsie	i
 8008a9c:	b661      	cpsie	f
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	df00      	svc	0
 8008aa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008aaa:	bf00      	nop
 8008aac:	e000ed08 	.word	0xe000ed08

08008ab0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008ab6:	4b44      	ldr	r3, [pc, #272]	; (8008bc8 <xPortStartScheduler+0x118>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a44      	ldr	r2, [pc, #272]	; (8008bcc <xPortStartScheduler+0x11c>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d109      	bne.n	8008ad4 <xPortStartScheduler+0x24>
 8008ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac4:	f383 8811 	msr	BASEPRI, r3
 8008ac8:	f3bf 8f6f 	isb	sy
 8008acc:	f3bf 8f4f 	dsb	sy
 8008ad0:	613b      	str	r3, [r7, #16]
 8008ad2:	e7fe      	b.n	8008ad2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ad4:	4b3c      	ldr	r3, [pc, #240]	; (8008bc8 <xPortStartScheduler+0x118>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a3d      	ldr	r2, [pc, #244]	; (8008bd0 <xPortStartScheduler+0x120>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d109      	bne.n	8008af2 <xPortStartScheduler+0x42>
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	60fb      	str	r3, [r7, #12]
 8008af0:	e7fe      	b.n	8008af0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008af2:	4b38      	ldr	r3, [pc, #224]	; (8008bd4 <xPortStartScheduler+0x124>)
 8008af4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	22ff      	movs	r2, #255	; 0xff
 8008b02:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b0c:	78fb      	ldrb	r3, [r7, #3]
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	4b30      	ldr	r3, [pc, #192]	; (8008bd8 <xPortStartScheduler+0x128>)
 8008b18:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b1a:	4b30      	ldr	r3, [pc, #192]	; (8008bdc <xPortStartScheduler+0x12c>)
 8008b1c:	2207      	movs	r2, #7
 8008b1e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b20:	e009      	b.n	8008b36 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008b22:	4b2e      	ldr	r3, [pc, #184]	; (8008bdc <xPortStartScheduler+0x12c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3b01      	subs	r3, #1
 8008b28:	4a2c      	ldr	r2, [pc, #176]	; (8008bdc <xPortStartScheduler+0x12c>)
 8008b2a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	005b      	lsls	r3, r3, #1
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b36:	78fb      	ldrb	r3, [r7, #3]
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b3e:	2b80      	cmp	r3, #128	; 0x80
 8008b40:	d0ef      	beq.n	8008b22 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b42:	4b26      	ldr	r3, [pc, #152]	; (8008bdc <xPortStartScheduler+0x12c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f1c3 0307 	rsb	r3, r3, #7
 8008b4a:	2b04      	cmp	r3, #4
 8008b4c:	d009      	beq.n	8008b62 <xPortStartScheduler+0xb2>
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	f383 8811 	msr	BASEPRI, r3
 8008b56:	f3bf 8f6f 	isb	sy
 8008b5a:	f3bf 8f4f 	dsb	sy
 8008b5e:	60bb      	str	r3, [r7, #8]
 8008b60:	e7fe      	b.n	8008b60 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b62:	4b1e      	ldr	r3, [pc, #120]	; (8008bdc <xPortStartScheduler+0x12c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	021b      	lsls	r3, r3, #8
 8008b68:	4a1c      	ldr	r2, [pc, #112]	; (8008bdc <xPortStartScheduler+0x12c>)
 8008b6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b6c:	4b1b      	ldr	r3, [pc, #108]	; (8008bdc <xPortStartScheduler+0x12c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b74:	4a19      	ldr	r2, [pc, #100]	; (8008bdc <xPortStartScheduler+0x12c>)
 8008b76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	b2da      	uxtb	r2, r3
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b80:	4b17      	ldr	r3, [pc, #92]	; (8008be0 <xPortStartScheduler+0x130>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a16      	ldr	r2, [pc, #88]	; (8008be0 <xPortStartScheduler+0x130>)
 8008b86:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b8c:	4b14      	ldr	r3, [pc, #80]	; (8008be0 <xPortStartScheduler+0x130>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a13      	ldr	r2, [pc, #76]	; (8008be0 <xPortStartScheduler+0x130>)
 8008b92:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b98:	f000 f8d6 	bl	8008d48 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b9c:	4b11      	ldr	r3, [pc, #68]	; (8008be4 <xPortStartScheduler+0x134>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ba2:	f000 f8f5 	bl	8008d90 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ba6:	4b10      	ldr	r3, [pc, #64]	; (8008be8 <xPortStartScheduler+0x138>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a0f      	ldr	r2, [pc, #60]	; (8008be8 <xPortStartScheduler+0x138>)
 8008bac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008bb0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008bb2:	f7ff ff69 	bl	8008a88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008bb6:	f7fe fdcb 	bl	8007750 <vTaskSwitchContext>
	prvTaskExitError();
 8008bba:	f7ff ff27 	bl	8008a0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008bbe:	2300      	movs	r3, #0
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	e000ed00 	.word	0xe000ed00
 8008bcc:	410fc271 	.word	0x410fc271
 8008bd0:	410fc270 	.word	0x410fc270
 8008bd4:	e000e400 	.word	0xe000e400
 8008bd8:	20000e28 	.word	0x20000e28
 8008bdc:	20000e2c 	.word	0x20000e2c
 8008be0:	e000ed20 	.word	0xe000ed20
 8008be4:	2000000c 	.word	0x2000000c
 8008be8:	e000ef34 	.word	0xe000ef34

08008bec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf6:	f383 8811 	msr	BASEPRI, r3
 8008bfa:	f3bf 8f6f 	isb	sy
 8008bfe:	f3bf 8f4f 	dsb	sy
 8008c02:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c04:	4b0e      	ldr	r3, [pc, #56]	; (8008c40 <vPortEnterCritical+0x54>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	4a0d      	ldr	r2, [pc, #52]	; (8008c40 <vPortEnterCritical+0x54>)
 8008c0c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c0e:	4b0c      	ldr	r3, [pc, #48]	; (8008c40 <vPortEnterCritical+0x54>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d10e      	bne.n	8008c34 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c16:	4b0b      	ldr	r3, [pc, #44]	; (8008c44 <vPortEnterCritical+0x58>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d009      	beq.n	8008c34 <vPortEnterCritical+0x48>
 8008c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c24:	f383 8811 	msr	BASEPRI, r3
 8008c28:	f3bf 8f6f 	isb	sy
 8008c2c:	f3bf 8f4f 	dsb	sy
 8008c30:	603b      	str	r3, [r7, #0]
 8008c32:	e7fe      	b.n	8008c32 <vPortEnterCritical+0x46>
	}
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	2000000c 	.word	0x2000000c
 8008c44:	e000ed04 	.word	0xe000ed04

08008c48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c4e:	4b11      	ldr	r3, [pc, #68]	; (8008c94 <vPortExitCritical+0x4c>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d109      	bne.n	8008c6a <vPortExitCritical+0x22>
 8008c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	607b      	str	r3, [r7, #4]
 8008c68:	e7fe      	b.n	8008c68 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008c6a:	4b0a      	ldr	r3, [pc, #40]	; (8008c94 <vPortExitCritical+0x4c>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	4a08      	ldr	r2, [pc, #32]	; (8008c94 <vPortExitCritical+0x4c>)
 8008c72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c74:	4b07      	ldr	r3, [pc, #28]	; (8008c94 <vPortExitCritical+0x4c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d104      	bne.n	8008c86 <vPortExitCritical+0x3e>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c86:	bf00      	nop
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	2000000c 	.word	0x2000000c
	...

08008ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ca0:	f3ef 8009 	mrs	r0, PSP
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <pxCurrentTCBConst>)
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	f01e 0f10 	tst.w	lr, #16
 8008cb0:	bf08      	it	eq
 8008cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cba:	6010      	str	r0, [r2, #0]
 8008cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008cc4:	f380 8811 	msr	BASEPRI, r0
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f7fe fd3e 	bl	8007750 <vTaskSwitchContext>
 8008cd4:	f04f 0000 	mov.w	r0, #0
 8008cd8:	f380 8811 	msr	BASEPRI, r0
 8008cdc:	bc09      	pop	{r0, r3}
 8008cde:	6819      	ldr	r1, [r3, #0]
 8008ce0:	6808      	ldr	r0, [r1, #0]
 8008ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce6:	f01e 0f10 	tst.w	lr, #16
 8008cea:	bf08      	it	eq
 8008cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cf0:	f380 8809 	msr	PSP, r0
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	f3af 8000 	nop.w

08008d00 <pxCurrentTCBConst>:
 8008d00:	200007f4 	.word	0x200007f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d04:	bf00      	nop
 8008d06:	bf00      	nop

08008d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d20:	f7fe fc5e 	bl	80075e0 <xTaskIncrementTick>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d2a:	4b06      	ldr	r3, [pc, #24]	; (8008d44 <SysTick_Handler+0x3c>)
 8008d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	2300      	movs	r3, #0
 8008d34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	e000ed04 	.word	0xe000ed04

08008d48 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d48:	b480      	push	{r7}
 8008d4a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <vPortSetupTimerInterrupt+0x34>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d52:	4b0b      	ldr	r3, [pc, #44]	; (8008d80 <vPortSetupTimerInterrupt+0x38>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d58:	4b0a      	ldr	r3, [pc, #40]	; (8008d84 <vPortSetupTimerInterrupt+0x3c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a0a      	ldr	r2, [pc, #40]	; (8008d88 <vPortSetupTimerInterrupt+0x40>)
 8008d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d62:	099b      	lsrs	r3, r3, #6
 8008d64:	4a09      	ldr	r2, [pc, #36]	; (8008d8c <vPortSetupTimerInterrupt+0x44>)
 8008d66:	3b01      	subs	r3, #1
 8008d68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d6a:	4b04      	ldr	r3, [pc, #16]	; (8008d7c <vPortSetupTimerInterrupt+0x34>)
 8008d6c:	2207      	movs	r2, #7
 8008d6e:	601a      	str	r2, [r3, #0]
}
 8008d70:	bf00      	nop
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	e000e010 	.word	0xe000e010
 8008d80:	e000e018 	.word	0xe000e018
 8008d84:	20000000 	.word	0x20000000
 8008d88:	10624dd3 	.word	0x10624dd3
 8008d8c:	e000e014 	.word	0xe000e014

08008d90 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d90:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008da0 <vPortEnableVFP+0x10>
 8008d94:	6801      	ldr	r1, [r0, #0]
 8008d96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d9a:	6001      	str	r1, [r0, #0]
 8008d9c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d9e:	bf00      	nop
 8008da0:	e000ed88 	.word	0xe000ed88

08008da4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008daa:	f3ef 8305 	mrs	r3, IPSR
 8008dae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2b0f      	cmp	r3, #15
 8008db4:	d913      	bls.n	8008dde <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008db6:	4a16      	ldr	r2, [pc, #88]	; (8008e10 <vPortValidateInterruptPriority+0x6c>)
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	4413      	add	r3, r2
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008dc0:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <vPortValidateInterruptPriority+0x70>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	7afa      	ldrb	r2, [r7, #11]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d209      	bcs.n	8008dde <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	607b      	str	r3, [r7, #4]
 8008ddc:	e7fe      	b.n	8008ddc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008dde:	4b0e      	ldr	r3, [pc, #56]	; (8008e18 <vPortValidateInterruptPriority+0x74>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008de6:	4b0d      	ldr	r3, [pc, #52]	; (8008e1c <vPortValidateInterruptPriority+0x78>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d909      	bls.n	8008e02 <vPortValidateInterruptPriority+0x5e>
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	603b      	str	r3, [r7, #0]
 8008e00:	e7fe      	b.n	8008e00 <vPortValidateInterruptPriority+0x5c>
	}
 8008e02:	bf00      	nop
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	e000e3f0 	.word	0xe000e3f0
 8008e14:	20000e28 	.word	0x20000e28
 8008e18:	e000ed0c 	.word	0xe000ed0c
 8008e1c:	20000e2c 	.word	0x20000e2c

08008e20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08a      	sub	sp, #40	; 0x28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e2c:	f7fe fa7c 	bl	8007328 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e30:	4b57      	ldr	r3, [pc, #348]	; (8008f90 <pvPortMalloc+0x170>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e38:	f000 f90c 	bl	8009054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e3c:	4b55      	ldr	r3, [pc, #340]	; (8008f94 <pvPortMalloc+0x174>)
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4013      	ands	r3, r2
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f040 808c 	bne.w	8008f62 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d01c      	beq.n	8008e8a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008e50:	2208      	movs	r2, #8
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4413      	add	r3, r2
 8008e56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f003 0307 	and.w	r3, r3, #7
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d013      	beq.n	8008e8a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f023 0307 	bic.w	r3, r3, #7
 8008e68:	3308      	adds	r3, #8
 8008e6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f003 0307 	and.w	r3, r3, #7
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d009      	beq.n	8008e8a <pvPortMalloc+0x6a>
 8008e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	617b      	str	r3, [r7, #20]
 8008e88:	e7fe      	b.n	8008e88 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d068      	beq.n	8008f62 <pvPortMalloc+0x142>
 8008e90:	4b41      	ldr	r3, [pc, #260]	; (8008f98 <pvPortMalloc+0x178>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d863      	bhi.n	8008f62 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e9a:	4b40      	ldr	r3, [pc, #256]	; (8008f9c <pvPortMalloc+0x17c>)
 8008e9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e9e:	4b3f      	ldr	r3, [pc, #252]	; (8008f9c <pvPortMalloc+0x17c>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ea4:	e004      	b.n	8008eb0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d903      	bls.n	8008ec2 <pvPortMalloc+0xa2>
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1f1      	bne.n	8008ea6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ec2:	4b33      	ldr	r3, [pc, #204]	; (8008f90 <pvPortMalloc+0x170>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d04a      	beq.n	8008f62 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ecc:	6a3b      	ldr	r3, [r7, #32]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2208      	movs	r2, #8
 8008ed2:	4413      	add	r3, r2
 8008ed4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	1ad2      	subs	r2, r2, r3
 8008ee6:	2308      	movs	r3, #8
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d91e      	bls.n	8008f2c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d009      	beq.n	8008f14 <pvPortMalloc+0xf4>
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	613b      	str	r3, [r7, #16]
 8008f12:	e7fe      	b.n	8008f12 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	1ad2      	subs	r2, r2, r3
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f26:	69b8      	ldr	r0, [r7, #24]
 8008f28:	f000 f8f6 	bl	8009118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f2c:	4b1a      	ldr	r3, [pc, #104]	; (8008f98 <pvPortMalloc+0x178>)
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	4a18      	ldr	r2, [pc, #96]	; (8008f98 <pvPortMalloc+0x178>)
 8008f38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f3a:	4b17      	ldr	r3, [pc, #92]	; (8008f98 <pvPortMalloc+0x178>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	4b18      	ldr	r3, [pc, #96]	; (8008fa0 <pvPortMalloc+0x180>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d203      	bcs.n	8008f4e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f46:	4b14      	ldr	r3, [pc, #80]	; (8008f98 <pvPortMalloc+0x178>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a15      	ldr	r2, [pc, #84]	; (8008fa0 <pvPortMalloc+0x180>)
 8008f4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	4b10      	ldr	r3, [pc, #64]	; (8008f94 <pvPortMalloc+0x174>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	431a      	orrs	r2, r3
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f62:	f7fe f9ef 	bl	8007344 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	f003 0307 	and.w	r3, r3, #7
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d009      	beq.n	8008f84 <pvPortMalloc+0x164>
 8008f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	60fb      	str	r3, [r7, #12]
 8008f82:	e7fe      	b.n	8008f82 <pvPortMalloc+0x162>
	return pvReturn;
 8008f84:	69fb      	ldr	r3, [r7, #28]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3728      	adds	r7, #40	; 0x28
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	2000fe38 	.word	0x2000fe38
 8008f94:	2000fe44 	.word	0x2000fe44
 8008f98:	2000fe3c 	.word	0x2000fe3c
 8008f9c:	2000fe30 	.word	0x2000fe30
 8008fa0:	2000fe40 	.word	0x2000fe40

08008fa4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d046      	beq.n	8009044 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fb6:	2308      	movs	r3, #8
 8008fb8:	425b      	negs	r3, r3
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	4b20      	ldr	r3, [pc, #128]	; (800904c <vPortFree+0xa8>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4013      	ands	r3, r2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d109      	bne.n	8008fe6 <vPortFree+0x42>
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	e7fe      	b.n	8008fe4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d009      	beq.n	8009002 <vPortFree+0x5e>
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	60bb      	str	r3, [r7, #8]
 8009000:	e7fe      	b.n	8009000 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	4b11      	ldr	r3, [pc, #68]	; (800904c <vPortFree+0xa8>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d019      	beq.n	8009044 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d115      	bne.n	8009044 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b0b      	ldr	r3, [pc, #44]	; (800904c <vPortFree+0xa8>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	43db      	mvns	r3, r3
 8009022:	401a      	ands	r2, r3
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009028:	f7fe f97e 	bl	8007328 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	4b07      	ldr	r3, [pc, #28]	; (8009050 <vPortFree+0xac>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4413      	add	r3, r2
 8009036:	4a06      	ldr	r2, [pc, #24]	; (8009050 <vPortFree+0xac>)
 8009038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800903a:	6938      	ldr	r0, [r7, #16]
 800903c:	f000 f86c 	bl	8009118 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009040:	f7fe f980 	bl	8007344 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009044:	bf00      	nop
 8009046:	3718      	adds	r7, #24
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	2000fe44 	.word	0x2000fe44
 8009050:	2000fe3c 	.word	0x2000fe3c

08009054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800905a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800905e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009060:	4b27      	ldr	r3, [pc, #156]	; (8009100 <prvHeapInit+0xac>)
 8009062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00c      	beq.n	8009088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3307      	adds	r3, #7
 8009072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 0307 	bic.w	r3, r3, #7
 800907a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	4a1f      	ldr	r2, [pc, #124]	; (8009100 <prvHeapInit+0xac>)
 8009084:	4413      	add	r3, r2
 8009086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800908c:	4a1d      	ldr	r2, [pc, #116]	; (8009104 <prvHeapInit+0xb0>)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009092:	4b1c      	ldr	r3, [pc, #112]	; (8009104 <prvHeapInit+0xb0>)
 8009094:	2200      	movs	r2, #0
 8009096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	4413      	add	r3, r2
 800909e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090a0:	2208      	movs	r2, #8
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f023 0307 	bic.w	r3, r3, #7
 80090ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4a15      	ldr	r2, [pc, #84]	; (8009108 <prvHeapInit+0xb4>)
 80090b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090b6:	4b14      	ldr	r3, [pc, #80]	; (8009108 <prvHeapInit+0xb4>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2200      	movs	r2, #0
 80090bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090be:	4b12      	ldr	r3, [pc, #72]	; (8009108 <prvHeapInit+0xb4>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2200      	movs	r2, #0
 80090c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	1ad2      	subs	r2, r2, r3
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090d4:	4b0c      	ldr	r3, [pc, #48]	; (8009108 <prvHeapInit+0xb4>)
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	4a0a      	ldr	r2, [pc, #40]	; (800910c <prvHeapInit+0xb8>)
 80090e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	4a09      	ldr	r2, [pc, #36]	; (8009110 <prvHeapInit+0xbc>)
 80090ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090ec:	4b09      	ldr	r3, [pc, #36]	; (8009114 <prvHeapInit+0xc0>)
 80090ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090f2:	601a      	str	r2, [r3, #0]
}
 80090f4:	bf00      	nop
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr
 8009100:	20000e30 	.word	0x20000e30
 8009104:	2000fe30 	.word	0x2000fe30
 8009108:	2000fe38 	.word	0x2000fe38
 800910c:	2000fe40 	.word	0x2000fe40
 8009110:	2000fe3c 	.word	0x2000fe3c
 8009114:	2000fe44 	.word	0x2000fe44

08009118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009120:	4b28      	ldr	r3, [pc, #160]	; (80091c4 <prvInsertBlockIntoFreeList+0xac>)
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	e002      	b.n	800912c <prvInsertBlockIntoFreeList+0x14>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	429a      	cmp	r2, r3
 8009134:	d8f7      	bhi.n	8009126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	4413      	add	r3, r2
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	429a      	cmp	r2, r3
 8009146:	d108      	bne.n	800915a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	441a      	add	r2, r3
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	441a      	add	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	429a      	cmp	r2, r3
 800916c:	d118      	bne.n	80091a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	4b15      	ldr	r3, [pc, #84]	; (80091c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	429a      	cmp	r2, r3
 8009178:	d00d      	beq.n	8009196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	441a      	add	r2, r3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	e008      	b.n	80091a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009196:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	601a      	str	r2, [r3, #0]
 800919e:	e003      	b.n	80091a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d002      	beq.n	80091b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091b6:	bf00      	nop
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	2000fe30 	.word	0x2000fe30
 80091c8:	2000fe38 	.word	0x2000fe38

080091cc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	330c      	adds	r3, #12
 80091dc:	461a      	mov	r2, r3
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f002 fa69 	bl	800b6b8 <tcpip_send_msg_wait_sem>
 80091e6:	4603      	mov	r3, r0
 80091e8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80091ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d103      	bne.n	80091fa <netconn_apimsg+0x2e>
    return apimsg->err;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80091f8:	e001      	b.n	80091fe <netconn_apimsg+0x32>
  }
  return err;
 80091fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
	...

08009208 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b08c      	sub	sp, #48	; 0x30
 800920c:	af00      	add	r7, sp, #0
 800920e:	4603      	mov	r3, r0
 8009210:	603a      	str	r2, [r7, #0]
 8009212:	71fb      	strb	r3, [r7, #7]
 8009214:	460b      	mov	r3, r1
 8009216:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	6839      	ldr	r1, [r7, #0]
 800921c:	4618      	mov	r0, r3
 800921e:	f001 f91f 	bl	800a460 <netconn_alloc>
 8009222:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	2b00      	cmp	r3, #0
 8009228:	d054      	beq.n	80092d4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800922a:	79bb      	ldrb	r3, [r7, #6]
 800922c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800922e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009230:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009232:	f107 0308 	add.w	r3, r7, #8
 8009236:	4619      	mov	r1, r3
 8009238:	4829      	ldr	r0, [pc, #164]	; (80092e0 <netconn_new_with_proto_and_callback+0xd8>)
 800923a:	f7ff ffc7 	bl	80091cc <netconn_apimsg>
 800923e:	4603      	mov	r3, r0
 8009240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009244:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009248:	2b00      	cmp	r3, #0
 800924a:	d043      	beq.n	80092d4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800924c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <netconn_new_with_proto_and_callback+0x58>
 8009254:	4b23      	ldr	r3, [pc, #140]	; (80092e4 <netconn_new_with_proto_and_callback+0xdc>)
 8009256:	22a3      	movs	r2, #163	; 0xa3
 8009258:	4923      	ldr	r1, [pc, #140]	; (80092e8 <netconn_new_with_proto_and_callback+0xe0>)
 800925a:	4824      	ldr	r0, [pc, #144]	; (80092ec <netconn_new_with_proto_and_callback+0xe4>)
 800925c:	f010 fe6c 	bl	8019f38 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8009260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009262:	3310      	adds	r3, #16
 8009264:	4618      	mov	r0, r3
 8009266:	f010 fcdf 	bl	8019c28 <sys_mbox_valid>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d105      	bne.n	800927c <netconn_new_with_proto_and_callback+0x74>
 8009270:	4b1c      	ldr	r3, [pc, #112]	; (80092e4 <netconn_new_with_proto_and_callback+0xdc>)
 8009272:	22a4      	movs	r2, #164	; 0xa4
 8009274:	491e      	ldr	r1, [pc, #120]	; (80092f0 <netconn_new_with_proto_and_callback+0xe8>)
 8009276:	481d      	ldr	r0, [pc, #116]	; (80092ec <netconn_new_with_proto_and_callback+0xe4>)
 8009278:	f010 fe5e 	bl	8019f38 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927e:	3314      	adds	r3, #20
 8009280:	4618      	mov	r0, r3
 8009282:	f010 fcd1 	bl	8019c28 <sys_mbox_valid>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d005      	beq.n	8009298 <netconn_new_with_proto_and_callback+0x90>
 800928c:	4b15      	ldr	r3, [pc, #84]	; (80092e4 <netconn_new_with_proto_and_callback+0xdc>)
 800928e:	22a6      	movs	r2, #166	; 0xa6
 8009290:	4918      	ldr	r1, [pc, #96]	; (80092f4 <netconn_new_with_proto_and_callback+0xec>)
 8009292:	4816      	ldr	r0, [pc, #88]	; (80092ec <netconn_new_with_proto_and_callback+0xe4>)
 8009294:	f010 fe50 	bl	8019f38 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929a:	330c      	adds	r3, #12
 800929c:	4618      	mov	r0, r3
 800929e:	f010 fd51 	bl	8019d44 <sys_sem_valid>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d105      	bne.n	80092b4 <netconn_new_with_proto_and_callback+0xac>
 80092a8:	4b0e      	ldr	r3, [pc, #56]	; (80092e4 <netconn_new_with_proto_and_callback+0xdc>)
 80092aa:	22a9      	movs	r2, #169	; 0xa9
 80092ac:	4912      	ldr	r1, [pc, #72]	; (80092f8 <netconn_new_with_proto_and_callback+0xf0>)
 80092ae:	480f      	ldr	r0, [pc, #60]	; (80092ec <netconn_new_with_proto_and_callback+0xe4>)
 80092b0:	f010 fe42 	bl	8019f38 <iprintf>
      sys_sem_free(&conn->op_completed);
 80092b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092b6:	330c      	adds	r3, #12
 80092b8:	4618      	mov	r0, r3
 80092ba:	f010 fd36 	bl	8019d2a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	3310      	adds	r3, #16
 80092c2:	4618      	mov	r0, r3
 80092c4:	f010 fc3c 	bl	8019b40 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80092c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092ca:	2007      	movs	r0, #7
 80092cc:	f004 fa4a 	bl	800d764 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80092d0:	2300      	movs	r3, #0
 80092d2:	e000      	b.n	80092d6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80092d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3730      	adds	r7, #48	; 0x30
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	0800a435 	.word	0x0800a435
 80092e4:	0801b358 	.word	0x0801b358
 80092e8:	0801b38c 	.word	0x0801b38c
 80092ec:	0801b3b0 	.word	0x0801b3b0
 80092f0:	0801b3d8 	.word	0x0801b3d8
 80092f4:	0801b3f0 	.word	0x0801b3f0
 80092f8:	0801b414 	.word	0x0801b414

080092fc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08c      	sub	sp, #48	; 0x30
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	e014      	b.n	8009338 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009312:	2329      	movs	r3, #41	; 0x29
 8009314:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009316:	f107 030c 	add.w	r3, r7, #12
 800931a:	4619      	mov	r1, r3
 800931c:	4808      	ldr	r0, [pc, #32]	; (8009340 <netconn_prepare_delete+0x44>)
 800931e:	f7ff ff55 	bl	80091cc <netconn_apimsg>
 8009322:	4603      	mov	r3, r0
 8009324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009328:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <netconn_prepare_delete+0x3a>
    return err;
 8009330:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009334:	e000      	b.n	8009338 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3730      	adds	r7, #48	; 0x30
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	0800a999 	.word	0x0800a999

08009344 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <netconn_delete+0x12>
    return ERR_OK;
 8009352:	2300      	movs	r3, #0
 8009354:	e00d      	b.n	8009372 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7ff ffd0 	bl	80092fc <netconn_prepare_delete>
 800935c:	4603      	mov	r3, r0
 800935e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8009360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d102      	bne.n	800936e <netconn_delete+0x2a>
    netconn_free(conn);
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f001 f8e7 	bl	800a53c <netconn_free>
  }
  return err;
 800936e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
	...

0800937c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08e      	sub	sp, #56	; 0x38
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	4613      	mov	r3, r2
 8009388:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d109      	bne.n	80093a4 <netconn_bind+0x28>
 8009390:	4b11      	ldr	r3, [pc, #68]	; (80093d8 <netconn_bind+0x5c>)
 8009392:	f44f 729c 	mov.w	r2, #312	; 0x138
 8009396:	4911      	ldr	r1, [pc, #68]	; (80093dc <netconn_bind+0x60>)
 8009398:	4811      	ldr	r0, [pc, #68]	; (80093e0 <netconn_bind+0x64>)
 800939a:	f010 fdcd 	bl	8019f38 <iprintf>
 800939e:	f06f 030f 	mvn.w	r3, #15
 80093a2:	e015      	b.n	80093d0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80093aa:	4b0e      	ldr	r3, [pc, #56]	; (80093e4 <netconn_bind+0x68>)
 80093ac:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80093b6:	88fb      	ldrh	r3, [r7, #6]
 80093b8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80093ba:	f107 0314 	add.w	r3, r7, #20
 80093be:	4619      	mov	r1, r3
 80093c0:	4809      	ldr	r0, [pc, #36]	; (80093e8 <netconn_bind+0x6c>)
 80093c2:	f7ff ff03 	bl	80091cc <netconn_apimsg>
 80093c6:	4603      	mov	r3, r0
 80093c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80093cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3738      	adds	r7, #56	; 0x38
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	0801b358 	.word	0x0801b358
 80093dc:	0801b490 	.word	0x0801b490
 80093e0:	0801b3b0 	.word	0x0801b3b0
 80093e4:	08040274 	.word	0x08040274
 80093e8:	0800ab61 	.word	0x0800ab61

080093ec <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b08c      	sub	sp, #48	; 0x30
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	460b      	mov	r3, r1
 80093f6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d109      	bne.n	8009412 <netconn_listen_with_backlog+0x26>
 80093fe:	4b0d      	ldr	r3, [pc, #52]	; (8009434 <netconn_listen_with_backlog+0x48>)
 8009400:	f240 12bb 	movw	r2, #443	; 0x1bb
 8009404:	490c      	ldr	r1, [pc, #48]	; (8009438 <netconn_listen_with_backlog+0x4c>)
 8009406:	480d      	ldr	r0, [pc, #52]	; (800943c <netconn_listen_with_backlog+0x50>)
 8009408:	f010 fd96 	bl	8019f38 <iprintf>
 800940c:	f06f 030f 	mvn.w	r3, #15
 8009410:	e00c      	b.n	800942c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8009416:	f107 030c 	add.w	r3, r7, #12
 800941a:	4619      	mov	r1, r3
 800941c:	4808      	ldr	r0, [pc, #32]	; (8009440 <netconn_listen_with_backlog+0x54>)
 800941e:	f7ff fed5 	bl	80091cc <netconn_apimsg>
 8009422:	4603      	mov	r3, r0
 8009424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009428:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800942c:	4618      	mov	r0, r3
 800942e:	3730      	adds	r7, #48	; 0x30
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	0801b358 	.word	0x0801b358
 8009438:	0801b510 	.word	0x0801b510
 800943c:	0801b3b0 	.word	0x0801b3b0
 8009440:	0800abd9 	.word	0x0800abd9

08009444 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b086      	sub	sp, #24
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d109      	bne.n	8009468 <netconn_accept+0x24>
 8009454:	4b3d      	ldr	r3, [pc, #244]	; (800954c <netconn_accept+0x108>)
 8009456:	f240 12e1 	movw	r2, #481	; 0x1e1
 800945a:	493d      	ldr	r1, [pc, #244]	; (8009550 <netconn_accept+0x10c>)
 800945c:	483d      	ldr	r0, [pc, #244]	; (8009554 <netconn_accept+0x110>)
 800945e:	f010 fd6b 	bl	8019f38 <iprintf>
 8009462:	f06f 030f 	mvn.w	r3, #15
 8009466:	e06c      	b.n	8009542 <netconn_accept+0xfe>
  *new_conn = NULL;
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	2200      	movs	r2, #0
 800946c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d109      	bne.n	8009488 <netconn_accept+0x44>
 8009474:	4b35      	ldr	r3, [pc, #212]	; (800954c <netconn_accept+0x108>)
 8009476:	f240 12e3 	movw	r2, #483	; 0x1e3
 800947a:	4937      	ldr	r1, [pc, #220]	; (8009558 <netconn_accept+0x114>)
 800947c:	4835      	ldr	r0, [pc, #212]	; (8009554 <netconn_accept+0x110>)
 800947e:	f010 fd5b 	bl	8019f38 <iprintf>
 8009482:	f06f 030f 	mvn.w	r3, #15
 8009486:	e05c      	b.n	8009542 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fb6c 	bl	8009b66 <netconn_err>
 800948e:	4603      	mov	r3, r0
 8009490:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8009492:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d002      	beq.n	80094a0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800949a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800949e:	e050      	b.n	8009542 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	3314      	adds	r3, #20
 80094a4:	4618      	mov	r0, r3
 80094a6:	f010 fbbf 	bl	8019c28 <sys_mbox_valid>
 80094aa:	4603      	mov	r3, r0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d005      	beq.n	80094bc <netconn_accept+0x78>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	7f1b      	ldrb	r3, [r3, #28]
 80094b4:	f003 0301 	and.w	r3, r3, #1
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80094bc:	f06f 030e 	mvn.w	r3, #14
 80094c0:	e03f      	b.n	8009542 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	7f1b      	ldrb	r3, [r3, #28]
 80094c6:	f003 0302 	and.w	r3, r3, #2
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00e      	beq.n	80094ec <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	3314      	adds	r3, #20
 80094d2:	f107 020c 	add.w	r2, r7, #12
 80094d6:	4611      	mov	r1, r2
 80094d8:	4618      	mov	r0, r3
 80094da:	f010 fb8e 	bl	8019bfa <sys_arch_mbox_tryfetch>
 80094de:	4603      	mov	r3, r0
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e4:	d10a      	bne.n	80094fc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80094e6:	f06f 0306 	mvn.w	r3, #6
 80094ea:	e02a      	b.n	8009542 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3314      	adds	r3, #20
 80094f0:	f107 010c 	add.w	r1, r7, #12
 80094f4:	2200      	movs	r2, #0
 80094f6:	4618      	mov	r0, r3
 80094f8:	f010 fb4e 	bl	8019b98 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	2b00      	cmp	r3, #0
 8009502:	d005      	beq.n	8009510 <netconn_accept+0xcc>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009508:	2200      	movs	r2, #0
 800950a:	2101      	movs	r1, #1
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f107 0213 	add.w	r2, r7, #19
 8009516:	4611      	mov	r1, r2
 8009518:	4618      	mov	r0, r3
 800951a:	f000 fb71 	bl	8009c00 <lwip_netconn_is_err_msg>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009524:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009528:	e00b      	b.n	8009542 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d102      	bne.n	8009536 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009530:	f06f 030e 	mvn.w	r3, #14
 8009534:	e005      	b.n	8009542 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009540:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009542:	4618      	mov	r0, r3
 8009544:	3718      	adds	r7, #24
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	0801b358 	.word	0x0801b358
 8009550:	0801b530 	.word	0x0801b530
 8009554:	0801b3b0 	.word	0x0801b3b0
 8009558:	0801b550 	.word	0x0801b550

0800955c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b088      	sub	sp, #32
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	4613      	mov	r3, r2
 8009568:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800956a:	2300      	movs	r3, #0
 800956c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d109      	bne.n	8009588 <netconn_recv_data+0x2c>
 8009574:	4b58      	ldr	r3, [pc, #352]	; (80096d8 <netconn_recv_data+0x17c>)
 8009576:	f44f 7212 	mov.w	r2, #584	; 0x248
 800957a:	4958      	ldr	r1, [pc, #352]	; (80096dc <netconn_recv_data+0x180>)
 800957c:	4858      	ldr	r0, [pc, #352]	; (80096e0 <netconn_recv_data+0x184>)
 800957e:	f010 fcdb 	bl	8019f38 <iprintf>
 8009582:	f06f 030f 	mvn.w	r3, #15
 8009586:	e0a2      	b.n	80096ce <netconn_recv_data+0x172>
  *new_buf = NULL;
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2200      	movs	r2, #0
 800958c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d109      	bne.n	80095a8 <netconn_recv_data+0x4c>
 8009594:	4b50      	ldr	r3, [pc, #320]	; (80096d8 <netconn_recv_data+0x17c>)
 8009596:	f240 224a 	movw	r2, #586	; 0x24a
 800959a:	4952      	ldr	r1, [pc, #328]	; (80096e4 <netconn_recv_data+0x188>)
 800959c:	4850      	ldr	r0, [pc, #320]	; (80096e0 <netconn_recv_data+0x184>)
 800959e:	f010 fccb 	bl	8019f38 <iprintf>
 80095a2:	f06f 030f 	mvn.w	r3, #15
 80095a6:	e092      	b.n	80096ce <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	3310      	adds	r3, #16
 80095ac:	4618      	mov	r0, r3
 80095ae:	f010 fb3b 	bl	8019c28 <sys_mbox_valid>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d10e      	bne.n	80095d6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f000 fad4 	bl	8009b66 <netconn_err>
 80095be:	4603      	mov	r3, r0
 80095c0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80095c2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d002      	beq.n	80095d0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80095ca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80095ce:	e07e      	b.n	80096ce <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80095d0:	f06f 030a 	mvn.w	r3, #10
 80095d4:	e07b      	b.n	80096ce <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	7f1b      	ldrb	r3, [r3, #28]
 80095da:	f003 0302 	and.w	r3, r3, #2
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10f      	bne.n	8009602 <netconn_recv_data+0xa6>
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	f003 0304 	and.w	r3, r3, #4
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10a      	bne.n	8009602 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	7f1b      	ldrb	r3, [r3, #28]
 80095f0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d104      	bne.n	8009602 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d023      	beq.n	800964a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3310      	adds	r3, #16
 8009606:	f107 0218 	add.w	r2, r7, #24
 800960a:	4611      	mov	r1, r2
 800960c:	4618      	mov	r0, r3
 800960e:	f010 faf4 	bl	8019bfa <sys_arch_mbox_tryfetch>
 8009612:	4603      	mov	r3, r0
 8009614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009618:	d11f      	bne.n	800965a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f000 faa3 	bl	8009b66 <netconn_err>
 8009620:	4603      	mov	r3, r0
 8009622:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009624:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800962c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009630:	e04d      	b.n	80096ce <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	7f1b      	ldrb	r3, [r3, #28]
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800963e:	f06f 030a 	mvn.w	r3, #10
 8009642:	e044      	b.n	80096ce <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009644:	f06f 0306 	mvn.w	r3, #6
 8009648:	e041      	b.n	80096ce <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	3310      	adds	r3, #16
 800964e:	f107 0118 	add.w	r1, r7, #24
 8009652:	2200      	movs	r2, #0
 8009654:	4618      	mov	r0, r3
 8009656:	f010 fa9f 	bl	8019b98 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009662:	2b10      	cmp	r3, #16
 8009664:	d117      	bne.n	8009696 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8009666:	69bb      	ldr	r3, [r7, #24]
 8009668:	f107 0217 	add.w	r2, r7, #23
 800966c:	4611      	mov	r1, r2
 800966e:	4618      	mov	r0, r3
 8009670:	f000 fac6 	bl	8009c00 <lwip_netconn_is_err_msg>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d009      	beq.n	800968e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800967a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800967e:	f113 0f0f 	cmn.w	r3, #15
 8009682:	d101      	bne.n	8009688 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	e022      	b.n	80096ce <netconn_recv_data+0x172>
      }
      return err;
 8009688:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800968c:	e01f      	b.n	80096ce <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	891b      	ldrh	r3, [r3, #8]
 8009692:	83fb      	strh	r3, [r7, #30]
 8009694:	e00d      	b.n	80096b2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8009696:	69bb      	ldr	r3, [r7, #24]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d106      	bne.n	80096aa <netconn_recv_data+0x14e>
 800969c:	4b0e      	ldr	r3, [pc, #56]	; (80096d8 <netconn_recv_data+0x17c>)
 800969e:	f240 2291 	movw	r2, #657	; 0x291
 80096a2:	4911      	ldr	r1, [pc, #68]	; (80096e8 <netconn_recv_data+0x18c>)
 80096a4:	480e      	ldr	r0, [pc, #56]	; (80096e0 <netconn_recv_data+0x184>)
 80096a6:	f010 fc47 	bl	8019f38 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	891b      	ldrh	r3, [r3, #8]
 80096b0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d005      	beq.n	80096c6 <netconn_recv_data+0x16a>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096be:	8bfa      	ldrh	r2, [r7, #30]
 80096c0:	2101      	movs	r1, #1
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80096c6:	69ba      	ldr	r2, [r7, #24]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3720      	adds	r7, #32
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	0801b358 	.word	0x0801b358
 80096dc:	0801b570 	.word	0x0801b570
 80096e0:	0801b3b0 	.word	0x0801b3b0
 80096e4:	0801b590 	.word	0x0801b590
 80096e8:	0801b5ac 	.word	0x0801b5ac

080096ec <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d005      	beq.n	800970a <netconn_tcp_recvd_msg+0x1e>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009706:	2b10      	cmp	r3, #16
 8009708:	d009      	beq.n	800971e <netconn_tcp_recvd_msg+0x32>
 800970a:	4b0c      	ldr	r3, [pc, #48]	; (800973c <netconn_tcp_recvd_msg+0x50>)
 800970c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8009710:	490b      	ldr	r1, [pc, #44]	; (8009740 <netconn_tcp_recvd_msg+0x54>)
 8009712:	480c      	ldr	r0, [pc, #48]	; (8009744 <netconn_tcp_recvd_msg+0x58>)
 8009714:	f010 fc10 	bl	8019f38 <iprintf>
 8009718:	f06f 030f 	mvn.w	r3, #15
 800971c:	e00a      	b.n	8009734 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	4806      	ldr	r0, [pc, #24]	; (8009748 <netconn_tcp_recvd_msg+0x5c>)
 800972e:	f7ff fd4d 	bl	80091cc <netconn_apimsg>
 8009732:	4603      	mov	r3, r0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3710      	adds	r7, #16
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	0801b358 	.word	0x0801b358
 8009740:	0801b5b8 	.word	0x0801b5b8
 8009744:	0801b3b0 	.word	0x0801b3b0
 8009748:	0800ad09 	.word	0x0800ad09

0800974c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b090      	sub	sp, #64	; 0x40
 8009750:	af00      	add	r7, sp, #0
 8009752:	60f8      	str	r0, [r7, #12]
 8009754:	60b9      	str	r1, [r7, #8]
 8009756:	4613      	mov	r3, r2
 8009758:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3310      	adds	r3, #16
 800975e:	4618      	mov	r0, r3
 8009760:	f010 fa62 	bl	8019c28 <sys_mbox_valid>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d102      	bne.n	8009770 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800976a:	f06f 030a 	mvn.w	r3, #10
 800976e:	e06d      	b.n	800984c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	7f1b      	ldrb	r3, [r3, #28]
 8009774:	b25b      	sxtb	r3, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	da07      	bge.n	800978a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	7f1b      	ldrb	r3, [r3, #28]
 800977e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009782:	b2da      	uxtb	r2, r3
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009788:	e039      	b.n	80097fe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800978a:	79fb      	ldrb	r3, [r7, #7]
 800978c:	461a      	mov	r2, r3
 800978e:	68b9      	ldr	r1, [r7, #8]
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f7ff fee3 	bl	800955c <netconn_recv_data>
 8009796:	4603      	mov	r3, r0
 8009798:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800979c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d002      	beq.n	80097aa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80097a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80097a8:	e050      	b.n	800984c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80097b0:	79fb      	ldrb	r3, [r7, #7]
 80097b2:	f003 0308 	and.w	r3, r3, #8
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10e      	bne.n	80097d8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80097ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d002      	beq.n	80097c6 <netconn_recv_data_tcp+0x7a>
 80097c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c2:	891b      	ldrh	r3, [r3, #8]
 80097c4:	e000      	b.n	80097c8 <netconn_recv_data_tcp+0x7c>
 80097c6:	2301      	movs	r3, #1
 80097c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80097ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80097cc:	f107 0214 	add.w	r2, r7, #20
 80097d0:	4619      	mov	r1, r3
 80097d2:	68f8      	ldr	r0, [r7, #12]
 80097d4:	f7ff ff8a 	bl	80096ec <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d134      	bne.n	8009848 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80097de:	79fb      	ldrb	r3, [r7, #7]
 80097e0:	f003 0310 	and.w	r3, r3, #16
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d009      	beq.n	80097fc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	7f1b      	ldrb	r3, [r3, #28]
 80097ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80097f6:	f06f 0306 	mvn.w	r3, #6
 80097fa:	e027      	b.n	800984c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80097fc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009802:	2b00      	cmp	r3, #0
 8009804:	d005      	beq.n	8009812 <netconn_recv_data_tcp+0xc6>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980a:	2200      	movs	r2, #0
 800980c:	2101      	movs	r1, #1
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d10f      	bne.n	800983a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 f9a3 	bl	8009b66 <netconn_err>
 8009820:	4603      	mov	r3, r0
 8009822:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009826:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800982a:	2b00      	cmp	r3, #0
 800982c:	d002      	beq.n	8009834 <netconn_recv_data_tcp+0xe8>
          return err;
 800982e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009832:	e00b      	b.n	800984c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009834:	f06f 030d 	mvn.w	r3, #13
 8009838:	e008      	b.n	800984c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800983a:	2101      	movs	r1, #1
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 f955 	bl	8009aec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009842:	f06f 030e 	mvn.w	r3, #14
 8009846:	e001      	b.n	800984c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009848:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800984c:	4618      	mov	r0, r3
 800984e:	3740      	adds	r7, #64	; 0x40
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b086      	sub	sp, #24
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800985e:	2300      	movs	r3, #0
 8009860:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d109      	bne.n	800987c <netconn_recv+0x28>
 8009868:	4b32      	ldr	r3, [pc, #200]	; (8009934 <netconn_recv+0xe0>)
 800986a:	f240 3263 	movw	r2, #867	; 0x363
 800986e:	4932      	ldr	r1, [pc, #200]	; (8009938 <netconn_recv+0xe4>)
 8009870:	4832      	ldr	r0, [pc, #200]	; (800993c <netconn_recv+0xe8>)
 8009872:	f010 fb61 	bl	8019f38 <iprintf>
 8009876:	f06f 030f 	mvn.w	r3, #15
 800987a:	e056      	b.n	800992a <netconn_recv+0xd6>
  *new_buf = NULL;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2200      	movs	r2, #0
 8009880:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d109      	bne.n	800989c <netconn_recv+0x48>
 8009888:	4b2a      	ldr	r3, [pc, #168]	; (8009934 <netconn_recv+0xe0>)
 800988a:	f240 3265 	movw	r2, #869	; 0x365
 800988e:	492c      	ldr	r1, [pc, #176]	; (8009940 <netconn_recv+0xec>)
 8009890:	482a      	ldr	r0, [pc, #168]	; (800993c <netconn_recv+0xe8>)
 8009892:	f010 fb51 	bl	8019f38 <iprintf>
 8009896:	f06f 030f 	mvn.w	r3, #15
 800989a:	e046      	b.n	800992a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098a4:	2b10      	cmp	r3, #16
 80098a6:	d13a      	bne.n	800991e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80098a8:	2300      	movs	r3, #0
 80098aa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80098ac:	2006      	movs	r0, #6
 80098ae:	f003 ff07 	bl	800d6c0 <memp_malloc>
 80098b2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d102      	bne.n	80098c0 <netconn_recv+0x6c>
      return ERR_MEM;
 80098ba:	f04f 33ff 	mov.w	r3, #4294967295
 80098be:	e034      	b.n	800992a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80098c0:	f107 030c 	add.w	r3, r7, #12
 80098c4:	2200      	movs	r2, #0
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff ff3f 	bl	800974c <netconn_recv_data_tcp>
 80098ce:	4603      	mov	r3, r0
 80098d0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80098d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d006      	beq.n	80098e8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80098da:	6979      	ldr	r1, [r7, #20]
 80098dc:	2006      	movs	r0, #6
 80098de:	f003 ff41 	bl	800d764 <memp_free>
      return err;
 80098e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80098e6:	e020      	b.n	800992a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d106      	bne.n	80098fc <netconn_recv+0xa8>
 80098ee:	4b11      	ldr	r3, [pc, #68]	; (8009934 <netconn_recv+0xe0>)
 80098f0:	f240 3279 	movw	r2, #889	; 0x379
 80098f4:	4913      	ldr	r1, [pc, #76]	; (8009944 <netconn_recv+0xf0>)
 80098f6:	4811      	ldr	r0, [pc, #68]	; (800993c <netconn_recv+0xe8>)
 80098f8:	f010 fb1e 	bl	8019f38 <iprintf>

    buf->p = p;
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	2200      	movs	r2, #0
 800990c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2200      	movs	r2, #0
 8009912:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800991a:	2300      	movs	r3, #0
 800991c:	e005      	b.n	800992a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800991e:	2200      	movs	r2, #0
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff fe1a 	bl	800955c <netconn_recv_data>
 8009928:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800992a:	4618      	mov	r0, r3
 800992c:	3718      	adds	r7, #24
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	0801b358 	.word	0x0801b358
 8009938:	0801b570 	.word	0x0801b570
 800993c:	0801b3b0 	.word	0x0801b3b0
 8009940:	0801b590 	.word	0x0801b590
 8009944:	0801b608 	.word	0x0801b608

08009948 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af02      	add	r7, sp, #8
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
 8009954:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800995e:	78fa      	ldrb	r2, [r7, #3]
 8009960:	f107 0110 	add.w	r1, r7, #16
 8009964:	6a3b      	ldr	r3, [r7, #32]
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	4613      	mov	r3, r2
 800996a:	2201      	movs	r2, #1
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 f805 	bl	800997c <netconn_write_vectors_partly>
 8009972:	4603      	mov	r3, r0
}
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b092      	sub	sp, #72	; 0x48
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	4611      	mov	r1, r2
 8009988:	461a      	mov	r2, r3
 800998a:	460b      	mov	r3, r1
 800998c:	80fb      	strh	r3, [r7, #6]
 800998e:	4613      	mov	r3, r2
 8009990:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d109      	bne.n	80099ac <netconn_write_vectors_partly+0x30>
 8009998:	4b4e      	ldr	r3, [pc, #312]	; (8009ad4 <netconn_write_vectors_partly+0x158>)
 800999a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800999e:	494e      	ldr	r1, [pc, #312]	; (8009ad8 <netconn_write_vectors_partly+0x15c>)
 80099a0:	484e      	ldr	r0, [pc, #312]	; (8009adc <netconn_write_vectors_partly+0x160>)
 80099a2:	f010 fac9 	bl	8019f38 <iprintf>
 80099a6:	f06f 030f 	mvn.w	r3, #15
 80099aa:	e08e      	b.n	8009aca <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099b4:	2b10      	cmp	r3, #16
 80099b6:	d009      	beq.n	80099cc <netconn_write_vectors_partly+0x50>
 80099b8:	4b46      	ldr	r3, [pc, #280]	; (8009ad4 <netconn_write_vectors_partly+0x158>)
 80099ba:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80099be:	4948      	ldr	r1, [pc, #288]	; (8009ae0 <netconn_write_vectors_partly+0x164>)
 80099c0:	4846      	ldr	r0, [pc, #280]	; (8009adc <netconn_write_vectors_partly+0x160>)
 80099c2:	f010 fab9 	bl	8019f38 <iprintf>
 80099c6:	f06f 0305 	mvn.w	r3, #5
 80099ca:	e07e      	b.n	8009aca <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	7f1b      	ldrb	r3, [r3, #28]
 80099d0:	f003 0302 	and.w	r3, r3, #2
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d104      	bne.n	80099e2 <netconn_write_vectors_partly+0x66>
 80099d8:	797b      	ldrb	r3, [r7, #5]
 80099da:	f003 0304 	and.w	r3, r3, #4
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <netconn_write_vectors_partly+0x6a>
 80099e2:	2301      	movs	r3, #1
 80099e4:	e000      	b.n	80099e8 <netconn_write_vectors_partly+0x6c>
 80099e6:	2300      	movs	r3, #0
 80099e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80099ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d005      	beq.n	8009a00 <netconn_write_vectors_partly+0x84>
 80099f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d102      	bne.n	8009a00 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80099fa:	f06f 0305 	mvn.w	r3, #5
 80099fe:	e064      	b.n	8009aca <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009a04:	2300      	movs	r3, #0
 8009a06:	643b      	str	r3, [r7, #64]	; 0x40
 8009a08:	e015      	b.n	8009a36 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009a0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a0c:	00db      	lsls	r3, r3, #3
 8009a0e:	68ba      	ldr	r2, [r7, #8]
 8009a10:	4413      	add	r3, r2
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a16:	4413      	add	r3, r2
 8009a18:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a1c:	00db      	lsls	r3, r3, #3
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	4413      	add	r3, r2
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d202      	bcs.n	8009a30 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009a2a:	f06f 0305 	mvn.w	r3, #5
 8009a2e:	e04c      	b.n	8009aca <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a32:	3301      	adds	r3, #1
 8009a34:	643b      	str	r3, [r7, #64]	; 0x40
 8009a36:	88fb      	ldrh	r3, [r7, #6]
 8009a38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	dbe5      	blt.n	8009a0a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d101      	bne.n	8009a48 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	e040      	b.n	8009aca <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	da0a      	bge.n	8009a64 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d102      	bne.n	8009a5a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009a54:	f06f 0305 	mvn.w	r3, #5
 8009a58:	e037      	b.n	8009aca <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009a5a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009a5e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a62:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009a6c:	88fb      	ldrh	r3, [r7, #6]
 8009a6e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009a74:	797b      	ldrb	r3, [r7, #5]
 8009a76:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009a82:	f107 0314 	add.w	r3, r7, #20
 8009a86:	4619      	mov	r1, r3
 8009a88:	4816      	ldr	r0, [pc, #88]	; (8009ae4 <netconn_write_vectors_partly+0x168>)
 8009a8a:	f7ff fb9f 	bl	80091cc <netconn_apimsg>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009a94:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d114      	bne.n	8009ac6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d002      	beq.n	8009aa8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aa6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009aa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10a      	bne.n	8009ac6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d006      	beq.n	8009ac6 <netconn_write_vectors_partly+0x14a>
 8009ab8:	4b06      	ldr	r3, [pc, #24]	; (8009ad4 <netconn_write_vectors_partly+0x158>)
 8009aba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009abe:	490a      	ldr	r1, [pc, #40]	; (8009ae8 <netconn_write_vectors_partly+0x16c>)
 8009ac0:	4806      	ldr	r0, [pc, #24]	; (8009adc <netconn_write_vectors_partly+0x160>)
 8009ac2:	f010 fa39 	bl	8019f38 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009ac6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3748      	adds	r7, #72	; 0x48
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
 8009ad2:	bf00      	nop
 8009ad4:	0801b358 	.word	0x0801b358
 8009ad8:	0801b630 	.word	0x0801b630
 8009adc:	0801b3b0 	.word	0x0801b3b0
 8009ae0:	0801b64c 	.word	0x0801b64c
 8009ae4:	0800b10d 	.word	0x0800b10d
 8009ae8:	0801b670 	.word	0x0801b670

08009aec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b08c      	sub	sp, #48	; 0x30
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d109      	bne.n	8009b12 <netconn_close_shutdown+0x26>
 8009afe:	4b0f      	ldr	r3, [pc, #60]	; (8009b3c <netconn_close_shutdown+0x50>)
 8009b00:	f240 4247 	movw	r2, #1095	; 0x447
 8009b04:	490e      	ldr	r1, [pc, #56]	; (8009b40 <netconn_close_shutdown+0x54>)
 8009b06:	480f      	ldr	r0, [pc, #60]	; (8009b44 <netconn_close_shutdown+0x58>)
 8009b08:	f010 fa16 	bl	8019f38 <iprintf>
 8009b0c:	f06f 030f 	mvn.w	r3, #15
 8009b10:	e010      	b.n	8009b34 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009b16:	78fb      	ldrb	r3, [r7, #3]
 8009b18:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009b1a:	2329      	movs	r3, #41	; 0x29
 8009b1c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009b1e:	f107 030c 	add.w	r3, r7, #12
 8009b22:	4619      	mov	r1, r3
 8009b24:	4808      	ldr	r0, [pc, #32]	; (8009b48 <netconn_close_shutdown+0x5c>)
 8009b26:	f7ff fb51 	bl	80091cc <netconn_apimsg>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009b30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3730      	adds	r7, #48	; 0x30
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	0801b358 	.word	0x0801b358
 8009b40:	0801b694 	.word	0x0801b694
 8009b44:	0801b3b0 	.word	0x0801b3b0
 8009b48:	0800b225 	.word	0x0800b225

08009b4c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009b54:	2103      	movs	r1, #3
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7ff ffc8 	bl	8009aec <netconn_close_shutdown>
 8009b5c:	4603      	mov	r3, r0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b084      	sub	sp, #16
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <netconn_err+0x12>
    return ERR_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	e00d      	b.n	8009b94 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009b78:	f010 f960 	bl	8019e3c <sys_arch_protect>
 8009b7c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	7a1b      	ldrb	r3, [r3, #8]
 8009b82:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009b8a:	68f8      	ldr	r0, [r7, #12]
 8009b8c:	f010 f964 	bl	8019e58 <sys_arch_unprotect>
  return err;
 8009b90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009baa:	f113 0f0e 	cmn.w	r3, #14
 8009bae:	d008      	beq.n	8009bc2 <lwip_netconn_err_to_msg+0x26>
 8009bb0:	f113 0f0d 	cmn.w	r3, #13
 8009bb4:	d003      	beq.n	8009bbe <lwip_netconn_err_to_msg+0x22>
 8009bb6:	f113 0f0f 	cmn.w	r3, #15
 8009bba:	d004      	beq.n	8009bc6 <lwip_netconn_err_to_msg+0x2a>
 8009bbc:	e005      	b.n	8009bca <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009bbe:	4b0a      	ldr	r3, [pc, #40]	; (8009be8 <lwip_netconn_err_to_msg+0x4c>)
 8009bc0:	e00e      	b.n	8009be0 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009bc2:	4b0a      	ldr	r3, [pc, #40]	; (8009bec <lwip_netconn_err_to_msg+0x50>)
 8009bc4:	e00c      	b.n	8009be0 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009bc6:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <lwip_netconn_err_to_msg+0x54>)
 8009bc8:	e00a      	b.n	8009be0 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d005      	beq.n	8009bde <lwip_netconn_err_to_msg+0x42>
 8009bd2:	4b08      	ldr	r3, [pc, #32]	; (8009bf4 <lwip_netconn_err_to_msg+0x58>)
 8009bd4:	227d      	movs	r2, #125	; 0x7d
 8009bd6:	4908      	ldr	r1, [pc, #32]	; (8009bf8 <lwip_netconn_err_to_msg+0x5c>)
 8009bd8:	4808      	ldr	r0, [pc, #32]	; (8009bfc <lwip_netconn_err_to_msg+0x60>)
 8009bda:	f010 f9ad 	bl	8019f38 <iprintf>
      return NULL;
 8009bde:	2300      	movs	r3, #0
  }
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	0801f00c 	.word	0x0801f00c
 8009bec:	0801f00d 	.word	0x0801f00d
 8009bf0:	0801f00e 	.word	0x0801f00e
 8009bf4:	0801b6b0 	.word	0x0801b6b0
 8009bf8:	0801b6e4 	.word	0x0801b6e4
 8009bfc:	0801b6f4 	.word	0x0801b6f4

08009c00 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d105      	bne.n	8009c1c <lwip_netconn_is_err_msg+0x1c>
 8009c10:	4b12      	ldr	r3, [pc, #72]	; (8009c5c <lwip_netconn_is_err_msg+0x5c>)
 8009c12:	2285      	movs	r2, #133	; 0x85
 8009c14:	4912      	ldr	r1, [pc, #72]	; (8009c60 <lwip_netconn_is_err_msg+0x60>)
 8009c16:	4813      	ldr	r0, [pc, #76]	; (8009c64 <lwip_netconn_is_err_msg+0x64>)
 8009c18:	f010 f98e 	bl	8019f38 <iprintf>

  if (msg == &netconn_aborted) {
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a12      	ldr	r2, [pc, #72]	; (8009c68 <lwip_netconn_is_err_msg+0x68>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d104      	bne.n	8009c2e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	22f3      	movs	r2, #243	; 0xf3
 8009c28:	701a      	strb	r2, [r3, #0]
    return 1;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e012      	b.n	8009c54 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a0e      	ldr	r2, [pc, #56]	; (8009c6c <lwip_netconn_is_err_msg+0x6c>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d104      	bne.n	8009c40 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	22f2      	movs	r2, #242	; 0xf2
 8009c3a:	701a      	strb	r2, [r3, #0]
    return 1;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e009      	b.n	8009c54 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a0b      	ldr	r2, [pc, #44]	; (8009c70 <lwip_netconn_is_err_msg+0x70>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d104      	bne.n	8009c52 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	22f1      	movs	r2, #241	; 0xf1
 8009c4c:	701a      	strb	r2, [r3, #0]
    return 1;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e000      	b.n	8009c54 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	0801b6b0 	.word	0x0801b6b0
 8009c60:	0801b71c 	.word	0x0801b71c
 8009c64:	0801b6f4 	.word	0x0801b6f4
 8009c68:	0801f00c 	.word	0x0801f00c
 8009c6c:	0801f00d 	.word	0x0801f00d
 8009c70:	0801f00e 	.word	0x0801f00e

08009c74 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b088      	sub	sp, #32
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
 8009c80:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d105      	bne.n	8009c94 <recv_udp+0x20>
 8009c88:	4b34      	ldr	r3, [pc, #208]	; (8009d5c <recv_udp+0xe8>)
 8009c8a:	22e5      	movs	r2, #229	; 0xe5
 8009c8c:	4934      	ldr	r1, [pc, #208]	; (8009d60 <recv_udp+0xec>)
 8009c8e:	4835      	ldr	r0, [pc, #212]	; (8009d64 <recv_udp+0xf0>)
 8009c90:	f010 f952 	bl	8019f38 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d105      	bne.n	8009ca6 <recv_udp+0x32>
 8009c9a:	4b30      	ldr	r3, [pc, #192]	; (8009d5c <recv_udp+0xe8>)
 8009c9c:	22e6      	movs	r2, #230	; 0xe6
 8009c9e:	4932      	ldr	r1, [pc, #200]	; (8009d68 <recv_udp+0xf4>)
 8009ca0:	4830      	ldr	r0, [pc, #192]	; (8009d64 <recv_udp+0xf0>)
 8009ca2:	f010 f949 	bl	8019f38 <iprintf>
  conn = (struct netconn *)arg;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d103      	bne.n	8009cb8 <recv_udp+0x44>
    pbuf_free(p);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f004 fc03 	bl	800e4bc <pbuf_free>
    return;
 8009cb6:	e04d      	b.n	8009d54 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d005      	beq.n	8009cce <recv_udp+0x5a>
 8009cc2:	4b26      	ldr	r3, [pc, #152]	; (8009d5c <recv_udp+0xe8>)
 8009cc4:	22ee      	movs	r2, #238	; 0xee
 8009cc6:	4929      	ldr	r1, [pc, #164]	; (8009d6c <recv_udp+0xf8>)
 8009cc8:	4826      	ldr	r0, [pc, #152]	; (8009d64 <recv_udp+0xf0>)
 8009cca:	f010 f935 	bl	8019f38 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	3310      	adds	r3, #16
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f00f ffa8 	bl	8019c28 <sys_mbox_valid>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d103      	bne.n	8009ce6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f004 fbec 	bl	800e4bc <pbuf_free>
    return;
 8009ce4:	e036      	b.n	8009d54 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009ce6:	2006      	movs	r0, #6
 8009ce8:	f003 fcea 	bl	800d6c0 <memp_malloc>
 8009cec:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d103      	bne.n	8009cfc <recv_udp+0x88>
    pbuf_free(p);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f004 fbe1 	bl	800e4bc <pbuf_free>
    return;
 8009cfa:	e02b      	b.n	8009d54 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d002      	beq.n	8009d14 <recv_udp+0xa0>
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	e000      	b.n	8009d16 <recv_udp+0xa2>
 8009d14:	2300      	movs	r3, #0
 8009d16:	69ba      	ldr	r2, [r7, #24]
 8009d18:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009d1a:	69bb      	ldr	r3, [r7, #24]
 8009d1c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009d1e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	891b      	ldrh	r3, [r3, #8]
 8009d24:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	3310      	adds	r3, #16
 8009d2a:	69b9      	ldr	r1, [r7, #24]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f00f ff19 	bl	8019b64 <sys_mbox_trypost>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d003      	beq.n	8009d40 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009d38:	69b8      	ldr	r0, [r7, #24]
 8009d3a:	f001 faff 	bl	800b33c <netbuf_delete>
    return;
 8009d3e:	e009      	b.n	8009d54 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d005      	beq.n	8009d54 <recv_udp+0xe0>
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4c:	8afa      	ldrh	r2, [r7, #22]
 8009d4e:	2100      	movs	r1, #0
 8009d50:	69f8      	ldr	r0, [r7, #28]
 8009d52:	4798      	blx	r3
  }
}
 8009d54:	3720      	adds	r7, #32
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	0801b6b0 	.word	0x0801b6b0
 8009d60:	0801b728 	.word	0x0801b728
 8009d64:	0801b6f4 	.word	0x0801b6f4
 8009d68:	0801b74c 	.word	0x0801b74c
 8009d6c:	0801b76c 	.word	0x0801b76c

08009d70 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b088      	sub	sp, #32
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d106      	bne.n	8009d92 <recv_tcp+0x22>
 8009d84:	4b36      	ldr	r3, [pc, #216]	; (8009e60 <recv_tcp+0xf0>)
 8009d86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009d8a:	4936      	ldr	r1, [pc, #216]	; (8009e64 <recv_tcp+0xf4>)
 8009d8c:	4836      	ldr	r0, [pc, #216]	; (8009e68 <recv_tcp+0xf8>)
 8009d8e:	f010 f8d3 	bl	8019f38 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d106      	bne.n	8009da6 <recv_tcp+0x36>
 8009d98:	4b31      	ldr	r3, [pc, #196]	; (8009e60 <recv_tcp+0xf0>)
 8009d9a:	f240 122d 	movw	r2, #301	; 0x12d
 8009d9e:	4933      	ldr	r1, [pc, #204]	; (8009e6c <recv_tcp+0xfc>)
 8009da0:	4831      	ldr	r0, [pc, #196]	; (8009e68 <recv_tcp+0xf8>)
 8009da2:	f010 f8c9 	bl	8019f38 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009da6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d006      	beq.n	8009dbc <recv_tcp+0x4c>
 8009dae:	4b2c      	ldr	r3, [pc, #176]	; (8009e60 <recv_tcp+0xf0>)
 8009db0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009db4:	492e      	ldr	r1, [pc, #184]	; (8009e70 <recv_tcp+0x100>)
 8009db6:	482c      	ldr	r0, [pc, #176]	; (8009e68 <recv_tcp+0xf8>)
 8009db8:	f010 f8be 	bl	8019f38 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <recv_tcp+0x5c>
    return ERR_VAL;
 8009dc6:	f06f 0305 	mvn.w	r3, #5
 8009dca:	e045      	b.n	8009e58 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d006      	beq.n	8009de4 <recv_tcp+0x74>
 8009dd6:	4b22      	ldr	r3, [pc, #136]	; (8009e60 <recv_tcp+0xf0>)
 8009dd8:	f240 1235 	movw	r2, #309	; 0x135
 8009ddc:	4925      	ldr	r1, [pc, #148]	; (8009e74 <recv_tcp+0x104>)
 8009dde:	4822      	ldr	r0, [pc, #136]	; (8009e68 <recv_tcp+0xf8>)
 8009de0:	f010 f8aa 	bl	8019f38 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	3310      	adds	r3, #16
 8009de8:	4618      	mov	r0, r3
 8009dea:	f00f ff1d 	bl	8019c28 <sys_mbox_valid>
 8009dee:	4603      	mov	r3, r0
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d10d      	bne.n	8009e10 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d008      	beq.n	8009e0c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	891b      	ldrh	r3, [r3, #8]
 8009dfe:	4619      	mov	r1, r3
 8009e00:	68b8      	ldr	r0, [r7, #8]
 8009e02:	f005 fb2b 	bl	800f45c <tcp_recved>
      pbuf_free(p);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f004 fb58 	bl	800e4bc <pbuf_free>
    }
    return ERR_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	e023      	b.n	8009e58 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d005      	beq.n	8009e22 <recv_tcp+0xb2>
    msg = p;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	891b      	ldrh	r3, [r3, #8]
 8009e1e:	83fb      	strh	r3, [r7, #30]
 8009e20:	e003      	b.n	8009e2a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009e22:	4b15      	ldr	r3, [pc, #84]	; (8009e78 <recv_tcp+0x108>)
 8009e24:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	3310      	adds	r3, #16
 8009e2e:	69b9      	ldr	r1, [r7, #24]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f00f fe97 	bl	8019b64 <sys_mbox_trypost>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e40:	e00a      	b.n	8009e58 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d005      	beq.n	8009e56 <recv_tcp+0xe6>
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e4e:	8bfa      	ldrh	r2, [r7, #30]
 8009e50:	2100      	movs	r1, #0
 8009e52:	6978      	ldr	r0, [r7, #20]
 8009e54:	4798      	blx	r3
  }

  return ERR_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3720      	adds	r7, #32
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	0801b6b0 	.word	0x0801b6b0
 8009e64:	0801b78c 	.word	0x0801b78c
 8009e68:	0801b6f4 	.word	0x0801b6f4
 8009e6c:	0801b7b0 	.word	0x0801b7b0
 8009e70:	0801b7d0 	.word	0x0801b7d0
 8009e74:	0801b7e8 	.word	0x0801b7e8
 8009e78:	0801f00e 	.word	0x0801f00e

08009e7c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d106      	bne.n	8009e9e <poll_tcp+0x22>
 8009e90:	4b29      	ldr	r3, [pc, #164]	; (8009f38 <poll_tcp+0xbc>)
 8009e92:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009e96:	4929      	ldr	r1, [pc, #164]	; (8009f3c <poll_tcp+0xc0>)
 8009e98:	4829      	ldr	r0, [pc, #164]	; (8009f40 <poll_tcp+0xc4>)
 8009e9a:	f010 f84d 	bl	8019f38 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	785b      	ldrb	r3, [r3, #1]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d104      	bne.n	8009eb0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009ea6:	2101      	movs	r1, #1
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f000 ff63 	bl	800ad74 <lwip_netconn_do_writemore>
 8009eae:	e016      	b.n	8009ede <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	785b      	ldrb	r3, [r3, #1]
 8009eb4:	2b04      	cmp	r3, #4
 8009eb6:	d112      	bne.n	8009ede <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00a      	beq.n	8009ed6 <poll_tcp+0x5a>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6a1b      	ldr	r3, [r3, #32]
 8009ec4:	7a5b      	ldrb	r3, [r3, #9]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d005      	beq.n	8009ed6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	7a5a      	ldrb	r2, [r3, #9]
 8009ed0:	3a01      	subs	r2, #1
 8009ed2:	b2d2      	uxtb	r2, r2
 8009ed4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f000 fbf7 	bl	800a6cc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	7f1b      	ldrb	r3, [r3, #28]
 8009ee2:	f003 0310 	and.w	r3, r3, #16
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d021      	beq.n	8009f2e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d01d      	beq.n	8009f2e <poll_tcp+0xb2>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009efa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009efe:	d316      	bcc.n	8009f2e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	d810      	bhi.n	8009f2e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	7f1b      	ldrb	r3, [r3, #28]
 8009f10:	f023 0310 	bic.w	r3, r3, #16
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d005      	beq.n	8009f2e <poll_tcp+0xb2>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f26:	2200      	movs	r2, #0
 8009f28:	2102      	movs	r1, #2
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	0801b6b0 	.word	0x0801b6b0
 8009f3c:	0801b808 	.word	0x0801b808
 8009f40:	0801b6f4 	.word	0x0801b6f4

08009f44 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d106      	bne.n	8009f6a <sent_tcp+0x26>
 8009f5c:	4b20      	ldr	r3, [pc, #128]	; (8009fe0 <sent_tcp+0x9c>)
 8009f5e:	f240 1293 	movw	r2, #403	; 0x193
 8009f62:	4920      	ldr	r1, [pc, #128]	; (8009fe4 <sent_tcp+0xa0>)
 8009f64:	4820      	ldr	r0, [pc, #128]	; (8009fe8 <sent_tcp+0xa4>)
 8009f66:	f00f ffe7 	bl	8019f38 <iprintf>

  if (conn) {
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d032      	beq.n	8009fd6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	785b      	ldrb	r3, [r3, #1]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d104      	bne.n	8009f82 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009f78:	2101      	movs	r1, #1
 8009f7a:	6978      	ldr	r0, [r7, #20]
 8009f7c:	f000 fefa 	bl	800ad74 <lwip_netconn_do_writemore>
 8009f80:	e007      	b.n	8009f92 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	785b      	ldrb	r3, [r3, #1]
 8009f86:	2b04      	cmp	r3, #4
 8009f88:	d103      	bne.n	8009f92 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009f8a:	2101      	movs	r1, #1
 8009f8c:	6978      	ldr	r0, [r7, #20]
 8009f8e:	f000 fb9d 	bl	800a6cc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d01d      	beq.n	8009fd6 <sent_tcp+0x92>
 8009f9a:	697b      	ldr	r3, [r7, #20]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009fa2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009fa6:	d316      	bcc.n	8009fd6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009fb0:	2b04      	cmp	r3, #4
 8009fb2:	d810      	bhi.n	8009fd6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	7f1b      	ldrb	r3, [r3, #28]
 8009fb8:	f023 0310 	bic.w	r3, r3, #16
 8009fbc:	b2da      	uxtb	r2, r3
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d005      	beq.n	8009fd6 <sent_tcp+0x92>
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	88fa      	ldrh	r2, [r7, #6]
 8009fd0:	2102      	movs	r1, #2
 8009fd2:	6978      	ldr	r0, [r7, #20]
 8009fd4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3718      	adds	r7, #24
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	0801b6b0 	.word	0x0801b6b0
 8009fe4:	0801b808 	.word	0x0801b808
 8009fe8:	0801b6f4 	.word	0x0801b6f4

08009fec <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b088      	sub	sp, #32
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d106      	bne.n	800a010 <err_tcp+0x24>
 800a002:	4b5f      	ldr	r3, [pc, #380]	; (800a180 <err_tcp+0x194>)
 800a004:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a008:	495e      	ldr	r1, [pc, #376]	; (800a184 <err_tcp+0x198>)
 800a00a:	485f      	ldr	r0, [pc, #380]	; (800a188 <err_tcp+0x19c>)
 800a00c:	f00f ff94 	bl	8019f38 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a010:	f00f ff14 	bl	8019e3c <sys_arch_protect>
 800a014:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	2200      	movs	r2, #0
 800a01a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	78fa      	ldrb	r2, [r7, #3]
 800a020:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	7f1b      	ldrb	r3, [r3, #28]
 800a026:	f043 0301 	orr.w	r3, r3, #1
 800a02a:	b2da      	uxtb	r2, r3
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	785b      	ldrb	r3, [r3, #1]
 800a034:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	2200      	movs	r2, #0
 800a03a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a03c:	69b8      	ldr	r0, [r7, #24]
 800a03e:	f00f ff0b 	bl	8019e58 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a046:	2b00      	cmp	r3, #0
 800a048:	d005      	beq.n	800a056 <err_tcp+0x6a>
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a04e:	2200      	movs	r2, #0
 800a050:	2104      	movs	r1, #4
 800a052:	69f8      	ldr	r0, [r7, #28]
 800a054:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d005      	beq.n	800a06a <err_tcp+0x7e>
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a062:	2200      	movs	r2, #0
 800a064:	2100      	movs	r1, #0
 800a066:	69f8      	ldr	r0, [r7, #28]
 800a068:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d005      	beq.n	800a07e <err_tcp+0x92>
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a076:	2200      	movs	r2, #0
 800a078:	2102      	movs	r1, #2
 800a07a:	69f8      	ldr	r0, [r7, #28]
 800a07c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a07e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a082:	4618      	mov	r0, r3
 800a084:	f7ff fd8a 	bl	8009b9c <lwip_netconn_err_to_msg>
 800a088:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	3310      	adds	r3, #16
 800a08e:	4618      	mov	r0, r3
 800a090:	f00f fdca 	bl	8019c28 <sys_mbox_valid>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d005      	beq.n	800a0a6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	3310      	adds	r3, #16
 800a09e:	6939      	ldr	r1, [r7, #16]
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f00f fd5f 	bl	8019b64 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	3314      	adds	r3, #20
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f00f fdbc 	bl	8019c28 <sys_mbox_valid>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d005      	beq.n	800a0c2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a0b6:	69fb      	ldr	r3, [r7, #28]
 800a0b8:	3314      	adds	r3, #20
 800a0ba:	6939      	ldr	r1, [r7, #16]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f00f fd51 	bl	8019b64 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d005      	beq.n	800a0d4 <err_tcp+0xe8>
 800a0c8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ca:	2b04      	cmp	r3, #4
 800a0cc:	d002      	beq.n	800a0d4 <err_tcp+0xe8>
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	2b03      	cmp	r3, #3
 800a0d2:	d143      	bne.n	800a15c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	7f1b      	ldrb	r3, [r3, #28]
 800a0d8:	f003 0304 	and.w	r3, r3, #4
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	bf14      	ite	ne
 800a0e0:	2301      	movne	r3, #1
 800a0e2:	2300      	moveq	r3, #0
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	7f1b      	ldrb	r3, [r3, #28]
 800a0ec:	f023 0304 	bic.w	r3, r3, #4
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	69fb      	ldr	r3, [r7, #28]
 800a0f4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d13b      	bne.n	800a174 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	6a1b      	ldr	r3, [r3, #32]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d106      	bne.n	800a112 <err_tcp+0x126>
 800a104:	4b1e      	ldr	r3, [pc, #120]	; (800a180 <err_tcp+0x194>)
 800a106:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a10a:	4920      	ldr	r1, [pc, #128]	; (800a18c <err_tcp+0x1a0>)
 800a10c:	481e      	ldr	r0, [pc, #120]	; (800a188 <err_tcp+0x19c>)
 800a10e:	f00f ff13 	bl	8019f38 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a112:	7dfb      	ldrb	r3, [r7, #23]
 800a114:	2b04      	cmp	r3, #4
 800a116:	d104      	bne.n	800a122 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a118:	69fb      	ldr	r3, [r7, #28]
 800a11a:	6a1b      	ldr	r3, [r3, #32]
 800a11c:	2200      	movs	r2, #0
 800a11e:	711a      	strb	r2, [r3, #4]
 800a120:	e003      	b.n	800a12a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	6a1b      	ldr	r3, [r3, #32]
 800a126:	78fa      	ldrb	r2, [r7, #3]
 800a128:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	330c      	adds	r3, #12
 800a132:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a134:	68b8      	ldr	r0, [r7, #8]
 800a136:	f00f fe05 	bl	8019d44 <sys_sem_valid>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d106      	bne.n	800a14e <err_tcp+0x162>
 800a140:	4b0f      	ldr	r3, [pc, #60]	; (800a180 <err_tcp+0x194>)
 800a142:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a146:	4912      	ldr	r1, [pc, #72]	; (800a190 <err_tcp+0x1a4>)
 800a148:	480f      	ldr	r0, [pc, #60]	; (800a188 <err_tcp+0x19c>)
 800a14a:	f00f fef5 	bl	8019f38 <iprintf>
      conn->current_msg = NULL;
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	2200      	movs	r2, #0
 800a152:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a154:	68b8      	ldr	r0, [r7, #8]
 800a156:	f00f fddb 	bl	8019d10 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a15a:	e00b      	b.n	800a174 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	6a1b      	ldr	r3, [r3, #32]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d008      	beq.n	800a176 <err_tcp+0x18a>
 800a164:	4b06      	ldr	r3, [pc, #24]	; (800a180 <err_tcp+0x194>)
 800a166:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a16a:	490a      	ldr	r1, [pc, #40]	; (800a194 <err_tcp+0x1a8>)
 800a16c:	4806      	ldr	r0, [pc, #24]	; (800a188 <err_tcp+0x19c>)
 800a16e:	f00f fee3 	bl	8019f38 <iprintf>
  }
}
 800a172:	e000      	b.n	800a176 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a174:	bf00      	nop
}
 800a176:	bf00      	nop
 800a178:	3720      	adds	r7, #32
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	0801b6b0 	.word	0x0801b6b0
 800a184:	0801b808 	.word	0x0801b808
 800a188:	0801b6f4 	.word	0x0801b6f4
 800a18c:	0801b818 	.word	0x0801b818
 800a190:	0801b834 	.word	0x0801b834
 800a194:	0801b850 	.word	0x0801b850

0800a198 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a1a6:	6879      	ldr	r1, [r7, #4]
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f006 f837 	bl	801021c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a1ae:	490a      	ldr	r1, [pc, #40]	; (800a1d8 <setup_tcp+0x40>)
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f006 f845 	bl	8010240 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a1b6:	4909      	ldr	r1, [pc, #36]	; (800a1dc <setup_tcp+0x44>)
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f006 f863 	bl	8010284 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a1be:	2202      	movs	r2, #2
 800a1c0:	4907      	ldr	r1, [pc, #28]	; (800a1e0 <setup_tcp+0x48>)
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f006 f8ba 	bl	801033c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a1c8:	4906      	ldr	r1, [pc, #24]	; (800a1e4 <setup_tcp+0x4c>)
 800a1ca:	68f8      	ldr	r0, [r7, #12]
 800a1cc:	f006 f87c 	bl	80102c8 <tcp_err>
}
 800a1d0:	bf00      	nop
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	08009d71 	.word	0x08009d71
 800a1dc:	08009f45 	.word	0x08009f45
 800a1e0:	08009e7d 	.word	0x08009e7d
 800a1e4:	08009fed 	.word	0x08009fed

0800a1e8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a1e8:	b590      	push	{r4, r7, lr}
 800a1ea:	b089      	sub	sp, #36	; 0x24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d102      	bne.n	800a206 <accept_function+0x1e>
    return ERR_VAL;
 800a200:	f06f 0305 	mvn.w	r3, #5
 800a204:	e0a1      	b.n	800a34a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	3314      	adds	r3, #20
 800a20a:	4618      	mov	r0, r3
 800a20c:	f00f fd0c 	bl	8019c28 <sys_mbox_valid>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d102      	bne.n	800a21c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a216:	f06f 0305 	mvn.w	r3, #5
 800a21a:	e096      	b.n	800a34a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d11b      	bne.n	800a25a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	f103 0414 	add.w	r4, r3, #20
 800a228:	f06f 000c 	mvn.w	r0, #12
 800a22c:	f7ff fcb6 	bl	8009b9c <lwip_netconn_err_to_msg>
 800a230:	4603      	mov	r3, r0
 800a232:	4619      	mov	r1, r3
 800a234:	4620      	mov	r0, r4
 800a236:	f00f fc95 	bl	8019b64 <sys_mbox_trypost>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d109      	bne.n	800a254 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	d005      	beq.n	800a254 <accept_function+0x6c>
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24c:	2200      	movs	r2, #0
 800a24e:	2100      	movs	r1, #0
 800a250:	69f8      	ldr	r0, [r7, #28]
 800a252:	4798      	blx	r3
    }
    return ERR_VAL;
 800a254:	f06f 0305 	mvn.w	r3, #5
 800a258:	e077      	b.n	800a34a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a25a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d006      	beq.n	800a270 <accept_function+0x88>
 800a262:	4b3c      	ldr	r3, [pc, #240]	; (800a354 <accept_function+0x16c>)
 800a264:	f240 222a 	movw	r2, #554	; 0x22a
 800a268:	493b      	ldr	r1, [pc, #236]	; (800a358 <accept_function+0x170>)
 800a26a:	483c      	ldr	r0, [pc, #240]	; (800a35c <accept_function+0x174>)
 800a26c:	f00f fe64 	bl	8019f38 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	781a      	ldrb	r2, [r3, #0]
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a278:	4619      	mov	r1, r3
 800a27a:	4610      	mov	r0, r2
 800a27c:	f000 f8f0 	bl	800a460 <netconn_alloc>
 800a280:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d11b      	bne.n	800a2c0 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	f103 0414 	add.w	r4, r3, #20
 800a28e:	f06f 000c 	mvn.w	r0, #12
 800a292:	f7ff fc83 	bl	8009b9c <lwip_netconn_err_to_msg>
 800a296:	4603      	mov	r3, r0
 800a298:	4619      	mov	r1, r3
 800a29a:	4620      	mov	r0, r4
 800a29c:	f00f fc62 	bl	8019b64 <sys_mbox_trypost>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d109      	bne.n	800a2ba <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d005      	beq.n	800a2ba <accept_function+0xd2>
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	2100      	movs	r1, #0
 800a2b6:	69f8      	ldr	r0, [r7, #28]
 800a2b8:	4798      	blx	r3
    }
    return ERR_MEM;
 800a2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a2be:	e044      	b.n	800a34a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a2c0:	69bb      	ldr	r3, [r7, #24]
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a2c6:	69b8      	ldr	r0, [r7, #24]
 800a2c8:	f7ff ff66 	bl	800a198 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	3314      	adds	r3, #20
 800a2d0:	69b9      	ldr	r1, [r7, #24]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f00f fc46 	bl	8019b64 <sys_mbox_trypost>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d02a      	beq.n	800a334 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	6978      	ldr	r0, [r7, #20]
 800a2e8:	f005 ff98 	bl	801021c <tcp_arg>
    tcp_recv(pcb, NULL);
 800a2ec:	2100      	movs	r1, #0
 800a2ee:	6978      	ldr	r0, [r7, #20]
 800a2f0:	f005 ffa6 	bl	8010240 <tcp_recv>
    tcp_sent(pcb, NULL);
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	6978      	ldr	r0, [r7, #20]
 800a2f8:	f005 ffc4 	bl	8010284 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	2100      	movs	r1, #0
 800a300:	6978      	ldr	r0, [r7, #20]
 800a302:	f006 f81b 	bl	801033c <tcp_poll>
    tcp_err(pcb, NULL);
 800a306:	2100      	movs	r1, #0
 800a308:	6978      	ldr	r0, [r7, #20]
 800a30a:	f005 ffdd 	bl	80102c8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	2200      	movs	r2, #0
 800a312:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	3310      	adds	r3, #16
 800a318:	4618      	mov	r0, r3
 800a31a:	f00f fc11 	bl	8019b40 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	3310      	adds	r3, #16
 800a322:	4618      	mov	r0, r3
 800a324:	f00f fc91 	bl	8019c4a <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a328:	69b8      	ldr	r0, [r7, #24]
 800a32a:	f000 f907 	bl	800a53c <netconn_free>
    return ERR_MEM;
 800a32e:	f04f 33ff 	mov.w	r3, #4294967295
 800a332:	e00a      	b.n	800a34a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d005      	beq.n	800a348 <accept_function+0x160>
 800a33c:	69fb      	ldr	r3, [r7, #28]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	2200      	movs	r2, #0
 800a342:	2100      	movs	r1, #0
 800a344:	69f8      	ldr	r0, [r7, #28]
 800a346:	4798      	blx	r3
  }

  return ERR_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3724      	adds	r7, #36	; 0x24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd90      	pop	{r4, r7, pc}
 800a352:	bf00      	nop
 800a354:	0801b6b0 	.word	0x0801b6b0
 800a358:	0801b86c 	.word	0x0801b86c
 800a35c:	0801b6f4 	.word	0x0801b6f4

0800a360 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a360:	b590      	push	{r4, r7, lr}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a368:	2300      	movs	r3, #0
 800a36a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d006      	beq.n	800a384 <pcb_new+0x24>
 800a376:	4b2b      	ldr	r3, [pc, #172]	; (800a424 <pcb_new+0xc4>)
 800a378:	f240 2265 	movw	r2, #613	; 0x265
 800a37c:	492a      	ldr	r1, [pc, #168]	; (800a428 <pcb_new+0xc8>)
 800a37e:	482b      	ldr	r0, [pc, #172]	; (800a42c <pcb_new+0xcc>)
 800a380:	f00f fdda 	bl	8019f38 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a38e:	2b10      	cmp	r3, #16
 800a390:	d022      	beq.n	800a3d8 <pcb_new+0x78>
 800a392:	2b20      	cmp	r3, #32
 800a394:	d133      	bne.n	800a3fe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681c      	ldr	r4, [r3, #0]
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f00b f9ee 	bl	801577e <udp_new_ip_type>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d02a      	beq.n	800a406 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	2b22      	cmp	r3, #34	; 0x22
 800a3b8:	d104      	bne.n	800a3c4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	6858      	ldr	r0, [r3, #4]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	4917      	ldr	r1, [pc, #92]	; (800a430 <pcb_new+0xd0>)
 800a3d2:	f00b f95b 	bl	801568c <udp_recv>
      }
      break;
 800a3d6:	e016      	b.n	800a406 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681c      	ldr	r4, [r3, #0]
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f005 ff0e 	bl	8010200 <tcp_new_ip_type>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d00b      	beq.n	800a40a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7ff fece 	bl	800a198 <setup_tcp>
      }
      break;
 800a3fc:	e005      	b.n	800a40a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	22fa      	movs	r2, #250	; 0xfa
 800a402:	711a      	strb	r2, [r3, #4]
      return;
 800a404:	e00a      	b.n	800a41c <pcb_new+0xbc>
      break;
 800a406:	bf00      	nop
 800a408:	e000      	b.n	800a40c <pcb_new+0xac>
      break;
 800a40a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d102      	bne.n	800a41c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	22ff      	movs	r2, #255	; 0xff
 800a41a:	711a      	strb	r2, [r3, #4]
  }
}
 800a41c:	3714      	adds	r7, #20
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd90      	pop	{r4, r7, pc}
 800a422:	bf00      	nop
 800a424:	0801b6b0 	.word	0x0801b6b0
 800a428:	0801b894 	.word	0x0801b894
 800a42c:	0801b6f4 	.word	0x0801b6f4
 800a430:	08009c75 	.word	0x08009c75

0800a434 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d102      	bne.n	800a456 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f7ff ff85 	bl	800a360 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a456:	bf00      	nop
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
	...

0800a460 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b086      	sub	sp, #24
 800a464:	af00      	add	r7, sp, #0
 800a466:	4603      	mov	r3, r0
 800a468:	6039      	str	r1, [r7, #0]
 800a46a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a470:	2007      	movs	r0, #7
 800a472:	f003 f925 	bl	800d6c0 <memp_malloc>
 800a476:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <netconn_alloc+0x22>
    return NULL;
 800a47e:	2300      	movs	r3, #0
 800a480:	e052      	b.n	800a528 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	79fa      	ldrb	r2, [r7, #7]
 800a48c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a494:	79fb      	ldrb	r3, [r7, #7]
 800a496:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a49a:	2b10      	cmp	r3, #16
 800a49c:	d004      	beq.n	800a4a8 <netconn_alloc+0x48>
 800a49e:	2b20      	cmp	r3, #32
 800a4a0:	d105      	bne.n	800a4ae <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a4a2:	2306      	movs	r3, #6
 800a4a4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a4a6:	e00a      	b.n	800a4be <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a4a8:	2306      	movs	r3, #6
 800a4aa:	617b      	str	r3, [r7, #20]
      break;
 800a4ac:	e007      	b.n	800a4be <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a4ae:	4b20      	ldr	r3, [pc, #128]	; (800a530 <netconn_alloc+0xd0>)
 800a4b0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a4b4:	491f      	ldr	r1, [pc, #124]	; (800a534 <netconn_alloc+0xd4>)
 800a4b6:	4820      	ldr	r0, [pc, #128]	; (800a538 <netconn_alloc+0xd8>)
 800a4b8:	f00f fd3e 	bl	8019f38 <iprintf>
      goto free_and_return;
 800a4bc:	e02f      	b.n	800a51e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	3310      	adds	r3, #16
 800a4c2:	6979      	ldr	r1, [r7, #20]
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f00f fb21 	bl	8019b0c <sys_mbox_new>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d125      	bne.n	800a51c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	330c      	adds	r3, #12
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f00f fbc4 	bl	8019c64 <sys_sem_new>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d005      	beq.n	800a4ee <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3310      	adds	r3, #16
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f00f fb2a 	bl	8019b40 <sys_mbox_free>
    goto free_and_return;
 800a4ec:	e017      	b.n	800a51e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	3314      	adds	r3, #20
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f00f fba9 	bl	8019c4a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f04f 32ff 	mov.w	r2, #4294967295
 800a504:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2200      	movs	r2, #0
 800a510:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	7cfa      	ldrb	r2, [r7, #19]
 800a516:	771a      	strb	r2, [r3, #28]
  return conn;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	e005      	b.n	800a528 <netconn_alloc+0xc8>
    goto free_and_return;
 800a51c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a51e:	68f9      	ldr	r1, [r7, #12]
 800a520:	2007      	movs	r0, #7
 800a522:	f003 f91f 	bl	800d764 <memp_free>
  return NULL;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3718      	adds	r7, #24
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	0801b6b0 	.word	0x0801b6b0
 800a534:	0801b8b4 	.word	0x0801b8b4
 800a538:	0801b6f4 	.word	0x0801b6f4

0800a53c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d006      	beq.n	800a55a <netconn_free+0x1e>
 800a54c:	4b1b      	ldr	r3, [pc, #108]	; (800a5bc <netconn_free+0x80>)
 800a54e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a552:	491b      	ldr	r1, [pc, #108]	; (800a5c0 <netconn_free+0x84>)
 800a554:	481b      	ldr	r0, [pc, #108]	; (800a5c4 <netconn_free+0x88>)
 800a556:	f00f fcef 	bl	8019f38 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	3310      	adds	r3, #16
 800a55e:	4618      	mov	r0, r3
 800a560:	f00f fb62 	bl	8019c28 <sys_mbox_valid>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d006      	beq.n	800a578 <netconn_free+0x3c>
 800a56a:	4b14      	ldr	r3, [pc, #80]	; (800a5bc <netconn_free+0x80>)
 800a56c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800a570:	4915      	ldr	r1, [pc, #84]	; (800a5c8 <netconn_free+0x8c>)
 800a572:	4814      	ldr	r0, [pc, #80]	; (800a5c4 <netconn_free+0x88>)
 800a574:	f00f fce0 	bl	8019f38 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	3314      	adds	r3, #20
 800a57c:	4618      	mov	r0, r3
 800a57e:	f00f fb53 	bl	8019c28 <sys_mbox_valid>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d006      	beq.n	800a596 <netconn_free+0x5a>
 800a588:	4b0c      	ldr	r3, [pc, #48]	; (800a5bc <netconn_free+0x80>)
 800a58a:	f240 3227 	movw	r2, #807	; 0x327
 800a58e:	490f      	ldr	r1, [pc, #60]	; (800a5cc <netconn_free+0x90>)
 800a590:	480c      	ldr	r0, [pc, #48]	; (800a5c4 <netconn_free+0x88>)
 800a592:	f00f fcd1 	bl	8019f38 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	330c      	adds	r3, #12
 800a59a:	4618      	mov	r0, r3
 800a59c:	f00f fbc5 	bl	8019d2a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	330c      	adds	r3, #12
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f00f fbde 	bl	8019d66 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a5aa:	6879      	ldr	r1, [r7, #4]
 800a5ac:	2007      	movs	r0, #7
 800a5ae:	f003 f8d9 	bl	800d764 <memp_free>
}
 800a5b2:	bf00      	nop
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	0801b6b0 	.word	0x0801b6b0
 800a5c0:	0801b8dc 	.word	0x0801b8dc
 800a5c4:	0801b6f4 	.word	0x0801b6f4
 800a5c8:	0801b90c 	.word	0x0801b90c
 800a5cc:	0801b948 	.word	0x0801b948

0800a5d0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b086      	sub	sp, #24
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3310      	adds	r3, #16
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f00f fb23 	bl	8019c28 <sys_mbox_valid>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d02f      	beq.n	800a648 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a5e8:	e018      	b.n	800a61c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5f2:	2b10      	cmp	r3, #16
 800a5f4:	d10e      	bne.n	800a614 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	f107 020f 	add.w	r2, r7, #15
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7ff fafe 	bl	8009c00 <lwip_netconn_is_err_msg>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d108      	bne.n	800a61c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f003 ff55 	bl	800e4bc <pbuf_free>
 800a612:	e003      	b.n	800a61c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	4618      	mov	r0, r3
 800a618:	f000 fe90 	bl	800b33c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3310      	adds	r3, #16
 800a620:	f107 0210 	add.w	r2, r7, #16
 800a624:	4611      	mov	r1, r2
 800a626:	4618      	mov	r0, r3
 800a628:	f00f fae7 	bl	8019bfa <sys_arch_mbox_tryfetch>
 800a62c:	4603      	mov	r3, r0
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a632:	d1da      	bne.n	800a5ea <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	3310      	adds	r3, #16
 800a638:	4618      	mov	r0, r3
 800a63a:	f00f fa81 	bl	8019b40 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	3310      	adds	r3, #16
 800a642:	4618      	mov	r0, r3
 800a644:	f00f fb01 	bl	8019c4a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	3314      	adds	r3, #20
 800a64c:	4618      	mov	r0, r3
 800a64e:	f00f faeb 	bl	8019c28 <sys_mbox_valid>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d034      	beq.n	800a6c2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a658:	e01d      	b.n	800a696 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f107 020e 	add.w	r2, r7, #14
 800a660:	4611      	mov	r1, r2
 800a662:	4618      	mov	r0, r3
 800a664:	f7ff facc 	bl	8009c00 <lwip_netconn_is_err_msg>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d113      	bne.n	800a696 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a66e:	693b      	ldr	r3, [r7, #16]
 800a670:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a672:	6978      	ldr	r0, [r7, #20]
 800a674:	f7ff ffac 	bl	800a5d0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d007      	beq.n	800a690 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	4618      	mov	r0, r3
 800a686:	f004 fd0f 	bl	800f0a8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	2200      	movs	r2, #0
 800a68e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a690:	6978      	ldr	r0, [r7, #20]
 800a692:	f7ff ff53 	bl	800a53c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	3314      	adds	r3, #20
 800a69a:	f107 0210 	add.w	r2, r7, #16
 800a69e:	4611      	mov	r1, r2
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f00f faaa 	bl	8019bfa <sys_arch_mbox_tryfetch>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ac:	d1d5      	bne.n	800a65a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3314      	adds	r3, #20
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f00f fa44 	bl	8019b40 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	3314      	adds	r3, #20
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f00f fac4 	bl	8019c4a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a6c2:	bf00      	nop
 800a6c4:	3718      	adds	r7, #24
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
	...

0800a6cc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d106      	bne.n	800a6f0 <lwip_netconn_do_close_internal+0x24>
 800a6e2:	4ba1      	ldr	r3, [pc, #644]	; (800a968 <lwip_netconn_do_close_internal+0x29c>)
 800a6e4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a6e8:	49a0      	ldr	r1, [pc, #640]	; (800a96c <lwip_netconn_do_close_internal+0x2a0>)
 800a6ea:	48a1      	ldr	r0, [pc, #644]	; (800a970 <lwip_netconn_do_close_internal+0x2a4>)
 800a6ec:	f00f fc24 	bl	8019f38 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6f8:	2b10      	cmp	r3, #16
 800a6fa:	d006      	beq.n	800a70a <lwip_netconn_do_close_internal+0x3e>
 800a6fc:	4b9a      	ldr	r3, [pc, #616]	; (800a968 <lwip_netconn_do_close_internal+0x29c>)
 800a6fe:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a702:	499c      	ldr	r1, [pc, #624]	; (800a974 <lwip_netconn_do_close_internal+0x2a8>)
 800a704:	489a      	ldr	r0, [pc, #616]	; (800a970 <lwip_netconn_do_close_internal+0x2a4>)
 800a706:	f00f fc17 	bl	8019f38 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	785b      	ldrb	r3, [r3, #1]
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d006      	beq.n	800a720 <lwip_netconn_do_close_internal+0x54>
 800a712:	4b95      	ldr	r3, [pc, #596]	; (800a968 <lwip_netconn_do_close_internal+0x29c>)
 800a714:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a718:	4997      	ldr	r1, [pc, #604]	; (800a978 <lwip_netconn_do_close_internal+0x2ac>)
 800a71a:	4895      	ldr	r0, [pc, #596]	; (800a970 <lwip_netconn_do_close_internal+0x2a4>)
 800a71c:	f00f fc0c 	bl	8019f38 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d106      	bne.n	800a736 <lwip_netconn_do_close_internal+0x6a>
 800a728:	4b8f      	ldr	r3, [pc, #572]	; (800a968 <lwip_netconn_do_close_internal+0x29c>)
 800a72a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a72e:	4993      	ldr	r1, [pc, #588]	; (800a97c <lwip_netconn_do_close_internal+0x2b0>)
 800a730:	488f      	ldr	r0, [pc, #572]	; (800a970 <lwip_netconn_do_close_internal+0x2a4>)
 800a732:	f00f fc01 	bl	8019f38 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d106      	bne.n	800a74c <lwip_netconn_do_close_internal+0x80>
 800a73e:	4b8a      	ldr	r3, [pc, #552]	; (800a968 <lwip_netconn_do_close_internal+0x29c>)
 800a740:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a744:	498e      	ldr	r1, [pc, #568]	; (800a980 <lwip_netconn_do_close_internal+0x2b4>)
 800a746:	488a      	ldr	r0, [pc, #552]	; (800a970 <lwip_netconn_do_close_internal+0x2a4>)
 800a748:	f00f fbf6 	bl	8019f38 <iprintf>

  tpcb = conn->pcb.tcp;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	7a1b      	ldrb	r3, [r3, #8]
 800a758:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a75a:	7bfb      	ldrb	r3, [r7, #15]
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a762:	7bfb      	ldrb	r3, [r7, #15]
 800a764:	f003 0302 	and.w	r3, r3, #2
 800a768:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a76a:	7bfb      	ldrb	r3, [r7, #15]
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d102      	bne.n	800a776 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a770:	2301      	movs	r3, #1
 800a772:	75bb      	strb	r3, [r7, #22]
 800a774:	e01f      	b.n	800a7b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a776:	7bbb      	ldrb	r3, [r7, #14]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00e      	beq.n	800a79a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a780:	2b05      	cmp	r3, #5
 800a782:	d007      	beq.n	800a794 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a788:	2b06      	cmp	r3, #6
 800a78a:	d003      	beq.n	800a794 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a790:	2b08      	cmp	r3, #8
 800a792:	d102      	bne.n	800a79a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a794:	2301      	movs	r3, #1
 800a796:	75bb      	strb	r3, [r7, #22]
 800a798:	e00d      	b.n	800a7b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a79a:	7b7b      	ldrb	r3, [r7, #13]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d008      	beq.n	800a7b2 <lwip_netconn_do_close_internal+0xe6>
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	8b5b      	ldrh	r3, [r3, #26]
 800a7a4:	f003 0310 	and.w	r3, r3, #16
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	75bb      	strb	r3, [r7, #22]
 800a7b0:	e001      	b.n	800a7b6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a7b6:	7dbb      	ldrb	r3, [r7, #22]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d003      	beq.n	800a7c4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a7bc:	2100      	movs	r1, #0
 800a7be:	6938      	ldr	r0, [r7, #16]
 800a7c0:	f005 fd2c 	bl	801021c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	7d1b      	ldrb	r3, [r3, #20]
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d104      	bne.n	800a7d6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	6938      	ldr	r0, [r7, #16]
 800a7d0:	f005 fd9c 	bl	801030c <tcp_accept>
 800a7d4:	e01d      	b.n	800a812 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a7d6:	7bbb      	ldrb	r3, [r7, #14]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d007      	beq.n	800a7ec <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a7dc:	2100      	movs	r1, #0
 800a7de:	6938      	ldr	r0, [r7, #16]
 800a7e0:	f005 fd2e 	bl	8010240 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	6938      	ldr	r0, [r7, #16]
 800a7e8:	f005 fd90 	bl	801030c <tcp_accept>
    }
    if (shut_tx) {
 800a7ec:	7b7b      	ldrb	r3, [r7, #13]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d003      	beq.n	800a7fa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	6938      	ldr	r0, [r7, #16]
 800a7f6:	f005 fd45 	bl	8010284 <tcp_sent>
    }
    if (shut_close) {
 800a7fa:	7dbb      	ldrb	r3, [r7, #22]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d008      	beq.n	800a812 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a800:	2200      	movs	r2, #0
 800a802:	2100      	movs	r1, #0
 800a804:	6938      	ldr	r0, [r7, #16]
 800a806:	f005 fd99 	bl	801033c <tcp_poll>
      tcp_err(tpcb, NULL);
 800a80a:	2100      	movs	r1, #0
 800a80c:	6938      	ldr	r0, [r7, #16]
 800a80e:	f005 fd5b 	bl	80102c8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a812:	7dbb      	ldrb	r3, [r7, #22]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d005      	beq.n	800a824 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a818:	6938      	ldr	r0, [r7, #16]
 800a81a:	f004 fb01 	bl	800ee20 <tcp_close>
 800a81e:	4603      	mov	r3, r0
 800a820:	75fb      	strb	r3, [r7, #23]
 800a822:	e007      	b.n	800a834 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a824:	7bbb      	ldrb	r3, [r7, #14]
 800a826:	7b7a      	ldrb	r2, [r7, #13]
 800a828:	4619      	mov	r1, r3
 800a82a:	6938      	ldr	r0, [r7, #16]
 800a82c:	f004 fb24 	bl	800ee78 <tcp_shutdown>
 800a830:	4603      	mov	r3, r0
 800a832:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a834:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d102      	bne.n	800a842 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a83c:	2301      	movs	r3, #1
 800a83e:	757b      	strb	r3, [r7, #21]
 800a840:	e016      	b.n	800a870 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84a:	d10f      	bne.n	800a86c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6a1b      	ldr	r3, [r3, #32]
 800a850:	7a5b      	ldrb	r3, [r3, #9]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10c      	bne.n	800a870 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a856:	2301      	movs	r3, #1
 800a858:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a85a:	7dbb      	ldrb	r3, [r7, #22]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d007      	beq.n	800a870 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a860:	6938      	ldr	r0, [r7, #16]
 800a862:	f004 fc21 	bl	800f0a8 <tcp_abort>
          err = ERR_OK;
 800a866:	2300      	movs	r3, #0
 800a868:	75fb      	strb	r3, [r7, #23]
 800a86a:	e001      	b.n	800a870 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a86c:	2301      	movs	r3, #1
 800a86e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a870:	7d7b      	ldrb	r3, [r7, #21]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d044      	beq.n	800a900 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a1b      	ldr	r3, [r3, #32]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	330c      	adds	r3, #12
 800a87e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a1b      	ldr	r3, [r3, #32]
 800a884:	7dfa      	ldrb	r2, [r7, #23]
 800a886:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a894:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d129      	bne.n	800a8f0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a89c:	7dbb      	ldrb	r3, [r7, #22]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00c      	beq.n	800a8bc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d005      	beq.n	800a8bc <lwip_netconn_do_close_internal+0x1f0>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	2104      	movs	r1, #4
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	4798      	blx	r3
      }
      if (shut_rx) {
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d009      	beq.n	800a8d6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d005      	beq.n	800a8d6 <lwip_netconn_do_close_internal+0x20a>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	4798      	blx	r3
      }
      if (shut_tx) {
 800a8d6:	7b7b      	ldrb	r3, [r7, #13]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d009      	beq.n	800a8f0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d005      	beq.n	800a8f0 <lwip_netconn_do_close_internal+0x224>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	2102      	movs	r1, #2
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a8f0:	78fb      	ldrb	r3, [r7, #3]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a8f6:	68b8      	ldr	r0, [r7, #8]
 800a8f8:	f00f fa0a 	bl	8019d10 <sys_sem_signal>
    }
    return ERR_OK;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	e02e      	b.n	800a95e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a900:	7d7b      	ldrb	r3, [r7, #21]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d11e      	bne.n	800a944 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	7d1b      	ldrb	r3, [r3, #20]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d106      	bne.n	800a91c <lwip_netconn_do_close_internal+0x250>
 800a90e:	4b16      	ldr	r3, [pc, #88]	; (800a968 <lwip_netconn_do_close_internal+0x29c>)
 800a910:	f240 4241 	movw	r2, #1089	; 0x441
 800a914:	491b      	ldr	r1, [pc, #108]	; (800a984 <lwip_netconn_do_close_internal+0x2b8>)
 800a916:	4816      	ldr	r0, [pc, #88]	; (800a970 <lwip_netconn_do_close_internal+0x2a4>)
 800a918:	f00f fb0e 	bl	8019f38 <iprintf>
    if (shut_tx) {
 800a91c:	7b7b      	ldrb	r3, [r7, #13]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d003      	beq.n	800a92a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a922:	4919      	ldr	r1, [pc, #100]	; (800a988 <lwip_netconn_do_close_internal+0x2bc>)
 800a924:	6938      	ldr	r0, [r7, #16]
 800a926:	f005 fcad 	bl	8010284 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a92a:	2201      	movs	r2, #1
 800a92c:	4917      	ldr	r1, [pc, #92]	; (800a98c <lwip_netconn_do_close_internal+0x2c0>)
 800a92e:	6938      	ldr	r0, [r7, #16]
 800a930:	f005 fd04 	bl	801033c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a934:	4916      	ldr	r1, [pc, #88]	; (800a990 <lwip_netconn_do_close_internal+0x2c4>)
 800a936:	6938      	ldr	r0, [r7, #16]
 800a938:	f005 fcc6 	bl	80102c8 <tcp_err>
    tcp_arg(tpcb, conn);
 800a93c:	6879      	ldr	r1, [r7, #4]
 800a93e:	6938      	ldr	r0, [r7, #16]
 800a940:	f005 fc6c 	bl	801021c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a944:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d106      	bne.n	800a95a <lwip_netconn_do_close_internal+0x28e>
 800a94c:	4b06      	ldr	r3, [pc, #24]	; (800a968 <lwip_netconn_do_close_internal+0x29c>)
 800a94e:	f240 424d 	movw	r2, #1101	; 0x44d
 800a952:	4910      	ldr	r1, [pc, #64]	; (800a994 <lwip_netconn_do_close_internal+0x2c8>)
 800a954:	4806      	ldr	r0, [pc, #24]	; (800a970 <lwip_netconn_do_close_internal+0x2a4>)
 800a956:	f00f faef 	bl	8019f38 <iprintf>
  return err;
 800a95a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	0801b6b0 	.word	0x0801b6b0
 800a96c:	0801b984 	.word	0x0801b984
 800a970:	0801b6f4 	.word	0x0801b6f4
 800a974:	0801b994 	.word	0x0801b994
 800a978:	0801b9b4 	.word	0x0801b9b4
 800a97c:	0801b9d8 	.word	0x0801b9d8
 800a980:	0801b818 	.word	0x0801b818
 800a984:	0801b9ec 	.word	0x0801b9ec
 800a988:	08009f45 	.word	0x08009f45
 800a98c:	08009e7d 	.word	0x08009e7d
 800a990:	08009fed 	.word	0x08009fed
 800a994:	0801ba10 	.word	0x0801ba10

0800a998 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	785b      	ldrb	r3, [r3, #1]
 800a9aa:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a9ac:	7afb      	ldrb	r3, [r7, #11]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00d      	beq.n	800a9ce <lwip_netconn_do_delconn+0x36>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9bc:	2b10      	cmp	r3, #16
 800a9be:	d006      	beq.n	800a9ce <lwip_netconn_do_delconn+0x36>
 800a9c0:	4b60      	ldr	r3, [pc, #384]	; (800ab44 <lwip_netconn_do_delconn+0x1ac>)
 800a9c2:	f240 425f 	movw	r2, #1119	; 0x45f
 800a9c6:	4960      	ldr	r1, [pc, #384]	; (800ab48 <lwip_netconn_do_delconn+0x1b0>)
 800a9c8:	4860      	ldr	r0, [pc, #384]	; (800ab4c <lwip_netconn_do_delconn+0x1b4>)
 800a9ca:	f00f fab5 	bl	8019f38 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a9ce:	7afb      	ldrb	r3, [r7, #11]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d005      	beq.n	800a9e0 <lwip_netconn_do_delconn+0x48>
 800a9d4:	7afb      	ldrb	r3, [r7, #11]
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d002      	beq.n	800a9e0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a9da:	7afb      	ldrb	r3, [r7, #11]
 800a9dc:	2b03      	cmp	r3, #3
 800a9de:	d109      	bne.n	800a9f4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a9e0:	7afb      	ldrb	r3, [r7, #11]
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d10a      	bne.n	800a9fc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	7f1b      	ldrb	r3, [r3, #28]
 800a9ec:	f003 0304 	and.w	r3, r3, #4
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d103      	bne.n	800a9fc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	22fb      	movs	r2, #251	; 0xfb
 800a9f8:	711a      	strb	r2, [r3, #4]
 800a9fa:	e097      	b.n	800ab2c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a9fc:	7afb      	ldrb	r3, [r7, #11]
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	d10d      	bne.n	800aa1e <lwip_netconn_do_delconn+0x86>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	7f1b      	ldrb	r3, [r3, #28]
 800aa08:	f003 0304 	and.w	r3, r3, #4
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d106      	bne.n	800aa1e <lwip_netconn_do_delconn+0x86>
 800aa10:	4b4c      	ldr	r3, [pc, #304]	; (800ab44 <lwip_netconn_do_delconn+0x1ac>)
 800aa12:	f240 427b 	movw	r2, #1147	; 0x47b
 800aa16:	494e      	ldr	r1, [pc, #312]	; (800ab50 <lwip_netconn_do_delconn+0x1b8>)
 800aa18:	484c      	ldr	r0, [pc, #304]	; (800ab4c <lwip_netconn_do_delconn+0x1b4>)
 800aa1a:	f00f fa8d 	bl	8019f38 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f7ff fdd1 	bl	800a5d0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d05f      	beq.n	800aaf8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa42:	2b10      	cmp	r3, #16
 800aa44:	d00e      	beq.n	800aa64 <lwip_netconn_do_delconn+0xcc>
 800aa46:	2b20      	cmp	r3, #32
 800aa48:	d000      	beq.n	800aa4c <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 800aa4a:	e051      	b.n	800aaf0 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f00a fe35 	bl	80156cc <udp_remove>
          break;
 800aa62:	e045      	b.n	800aaf0 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6a1b      	ldr	r3, [r3, #32]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d006      	beq.n	800aa7c <lwip_netconn_do_delconn+0xe4>
 800aa6e:	4b35      	ldr	r3, [pc, #212]	; (800ab44 <lwip_netconn_do_delconn+0x1ac>)
 800aa70:	f240 4294 	movw	r2, #1172	; 0x494
 800aa74:	4937      	ldr	r1, [pc, #220]	; (800ab54 <lwip_netconn_do_delconn+0x1bc>)
 800aa76:	4835      	ldr	r0, [pc, #212]	; (800ab4c <lwip_netconn_do_delconn+0x1b4>)
 800aa78:	f00f fa5e 	bl	8019f38 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	2204      	movs	r2, #4
 800aa82:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2203      	movs	r2, #3
 800aa88:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	2100      	movs	r1, #0
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7ff fe17 	bl	800a6cc <lwip_netconn_do_close_internal>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d04a      	beq.n	800ab3a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	785b      	ldrb	r3, [r3, #1]
 800aaaa:	2b04      	cmp	r3, #4
 800aaac:	d006      	beq.n	800aabc <lwip_netconn_do_delconn+0x124>
 800aaae:	4b25      	ldr	r3, [pc, #148]	; (800ab44 <lwip_netconn_do_delconn+0x1ac>)
 800aab0:	f240 429a 	movw	r2, #1178	; 0x49a
 800aab4:	4928      	ldr	r1, [pc, #160]	; (800ab58 <lwip_netconn_do_delconn+0x1c0>)
 800aab6:	4825      	ldr	r0, [pc, #148]	; (800ab4c <lwip_netconn_do_delconn+0x1b4>)
 800aab8:	f00f fa3e 	bl	8019f38 <iprintf>
            UNLOCK_TCPIP_CORE();
 800aabc:	4827      	ldr	r0, [pc, #156]	; (800ab5c <lwip_netconn_do_delconn+0x1c4>)
 800aabe:	f00f f990 	bl	8019de2 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	330c      	adds	r3, #12
 800aac8:	2100      	movs	r1, #0
 800aaca:	4618      	mov	r0, r3
 800aacc:	f00f f8ef 	bl	8019cae <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800aad0:	4822      	ldr	r0, [pc, #136]	; (800ab5c <lwip_netconn_do_delconn+0x1c4>)
 800aad2:	f00f f977 	bl	8019dc4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	785b      	ldrb	r3, [r3, #1]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d02c      	beq.n	800ab3a <lwip_netconn_do_delconn+0x1a2>
 800aae0:	4b18      	ldr	r3, [pc, #96]	; (800ab44 <lwip_netconn_do_delconn+0x1ac>)
 800aae2:	f240 429e 	movw	r2, #1182	; 0x49e
 800aae6:	491c      	ldr	r1, [pc, #112]	; (800ab58 <lwip_netconn_do_delconn+0x1c0>)
 800aae8:	4818      	ldr	r0, [pc, #96]	; (800ab4c <lwip_netconn_do_delconn+0x1b4>)
 800aaea:	f00f fa25 	bl	8019f38 <iprintf>
          return;
 800aaee:	e024      	b.n	800ab3a <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d007      	beq.n	800ab12 <lwip_netconn_do_delconn+0x17a>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab08:	68fa      	ldr	r2, [r7, #12]
 800ab0a:	6810      	ldr	r0, [r2, #0]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2100      	movs	r1, #0
 800ab10:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d007      	beq.n	800ab2c <lwip_netconn_do_delconn+0x194>
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	6810      	ldr	r0, [r2, #0]
 800ab26:	2200      	movs	r2, #0
 800ab28:	2102      	movs	r1, #2
 800ab2a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	330c      	adds	r3, #12
 800ab32:	4618      	mov	r0, r3
 800ab34:	f00f f906 	bl	8019d44 <sys_sem_valid>
 800ab38:	e000      	b.n	800ab3c <lwip_netconn_do_delconn+0x1a4>
          return;
 800ab3a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800ab3c:	3710      	adds	r7, #16
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	0801b6b0 	.word	0x0801b6b0
 800ab48:	0801ba20 	.word	0x0801ba20
 800ab4c:	0801b6f4 	.word	0x0801b6f4
 800ab50:	0801ba34 	.word	0x0801ba34
 800ab54:	0801ba54 	.word	0x0801ba54
 800ab58:	0801ba70 	.word	0x0801ba70
 800ab5c:	2001376c 	.word	0x2001376c

0800ab60 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d026      	beq.n	800abc4 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab80:	2b10      	cmp	r3, #16
 800ab82:	d00e      	beq.n	800aba2 <lwip_netconn_do_bind+0x42>
 800ab84:	2b20      	cmp	r3, #32
 800ab86:	d119      	bne.n	800abbc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	6858      	ldr	r0, [r3, #4]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	6899      	ldr	r1, [r3, #8]
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	899b      	ldrh	r3, [r3, #12]
 800ab96:	461a      	mov	r2, r3
 800ab98:	f00a fc82 	bl	80154a0 <udp_bind>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	73fb      	strb	r3, [r7, #15]
        break;
 800aba0:	e012      	b.n	800abc8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	6858      	ldr	r0, [r3, #4]
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	6899      	ldr	r1, [r3, #8]
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	899b      	ldrh	r3, [r3, #12]
 800abb0:	461a      	mov	r2, r3
 800abb2:	f004 fa85 	bl	800f0c0 <tcp_bind>
 800abb6:	4603      	mov	r3, r0
 800abb8:	73fb      	strb	r3, [r7, #15]
        break;
 800abba:	e005      	b.n	800abc8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800abbc:	23fa      	movs	r3, #250	; 0xfa
 800abbe:	73fb      	strb	r3, [r7, #15]
        break;
 800abc0:	bf00      	nop
 800abc2:	e001      	b.n	800abc8 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 800abc4:	23fa      	movs	r3, #250	; 0xfa
 800abc6:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	7bfa      	ldrb	r2, [r7, #15]
 800abcc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800abce:	bf00      	nop
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d07f      	beq.n	800acee <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abf8:	2b10      	cmp	r3, #16
 800abfa:	d175      	bne.n	800ace8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	785b      	ldrb	r3, [r3, #1]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d165      	bne.n	800acd2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	7d1b      	ldrb	r3, [r3, #20]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d002      	beq.n	800ac18 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800ac12:	23fa      	movs	r3, #250	; 0xfa
 800ac14:	72fb      	strb	r3, [r7, #11]
 800ac16:	e06c      	b.n	800acf2 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800ac18:	23ff      	movs	r3, #255	; 0xff
 800ac1a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	f107 020b 	add.w	r2, r7, #11
 800ac26:	7cf9      	ldrb	r1, [r7, #19]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f004 fb13 	bl	800f254 <tcp_listen_with_backlog_and_err>
 800ac2e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d05d      	beq.n	800acf2 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	3310      	adds	r3, #16
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f00e fff3 	bl	8019c28 <sys_mbox_valid>
 800ac42:	4603      	mov	r3, r0
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00b      	beq.n	800ac60 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	3310      	adds	r3, #16
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f00e ff76 	bl	8019b40 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	3310      	adds	r3, #16
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f00e fff5 	bl	8019c4a <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800ac60:	2300      	movs	r3, #0
 800ac62:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	3314      	adds	r3, #20
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f00e ffdc 	bl	8019c28 <sys_mbox_valid>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d108      	bne.n	800ac88 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	3314      	adds	r3, #20
 800ac7c:	2106      	movs	r1, #6
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f00e ff44 	bl	8019b0c <sys_mbox_new>
 800ac84:	4603      	mov	r3, r0
 800ac86:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800ac88:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d118      	bne.n	800acc2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2202      	movs	r2, #2
 800ac96:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	685a      	ldr	r2, [r3, #4]
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4619      	mov	r1, r3
 800acac:	4610      	mov	r0, r2
 800acae:	f005 fab5 	bl	801021c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	4912      	ldr	r1, [pc, #72]	; (800ad04 <lwip_netconn_do_listen+0x12c>)
 800acba:	4618      	mov	r0, r3
 800acbc:	f005 fb26 	bl	801030c <tcp_accept>
 800acc0:	e017      	b.n	800acf2 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f004 f8ac 	bl	800ee20 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800acc8:	697b      	ldr	r3, [r7, #20]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2200      	movs	r2, #0
 800acce:	605a      	str	r2, [r3, #4]
 800acd0:	e00f      	b.n	800acf2 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	785b      	ldrb	r3, [r3, #1]
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d102      	bne.n	800ace2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	72fb      	strb	r3, [r7, #11]
 800ace0:	e007      	b.n	800acf2 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800ace2:	23f5      	movs	r3, #245	; 0xf5
 800ace4:	72fb      	strb	r3, [r7, #11]
 800ace6:	e004      	b.n	800acf2 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800ace8:	23f0      	movs	r3, #240	; 0xf0
 800acea:	72fb      	strb	r3, [r7, #11]
 800acec:	e001      	b.n	800acf2 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800acee:	23f5      	movs	r3, #245	; 0xf5
 800acf0:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800acf2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800acfa:	bf00      	nop
 800acfc:	3718      	adds	r7, #24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	0800a1e9 	.word	0x0800a1e9

0800ad08 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b086      	sub	sp, #24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	2200      	movs	r2, #0
 800ad18:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d022      	beq.n	800ad6a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad2e:	2b10      	cmp	r3, #16
 800ad30:	d11b      	bne.n	800ad6a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad3e:	d202      	bcs.n	800ad46 <lwip_netconn_do_recv+0x3e>
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	e001      	b.n	800ad4a <lwip_netconn_do_recv+0x42>
 800ad46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad4a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	89fa      	ldrh	r2, [r7, #14]
 800ad54:	4611      	mov	r1, r2
 800ad56:	4618      	mov	r0, r3
 800ad58:	f004 fb80 	bl	800f45c <tcp_recved>
        remaining -= recved;
 800ad5c:	89fb      	ldrh	r3, [r7, #14]
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1e6      	bne.n	800ad38 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ad6a:	bf00      	nop
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
	...

0800ad74 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d106      	bne.n	800ad98 <lwip_netconn_do_writemore+0x24>
 800ad8a:	4b96      	ldr	r3, [pc, #600]	; (800afe4 <lwip_netconn_do_writemore+0x270>)
 800ad8c:	f240 6273 	movw	r2, #1651	; 0x673
 800ad90:	4995      	ldr	r1, [pc, #596]	; (800afe8 <lwip_netconn_do_writemore+0x274>)
 800ad92:	4896      	ldr	r0, [pc, #600]	; (800afec <lwip_netconn_do_writemore+0x278>)
 800ad94:	f00f f8d0 	bl	8019f38 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	785b      	ldrb	r3, [r3, #1]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d006      	beq.n	800adae <lwip_netconn_do_writemore+0x3a>
 800ada0:	4b90      	ldr	r3, [pc, #576]	; (800afe4 <lwip_netconn_do_writemore+0x270>)
 800ada2:	f240 6274 	movw	r2, #1652	; 0x674
 800ada6:	4992      	ldr	r1, [pc, #584]	; (800aff0 <lwip_netconn_do_writemore+0x27c>)
 800ada8:	4890      	ldr	r0, [pc, #576]	; (800afec <lwip_netconn_do_writemore+0x278>)
 800adaa:	f00f f8c5 	bl	8019f38 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d106      	bne.n	800adc4 <lwip_netconn_do_writemore+0x50>
 800adb6:	4b8b      	ldr	r3, [pc, #556]	; (800afe4 <lwip_netconn_do_writemore+0x270>)
 800adb8:	f240 6275 	movw	r2, #1653	; 0x675
 800adbc:	498d      	ldr	r1, [pc, #564]	; (800aff4 <lwip_netconn_do_writemore+0x280>)
 800adbe:	488b      	ldr	r0, [pc, #556]	; (800afec <lwip_netconn_do_writemore+0x278>)
 800adc0:	f00f f8ba 	bl	8019f38 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d106      	bne.n	800adda <lwip_netconn_do_writemore+0x66>
 800adcc:	4b85      	ldr	r3, [pc, #532]	; (800afe4 <lwip_netconn_do_writemore+0x270>)
 800adce:	f240 6276 	movw	r2, #1654	; 0x676
 800add2:	4989      	ldr	r1, [pc, #548]	; (800aff8 <lwip_netconn_do_writemore+0x284>)
 800add4:	4885      	ldr	r0, [pc, #532]	; (800afec <lwip_netconn_do_writemore+0x278>)
 800add6:	f00f f8af 	bl	8019f38 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	699a      	ldr	r2, [r3, #24]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	695b      	ldr	r3, [r3, #20]
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d306      	bcc.n	800adf8 <lwip_netconn_do_writemore+0x84>
 800adea:	4b7e      	ldr	r3, [pc, #504]	; (800afe4 <lwip_netconn_do_writemore+0x270>)
 800adec:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800adf0:	4982      	ldr	r1, [pc, #520]	; (800affc <lwip_netconn_do_writemore+0x288>)
 800adf2:	487e      	ldr	r0, [pc, #504]	; (800afec <lwip_netconn_do_writemore+0x278>)
 800adf4:	f00f f8a0 	bl	8019f38 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6a1b      	ldr	r3, [r3, #32]
 800adfc:	899b      	ldrh	r3, [r3, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d106      	bne.n	800ae10 <lwip_netconn_do_writemore+0x9c>
 800ae02:	4b78      	ldr	r3, [pc, #480]	; (800afe4 <lwip_netconn_do_writemore+0x270>)
 800ae04:	f240 6279 	movw	r2, #1657	; 0x679
 800ae08:	497d      	ldr	r1, [pc, #500]	; (800b000 <lwip_netconn_do_writemore+0x28c>)
 800ae0a:	4878      	ldr	r0, [pc, #480]	; (800afec <lwip_netconn_do_writemore+0x278>)
 800ae0c:	f00f f894 	bl	8019f38 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a1b      	ldr	r3, [r3, #32]
 800ae14:	7f1b      	ldrb	r3, [r3, #28]
 800ae16:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	7f1b      	ldrb	r3, [r3, #28]
 800ae1c:	f003 0302 	and.w	r3, r3, #2
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d104      	bne.n	800ae2e <lwip_netconn_do_writemore+0xba>
 800ae24:	7ebb      	ldrb	r3, [r7, #26]
 800ae26:	f003 0304 	and.w	r3, r3, #4
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d001      	beq.n	800ae32 <lwip_netconn_do_writemore+0xbe>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e000      	b.n	800ae34 <lwip_netconn_do_writemore+0xc0>
 800ae32:	2300      	movs	r3, #0
 800ae34:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	689b      	ldr	r3, [r3, #8]
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	691b      	ldr	r3, [r3, #16]
 800ae44:	4413      	add	r3, r2
 800ae46:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a1b      	ldr	r3, [r3, #32]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	685a      	ldr	r2, [r3, #4]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	691b      	ldr	r3, [r3, #16]
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae60:	d307      	bcc.n	800ae72 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ae62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae66:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ae68:	7ebb      	ldrb	r3, [r7, #26]
 800ae6a:	f043 0302 	orr.w	r3, r3, #2
 800ae6e:	76bb      	strb	r3, [r7, #26]
 800ae70:	e001      	b.n	800ae76 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae7e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ae80:	89fa      	ldrh	r2, [r7, #14]
 800ae82:	8bbb      	ldrh	r3, [r7, #28]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d216      	bcs.n	800aeb6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ae88:	89fb      	ldrh	r3, [r7, #14]
 800ae8a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ae8c:	7e3b      	ldrb	r3, [r7, #24]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d00d      	beq.n	800aeae <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ae92:	8bbb      	ldrh	r3, [r7, #28]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10e      	bne.n	800aeb6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d102      	bne.n	800aea8 <lwip_netconn_do_writemore+0x134>
 800aea2:	f06f 0306 	mvn.w	r3, #6
 800aea6:	e000      	b.n	800aeaa <lwip_netconn_do_writemore+0x136>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800aeac:	e07d      	b.n	800afaa <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800aeae:	7ebb      	ldrb	r3, [r7, #26]
 800aeb0:	f043 0302 	orr.w	r3, r3, #2
 800aeb4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	691a      	ldr	r2, [r3, #16]
 800aebc:	8bbb      	ldrh	r3, [r7, #28]
 800aebe:	441a      	add	r2, r3
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a1b      	ldr	r3, [r3, #32]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d906      	bls.n	800aeda <lwip_netconn_do_writemore+0x166>
 800aecc:	4b45      	ldr	r3, [pc, #276]	; (800afe4 <lwip_netconn_do_writemore+0x270>)
 800aece:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800aed2:	494c      	ldr	r1, [pc, #304]	; (800b004 <lwip_netconn_do_writemore+0x290>)
 800aed4:	4845      	ldr	r0, [pc, #276]	; (800afec <lwip_netconn_do_writemore+0x278>)
 800aed6:	f00f f82f 	bl	8019f38 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aeda:	8bbb      	ldrh	r3, [r7, #28]
 800aedc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d103      	bne.n	800aeec <lwip_netconn_do_writemore+0x178>
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aeea:	d209      	bcs.n	800af00 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aef0:	8bba      	ldrh	r2, [r7, #28]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d10b      	bne.n	800af0e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a1b      	ldr	r3, [r3, #32]
 800aefa:	899b      	ldrh	r3, [r3, #12]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d906      	bls.n	800af0e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800af00:	2301      	movs	r3, #1
 800af02:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800af04:	7ebb      	ldrb	r3, [r7, #26]
 800af06:	f043 0302 	orr.w	r3, r3, #2
 800af0a:	76bb      	strb	r3, [r7, #26]
 800af0c:	e001      	b.n	800af12 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800af0e:	2300      	movs	r3, #0
 800af10:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6858      	ldr	r0, [r3, #4]
 800af16:	7ebb      	ldrb	r3, [r7, #26]
 800af18:	8bba      	ldrh	r2, [r7, #28]
 800af1a:	6979      	ldr	r1, [r7, #20]
 800af1c:	f008 f8ba 	bl	8013094 <tcp_write>
 800af20:	4603      	mov	r3, r0
 800af22:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800af24:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d12c      	bne.n	800af86 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a1b      	ldr	r3, [r3, #32]
 800af30:	6999      	ldr	r1, [r3, #24]
 800af32:	8bba      	ldrh	r2, [r7, #28]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6a1b      	ldr	r3, [r3, #32]
 800af38:	440a      	add	r2, r1
 800af3a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a1b      	ldr	r3, [r3, #32]
 800af40:	6919      	ldr	r1, [r3, #16]
 800af42:	8bba      	ldrh	r2, [r7, #28]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a1b      	ldr	r3, [r3, #32]
 800af48:	440a      	add	r2, r1
 800af4a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	691a      	ldr	r2, [r3, #16]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a1b      	ldr	r3, [r3, #32]
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d113      	bne.n	800af86 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	899a      	ldrh	r2, [r3, #12]
 800af64:	3a01      	subs	r2, #1
 800af66:	b292      	uxth	r2, r2
 800af68:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	899b      	ldrh	r3, [r3, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d008      	beq.n	800af86 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a1b      	ldr	r3, [r3, #32]
 800af78:	689a      	ldr	r2, [r3, #8]
 800af7a:	3208      	adds	r2, #8
 800af7c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	2200      	movs	r2, #0
 800af84:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800af86:	7e7b      	ldrb	r3, [r7, #25]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d004      	beq.n	800af96 <lwip_netconn_do_writemore+0x222>
 800af8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af90:	2b00      	cmp	r3, #0
 800af92:	f43f af50 	beq.w	800ae36 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800af96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d004      	beq.n	800afa8 <lwip_netconn_do_writemore+0x234>
 800af9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800afa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa6:	d146      	bne.n	800b036 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800afa8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800afaa:	7e3b      	ldrb	r3, [r7, #24]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d02b      	beq.n	800b008 <lwip_netconn_do_writemore+0x294>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a1b      	ldr	r3, [r3, #32]
 800afb4:	699a      	ldr	r2, [r3, #24]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	695b      	ldr	r3, [r3, #20]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d223      	bcs.n	800b008 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d005      	beq.n	800afd4 <lwip_netconn_do_writemore+0x260>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afcc:	2200      	movs	r2, #0
 800afce:	2103      	movs	r1, #3
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	7f1b      	ldrb	r3, [r3, #28]
 800afd8:	f043 0310 	orr.w	r3, r3, #16
 800afdc:	b2da      	uxtb	r2, r3
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	771a      	strb	r2, [r3, #28]
 800afe2:	e028      	b.n	800b036 <lwip_netconn_do_writemore+0x2c2>
 800afe4:	0801b6b0 	.word	0x0801b6b0
 800afe8:	0801b808 	.word	0x0801b808
 800afec:	0801b6f4 	.word	0x0801b6f4
 800aff0:	0801bb10 	.word	0x0801bb10
 800aff4:	0801b818 	.word	0x0801b818
 800aff8:	0801bb30 	.word	0x0801bb30
 800affc:	0801bb48 	.word	0x0801bb48
 800b000:	0801bb88 	.word	0x0801bb88
 800b004:	0801bbb0 	.word	0x0801bbb0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b010:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b014:	d305      	bcc.n	800b022 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b01e:	2b04      	cmp	r3, #4
 800b020:	d909      	bls.n	800b036 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b026:	2b00      	cmp	r3, #0
 800b028:	d005      	beq.n	800b036 <lwip_netconn_do_writemore+0x2c2>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02e:	2200      	movs	r2, #0
 800b030:	2103      	movs	r1, #3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b036:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d11d      	bne.n	800b07a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	699a      	ldr	r2, [r3, #24]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a1b      	ldr	r3, [r3, #32]
 800b048:	695b      	ldr	r3, [r3, #20]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d002      	beq.n	800b054 <lwip_netconn_do_writemore+0x2e0>
 800b04e:	7e3b      	ldrb	r3, [r7, #24]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d001      	beq.n	800b058 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b054:	2301      	movs	r3, #1
 800b056:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f008 fe05 	bl	8013c6c <tcp_output>
 800b062:	4603      	mov	r3, r0
 800b064:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b066:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b06a:	f113 0f04 	cmn.w	r3, #4
 800b06e:	d12c      	bne.n	800b0ca <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b070:	7b3b      	ldrb	r3, [r7, #12]
 800b072:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b074:	2301      	movs	r3, #1
 800b076:	76fb      	strb	r3, [r7, #27]
 800b078:	e027      	b.n	800b0ca <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b07a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b07e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b082:	d120      	bne.n	800b0c6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	4618      	mov	r0, r3
 800b08a:	f008 fdef 	bl	8013c6c <tcp_output>
 800b08e:	4603      	mov	r3, r0
 800b090:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b092:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b096:	f113 0f04 	cmn.w	r3, #4
 800b09a:	d104      	bne.n	800b0a6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b09c:	7b7b      	ldrb	r3, [r7, #13]
 800b09e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	76fb      	strb	r3, [r7, #27]
 800b0a4:	e011      	b.n	800b0ca <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b0a6:	7e3b      	ldrb	r3, [r7, #24]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d00e      	beq.n	800b0ca <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a1b      	ldr	r3, [r3, #32]
 800b0b0:	699b      	ldr	r3, [r3, #24]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d102      	bne.n	800b0bc <lwip_netconn_do_writemore+0x348>
 800b0b6:	f06f 0306 	mvn.w	r3, #6
 800b0ba:	e000      	b.n	800b0be <lwip_netconn_do_writemore+0x34a>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	76fb      	strb	r3, [r7, #27]
 800b0c4:	e001      	b.n	800b0ca <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b0ca:	7efb      	ldrb	r3, [r7, #27]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d015      	beq.n	800b0fc <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a1b      	ldr	r3, [r3, #32]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	330c      	adds	r3, #12
 800b0d8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6a1b      	ldr	r3, [r3, #32]
 800b0de:	7ffa      	ldrb	r2, [r7, #31]
 800b0e0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b0ee:	78fb      	ldrb	r3, [r7, #3]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d006      	beq.n	800b102 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b0f4:	68b8      	ldr	r0, [r7, #8]
 800b0f6:	f00e fe0b 	bl	8019d10 <sys_sem_signal>
 800b0fa:	e002      	b.n	800b102 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b0fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b100:	e000      	b.n	800b104 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b102:	2300      	movs	r3, #0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3720      	adds	r7, #32
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4618      	mov	r0, r3
 800b11e:	f7fe fd22 	bl	8009b66 <netconn_err>
 800b122:	4603      	mov	r3, r0
 800b124:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d166      	bne.n	800b1fc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b138:	2b10      	cmp	r3, #16
 800b13a:	d15d      	bne.n	800b1f8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	785b      	ldrb	r3, [r3, #1]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d002      	beq.n	800b14c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b146:	23fb      	movs	r3, #251	; 0xfb
 800b148:	73fb      	strb	r3, [r7, #15]
 800b14a:	e057      	b.n	800b1fc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d04d      	beq.n	800b1f2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2201      	movs	r2, #1
 800b15c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	6a1b      	ldr	r3, [r3, #32]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d006      	beq.n	800b176 <lwip_netconn_do_write+0x6a>
 800b168:	4b28      	ldr	r3, [pc, #160]	; (800b20c <lwip_netconn_do_write+0x100>)
 800b16a:	f240 7223 	movw	r2, #1827	; 0x723
 800b16e:	4928      	ldr	r1, [pc, #160]	; (800b210 <lwip_netconn_do_write+0x104>)
 800b170:	4828      	ldr	r0, [pc, #160]	; (800b214 <lwip_netconn_do_write+0x108>)
 800b172:	f00e fee1 	bl	8019f38 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	695b      	ldr	r3, [r3, #20]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d106      	bne.n	800b18c <lwip_netconn_do_write+0x80>
 800b17e:	4b23      	ldr	r3, [pc, #140]	; (800b20c <lwip_netconn_do_write+0x100>)
 800b180:	f240 7224 	movw	r2, #1828	; 0x724
 800b184:	4924      	ldr	r1, [pc, #144]	; (800b218 <lwip_netconn_do_write+0x10c>)
 800b186:	4823      	ldr	r0, [pc, #140]	; (800b214 <lwip_netconn_do_write+0x108>)
 800b188:	f00e fed6 	bl	8019f38 <iprintf>
        msg->conn->current_msg = msg;
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2100      	movs	r1, #0
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7ff fdea 	bl	800ad74 <lwip_netconn_do_writemore>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d02e      	beq.n	800b204 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	785b      	ldrb	r3, [r3, #1]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d006      	beq.n	800b1be <lwip_netconn_do_write+0xb2>
 800b1b0:	4b16      	ldr	r3, [pc, #88]	; (800b20c <lwip_netconn_do_write+0x100>)
 800b1b2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b1b6:	4919      	ldr	r1, [pc, #100]	; (800b21c <lwip_netconn_do_write+0x110>)
 800b1b8:	4816      	ldr	r0, [pc, #88]	; (800b214 <lwip_netconn_do_write+0x108>)
 800b1ba:	f00e febd 	bl	8019f38 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b1be:	4818      	ldr	r0, [pc, #96]	; (800b220 <lwip_netconn_do_write+0x114>)
 800b1c0:	f00e fe0f 	bl	8019de2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	330c      	adds	r3, #12
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f00e fd6e 	bl	8019cae <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b1d2:	4813      	ldr	r0, [pc, #76]	; (800b220 <lwip_netconn_do_write+0x114>)
 800b1d4:	f00e fdf6 	bl	8019dc4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	785b      	ldrb	r3, [r3, #1]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d110      	bne.n	800b204 <lwip_netconn_do_write+0xf8>
 800b1e2:	4b0a      	ldr	r3, [pc, #40]	; (800b20c <lwip_netconn_do_write+0x100>)
 800b1e4:	f240 722c 	movw	r2, #1836	; 0x72c
 800b1e8:	490c      	ldr	r1, [pc, #48]	; (800b21c <lwip_netconn_do_write+0x110>)
 800b1ea:	480a      	ldr	r0, [pc, #40]	; (800b214 <lwip_netconn_do_write+0x108>)
 800b1ec:	f00e fea4 	bl	8019f38 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b1f0:	e008      	b.n	800b204 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b1f2:	23f5      	movs	r3, #245	; 0xf5
 800b1f4:	73fb      	strb	r3, [r7, #15]
 800b1f6:	e001      	b.n	800b1fc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b1f8:	23fa      	movs	r3, #250	; 0xfa
 800b1fa:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	7bfa      	ldrb	r2, [r7, #15]
 800b200:	711a      	strb	r2, [r3, #4]
 800b202:	e000      	b.n	800b206 <lwip_netconn_do_write+0xfa>
        return;
 800b204:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	0801b6b0 	.word	0x0801b6b0
 800b210:	0801ba54 	.word	0x0801ba54
 800b214:	0801b6f4 	.word	0x0801b6f4
 800b218:	0801bbdc 	.word	0x0801bbdc
 800b21c:	0801ba70 	.word	0x0801ba70
 800b220:	2001376c 	.word	0x2001376c

0800b224 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	785b      	ldrb	r3, [r3, #1]
 800b236:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d069      	beq.n	800b316 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b24c:	2b10      	cmp	r3, #16
 800b24e:	d162      	bne.n	800b316 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b254:	2b03      	cmp	r3, #3
 800b256:	d002      	beq.n	800b25e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b258:	7afb      	ldrb	r3, [r7, #11]
 800b25a:	2b02      	cmp	r3, #2
 800b25c:	d05b      	beq.n	800b316 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b25e:	7afb      	ldrb	r3, [r7, #11]
 800b260:	2b03      	cmp	r3, #3
 800b262:	d103      	bne.n	800b26c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	22f5      	movs	r2, #245	; 0xf5
 800b268:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b26a:	e059      	b.n	800b320 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b26c:	7afb      	ldrb	r3, [r7, #11]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d103      	bne.n	800b27a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	22fb      	movs	r2, #251	; 0xfb
 800b276:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b278:	e052      	b.n	800b320 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	7a1b      	ldrb	r3, [r3, #8]
 800b27e:	f003 0301 	and.w	r3, r3, #1
 800b282:	2b00      	cmp	r3, #0
 800b284:	d004      	beq.n	800b290 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7ff f9a0 	bl	800a5d0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d006      	beq.n	800b2a8 <lwip_netconn_do_close+0x84>
 800b29a:	4b23      	ldr	r3, [pc, #140]	; (800b328 <lwip_netconn_do_close+0x104>)
 800b29c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b2a0:	4922      	ldr	r1, [pc, #136]	; (800b32c <lwip_netconn_do_close+0x108>)
 800b2a2:	4823      	ldr	r0, [pc, #140]	; (800b330 <lwip_netconn_do_close+0x10c>)
 800b2a4:	f00e fe48 	bl	8019f38 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2204      	movs	r2, #4
 800b2ae:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2100      	movs	r1, #0
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7ff fa04 	bl	800a6cc <lwip_netconn_do_close_internal>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d029      	beq.n	800b31e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	785b      	ldrb	r3, [r3, #1]
 800b2d0:	2b04      	cmp	r3, #4
 800b2d2:	d006      	beq.n	800b2e2 <lwip_netconn_do_close+0xbe>
 800b2d4:	4b14      	ldr	r3, [pc, #80]	; (800b328 <lwip_netconn_do_close+0x104>)
 800b2d6:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b2da:	4916      	ldr	r1, [pc, #88]	; (800b334 <lwip_netconn_do_close+0x110>)
 800b2dc:	4814      	ldr	r0, [pc, #80]	; (800b330 <lwip_netconn_do_close+0x10c>)
 800b2de:	f00e fe2b 	bl	8019f38 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b2e2:	4815      	ldr	r0, [pc, #84]	; (800b338 <lwip_netconn_do_close+0x114>)
 800b2e4:	f00e fd7d 	bl	8019de2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	330c      	adds	r3, #12
 800b2ee:	2100      	movs	r1, #0
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f00e fcdc 	bl	8019cae <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b2f6:	4810      	ldr	r0, [pc, #64]	; (800b338 <lwip_netconn_do_close+0x114>)
 800b2f8:	f00e fd64 	bl	8019dc4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	785b      	ldrb	r3, [r3, #1]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00b      	beq.n	800b31e <lwip_netconn_do_close+0xfa>
 800b306:	4b08      	ldr	r3, [pc, #32]	; (800b328 <lwip_netconn_do_close+0x104>)
 800b308:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b30c:	4909      	ldr	r1, [pc, #36]	; (800b334 <lwip_netconn_do_close+0x110>)
 800b30e:	4808      	ldr	r0, [pc, #32]	; (800b330 <lwip_netconn_do_close+0x10c>)
 800b310:	f00e fe12 	bl	8019f38 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b314:	e003      	b.n	800b31e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	22f5      	movs	r2, #245	; 0xf5
 800b31a:	711a      	strb	r2, [r3, #4]
 800b31c:	e000      	b.n	800b320 <lwip_netconn_do_close+0xfc>
      return;
 800b31e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b320:	3710      	adds	r7, #16
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	0801b6b0 	.word	0x0801b6b0
 800b32c:	0801ba54 	.word	0x0801ba54
 800b330:	0801b6f4 	.word	0x0801b6f4
 800b334:	0801ba70 	.word	0x0801ba70
 800b338:	2001376c 	.word	0x2001376c

0800b33c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d013      	beq.n	800b372 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d00b      	beq.n	800b36a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4618      	mov	r0, r3
 800b358:	f003 f8b0 	bl	800e4bc <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	605a      	str	r2, [r3, #4]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	685a      	ldr	r2, [r3, #4]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b36a:	6879      	ldr	r1, [r7, #4]
 800b36c:	2006      	movs	r0, #6
 800b36e:	f002 f9f9 	bl	800d764 <memp_free>
  }
}
 800b372:	bf00      	nop
 800b374:	3708      	adds	r7, #8
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
	...

0800b37c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d108      	bne.n	800b3a0 <netbuf_data+0x24>
 800b38e:	4b1b      	ldr	r3, [pc, #108]	; (800b3fc <netbuf_data+0x80>)
 800b390:	22c6      	movs	r2, #198	; 0xc6
 800b392:	491b      	ldr	r1, [pc, #108]	; (800b400 <netbuf_data+0x84>)
 800b394:	481b      	ldr	r0, [pc, #108]	; (800b404 <netbuf_data+0x88>)
 800b396:	f00e fdcf 	bl	8019f38 <iprintf>
 800b39a:	f06f 030f 	mvn.w	r3, #15
 800b39e:	e029      	b.n	800b3f4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d108      	bne.n	800b3b8 <netbuf_data+0x3c>
 800b3a6:	4b15      	ldr	r3, [pc, #84]	; (800b3fc <netbuf_data+0x80>)
 800b3a8:	22c7      	movs	r2, #199	; 0xc7
 800b3aa:	4917      	ldr	r1, [pc, #92]	; (800b408 <netbuf_data+0x8c>)
 800b3ac:	4815      	ldr	r0, [pc, #84]	; (800b404 <netbuf_data+0x88>)
 800b3ae:	f00e fdc3 	bl	8019f38 <iprintf>
 800b3b2:	f06f 030f 	mvn.w	r3, #15
 800b3b6:	e01d      	b.n	800b3f4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d108      	bne.n	800b3d0 <netbuf_data+0x54>
 800b3be:	4b0f      	ldr	r3, [pc, #60]	; (800b3fc <netbuf_data+0x80>)
 800b3c0:	22c8      	movs	r2, #200	; 0xc8
 800b3c2:	4912      	ldr	r1, [pc, #72]	; (800b40c <netbuf_data+0x90>)
 800b3c4:	480f      	ldr	r0, [pc, #60]	; (800b404 <netbuf_data+0x88>)
 800b3c6:	f00e fdb7 	bl	8019f38 <iprintf>
 800b3ca:	f06f 030f 	mvn.w	r3, #15
 800b3ce:	e011      	b.n	800b3f4 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d102      	bne.n	800b3de <netbuf_data+0x62>
    return ERR_BUF;
 800b3d8:	f06f 0301 	mvn.w	r3, #1
 800b3dc:	e00a      	b.n	800b3f4 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	685a      	ldr	r2, [r3, #4]
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	895a      	ldrh	r2, [r3, #10]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	0801bc08 	.word	0x0801bc08
 800b400:	0801bd10 	.word	0x0801bd10
 800b404:	0801bc58 	.word	0x0801bc58
 800b408:	0801bd2c 	.word	0x0801bd2c
 800b40c:	0801bd4c 	.word	0x0801bd4c

0800b410 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b41a:	f009 fced 	bl	8014df8 <sys_timeouts_sleeptime>
 800b41e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b426:	d10b      	bne.n	800b440 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b428:	4813      	ldr	r0, [pc, #76]	; (800b478 <tcpip_timeouts_mbox_fetch+0x68>)
 800b42a:	f00e fcda 	bl	8019de2 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b42e:	2200      	movs	r2, #0
 800b430:	6839      	ldr	r1, [r7, #0]
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f00e fbb0 	bl	8019b98 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b438:	480f      	ldr	r0, [pc, #60]	; (800b478 <tcpip_timeouts_mbox_fetch+0x68>)
 800b43a:	f00e fcc3 	bl	8019dc4 <sys_mutex_lock>
    return;
 800b43e:	e018      	b.n	800b472 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d102      	bne.n	800b44c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b446:	f009 fc9d 	bl	8014d84 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b44a:	e7e6      	b.n	800b41a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b44c:	480a      	ldr	r0, [pc, #40]	; (800b478 <tcpip_timeouts_mbox_fetch+0x68>)
 800b44e:	f00e fcc8 	bl	8019de2 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	6839      	ldr	r1, [r7, #0]
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f00e fb9e 	bl	8019b98 <sys_arch_mbox_fetch>
 800b45c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b45e:	4806      	ldr	r0, [pc, #24]	; (800b478 <tcpip_timeouts_mbox_fetch+0x68>)
 800b460:	f00e fcb0 	bl	8019dc4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b46a:	d102      	bne.n	800b472 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b46c:	f009 fc8a 	bl	8014d84 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b470:	e7d3      	b.n	800b41a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	2001376c 	.word	0x2001376c

0800b47c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b484:	4810      	ldr	r0, [pc, #64]	; (800b4c8 <tcpip_thread+0x4c>)
 800b486:	f00e fc9d 	bl	8019dc4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b48a:	4b10      	ldr	r3, [pc, #64]	; (800b4cc <tcpip_thread+0x50>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d005      	beq.n	800b49e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b492:	4b0e      	ldr	r3, [pc, #56]	; (800b4cc <tcpip_thread+0x50>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a0e      	ldr	r2, [pc, #56]	; (800b4d0 <tcpip_thread+0x54>)
 800b498:	6812      	ldr	r2, [r2, #0]
 800b49a:	4610      	mov	r0, r2
 800b49c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b49e:	f107 030c 	add.w	r3, r7, #12
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	480b      	ldr	r0, [pc, #44]	; (800b4d4 <tcpip_thread+0x58>)
 800b4a6:	f7ff ffb3 	bl	800b410 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d106      	bne.n	800b4be <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b4b0:	4b09      	ldr	r3, [pc, #36]	; (800b4d8 <tcpip_thread+0x5c>)
 800b4b2:	2291      	movs	r2, #145	; 0x91
 800b4b4:	4909      	ldr	r1, [pc, #36]	; (800b4dc <tcpip_thread+0x60>)
 800b4b6:	480a      	ldr	r0, [pc, #40]	; (800b4e0 <tcpip_thread+0x64>)
 800b4b8:	f00e fd3e 	bl	8019f38 <iprintf>
      continue;
 800b4bc:	e003      	b.n	800b4c6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f000 f80f 	bl	800b4e4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b4c6:	e7ea      	b.n	800b49e <tcpip_thread+0x22>
 800b4c8:	2001376c 	.word	0x2001376c
 800b4cc:	2000fe48 	.word	0x2000fe48
 800b4d0:	2000fe4c 	.word	0x2000fe4c
 800b4d4:	2000fe50 	.word	0x2000fe50
 800b4d8:	0801bda0 	.word	0x0801bda0
 800b4dc:	0801bdd0 	.word	0x0801bdd0
 800b4e0:	0801bdf0 	.word	0x0801bdf0

0800b4e4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b082      	sub	sp, #8
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d018      	beq.n	800b526 <tcpip_thread_handle_msg+0x42>
 800b4f4:	2b02      	cmp	r3, #2
 800b4f6:	d021      	beq.n	800b53c <tcpip_thread_handle_msg+0x58>
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d126      	bne.n	800b54a <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	6850      	ldr	r0, [r2, #4]
 800b504:	687a      	ldr	r2, [r7, #4]
 800b506:	6892      	ldr	r2, [r2, #8]
 800b508:	4611      	mov	r1, r2
 800b50a:	4798      	blx	r3
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d004      	beq.n	800b51c <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	4618      	mov	r0, r3
 800b518:	f002 ffd0 	bl	800e4bc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b51c:	6879      	ldr	r1, [r7, #4]
 800b51e:	2009      	movs	r0, #9
 800b520:	f002 f920 	bl	800d764 <memp_free>
      break;
 800b524:	e018      	b.n	800b558 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	6892      	ldr	r2, [r2, #8]
 800b52e:	4610      	mov	r0, r2
 800b530:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b532:	6879      	ldr	r1, [r7, #4]
 800b534:	2008      	movs	r0, #8
 800b536:	f002 f915 	bl	800d764 <memp_free>
      break;
 800b53a:	e00d      	b.n	800b558 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	687a      	ldr	r2, [r7, #4]
 800b542:	6892      	ldr	r2, [r2, #8]
 800b544:	4610      	mov	r0, r2
 800b546:	4798      	blx	r3
      break;
 800b548:	e006      	b.n	800b558 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b54a:	4b05      	ldr	r3, [pc, #20]	; (800b560 <tcpip_thread_handle_msg+0x7c>)
 800b54c:	22cf      	movs	r2, #207	; 0xcf
 800b54e:	4905      	ldr	r1, [pc, #20]	; (800b564 <tcpip_thread_handle_msg+0x80>)
 800b550:	4805      	ldr	r0, [pc, #20]	; (800b568 <tcpip_thread_handle_msg+0x84>)
 800b552:	f00e fcf1 	bl	8019f38 <iprintf>
      break;
 800b556:	bf00      	nop
  }
}
 800b558:	bf00      	nop
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	0801bda0 	.word	0x0801bda0
 800b564:	0801bdd0 	.word	0x0801bdd0
 800b568:	0801bdf0 	.word	0x0801bdf0

0800b56c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af00      	add	r7, sp, #0
 800b572:	60f8      	str	r0, [r7, #12]
 800b574:	60b9      	str	r1, [r7, #8]
 800b576:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b578:	481a      	ldr	r0, [pc, #104]	; (800b5e4 <tcpip_inpkt+0x78>)
 800b57a:	f00e fb55 	bl	8019c28 <sys_mbox_valid>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d105      	bne.n	800b590 <tcpip_inpkt+0x24>
 800b584:	4b18      	ldr	r3, [pc, #96]	; (800b5e8 <tcpip_inpkt+0x7c>)
 800b586:	22fc      	movs	r2, #252	; 0xfc
 800b588:	4918      	ldr	r1, [pc, #96]	; (800b5ec <tcpip_inpkt+0x80>)
 800b58a:	4819      	ldr	r0, [pc, #100]	; (800b5f0 <tcpip_inpkt+0x84>)
 800b58c:	f00e fcd4 	bl	8019f38 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b590:	2009      	movs	r0, #9
 800b592:	f002 f895 	bl	800d6c0 <memp_malloc>
 800b596:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d102      	bne.n	800b5a4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b59e:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a2:	e01a      	b.n	800b5da <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b5bc:	6979      	ldr	r1, [r7, #20]
 800b5be:	4809      	ldr	r0, [pc, #36]	; (800b5e4 <tcpip_inpkt+0x78>)
 800b5c0:	f00e fad0 	bl	8019b64 <sys_mbox_trypost>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d006      	beq.n	800b5d8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b5ca:	6979      	ldr	r1, [r7, #20]
 800b5cc:	2009      	movs	r0, #9
 800b5ce:	f002 f8c9 	bl	800d764 <memp_free>
    return ERR_MEM;
 800b5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b5d6:	e000      	b.n	800b5da <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b5d8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	2000fe50 	.word	0x2000fe50
 800b5e8:	0801bda0 	.word	0x0801bda0
 800b5ec:	0801be18 	.word	0x0801be18
 800b5f0:	0801bdf0 	.word	0x0801bdf0

0800b5f4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b604:	f003 0318 	and.w	r3, r3, #24
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d006      	beq.n	800b61a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b60c:	4a08      	ldr	r2, [pc, #32]	; (800b630 <tcpip_input+0x3c>)
 800b60e:	6839      	ldr	r1, [r7, #0]
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7ff ffab 	bl	800b56c <tcpip_inpkt>
 800b616:	4603      	mov	r3, r0
 800b618:	e005      	b.n	800b626 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b61a:	4a06      	ldr	r2, [pc, #24]	; (800b634 <tcpip_input+0x40>)
 800b61c:	6839      	ldr	r1, [r7, #0]
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7ff ffa4 	bl	800b56c <tcpip_inpkt>
 800b624:	4603      	mov	r3, r0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	08019961 	.word	0x08019961
 800b634:	08018845 	.word	0x08018845

0800b638 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b642:	4819      	ldr	r0, [pc, #100]	; (800b6a8 <tcpip_try_callback+0x70>)
 800b644:	f00e faf0 	bl	8019c28 <sys_mbox_valid>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d106      	bne.n	800b65c <tcpip_try_callback+0x24>
 800b64e:	4b17      	ldr	r3, [pc, #92]	; (800b6ac <tcpip_try_callback+0x74>)
 800b650:	f240 125d 	movw	r2, #349	; 0x15d
 800b654:	4916      	ldr	r1, [pc, #88]	; (800b6b0 <tcpip_try_callback+0x78>)
 800b656:	4817      	ldr	r0, [pc, #92]	; (800b6b4 <tcpip_try_callback+0x7c>)
 800b658:	f00e fc6e 	bl	8019f38 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b65c:	2008      	movs	r0, #8
 800b65e:	f002 f82f 	bl	800d6c0 <memp_malloc>
 800b662:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d102      	bne.n	800b670 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b66a:	f04f 33ff 	mov.w	r3, #4294967295
 800b66e:	e017      	b.n	800b6a0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	2201      	movs	r2, #1
 800b674:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	687a      	ldr	r2, [r7, #4]
 800b67a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	683a      	ldr	r2, [r7, #0]
 800b680:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b682:	68f9      	ldr	r1, [r7, #12]
 800b684:	4808      	ldr	r0, [pc, #32]	; (800b6a8 <tcpip_try_callback+0x70>)
 800b686:	f00e fa6d 	bl	8019b64 <sys_mbox_trypost>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d006      	beq.n	800b69e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b690:	68f9      	ldr	r1, [r7, #12]
 800b692:	2008      	movs	r0, #8
 800b694:	f002 f866 	bl	800d764 <memp_free>
    return ERR_MEM;
 800b698:	f04f 33ff 	mov.w	r3, #4294967295
 800b69c:	e000      	b.n	800b6a0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}
 800b6a8:	2000fe50 	.word	0x2000fe50
 800b6ac:	0801bda0 	.word	0x0801bda0
 800b6b0:	0801be18 	.word	0x0801be18
 800b6b4:	0801bdf0 	.word	0x0801bdf0

0800b6b8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b6c4:	4806      	ldr	r0, [pc, #24]	; (800b6e0 <tcpip_send_msg_wait_sem+0x28>)
 800b6c6:	f00e fb7d 	bl	8019dc4 <sys_mutex_lock>
  fn(apimsg);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	68b8      	ldr	r0, [r7, #8]
 800b6ce:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b6d0:	4803      	ldr	r0, [pc, #12]	; (800b6e0 <tcpip_send_msg_wait_sem+0x28>)
 800b6d2:	f00e fb86 	bl	8019de2 <sys_mutex_unlock>
  return ERR_OK;
 800b6d6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3710      	adds	r7, #16
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	2001376c 	.word	0x2001376c

0800b6e4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af02      	add	r7, sp, #8
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b6ee:	f001 fb5f 	bl	800cdb0 <lwip_init>

  tcpip_init_done = initfunc;
 800b6f2:	4a17      	ldr	r2, [pc, #92]	; (800b750 <tcpip_init+0x6c>)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b6f8:	4a16      	ldr	r2, [pc, #88]	; (800b754 <tcpip_init+0x70>)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b6fe:	2106      	movs	r1, #6
 800b700:	4815      	ldr	r0, [pc, #84]	; (800b758 <tcpip_init+0x74>)
 800b702:	f00e fa03 	bl	8019b0c <sys_mbox_new>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d006      	beq.n	800b71a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b70c:	4b13      	ldr	r3, [pc, #76]	; (800b75c <tcpip_init+0x78>)
 800b70e:	f240 2261 	movw	r2, #609	; 0x261
 800b712:	4913      	ldr	r1, [pc, #76]	; (800b760 <tcpip_init+0x7c>)
 800b714:	4813      	ldr	r0, [pc, #76]	; (800b764 <tcpip_init+0x80>)
 800b716:	f00e fc0f 	bl	8019f38 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b71a:	4813      	ldr	r0, [pc, #76]	; (800b768 <tcpip_init+0x84>)
 800b71c:	f00e fb3c 	bl	8019d98 <sys_mutex_new>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	d006      	beq.n	800b734 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b726:	4b0d      	ldr	r3, [pc, #52]	; (800b75c <tcpip_init+0x78>)
 800b728:	f240 2265 	movw	r2, #613	; 0x265
 800b72c:	490f      	ldr	r1, [pc, #60]	; (800b76c <tcpip_init+0x88>)
 800b72e:	480d      	ldr	r0, [pc, #52]	; (800b764 <tcpip_init+0x80>)
 800b730:	f00e fc02 	bl	8019f38 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b734:	2318      	movs	r3, #24
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b73c:	2200      	movs	r2, #0
 800b73e:	490c      	ldr	r1, [pc, #48]	; (800b770 <tcpip_init+0x8c>)
 800b740:	480c      	ldr	r0, [pc, #48]	; (800b774 <tcpip_init+0x90>)
 800b742:	f00e fb5b 	bl	8019dfc <sys_thread_new>
}
 800b746:	bf00      	nop
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	2000fe48 	.word	0x2000fe48
 800b754:	2000fe4c 	.word	0x2000fe4c
 800b758:	2000fe50 	.word	0x2000fe50
 800b75c:	0801bda0 	.word	0x0801bda0
 800b760:	0801be28 	.word	0x0801be28
 800b764:	0801bdf0 	.word	0x0801bdf0
 800b768:	2001376c 	.word	0x2001376c
 800b76c:	0801be4c 	.word	0x0801be4c
 800b770:	0800b47d 	.word	0x0800b47d
 800b774:	0801be70 	.word	0x0801be70

0800b778 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <fs_open+0x16>
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d102      	bne.n	800b794 <fs_open+0x1c>
    return ERR_ARG;
 800b78e:	f06f 030f 	mvn.w	r3, #15
 800b792:	e028      	b.n	800b7e6 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b794:	4b16      	ldr	r3, [pc, #88]	; (800b7f0 <fs_open+0x78>)
 800b796:	60fb      	str	r3, [r7, #12]
 800b798:	e020      	b.n	800b7dc <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	6838      	ldr	r0, [r7, #0]
 800b7a2:	f7f4 fd25 	bl	80001f0 <strcmp>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d114      	bne.n	800b7d6 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	689a      	ldr	r2, [r3, #8]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	68da      	ldr	r2, [r3, #12]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	68da      	ldr	r2, [r3, #12]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	7c1a      	ldrb	r2, [r3, #16]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	e007      	b.n	800b7e6 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	60fb      	str	r3, [r7, #12]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d1db      	bne.n	800b79a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800b7e2:	f06f 0305 	mvn.w	r3, #5
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	080400f4 	.word	0x080400f4

0800b7f4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685a      	ldr	r2, [r3, #4]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	1ad3      	subs	r3, r2, r3
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	370c      	adds	r7, #12
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr

0800b826 <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b082      	sub	sp, #8
 800b82a:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800b82c:	20e0      	movs	r0, #224	; 0xe0
 800b82e:	f001 fdc5 	bl	800d3bc <mem_malloc>
 800b832:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d004      	beq.n	800b844 <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800b83a:	22e0      	movs	r2, #224	; 0xe0
 800b83c:	2100      	movs	r1, #0
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f00e fb71 	bl	8019f26 <memset>
  }
  return ret;
 800b844:	687b      	ldr	r3, [r7, #4]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800b84e:	b580      	push	{r7, lr}
 800b850:	b082      	sub	sp, #8
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f001 fc13 	bl	800d088 <mem_free>
  }
}
 800b862:	bf00      	nop
 800b864:	3708      	adds	r7, #8
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b082      	sub	sp, #8
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800b872:	2230      	movs	r2, #48	; 0x30
 800b874:	2100      	movs	r1, #0
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f00e fb55 	bl	8019f26 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800b87c:	bf00      	nop
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800b88a:	2030      	movs	r0, #48	; 0x30
 800b88c:	f001 fd96 	bl	800d3bc <mem_malloc>
 800b890:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <http_state_alloc+0x1a>
    http_state_init(ret);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f7ff ffe6 	bl	800b86a <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800b89e:	687b      	ldr	r3, [r7, #4]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	695b      	ldr	r3, [r3, #20]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d007      	beq.n	800b8c8 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	695b      	ldr	r3, [r3, #20]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7ff ff99 	bl	800b7f4 <fs_close>
    hs->handle = NULL;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d007      	beq.n	800b8e0 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7ff ffba 	bl	800b84e <http_ssi_state_free>
    hs->ssi = NULL;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6a1b      	ldr	r3, [r3, #32]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d007      	beq.n	800b8f8 <http_state_eof+0x50>
    pbuf_free(hs->req);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a1b      	ldr	r3, [r3, #32]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f002 fde5 	bl	800e4bc <pbuf_free>
    hs->req = NULL;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800b8f8:	bf00      	nop
 800b8fa:	3708      	adds	r7, #8
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d005      	beq.n	800b91a <http_state_free+0x1a>
    http_state_eof(hs);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7ff ffca 	bl	800b8a8 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f001 fbb7 	bl	800d088 <mem_free>
  }
}
 800b91a:	bf00      	nop
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
	...

0800b924 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
 800b930:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d106      	bne.n	800b946 <http_write+0x22>
 800b938:	4b2c      	ldr	r3, [pc, #176]	; (800b9ec <http_write+0xc8>)
 800b93a:	f240 2219 	movw	r2, #537	; 0x219
 800b93e:	492c      	ldr	r1, [pc, #176]	; (800b9f0 <http_write+0xcc>)
 800b940:	482c      	ldr	r0, [pc, #176]	; (800b9f4 <http_write+0xd0>)
 800b942:	f00e faf9 	bl	8019f38 <iprintf>
  len = *length;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	881b      	ldrh	r3, [r3, #0]
 800b94a:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800b94c:	8afb      	ldrh	r3, [r7, #22]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d101      	bne.n	800b956 <http_write+0x32>
    return ERR_OK;
 800b952:	2300      	movs	r3, #0
 800b954:	e045      	b.n	800b9e2 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b95c:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800b95e:	8aba      	ldrh	r2, [r7, #20]
 800b960:	8afb      	ldrh	r3, [r7, #22]
 800b962:	429a      	cmp	r2, r3
 800b964:	d201      	bcs.n	800b96a <http_write+0x46>
    len = max_len;
 800b966:	8abb      	ldrh	r3, [r7, #20]
 800b968:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800b972:	8afa      	ldrh	r2, [r7, #22]
 800b974:	8abb      	ldrh	r3, [r7, #20]
 800b976:	429a      	cmp	r2, r3
 800b978:	d901      	bls.n	800b97e <http_write+0x5a>
    len = max_len;
 800b97a:	8abb      	ldrh	r3, [r7, #20]
 800b97c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800b97e:	78fb      	ldrb	r3, [r7, #3]
 800b980:	8afa      	ldrh	r2, [r7, #22]
 800b982:	68b9      	ldr	r1, [r7, #8]
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f007 fb85 	bl	8013094 <tcp_write>
 800b98a:	4603      	mov	r3, r0
 800b98c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800b98e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b992:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b996:	d10f      	bne.n	800b9b8 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d004      	beq.n	800b9ac <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800b9a8:	2b08      	cmp	r3, #8
 800b9aa:	d902      	bls.n	800b9b2 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	82fb      	strh	r3, [r7, #22]
 800b9b0:	e002      	b.n	800b9b8 <http_write+0x94>
      } else {
        len /= 2;
 800b9b2:	8afb      	ldrh	r3, [r7, #22]
 800b9b4:	085b      	lsrs	r3, r3, #1
 800b9b6:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800b9b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c0:	d102      	bne.n	800b9c8 <http_write+0xa4>
 800b9c2:	8afb      	ldrh	r3, [r7, #22]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d8da      	bhi.n	800b97e <http_write+0x5a>

  if (err == ERR_OK) {
 800b9c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d103      	bne.n	800b9d8 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	8afa      	ldrh	r2, [r7, #22]
 800b9d4:	801a      	strh	r2, [r3, #0]
 800b9d6:	e002      	b.n	800b9de <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800b9de:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3718      	adds	r7, #24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	0801befc 	.word	0x0801befc
 800b9f0:	0801bf34 	.word	0x0801bf34
 800b9f4:	0801bf44 	.word	0x0801bf44

0800b9f8 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	4613      	mov	r3, r2
 800ba04:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800ba06:	2100      	movs	r1, #0
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f004 fc07 	bl	801021c <tcp_arg>
  altcp_recv(pcb, NULL);
 800ba0e:	2100      	movs	r1, #0
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f004 fc15 	bl	8010240 <tcp_recv>
  altcp_err(pcb, NULL);
 800ba16:	2100      	movs	r1, #0
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f004 fc55 	bl	80102c8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800ba1e:	2200      	movs	r2, #0
 800ba20:	2100      	movs	r1, #0
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f004 fc8a 	bl	801033c <tcp_poll>
  altcp_sent(pcb, NULL);
 800ba28:	2100      	movs	r1, #0
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f004 fc2a 	bl	8010284 <tcp_sent>
  if (hs != NULL) {
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d002      	beq.n	800ba3c <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800ba36:	68b8      	ldr	r0, [r7, #8]
 800ba38:	f7ff ff62 	bl	800b900 <http_state_free>
  }

  if (abort_conn) {
 800ba3c:	79fb      	ldrb	r3, [r7, #7]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d004      	beq.n	800ba4c <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f003 fb30 	bl	800f0a8 <tcp_abort>
    return ERR_OK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	e00f      	b.n	800ba6c <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f003 f9e7 	bl	800ee20 <tcp_close>
 800ba52:	4603      	mov	r3, r0
 800ba54:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800ba56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d004      	beq.n	800ba68 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ba5e:	2204      	movs	r2, #4
 800ba60:	4904      	ldr	r1, [pc, #16]	; (800ba74 <http_close_or_abort_conn+0x7c>)
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f004 fc6a 	bl	801033c <tcp_poll>
  }
  return err;
 800ba68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	0800c9b3 	.word	0x0800c9b3

0800ba78 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800ba82:	2200      	movs	r2, #0
 800ba84:	6839      	ldr	r1, [r7, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f7ff ffb6 	bl	800b9f8 <http_close_or_abort_conn>
 800ba8c:	4603      	mov	r3, r0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b082      	sub	sp, #8
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800baa0:	6839      	ldr	r1, [r7, #0]
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7ff ffe8 	bl	800ba78 <http_close_conn>
  }
}
 800baa8:	bf00      	nop
 800baaa:	3708      	adds	r7, #8
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d106      	bne.n	800bacc <get_tag_insert+0x1c>
 800babe:	4b51      	ldr	r3, [pc, #324]	; (800bc04 <get_tag_insert+0x154>)
 800bac0:	f44f 7241 	mov.w	r2, #772	; 0x304
 800bac4:	4950      	ldr	r1, [pc, #320]	; (800bc08 <get_tag_insert+0x158>)
 800bac6:	4851      	ldr	r0, [pc, #324]	; (800bc0c <get_tag_insert+0x15c>)
 800bac8:	f00e fa36 	bl	8019f38 <iprintf>
  ssi = hs->ssi;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bad0:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d106      	bne.n	800bae6 <get_tag_insert+0x36>
 800bad8:	4b4a      	ldr	r3, [pc, #296]	; (800bc04 <get_tag_insert+0x154>)
 800bada:	f240 3206 	movw	r2, #774	; 0x306
 800bade:	494c      	ldr	r1, [pc, #304]	; (800bc10 <get_tag_insert+0x160>)
 800bae0:	484a      	ldr	r0, [pc, #296]	; (800bc0c <get_tag_insert+0x15c>)
 800bae2:	f00e fa29 	bl	8019f38 <iprintf>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800bae6:	4b4b      	ldr	r3, [pc, #300]	; (800bc14 <get_tag_insert+0x164>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d02e      	beq.n	800bb4c <get_tag_insert+0x9c>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800baee:	4b4a      	ldr	r3, [pc, #296]	; (800bc18 <get_tag_insert+0x168>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d02a      	beq.n	800bb4c <get_tag_insert+0x9c>
 800baf6:	4b49      	ldr	r3, [pc, #292]	; (800bc1c <get_tag_insert+0x16c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d026      	beq.n	800bb4c <get_tag_insert+0x9c>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800bafe:	2300      	movs	r3, #0
 800bb00:	617b      	str	r3, [r7, #20]
 800bb02:	e01e      	b.n	800bb42 <get_tag_insert+0x92>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	f103 0012 	add.w	r0, r3, #18
 800bb0a:	4b43      	ldr	r3, [pc, #268]	; (800bc18 <get_tag_insert+0x168>)
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	4413      	add	r3, r2
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4619      	mov	r1, r3
 800bb18:	f7f4 fb6a 	bl	80001f0 <strcmp>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d10c      	bne.n	800bb3c <get_tag_insert+0x8c>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800bb22:	4b3c      	ldr	r3, [pc, #240]	; (800bc14 <get_tag_insert+0x164>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	f102 011b 	add.w	r1, r2, #27
 800bb2c:	22c0      	movs	r2, #192	; 0xc0
 800bb2e:	6978      	ldr	r0, [r7, #20]
 800bb30:	4798      	blx	r3
 800bb32:	4603      	mov	r3, r0
 800bb34:	461a      	mov	r2, r3
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	81da      	strh	r2, [r3, #14]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800bb3a:	e060      	b.n	800bbfe <get_tag_insert+0x14e>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	617b      	str	r3, [r7, #20]
 800bb42:	4b36      	ldr	r3, [pc, #216]	; (800bc1c <get_tag_insert+0x16c>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	697a      	ldr	r2, [r7, #20]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	dbdb      	blt.n	800bb04 <get_tag_insert+0x54>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	3312      	adds	r3, #18
 800bb50:	4618      	mov	r0, r3
 800bb52:	f7f4 fb57 	bl	8000204 <strlen>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2ba6      	cmp	r3, #166	; 0xa6
 800bb5a:	d818      	bhi.n	800bb8e <get_tag_insert+0xde>
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	3312      	adds	r3, #18
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7f4 fb4f 	bl	8000204 <strlen>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b09      	cmp	r3, #9
 800bb6a:	d810      	bhi.n	800bb8e <get_tag_insert+0xde>
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	3312      	adds	r3, #18
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7f4 fb47 	bl	8000204 <strlen>
 800bb76:	4603      	mov	r3, r0
 800bb78:	2ba6      	cmp	r3, #166	; 0xa6
 800bb7a:	d806      	bhi.n	800bb8a <get_tag_insert+0xda>
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	3312      	adds	r3, #18
 800bb80:	4618      	mov	r0, r3
 800bb82:	f7f4 fb3f 	bl	8000204 <strlen>
 800bb86:	4603      	mov	r3, r0
 800bb88:	e002      	b.n	800bb90 <get_tag_insert+0xe0>
 800bb8a:	23a7      	movs	r3, #167	; 0xa7
 800bb8c:	e000      	b.n	800bb90 <get_tag_insert+0xe0>
 800bb8e:	2309      	movs	r3, #9
 800bb90:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	331b      	adds	r3, #27
 800bb96:	2212      	movs	r2, #18
 800bb98:	4921      	ldr	r1, [pc, #132]	; (800bc20 <get_tag_insert+0x170>)
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f00e f99f 	bl	8019ede <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	3312      	adds	r3, #18
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	4619      	mov	r1, r3
 800bbae:	f00e f996 	bl	8019ede <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	3312      	adds	r3, #18
 800bbb6:	3318      	adds	r3, #24
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	4413      	add	r3, r2
 800bbbc:	3303      	adds	r3, #3
 800bbbe:	2207      	movs	r2, #7
 800bbc0:	4918      	ldr	r1, [pc, #96]	; (800bc24 <get_tag_insert+0x174>)
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f00e f98b 	bl	8019ede <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	3319      	adds	r3, #25
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	4413      	add	r3, r2
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	331b      	adds	r3, #27
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7f4 fb13 	bl	8000204 <strlen>
 800bbde:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbe6:	d306      	bcc.n	800bbf6 <get_tag_insert+0x146>
 800bbe8:	4b06      	ldr	r3, [pc, #24]	; (800bc04 <get_tag_insert+0x154>)
 800bbea:	f240 323f 	movw	r2, #831	; 0x33f
 800bbee:	490e      	ldr	r1, [pc, #56]	; (800bc28 <get_tag_insert+0x178>)
 800bbf0:	4806      	ldr	r0, [pc, #24]	; (800bc0c <get_tag_insert+0x15c>)
 800bbf2:	f00e f9a1 	bl	8019f38 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	b29a      	uxth	r2, r3
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	81da      	strh	r2, [r3, #14]
}
 800bbfe:	3718      	adds	r7, #24
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	0801befc 	.word	0x0801befc
 800bc08:	0801bf6c 	.word	0x0801bf6c
 800bc0c:	0801bf44 	.word	0x0801bf44
 800bc10:	0801bf78 	.word	0x0801bf78
 800bc14:	20010294 	.word	0x20010294
 800bc18:	2001029c 	.word	0x2001029c
 800bc1c:	20010298 	.word	0x20010298
 800bc20:	0801bf84 	.word	0x0801bf84
 800bc24:	0801bf98 	.word	0x0801bf98
 800bc28:	0801bfa0 	.word	0x0801bfa0

0800bc2c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d105      	bne.n	800bc4a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800bc3e:	6839      	ldr	r1, [r7, #0]
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f7ff ff28 	bl	800ba96 <http_eof>
    return 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	e016      	b.n	800bc78 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	695b      	ldr	r3, [r3, #20]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7ff fdda 	bl	800b808 <fs_bytes_left>
 800bc54:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	dc05      	bgt.n	800bc68 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7ff ff19 	bl	800ba96 <http_eof>
    return 0;
 800bc64:	2300      	movs	r3, #0
 800bc66:	e007      	b.n	800bc78 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800bc68:	4b05      	ldr	r3, [pc, #20]	; (800bc80 <http_check_eof+0x54>)
 800bc6a:	f240 429d 	movw	r2, #1181	; 0x49d
 800bc6e:	4905      	ldr	r1, [pc, #20]	; (800bc84 <http_check_eof+0x58>)
 800bc70:	4805      	ldr	r0, [pc, #20]	; (800bc88 <http_check_eof+0x5c>)
 800bc72:	f00e f961 	bl	8019f38 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800bc76:	2301      	movs	r3, #1
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	0801befc 	.word	0x0801befc
 800bc84:	0801bfb0 	.word	0x0801bfb0
 800bc88:	0801bf44 	.word	0x0801bf44

0800bc8c <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800bc96:	2300      	movs	r3, #0
 800bc98:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc9e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d803      	bhi.n	800bcae <http_send_data_nonssi+0x22>
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	e001      	b.n	800bcb2 <http_send_data_nonssi+0x26>
 800bcae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bcb2:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	6999      	ldr	r1, [r3, #24]
 800bcb8:	f107 020c 	add.w	r2, r7, #12
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7ff fe30 	bl	800b924 <http_write>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800bcc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10d      	bne.n	800bcec <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	89ba      	ldrh	r2, [r7, #12]
 800bcda:	441a      	add	r2, r3
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	89ba      	ldrh	r2, [r7, #12]
 800bce6:	1a9a      	subs	r2, r3, r2
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
	...

0800bcf8 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800bd02:	2300      	movs	r3, #0
 800bd04:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800bd06:	2300      	movs	r3, #0
 800bd08:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd0e:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d106      	bne.n	800bd24 <http_send_data_ssi+0x2c>
 800bd16:	4b9e      	ldr	r3, [pc, #632]	; (800bf90 <http_send_data_ssi+0x298>)
 800bd18:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800bd1c:	499d      	ldr	r1, [pc, #628]	; (800bf94 <http_send_data_ssi+0x29c>)
 800bd1e:	489e      	ldr	r0, [pc, #632]	; (800bf98 <http_send_data_ssi+0x2a0>)
 800bd20:	f00e f90a 	bl	8019f38 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bd2a:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	f240 8270 	bls.w	800c21a <http_send_data_ssi+0x522>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	dc07      	bgt.n	800bd5e <http_send_data_ssi+0x66>
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	461a      	mov	r2, r3
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	e001      	b.n	800bd62 <http_send_data_ssi+0x6a>
 800bd5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd62:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	6999      	ldr	r1, [r3, #24]
 800bd68:	f107 020e 	add.w	r2, r7, #14
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f7ff fdd8 	bl	800b924 <http_write>
 800bd74:	4603      	mov	r3, r0
 800bd76:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800bd78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d10d      	bne.n	800bd9c <http_send_data_ssi+0xa4>
      data_to_send = 1;
 800bd80:	2301      	movs	r3, #1
 800bd82:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	89fa      	ldrh	r2, [r7, #14]
 800bd8a:	441a      	add	r2, r3
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd94:	89fa      	ldrh	r2, [r7, #14]
 800bd96:	1a9a      	subs	r2, r3, r2
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f040 8239 	bne.w	800c21a <http_send_data_ssi+0x522>
      return data_to_send;
 800bda8:	7dbb      	ldrb	r3, [r7, #22]
 800bdaa:	e281      	b.n	800c2b0 <http_send_data_ssi+0x5b8>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800bdac:	89fb      	ldrh	r3, [r7, #14]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d101      	bne.n	800bdb6 <http_send_data_ssi+0xbe>
      return data_to_send;
 800bdb2:	7dbb      	ldrb	r3, [r7, #22]
 800bdb4:	e27c      	b.n	800c2b0 <http_send_data_ssi+0x5b8>
    }
    switch (ssi->tag_state) {
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800bdbc:	2b04      	cmp	r3, #4
 800bdbe:	f200 822b 	bhi.w	800c218 <http_send_data_ssi+0x520>
 800bdc2:	a201      	add	r2, pc, #4	; (adr r2, 800bdc8 <http_send_data_ssi+0xd0>)
 800bdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc8:	0800bddd 	.word	0x0800bddd
 800bdcc:	0800be2f 	.word	0x0800be2f
 800bdd0:	0800bea1 	.word	0x0800bea1
 800bdd4:	0800bfef 	.word	0x0800bfef
 800bdd8:	0800c13b 	.word	0x0800c13b
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800bddc:	2300      	movs	r3, #0
 800bdde:	757b      	strb	r3, [r7, #21]
 800bde0:	e017      	b.n	800be12 <http_send_data_ssi+0x11a>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	781a      	ldrb	r2, [r3, #0]
 800bde8:	7d7b      	ldrb	r3, [r7, #21]
 800bdea:	496c      	ldr	r1, [pc, #432]	; (800bf9c <http_send_data_ssi+0x2a4>)
 800bdec:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d10a      	bne.n	800be0c <http_send_data_ssi+0x114>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	7d7a      	ldrb	r2, [r7, #21]
 800bdfa:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	2201      	movs	r2, #1
 800be08:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800be0a:	e005      	b.n	800be18 <http_send_data_ssi+0x120>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800be0c:	7d7b      	ldrb	r3, [r7, #21]
 800be0e:	3301      	adds	r3, #1
 800be10:	757b      	strb	r3, [r7, #21]
 800be12:	7d7b      	ldrb	r3, [r7, #21]
 800be14:	2b01      	cmp	r3, #1
 800be16:	d9e4      	bls.n	800bde2 <http_send_data_ssi+0xea>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	1e5a      	subs	r2, r3, #1
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	1c5a      	adds	r2, r3, #1
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	601a      	str	r2, [r3, #0]
        break;
 800be2c:	e1f5      	b.n	800c21a <http_send_data_ssi+0x522>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	7c1b      	ldrb	r3, [r3, #16]
 800be32:	461a      	mov	r2, r3
 800be34:	4b59      	ldr	r3, [pc, #356]	; (800bf9c <http_send_data_ssi+0x2a4>)
 800be36:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	8992      	ldrh	r2, [r2, #12]
 800be3e:	4413      	add	r3, r2
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d107      	bne.n	800be56 <http_send_data_ssi+0x15e>
          ssi->tag_index = 0;
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	2200      	movs	r2, #0
 800be4a:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	2202      	movs	r2, #2
 800be50:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800be54:	e1e1      	b.n	800c21a <http_send_data_ssi+0x522>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	781a      	ldrb	r2, [r3, #0]
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	7c1b      	ldrb	r3, [r3, #16]
 800be60:	4619      	mov	r1, r3
 800be62:	4b4e      	ldr	r3, [pc, #312]	; (800bf9c <http_send_data_ssi+0x2a4>)
 800be64:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800be68:	6939      	ldr	r1, [r7, #16]
 800be6a:	8989      	ldrh	r1, [r1, #12]
 800be6c:	440b      	add	r3, r1
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	429a      	cmp	r2, r3
 800be72:	d106      	bne.n	800be82 <http_send_data_ssi+0x18a>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	899b      	ldrh	r3, [r3, #12]
 800be78:	3301      	adds	r3, #1
 800be7a:	b29a      	uxth	r2, r3
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	819a      	strh	r2, [r3, #12]
 800be80:	e003      	b.n	800be8a <http_send_data_ssi+0x192>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	1e5a      	subs	r2, r3, #1
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	1c5a      	adds	r2, r3, #1
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	601a      	str	r2, [r3, #0]
        }
        break;
 800be9e:	e1bc      	b.n	800c21a <http_send_data_ssi+0x522>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	899b      	ldrh	r3, [r3, #12]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d11e      	bne.n	800bee6 <http_send_data_ssi+0x1ee>
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	2b20      	cmp	r3, #32
 800beb0:	d00e      	beq.n	800bed0 <http_send_data_ssi+0x1d8>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800beb8:	2b09      	cmp	r3, #9
 800beba:	d009      	beq.n	800bed0 <http_send_data_ssi+0x1d8>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	2b0a      	cmp	r3, #10
 800bec4:	d004      	beq.n	800bed0 <http_send_data_ssi+0x1d8>
                                      (*ssi->parsed == '\r'))) {
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800becc:	2b0d      	cmp	r3, #13
 800bece:	d10a      	bne.n	800bee6 <http_send_data_ssi+0x1ee>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	1e5a      	subs	r2, r3, #1
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	1c5a      	adds	r2, r3, #1
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	601a      	str	r2, [r3, #0]
          break;
 800bee4:	e199      	b.n	800c21a <http_send_data_ssi+0x522>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	781a      	ldrb	r2, [r3, #0]
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	7c1b      	ldrb	r3, [r3, #16]
 800bef0:	492a      	ldr	r1, [pc, #168]	; (800bf9c <http_send_data_ssi+0x2a4>)
 800bef2:	00db      	lsls	r3, r3, #3
 800bef4:	440b      	add	r3, r1
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	429a      	cmp	r2, r3
 800befc:	d013      	beq.n	800bf26 <http_send_data_ssi+0x22e>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800bf04:	2b20      	cmp	r3, #32
 800bf06:	d00e      	beq.n	800bf26 <http_send_data_ssi+0x22e>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	2b09      	cmp	r3, #9
 800bf10:	d009      	beq.n	800bf26 <http_send_data_ssi+0x22e>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800bf18:	2b0a      	cmp	r3, #10
 800bf1a:	d004      	beq.n	800bf26 <http_send_data_ssi+0x22e>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	2b0d      	cmp	r3, #13
 800bf24:	d142      	bne.n	800bfac <http_send_data_ssi+0x2b4>

          if (ssi->tag_index == 0) {
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	899b      	ldrh	r3, [r3, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d104      	bne.n	800bf38 <http_send_data_ssi+0x240>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800bf2e:	693b      	ldr	r3, [r7, #16]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 800bf36:	e04f      	b.n	800bfd8 <http_send_data_ssi+0x2e0>
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	2203      	movs	r2, #3
 800bf3c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	899b      	ldrh	r3, [r3, #12]
 800bf44:	2bff      	cmp	r3, #255	; 0xff
 800bf46:	d906      	bls.n	800bf56 <http_send_data_ssi+0x25e>
 800bf48:	4b11      	ldr	r3, [pc, #68]	; (800bf90 <http_send_data_ssi+0x298>)
 800bf4a:	f240 523a 	movw	r2, #1338	; 0x53a
 800bf4e:	4914      	ldr	r1, [pc, #80]	; (800bfa0 <http_send_data_ssi+0x2a8>)
 800bf50:	4811      	ldr	r0, [pc, #68]	; (800bf98 <http_send_data_ssi+0x2a0>)
 800bf52:	f00d fff1 	bl	8019f38 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800bf56:	693b      	ldr	r3, [r7, #16]
 800bf58:	899b      	ldrh	r3, [r3, #12]
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	899b      	ldrh	r3, [r3, #12]
 800bf64:	461a      	mov	r2, r3
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	4413      	add	r3, r2
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	781a      	ldrb	r2, [r3, #0]
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	7c1b      	ldrb	r3, [r3, #16]
 800bf78:	4908      	ldr	r1, [pc, #32]	; (800bf9c <http_send_data_ssi+0x2a4>)
 800bf7a:	00db      	lsls	r3, r3, #3
 800bf7c:	440b      	add	r3, r1
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d10e      	bne.n	800bfa4 <http_send_data_ssi+0x2ac>
              ssi->tag_index = 1;
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	2201      	movs	r2, #1
 800bf8a:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800bf8c:	e024      	b.n	800bfd8 <http_send_data_ssi+0x2e0>
 800bf8e:	bf00      	nop
 800bf90:	0801befc 	.word	0x0801befc
 800bf94:	0801bf78 	.word	0x0801bf78
 800bf98:	0801bf44 	.word	0x0801bf44
 800bf9c:	08040144 	.word	0x08040144
 800bfa0:	0801bfe8 	.word	0x0801bfe8
            } else {
              ssi->tag_index = 0;
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800bfaa:	e015      	b.n	800bfd8 <http_send_data_ssi+0x2e0>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	899b      	ldrh	r3, [r3, #12]
 800bfb0:	2b07      	cmp	r3, #7
 800bfb2:	d80d      	bhi.n	800bfd0 <http_send_data_ssi+0x2d8>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	899b      	ldrh	r3, [r3, #12]
 800bfbc:	1c59      	adds	r1, r3, #1
 800bfbe:	b288      	uxth	r0, r1
 800bfc0:	6939      	ldr	r1, [r7, #16]
 800bfc2:	8188      	strh	r0, [r1, #12]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	7812      	ldrb	r2, [r2, #0]
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	440b      	add	r3, r1
 800bfcc:	749a      	strb	r2, [r3, #18]
 800bfce:	e003      	b.n	800bfd8 <http_send_data_ssi+0x2e0>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	1e5a      	subs	r2, r3, #1
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800bfe2:	693b      	ldr	r3, [r7, #16]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	1c5a      	adds	r2, r3, #1
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	601a      	str	r2, [r3, #0]

        break;
 800bfec:	e115      	b.n	800c21a <http_send_data_ssi+0x522>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	899b      	ldrh	r3, [r3, #12]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d11e      	bne.n	800c034 <http_send_data_ssi+0x33c>
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	2b20      	cmp	r3, #32
 800bffe:	d00e      	beq.n	800c01e <http_send_data_ssi+0x326>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800c006:	2b09      	cmp	r3, #9
 800c008:	d009      	beq.n	800c01e <http_send_data_ssi+0x326>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	2b0a      	cmp	r3, #10
 800c012:	d004      	beq.n	800c01e <http_send_data_ssi+0x326>
                                      (*ssi->parsed == '\r'))) {
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800c01a:	2b0d      	cmp	r3, #13
 800c01c:	d10a      	bne.n	800c034 <http_send_data_ssi+0x33c>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	1e5a      	subs	r2, r3, #1
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	1c5a      	adds	r2, r3, #1
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	601a      	str	r2, [r3, #0]
          break;
 800c032:	e0f2      	b.n	800c21a <http_send_data_ssi+0x522>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	781a      	ldrb	r2, [r3, #0]
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	7c1b      	ldrb	r3, [r3, #16]
 800c03e:	499e      	ldr	r1, [pc, #632]	; (800c2b8 <http_send_data_ssi+0x5c0>)
 800c040:	00db      	lsls	r3, r3, #3
 800c042:	440b      	add	r3, r1
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	6939      	ldr	r1, [r7, #16]
 800c048:	8989      	ldrh	r1, [r1, #12]
 800c04a:	440b      	add	r3, r1
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d164      	bne.n	800c11c <http_send_data_ssi+0x424>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	1e5a      	subs	r2, r3, #1
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	1c5a      	adds	r2, r3, #1
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	899b      	ldrh	r3, [r3, #12]
 800c06a:	3301      	adds	r3, #1
 800c06c:	b29a      	uxth	r2, r3
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	7c1b      	ldrb	r3, [r3, #16]
 800c076:	4a90      	ldr	r2, [pc, #576]	; (800c2b8 <http_send_data_ssi+0x5c0>)
 800c078:	00db      	lsls	r3, r3, #3
 800c07a:	4413      	add	r3, r2
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	8992      	ldrh	r2, [r2, #12]
 800c082:	4413      	add	r3, r2
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	f040 80c7 	bne.w	800c21a <http_send_data_ssi+0x522>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800c08c:	6838      	ldr	r0, [r7, #0]
 800c08e:	f7ff fd0f 	bl	800bab0 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	2200      	movs	r2, #0
 800c096:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	2204      	movs	r2, #4
 800c09c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	685a      	ldr	r2, [r3, #4]
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	699b      	ldr	r3, [r3, #24]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	f240 80b2 	bls.w	800c21a <http_send_data_ssi+0x522>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	699b      	ldr	r3, [r3, #24]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	dc07      	bgt.n	800c0da <http_send_data_ssi+0x3e2>
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	699b      	ldr	r3, [r3, #24]
 800c0d4:	1ad3      	subs	r3, r2, r3
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	e001      	b.n	800c0de <http_send_data_ssi+0x3e6>
 800c0da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0de:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	6999      	ldr	r1, [r3, #24]
 800c0e4:	f107 020e 	add.w	r2, r7, #14
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f7ff fc1a 	bl	800b924 <http_write>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800c0f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f040 808e 	bne.w	800c21a <http_send_data_ssi+0x522>
                data_to_send = 1;
 800c0fe:	2301      	movs	r3, #1
 800c100:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	699b      	ldr	r3, [r3, #24]
 800c106:	89fa      	ldrh	r2, [r7, #14]
 800c108:	441a      	add	r2, r3
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c112:	89fa      	ldrh	r2, [r7, #14]
 800c114:	1a9a      	subs	r2, r3, r2
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	625a      	str	r2, [r3, #36]	; 0x24
 800c11a:	e07e      	b.n	800c21a <http_send_data_ssi+0x522>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	1e5a      	subs	r2, r3, #1
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	1c5a      	adds	r2, r3, #1
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	2200      	movs	r2, #0
 800c134:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 800c138:	e06f      	b.n	800c21a <http_send_data_ssi+0x522>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	685a      	ldr	r2, [r3, #4]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	699b      	ldr	r3, [r3, #24]
 800c142:	429a      	cmp	r2, r3
 800c144:	d937      	bls.n	800c1b6 <http_send_data_ssi+0x4be>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	685b      	ldr	r3, [r3, #4]
 800c14a:	461a      	mov	r2, r3
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	1ad3      	subs	r3, r2, r3
 800c152:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c156:	4293      	cmp	r3, r2
 800c158:	dc07      	bgt.n	800c16a <http_send_data_ssi+0x472>
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	461a      	mov	r2, r3
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	699b      	ldr	r3, [r3, #24]
 800c164:	1ad3      	subs	r3, r2, r3
 800c166:	b29b      	uxth	r3, r3
 800c168:	e001      	b.n	800c16e <http_send_data_ssi+0x476>
 800c16a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c16e:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800c170:	89fb      	ldrh	r3, [r7, #14]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00a      	beq.n	800c18c <http_send_data_ssi+0x494>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	6999      	ldr	r1, [r3, #24]
 800c17a:	f107 020e 	add.w	r2, r7, #14
 800c17e:	2300      	movs	r3, #0
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7ff fbcf 	bl	800b924 <http_write>
 800c186:	4603      	mov	r3, r0
 800c188:	75fb      	strb	r3, [r7, #23]
 800c18a:	e001      	b.n	800c190 <http_send_data_ssi+0x498>
          } else {
            err = ERR_OK;
 800c18c:	2300      	movs	r3, #0
 800c18e:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800c190:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d140      	bne.n	800c21a <http_send_data_ssi+0x522>
            data_to_send = 1;
 800c198:	2301      	movs	r3, #1
 800c19a:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	699b      	ldr	r3, [r3, #24]
 800c1a0:	89fa      	ldrh	r2, [r7, #14]
 800c1a2:	441a      	add	r2, r3
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ac:	89fa      	ldrh	r2, [r7, #14]
 800c1ae:	1a9a      	subs	r2, r3, r2
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	625a      	str	r2, [r3, #36]	; 0x24
 800c1b4:	e031      	b.n	800c21a <http_send_data_ssi+0x522>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	899a      	ldrh	r2, [r3, #12]
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	89db      	ldrh	r3, [r3, #14]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d222      	bcs.n	800c208 <http_send_data_ssi+0x510>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	89da      	ldrh	r2, [r3, #14]
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	899b      	ldrh	r3, [r3, #12]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	899b      	ldrh	r3, [r3, #12]
 800c1d4:	3318      	adds	r3, #24
 800c1d6:	693a      	ldr	r2, [r7, #16]
 800c1d8:	4413      	add	r3, r2
 800c1da:	1cd9      	adds	r1, r3, #3
 800c1dc:	f107 020e 	add.w	r2, r7, #14
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f7ff fb9e 	bl	800b924 <http_write>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800c1ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d112      	bne.n	800c21a <http_send_data_ssi+0x522>
              data_to_send = 1;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	899a      	ldrh	r2, [r3, #12]
 800c1fc:	89fb      	ldrh	r3, [r7, #14]
 800c1fe:	4413      	add	r3, r2
 800c200:	b29a      	uxth	r2, r3
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	819a      	strh	r2, [r3, #12]
 800c206:	e008      	b.n	800c21a <http_send_data_ssi+0x522>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	2200      	movs	r2, #0
 800c20c:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	2200      	movs	r2, #0
 800c212:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800c216:	e000      	b.n	800c21a <http_send_data_ssi+0x522>
        default:
          break;
 800c218:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800c220:	2b04      	cmp	r3, #4
 800c222:	d003      	beq.n	800c22c <http_send_data_ssi+0x534>
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	689b      	ldr	r3, [r3, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d004      	beq.n	800c236 <http_send_data_ssi+0x53e>
 800c22c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c230:	2b00      	cmp	r3, #0
 800c232:	f43f adbb 	beq.w	800bdac <http_send_data_ssi+0xb4>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800c23c:	2b04      	cmp	r3, #4
 800c23e:	d036      	beq.n	800c2ae <http_send_data_ssi+0x5b6>
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	699b      	ldr	r3, [r3, #24]
 800c248:	429a      	cmp	r2, r3
 800c24a:	d930      	bls.n	800c2ae <http_send_data_ssi+0x5b6>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	461a      	mov	r2, r3
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	1ad3      	subs	r3, r2, r3
 800c258:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c25c:	4293      	cmp	r3, r2
 800c25e:	dc07      	bgt.n	800c270 <http_send_data_ssi+0x578>
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	461a      	mov	r2, r3
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	1ad3      	subs	r3, r2, r3
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	e001      	b.n	800c274 <http_send_data_ssi+0x57c>
 800c270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c274:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	6999      	ldr	r1, [r3, #24]
 800c27a:	f107 020e 	add.w	r2, r7, #14
 800c27e:	2300      	movs	r3, #0
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f7ff fb4f 	bl	800b924 <http_write>
 800c286:	4603      	mov	r3, r0
 800c288:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800c28a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10d      	bne.n	800c2ae <http_send_data_ssi+0x5b6>
      data_to_send = 1;
 800c292:	2301      	movs	r3, #1
 800c294:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	89fa      	ldrh	r2, [r7, #14]
 800c29c:	441a      	add	r2, r3
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a6:	89fa      	ldrh	r2, [r7, #14]
 800c2a8:	1a9a      	subs	r2, r3, r2
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800c2ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3718      	adds	r7, #24
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	08040144 	.word	0x08040144

0800c2bc <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d101      	bne.n	800c2d4 <http_send+0x18>
    return 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	e030      	b.n	800c336 <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d108      	bne.n	800c2ee <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7ff fca4 	bl	800bc2c <http_check_eof>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d101      	bne.n	800c2ee <http_send+0x32>
      return 0;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e023      	b.n	800c336 <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d006      	beq.n	800c304 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7ff fcfd 	bl	800bcf8 <http_send_data_ssi>
 800c2fe:	4603      	mov	r3, r0
 800c300:	73fb      	strb	r3, [r7, #15]
 800c302:	e005      	b.n	800c310 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7ff fcc0 	bl	800bc8c <http_send_data_nonssi>
 800c30c:	4603      	mov	r3, r0
 800c30e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c314:	2b00      	cmp	r3, #0
 800c316:	d10d      	bne.n	800c334 <http_send+0x78>
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	695b      	ldr	r3, [r3, #20]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7ff fa73 	bl	800b808 <fs_bytes_left>
 800c322:	4603      	mov	r3, r0
 800c324:	2b00      	cmp	r3, #0
 800c326:	dc05      	bgt.n	800c334 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800c328:	6839      	ldr	r1, [r7, #0]
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7ff fbb3 	bl	800ba96 <http_eof>
    return 0;
 800c330:	2300      	movs	r3, #0
 800c332:	e000      	b.n	800c336 <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800c334:	7bfb      	ldrb	r3, [r7, #15]
}
 800c336:	4618      	mov	r0, r3
 800c338:	3710      	adds	r7, #16
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}
	...

0800c340 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	4a1c      	ldr	r2, [pc, #112]	; (800c3c0 <http_get_404_file+0x80>)
 800c34e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4619      	mov	r1, r3
 800c358:	4610      	mov	r0, r2
 800c35a:	f7ff fa0d 	bl	800b778 <fs_open>
 800c35e:	4603      	mov	r3, r0
 800c360:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d024      	beq.n	800c3b4 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	4a15      	ldr	r2, [pc, #84]	; (800c3c4 <http_get_404_file+0x84>)
 800c36e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4619      	mov	r1, r3
 800c378:	4610      	mov	r0, r2
 800c37a:	f7ff f9fd 	bl	800b778 <fs_open>
 800c37e:	4603      	mov	r3, r0
 800c380:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d014      	beq.n	800c3b4 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	4a0e      	ldr	r2, [pc, #56]	; (800c3c8 <http_get_404_file+0x88>)
 800c38e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	4619      	mov	r1, r3
 800c398:	4610      	mov	r0, r2
 800c39a:	f7ff f9ed 	bl	800b778 <fs_open>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800c3a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d004      	beq.n	800c3b4 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	601a      	str	r2, [r3, #0]
        return NULL;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	e000      	b.n	800c3b6 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800c3b4:	687b      	ldr	r3, [r7, #4]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	0801c000 	.word	0x0801c000
 800c3c4:	0801c00c 	.word	0x0801c00c
 800c3c8:	0801c018 	.word	0x0801c018

0800c3cc <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08e      	sub	sp, #56	; 0x38
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d106      	bne.n	800c3f0 <http_parse_request+0x24>
 800c3e2:	4b65      	ldr	r3, [pc, #404]	; (800c578 <http_parse_request+0x1ac>)
 800c3e4:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800c3e8:	4964      	ldr	r1, [pc, #400]	; (800c57c <http_parse_request+0x1b0>)
 800c3ea:	4865      	ldr	r0, [pc, #404]	; (800c580 <http_parse_request+0x1b4>)
 800c3ec:	f00d fda4 	bl	8019f38 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d106      	bne.n	800c404 <http_parse_request+0x38>
 800c3f6:	4b60      	ldr	r3, [pc, #384]	; (800c578 <http_parse_request+0x1ac>)
 800c3f8:	f240 72af 	movw	r2, #1967	; 0x7af
 800c3fc:	4961      	ldr	r1, [pc, #388]	; (800c584 <http_parse_request+0x1b8>)
 800c3fe:	4860      	ldr	r0, [pc, #384]	; (800c580 <http_parse_request+0x1b4>)
 800c400:	f00d fd9a 	bl	8019f38 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d103      	bne.n	800c414 <http_parse_request+0x48>
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	699b      	ldr	r3, [r3, #24]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d002      	beq.n	800c41a <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800c414:	f06f 0307 	mvn.w	r3, #7
 800c418:	e0aa      	b.n	800c570 <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	6a1b      	ldr	r3, [r3, #32]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d103      	bne.n	800c42a <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c426:	621a      	str	r2, [r3, #32]
 800c428:	e005      	b.n	800c436 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c430:	4618      	mov	r0, r3
 800c432:	f002 f911 	bl	800e658 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800c436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c438:	f002 f8e6 	bl	800e608 <pbuf_ref>

  if (hs->req->next != NULL) {
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	6a1b      	ldr	r3, [r3, #32]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d012      	beq.n	800c46c <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	6a1b      	ldr	r3, [r3, #32]
 800c44a:	891b      	ldrh	r3, [r3, #8]
 800c44c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c450:	4293      	cmp	r3, r2
 800c452:	bf28      	it	cs
 800c454:	4613      	movcs	r3, r2
 800c456:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	6a18      	ldr	r0, [r3, #32]
 800c45c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800c45e:	2300      	movs	r3, #0
 800c460:	4949      	ldr	r1, [pc, #292]	; (800c588 <http_parse_request+0x1bc>)
 800c462:	f002 fa31 	bl	800e8c8 <pbuf_copy_partial>
    data = httpd_req_buf;
 800c466:	4b48      	ldr	r3, [pc, #288]	; (800c588 <http_parse_request+0x1bc>)
 800c468:	637b      	str	r3, [r7, #52]	; 0x34
 800c46a:	e005      	b.n	800c478 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800c46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800c472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c474:	895b      	ldrh	r3, [r3, #10]
 800c476:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800c478:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c47a:	2b06      	cmp	r3, #6
 800c47c:	d963      	bls.n	800c546 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800c47e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c480:	461a      	mov	r2, r3
 800c482:	4942      	ldr	r1, [pc, #264]	; (800c58c <http_parse_request+0x1c0>)
 800c484:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c486:	f000 fc29 	bl	800ccdc <lwip_strnstr>
 800c48a:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800c48c:	6a3b      	ldr	r3, [r7, #32]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d059      	beq.n	800c546 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800c492:	2300      	movs	r3, #0
 800c494:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800c496:	2204      	movs	r2, #4
 800c498:	493d      	ldr	r1, [pc, #244]	; (800c590 <http_parse_request+0x1c4>)
 800c49a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c49c:	f00d fdcd 	bl	801a03a <strncmp>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d117      	bne.n	800c4d6 <http_parse_request+0x10a>
        sp1 = data + 3;
 800c4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a8:	3303      	adds	r3, #3
 800c4aa:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800c4ac:	69fb      	ldr	r3, [r7, #28]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	461a      	mov	r2, r3
 800c4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800c4ba:	1ad3      	subs	r3, r2, r3
 800c4bc:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	8b7a      	ldrh	r2, [r7, #26]
 800c4c4:	4933      	ldr	r1, [pc, #204]	; (800c594 <http_parse_request+0x1c8>)
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 fc08 	bl	800ccdc <lwip_strnstr>
 800c4cc:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800c4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d111      	bne.n	800c4f8 <http_parse_request+0x12c>
 800c4d4:	e006      	b.n	800c4e4 <http_parse_request+0x118>
        data[4] = 0;
 800c4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4d8:	3304      	adds	r3, #4
 800c4da:	2200      	movs	r2, #0
 800c4dc:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800c4de:	f06f 030f 	mvn.w	r3, #15
 800c4e2:	e045      	b.n	800c570 <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	8b7a      	ldrh	r2, [r7, #26]
 800c4ea:	4928      	ldr	r1, [pc, #160]	; (800c58c <http_parse_request+0x1c0>)
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f000 fbf5 	bl	800ccdc <lwip_strnstr>
 800c4f2:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800c4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4fa:	69fa      	ldr	r2, [r7, #28]
 800c4fc:	3201      	adds	r2, #1
 800c4fe:	1a9b      	subs	r3, r3, r2
 800c500:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800c502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c504:	2b00      	cmp	r3, #0
 800c506:	d01e      	beq.n	800c546 <http_parse_request+0x17a>
 800c508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d91a      	bls.n	800c546 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800c510:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c512:	461a      	mov	r2, r3
 800c514:	4920      	ldr	r1, [pc, #128]	; (800c598 <http_parse_request+0x1cc>)
 800c516:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c518:	f000 fbe0 	bl	800ccdc <lwip_strnstr>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d011      	beq.n	800c546 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	3301      	adds	r3, #1
 800c526:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	2200      	movs	r2, #0
 800c52c:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800c52e:	8b3b      	ldrh	r3, [r7, #24]
 800c530:	697a      	ldr	r2, [r7, #20]
 800c532:	4413      	add	r3, r2
 800c534:	2200      	movs	r2, #0
 800c536:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800c538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c53a:	6979      	ldr	r1, [r7, #20]
 800c53c:	68b8      	ldr	r0, [r7, #8]
 800c53e:	f000 f87f 	bl	800c640 <http_find_file>
 800c542:	4603      	mov	r3, r0
 800c544:	e014      	b.n	800c570 <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	6a1b      	ldr	r3, [r3, #32]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f002 f844 	bl	800e5d8 <pbuf_clen>
 800c550:	4603      	mov	r3, r0
 800c552:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	6a1b      	ldr	r3, [r3, #32]
 800c558:	891b      	ldrh	r3, [r3, #8]
 800c55a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c55e:	d205      	bcs.n	800c56c <http_parse_request+0x1a0>
 800c560:	8a7b      	ldrh	r3, [r7, #18]
 800c562:	2b05      	cmp	r3, #5
 800c564:	d802      	bhi.n	800c56c <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800c566:	f06f 0304 	mvn.w	r3, #4
 800c56a:	e001      	b.n	800c570 <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800c56c:	f06f 030f 	mvn.w	r3, #15
  }
}
 800c570:	4618      	mov	r0, r3
 800c572:	3738      	adds	r7, #56	; 0x38
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	0801befc 	.word	0x0801befc
 800c57c:	0801c024 	.word	0x0801c024
 800c580:	0801bf44 	.word	0x0801bf44
 800c584:	0801bf6c 	.word	0x0801bf6c
 800c588:	2000fe54 	.word	0x2000fe54
 800c58c:	0801c030 	.word	0x0801c030
 800c590:	0801c034 	.word	0x0801c034
 800c594:	0801c03c 	.word	0x0801c03c
 800c598:	0801c040 	.word	0x0801c040

0800c59c <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b088      	sub	sp, #32
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d040      	beq.n	800c632 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800c5b4:	213f      	movs	r1, #63	; 0x3f
 800c5b6:	6838      	ldr	r0, [r7, #0]
 800c5b8:	f00d fd2a 	bl	801a010 <strchr>
 800c5bc:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d002      	beq.n	800c5ca <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	613b      	str	r3, [r7, #16]
    ext = uri;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800c5d2:	212e      	movs	r1, #46	; 0x2e
 800c5d4:	6938      	ldr	r0, [r7, #16]
 800c5d6:	f00d fd1b 	bl	801a010 <strchr>
 800c5da:	6138      	str	r0, [r7, #16]
 800c5dc:	e009      	b.n	800c5f2 <http_uri_is_ssi+0x56>
      ext = sub;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	617b      	str	r3, [r7, #20]
      sub++;
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800c5e8:	212e      	movs	r1, #46	; 0x2e
 800c5ea:	6938      	ldr	r0, [r7, #16]
 800c5ec:	f00d fd10 	bl	801a010 <strchr>
 800c5f0:	6138      	str	r0, [r7, #16]
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1f2      	bne.n	800c5de <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	61fb      	str	r3, [r7, #28]
 800c5fc:	e010      	b.n	800c620 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800c5fe:	4a0f      	ldr	r2, [pc, #60]	; (800c63c <http_uri_is_ssi+0xa0>)
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c606:	4619      	mov	r1, r3
 800c608:	6978      	ldr	r0, [r7, #20]
 800c60a:	f000 fb9d 	bl	800cd48 <lwip_stricmp>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d102      	bne.n	800c61a <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800c614:	2301      	movs	r3, #1
 800c616:	76fb      	strb	r3, [r7, #27]
        break;
 800c618:	e005      	b.n	800c626 <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800c61a:	69fb      	ldr	r3, [r7, #28]
 800c61c:	3301      	adds	r3, #1
 800c61e:	61fb      	str	r3, [r7, #28]
 800c620:	69fb      	ldr	r3, [r7, #28]
 800c622:	2b04      	cmp	r3, #4
 800c624:	d9eb      	bls.n	800c5fe <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <http_uri_is_ssi+0x96>
      *param = '?';
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	223f      	movs	r2, #63	; 0x3f
 800c630:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800c632:	7efb      	ldrb	r3, [r7, #27]
}
 800c634:	4618      	mov	r0, r3
 800c636:	3720      	adds	r7, #32
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}
 800c63c:	08040108 	.word	0x08040108

0800c640 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b092      	sub	sp, #72	; 0x48
 800c644:	af02      	add	r7, sp, #8
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800c64c:	2300      	movs	r3, #0
 800c64e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800c650:	2300      	movs	r3, #0
 800c652:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800c654:	2300      	movs	r3, #0
 800c656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7f3 fdd1 	bl	8000204 <strlen>
 800c662:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800c664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c666:	2b00      	cmp	r3, #0
 800c668:	d072      	beq.n	800c750 <http_find_file+0x110>
 800c66a:	68ba      	ldr	r2, [r7, #8]
 800c66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66e:	3b01      	subs	r3, #1
 800c670:	4413      	add	r3, r2
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	2b2f      	cmp	r3, #47	; 0x2f
 800c676:	d16b      	bne.n	800c750 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800c678:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800c67a:	4a61      	ldr	r2, [pc, #388]	; (800c800 <http_find_file+0x1c0>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d102      	bne.n	800c686 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800c680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c682:	2b01      	cmp	r3, #1
 800c684:	d164      	bne.n	800c750 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800c686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c688:	3b01      	subs	r3, #1
 800c68a:	2b3f      	cmp	r3, #63	; 0x3f
 800c68c:	bf28      	it	cs
 800c68e:	233f      	movcs	r3, #63	; 0x3f
 800c690:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800c692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c694:	2b00      	cmp	r3, #0
 800c696:	d00a      	beq.n	800c6ae <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c69c:	4619      	mov	r1, r3
 800c69e:	4858      	ldr	r0, [pc, #352]	; (800c800 <http_find_file+0x1c0>)
 800c6a0:	f00d fc1d 	bl	8019ede <memcpy>
      http_uri_buf[copy_len] = 0;
 800c6a4:	4a56      	ldr	r2, [pc, #344]	; (800c800 <http_find_file+0x1c0>)
 800c6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a8:	4413      	add	r3, r2
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6b2:	e04a      	b.n	800c74a <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d028      	beq.n	800c70c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6bc:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800c6c0:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800c6c2:	6a3b      	ldr	r3, [r7, #32]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d01e      	beq.n	800c706 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800c6c8:	4a4e      	ldr	r2, [pc, #312]	; (800c804 <http_find_file+0x1c4>)
 800c6ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f7f3 fd97 	bl	8000204 <strlen>
 800c6d6:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800c6d8:	69fa      	ldr	r2, [r7, #28]
 800c6da:	6a3b      	ldr	r3, [r7, #32]
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	bf28      	it	cs
 800c6e0:	4613      	movcs	r3, r2
 800c6e2:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	4a46      	ldr	r2, [pc, #280]	; (800c800 <http_find_file+0x1c0>)
 800c6e8:	1898      	adds	r0, r3, r2
 800c6ea:	4a46      	ldr	r2, [pc, #280]	; (800c804 <http_find_file+0x1c4>)
 800c6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c6f2:	69ba      	ldr	r2, [r7, #24]
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	f00d fbf2 	bl	8019ede <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800c6fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6fc:	69bb      	ldr	r3, [r7, #24]
 800c6fe:	4413      	add	r3, r2
 800c700:	4a3f      	ldr	r2, [pc, #252]	; (800c800 <http_find_file+0x1c0>)
 800c702:	2100      	movs	r1, #0
 800c704:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800c706:	4b3e      	ldr	r3, [pc, #248]	; (800c800 <http_find_file+0x1c0>)
 800c708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c70a:	e004      	b.n	800c716 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800c70c:	4a3d      	ldr	r2, [pc, #244]	; (800c804 <http_find_file+0x1c4>)
 800c70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c710:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c714:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7ff f82c 	bl	800b778 <fs_open>
 800c720:	4603      	mov	r3, r0
 800c722:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800c724:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10b      	bne.n	800c744 <http_find_file+0x104>
        uri = file_name;
 800c72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800c734:	4a33      	ldr	r2, [pc, #204]	; (800c804 <http_find_file+0x1c4>)
 800c736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c738:	00db      	lsls	r3, r3, #3
 800c73a:	4413      	add	r3, r2
 800c73c:	791b      	ldrb	r3, [r3, #4]
 800c73e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif /* LWIP_HTTPD_SSI */
        break;
 800c742:	e005      	b.n	800c750 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800c744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c746:	3301      	adds	r3, #1
 800c748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c74c:	2b04      	cmp	r3, #4
 800c74e:	d9b1      	bls.n	800c6b4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800c750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c752:	2b00      	cmp	r3, #0
 800c754:	d139      	bne.n	800c7ca <http_find_file+0x18a>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	213f      	movs	r1, #63	; 0x3f
 800c75a:	4618      	mov	r0, r3
 800c75c:	f00d fc58 	bl	801a010 <strchr>
 800c760:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800c762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c764:	2b00      	cmp	r3, #0
 800c766:	d005      	beq.n	800c774 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800c768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c76a:	2200      	movs	r2, #0
 800c76c:	701a      	strb	r2, [r3, #0]
      params++;
 800c76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c770:	3301      	adds	r3, #1
 800c772:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	68ba      	ldr	r2, [r7, #8]
 800c778:	4611      	mov	r1, r2
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7fe fffc 	bl	800b778 <fs_open>
 800c780:	4603      	mov	r3, r0
 800c782:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800c784:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d102      	bne.n	800c792 <http_find_file+0x152>
      file = &hs->file_handle;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	63bb      	str	r3, [r7, #56]	; 0x38
 800c790:	e006      	b.n	800c7a0 <http_find_file+0x160>
    } else {
      file = http_get_404_file(hs, &uri);
 800c792:	f107 0308 	add.w	r3, r7, #8
 800c796:	4619      	mov	r1, r3
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f7ff fdd1 	bl	800c340 <http_get_404_file>
 800c79e:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800c7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d011      	beq.n	800c7ca <http_find_file+0x18a>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a8:	7c1b      	ldrb	r3, [r3, #16]
 800c7aa:	f003 0308 	and.w	r3, r3, #8
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d003      	beq.n	800c7ba <http_find_file+0x17a>
        tag_check = 1;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7b8:	e007      	b.n	800c7ca <http_find_file+0x18a>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	4619      	mov	r1, r3
 800c7be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c7c0:	f7ff feec 	bl	800c59c <http_uri_is_ssi>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d106      	bne.n	800c7de <http_find_file+0x19e>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800c7d0:	f107 0308 	add.w	r3, r7, #8
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	68f8      	ldr	r0, [r7, #12]
 800c7d8:	f7ff fdb2 	bl	800c340 <http_get_404_file>
 800c7dc:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7e2:	9301      	str	r3, [sp, #4]
 800c7e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f000 f809 	bl	800c808 <http_init_file>
 800c7f6:	4603      	mov	r3, r0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3740      	adds	r7, #64	; 0x40
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	20010254 	.word	0x20010254
 800c804:	0804011c 	.word	0x0804011c

0800c808 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b088      	sub	sp, #32
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
 800c814:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d07e      	beq.n	800c91a <http_init_file+0x112>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d106      	bne.n	800c832 <http_init_file+0x2a>
 800c824:	4b46      	ldr	r3, [pc, #280]	; (800c940 <http_init_file+0x138>)
 800c826:	f640 120b 	movw	r2, #2315	; 0x90b
 800c82a:	4946      	ldr	r1, [pc, #280]	; (800c944 <http_init_file+0x13c>)
 800c82c:	4846      	ldr	r0, [pc, #280]	; (800c948 <http_init_file+0x140>)
 800c82e:	f00d fb83 	bl	8019f38 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800c832:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c836:	2b00      	cmp	r3, #0
 800c838:	d01c      	beq.n	800c874 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800c83a:	f7fe fff4 	bl	800b826 <http_ssi_state_alloc>
 800c83e:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d016      	beq.n	800c874 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	2200      	movs	r2, #0
 800c84a:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800c84c:	69fb      	ldr	r3, [r7, #28]
 800c84e:	2200      	movs	r2, #0
 800c850:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	681a      	ldr	r2, [r3, #0]
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	461a      	mov	r2, r3
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	69fa      	ldr	r2, [r7, #28]
 800c872:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	681a      	ldr	r2, [r3, #0]
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	da06      	bge.n	800c898 <http_init_file+0x90>
 800c88a:	4b2d      	ldr	r3, [pc, #180]	; (800c940 <http_init_file+0x138>)
 800c88c:	f640 1234 	movw	r2, #2356	; 0x934
 800c890:	492e      	ldr	r1, [pc, #184]	; (800c94c <http_init_file+0x144>)
 800c892:	482d      	ldr	r0, [pc, #180]	; (800c948 <http_init_file+0x140>)
 800c894:	f00d fb50 	bl	8019f38 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	461a      	mov	r2, r3
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	695b      	ldr	r3, [r3, #20]
 800c8ae:	7c1b      	ldrb	r3, [r3, #16]
 800c8b0:	f003 0301 	and.w	r3, r3, #1
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d106      	bne.n	800c8c6 <http_init_file+0xbe>
 800c8b8:	4b21      	ldr	r3, [pc, #132]	; (800c940 <http_init_file+0x138>)
 800c8ba:	f640 1244 	movw	r2, #2372	; 0x944
 800c8be:	4924      	ldr	r1, [pc, #144]	; (800c950 <http_init_file+0x148>)
 800c8c0:	4821      	ldr	r0, [pc, #132]	; (800c948 <http_init_file+0x140>)
 800c8c2:	f00d fb39 	bl	8019f38 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d033      	beq.n	800c934 <http_init_file+0x12c>
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	695b      	ldr	r3, [r3, #20]
 800c8d0:	7c1b      	ldrb	r3, [r3, #16]
 800c8d2:	f003 0301 	and.w	r3, r3, #1
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d02c      	beq.n	800c934 <http_init_file+0x12c>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	6998      	ldr	r0, [r3, #24]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e2:	461a      	mov	r2, r3
 800c8e4:	491b      	ldr	r1, [pc, #108]	; (800c954 <http_init_file+0x14c>)
 800c8e6:	f000 f9f9 	bl	800ccdc <lwip_strnstr>
 800c8ea:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800c8ec:	69bb      	ldr	r3, [r7, #24]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d020      	beq.n	800c934 <http_init_file+0x12c>
        int diff = file_start + 4 - hs->file;
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	3304      	adds	r3, #4
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	699b      	ldr	r3, [r3, #24]
 800c8fc:	1ad3      	subs	r3, r2, r3
 800c8fe:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	699a      	ldr	r2, [r3, #24]
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	441a      	add	r2, r3
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	1ad2      	subs	r2, r2, r3
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	625a      	str	r2, [r3, #36]	; 0x24
 800c918:	e00c      	b.n	800c934 <http_init_file+0x12c>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2200      	movs	r2, #0
 800c91e:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	2200      	movs	r2, #0
 800c924:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	2200      	movs	r2, #0
 800c92a:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3720      	adds	r7, #32
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	0801befc 	.word	0x0801befc
 800c944:	0801c048 	.word	0x0801c048
 800c948:	0801bf44 	.word	0x0801bf44
 800c94c:	0801c05c 	.word	0x0801c05c
 800c950:	0801c07c 	.word	0x0801c07c
 800c954:	0801c040 	.word	0x0801c040

0800c958 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b084      	sub	sp, #16
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	460b      	mov	r3, r1
 800c962:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d002      	beq.n	800c974 <http_err+0x1c>
    http_state_free(hs);
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f7fe ffc6 	bl	800b900 <http_state_free>
  }
}
 800c974:	bf00      	nop
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b086      	sub	sp, #24
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	4613      	mov	r3, r2
 800c988:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <http_sent+0x1c>
    return ERR_OK;
 800c994:	2300      	movs	r3, #0
 800c996:	e008      	b.n	800c9aa <http_sent+0x2e>
  }

  hs->retries = 0;
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800c9a0:	6979      	ldr	r1, [r7, #20]
 800c9a2:	68b8      	ldr	r0, [r7, #8]
 800c9a4:	f7ff fc8a 	bl	800c2bc <http_send>

  return ERR_OK;
 800c9a8:	2300      	movs	r3, #0
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3718      	adds	r7, #24
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b084      	sub	sp, #16
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d107      	bne.n	800c9d6 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	6838      	ldr	r0, [r7, #0]
 800c9ca:	f7ff f855 	bl	800ba78 <http_close_conn>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	e021      	b.n	800ca1a <http_poll+0x68>
  } else {
    hs->retries++;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9dc:	3301      	adds	r3, #1
 800c9de:	b2da      	uxtb	r2, r3
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9ec:	2b04      	cmp	r3, #4
 800c9ee:	d105      	bne.n	800c9fc <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800c9f0:	68f9      	ldr	r1, [r7, #12]
 800c9f2:	6838      	ldr	r0, [r7, #0]
 800c9f4:	f7ff f840 	bl	800ba78 <http_close_conn>
      return ERR_OK;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	e00e      	b.n	800ca1a <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	695b      	ldr	r3, [r3, #20]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d009      	beq.n	800ca18 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800ca04:	68f9      	ldr	r1, [r7, #12]
 800ca06:	6838      	ldr	r0, [r7, #0]
 800ca08:	f7ff fc58 	bl	800c2bc <http_send>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d002      	beq.n	800ca18 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800ca12:	6838      	ldr	r0, [r7, #0]
 800ca14:	f007 f92a 	bl	8013c6c <tcp_output>
      }
    }
  }

  return ERR_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
	...

0800ca24 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b086      	sub	sp, #24
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
 800ca30:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800ca36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d105      	bne.n	800ca4a <http_recv+0x26>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <http_recv+0x26>
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d111      	bne.n	800ca6e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d008      	beq.n	800ca62 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	891b      	ldrh	r3, [r3, #8]
 800ca54:	4619      	mov	r1, r3
 800ca56:	68b8      	ldr	r0, [r7, #8]
 800ca58:	f002 fd00 	bl	800f45c <tcp_recved>
      pbuf_free(p);
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f001 fd2d 	bl	800e4bc <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800ca62:	6979      	ldr	r1, [r7, #20]
 800ca64:	68b8      	ldr	r0, [r7, #8]
 800ca66:	f7ff f807 	bl	800ba78 <http_close_conn>
    return ERR_OK;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	e055      	b.n	800cb1a <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	891b      	ldrh	r3, [r3, #8]
 800ca72:	4619      	mov	r1, r3
 800ca74:	68b8      	ldr	r0, [r7, #8]
 800ca76:	f002 fcf1 	bl	800f45c <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	695b      	ldr	r3, [r3, #20]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d147      	bne.n	800cb12 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800ca82:	68ba      	ldr	r2, [r7, #8]
 800ca84:	6979      	ldr	r1, [r7, #20]
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f7ff fca0 	bl	800c3cc <http_parse_request>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800ca90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d015      	beq.n	800cac4 <http_recv+0xa0>
 800ca98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca9c:	f113 0f05 	cmn.w	r3, #5
 800caa0:	d010      	beq.n	800cac4 <http_recv+0xa0>
 800caa2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800caa6:	f113 0f10 	cmn.w	r3, #16
 800caaa:	d00b      	beq.n	800cac4 <http_recv+0xa0>
 800caac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cab0:	f113 0f08 	cmn.w	r3, #8
 800cab4:	d006      	beq.n	800cac4 <http_recv+0xa0>
 800cab6:	4b1b      	ldr	r3, [pc, #108]	; (800cb24 <http_recv+0x100>)
 800cab8:	f640 2205 	movw	r2, #2565	; 0xa05
 800cabc:	491a      	ldr	r1, [pc, #104]	; (800cb28 <http_recv+0x104>)
 800cabe:	481b      	ldr	r0, [pc, #108]	; (800cb2c <http_recv+0x108>)
 800cac0:	f00d fa3a 	bl	8019f38 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800cac4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cac8:	f113 0f05 	cmn.w	r3, #5
 800cacc:	d00b      	beq.n	800cae6 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	6a1b      	ldr	r3, [r3, #32]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d007      	beq.n	800cae6 <http_recv+0xc2>
          pbuf_free(hs->req);
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	4618      	mov	r0, r3
 800cadc:	f001 fcee 	bl	800e4bc <pbuf_free>
          hs->req = NULL;
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	2200      	movs	r2, #0
 800cae4:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f001 fce8 	bl	800e4bc <pbuf_free>
      if (parsed == ERR_OK) {
 800caec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d104      	bne.n	800cafe <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800caf4:	6979      	ldr	r1, [r7, #20]
 800caf6:	68b8      	ldr	r0, [r7, #8]
 800caf8:	f7ff fbe0 	bl	800c2bc <http_send>
 800cafc:	e00c      	b.n	800cb18 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800cafe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cb02:	f113 0f10 	cmn.w	r3, #16
 800cb06:	d107      	bne.n	800cb18 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800cb08:	6979      	ldr	r1, [r7, #20]
 800cb0a:	68b8      	ldr	r0, [r7, #8]
 800cb0c:	f7fe ffb4 	bl	800ba78 <http_close_conn>
 800cb10:	e002      	b.n	800cb18 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f001 fcd2 	bl	800e4bc <pbuf_free>
    }
  }
  return ERR_OK;
 800cb18:	2300      	movs	r3, #0
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3718      	adds	r7, #24
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	0801befc 	.word	0x0801befc
 800cb28:	0801c0a8 	.word	0x0801c0a8
 800cb2c:	0801bf44 	.word	0x0801bf44

0800cb30 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b086      	sub	sp, #24
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800cb3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d102      	bne.n	800cb4c <http_accept+0x1c>
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d102      	bne.n	800cb52 <http_accept+0x22>
    return ERR_VAL;
 800cb4c:	f06f 0305 	mvn.w	r3, #5
 800cb50:	e025      	b.n	800cb9e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800cb52:	2101      	movs	r1, #1
 800cb54:	68b8      	ldr	r0, [r7, #8]
 800cb56:	f003 f961 	bl	800fe1c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800cb5a:	f7fe fe93 	bl	800b884 <http_state_alloc>
 800cb5e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d102      	bne.n	800cb6c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800cb66:	f04f 33ff 	mov.w	r3, #4294967295
 800cb6a:	e018      	b.n	800cb9e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	68ba      	ldr	r2, [r7, #8]
 800cb70:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800cb72:	6979      	ldr	r1, [r7, #20]
 800cb74:	68b8      	ldr	r0, [r7, #8]
 800cb76:	f003 fb51 	bl	801021c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800cb7a:	490b      	ldr	r1, [pc, #44]	; (800cba8 <http_accept+0x78>)
 800cb7c:	68b8      	ldr	r0, [r7, #8]
 800cb7e:	f003 fb5f 	bl	8010240 <tcp_recv>
  altcp_err(pcb, http_err);
 800cb82:	490a      	ldr	r1, [pc, #40]	; (800cbac <http_accept+0x7c>)
 800cb84:	68b8      	ldr	r0, [r7, #8]
 800cb86:	f003 fb9f 	bl	80102c8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800cb8a:	2204      	movs	r2, #4
 800cb8c:	4908      	ldr	r1, [pc, #32]	; (800cbb0 <http_accept+0x80>)
 800cb8e:	68b8      	ldr	r0, [r7, #8]
 800cb90:	f003 fbd4 	bl	801033c <tcp_poll>
  altcp_sent(pcb, http_sent);
 800cb94:	4907      	ldr	r1, [pc, #28]	; (800cbb4 <http_accept+0x84>)
 800cb96:	68b8      	ldr	r0, [r7, #8]
 800cb98:	f003 fb74 	bl	8010284 <tcp_sent>

  return ERR_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3718      	adds	r7, #24
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}
 800cba6:	bf00      	nop
 800cba8:	0800ca25 	.word	0x0800ca25
 800cbac:	0800c959 	.word	0x0800c959
 800cbb0:	0800c9b3 	.word	0x0800c9b3
 800cbb4:	0800c97d 	.word	0x0800c97d

0800cbb8 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d029      	beq.n	800cc1e <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800cbca:	2101      	movs	r1, #1
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f003 f925 	bl	800fe1c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800cbd2:	887b      	ldrh	r3, [r7, #2]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	4914      	ldr	r1, [pc, #80]	; (800cc28 <httpd_init_pcb+0x70>)
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f002 fa71 	bl	800f0c0 <tcp_bind>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800cbe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d006      	beq.n	800cbf8 <httpd_init_pcb+0x40>
 800cbea:	4b10      	ldr	r3, [pc, #64]	; (800cc2c <httpd_init_pcb+0x74>)
 800cbec:	f640 2257 	movw	r2, #2647	; 0xa57
 800cbf0:	490f      	ldr	r1, [pc, #60]	; (800cc30 <httpd_init_pcb+0x78>)
 800cbf2:	4810      	ldr	r0, [pc, #64]	; (800cc34 <httpd_init_pcb+0x7c>)
 800cbf4:	f00d f9a0 	bl	8019f38 <iprintf>
    pcb = altcp_listen(pcb);
 800cbf8:	21ff      	movs	r1, #255	; 0xff
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f002 fb18 	bl	800f230 <tcp_listen_with_backlog>
 800cc00:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d106      	bne.n	800cc16 <httpd_init_pcb+0x5e>
 800cc08:	4b08      	ldr	r3, [pc, #32]	; (800cc2c <httpd_init_pcb+0x74>)
 800cc0a:	f640 2259 	movw	r2, #2649	; 0xa59
 800cc0e:	490a      	ldr	r1, [pc, #40]	; (800cc38 <httpd_init_pcb+0x80>)
 800cc10:	4808      	ldr	r0, [pc, #32]	; (800cc34 <httpd_init_pcb+0x7c>)
 800cc12:	f00d f991 	bl	8019f38 <iprintf>
    altcp_accept(pcb, http_accept);
 800cc16:	4909      	ldr	r1, [pc, #36]	; (800cc3c <httpd_init_pcb+0x84>)
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f003 fb77 	bl	801030c <tcp_accept>
  }
}
 800cc1e:	bf00      	nop
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	08040274 	.word	0x08040274
 800cc2c:	0801befc 	.word	0x0801befc
 800cc30:	0801c0d4 	.word	0x0801c0d4
 800cc34:	0801bf44 	.word	0x0801bf44
 800cc38:	0801c0f0 	.word	0x0801c0f0
 800cc3c:	0800cb31 	.word	0x0800cb31

0800cc40 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800cc46:	202e      	movs	r0, #46	; 0x2e
 800cc48:	f003 fada 	bl	8010200 <tcp_new_ip_type>
 800cc4c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d106      	bne.n	800cc62 <httpd_init+0x22>
 800cc54:	4b07      	ldr	r3, [pc, #28]	; (800cc74 <httpd_init+0x34>)
 800cc56:	f640 2272 	movw	r2, #2674	; 0xa72
 800cc5a:	4907      	ldr	r1, [pc, #28]	; (800cc78 <httpd_init+0x38>)
 800cc5c:	4807      	ldr	r0, [pc, #28]	; (800cc7c <httpd_init+0x3c>)
 800cc5e:	f00d f96b 	bl	8019f38 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800cc62:	2150      	movs	r1, #80	; 0x50
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff ffa7 	bl	800cbb8 <httpd_init_pcb>
}
 800cc6a:	bf00      	nop
 800cc6c:	3708      	adds	r7, #8
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	0801befc 	.word	0x0801befc
 800cc78:	0801c110 	.word	0x0801c110
 800cc7c:	0801bf44 	.word	0x0801bf44

0800cc80 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b083      	sub	sp, #12
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	4603      	mov	r3, r0
 800cc88:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cc8a:	88fb      	ldrh	r3, [r7, #6]
 800cc8c:	021b      	lsls	r3, r3, #8
 800cc8e:	b21a      	sxth	r2, r3
 800cc90:	88fb      	ldrh	r3, [r7, #6]
 800cc92:	0a1b      	lsrs	r3, r3, #8
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	b21b      	sxth	r3, r3
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	b21b      	sxth	r3, r3
 800cc9c:	b29b      	uxth	r3, r3
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	370c      	adds	r7, #12
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ccaa:	b480      	push	{r7}
 800ccac:	b083      	sub	sp, #12
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	061a      	lsls	r2, r3, #24
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	021b      	lsls	r3, r3, #8
 800ccba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ccbe:	431a      	orrs	r2, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	0a1b      	lsrs	r3, r3, #8
 800ccc4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ccc8:	431a      	orrs	r2, r3
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	0e1b      	lsrs	r3, r3, #24
 800ccce:	4313      	orrs	r3, r2
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b086      	sub	sp, #24
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800cce8:	68b8      	ldr	r0, [r7, #8]
 800ccea:	f7f3 fa8b 	bl	8000204 <strlen>
 800ccee:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d101      	bne.n	800ccfa <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	e022      	b.n	800cd40 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	617b      	str	r3, [r7, #20]
 800ccfe:	e012      	b.n	800cd26 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	781a      	ldrb	r2, [r3, #0]
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d109      	bne.n	800cd20 <lwip_strnstr+0x44>
 800cd0c:	693a      	ldr	r2, [r7, #16]
 800cd0e:	68b9      	ldr	r1, [r7, #8]
 800cd10:	6978      	ldr	r0, [r7, #20]
 800cd12:	f00d f992 	bl	801a03a <strncmp>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d101      	bne.n	800cd20 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	e00f      	b.n	800cd40 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	3301      	adds	r3, #1
 800cd24:	617b      	str	r3, [r7, #20]
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d007      	beq.n	800cd3e <lwip_strnstr+0x62>
 800cd2e:	697a      	ldr	r2, [r7, #20]
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	441a      	add	r2, r3
 800cd34:	68f9      	ldr	r1, [r7, #12]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	440b      	add	r3, r1
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d9e0      	bls.n	800cd00 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800cd3e:	2300      	movs	r3, #0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3718      	adds	r7, #24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	1c5a      	adds	r2, r3, #1
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	1c5a      	adds	r2, r3, #1
 800cd60:	603a      	str	r2, [r7, #0]
 800cd62:	781b      	ldrb	r3, [r3, #0]
 800cd64:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800cd66:	7bfa      	ldrb	r2, [r7, #15]
 800cd68:	7bbb      	ldrb	r3, [r7, #14]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d016      	beq.n	800cd9c <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800cd6e:	7bfb      	ldrb	r3, [r7, #15]
 800cd70:	f043 0320 	orr.w	r3, r3, #32
 800cd74:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800cd76:	7b7b      	ldrb	r3, [r7, #13]
 800cd78:	2b60      	cmp	r3, #96	; 0x60
 800cd7a:	d90c      	bls.n	800cd96 <lwip_stricmp+0x4e>
 800cd7c:	7b7b      	ldrb	r3, [r7, #13]
 800cd7e:	2b7a      	cmp	r3, #122	; 0x7a
 800cd80:	d809      	bhi.n	800cd96 <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800cd82:	7bbb      	ldrb	r3, [r7, #14]
 800cd84:	f043 0320 	orr.w	r3, r3, #32
 800cd88:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800cd8a:	7b7a      	ldrb	r2, [r7, #13]
 800cd8c:	7b3b      	ldrb	r3, [r7, #12]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d003      	beq.n	800cd9a <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800cd92:	2301      	movs	r3, #1
 800cd94:	e006      	b.n	800cda4 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e004      	b.n	800cda4 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800cd9a:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800cd9c:	7bfb      	ldrb	r3, [r7, #15]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1d7      	bne.n	800cd52 <lwip_stricmp+0xa>
  return 0;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800cdba:	f00c ffe1 	bl	8019d80 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cdbe:	f000 f8d5 	bl	800cf6c <mem_init>
  memp_init();
 800cdc2:	f000 fc31 	bl	800d628 <memp_init>
  pbuf_init();
  netif_init();
 800cdc6:	f000 fcf7 	bl	800d7b8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cdca:	f008 f84d 	bl	8014e68 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cdce:	f001 fe1f 	bl	800ea10 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cdd2:	f007 ff91 	bl	8014cf8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cdd6:	bf00      	nop
 800cdd8:	3708      	adds	r7, #8
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
	...

0800cde0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	4603      	mov	r3, r0
 800cde8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cdea:	4b05      	ldr	r3, [pc, #20]	; (800ce00 <ptr_to_mem+0x20>)
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	88fb      	ldrh	r3, [r7, #6]
 800cdf0:	4413      	add	r3, r2
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	370c      	adds	r7, #12
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	200102a0 	.word	0x200102a0

0800ce04 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	4a05      	ldr	r2, [pc, #20]	; (800ce24 <mem_to_ptr+0x20>)
 800ce10:	6812      	ldr	r2, [r2, #0]
 800ce12:	1a9b      	subs	r3, r3, r2
 800ce14:	b29b      	uxth	r3, r3
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop
 800ce24:	200102a0 	.word	0x200102a0

0800ce28 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ce28:	b590      	push	{r4, r7, lr}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ce30:	4b45      	ldr	r3, [pc, #276]	; (800cf48 <plug_holes+0x120>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d206      	bcs.n	800ce48 <plug_holes+0x20>
 800ce3a:	4b44      	ldr	r3, [pc, #272]	; (800cf4c <plug_holes+0x124>)
 800ce3c:	f240 12df 	movw	r2, #479	; 0x1df
 800ce40:	4943      	ldr	r1, [pc, #268]	; (800cf50 <plug_holes+0x128>)
 800ce42:	4844      	ldr	r0, [pc, #272]	; (800cf54 <plug_holes+0x12c>)
 800ce44:	f00d f878 	bl	8019f38 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ce48:	4b43      	ldr	r3, [pc, #268]	; (800cf58 <plug_holes+0x130>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d306      	bcc.n	800ce60 <plug_holes+0x38>
 800ce52:	4b3e      	ldr	r3, [pc, #248]	; (800cf4c <plug_holes+0x124>)
 800ce54:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ce58:	4940      	ldr	r1, [pc, #256]	; (800cf5c <plug_holes+0x134>)
 800ce5a:	483e      	ldr	r0, [pc, #248]	; (800cf54 <plug_holes+0x12c>)
 800ce5c:	f00d f86c 	bl	8019f38 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	791b      	ldrb	r3, [r3, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d006      	beq.n	800ce76 <plug_holes+0x4e>
 800ce68:	4b38      	ldr	r3, [pc, #224]	; (800cf4c <plug_holes+0x124>)
 800ce6a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ce6e:	493c      	ldr	r1, [pc, #240]	; (800cf60 <plug_holes+0x138>)
 800ce70:	4838      	ldr	r0, [pc, #224]	; (800cf54 <plug_holes+0x12c>)
 800ce72:	f00d f861 	bl	8019f38 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	881b      	ldrh	r3, [r3, #0]
 800ce7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce7e:	d906      	bls.n	800ce8e <plug_holes+0x66>
 800ce80:	4b32      	ldr	r3, [pc, #200]	; (800cf4c <plug_holes+0x124>)
 800ce82:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ce86:	4937      	ldr	r1, [pc, #220]	; (800cf64 <plug_holes+0x13c>)
 800ce88:	4832      	ldr	r0, [pc, #200]	; (800cf54 <plug_holes+0x12c>)
 800ce8a:	f00d f855 	bl	8019f38 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	881b      	ldrh	r3, [r3, #0]
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7ff ffa4 	bl	800cde0 <ptr_to_mem>
 800ce98:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d024      	beq.n	800ceec <plug_holes+0xc4>
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	791b      	ldrb	r3, [r3, #4]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d120      	bne.n	800ceec <plug_holes+0xc4>
 800ceaa:	4b2b      	ldr	r3, [pc, #172]	; (800cf58 <plug_holes+0x130>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d01b      	beq.n	800ceec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ceb4:	4b2c      	ldr	r3, [pc, #176]	; (800cf68 <plug_holes+0x140>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	68fa      	ldr	r2, [r7, #12]
 800ceba:	429a      	cmp	r2, r3
 800cebc:	d102      	bne.n	800cec4 <plug_holes+0x9c>
      lfree = mem;
 800cebe:	4a2a      	ldr	r2, [pc, #168]	; (800cf68 <plug_holes+0x140>)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	881a      	ldrh	r2, [r3, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	881b      	ldrh	r3, [r3, #0]
 800ced0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ced4:	d00a      	beq.n	800ceec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	881b      	ldrh	r3, [r3, #0]
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7ff ff80 	bl	800cde0 <ptr_to_mem>
 800cee0:	4604      	mov	r4, r0
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7ff ff8e 	bl	800ce04 <mem_to_ptr>
 800cee8:	4603      	mov	r3, r0
 800ceea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	885b      	ldrh	r3, [r3, #2]
 800cef0:	4618      	mov	r0, r3
 800cef2:	f7ff ff75 	bl	800cde0 <ptr_to_mem>
 800cef6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d01f      	beq.n	800cf40 <plug_holes+0x118>
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	791b      	ldrb	r3, [r3, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d11b      	bne.n	800cf40 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cf08:	4b17      	ldr	r3, [pc, #92]	; (800cf68 <plug_holes+0x140>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d102      	bne.n	800cf18 <plug_holes+0xf0>
      lfree = pmem;
 800cf12:	4a15      	ldr	r2, [pc, #84]	; (800cf68 <plug_holes+0x140>)
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	881a      	ldrh	r2, [r3, #0]
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	881b      	ldrh	r3, [r3, #0]
 800cf24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf28:	d00a      	beq.n	800cf40 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	881b      	ldrh	r3, [r3, #0]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7ff ff56 	bl	800cde0 <ptr_to_mem>
 800cf34:	4604      	mov	r4, r0
 800cf36:	68b8      	ldr	r0, [r7, #8]
 800cf38:	f7ff ff64 	bl	800ce04 <mem_to_ptr>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cf40:	bf00      	nop
 800cf42:	3714      	adds	r7, #20
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd90      	pop	{r4, r7, pc}
 800cf48:	200102a0 	.word	0x200102a0
 800cf4c:	0801c16c 	.word	0x0801c16c
 800cf50:	0801c19c 	.word	0x0801c19c
 800cf54:	0801c1b4 	.word	0x0801c1b4
 800cf58:	200102a4 	.word	0x200102a4
 800cf5c:	0801c1dc 	.word	0x0801c1dc
 800cf60:	0801c1f8 	.word	0x0801c1f8
 800cf64:	0801c214 	.word	0x0801c214
 800cf68:	200102ac 	.word	0x200102ac

0800cf6c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cf72:	4b1f      	ldr	r3, [pc, #124]	; (800cff0 <mem_init+0x84>)
 800cf74:	3303      	adds	r3, #3
 800cf76:	f023 0303 	bic.w	r3, r3, #3
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	4b1d      	ldr	r3, [pc, #116]	; (800cff4 <mem_init+0x88>)
 800cf7e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cf80:	4b1c      	ldr	r3, [pc, #112]	; (800cff4 <mem_init+0x88>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cf8c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cf9a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800cf9e:	f7ff ff1f 	bl	800cde0 <ptr_to_mem>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	4b14      	ldr	r3, [pc, #80]	; (800cff8 <mem_init+0x8c>)
 800cfa6:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800cfa8:	4b13      	ldr	r3, [pc, #76]	; (800cff8 <mem_init+0x8c>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2201      	movs	r2, #1
 800cfae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cfb0:	4b11      	ldr	r3, [pc, #68]	; (800cff8 <mem_init+0x8c>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cfb8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cfba:	4b0f      	ldr	r3, [pc, #60]	; (800cff8 <mem_init+0x8c>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cfc2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cfc4:	4b0b      	ldr	r3, [pc, #44]	; (800cff4 <mem_init+0x88>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	4a0c      	ldr	r2, [pc, #48]	; (800cffc <mem_init+0x90>)
 800cfca:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800cfcc:	480c      	ldr	r0, [pc, #48]	; (800d000 <mem_init+0x94>)
 800cfce:	f00c fee3 	bl	8019d98 <sys_mutex_new>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d006      	beq.n	800cfe6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800cfd8:	4b0a      	ldr	r3, [pc, #40]	; (800d004 <mem_init+0x98>)
 800cfda:	f240 221f 	movw	r2, #543	; 0x21f
 800cfde:	490a      	ldr	r1, [pc, #40]	; (800d008 <mem_init+0x9c>)
 800cfe0:	480a      	ldr	r0, [pc, #40]	; (800d00c <mem_init+0xa0>)
 800cfe2:	f00c ffa9 	bl	8019f38 <iprintf>
  }
}
 800cfe6:	bf00      	nop
 800cfe8:	3708      	adds	r7, #8
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	20013788 	.word	0x20013788
 800cff4:	200102a0 	.word	0x200102a0
 800cff8:	200102a4 	.word	0x200102a4
 800cffc:	200102ac 	.word	0x200102ac
 800d000:	200102a8 	.word	0x200102a8
 800d004:	0801c16c 	.word	0x0801c16c
 800d008:	0801c240 	.word	0x0801c240
 800d00c:	0801c1b4 	.word	0x0801c1b4

0800d010 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b086      	sub	sp, #24
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f7ff fef3 	bl	800ce04 <mem_to_ptr>
 800d01e:	4603      	mov	r3, r0
 800d020:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	881b      	ldrh	r3, [r3, #0]
 800d026:	4618      	mov	r0, r3
 800d028:	f7ff feda 	bl	800cde0 <ptr_to_mem>
 800d02c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	885b      	ldrh	r3, [r3, #2]
 800d032:	4618      	mov	r0, r3
 800d034:	f7ff fed4 	bl	800cde0 <ptr_to_mem>
 800d038:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	881b      	ldrh	r3, [r3, #0]
 800d03e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d042:	d818      	bhi.n	800d076 <mem_link_valid+0x66>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	885b      	ldrh	r3, [r3, #2]
 800d048:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d04c:	d813      	bhi.n	800d076 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d052:	8afa      	ldrh	r2, [r7, #22]
 800d054:	429a      	cmp	r2, r3
 800d056:	d004      	beq.n	800d062 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	881b      	ldrh	r3, [r3, #0]
 800d05c:	8afa      	ldrh	r2, [r7, #22]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d109      	bne.n	800d076 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d062:	4b08      	ldr	r3, [pc, #32]	; (800d084 <mem_link_valid+0x74>)
 800d064:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d066:	693a      	ldr	r2, [r7, #16]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d006      	beq.n	800d07a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d06c:	693b      	ldr	r3, [r7, #16]
 800d06e:	885b      	ldrh	r3, [r3, #2]
 800d070:	8afa      	ldrh	r2, [r7, #22]
 800d072:	429a      	cmp	r2, r3
 800d074:	d001      	beq.n	800d07a <mem_link_valid+0x6a>
    return 0;
 800d076:	2300      	movs	r3, #0
 800d078:	e000      	b.n	800d07c <mem_link_valid+0x6c>
  }
  return 1;
 800d07a:	2301      	movs	r3, #1
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3718      	adds	r7, #24
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	200102a4 	.word	0x200102a4

0800d088 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b088      	sub	sp, #32
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d070      	beq.n	800d178 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	f003 0303 	and.w	r3, r3, #3
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00d      	beq.n	800d0bc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d0a0:	4b37      	ldr	r3, [pc, #220]	; (800d180 <mem_free+0xf8>)
 800d0a2:	f240 2273 	movw	r2, #627	; 0x273
 800d0a6:	4937      	ldr	r1, [pc, #220]	; (800d184 <mem_free+0xfc>)
 800d0a8:	4837      	ldr	r0, [pc, #220]	; (800d188 <mem_free+0x100>)
 800d0aa:	f00c ff45 	bl	8019f38 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d0ae:	f00c fec5 	bl	8019e3c <sys_arch_protect>
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f00c fecf 	bl	8019e58 <sys_arch_unprotect>
    return;
 800d0ba:	e05e      	b.n	800d17a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	3b08      	subs	r3, #8
 800d0c0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d0c2:	4b32      	ldr	r3, [pc, #200]	; (800d18c <mem_free+0x104>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	69fa      	ldr	r2, [r7, #28]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d306      	bcc.n	800d0da <mem_free+0x52>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f103 020c 	add.w	r2, r3, #12
 800d0d2:	4b2f      	ldr	r3, [pc, #188]	; (800d190 <mem_free+0x108>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d90d      	bls.n	800d0f6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d0da:	4b29      	ldr	r3, [pc, #164]	; (800d180 <mem_free+0xf8>)
 800d0dc:	f240 227f 	movw	r2, #639	; 0x27f
 800d0e0:	492c      	ldr	r1, [pc, #176]	; (800d194 <mem_free+0x10c>)
 800d0e2:	4829      	ldr	r0, [pc, #164]	; (800d188 <mem_free+0x100>)
 800d0e4:	f00c ff28 	bl	8019f38 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d0e8:	f00c fea8 	bl	8019e3c <sys_arch_protect>
 800d0ec:	6138      	str	r0, [r7, #16]
 800d0ee:	6938      	ldr	r0, [r7, #16]
 800d0f0:	f00c feb2 	bl	8019e58 <sys_arch_unprotect>
    return;
 800d0f4:	e041      	b.n	800d17a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d0f6:	4828      	ldr	r0, [pc, #160]	; (800d198 <mem_free+0x110>)
 800d0f8:	f00c fe64 	bl	8019dc4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	791b      	ldrb	r3, [r3, #4]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d110      	bne.n	800d126 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d104:	4b1e      	ldr	r3, [pc, #120]	; (800d180 <mem_free+0xf8>)
 800d106:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d10a:	4924      	ldr	r1, [pc, #144]	; (800d19c <mem_free+0x114>)
 800d10c:	481e      	ldr	r0, [pc, #120]	; (800d188 <mem_free+0x100>)
 800d10e:	f00c ff13 	bl	8019f38 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d112:	4821      	ldr	r0, [pc, #132]	; (800d198 <mem_free+0x110>)
 800d114:	f00c fe65 	bl	8019de2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d118:	f00c fe90 	bl	8019e3c <sys_arch_protect>
 800d11c:	6178      	str	r0, [r7, #20]
 800d11e:	6978      	ldr	r0, [r7, #20]
 800d120:	f00c fe9a 	bl	8019e58 <sys_arch_unprotect>
    return;
 800d124:	e029      	b.n	800d17a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d126:	69f8      	ldr	r0, [r7, #28]
 800d128:	f7ff ff72 	bl	800d010 <mem_link_valid>
 800d12c:	4603      	mov	r3, r0
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d110      	bne.n	800d154 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d132:	4b13      	ldr	r3, [pc, #76]	; (800d180 <mem_free+0xf8>)
 800d134:	f240 2295 	movw	r2, #661	; 0x295
 800d138:	4919      	ldr	r1, [pc, #100]	; (800d1a0 <mem_free+0x118>)
 800d13a:	4813      	ldr	r0, [pc, #76]	; (800d188 <mem_free+0x100>)
 800d13c:	f00c fefc 	bl	8019f38 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d140:	4815      	ldr	r0, [pc, #84]	; (800d198 <mem_free+0x110>)
 800d142:	f00c fe4e 	bl	8019de2 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d146:	f00c fe79 	bl	8019e3c <sys_arch_protect>
 800d14a:	61b8      	str	r0, [r7, #24]
 800d14c:	69b8      	ldr	r0, [r7, #24]
 800d14e:	f00c fe83 	bl	8019e58 <sys_arch_unprotect>
    return;
 800d152:	e012      	b.n	800d17a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	2200      	movs	r2, #0
 800d158:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d15a:	4b12      	ldr	r3, [pc, #72]	; (800d1a4 <mem_free+0x11c>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	69fa      	ldr	r2, [r7, #28]
 800d160:	429a      	cmp	r2, r3
 800d162:	d202      	bcs.n	800d16a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d164:	4a0f      	ldr	r2, [pc, #60]	; (800d1a4 <mem_free+0x11c>)
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d16a:	69f8      	ldr	r0, [r7, #28]
 800d16c:	f7ff fe5c 	bl	800ce28 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d170:	4809      	ldr	r0, [pc, #36]	; (800d198 <mem_free+0x110>)
 800d172:	f00c fe36 	bl	8019de2 <sys_mutex_unlock>
 800d176:	e000      	b.n	800d17a <mem_free+0xf2>
    return;
 800d178:	bf00      	nop
}
 800d17a:	3720      	adds	r7, #32
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	0801c16c 	.word	0x0801c16c
 800d184:	0801c25c 	.word	0x0801c25c
 800d188:	0801c1b4 	.word	0x0801c1b4
 800d18c:	200102a0 	.word	0x200102a0
 800d190:	200102a4 	.word	0x200102a4
 800d194:	0801c280 	.word	0x0801c280
 800d198:	200102a8 	.word	0x200102a8
 800d19c:	0801c29c 	.word	0x0801c29c
 800d1a0:	0801c2c4 	.word	0x0801c2c4
 800d1a4:	200102ac 	.word	0x200102ac

0800d1a8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b088      	sub	sp, #32
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d1b4:	887b      	ldrh	r3, [r7, #2]
 800d1b6:	3303      	adds	r3, #3
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	f023 0303 	bic.w	r3, r3, #3
 800d1be:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d1c0:	8bfb      	ldrh	r3, [r7, #30]
 800d1c2:	2b0b      	cmp	r3, #11
 800d1c4:	d801      	bhi.n	800d1ca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d1c6:	230c      	movs	r3, #12
 800d1c8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d1ca:	8bfb      	ldrh	r3, [r7, #30]
 800d1cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d1d0:	d803      	bhi.n	800d1da <mem_trim+0x32>
 800d1d2:	8bfa      	ldrh	r2, [r7, #30]
 800d1d4:	887b      	ldrh	r3, [r7, #2]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d201      	bcs.n	800d1de <mem_trim+0x36>
    return NULL;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	e0d8      	b.n	800d390 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d1de:	4b6e      	ldr	r3, [pc, #440]	; (800d398 <mem_trim+0x1f0>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d304      	bcc.n	800d1f2 <mem_trim+0x4a>
 800d1e8:	4b6c      	ldr	r3, [pc, #432]	; (800d39c <mem_trim+0x1f4>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d306      	bcc.n	800d200 <mem_trim+0x58>
 800d1f2:	4b6b      	ldr	r3, [pc, #428]	; (800d3a0 <mem_trim+0x1f8>)
 800d1f4:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d1f8:	496a      	ldr	r1, [pc, #424]	; (800d3a4 <mem_trim+0x1fc>)
 800d1fa:	486b      	ldr	r0, [pc, #428]	; (800d3a8 <mem_trim+0x200>)
 800d1fc:	f00c fe9c 	bl	8019f38 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d200:	4b65      	ldr	r3, [pc, #404]	; (800d398 <mem_trim+0x1f0>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	429a      	cmp	r2, r3
 800d208:	d304      	bcc.n	800d214 <mem_trim+0x6c>
 800d20a:	4b64      	ldr	r3, [pc, #400]	; (800d39c <mem_trim+0x1f4>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	429a      	cmp	r2, r3
 800d212:	d307      	bcc.n	800d224 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d214:	f00c fe12 	bl	8019e3c <sys_arch_protect>
 800d218:	60b8      	str	r0, [r7, #8]
 800d21a:	68b8      	ldr	r0, [r7, #8]
 800d21c:	f00c fe1c 	bl	8019e58 <sys_arch_unprotect>
    return rmem;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	e0b5      	b.n	800d390 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	3b08      	subs	r3, #8
 800d228:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d22a:	69b8      	ldr	r0, [r7, #24]
 800d22c:	f7ff fdea 	bl	800ce04 <mem_to_ptr>
 800d230:	4603      	mov	r3, r0
 800d232:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	881a      	ldrh	r2, [r3, #0]
 800d238:	8afb      	ldrh	r3, [r7, #22]
 800d23a:	1ad3      	subs	r3, r2, r3
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	3b08      	subs	r3, #8
 800d240:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d242:	8bfa      	ldrh	r2, [r7, #30]
 800d244:	8abb      	ldrh	r3, [r7, #20]
 800d246:	429a      	cmp	r2, r3
 800d248:	d906      	bls.n	800d258 <mem_trim+0xb0>
 800d24a:	4b55      	ldr	r3, [pc, #340]	; (800d3a0 <mem_trim+0x1f8>)
 800d24c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d250:	4956      	ldr	r1, [pc, #344]	; (800d3ac <mem_trim+0x204>)
 800d252:	4855      	ldr	r0, [pc, #340]	; (800d3a8 <mem_trim+0x200>)
 800d254:	f00c fe70 	bl	8019f38 <iprintf>
  if (newsize > size) {
 800d258:	8bfa      	ldrh	r2, [r7, #30]
 800d25a:	8abb      	ldrh	r3, [r7, #20]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d901      	bls.n	800d264 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d260:	2300      	movs	r3, #0
 800d262:	e095      	b.n	800d390 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d264:	8bfa      	ldrh	r2, [r7, #30]
 800d266:	8abb      	ldrh	r3, [r7, #20]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d101      	bne.n	800d270 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	e08f      	b.n	800d390 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d270:	484f      	ldr	r0, [pc, #316]	; (800d3b0 <mem_trim+0x208>)
 800d272:	f00c fda7 	bl	8019dc4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	881b      	ldrh	r3, [r3, #0]
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7ff fdb0 	bl	800cde0 <ptr_to_mem>
 800d280:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	791b      	ldrb	r3, [r3, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d13f      	bne.n	800d30a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	881b      	ldrh	r3, [r3, #0]
 800d28e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d292:	d106      	bne.n	800d2a2 <mem_trim+0xfa>
 800d294:	4b42      	ldr	r3, [pc, #264]	; (800d3a0 <mem_trim+0x1f8>)
 800d296:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d29a:	4946      	ldr	r1, [pc, #280]	; (800d3b4 <mem_trim+0x20c>)
 800d29c:	4842      	ldr	r0, [pc, #264]	; (800d3a8 <mem_trim+0x200>)
 800d29e:	f00c fe4b 	bl	8019f38 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	881b      	ldrh	r3, [r3, #0]
 800d2a6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d2a8:	8afa      	ldrh	r2, [r7, #22]
 800d2aa:	8bfb      	ldrh	r3, [r7, #30]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	3308      	adds	r3, #8
 800d2b2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d2b4:	4b40      	ldr	r3, [pc, #256]	; (800d3b8 <mem_trim+0x210>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	693a      	ldr	r2, [r7, #16]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d106      	bne.n	800d2cc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d2be:	89fb      	ldrh	r3, [r7, #14]
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7ff fd8d 	bl	800cde0 <ptr_to_mem>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	4b3b      	ldr	r3, [pc, #236]	; (800d3b8 <mem_trim+0x210>)
 800d2ca:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d2cc:	89fb      	ldrh	r3, [r7, #14]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7ff fd86 	bl	800cde0 <ptr_to_mem>
 800d2d4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	89ba      	ldrh	r2, [r7, #12]
 800d2e0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	8afa      	ldrh	r2, [r7, #22]
 800d2e6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	89fa      	ldrh	r2, [r7, #14]
 800d2ec:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	881b      	ldrh	r3, [r3, #0]
 800d2f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d2f6:	d047      	beq.n	800d388 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	881b      	ldrh	r3, [r3, #0]
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7ff fd6f 	bl	800cde0 <ptr_to_mem>
 800d302:	4602      	mov	r2, r0
 800d304:	89fb      	ldrh	r3, [r7, #14]
 800d306:	8053      	strh	r3, [r2, #2]
 800d308:	e03e      	b.n	800d388 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d30a:	8bfb      	ldrh	r3, [r7, #30]
 800d30c:	f103 0214 	add.w	r2, r3, #20
 800d310:	8abb      	ldrh	r3, [r7, #20]
 800d312:	429a      	cmp	r2, r3
 800d314:	d838      	bhi.n	800d388 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d316:	8afa      	ldrh	r2, [r7, #22]
 800d318:	8bfb      	ldrh	r3, [r7, #30]
 800d31a:	4413      	add	r3, r2
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	3308      	adds	r3, #8
 800d320:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	881b      	ldrh	r3, [r3, #0]
 800d326:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d32a:	d106      	bne.n	800d33a <mem_trim+0x192>
 800d32c:	4b1c      	ldr	r3, [pc, #112]	; (800d3a0 <mem_trim+0x1f8>)
 800d32e:	f240 3216 	movw	r2, #790	; 0x316
 800d332:	4920      	ldr	r1, [pc, #128]	; (800d3b4 <mem_trim+0x20c>)
 800d334:	481c      	ldr	r0, [pc, #112]	; (800d3a8 <mem_trim+0x200>)
 800d336:	f00c fdff 	bl	8019f38 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d33a:	89fb      	ldrh	r3, [r7, #14]
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7ff fd4f 	bl	800cde0 <ptr_to_mem>
 800d342:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d344:	4b1c      	ldr	r3, [pc, #112]	; (800d3b8 <mem_trim+0x210>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	693a      	ldr	r2, [r7, #16]
 800d34a:	429a      	cmp	r2, r3
 800d34c:	d202      	bcs.n	800d354 <mem_trim+0x1ac>
      lfree = mem2;
 800d34e:	4a1a      	ldr	r2, [pc, #104]	; (800d3b8 <mem_trim+0x210>)
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	2200      	movs	r2, #0
 800d358:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d35a:	69bb      	ldr	r3, [r7, #24]
 800d35c:	881a      	ldrh	r2, [r3, #0]
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	8afa      	ldrh	r2, [r7, #22]
 800d366:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	89fa      	ldrh	r2, [r7, #14]
 800d36c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	881b      	ldrh	r3, [r3, #0]
 800d372:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d376:	d007      	beq.n	800d388 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	881b      	ldrh	r3, [r3, #0]
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7ff fd2f 	bl	800cde0 <ptr_to_mem>
 800d382:	4602      	mov	r2, r0
 800d384:	89fb      	ldrh	r3, [r7, #14]
 800d386:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d388:	4809      	ldr	r0, [pc, #36]	; (800d3b0 <mem_trim+0x208>)
 800d38a:	f00c fd2a 	bl	8019de2 <sys_mutex_unlock>
  return rmem;
 800d38e:	687b      	ldr	r3, [r7, #4]
}
 800d390:	4618      	mov	r0, r3
 800d392:	3720      	adds	r7, #32
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	200102a0 	.word	0x200102a0
 800d39c:	200102a4 	.word	0x200102a4
 800d3a0:	0801c16c 	.word	0x0801c16c
 800d3a4:	0801c2f8 	.word	0x0801c2f8
 800d3a8:	0801c1b4 	.word	0x0801c1b4
 800d3ac:	0801c310 	.word	0x0801c310
 800d3b0:	200102a8 	.word	0x200102a8
 800d3b4:	0801c330 	.word	0x0801c330
 800d3b8:	200102ac 	.word	0x200102ac

0800d3bc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b088      	sub	sp, #32
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d3c6:	88fb      	ldrh	r3, [r7, #6]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d101      	bne.n	800d3d0 <mem_malloc+0x14>
    return NULL;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	e0e2      	b.n	800d596 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d3d0:	88fb      	ldrh	r3, [r7, #6]
 800d3d2:	3303      	adds	r3, #3
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	f023 0303 	bic.w	r3, r3, #3
 800d3da:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d3dc:	8bbb      	ldrh	r3, [r7, #28]
 800d3de:	2b0b      	cmp	r3, #11
 800d3e0:	d801      	bhi.n	800d3e6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d3e2:	230c      	movs	r3, #12
 800d3e4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d3e6:	8bbb      	ldrh	r3, [r7, #28]
 800d3e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3ec:	d803      	bhi.n	800d3f6 <mem_malloc+0x3a>
 800d3ee:	8bba      	ldrh	r2, [r7, #28]
 800d3f0:	88fb      	ldrh	r3, [r7, #6]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d201      	bcs.n	800d3fa <mem_malloc+0x3e>
    return NULL;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	e0cd      	b.n	800d596 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d3fa:	4869      	ldr	r0, [pc, #420]	; (800d5a0 <mem_malloc+0x1e4>)
 800d3fc:	f00c fce2 	bl	8019dc4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d400:	4b68      	ldr	r3, [pc, #416]	; (800d5a4 <mem_malloc+0x1e8>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4618      	mov	r0, r3
 800d406:	f7ff fcfd 	bl	800ce04 <mem_to_ptr>
 800d40a:	4603      	mov	r3, r0
 800d40c:	83fb      	strh	r3, [r7, #30]
 800d40e:	e0b7      	b.n	800d580 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d410:	8bfb      	ldrh	r3, [r7, #30]
 800d412:	4618      	mov	r0, r3
 800d414:	f7ff fce4 	bl	800cde0 <ptr_to_mem>
 800d418:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	791b      	ldrb	r3, [r3, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	f040 80a7 	bne.w	800d572 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	881b      	ldrh	r3, [r3, #0]
 800d428:	461a      	mov	r2, r3
 800d42a:	8bfb      	ldrh	r3, [r7, #30]
 800d42c:	1ad3      	subs	r3, r2, r3
 800d42e:	f1a3 0208 	sub.w	r2, r3, #8
 800d432:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d434:	429a      	cmp	r2, r3
 800d436:	f0c0 809c 	bcc.w	800d572 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	881b      	ldrh	r3, [r3, #0]
 800d43e:	461a      	mov	r2, r3
 800d440:	8bfb      	ldrh	r3, [r7, #30]
 800d442:	1ad3      	subs	r3, r2, r3
 800d444:	f1a3 0208 	sub.w	r2, r3, #8
 800d448:	8bbb      	ldrh	r3, [r7, #28]
 800d44a:	3314      	adds	r3, #20
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d333      	bcc.n	800d4b8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d450:	8bfa      	ldrh	r2, [r7, #30]
 800d452:	8bbb      	ldrh	r3, [r7, #28]
 800d454:	4413      	add	r3, r2
 800d456:	b29b      	uxth	r3, r3
 800d458:	3308      	adds	r3, #8
 800d45a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d45c:	8a7b      	ldrh	r3, [r7, #18]
 800d45e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d462:	d106      	bne.n	800d472 <mem_malloc+0xb6>
 800d464:	4b50      	ldr	r3, [pc, #320]	; (800d5a8 <mem_malloc+0x1ec>)
 800d466:	f240 3287 	movw	r2, #903	; 0x387
 800d46a:	4950      	ldr	r1, [pc, #320]	; (800d5ac <mem_malloc+0x1f0>)
 800d46c:	4850      	ldr	r0, [pc, #320]	; (800d5b0 <mem_malloc+0x1f4>)
 800d46e:	f00c fd63 	bl	8019f38 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d472:	8a7b      	ldrh	r3, [r7, #18]
 800d474:	4618      	mov	r0, r3
 800d476:	f7ff fcb3 	bl	800cde0 <ptr_to_mem>
 800d47a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2200      	movs	r2, #0
 800d480:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	881a      	ldrh	r2, [r3, #0]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	8bfa      	ldrh	r2, [r7, #30]
 800d48e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d490:	697b      	ldr	r3, [r7, #20]
 800d492:	8a7a      	ldrh	r2, [r7, #18]
 800d494:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	2201      	movs	r2, #1
 800d49a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	881b      	ldrh	r3, [r3, #0]
 800d4a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d4a4:	d00b      	beq.n	800d4be <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	881b      	ldrh	r3, [r3, #0]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7ff fc98 	bl	800cde0 <ptr_to_mem>
 800d4b0:	4602      	mov	r2, r0
 800d4b2:	8a7b      	ldrh	r3, [r7, #18]
 800d4b4:	8053      	strh	r3, [r2, #2]
 800d4b6:	e002      	b.n	800d4be <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	2201      	movs	r2, #1
 800d4bc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d4be:	4b39      	ldr	r3, [pc, #228]	; (800d5a4 <mem_malloc+0x1e8>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	697a      	ldr	r2, [r7, #20]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d127      	bne.n	800d518 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d4c8:	4b36      	ldr	r3, [pc, #216]	; (800d5a4 <mem_malloc+0x1e8>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d4ce:	e005      	b.n	800d4dc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	881b      	ldrh	r3, [r3, #0]
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7ff fc83 	bl	800cde0 <ptr_to_mem>
 800d4da:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	791b      	ldrb	r3, [r3, #4]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d004      	beq.n	800d4ee <mem_malloc+0x132>
 800d4e4:	4b33      	ldr	r3, [pc, #204]	; (800d5b4 <mem_malloc+0x1f8>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	69ba      	ldr	r2, [r7, #24]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d1f0      	bne.n	800d4d0 <mem_malloc+0x114>
          }
          lfree = cur;
 800d4ee:	4a2d      	ldr	r2, [pc, #180]	; (800d5a4 <mem_malloc+0x1e8>)
 800d4f0:	69bb      	ldr	r3, [r7, #24]
 800d4f2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d4f4:	4b2b      	ldr	r3, [pc, #172]	; (800d5a4 <mem_malloc+0x1e8>)
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	4b2e      	ldr	r3, [pc, #184]	; (800d5b4 <mem_malloc+0x1f8>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d00b      	beq.n	800d518 <mem_malloc+0x15c>
 800d500:	4b28      	ldr	r3, [pc, #160]	; (800d5a4 <mem_malloc+0x1e8>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	791b      	ldrb	r3, [r3, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d006      	beq.n	800d518 <mem_malloc+0x15c>
 800d50a:	4b27      	ldr	r3, [pc, #156]	; (800d5a8 <mem_malloc+0x1ec>)
 800d50c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d510:	4929      	ldr	r1, [pc, #164]	; (800d5b8 <mem_malloc+0x1fc>)
 800d512:	4827      	ldr	r0, [pc, #156]	; (800d5b0 <mem_malloc+0x1f4>)
 800d514:	f00c fd10 	bl	8019f38 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d518:	4821      	ldr	r0, [pc, #132]	; (800d5a0 <mem_malloc+0x1e4>)
 800d51a:	f00c fc62 	bl	8019de2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d51e:	8bba      	ldrh	r2, [r7, #28]
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	4413      	add	r3, r2
 800d524:	3308      	adds	r3, #8
 800d526:	4a23      	ldr	r2, [pc, #140]	; (800d5b4 <mem_malloc+0x1f8>)
 800d528:	6812      	ldr	r2, [r2, #0]
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d906      	bls.n	800d53c <mem_malloc+0x180>
 800d52e:	4b1e      	ldr	r3, [pc, #120]	; (800d5a8 <mem_malloc+0x1ec>)
 800d530:	f240 32ba 	movw	r2, #954	; 0x3ba
 800d534:	4921      	ldr	r1, [pc, #132]	; (800d5bc <mem_malloc+0x200>)
 800d536:	481e      	ldr	r0, [pc, #120]	; (800d5b0 <mem_malloc+0x1f4>)
 800d538:	f00c fcfe 	bl	8019f38 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	f003 0303 	and.w	r3, r3, #3
 800d542:	2b00      	cmp	r3, #0
 800d544:	d006      	beq.n	800d554 <mem_malloc+0x198>
 800d546:	4b18      	ldr	r3, [pc, #96]	; (800d5a8 <mem_malloc+0x1ec>)
 800d548:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800d54c:	491c      	ldr	r1, [pc, #112]	; (800d5c0 <mem_malloc+0x204>)
 800d54e:	4818      	ldr	r0, [pc, #96]	; (800d5b0 <mem_malloc+0x1f4>)
 800d550:	f00c fcf2 	bl	8019f38 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	f003 0303 	and.w	r3, r3, #3
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d006      	beq.n	800d56c <mem_malloc+0x1b0>
 800d55e:	4b12      	ldr	r3, [pc, #72]	; (800d5a8 <mem_malloc+0x1ec>)
 800d560:	f240 32be 	movw	r2, #958	; 0x3be
 800d564:	4917      	ldr	r1, [pc, #92]	; (800d5c4 <mem_malloc+0x208>)
 800d566:	4812      	ldr	r0, [pc, #72]	; (800d5b0 <mem_malloc+0x1f4>)
 800d568:	f00c fce6 	bl	8019f38 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	3308      	adds	r3, #8
 800d570:	e011      	b.n	800d596 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d572:	8bfb      	ldrh	r3, [r7, #30]
 800d574:	4618      	mov	r0, r3
 800d576:	f7ff fc33 	bl	800cde0 <ptr_to_mem>
 800d57a:	4603      	mov	r3, r0
 800d57c:	881b      	ldrh	r3, [r3, #0]
 800d57e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d580:	8bfa      	ldrh	r2, [r7, #30]
 800d582:	8bbb      	ldrh	r3, [r7, #28]
 800d584:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d588:	429a      	cmp	r2, r3
 800d58a:	f4ff af41 	bcc.w	800d410 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d58e:	4804      	ldr	r0, [pc, #16]	; (800d5a0 <mem_malloc+0x1e4>)
 800d590:	f00c fc27 	bl	8019de2 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d594:	2300      	movs	r3, #0
}
 800d596:	4618      	mov	r0, r3
 800d598:	3720      	adds	r7, #32
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	200102a8 	.word	0x200102a8
 800d5a4:	200102ac 	.word	0x200102ac
 800d5a8:	0801c16c 	.word	0x0801c16c
 800d5ac:	0801c330 	.word	0x0801c330
 800d5b0:	0801c1b4 	.word	0x0801c1b4
 800d5b4:	200102a4 	.word	0x200102a4
 800d5b8:	0801c344 	.word	0x0801c344
 800d5bc:	0801c360 	.word	0x0801c360
 800d5c0:	0801c390 	.word	0x0801c390
 800d5c4:	0801c3c0 	.word	0x0801c3c0

0800d5c8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	3303      	adds	r3, #3
 800d5de:	f023 0303 	bic.w	r3, r3, #3
 800d5e2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	60fb      	str	r3, [r7, #12]
 800d5e8:	e011      	b.n	800d60e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	689b      	ldr	r3, [r3, #8]
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	689b      	ldr	r3, [r3, #8]
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	881b      	ldrh	r3, [r3, #0]
 800d600:	461a      	mov	r2, r3
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	4413      	add	r3, r2
 800d606:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	3301      	adds	r3, #1
 800d60c:	60fb      	str	r3, [r7, #12]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	885b      	ldrh	r3, [r3, #2]
 800d612:	461a      	mov	r2, r3
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	4293      	cmp	r3, r2
 800d618:	dbe7      	blt.n	800d5ea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d61a:	bf00      	nop
 800d61c:	3714      	adds	r7, #20
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
	...

0800d628 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d62e:	2300      	movs	r3, #0
 800d630:	80fb      	strh	r3, [r7, #6]
 800d632:	e009      	b.n	800d648 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d634:	88fb      	ldrh	r3, [r7, #6]
 800d636:	4a08      	ldr	r2, [pc, #32]	; (800d658 <memp_init+0x30>)
 800d638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7ff ffc3 	bl	800d5c8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d642:	88fb      	ldrh	r3, [r7, #6]
 800d644:	3301      	adds	r3, #1
 800d646:	80fb      	strh	r3, [r7, #6]
 800d648:	88fb      	ldrh	r3, [r7, #6]
 800d64a:	2b0c      	cmp	r3, #12
 800d64c:	d9f2      	bls.n	800d634 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d64e:	bf00      	nop
 800d650:	3708      	adds	r7, #8
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	080401f0 	.word	0x080401f0

0800d65c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b084      	sub	sp, #16
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d664:	f00c fbea 	bl	8019e3c <sys_arch_protect>
 800d668:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	689b      	ldr	r3, [r3, #8]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d015      	beq.n	800d6a4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	689b      	ldr	r3, [r3, #8]
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	6812      	ldr	r2, [r2, #0]
 800d680:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	f003 0303 	and.w	r3, r3, #3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d006      	beq.n	800d69a <do_memp_malloc_pool+0x3e>
 800d68c:	4b09      	ldr	r3, [pc, #36]	; (800d6b4 <do_memp_malloc_pool+0x58>)
 800d68e:	f240 1219 	movw	r2, #281	; 0x119
 800d692:	4909      	ldr	r1, [pc, #36]	; (800d6b8 <do_memp_malloc_pool+0x5c>)
 800d694:	4809      	ldr	r0, [pc, #36]	; (800d6bc <do_memp_malloc_pool+0x60>)
 800d696:	f00c fc4f 	bl	8019f38 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d69a:	68f8      	ldr	r0, [r7, #12]
 800d69c:	f00c fbdc 	bl	8019e58 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	e003      	b.n	800d6ac <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f00c fbd7 	bl	8019e58 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3710      	adds	r7, #16
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	0801c3e4 	.word	0x0801c3e4
 800d6b8:	0801c414 	.word	0x0801c414
 800d6bc:	0801c438 	.word	0x0801c438

0800d6c0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b084      	sub	sp, #16
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d6ca:	79fb      	ldrb	r3, [r7, #7]
 800d6cc:	2b0c      	cmp	r3, #12
 800d6ce:	d908      	bls.n	800d6e2 <memp_malloc+0x22>
 800d6d0:	4b0a      	ldr	r3, [pc, #40]	; (800d6fc <memp_malloc+0x3c>)
 800d6d2:	f240 1257 	movw	r2, #343	; 0x157
 800d6d6:	490a      	ldr	r1, [pc, #40]	; (800d700 <memp_malloc+0x40>)
 800d6d8:	480a      	ldr	r0, [pc, #40]	; (800d704 <memp_malloc+0x44>)
 800d6da:	f00c fc2d 	bl	8019f38 <iprintf>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	e008      	b.n	800d6f4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
 800d6e4:	4a08      	ldr	r2, [pc, #32]	; (800d708 <memp_malloc+0x48>)
 800d6e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7ff ffb6 	bl	800d65c <do_memp_malloc_pool>
 800d6f0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}
 800d6fc:	0801c3e4 	.word	0x0801c3e4
 800d700:	0801c474 	.word	0x0801c474
 800d704:	0801c438 	.word	0x0801c438
 800d708:	080401f0 	.word	0x080401f0

0800d70c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b084      	sub	sp, #16
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	f003 0303 	and.w	r3, r3, #3
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d006      	beq.n	800d72e <do_memp_free_pool+0x22>
 800d720:	4b0d      	ldr	r3, [pc, #52]	; (800d758 <do_memp_free_pool+0x4c>)
 800d722:	f240 126d 	movw	r2, #365	; 0x16d
 800d726:	490d      	ldr	r1, [pc, #52]	; (800d75c <do_memp_free_pool+0x50>)
 800d728:	480d      	ldr	r0, [pc, #52]	; (800d760 <do_memp_free_pool+0x54>)
 800d72a:	f00c fc05 	bl	8019f38 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d732:	f00c fb83 	bl	8019e3c <sys_arch_protect>
 800d736:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	689b      	ldr	r3, [r3, #8]
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d74a:	68b8      	ldr	r0, [r7, #8]
 800d74c:	f00c fb84 	bl	8019e58 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d750:	bf00      	nop
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	0801c3e4 	.word	0x0801c3e4
 800d75c:	0801c494 	.word	0x0801c494
 800d760:	0801c438 	.word	0x0801c438

0800d764 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	4603      	mov	r3, r0
 800d76c:	6039      	str	r1, [r7, #0]
 800d76e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d770:	79fb      	ldrb	r3, [r7, #7]
 800d772:	2b0c      	cmp	r3, #12
 800d774:	d907      	bls.n	800d786 <memp_free+0x22>
 800d776:	4b0c      	ldr	r3, [pc, #48]	; (800d7a8 <memp_free+0x44>)
 800d778:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d77c:	490b      	ldr	r1, [pc, #44]	; (800d7ac <memp_free+0x48>)
 800d77e:	480c      	ldr	r0, [pc, #48]	; (800d7b0 <memp_free+0x4c>)
 800d780:	f00c fbda 	bl	8019f38 <iprintf>
 800d784:	e00c      	b.n	800d7a0 <memp_free+0x3c>

  if (mem == NULL) {
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d008      	beq.n	800d79e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d78c:	79fb      	ldrb	r3, [r7, #7]
 800d78e:	4a09      	ldr	r2, [pc, #36]	; (800d7b4 <memp_free+0x50>)
 800d790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d794:	6839      	ldr	r1, [r7, #0]
 800d796:	4618      	mov	r0, r3
 800d798:	f7ff ffb8 	bl	800d70c <do_memp_free_pool>
 800d79c:	e000      	b.n	800d7a0 <memp_free+0x3c>
    return;
 800d79e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d7a0:	3708      	adds	r7, #8
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	0801c3e4 	.word	0x0801c3e4
 800d7ac:	0801c4b4 	.word	0x0801c4b4
 800d7b0:	0801c438 	.word	0x0801c438
 800d7b4:	080401f0 	.word	0x080401f0

0800d7b8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d7bc:	bf00      	nop
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr
	...

0800d7c8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b086      	sub	sp, #24
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	607a      	str	r2, [r7, #4]
 800d7d4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d108      	bne.n	800d7ee <netif_add+0x26>
 800d7dc:	4b5b      	ldr	r3, [pc, #364]	; (800d94c <netif_add+0x184>)
 800d7de:	f240 1227 	movw	r2, #295	; 0x127
 800d7e2:	495b      	ldr	r1, [pc, #364]	; (800d950 <netif_add+0x188>)
 800d7e4:	485b      	ldr	r0, [pc, #364]	; (800d954 <netif_add+0x18c>)
 800d7e6:	f00c fba7 	bl	8019f38 <iprintf>
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	e0a9      	b.n	800d942 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d7ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d108      	bne.n	800d806 <netif_add+0x3e>
 800d7f4:	4b55      	ldr	r3, [pc, #340]	; (800d94c <netif_add+0x184>)
 800d7f6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d7fa:	4957      	ldr	r1, [pc, #348]	; (800d958 <netif_add+0x190>)
 800d7fc:	4855      	ldr	r0, [pc, #340]	; (800d954 <netif_add+0x18c>)
 800d7fe:	f00c fb9b 	bl	8019f38 <iprintf>
 800d802:	2300      	movs	r3, #0
 800d804:	e09d      	b.n	800d942 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d101      	bne.n	800d810 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d80c:	4b53      	ldr	r3, [pc, #332]	; (800d95c <netif_add+0x194>)
 800d80e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d101      	bne.n	800d81a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d816:	4b51      	ldr	r3, [pc, #324]	; (800d95c <netif_add+0x194>)
 800d818:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d101      	bne.n	800d824 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d820:	4b4e      	ldr	r3, [pc, #312]	; (800d95c <netif_add+0x194>)
 800d822:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2200      	movs	r2, #0
 800d828:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2200      	movs	r2, #0
 800d82e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2200      	movs	r2, #0
 800d834:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	4a49      	ldr	r2, [pc, #292]	; (800d960 <netif_add+0x198>)
 800d83a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2200      	movs	r2, #0
 800d840:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	2200      	movs	r2, #0
 800d846:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	3324      	adds	r3, #36	; 0x24
 800d84e:	2204      	movs	r2, #4
 800d850:	2100      	movs	r1, #0
 800d852:	4618      	mov	r0, r3
 800d854:	f00c fb67 	bl	8019f26 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2200      	movs	r2, #0
 800d85c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	6a3a      	ldr	r2, [r7, #32]
 800d862:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d864:	4b3f      	ldr	r3, [pc, #252]	; (800d964 <netif_add+0x19c>)
 800d866:	781a      	ldrb	r2, [r3, #0]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d872:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	68b9      	ldr	r1, [r7, #8]
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	f000 f914 	bl	800daa8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	4798      	blx	r3
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <netif_add+0xc8>
    return NULL;
 800d88c:	2300      	movs	r3, #0
 800d88e:	e058      	b.n	800d942 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d896:	2bff      	cmp	r3, #255	; 0xff
 800d898:	d103      	bne.n	800d8a2 <netif_add+0xda>
        netif->num = 0;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d8a6:	4b30      	ldr	r3, [pc, #192]	; (800d968 <netif_add+0x1a0>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	617b      	str	r3, [r7, #20]
 800d8ac:	e02b      	b.n	800d906 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d8ae:	697a      	ldr	r2, [r7, #20]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d106      	bne.n	800d8c4 <netif_add+0xfc>
 800d8b6:	4b25      	ldr	r3, [pc, #148]	; (800d94c <netif_add+0x184>)
 800d8b8:	f240 128b 	movw	r2, #395	; 0x18b
 800d8bc:	492b      	ldr	r1, [pc, #172]	; (800d96c <netif_add+0x1a4>)
 800d8be:	4825      	ldr	r0, [pc, #148]	; (800d954 <netif_add+0x18c>)
 800d8c0:	f00c fb3a 	bl	8019f38 <iprintf>
        num_netifs++;
 800d8c4:	693b      	ldr	r3, [r7, #16]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	2bff      	cmp	r3, #255	; 0xff
 800d8ce:	dd06      	ble.n	800d8de <netif_add+0x116>
 800d8d0:	4b1e      	ldr	r3, [pc, #120]	; (800d94c <netif_add+0x184>)
 800d8d2:	f240 128d 	movw	r2, #397	; 0x18d
 800d8d6:	4926      	ldr	r1, [pc, #152]	; (800d970 <netif_add+0x1a8>)
 800d8d8:	481e      	ldr	r0, [pc, #120]	; (800d954 <netif_add+0x18c>)
 800d8da:	f00c fb2d 	bl	8019f38 <iprintf>
        if (netif2->num == netif->num) {
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d108      	bne.n	800d900 <netif_add+0x138>
          netif->num++;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d8f4:	3301      	adds	r3, #1
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800d8fe:	e005      	b.n	800d90c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	617b      	str	r3, [r7, #20]
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d1d0      	bne.n	800d8ae <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d1be      	bne.n	800d890 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d918:	2bfe      	cmp	r3, #254	; 0xfe
 800d91a:	d103      	bne.n	800d924 <netif_add+0x15c>
    netif_num = 0;
 800d91c:	4b11      	ldr	r3, [pc, #68]	; (800d964 <netif_add+0x19c>)
 800d91e:	2200      	movs	r2, #0
 800d920:	701a      	strb	r2, [r3, #0]
 800d922:	e006      	b.n	800d932 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d92a:	3301      	adds	r3, #1
 800d92c:	b2da      	uxtb	r2, r3
 800d92e:	4b0d      	ldr	r3, [pc, #52]	; (800d964 <netif_add+0x19c>)
 800d930:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d932:	4b0d      	ldr	r3, [pc, #52]	; (800d968 <netif_add+0x1a0>)
 800d934:	681a      	ldr	r2, [r3, #0]
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d93a:	4a0b      	ldr	r2, [pc, #44]	; (800d968 <netif_add+0x1a0>)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d940:	68fb      	ldr	r3, [r7, #12]
}
 800d942:	4618      	mov	r0, r3
 800d944:	3718      	adds	r7, #24
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	0801c4d0 	.word	0x0801c4d0
 800d950:	0801c564 	.word	0x0801c564
 800d954:	0801c520 	.word	0x0801c520
 800d958:	0801c580 	.word	0x0801c580
 800d95c:	08040274 	.word	0x08040274
 800d960:	0800dd8b 	.word	0x0800dd8b
 800d964:	200102e4 	.word	0x200102e4
 800d968:	20016e94 	.word	0x20016e94
 800d96c:	0801c5a4 	.word	0x0801c5a4
 800d970:	0801c5b8 	.word	0x0801c5b8

0800d974 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d97e:	6839      	ldr	r1, [r7, #0]
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f002 fe81 	bl	8010688 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d986:	6839      	ldr	r1, [r7, #0]
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f007 ff05 	bl	8015798 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d98e:	bf00      	nop
 800d990:	3708      	adds	r7, #8
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
	...

0800d998 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b086      	sub	sp, #24
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d106      	bne.n	800d9b8 <netif_do_set_ipaddr+0x20>
 800d9aa:	4b1d      	ldr	r3, [pc, #116]	; (800da20 <netif_do_set_ipaddr+0x88>)
 800d9ac:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d9b0:	491c      	ldr	r1, [pc, #112]	; (800da24 <netif_do_set_ipaddr+0x8c>)
 800d9b2:	481d      	ldr	r0, [pc, #116]	; (800da28 <netif_do_set_ipaddr+0x90>)
 800d9b4:	f00c fac0 	bl	8019f38 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d106      	bne.n	800d9cc <netif_do_set_ipaddr+0x34>
 800d9be:	4b18      	ldr	r3, [pc, #96]	; (800da20 <netif_do_set_ipaddr+0x88>)
 800d9c0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d9c4:	4917      	ldr	r1, [pc, #92]	; (800da24 <netif_do_set_ipaddr+0x8c>)
 800d9c6:	4818      	ldr	r0, [pc, #96]	; (800da28 <netif_do_set_ipaddr+0x90>)
 800d9c8:	f00c fab6 	bl	8019f38 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	3304      	adds	r3, #4
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d01c      	beq.n	800da14 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	3304      	adds	r3, #4
 800d9e4:	681a      	ldr	r2, [r3, #0]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d9ea:	f107 0314 	add.w	r3, r7, #20
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f7ff ffbf 	bl	800d974 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d002      	beq.n	800da02 <netif_do_set_ipaddr+0x6a>
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	e000      	b.n	800da04 <netif_do_set_ipaddr+0x6c>
 800da02:	2300      	movs	r3, #0
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800da08:	2101      	movs	r1, #1
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f000 f8d2 	bl	800dbb4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800da10:	2301      	movs	r3, #1
 800da12:	e000      	b.n	800da16 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800da14:	2300      	movs	r3, #0
}
 800da16:	4618      	mov	r0, r3
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	0801c4d0 	.word	0x0801c4d0
 800da24:	0801c5e8 	.word	0x0801c5e8
 800da28:	0801c520 	.word	0x0801c520

0800da2c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b085      	sub	sp, #20
 800da30:	af00      	add	r7, sp, #0
 800da32:	60f8      	str	r0, [r7, #12]
 800da34:	60b9      	str	r1, [r7, #8]
 800da36:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	3308      	adds	r3, #8
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	429a      	cmp	r2, r3
 800da44:	d00a      	beq.n	800da5c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d002      	beq.n	800da52 <netif_do_set_netmask+0x26>
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	e000      	b.n	800da54 <netif_do_set_netmask+0x28>
 800da52:	2300      	movs	r3, #0
 800da54:	68fa      	ldr	r2, [r7, #12]
 800da56:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800da58:	2301      	movs	r3, #1
 800da5a:	e000      	b.n	800da5e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3714      	adds	r7, #20
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr

0800da6a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800da6a:	b480      	push	{r7}
 800da6c:	b085      	sub	sp, #20
 800da6e:	af00      	add	r7, sp, #0
 800da70:	60f8      	str	r0, [r7, #12]
 800da72:	60b9      	str	r1, [r7, #8]
 800da74:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	681a      	ldr	r2, [r3, #0]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	330c      	adds	r3, #12
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	429a      	cmp	r2, r3
 800da82:	d00a      	beq.n	800da9a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d002      	beq.n	800da90 <netif_do_set_gw+0x26>
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	e000      	b.n	800da92 <netif_do_set_gw+0x28>
 800da90:	2300      	movs	r3, #0
 800da92:	68fa      	ldr	r2, [r7, #12]
 800da94:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800da96:	2301      	movs	r3, #1
 800da98:	e000      	b.n	800da9c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3714      	adds	r7, #20
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b088      	sub	sp, #32
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	607a      	str	r2, [r7, #4]
 800dab4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dab6:	2300      	movs	r3, #0
 800dab8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800daba:	2300      	movs	r3, #0
 800dabc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d101      	bne.n	800dac8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dac4:	4b1c      	ldr	r3, [pc, #112]	; (800db38 <netif_set_addr+0x90>)
 800dac6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d101      	bne.n	800dad2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dace:	4b1a      	ldr	r3, [pc, #104]	; (800db38 <netif_set_addr+0x90>)
 800dad0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d101      	bne.n	800dadc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dad8:	4b17      	ldr	r3, [pc, #92]	; (800db38 <netif_set_addr+0x90>)
 800dada:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d003      	beq.n	800daea <netif_set_addr+0x42>
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d101      	bne.n	800daee <netif_set_addr+0x46>
 800daea:	2301      	movs	r3, #1
 800daec:	e000      	b.n	800daf0 <netif_set_addr+0x48>
 800daee:	2300      	movs	r3, #0
 800daf0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d006      	beq.n	800db06 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800daf8:	f107 0310 	add.w	r3, r7, #16
 800dafc:	461a      	mov	r2, r3
 800dafe:	68b9      	ldr	r1, [r7, #8]
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f7ff ff49 	bl	800d998 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800db06:	69fa      	ldr	r2, [r7, #28]
 800db08:	6879      	ldr	r1, [r7, #4]
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	f7ff ff8e 	bl	800da2c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800db10:	69ba      	ldr	r2, [r7, #24]
 800db12:	6839      	ldr	r1, [r7, #0]
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7ff ffa8 	bl	800da6a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d106      	bne.n	800db2e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800db20:	f107 0310 	add.w	r3, r7, #16
 800db24:	461a      	mov	r2, r3
 800db26:	68b9      	ldr	r1, [r7, #8]
 800db28:	68f8      	ldr	r0, [r7, #12]
 800db2a:	f7ff ff35 	bl	800d998 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800db2e:	bf00      	nop
 800db30:	3720      	adds	r7, #32
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	08040274 	.word	0x08040274

0800db3c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800db44:	4a04      	ldr	r2, [pc, #16]	; (800db58 <netif_set_default+0x1c>)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800db4a:	bf00      	nop
 800db4c:	370c      	adds	r7, #12
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	20016e98 	.word	0x20016e98

0800db5c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b082      	sub	sp, #8
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d107      	bne.n	800db7a <netif_set_up+0x1e>
 800db6a:	4b0f      	ldr	r3, [pc, #60]	; (800dba8 <netif_set_up+0x4c>)
 800db6c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800db70:	490e      	ldr	r1, [pc, #56]	; (800dbac <netif_set_up+0x50>)
 800db72:	480f      	ldr	r0, [pc, #60]	; (800dbb0 <netif_set_up+0x54>)
 800db74:	f00c f9e0 	bl	8019f38 <iprintf>
 800db78:	e013      	b.n	800dba2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800db80:	f003 0301 	and.w	r3, r3, #1
 800db84:	2b00      	cmp	r3, #0
 800db86:	d10c      	bne.n	800dba2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800db8e:	f043 0301 	orr.w	r3, r3, #1
 800db92:	b2da      	uxtb	r2, r3
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800db9a:	2103      	movs	r1, #3
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f000 f809 	bl	800dbb4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dba2:	3708      	adds	r7, #8
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bd80      	pop	{r7, pc}
 800dba8:	0801c4d0 	.word	0x0801c4d0
 800dbac:	0801c658 	.word	0x0801c658
 800dbb0:	0801c520 	.word	0x0801c520

0800dbb4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
 800dbbc:	460b      	mov	r3, r1
 800dbbe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d106      	bne.n	800dbd4 <netif_issue_reports+0x20>
 800dbc6:	4b18      	ldr	r3, [pc, #96]	; (800dc28 <netif_issue_reports+0x74>)
 800dbc8:	f240 326d 	movw	r2, #877	; 0x36d
 800dbcc:	4917      	ldr	r1, [pc, #92]	; (800dc2c <netif_issue_reports+0x78>)
 800dbce:	4818      	ldr	r0, [pc, #96]	; (800dc30 <netif_issue_reports+0x7c>)
 800dbd0:	f00c f9b2 	bl	8019f38 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dbda:	f003 0304 	and.w	r3, r3, #4
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d01e      	beq.n	800dc20 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dbe8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d017      	beq.n	800dc20 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dbf0:	78fb      	ldrb	r3, [r7, #3]
 800dbf2:	f003 0301 	and.w	r3, r3, #1
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d013      	beq.n	800dc22 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	3304      	adds	r3, #4
 800dbfe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d00e      	beq.n	800dc22 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dc0a:	f003 0308 	and.w	r3, r3, #8
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d007      	beq.n	800dc22 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	3304      	adds	r3, #4
 800dc16:	4619      	mov	r1, r3
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f00a fbd9 	bl	80183d0 <etharp_request>
 800dc1e:	e000      	b.n	800dc22 <netif_issue_reports+0x6e>
    return;
 800dc20:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	0801c4d0 	.word	0x0801c4d0
 800dc2c:	0801c674 	.word	0x0801c674
 800dc30:	0801c520 	.word	0x0801c520

0800dc34 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d107      	bne.n	800dc52 <netif_set_down+0x1e>
 800dc42:	4b12      	ldr	r3, [pc, #72]	; (800dc8c <netif_set_down+0x58>)
 800dc44:	f240 329b 	movw	r2, #923	; 0x39b
 800dc48:	4911      	ldr	r1, [pc, #68]	; (800dc90 <netif_set_down+0x5c>)
 800dc4a:	4812      	ldr	r0, [pc, #72]	; (800dc94 <netif_set_down+0x60>)
 800dc4c:	f00c f974 	bl	8019f38 <iprintf>
 800dc50:	e019      	b.n	800dc86 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dc58:	f003 0301 	and.w	r3, r3, #1
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d012      	beq.n	800dc86 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dc66:	f023 0301 	bic.w	r3, r3, #1
 800dc6a:	b2da      	uxtb	r2, r3
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dc78:	f003 0308 	and.w	r3, r3, #8
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d002      	beq.n	800dc86 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f009 ff5f 	bl	8017b44 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dc86:	3708      	adds	r7, #8
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	0801c4d0 	.word	0x0801c4d0
 800dc90:	0801c698 	.word	0x0801c698
 800dc94:	0801c520 	.word	0x0801c520

0800dc98 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d107      	bne.n	800dcb6 <netif_set_link_up+0x1e>
 800dca6:	4b15      	ldr	r3, [pc, #84]	; (800dcfc <netif_set_link_up+0x64>)
 800dca8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800dcac:	4914      	ldr	r1, [pc, #80]	; (800dd00 <netif_set_link_up+0x68>)
 800dcae:	4815      	ldr	r0, [pc, #84]	; (800dd04 <netif_set_link_up+0x6c>)
 800dcb0:	f00c f942 	bl	8019f38 <iprintf>
 800dcb4:	e01e      	b.n	800dcf4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dcbc:	f003 0304 	and.w	r3, r3, #4
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d117      	bne.n	800dcf4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dcca:	f043 0304 	orr.w	r3, r3, #4
 800dcce:	b2da      	uxtb	r2, r3
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f008 f988 	bl	8015fec <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dcdc:	2103      	movs	r1, #3
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7ff ff68 	bl	800dbb4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	69db      	ldr	r3, [r3, #28]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d003      	beq.n	800dcf4 <netif_set_link_up+0x5c>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	69db      	ldr	r3, [r3, #28]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800dcf4:	3708      	adds	r7, #8
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	0801c4d0 	.word	0x0801c4d0
 800dd00:	0801c6b8 	.word	0x0801c6b8
 800dd04:	0801c520 	.word	0x0801c520

0800dd08 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b082      	sub	sp, #8
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d107      	bne.n	800dd26 <netif_set_link_down+0x1e>
 800dd16:	4b11      	ldr	r3, [pc, #68]	; (800dd5c <netif_set_link_down+0x54>)
 800dd18:	f240 4206 	movw	r2, #1030	; 0x406
 800dd1c:	4910      	ldr	r1, [pc, #64]	; (800dd60 <netif_set_link_down+0x58>)
 800dd1e:	4811      	ldr	r0, [pc, #68]	; (800dd64 <netif_set_link_down+0x5c>)
 800dd20:	f00c f90a 	bl	8019f38 <iprintf>
 800dd24:	e017      	b.n	800dd56 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd2c:	f003 0304 	and.w	r3, r3, #4
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d010      	beq.n	800dd56 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800dd3a:	f023 0304 	bic.w	r3, r3, #4
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	69db      	ldr	r3, [r3, #28]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d003      	beq.n	800dd56 <netif_set_link_down+0x4e>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	69db      	ldr	r3, [r3, #28]
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	0801c4d0 	.word	0x0801c4d0
 800dd60:	0801c6dc 	.word	0x0801c6dc
 800dd64:	0801c520 	.word	0x0801c520

0800dd68 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d002      	beq.n	800dd7e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	683a      	ldr	r2, [r7, #0]
 800dd7c:	61da      	str	r2, [r3, #28]
  }
}
 800dd7e:	bf00      	nop
 800dd80:	370c      	adds	r7, #12
 800dd82:	46bd      	mov	sp, r7
 800dd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd88:	4770      	bx	lr

0800dd8a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800dd8a:	b480      	push	{r7}
 800dd8c:	b085      	sub	sp, #20
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	60f8      	str	r0, [r7, #12]
 800dd92:	60b9      	str	r1, [r7, #8]
 800dd94:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800dd96:	f06f 030b 	mvn.w	r3, #11
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3714      	adds	r7, #20
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr
	...

0800dda8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b085      	sub	sp, #20
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	4603      	mov	r3, r0
 800ddb0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ddb2:	79fb      	ldrb	r3, [r7, #7]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d013      	beq.n	800dde0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ddb8:	4b0d      	ldr	r3, [pc, #52]	; (800ddf0 <netif_get_by_index+0x48>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	60fb      	str	r3, [r7, #12]
 800ddbe:	e00c      	b.n	800ddda <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	79fa      	ldrb	r2, [r7, #7]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d101      	bne.n	800ddd4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	e006      	b.n	800dde2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	60fb      	str	r3, [r7, #12]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d1ef      	bne.n	800ddc0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800dde0:	2300      	movs	r3, #0
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3714      	adds	r7, #20
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr
 800ddee:	bf00      	nop
 800ddf0:	20016e94 	.word	0x20016e94

0800ddf4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ddfa:	f00c f81f 	bl	8019e3c <sys_arch_protect>
 800ddfe:	6038      	str	r0, [r7, #0]
 800de00:	4b0d      	ldr	r3, [pc, #52]	; (800de38 <pbuf_free_ooseq+0x44>)
 800de02:	2200      	movs	r2, #0
 800de04:	701a      	strb	r2, [r3, #0]
 800de06:	6838      	ldr	r0, [r7, #0]
 800de08:	f00c f826 	bl	8019e58 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800de0c:	4b0b      	ldr	r3, [pc, #44]	; (800de3c <pbuf_free_ooseq+0x48>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	607b      	str	r3, [r7, #4]
 800de12:	e00a      	b.n	800de2a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d003      	beq.n	800de24 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f002 fc71 	bl	8010704 <tcp_free_ooseq>
      return;
 800de22:	e005      	b.n	800de30 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	68db      	ldr	r3, [r3, #12]
 800de28:	607b      	str	r3, [r7, #4]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d1f1      	bne.n	800de14 <pbuf_free_ooseq+0x20>
    }
  }
}
 800de30:	3708      	adds	r7, #8
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	20016e9c 	.word	0x20016e9c
 800de3c:	20016ea4 	.word	0x20016ea4

0800de40 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800de48:	f7ff ffd4 	bl	800ddf4 <pbuf_free_ooseq>
}
 800de4c:	bf00      	nop
 800de4e:	3708      	adds	r7, #8
 800de50:	46bd      	mov	sp, r7
 800de52:	bd80      	pop	{r7, pc}

0800de54 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800de5a:	f00b ffef 	bl	8019e3c <sys_arch_protect>
 800de5e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800de60:	4b0f      	ldr	r3, [pc, #60]	; (800dea0 <pbuf_pool_is_empty+0x4c>)
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800de66:	4b0e      	ldr	r3, [pc, #56]	; (800dea0 <pbuf_pool_is_empty+0x4c>)
 800de68:	2201      	movs	r2, #1
 800de6a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f00b fff3 	bl	8019e58 <sys_arch_unprotect>

  if (!queued) {
 800de72:	78fb      	ldrb	r3, [r7, #3]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d10f      	bne.n	800de98 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800de78:	2100      	movs	r1, #0
 800de7a:	480a      	ldr	r0, [pc, #40]	; (800dea4 <pbuf_pool_is_empty+0x50>)
 800de7c:	f7fd fbdc 	bl	800b638 <tcpip_try_callback>
 800de80:	4603      	mov	r3, r0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d008      	beq.n	800de98 <pbuf_pool_is_empty+0x44>
 800de86:	f00b ffd9 	bl	8019e3c <sys_arch_protect>
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	4b04      	ldr	r3, [pc, #16]	; (800dea0 <pbuf_pool_is_empty+0x4c>)
 800de8e:	2200      	movs	r2, #0
 800de90:	701a      	strb	r2, [r3, #0]
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f00b ffe0 	bl	8019e58 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800de98:	bf00      	nop
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	20016e9c 	.word	0x20016e9c
 800dea4:	0800de41 	.word	0x0800de41

0800dea8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b085      	sub	sp, #20
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	4611      	mov	r1, r2
 800deb4:	461a      	mov	r2, r3
 800deb6:	460b      	mov	r3, r1
 800deb8:	80fb      	strh	r3, [r7, #6]
 800deba:	4613      	mov	r3, r2
 800debc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2200      	movs	r2, #0
 800dec2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	88fa      	ldrh	r2, [r7, #6]
 800dece:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	88ba      	ldrh	r2, [r7, #4]
 800ded4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ded6:	8b3b      	ldrh	r3, [r7, #24]
 800ded8:	b2da      	uxtb	r2, r3
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	7f3a      	ldrb	r2, [r7, #28]
 800dee2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2201      	movs	r2, #1
 800dee8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2200      	movs	r2, #0
 800deee:	73da      	strb	r2, [r3, #15]
}
 800def0:	bf00      	nop
 800def2:	3714      	adds	r7, #20
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b08c      	sub	sp, #48	; 0x30
 800df00:	af02      	add	r7, sp, #8
 800df02:	4603      	mov	r3, r0
 800df04:	71fb      	strb	r3, [r7, #7]
 800df06:	460b      	mov	r3, r1
 800df08:	80bb      	strh	r3, [r7, #4]
 800df0a:	4613      	mov	r3, r2
 800df0c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800df0e:	79fb      	ldrb	r3, [r7, #7]
 800df10:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800df12:	887b      	ldrh	r3, [r7, #2]
 800df14:	2b41      	cmp	r3, #65	; 0x41
 800df16:	d00b      	beq.n	800df30 <pbuf_alloc+0x34>
 800df18:	2b41      	cmp	r3, #65	; 0x41
 800df1a:	dc02      	bgt.n	800df22 <pbuf_alloc+0x26>
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	d007      	beq.n	800df30 <pbuf_alloc+0x34>
 800df20:	e0c2      	b.n	800e0a8 <pbuf_alloc+0x1ac>
 800df22:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800df26:	d00b      	beq.n	800df40 <pbuf_alloc+0x44>
 800df28:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800df2c:	d070      	beq.n	800e010 <pbuf_alloc+0x114>
 800df2e:	e0bb      	b.n	800e0a8 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800df30:	887a      	ldrh	r2, [r7, #2]
 800df32:	88bb      	ldrh	r3, [r7, #4]
 800df34:	4619      	mov	r1, r3
 800df36:	2000      	movs	r0, #0
 800df38:	f000 f8d2 	bl	800e0e0 <pbuf_alloc_reference>
 800df3c:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800df3e:	e0bd      	b.n	800e0bc <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800df40:	2300      	movs	r3, #0
 800df42:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800df44:	2300      	movs	r3, #0
 800df46:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800df48:	88bb      	ldrh	r3, [r7, #4]
 800df4a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800df4c:	200c      	movs	r0, #12
 800df4e:	f7ff fbb7 	bl	800d6c0 <memp_malloc>
 800df52:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d109      	bne.n	800df6e <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800df5a:	f7ff ff7b 	bl	800de54 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800df5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df60:	2b00      	cmp	r3, #0
 800df62:	d002      	beq.n	800df6a <pbuf_alloc+0x6e>
            pbuf_free(p);
 800df64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800df66:	f000 faa9 	bl	800e4bc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800df6a:	2300      	movs	r3, #0
 800df6c:	e0a7      	b.n	800e0be <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800df6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df70:	3303      	adds	r3, #3
 800df72:	b29b      	uxth	r3, r3
 800df74:	f023 0303 	bic.w	r3, r3, #3
 800df78:	b29b      	uxth	r3, r3
 800df7a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800df7e:	b29b      	uxth	r3, r3
 800df80:	8b7a      	ldrh	r2, [r7, #26]
 800df82:	4293      	cmp	r3, r2
 800df84:	bf28      	it	cs
 800df86:	4613      	movcs	r3, r2
 800df88:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800df8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df8c:	3310      	adds	r3, #16
 800df8e:	693a      	ldr	r2, [r7, #16]
 800df90:	4413      	add	r3, r2
 800df92:	3303      	adds	r3, #3
 800df94:	f023 0303 	bic.w	r3, r3, #3
 800df98:	4618      	mov	r0, r3
 800df9a:	89f9      	ldrh	r1, [r7, #14]
 800df9c:	8b7a      	ldrh	r2, [r7, #26]
 800df9e:	2300      	movs	r3, #0
 800dfa0:	9301      	str	r3, [sp, #4]
 800dfa2:	887b      	ldrh	r3, [r7, #2]
 800dfa4:	9300      	str	r3, [sp, #0]
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	4601      	mov	r1, r0
 800dfaa:	6938      	ldr	r0, [r7, #16]
 800dfac:	f7ff ff7c 	bl	800dea8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	f003 0303 	and.w	r3, r3, #3
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d006      	beq.n	800dfca <pbuf_alloc+0xce>
 800dfbc:	4b42      	ldr	r3, [pc, #264]	; (800e0c8 <pbuf_alloc+0x1cc>)
 800dfbe:	f240 1201 	movw	r2, #257	; 0x101
 800dfc2:	4942      	ldr	r1, [pc, #264]	; (800e0cc <pbuf_alloc+0x1d0>)
 800dfc4:	4842      	ldr	r0, [pc, #264]	; (800e0d0 <pbuf_alloc+0x1d4>)
 800dfc6:	f00b ffb7 	bl	8019f38 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800dfca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfcc:	3303      	adds	r3, #3
 800dfce:	f023 0303 	bic.w	r3, r3, #3
 800dfd2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800dfd6:	d106      	bne.n	800dfe6 <pbuf_alloc+0xea>
 800dfd8:	4b3b      	ldr	r3, [pc, #236]	; (800e0c8 <pbuf_alloc+0x1cc>)
 800dfda:	f240 1203 	movw	r2, #259	; 0x103
 800dfde:	493d      	ldr	r1, [pc, #244]	; (800e0d4 <pbuf_alloc+0x1d8>)
 800dfe0:	483b      	ldr	r0, [pc, #236]	; (800e0d0 <pbuf_alloc+0x1d4>)
 800dfe2:	f00b ffa9 	bl	8019f38 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800dfe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d102      	bne.n	800dff2 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	627b      	str	r3, [r7, #36]	; 0x24
 800dff0:	e002      	b.n	800dff8 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800dff2:	69fb      	ldr	r3, [r7, #28]
 800dff4:	693a      	ldr	r2, [r7, #16]
 800dff6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800dff8:	693b      	ldr	r3, [r7, #16]
 800dffa:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800dffc:	8b7a      	ldrh	r2, [r7, #26]
 800dffe:	89fb      	ldrh	r3, [r7, #14]
 800e000:	1ad3      	subs	r3, r2, r3
 800e002:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e004:	2300      	movs	r3, #0
 800e006:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e008:	8b7b      	ldrh	r3, [r7, #26]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d19e      	bne.n	800df4c <pbuf_alloc+0x50>
      break;
 800e00e:	e055      	b.n	800e0bc <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e010:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e012:	3303      	adds	r3, #3
 800e014:	b29b      	uxth	r3, r3
 800e016:	f023 0303 	bic.w	r3, r3, #3
 800e01a:	b29a      	uxth	r2, r3
 800e01c:	88bb      	ldrh	r3, [r7, #4]
 800e01e:	3303      	adds	r3, #3
 800e020:	b29b      	uxth	r3, r3
 800e022:	f023 0303 	bic.w	r3, r3, #3
 800e026:	b29b      	uxth	r3, r3
 800e028:	4413      	add	r3, r2
 800e02a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e02c:	8b3b      	ldrh	r3, [r7, #24]
 800e02e:	3310      	adds	r3, #16
 800e030:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e032:	8b3a      	ldrh	r2, [r7, #24]
 800e034:	88bb      	ldrh	r3, [r7, #4]
 800e036:	3303      	adds	r3, #3
 800e038:	f023 0303 	bic.w	r3, r3, #3
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d306      	bcc.n	800e04e <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e040:	8afa      	ldrh	r2, [r7, #22]
 800e042:	88bb      	ldrh	r3, [r7, #4]
 800e044:	3303      	adds	r3, #3
 800e046:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d201      	bcs.n	800e052 <pbuf_alloc+0x156>
        return NULL;
 800e04e:	2300      	movs	r3, #0
 800e050:	e035      	b.n	800e0be <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e052:	8afb      	ldrh	r3, [r7, #22]
 800e054:	4618      	mov	r0, r3
 800e056:	f7ff f9b1 	bl	800d3bc <mem_malloc>
 800e05a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d101      	bne.n	800e066 <pbuf_alloc+0x16a>
        return NULL;
 800e062:	2300      	movs	r3, #0
 800e064:	e02b      	b.n	800e0be <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e066:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e068:	3310      	adds	r3, #16
 800e06a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e06c:	4413      	add	r3, r2
 800e06e:	3303      	adds	r3, #3
 800e070:	f023 0303 	bic.w	r3, r3, #3
 800e074:	4618      	mov	r0, r3
 800e076:	88b9      	ldrh	r1, [r7, #4]
 800e078:	88ba      	ldrh	r2, [r7, #4]
 800e07a:	2300      	movs	r3, #0
 800e07c:	9301      	str	r3, [sp, #4]
 800e07e:	887b      	ldrh	r3, [r7, #2]
 800e080:	9300      	str	r3, [sp, #0]
 800e082:	460b      	mov	r3, r1
 800e084:	4601      	mov	r1, r0
 800e086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e088:	f7ff ff0e 	bl	800dea8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e08e:	685b      	ldr	r3, [r3, #4]
 800e090:	f003 0303 	and.w	r3, r3, #3
 800e094:	2b00      	cmp	r3, #0
 800e096:	d010      	beq.n	800e0ba <pbuf_alloc+0x1be>
 800e098:	4b0b      	ldr	r3, [pc, #44]	; (800e0c8 <pbuf_alloc+0x1cc>)
 800e09a:	f240 1223 	movw	r2, #291	; 0x123
 800e09e:	490e      	ldr	r1, [pc, #56]	; (800e0d8 <pbuf_alloc+0x1dc>)
 800e0a0:	480b      	ldr	r0, [pc, #44]	; (800e0d0 <pbuf_alloc+0x1d4>)
 800e0a2:	f00b ff49 	bl	8019f38 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e0a6:	e008      	b.n	800e0ba <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e0a8:	4b07      	ldr	r3, [pc, #28]	; (800e0c8 <pbuf_alloc+0x1cc>)
 800e0aa:	f240 1227 	movw	r2, #295	; 0x127
 800e0ae:	490b      	ldr	r1, [pc, #44]	; (800e0dc <pbuf_alloc+0x1e0>)
 800e0b0:	4807      	ldr	r0, [pc, #28]	; (800e0d0 <pbuf_alloc+0x1d4>)
 800e0b2:	f00b ff41 	bl	8019f38 <iprintf>
      return NULL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	e001      	b.n	800e0be <pbuf_alloc+0x1c2>
      break;
 800e0ba:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3728      	adds	r7, #40	; 0x28
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	0801c700 	.word	0x0801c700
 800e0cc:	0801c730 	.word	0x0801c730
 800e0d0:	0801c760 	.word	0x0801c760
 800e0d4:	0801c788 	.word	0x0801c788
 800e0d8:	0801c7bc 	.word	0x0801c7bc
 800e0dc:	0801c7e8 	.word	0x0801c7e8

0800e0e0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af02      	add	r7, sp, #8
 800e0e6:	6078      	str	r0, [r7, #4]
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	807b      	strh	r3, [r7, #2]
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e0f0:	883b      	ldrh	r3, [r7, #0]
 800e0f2:	2b41      	cmp	r3, #65	; 0x41
 800e0f4:	d009      	beq.n	800e10a <pbuf_alloc_reference+0x2a>
 800e0f6:	883b      	ldrh	r3, [r7, #0]
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d006      	beq.n	800e10a <pbuf_alloc_reference+0x2a>
 800e0fc:	4b0f      	ldr	r3, [pc, #60]	; (800e13c <pbuf_alloc_reference+0x5c>)
 800e0fe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e102:	490f      	ldr	r1, [pc, #60]	; (800e140 <pbuf_alloc_reference+0x60>)
 800e104:	480f      	ldr	r0, [pc, #60]	; (800e144 <pbuf_alloc_reference+0x64>)
 800e106:	f00b ff17 	bl	8019f38 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e10a:	200b      	movs	r0, #11
 800e10c:	f7ff fad8 	bl	800d6c0 <memp_malloc>
 800e110:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d101      	bne.n	800e11c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e118:	2300      	movs	r3, #0
 800e11a:	e00b      	b.n	800e134 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e11c:	8879      	ldrh	r1, [r7, #2]
 800e11e:	887a      	ldrh	r2, [r7, #2]
 800e120:	2300      	movs	r3, #0
 800e122:	9301      	str	r3, [sp, #4]
 800e124:	883b      	ldrh	r3, [r7, #0]
 800e126:	9300      	str	r3, [sp, #0]
 800e128:	460b      	mov	r3, r1
 800e12a:	6879      	ldr	r1, [r7, #4]
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f7ff febb 	bl	800dea8 <pbuf_init_alloced_pbuf>
  return p;
 800e132:	68fb      	ldr	r3, [r7, #12]
}
 800e134:	4618      	mov	r0, r3
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}
 800e13c:	0801c700 	.word	0x0801c700
 800e140:	0801c804 	.word	0x0801c804
 800e144:	0801c760 	.word	0x0801c760

0800e148 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b088      	sub	sp, #32
 800e14c:	af02      	add	r7, sp, #8
 800e14e:	607b      	str	r3, [r7, #4]
 800e150:	4603      	mov	r3, r0
 800e152:	73fb      	strb	r3, [r7, #15]
 800e154:	460b      	mov	r3, r1
 800e156:	81bb      	strh	r3, [r7, #12]
 800e158:	4613      	mov	r3, r2
 800e15a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
 800e15e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e160:	8a7b      	ldrh	r3, [r7, #18]
 800e162:	3303      	adds	r3, #3
 800e164:	f023 0203 	bic.w	r2, r3, #3
 800e168:	89bb      	ldrh	r3, [r7, #12]
 800e16a:	441a      	add	r2, r3
 800e16c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e16e:	429a      	cmp	r2, r3
 800e170:	d901      	bls.n	800e176 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e172:	2300      	movs	r3, #0
 800e174:	e018      	b.n	800e1a8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e176:	6a3b      	ldr	r3, [r7, #32]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d007      	beq.n	800e18c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e17c:	8a7b      	ldrh	r3, [r7, #18]
 800e17e:	3303      	adds	r3, #3
 800e180:	f023 0303 	bic.w	r3, r3, #3
 800e184:	6a3a      	ldr	r2, [r7, #32]
 800e186:	4413      	add	r3, r2
 800e188:	617b      	str	r3, [r7, #20]
 800e18a:	e001      	b.n	800e190 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e18c:	2300      	movs	r3, #0
 800e18e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	89b9      	ldrh	r1, [r7, #12]
 800e194:	89ba      	ldrh	r2, [r7, #12]
 800e196:	2302      	movs	r3, #2
 800e198:	9301      	str	r3, [sp, #4]
 800e19a:	897b      	ldrh	r3, [r7, #10]
 800e19c:	9300      	str	r3, [sp, #0]
 800e19e:	460b      	mov	r3, r1
 800e1a0:	6979      	ldr	r1, [r7, #20]
 800e1a2:	f7ff fe81 	bl	800dea8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e1a6:	687b      	ldr	r3, [r7, #4]
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3718      	adds	r7, #24
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d106      	bne.n	800e1d0 <pbuf_realloc+0x20>
 800e1c2:	4b3a      	ldr	r3, [pc, #232]	; (800e2ac <pbuf_realloc+0xfc>)
 800e1c4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e1c8:	4939      	ldr	r1, [pc, #228]	; (800e2b0 <pbuf_realloc+0x100>)
 800e1ca:	483a      	ldr	r0, [pc, #232]	; (800e2b4 <pbuf_realloc+0x104>)
 800e1cc:	f00b feb4 	bl	8019f38 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	891b      	ldrh	r3, [r3, #8]
 800e1d4:	887a      	ldrh	r2, [r7, #2]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d264      	bcs.n	800e2a4 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	891a      	ldrh	r2, [r3, #8]
 800e1de:	887b      	ldrh	r3, [r7, #2]
 800e1e0:	1ad3      	subs	r3, r2, r3
 800e1e2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e1e4:	887b      	ldrh	r3, [r7, #2]
 800e1e6:	817b      	strh	r3, [r7, #10]
  q = p;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e1ec:	e018      	b.n	800e220 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	895b      	ldrh	r3, [r3, #10]
 800e1f2:	897a      	ldrh	r2, [r7, #10]
 800e1f4:	1ad3      	subs	r3, r2, r3
 800e1f6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	891a      	ldrh	r2, [r3, #8]
 800e1fc:	893b      	ldrh	r3, [r7, #8]
 800e1fe:	1ad3      	subs	r3, r2, r3
 800e200:	b29a      	uxth	r2, r3
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d106      	bne.n	800e220 <pbuf_realloc+0x70>
 800e212:	4b26      	ldr	r3, [pc, #152]	; (800e2ac <pbuf_realloc+0xfc>)
 800e214:	f240 12af 	movw	r2, #431	; 0x1af
 800e218:	4927      	ldr	r1, [pc, #156]	; (800e2b8 <pbuf_realloc+0x108>)
 800e21a:	4826      	ldr	r0, [pc, #152]	; (800e2b4 <pbuf_realloc+0x104>)
 800e21c:	f00b fe8c 	bl	8019f38 <iprintf>
  while (rem_len > q->len) {
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	895b      	ldrh	r3, [r3, #10]
 800e224:	897a      	ldrh	r2, [r7, #10]
 800e226:	429a      	cmp	r2, r3
 800e228:	d8e1      	bhi.n	800e1ee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	7b1b      	ldrb	r3, [r3, #12]
 800e22e:	f003 030f 	and.w	r3, r3, #15
 800e232:	2b00      	cmp	r3, #0
 800e234:	d122      	bne.n	800e27c <pbuf_realloc+0xcc>
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	895b      	ldrh	r3, [r3, #10]
 800e23a:	897a      	ldrh	r2, [r7, #10]
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d01d      	beq.n	800e27c <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	7b5b      	ldrb	r3, [r3, #13]
 800e244:	f003 0302 	and.w	r3, r3, #2
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d117      	bne.n	800e27c <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	461a      	mov	r2, r3
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	1ad3      	subs	r3, r2, r3
 800e256:	b29a      	uxth	r2, r3
 800e258:	897b      	ldrh	r3, [r7, #10]
 800e25a:	4413      	add	r3, r2
 800e25c:	b29b      	uxth	r3, r3
 800e25e:	4619      	mov	r1, r3
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f7fe ffa1 	bl	800d1a8 <mem_trim>
 800e266:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d106      	bne.n	800e27c <pbuf_realloc+0xcc>
 800e26e:	4b0f      	ldr	r3, [pc, #60]	; (800e2ac <pbuf_realloc+0xfc>)
 800e270:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e274:	4911      	ldr	r1, [pc, #68]	; (800e2bc <pbuf_realloc+0x10c>)
 800e276:	480f      	ldr	r0, [pc, #60]	; (800e2b4 <pbuf_realloc+0x104>)
 800e278:	f00b fe5e 	bl	8019f38 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	897a      	ldrh	r2, [r7, #10]
 800e280:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	895a      	ldrh	r2, [r3, #10]
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d004      	beq.n	800e29c <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4618      	mov	r0, r3
 800e298:	f000 f910 	bl	800e4bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	601a      	str	r2, [r3, #0]
 800e2a2:	e000      	b.n	800e2a6 <pbuf_realloc+0xf6>
    return;
 800e2a4:	bf00      	nop

}
 800e2a6:	3710      	adds	r7, #16
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	0801c700 	.word	0x0801c700
 800e2b0:	0801c818 	.word	0x0801c818
 800e2b4:	0801c760 	.word	0x0801c760
 800e2b8:	0801c830 	.word	0x0801c830
 800e2bc:	0801c848 	.word	0x0801c848

0800e2c0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b086      	sub	sp, #24
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d106      	bne.n	800e2e2 <pbuf_add_header_impl+0x22>
 800e2d4:	4b2b      	ldr	r3, [pc, #172]	; (800e384 <pbuf_add_header_impl+0xc4>)
 800e2d6:	f240 12df 	movw	r2, #479	; 0x1df
 800e2da:	492b      	ldr	r1, [pc, #172]	; (800e388 <pbuf_add_header_impl+0xc8>)
 800e2dc:	482b      	ldr	r0, [pc, #172]	; (800e38c <pbuf_add_header_impl+0xcc>)
 800e2de:	f00b fe2b 	bl	8019f38 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d003      	beq.n	800e2f0 <pbuf_add_header_impl+0x30>
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2ee:	d301      	bcc.n	800e2f4 <pbuf_add_header_impl+0x34>
    return 1;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	e043      	b.n	800e37c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d101      	bne.n	800e2fe <pbuf_add_header_impl+0x3e>
    return 0;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	e03e      	b.n	800e37c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	891a      	ldrh	r2, [r3, #8]
 800e306:	8a7b      	ldrh	r3, [r7, #18]
 800e308:	4413      	add	r3, r2
 800e30a:	b29b      	uxth	r3, r3
 800e30c:	8a7a      	ldrh	r2, [r7, #18]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d901      	bls.n	800e316 <pbuf_add_header_impl+0x56>
    return 1;
 800e312:	2301      	movs	r3, #1
 800e314:	e032      	b.n	800e37c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	7b1b      	ldrb	r3, [r3, #12]
 800e31a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e31c:	8a3b      	ldrh	r3, [r7, #16]
 800e31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00c      	beq.n	800e340 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	685a      	ldr	r2, [r3, #4]
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	425b      	negs	r3, r3
 800e32e:	4413      	add	r3, r2
 800e330:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	3310      	adds	r3, #16
 800e336:	697a      	ldr	r2, [r7, #20]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d20d      	bcs.n	800e358 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e33c:	2301      	movs	r3, #1
 800e33e:	e01d      	b.n	800e37c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e340:	79fb      	ldrb	r3, [r7, #7]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d006      	beq.n	800e354 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	685a      	ldr	r2, [r3, #4]
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	425b      	negs	r3, r3
 800e34e:	4413      	add	r3, r2
 800e350:	617b      	str	r3, [r7, #20]
 800e352:	e001      	b.n	800e358 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e354:	2301      	movs	r3, #1
 800e356:	e011      	b.n	800e37c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	697a      	ldr	r2, [r7, #20]
 800e35c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	895a      	ldrh	r2, [r3, #10]
 800e362:	8a7b      	ldrh	r3, [r7, #18]
 800e364:	4413      	add	r3, r2
 800e366:	b29a      	uxth	r2, r3
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	891a      	ldrh	r2, [r3, #8]
 800e370:	8a7b      	ldrh	r3, [r7, #18]
 800e372:	4413      	add	r3, r2
 800e374:	b29a      	uxth	r2, r3
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	811a      	strh	r2, [r3, #8]


  return 0;
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3718      	adds	r7, #24
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	0801c700 	.word	0x0801c700
 800e388:	0801c864 	.word	0x0801c864
 800e38c:	0801c760 	.word	0x0801c760

0800e390 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e39a:	2200      	movs	r2, #0
 800e39c:	6839      	ldr	r1, [r7, #0]
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f7ff ff8e 	bl	800e2c0 <pbuf_add_header_impl>
 800e3a4:	4603      	mov	r3, r0
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3708      	adds	r7, #8
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
	...

0800e3b0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d106      	bne.n	800e3ce <pbuf_remove_header+0x1e>
 800e3c0:	4b20      	ldr	r3, [pc, #128]	; (800e444 <pbuf_remove_header+0x94>)
 800e3c2:	f240 224b 	movw	r2, #587	; 0x24b
 800e3c6:	4920      	ldr	r1, [pc, #128]	; (800e448 <pbuf_remove_header+0x98>)
 800e3c8:	4820      	ldr	r0, [pc, #128]	; (800e44c <pbuf_remove_header+0x9c>)
 800e3ca:	f00b fdb5 	bl	8019f38 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d003      	beq.n	800e3dc <pbuf_remove_header+0x2c>
 800e3d4:	683b      	ldr	r3, [r7, #0]
 800e3d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3da:	d301      	bcc.n	800e3e0 <pbuf_remove_header+0x30>
    return 1;
 800e3dc:	2301      	movs	r3, #1
 800e3de:	e02c      	b.n	800e43a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d101      	bne.n	800e3ea <pbuf_remove_header+0x3a>
    return 0;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	e027      	b.n	800e43a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	895b      	ldrh	r3, [r3, #10]
 800e3f2:	89fa      	ldrh	r2, [r7, #14]
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d908      	bls.n	800e40a <pbuf_remove_header+0x5a>
 800e3f8:	4b12      	ldr	r3, [pc, #72]	; (800e444 <pbuf_remove_header+0x94>)
 800e3fa:	f240 2255 	movw	r2, #597	; 0x255
 800e3fe:	4914      	ldr	r1, [pc, #80]	; (800e450 <pbuf_remove_header+0xa0>)
 800e400:	4812      	ldr	r0, [pc, #72]	; (800e44c <pbuf_remove_header+0x9c>)
 800e402:	f00b fd99 	bl	8019f38 <iprintf>
 800e406:	2301      	movs	r3, #1
 800e408:	e017      	b.n	800e43a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	685b      	ldr	r3, [r3, #4]
 800e40e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	685a      	ldr	r2, [r3, #4]
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	441a      	add	r2, r3
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	895a      	ldrh	r2, [r3, #10]
 800e420:	89fb      	ldrh	r3, [r7, #14]
 800e422:	1ad3      	subs	r3, r2, r3
 800e424:	b29a      	uxth	r2, r3
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	891a      	ldrh	r2, [r3, #8]
 800e42e:	89fb      	ldrh	r3, [r7, #14]
 800e430:	1ad3      	subs	r3, r2, r3
 800e432:	b29a      	uxth	r2, r3
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e438:	2300      	movs	r3, #0
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	3710      	adds	r7, #16
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}
 800e442:	bf00      	nop
 800e444:	0801c700 	.word	0x0801c700
 800e448:	0801c864 	.word	0x0801c864
 800e44c:	0801c760 	.word	0x0801c760
 800e450:	0801c870 	.word	0x0801c870

0800e454 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	807b      	strh	r3, [r7, #2]
 800e460:	4613      	mov	r3, r2
 800e462:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e464:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	da08      	bge.n	800e47e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e46c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e470:	425b      	negs	r3, r3
 800e472:	4619      	mov	r1, r3
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7ff ff9b 	bl	800e3b0 <pbuf_remove_header>
 800e47a:	4603      	mov	r3, r0
 800e47c:	e007      	b.n	800e48e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e47e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e482:	787a      	ldrb	r2, [r7, #1]
 800e484:	4619      	mov	r1, r3
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f7ff ff1a 	bl	800e2c0 <pbuf_add_header_impl>
 800e48c:	4603      	mov	r3, r0
  }
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3708      	adds	r7, #8
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}

0800e496 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e496:	b580      	push	{r7, lr}
 800e498:	b082      	sub	sp, #8
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
 800e49e:	460b      	mov	r3, r1
 800e4a0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e4a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f7ff ffd2 	bl	800e454 <pbuf_header_impl>
 800e4b0:	4603      	mov	r3, r0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3708      	adds	r7, #8
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}
	...

0800e4bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b088      	sub	sp, #32
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d10b      	bne.n	800e4e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d106      	bne.n	800e4de <pbuf_free+0x22>
 800e4d0:	4b3b      	ldr	r3, [pc, #236]	; (800e5c0 <pbuf_free+0x104>)
 800e4d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e4d6:	493b      	ldr	r1, [pc, #236]	; (800e5c4 <pbuf_free+0x108>)
 800e4d8:	483b      	ldr	r0, [pc, #236]	; (800e5c8 <pbuf_free+0x10c>)
 800e4da:	f00b fd2d 	bl	8019f38 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e4de:	2300      	movs	r3, #0
 800e4e0:	e069      	b.n	800e5b6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e4e6:	e062      	b.n	800e5ae <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e4e8:	f00b fca8 	bl	8019e3c <sys_arch_protect>
 800e4ec:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	7b9b      	ldrb	r3, [r3, #14]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d106      	bne.n	800e504 <pbuf_free+0x48>
 800e4f6:	4b32      	ldr	r3, [pc, #200]	; (800e5c0 <pbuf_free+0x104>)
 800e4f8:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e4fc:	4933      	ldr	r1, [pc, #204]	; (800e5cc <pbuf_free+0x110>)
 800e4fe:	4832      	ldr	r0, [pc, #200]	; (800e5c8 <pbuf_free+0x10c>)
 800e500:	f00b fd1a 	bl	8019f38 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	7b9b      	ldrb	r3, [r3, #14]
 800e508:	3b01      	subs	r3, #1
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	739a      	strb	r2, [r3, #14]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	7b9b      	ldrb	r3, [r3, #14]
 800e514:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e516:	69b8      	ldr	r0, [r7, #24]
 800e518:	f00b fc9e 	bl	8019e58 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e51c:	7dfb      	ldrb	r3, [r7, #23]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d143      	bne.n	800e5aa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	7b1b      	ldrb	r3, [r3, #12]
 800e52c:	f003 030f 	and.w	r3, r3, #15
 800e530:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	7b5b      	ldrb	r3, [r3, #13]
 800e536:	f003 0302 	and.w	r3, r3, #2
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d011      	beq.n	800e562 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	691b      	ldr	r3, [r3, #16]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d106      	bne.n	800e558 <pbuf_free+0x9c>
 800e54a:	4b1d      	ldr	r3, [pc, #116]	; (800e5c0 <pbuf_free+0x104>)
 800e54c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e550:	491f      	ldr	r1, [pc, #124]	; (800e5d0 <pbuf_free+0x114>)
 800e552:	481d      	ldr	r0, [pc, #116]	; (800e5c8 <pbuf_free+0x10c>)
 800e554:	f00b fcf0 	bl	8019f38 <iprintf>
        pc->custom_free_function(p);
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	691b      	ldr	r3, [r3, #16]
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	4798      	blx	r3
 800e560:	e01d      	b.n	800e59e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e562:	7bfb      	ldrb	r3, [r7, #15]
 800e564:	2b02      	cmp	r3, #2
 800e566:	d104      	bne.n	800e572 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e568:	6879      	ldr	r1, [r7, #4]
 800e56a:	200c      	movs	r0, #12
 800e56c:	f7ff f8fa 	bl	800d764 <memp_free>
 800e570:	e015      	b.n	800e59e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e572:	7bfb      	ldrb	r3, [r7, #15]
 800e574:	2b01      	cmp	r3, #1
 800e576:	d104      	bne.n	800e582 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e578:	6879      	ldr	r1, [r7, #4]
 800e57a:	200b      	movs	r0, #11
 800e57c:	f7ff f8f2 	bl	800d764 <memp_free>
 800e580:	e00d      	b.n	800e59e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e582:	7bfb      	ldrb	r3, [r7, #15]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d103      	bne.n	800e590 <pbuf_free+0xd4>
          mem_free(p);
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f7fe fd7d 	bl	800d088 <mem_free>
 800e58e:	e006      	b.n	800e59e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e590:	4b0b      	ldr	r3, [pc, #44]	; (800e5c0 <pbuf_free+0x104>)
 800e592:	f240 320f 	movw	r2, #783	; 0x30f
 800e596:	490f      	ldr	r1, [pc, #60]	; (800e5d4 <pbuf_free+0x118>)
 800e598:	480b      	ldr	r0, [pc, #44]	; (800e5c8 <pbuf_free+0x10c>)
 800e59a:	f00b fccd 	bl	8019f38 <iprintf>
        }
      }
      count++;
 800e59e:	7ffb      	ldrb	r3, [r7, #31]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e5a4:	693b      	ldr	r3, [r7, #16]
 800e5a6:	607b      	str	r3, [r7, #4]
 800e5a8:	e001      	b.n	800e5ae <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d199      	bne.n	800e4e8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e5b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3720      	adds	r7, #32
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	0801c700 	.word	0x0801c700
 800e5c4:	0801c864 	.word	0x0801c864
 800e5c8:	0801c760 	.word	0x0801c760
 800e5cc:	0801c890 	.word	0x0801c890
 800e5d0:	0801c8a8 	.word	0x0801c8a8
 800e5d4:	0801c8cc 	.word	0x0801c8cc

0800e5d8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e5e4:	e005      	b.n	800e5f2 <pbuf_clen+0x1a>
    ++len;
 800e5e6:	89fb      	ldrh	r3, [r7, #14]
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d1f6      	bne.n	800e5e6 <pbuf_clen+0xe>
  }
  return len;
 800e5f8:	89fb      	ldrh	r3, [r7, #14]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3714      	adds	r7, #20
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr
	...

0800e608 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d016      	beq.n	800e644 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e616:	f00b fc11 	bl	8019e3c <sys_arch_protect>
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	7b9b      	ldrb	r3, [r3, #14]
 800e620:	3301      	adds	r3, #1
 800e622:	b2da      	uxtb	r2, r3
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	739a      	strb	r2, [r3, #14]
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f00b fc15 	bl	8019e58 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	7b9b      	ldrb	r3, [r3, #14]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d106      	bne.n	800e644 <pbuf_ref+0x3c>
 800e636:	4b05      	ldr	r3, [pc, #20]	; (800e64c <pbuf_ref+0x44>)
 800e638:	f240 3242 	movw	r2, #834	; 0x342
 800e63c:	4904      	ldr	r1, [pc, #16]	; (800e650 <pbuf_ref+0x48>)
 800e63e:	4805      	ldr	r0, [pc, #20]	; (800e654 <pbuf_ref+0x4c>)
 800e640:	f00b fc7a 	bl	8019f38 <iprintf>
  }
}
 800e644:	bf00      	nop
 800e646:	3710      	adds	r7, #16
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}
 800e64c:	0801c700 	.word	0x0801c700
 800e650:	0801c8e0 	.word	0x0801c8e0
 800e654:	0801c760 	.word	0x0801c760

0800e658 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d002      	beq.n	800e66e <pbuf_cat+0x16>
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d107      	bne.n	800e67e <pbuf_cat+0x26>
 800e66e:	4b20      	ldr	r3, [pc, #128]	; (800e6f0 <pbuf_cat+0x98>)
 800e670:	f240 325a 	movw	r2, #858	; 0x35a
 800e674:	491f      	ldr	r1, [pc, #124]	; (800e6f4 <pbuf_cat+0x9c>)
 800e676:	4820      	ldr	r0, [pc, #128]	; (800e6f8 <pbuf_cat+0xa0>)
 800e678:	f00b fc5e 	bl	8019f38 <iprintf>
 800e67c:	e034      	b.n	800e6e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	60fb      	str	r3, [r7, #12]
 800e682:	e00a      	b.n	800e69a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	891a      	ldrh	r2, [r3, #8]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	891b      	ldrh	r3, [r3, #8]
 800e68c:	4413      	add	r3, r2
 800e68e:	b29a      	uxth	r2, r3
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	60fb      	str	r3, [r7, #12]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1f0      	bne.n	800e684 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	891a      	ldrh	r2, [r3, #8]
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	895b      	ldrh	r3, [r3, #10]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d006      	beq.n	800e6bc <pbuf_cat+0x64>
 800e6ae:	4b10      	ldr	r3, [pc, #64]	; (800e6f0 <pbuf_cat+0x98>)
 800e6b0:	f240 3262 	movw	r2, #866	; 0x362
 800e6b4:	4911      	ldr	r1, [pc, #68]	; (800e6fc <pbuf_cat+0xa4>)
 800e6b6:	4810      	ldr	r0, [pc, #64]	; (800e6f8 <pbuf_cat+0xa0>)
 800e6b8:	f00b fc3e 	bl	8019f38 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d006      	beq.n	800e6d2 <pbuf_cat+0x7a>
 800e6c4:	4b0a      	ldr	r3, [pc, #40]	; (800e6f0 <pbuf_cat+0x98>)
 800e6c6:	f240 3263 	movw	r2, #867	; 0x363
 800e6ca:	490d      	ldr	r1, [pc, #52]	; (800e700 <pbuf_cat+0xa8>)
 800e6cc:	480a      	ldr	r0, [pc, #40]	; (800e6f8 <pbuf_cat+0xa0>)
 800e6ce:	f00b fc33 	bl	8019f38 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	891a      	ldrh	r2, [r3, #8]
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	891b      	ldrh	r3, [r3, #8]
 800e6da:	4413      	add	r3, r2
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	683a      	ldr	r2, [r7, #0]
 800e6e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e6e8:	3710      	adds	r7, #16
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	0801c700 	.word	0x0801c700
 800e6f4:	0801c8f4 	.word	0x0801c8f4
 800e6f8:	0801c760 	.word	0x0801c760
 800e6fc:	0801c92c 	.word	0x0801c92c
 800e700:	0801c95c 	.word	0x0801c95c

0800e704 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e70e:	6839      	ldr	r1, [r7, #0]
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7ff ffa1 	bl	800e658 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e716:	6838      	ldr	r0, [r7, #0]
 800e718:	f7ff ff76 	bl	800e608 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e71c:	bf00      	nop
 800e71e:	3708      	adds	r7, #8
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b086      	sub	sp, #24
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e72e:	2300      	movs	r3, #0
 800e730:	617b      	str	r3, [r7, #20]
 800e732:	2300      	movs	r3, #0
 800e734:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d008      	beq.n	800e74e <pbuf_copy+0x2a>
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d005      	beq.n	800e74e <pbuf_copy+0x2a>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	891a      	ldrh	r2, [r3, #8]
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	891b      	ldrh	r3, [r3, #8]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d209      	bcs.n	800e762 <pbuf_copy+0x3e>
 800e74e:	4b57      	ldr	r3, [pc, #348]	; (800e8ac <pbuf_copy+0x188>)
 800e750:	f240 32ca 	movw	r2, #970	; 0x3ca
 800e754:	4956      	ldr	r1, [pc, #344]	; (800e8b0 <pbuf_copy+0x18c>)
 800e756:	4857      	ldr	r0, [pc, #348]	; (800e8b4 <pbuf_copy+0x190>)
 800e758:	f00b fbee 	bl	8019f38 <iprintf>
 800e75c:	f06f 030f 	mvn.w	r3, #15
 800e760:	e09f      	b.n	800e8a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	895b      	ldrh	r3, [r3, #10]
 800e766:	461a      	mov	r2, r3
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	1ad2      	subs	r2, r2, r3
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	895b      	ldrh	r3, [r3, #10]
 800e770:	4619      	mov	r1, r3
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	1acb      	subs	r3, r1, r3
 800e776:	429a      	cmp	r2, r3
 800e778:	d306      	bcc.n	800e788 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	895b      	ldrh	r3, [r3, #10]
 800e77e:	461a      	mov	r2, r3
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	1ad3      	subs	r3, r2, r3
 800e784:	60fb      	str	r3, [r7, #12]
 800e786:	e005      	b.n	800e794 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	895b      	ldrh	r3, [r3, #10]
 800e78c:	461a      	mov	r2, r3
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	1ad3      	subs	r3, r2, r3
 800e792:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	685a      	ldr	r2, [r3, #4]
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	18d0      	adds	r0, r2, r3
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	685a      	ldr	r2, [r3, #4]
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	4413      	add	r3, r2
 800e7a4:	68fa      	ldr	r2, [r7, #12]
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	f00b fb99 	bl	8019ede <memcpy>
    offset_to += len;
 800e7ac:	697a      	ldr	r2, [r7, #20]
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	4413      	add	r3, r2
 800e7b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e7b4:	693a      	ldr	r2, [r7, #16]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	895b      	ldrh	r3, [r3, #10]
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d906      	bls.n	800e7d6 <pbuf_copy+0xb2>
 800e7c8:	4b38      	ldr	r3, [pc, #224]	; (800e8ac <pbuf_copy+0x188>)
 800e7ca:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e7ce:	493a      	ldr	r1, [pc, #232]	; (800e8b8 <pbuf_copy+0x194>)
 800e7d0:	4838      	ldr	r0, [pc, #224]	; (800e8b4 <pbuf_copy+0x190>)
 800e7d2:	f00b fbb1 	bl	8019f38 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	895b      	ldrh	r3, [r3, #10]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	693b      	ldr	r3, [r7, #16]
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d906      	bls.n	800e7f0 <pbuf_copy+0xcc>
 800e7e2:	4b32      	ldr	r3, [pc, #200]	; (800e8ac <pbuf_copy+0x188>)
 800e7e4:	f240 32da 	movw	r2, #986	; 0x3da
 800e7e8:	4934      	ldr	r1, [pc, #208]	; (800e8bc <pbuf_copy+0x198>)
 800e7ea:	4832      	ldr	r0, [pc, #200]	; (800e8b4 <pbuf_copy+0x190>)
 800e7ec:	f00b fba4 	bl	8019f38 <iprintf>
    if (offset_from >= p_from->len) {
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	895b      	ldrh	r3, [r3, #10]
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	4293      	cmp	r3, r2
 800e7fa:	d304      	bcc.n	800e806 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	895b      	ldrh	r3, [r3, #10]
 800e80a:	461a      	mov	r2, r3
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	4293      	cmp	r3, r2
 800e810:	d114      	bne.n	800e83c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e812:	2300      	movs	r3, #0
 800e814:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d10c      	bne.n	800e83c <pbuf_copy+0x118>
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d009      	beq.n	800e83c <pbuf_copy+0x118>
 800e828:	4b20      	ldr	r3, [pc, #128]	; (800e8ac <pbuf_copy+0x188>)
 800e82a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e82e:	4924      	ldr	r1, [pc, #144]	; (800e8c0 <pbuf_copy+0x19c>)
 800e830:	4820      	ldr	r0, [pc, #128]	; (800e8b4 <pbuf_copy+0x190>)
 800e832:	f00b fb81 	bl	8019f38 <iprintf>
 800e836:	f06f 030f 	mvn.w	r3, #15
 800e83a:	e032      	b.n	800e8a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d013      	beq.n	800e86a <pbuf_copy+0x146>
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	895a      	ldrh	r2, [r3, #10]
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	891b      	ldrh	r3, [r3, #8]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d10d      	bne.n	800e86a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d009      	beq.n	800e86a <pbuf_copy+0x146>
 800e856:	4b15      	ldr	r3, [pc, #84]	; (800e8ac <pbuf_copy+0x188>)
 800e858:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800e85c:	4919      	ldr	r1, [pc, #100]	; (800e8c4 <pbuf_copy+0x1a0>)
 800e85e:	4815      	ldr	r0, [pc, #84]	; (800e8b4 <pbuf_copy+0x190>)
 800e860:	f00b fb6a 	bl	8019f38 <iprintf>
 800e864:	f06f 0305 	mvn.w	r3, #5
 800e868:	e01b      	b.n	800e8a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d013      	beq.n	800e898 <pbuf_copy+0x174>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	895a      	ldrh	r2, [r3, #10]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	891b      	ldrh	r3, [r3, #8]
 800e878:	429a      	cmp	r2, r3
 800e87a:	d10d      	bne.n	800e898 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d009      	beq.n	800e898 <pbuf_copy+0x174>
 800e884:	4b09      	ldr	r3, [pc, #36]	; (800e8ac <pbuf_copy+0x188>)
 800e886:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e88a:	490e      	ldr	r1, [pc, #56]	; (800e8c4 <pbuf_copy+0x1a0>)
 800e88c:	4809      	ldr	r0, [pc, #36]	; (800e8b4 <pbuf_copy+0x190>)
 800e88e:	f00b fb53 	bl	8019f38 <iprintf>
 800e892:	f06f 0305 	mvn.w	r3, #5
 800e896:	e004      	b.n	800e8a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	f47f af61 	bne.w	800e762 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3718      	adds	r7, #24
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	0801c700 	.word	0x0801c700
 800e8b0:	0801c9a8 	.word	0x0801c9a8
 800e8b4:	0801c760 	.word	0x0801c760
 800e8b8:	0801c9d8 	.word	0x0801c9d8
 800e8bc:	0801c9f0 	.word	0x0801c9f0
 800e8c0:	0801ca0c 	.word	0x0801ca0c
 800e8c4:	0801ca1c 	.word	0x0801ca1c

0800e8c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b088      	sub	sp, #32
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	60f8      	str	r0, [r7, #12]
 800e8d0:	60b9      	str	r1, [r7, #8]
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	460b      	mov	r3, r1
 800e8d8:	80fb      	strh	r3, [r7, #6]
 800e8da:	4613      	mov	r3, r2
 800e8dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d108      	bne.n	800e8fe <pbuf_copy_partial+0x36>
 800e8ec:	4b2b      	ldr	r3, [pc, #172]	; (800e99c <pbuf_copy_partial+0xd4>)
 800e8ee:	f240 420a 	movw	r2, #1034	; 0x40a
 800e8f2:	492b      	ldr	r1, [pc, #172]	; (800e9a0 <pbuf_copy_partial+0xd8>)
 800e8f4:	482b      	ldr	r0, [pc, #172]	; (800e9a4 <pbuf_copy_partial+0xdc>)
 800e8f6:	f00b fb1f 	bl	8019f38 <iprintf>
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	e04a      	b.n	800e994 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d108      	bne.n	800e916 <pbuf_copy_partial+0x4e>
 800e904:	4b25      	ldr	r3, [pc, #148]	; (800e99c <pbuf_copy_partial+0xd4>)
 800e906:	f240 420b 	movw	r2, #1035	; 0x40b
 800e90a:	4927      	ldr	r1, [pc, #156]	; (800e9a8 <pbuf_copy_partial+0xe0>)
 800e90c:	4825      	ldr	r0, [pc, #148]	; (800e9a4 <pbuf_copy_partial+0xdc>)
 800e90e:	f00b fb13 	bl	8019f38 <iprintf>
 800e912:	2300      	movs	r3, #0
 800e914:	e03e      	b.n	800e994 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	61fb      	str	r3, [r7, #28]
 800e91a:	e034      	b.n	800e986 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e91c:	88bb      	ldrh	r3, [r7, #4]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00a      	beq.n	800e938 <pbuf_copy_partial+0x70>
 800e922:	69fb      	ldr	r3, [r7, #28]
 800e924:	895b      	ldrh	r3, [r3, #10]
 800e926:	88ba      	ldrh	r2, [r7, #4]
 800e928:	429a      	cmp	r2, r3
 800e92a:	d305      	bcc.n	800e938 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	895b      	ldrh	r3, [r3, #10]
 800e930:	88ba      	ldrh	r2, [r7, #4]
 800e932:	1ad3      	subs	r3, r2, r3
 800e934:	80bb      	strh	r3, [r7, #4]
 800e936:	e023      	b.n	800e980 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	895a      	ldrh	r2, [r3, #10]
 800e93c:	88bb      	ldrh	r3, [r7, #4]
 800e93e:	1ad3      	subs	r3, r2, r3
 800e940:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e942:	8b3a      	ldrh	r2, [r7, #24]
 800e944:	88fb      	ldrh	r3, [r7, #6]
 800e946:	429a      	cmp	r2, r3
 800e948:	d901      	bls.n	800e94e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e94a:	88fb      	ldrh	r3, [r7, #6]
 800e94c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e94e:	8b7b      	ldrh	r3, [r7, #26]
 800e950:	68ba      	ldr	r2, [r7, #8]
 800e952:	18d0      	adds	r0, r2, r3
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	685a      	ldr	r2, [r3, #4]
 800e958:	88bb      	ldrh	r3, [r7, #4]
 800e95a:	4413      	add	r3, r2
 800e95c:	8b3a      	ldrh	r2, [r7, #24]
 800e95e:	4619      	mov	r1, r3
 800e960:	f00b fabd 	bl	8019ede <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e964:	8afa      	ldrh	r2, [r7, #22]
 800e966:	8b3b      	ldrh	r3, [r7, #24]
 800e968:	4413      	add	r3, r2
 800e96a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e96c:	8b7a      	ldrh	r2, [r7, #26]
 800e96e:	8b3b      	ldrh	r3, [r7, #24]
 800e970:	4413      	add	r3, r2
 800e972:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e974:	88fa      	ldrh	r2, [r7, #6]
 800e976:	8b3b      	ldrh	r3, [r7, #24]
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e97c:	2300      	movs	r3, #0
 800e97e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e980:	69fb      	ldr	r3, [r7, #28]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	61fb      	str	r3, [r7, #28]
 800e986:	88fb      	ldrh	r3, [r7, #6]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d002      	beq.n	800e992 <pbuf_copy_partial+0xca>
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d1c4      	bne.n	800e91c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e992:	8afb      	ldrh	r3, [r7, #22]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3720      	adds	r7, #32
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	0801c700 	.word	0x0801c700
 800e9a0:	0801ca48 	.word	0x0801ca48
 800e9a4:	0801c760 	.word	0x0801c760
 800e9a8:	0801ca68 	.word	0x0801ca68

0800e9ac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	603a      	str	r2, [r7, #0]
 800e9b6:	71fb      	strb	r3, [r7, #7]
 800e9b8:	460b      	mov	r3, r1
 800e9ba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	8919      	ldrh	r1, [r3, #8]
 800e9c0:	88ba      	ldrh	r2, [r7, #4]
 800e9c2:	79fb      	ldrb	r3, [r7, #7]
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7ff fa99 	bl	800defc <pbuf_alloc>
 800e9ca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d101      	bne.n	800e9d6 <pbuf_clone+0x2a>
    return NULL;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	e011      	b.n	800e9fa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e9d6:	6839      	ldr	r1, [r7, #0]
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f7ff fea3 	bl	800e724 <pbuf_copy>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e9e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d006      	beq.n	800e9f8 <pbuf_clone+0x4c>
 800e9ea:	4b06      	ldr	r3, [pc, #24]	; (800ea04 <pbuf_clone+0x58>)
 800e9ec:	f240 5224 	movw	r2, #1316	; 0x524
 800e9f0:	4905      	ldr	r1, [pc, #20]	; (800ea08 <pbuf_clone+0x5c>)
 800e9f2:	4806      	ldr	r0, [pc, #24]	; (800ea0c <pbuf_clone+0x60>)
 800e9f4:	f00b faa0 	bl	8019f38 <iprintf>
  return q;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
}
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	3710      	adds	r7, #16
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	0801c700 	.word	0x0801c700
 800ea08:	0801cb74 	.word	0x0801cb74
 800ea0c:	0801c760 	.word	0x0801c760

0800ea10 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ea14:	f00b faa8 	bl	8019f68 <rand>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ea20:	b29b      	uxth	r3, r3
 800ea22:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ea26:	b29a      	uxth	r2, r3
 800ea28:	4b01      	ldr	r3, [pc, #4]	; (800ea30 <tcp_init+0x20>)
 800ea2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ea2c:	bf00      	nop
 800ea2e:	bd80      	pop	{r7, pc}
 800ea30:	20000096 	.word	0x20000096

0800ea34 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	7d1b      	ldrb	r3, [r3, #20]
 800ea40:	2b01      	cmp	r3, #1
 800ea42:	d105      	bne.n	800ea50 <tcp_free+0x1c>
 800ea44:	4b06      	ldr	r3, [pc, #24]	; (800ea60 <tcp_free+0x2c>)
 800ea46:	22d4      	movs	r2, #212	; 0xd4
 800ea48:	4906      	ldr	r1, [pc, #24]	; (800ea64 <tcp_free+0x30>)
 800ea4a:	4807      	ldr	r0, [pc, #28]	; (800ea68 <tcp_free+0x34>)
 800ea4c:	f00b fa74 	bl	8019f38 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ea50:	6879      	ldr	r1, [r7, #4]
 800ea52:	2001      	movs	r0, #1
 800ea54:	f7fe fe86 	bl	800d764 <memp_free>
}
 800ea58:	bf00      	nop
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	0801cc00 	.word	0x0801cc00
 800ea64:	0801cc30 	.word	0x0801cc30
 800ea68:	0801cc44 	.word	0x0801cc44

0800ea6c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	7d1b      	ldrb	r3, [r3, #20]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d105      	bne.n	800ea88 <tcp_free_listen+0x1c>
 800ea7c:	4b06      	ldr	r3, [pc, #24]	; (800ea98 <tcp_free_listen+0x2c>)
 800ea7e:	22df      	movs	r2, #223	; 0xdf
 800ea80:	4906      	ldr	r1, [pc, #24]	; (800ea9c <tcp_free_listen+0x30>)
 800ea82:	4807      	ldr	r0, [pc, #28]	; (800eaa0 <tcp_free_listen+0x34>)
 800ea84:	f00b fa58 	bl	8019f38 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ea88:	6879      	ldr	r1, [r7, #4]
 800ea8a:	2002      	movs	r0, #2
 800ea8c:	f7fe fe6a 	bl	800d764 <memp_free>
}
 800ea90:	bf00      	nop
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	0801cc00 	.word	0x0801cc00
 800ea9c:	0801cc6c 	.word	0x0801cc6c
 800eaa0:	0801cc44 	.word	0x0801cc44

0800eaa4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800eaa8:	f001 f8ac 	bl	800fc04 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800eaac:	4b07      	ldr	r3, [pc, #28]	; (800eacc <tcp_tmr+0x28>)
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	3301      	adds	r3, #1
 800eab2:	b2da      	uxtb	r2, r3
 800eab4:	4b05      	ldr	r3, [pc, #20]	; (800eacc <tcp_tmr+0x28>)
 800eab6:	701a      	strb	r2, [r3, #0]
 800eab8:	4b04      	ldr	r3, [pc, #16]	; (800eacc <tcp_tmr+0x28>)
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	f003 0301 	and.w	r3, r3, #1
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d001      	beq.n	800eac8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800eac4:	f000 fd60 	bl	800f588 <tcp_slowtmr>
  }
}
 800eac8:	bf00      	nop
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	200102e5 	.word	0x200102e5

0800ead0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d105      	bne.n	800eaec <tcp_remove_listener+0x1c>
 800eae0:	4b0d      	ldr	r3, [pc, #52]	; (800eb18 <tcp_remove_listener+0x48>)
 800eae2:	22ff      	movs	r2, #255	; 0xff
 800eae4:	490d      	ldr	r1, [pc, #52]	; (800eb1c <tcp_remove_listener+0x4c>)
 800eae6:	480e      	ldr	r0, [pc, #56]	; (800eb20 <tcp_remove_listener+0x50>)
 800eae8:	f00b fa26 	bl	8019f38 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	60fb      	str	r3, [r7, #12]
 800eaf0:	e00a      	b.n	800eb08 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaf6:	683a      	ldr	r2, [r7, #0]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d102      	bne.n	800eb02 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2200      	movs	r2, #0
 800eb00:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	60fb      	str	r3, [r7, #12]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d1f1      	bne.n	800eaf2 <tcp_remove_listener+0x22>
    }
  }
}
 800eb0e:	bf00      	nop
 800eb10:	3710      	adds	r7, #16
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}
 800eb16:	bf00      	nop
 800eb18:	0801cc00 	.word	0x0801cc00
 800eb1c:	0801cc88 	.word	0x0801cc88
 800eb20:	0801cc44 	.word	0x0801cc44

0800eb24 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d106      	bne.n	800eb40 <tcp_listen_closed+0x1c>
 800eb32:	4b14      	ldr	r3, [pc, #80]	; (800eb84 <tcp_listen_closed+0x60>)
 800eb34:	f240 1211 	movw	r2, #273	; 0x111
 800eb38:	4913      	ldr	r1, [pc, #76]	; (800eb88 <tcp_listen_closed+0x64>)
 800eb3a:	4814      	ldr	r0, [pc, #80]	; (800eb8c <tcp_listen_closed+0x68>)
 800eb3c:	f00b f9fc 	bl	8019f38 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	7d1b      	ldrb	r3, [r3, #20]
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d006      	beq.n	800eb56 <tcp_listen_closed+0x32>
 800eb48:	4b0e      	ldr	r3, [pc, #56]	; (800eb84 <tcp_listen_closed+0x60>)
 800eb4a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800eb4e:	4910      	ldr	r1, [pc, #64]	; (800eb90 <tcp_listen_closed+0x6c>)
 800eb50:	480e      	ldr	r0, [pc, #56]	; (800eb8c <tcp_listen_closed+0x68>)
 800eb52:	f00b f9f1 	bl	8019f38 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eb56:	2301      	movs	r3, #1
 800eb58:	60fb      	str	r3, [r7, #12]
 800eb5a:	e00b      	b.n	800eb74 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800eb5c:	4a0d      	ldr	r2, [pc, #52]	; (800eb94 <tcp_listen_closed+0x70>)
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	6879      	ldr	r1, [r7, #4]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7ff ffb1 	bl	800ead0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	3301      	adds	r3, #1
 800eb72:	60fb      	str	r3, [r7, #12]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2b03      	cmp	r3, #3
 800eb78:	d9f0      	bls.n	800eb5c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800eb7a:	bf00      	nop
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	0801cc00 	.word	0x0801cc00
 800eb88:	0801ccb0 	.word	0x0801ccb0
 800eb8c:	0801cc44 	.word	0x0801cc44
 800eb90:	0801ccbc 	.word	0x0801ccbc
 800eb94:	0804023c 	.word	0x0804023c

0800eb98 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800eb98:	b5b0      	push	{r4, r5, r7, lr}
 800eb9a:	b088      	sub	sp, #32
 800eb9c:	af04      	add	r7, sp, #16
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	460b      	mov	r3, r1
 800eba2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d106      	bne.n	800ebb8 <tcp_close_shutdown+0x20>
 800ebaa:	4b61      	ldr	r3, [pc, #388]	; (800ed30 <tcp_close_shutdown+0x198>)
 800ebac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ebb0:	4960      	ldr	r1, [pc, #384]	; (800ed34 <tcp_close_shutdown+0x19c>)
 800ebb2:	4861      	ldr	r0, [pc, #388]	; (800ed38 <tcp_close_shutdown+0x1a0>)
 800ebb4:	f00b f9c0 	bl	8019f38 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ebb8:	78fb      	ldrb	r3, [r7, #3]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d066      	beq.n	800ec8c <tcp_close_shutdown+0xf4>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	7d1b      	ldrb	r3, [r3, #20]
 800ebc2:	2b04      	cmp	r3, #4
 800ebc4:	d003      	beq.n	800ebce <tcp_close_shutdown+0x36>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	7d1b      	ldrb	r3, [r3, #20]
 800ebca:	2b07      	cmp	r3, #7
 800ebcc:	d15e      	bne.n	800ec8c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d104      	bne.n	800ebe0 <tcp_close_shutdown+0x48>
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebda:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ebde:	d055      	beq.n	800ec8c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	8b5b      	ldrh	r3, [r3, #26]
 800ebe4:	f003 0310 	and.w	r3, r3, #16
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d106      	bne.n	800ebfa <tcp_close_shutdown+0x62>
 800ebec:	4b50      	ldr	r3, [pc, #320]	; (800ed30 <tcp_close_shutdown+0x198>)
 800ebee:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ebf2:	4952      	ldr	r1, [pc, #328]	; (800ed3c <tcp_close_shutdown+0x1a4>)
 800ebf4:	4850      	ldr	r0, [pc, #320]	; (800ed38 <tcp_close_shutdown+0x1a0>)
 800ebf6:	f00b f99f 	bl	8019f38 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ec02:	687d      	ldr	r5, [r7, #4]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	3304      	adds	r3, #4
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	8ad2      	ldrh	r2, [r2, #22]
 800ec0c:	6879      	ldr	r1, [r7, #4]
 800ec0e:	8b09      	ldrh	r1, [r1, #24]
 800ec10:	9102      	str	r1, [sp, #8]
 800ec12:	9201      	str	r2, [sp, #4]
 800ec14:	9300      	str	r3, [sp, #0]
 800ec16:	462b      	mov	r3, r5
 800ec18:	4622      	mov	r2, r4
 800ec1a:	4601      	mov	r1, r0
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f005 fde9 	bl	80147f4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f001 fbba 	bl	801039c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ec28:	4b45      	ldr	r3, [pc, #276]	; (800ed40 <tcp_close_shutdown+0x1a8>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d105      	bne.n	800ec3e <tcp_close_shutdown+0xa6>
 800ec32:	4b43      	ldr	r3, [pc, #268]	; (800ed40 <tcp_close_shutdown+0x1a8>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	4a41      	ldr	r2, [pc, #260]	; (800ed40 <tcp_close_shutdown+0x1a8>)
 800ec3a:	6013      	str	r3, [r2, #0]
 800ec3c:	e013      	b.n	800ec66 <tcp_close_shutdown+0xce>
 800ec3e:	4b40      	ldr	r3, [pc, #256]	; (800ed40 <tcp_close_shutdown+0x1a8>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	60fb      	str	r3, [r7, #12]
 800ec44:	e00c      	b.n	800ec60 <tcp_close_shutdown+0xc8>
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	429a      	cmp	r2, r3
 800ec4e:	d104      	bne.n	800ec5a <tcp_close_shutdown+0xc2>
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	68da      	ldr	r2, [r3, #12]
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	60da      	str	r2, [r3, #12]
 800ec58:	e005      	b.n	800ec66 <tcp_close_shutdown+0xce>
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	60fb      	str	r3, [r7, #12]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d1ef      	bne.n	800ec46 <tcp_close_shutdown+0xae>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	60da      	str	r2, [r3, #12]
 800ec6c:	4b35      	ldr	r3, [pc, #212]	; (800ed44 <tcp_close_shutdown+0x1ac>)
 800ec6e:	2201      	movs	r2, #1
 800ec70:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ec72:	4b35      	ldr	r3, [pc, #212]	; (800ed48 <tcp_close_shutdown+0x1b0>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	687a      	ldr	r2, [r7, #4]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d102      	bne.n	800ec82 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ec7c:	f004 f84c 	bl	8012d18 <tcp_trigger_input_pcb_close>
 800ec80:	e002      	b.n	800ec88 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f7ff fed6 	bl	800ea34 <tcp_free>
      }
      return ERR_OK;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	e04d      	b.n	800ed28 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	7d1b      	ldrb	r3, [r3, #20]
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d02d      	beq.n	800ecf0 <tcp_close_shutdown+0x158>
 800ec94:	2b02      	cmp	r3, #2
 800ec96:	d036      	beq.n	800ed06 <tcp_close_shutdown+0x16e>
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d13f      	bne.n	800ed1c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	8adb      	ldrh	r3, [r3, #22]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d021      	beq.n	800ece8 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eca4:	4b29      	ldr	r3, [pc, #164]	; (800ed4c <tcp_close_shutdown+0x1b4>)
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	687a      	ldr	r2, [r7, #4]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d105      	bne.n	800ecba <tcp_close_shutdown+0x122>
 800ecae:	4b27      	ldr	r3, [pc, #156]	; (800ed4c <tcp_close_shutdown+0x1b4>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	68db      	ldr	r3, [r3, #12]
 800ecb4:	4a25      	ldr	r2, [pc, #148]	; (800ed4c <tcp_close_shutdown+0x1b4>)
 800ecb6:	6013      	str	r3, [r2, #0]
 800ecb8:	e013      	b.n	800ece2 <tcp_close_shutdown+0x14a>
 800ecba:	4b24      	ldr	r3, [pc, #144]	; (800ed4c <tcp_close_shutdown+0x1b4>)
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	60bb      	str	r3, [r7, #8]
 800ecc0:	e00c      	b.n	800ecdc <tcp_close_shutdown+0x144>
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	d104      	bne.n	800ecd6 <tcp_close_shutdown+0x13e>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	68da      	ldr	r2, [r3, #12]
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	60da      	str	r2, [r3, #12]
 800ecd4:	e005      	b.n	800ece2 <tcp_close_shutdown+0x14a>
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	68db      	ldr	r3, [r3, #12]
 800ecda:	60bb      	str	r3, [r7, #8]
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d1ef      	bne.n	800ecc2 <tcp_close_shutdown+0x12a>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2200      	movs	r2, #0
 800ece6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f7ff fea3 	bl	800ea34 <tcp_free>
      break;
 800ecee:	e01a      	b.n	800ed26 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f7ff ff17 	bl	800eb24 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ecf6:	6879      	ldr	r1, [r7, #4]
 800ecf8:	4815      	ldr	r0, [pc, #84]	; (800ed50 <tcp_close_shutdown+0x1b8>)
 800ecfa:	f001 fb9f 	bl	801043c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f7ff feb4 	bl	800ea6c <tcp_free_listen>
      break;
 800ed04:	e00f      	b.n	800ed26 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ed06:	6879      	ldr	r1, [r7, #4]
 800ed08:	480d      	ldr	r0, [pc, #52]	; (800ed40 <tcp_close_shutdown+0x1a8>)
 800ed0a:	f001 fb97 	bl	801043c <tcp_pcb_remove>
 800ed0e:	4b0d      	ldr	r3, [pc, #52]	; (800ed44 <tcp_close_shutdown+0x1ac>)
 800ed10:	2201      	movs	r2, #1
 800ed12:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f7ff fe8d 	bl	800ea34 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ed1a:	e004      	b.n	800ed26 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f000 f819 	bl	800ed54 <tcp_close_shutdown_fin>
 800ed22:	4603      	mov	r3, r0
 800ed24:	e000      	b.n	800ed28 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800ed26:	2300      	movs	r3, #0
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3710      	adds	r7, #16
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bdb0      	pop	{r4, r5, r7, pc}
 800ed30:	0801cc00 	.word	0x0801cc00
 800ed34:	0801ccd4 	.word	0x0801ccd4
 800ed38:	0801cc44 	.word	0x0801cc44
 800ed3c:	0801ccf4 	.word	0x0801ccf4
 800ed40:	20016ea4 	.word	0x20016ea4
 800ed44:	20016ea0 	.word	0x20016ea0
 800ed48:	20016eb8 	.word	0x20016eb8
 800ed4c:	20016eb0 	.word	0x20016eb0
 800ed50:	20016eac 	.word	0x20016eac

0800ed54 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d106      	bne.n	800ed70 <tcp_close_shutdown_fin+0x1c>
 800ed62:	4b2c      	ldr	r3, [pc, #176]	; (800ee14 <tcp_close_shutdown_fin+0xc0>)
 800ed64:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ed68:	492b      	ldr	r1, [pc, #172]	; (800ee18 <tcp_close_shutdown_fin+0xc4>)
 800ed6a:	482c      	ldr	r0, [pc, #176]	; (800ee1c <tcp_close_shutdown_fin+0xc8>)
 800ed6c:	f00b f8e4 	bl	8019f38 <iprintf>

  switch (pcb->state) {
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	7d1b      	ldrb	r3, [r3, #20]
 800ed74:	2b04      	cmp	r3, #4
 800ed76:	d010      	beq.n	800ed9a <tcp_close_shutdown_fin+0x46>
 800ed78:	2b07      	cmp	r3, #7
 800ed7a:	d01b      	beq.n	800edb4 <tcp_close_shutdown_fin+0x60>
 800ed7c:	2b03      	cmp	r3, #3
 800ed7e:	d126      	bne.n	800edce <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ed80:	6878      	ldr	r0, [r7, #4]
 800ed82:	f004 fe35 	bl	80139f0 <tcp_send_fin>
 800ed86:	4603      	mov	r3, r0
 800ed88:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ed8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d11f      	bne.n	800edd2 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2205      	movs	r2, #5
 800ed96:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ed98:	e01b      	b.n	800edd2 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f004 fe28 	bl	80139f0 <tcp_send_fin>
 800eda0:	4603      	mov	r3, r0
 800eda2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eda4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d114      	bne.n	800edd6 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2205      	movs	r2, #5
 800edb0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800edb2:	e010      	b.n	800edd6 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f004 fe1b 	bl	80139f0 <tcp_send_fin>
 800edba:	4603      	mov	r3, r0
 800edbc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800edbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d109      	bne.n	800edda <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2209      	movs	r2, #9
 800edca:	751a      	strb	r2, [r3, #20]
      }
      break;
 800edcc:	e005      	b.n	800edda <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800edce:	2300      	movs	r3, #0
 800edd0:	e01c      	b.n	800ee0c <tcp_close_shutdown_fin+0xb8>
      break;
 800edd2:	bf00      	nop
 800edd4:	e002      	b.n	800eddc <tcp_close_shutdown_fin+0x88>
      break;
 800edd6:	bf00      	nop
 800edd8:	e000      	b.n	800eddc <tcp_close_shutdown_fin+0x88>
      break;
 800edda:	bf00      	nop
  }

  if (err == ERR_OK) {
 800eddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d103      	bne.n	800edec <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f004 ff41 	bl	8013c6c <tcp_output>
 800edea:	e00d      	b.n	800ee08 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800edec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800edf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edf4:	d108      	bne.n	800ee08 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	8b5b      	ldrh	r3, [r3, #26]
 800edfa:	f043 0308 	orr.w	r3, r3, #8
 800edfe:	b29a      	uxth	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ee04:	2300      	movs	r3, #0
 800ee06:	e001      	b.n	800ee0c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800ee08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3710      	adds	r7, #16
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	0801cc00 	.word	0x0801cc00
 800ee18:	0801ccb0 	.word	0x0801ccb0
 800ee1c:	0801cc44 	.word	0x0801cc44

0800ee20 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d109      	bne.n	800ee42 <tcp_close+0x22>
 800ee2e:	4b0f      	ldr	r3, [pc, #60]	; (800ee6c <tcp_close+0x4c>)
 800ee30:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ee34:	490e      	ldr	r1, [pc, #56]	; (800ee70 <tcp_close+0x50>)
 800ee36:	480f      	ldr	r0, [pc, #60]	; (800ee74 <tcp_close+0x54>)
 800ee38:	f00b f87e 	bl	8019f38 <iprintf>
 800ee3c:	f06f 030f 	mvn.w	r3, #15
 800ee40:	e00f      	b.n	800ee62 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	7d1b      	ldrb	r3, [r3, #20]
 800ee46:	2b01      	cmp	r3, #1
 800ee48:	d006      	beq.n	800ee58 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	8b5b      	ldrh	r3, [r3, #26]
 800ee4e:	f043 0310 	orr.w	r3, r3, #16
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ee58:	2101      	movs	r1, #1
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f7ff fe9c 	bl	800eb98 <tcp_close_shutdown>
 800ee60:	4603      	mov	r3, r0
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3708      	adds	r7, #8
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
 800ee6a:	bf00      	nop
 800ee6c:	0801cc00 	.word	0x0801cc00
 800ee70:	0801cd10 	.word	0x0801cd10
 800ee74:	0801cc44 	.word	0x0801cc44

0800ee78 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b084      	sub	sp, #16
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d109      	bne.n	800ee9e <tcp_shutdown+0x26>
 800ee8a:	4b25      	ldr	r3, [pc, #148]	; (800ef20 <tcp_shutdown+0xa8>)
 800ee8c:	f240 2207 	movw	r2, #519	; 0x207
 800ee90:	4924      	ldr	r1, [pc, #144]	; (800ef24 <tcp_shutdown+0xac>)
 800ee92:	4825      	ldr	r0, [pc, #148]	; (800ef28 <tcp_shutdown+0xb0>)
 800ee94:	f00b f850 	bl	8019f38 <iprintf>
 800ee98:	f06f 030f 	mvn.w	r3, #15
 800ee9c:	e03c      	b.n	800ef18 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	7d1b      	ldrb	r3, [r3, #20]
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d102      	bne.n	800eeac <tcp_shutdown+0x34>
    return ERR_CONN;
 800eea6:	f06f 030a 	mvn.w	r3, #10
 800eeaa:	e035      	b.n	800ef18 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d01b      	beq.n	800eeea <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	8b5b      	ldrh	r3, [r3, #26]
 800eeb6:	f043 0310 	orr.w	r3, r3, #16
 800eeba:	b29a      	uxth	r2, r3
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d005      	beq.n	800eed2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800eec6:	2101      	movs	r1, #1
 800eec8:	68f8      	ldr	r0, [r7, #12]
 800eeca:	f7ff fe65 	bl	800eb98 <tcp_close_shutdown>
 800eece:	4603      	mov	r3, r0
 800eed0:	e022      	b.n	800ef18 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d007      	beq.n	800eeea <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eede:	4618      	mov	r0, r3
 800eee0:	f7ff faec 	bl	800e4bc <pbuf_free>
      pcb->refused_data = NULL;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2200      	movs	r2, #0
 800eee8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d012      	beq.n	800ef16 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	7d1b      	ldrb	r3, [r3, #20]
 800eef4:	2b03      	cmp	r3, #3
 800eef6:	db0b      	blt.n	800ef10 <tcp_shutdown+0x98>
 800eef8:	2b04      	cmp	r3, #4
 800eefa:	dd01      	ble.n	800ef00 <tcp_shutdown+0x88>
 800eefc:	2b07      	cmp	r3, #7
 800eefe:	d107      	bne.n	800ef10 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	b2db      	uxtb	r3, r3
 800ef04:	4619      	mov	r1, r3
 800ef06:	68f8      	ldr	r0, [r7, #12]
 800ef08:	f7ff fe46 	bl	800eb98 <tcp_close_shutdown>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	e003      	b.n	800ef18 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800ef10:	f06f 030a 	mvn.w	r3, #10
 800ef14:	e000      	b.n	800ef18 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800ef16:	2300      	movs	r3, #0
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3710      	adds	r7, #16
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	0801cc00 	.word	0x0801cc00
 800ef24:	0801cd28 	.word	0x0801cd28
 800ef28:	0801cc44 	.word	0x0801cc44

0800ef2c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b08e      	sub	sp, #56	; 0x38
 800ef30:	af04      	add	r7, sp, #16
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d107      	bne.n	800ef4c <tcp_abandon+0x20>
 800ef3c:	4b52      	ldr	r3, [pc, #328]	; (800f088 <tcp_abandon+0x15c>)
 800ef3e:	f240 223d 	movw	r2, #573	; 0x23d
 800ef42:	4952      	ldr	r1, [pc, #328]	; (800f08c <tcp_abandon+0x160>)
 800ef44:	4852      	ldr	r0, [pc, #328]	; (800f090 <tcp_abandon+0x164>)
 800ef46:	f00a fff7 	bl	8019f38 <iprintf>
 800ef4a:	e099      	b.n	800f080 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	7d1b      	ldrb	r3, [r3, #20]
 800ef50:	2b01      	cmp	r3, #1
 800ef52:	d106      	bne.n	800ef62 <tcp_abandon+0x36>
 800ef54:	4b4c      	ldr	r3, [pc, #304]	; (800f088 <tcp_abandon+0x15c>)
 800ef56:	f240 2241 	movw	r2, #577	; 0x241
 800ef5a:	494e      	ldr	r1, [pc, #312]	; (800f094 <tcp_abandon+0x168>)
 800ef5c:	484c      	ldr	r0, [pc, #304]	; (800f090 <tcp_abandon+0x164>)
 800ef5e:	f00a ffeb 	bl	8019f38 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	7d1b      	ldrb	r3, [r3, #20]
 800ef66:	2b0a      	cmp	r3, #10
 800ef68:	d107      	bne.n	800ef7a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800ef6a:	6879      	ldr	r1, [r7, #4]
 800ef6c:	484a      	ldr	r0, [pc, #296]	; (800f098 <tcp_abandon+0x16c>)
 800ef6e:	f001 fa65 	bl	801043c <tcp_pcb_remove>
    tcp_free(pcb);
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7ff fd5e 	bl	800ea34 <tcp_free>
 800ef78:	e082      	b.n	800f080 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef86:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef8c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef94:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	691b      	ldr	r3, [r3, #16]
 800ef9a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	7d1b      	ldrb	r3, [r3, #20]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d126      	bne.n	800eff2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	8adb      	ldrh	r3, [r3, #22]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d02e      	beq.n	800f00a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800efac:	4b3b      	ldr	r3, [pc, #236]	; (800f09c <tcp_abandon+0x170>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	687a      	ldr	r2, [r7, #4]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d105      	bne.n	800efc2 <tcp_abandon+0x96>
 800efb6:	4b39      	ldr	r3, [pc, #228]	; (800f09c <tcp_abandon+0x170>)
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	68db      	ldr	r3, [r3, #12]
 800efbc:	4a37      	ldr	r2, [pc, #220]	; (800f09c <tcp_abandon+0x170>)
 800efbe:	6013      	str	r3, [r2, #0]
 800efc0:	e013      	b.n	800efea <tcp_abandon+0xbe>
 800efc2:	4b36      	ldr	r3, [pc, #216]	; (800f09c <tcp_abandon+0x170>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	61fb      	str	r3, [r7, #28]
 800efc8:	e00c      	b.n	800efe4 <tcp_abandon+0xb8>
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	68db      	ldr	r3, [r3, #12]
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d104      	bne.n	800efde <tcp_abandon+0xb2>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	68da      	ldr	r2, [r3, #12]
 800efd8:	69fb      	ldr	r3, [r7, #28]
 800efda:	60da      	str	r2, [r3, #12]
 800efdc:	e005      	b.n	800efea <tcp_abandon+0xbe>
 800efde:	69fb      	ldr	r3, [r7, #28]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	61fb      	str	r3, [r7, #28]
 800efe4:	69fb      	ldr	r3, [r7, #28]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d1ef      	bne.n	800efca <tcp_abandon+0x9e>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2200      	movs	r2, #0
 800efee:	60da      	str	r2, [r3, #12]
 800eff0:	e00b      	b.n	800f00a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	8adb      	ldrh	r3, [r3, #22]
 800effa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800effc:	6879      	ldr	r1, [r7, #4]
 800effe:	4828      	ldr	r0, [pc, #160]	; (800f0a0 <tcp_abandon+0x174>)
 800f000:	f001 fa1c 	bl	801043c <tcp_pcb_remove>
 800f004:	4b27      	ldr	r3, [pc, #156]	; (800f0a4 <tcp_abandon+0x178>)
 800f006:	2201      	movs	r2, #1
 800f008:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d004      	beq.n	800f01c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f016:	4618      	mov	r0, r3
 800f018:	f000 fed4 	bl	800fdc4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f020:	2b00      	cmp	r3, #0
 800f022:	d004      	beq.n	800f02e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f028:	4618      	mov	r0, r3
 800f02a:	f000 fecb 	bl	800fdc4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f032:	2b00      	cmp	r3, #0
 800f034:	d004      	beq.n	800f040 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f03a:	4618      	mov	r0, r3
 800f03c:	f000 fec2 	bl	800fdc4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00e      	beq.n	800f064 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f046:	6879      	ldr	r1, [r7, #4]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	3304      	adds	r3, #4
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	8b12      	ldrh	r2, [r2, #24]
 800f050:	9202      	str	r2, [sp, #8]
 800f052:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f054:	9201      	str	r2, [sp, #4]
 800f056:	9300      	str	r3, [sp, #0]
 800f058:	460b      	mov	r3, r1
 800f05a:	697a      	ldr	r2, [r7, #20]
 800f05c:	69b9      	ldr	r1, [r7, #24]
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f005 fbc8 	bl	80147f4 <tcp_rst>
    }
    last_state = pcb->state;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	7d1b      	ldrb	r3, [r3, #20]
 800f068:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f7ff fce2 	bl	800ea34 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d004      	beq.n	800f080 <tcp_abandon+0x154>
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	f06f 010c 	mvn.w	r1, #12
 800f07c:	68f8      	ldr	r0, [r7, #12]
 800f07e:	4798      	blx	r3
  }
}
 800f080:	3728      	adds	r7, #40	; 0x28
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	0801cc00 	.word	0x0801cc00
 800f08c:	0801cd44 	.word	0x0801cd44
 800f090:	0801cc44 	.word	0x0801cc44
 800f094:	0801cd60 	.word	0x0801cd60
 800f098:	20016eb4 	.word	0x20016eb4
 800f09c:	20016eb0 	.word	0x20016eb0
 800f0a0:	20016ea4 	.word	0x20016ea4
 800f0a4:	20016ea0 	.word	0x20016ea0

0800f0a8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f0b0:	2101      	movs	r1, #1
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7ff ff3a 	bl	800ef2c <tcp_abandon>
}
 800f0b8:	bf00      	nop
 800f0ba:	3708      	adds	r7, #8
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b088      	sub	sp, #32
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	60f8      	str	r0, [r7, #12]
 800f0c8:	60b9      	str	r1, [r7, #8]
 800f0ca:	4613      	mov	r3, r2
 800f0cc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f0ce:	2304      	movs	r3, #4
 800f0d0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d101      	bne.n	800f0dc <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f0d8:	4b3e      	ldr	r3, [pc, #248]	; (800f1d4 <tcp_bind+0x114>)
 800f0da:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d109      	bne.n	800f0f6 <tcp_bind+0x36>
 800f0e2:	4b3d      	ldr	r3, [pc, #244]	; (800f1d8 <tcp_bind+0x118>)
 800f0e4:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f0e8:	493c      	ldr	r1, [pc, #240]	; (800f1dc <tcp_bind+0x11c>)
 800f0ea:	483d      	ldr	r0, [pc, #244]	; (800f1e0 <tcp_bind+0x120>)
 800f0ec:	f00a ff24 	bl	8019f38 <iprintf>
 800f0f0:	f06f 030f 	mvn.w	r3, #15
 800f0f4:	e06a      	b.n	800f1cc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	7d1b      	ldrb	r3, [r3, #20]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d009      	beq.n	800f112 <tcp_bind+0x52>
 800f0fe:	4b36      	ldr	r3, [pc, #216]	; (800f1d8 <tcp_bind+0x118>)
 800f100:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f104:	4937      	ldr	r1, [pc, #220]	; (800f1e4 <tcp_bind+0x124>)
 800f106:	4836      	ldr	r0, [pc, #216]	; (800f1e0 <tcp_bind+0x120>)
 800f108:	f00a ff16 	bl	8019f38 <iprintf>
 800f10c:	f06f 0305 	mvn.w	r3, #5
 800f110:	e05c      	b.n	800f1cc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f112:	88fb      	ldrh	r3, [r7, #6]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d109      	bne.n	800f12c <tcp_bind+0x6c>
    port = tcp_new_port();
 800f118:	f000 f9f0 	bl	800f4fc <tcp_new_port>
 800f11c:	4603      	mov	r3, r0
 800f11e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f120:	88fb      	ldrh	r3, [r7, #6]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d135      	bne.n	800f192 <tcp_bind+0xd2>
      return ERR_BUF;
 800f126:	f06f 0301 	mvn.w	r3, #1
 800f12a:	e04f      	b.n	800f1cc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f12c:	2300      	movs	r3, #0
 800f12e:	61fb      	str	r3, [r7, #28]
 800f130:	e02b      	b.n	800f18a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f132:	4a2d      	ldr	r2, [pc, #180]	; (800f1e8 <tcp_bind+0x128>)
 800f134:	69fb      	ldr	r3, [r7, #28]
 800f136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	61bb      	str	r3, [r7, #24]
 800f13e:	e01e      	b.n	800f17e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f140:	69bb      	ldr	r3, [r7, #24]
 800f142:	8adb      	ldrh	r3, [r3, #22]
 800f144:	88fa      	ldrh	r2, [r7, #6]
 800f146:	429a      	cmp	r2, r3
 800f148:	d116      	bne.n	800f178 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f14a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d010      	beq.n	800f172 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f150:	69bb      	ldr	r3, [r7, #24]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d00c      	beq.n	800f172 <tcp_bind+0xb2>
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d009      	beq.n	800f172 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d005      	beq.n	800f172 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f166:	69bb      	ldr	r3, [r7, #24]
 800f168:	681a      	ldr	r2, [r3, #0]
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f16e:	429a      	cmp	r2, r3
 800f170:	d102      	bne.n	800f178 <tcp_bind+0xb8>
              return ERR_USE;
 800f172:	f06f 0307 	mvn.w	r3, #7
 800f176:	e029      	b.n	800f1cc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f178:	69bb      	ldr	r3, [r7, #24]
 800f17a:	68db      	ldr	r3, [r3, #12]
 800f17c:	61bb      	str	r3, [r7, #24]
 800f17e:	69bb      	ldr	r3, [r7, #24]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d1dd      	bne.n	800f140 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	3301      	adds	r3, #1
 800f188:	61fb      	str	r3, [r7, #28]
 800f18a:	69fa      	ldr	r2, [r7, #28]
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	429a      	cmp	r2, r3
 800f190:	dbcf      	blt.n	800f132 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d00c      	beq.n	800f1b2 <tcp_bind+0xf2>
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d008      	beq.n	800f1b2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d002      	beq.n	800f1ac <tcp_bind+0xec>
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	e000      	b.n	800f1ae <tcp_bind+0xee>
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	68fa      	ldr	r2, [r7, #12]
 800f1b0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	88fa      	ldrh	r2, [r7, #6]
 800f1b6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f1b8:	4b0c      	ldr	r3, [pc, #48]	; (800f1ec <tcp_bind+0x12c>)
 800f1ba:	681a      	ldr	r2, [r3, #0]
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	60da      	str	r2, [r3, #12]
 800f1c0:	4a0a      	ldr	r2, [pc, #40]	; (800f1ec <tcp_bind+0x12c>)
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	6013      	str	r3, [r2, #0]
 800f1c6:	f005 fcd7 	bl	8014b78 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f1ca:	2300      	movs	r3, #0
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3720      	adds	r7, #32
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	08040274 	.word	0x08040274
 800f1d8:	0801cc00 	.word	0x0801cc00
 800f1dc:	0801cd94 	.word	0x0801cd94
 800f1e0:	0801cc44 	.word	0x0801cc44
 800f1e4:	0801cdac 	.word	0x0801cdac
 800f1e8:	0804023c 	.word	0x0804023c
 800f1ec:	20016eb0 	.word	0x20016eb0

0800f1f0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b084      	sub	sp, #16
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	60f8      	str	r0, [r7, #12]
 800f1f8:	60b9      	str	r1, [r7, #8]
 800f1fa:	4613      	mov	r3, r2
 800f1fc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f1fe:	68bb      	ldr	r3, [r7, #8]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d106      	bne.n	800f212 <tcp_accept_null+0x22>
 800f204:	4b07      	ldr	r3, [pc, #28]	; (800f224 <tcp_accept_null+0x34>)
 800f206:	f240 320f 	movw	r2, #783	; 0x30f
 800f20a:	4907      	ldr	r1, [pc, #28]	; (800f228 <tcp_accept_null+0x38>)
 800f20c:	4807      	ldr	r0, [pc, #28]	; (800f22c <tcp_accept_null+0x3c>)
 800f20e:	f00a fe93 	bl	8019f38 <iprintf>

  tcp_abort(pcb);
 800f212:	68b8      	ldr	r0, [r7, #8]
 800f214:	f7ff ff48 	bl	800f0a8 <tcp_abort>

  return ERR_ABRT;
 800f218:	f06f 030c 	mvn.w	r3, #12
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3710      	adds	r7, #16
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	0801cc00 	.word	0x0801cc00
 800f228:	0801cdd4 	.word	0x0801cdd4
 800f22c:	0801cc44 	.word	0x0801cc44

0800f230 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b082      	sub	sp, #8
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	460b      	mov	r3, r1
 800f23a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800f23c:	78fb      	ldrb	r3, [r7, #3]
 800f23e:	2200      	movs	r2, #0
 800f240:	4619      	mov	r1, r3
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 f806 	bl	800f254 <tcp_listen_with_backlog_and_err>
 800f248:	4603      	mov	r3, r0
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3708      	adds	r7, #8
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
	...

0800f254 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b088      	sub	sp, #32
 800f258:	af00      	add	r7, sp, #0
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	460b      	mov	r3, r1
 800f25e:	607a      	str	r2, [r7, #4]
 800f260:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f262:	2300      	movs	r3, #0
 800f264:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d109      	bne.n	800f280 <tcp_listen_with_backlog_and_err+0x2c>
 800f26c:	4b47      	ldr	r3, [pc, #284]	; (800f38c <tcp_listen_with_backlog_and_err+0x138>)
 800f26e:	f240 3259 	movw	r2, #857	; 0x359
 800f272:	4947      	ldr	r1, [pc, #284]	; (800f390 <tcp_listen_with_backlog_and_err+0x13c>)
 800f274:	4847      	ldr	r0, [pc, #284]	; (800f394 <tcp_listen_with_backlog_and_err+0x140>)
 800f276:	f00a fe5f 	bl	8019f38 <iprintf>
 800f27a:	23f0      	movs	r3, #240	; 0xf0
 800f27c:	76fb      	strb	r3, [r7, #27]
 800f27e:	e079      	b.n	800f374 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	7d1b      	ldrb	r3, [r3, #20]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d009      	beq.n	800f29c <tcp_listen_with_backlog_and_err+0x48>
 800f288:	4b40      	ldr	r3, [pc, #256]	; (800f38c <tcp_listen_with_backlog_and_err+0x138>)
 800f28a:	f240 325a 	movw	r2, #858	; 0x35a
 800f28e:	4942      	ldr	r1, [pc, #264]	; (800f398 <tcp_listen_with_backlog_and_err+0x144>)
 800f290:	4840      	ldr	r0, [pc, #256]	; (800f394 <tcp_listen_with_backlog_and_err+0x140>)
 800f292:	f00a fe51 	bl	8019f38 <iprintf>
 800f296:	23f1      	movs	r3, #241	; 0xf1
 800f298:	76fb      	strb	r3, [r7, #27]
 800f29a:	e06b      	b.n	800f374 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	7d1b      	ldrb	r3, [r3, #20]
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d104      	bne.n	800f2ae <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f2a8:	23f7      	movs	r3, #247	; 0xf7
 800f2aa:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f2ac:	e062      	b.n	800f374 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f2ae:	2002      	movs	r0, #2
 800f2b0:	f7fe fa06 	bl	800d6c0 <memp_malloc>
 800f2b4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f2b6:	69fb      	ldr	r3, [r7, #28]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d102      	bne.n	800f2c2 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f2bc:	23ff      	movs	r3, #255	; 0xff
 800f2be:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f2c0:	e058      	b.n	800f374 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	691a      	ldr	r2, [r3, #16]
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	8ada      	ldrh	r2, [r3, #22]
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f2d2:	69fb      	ldr	r3, [r7, #28]
 800f2d4:	2201      	movs	r2, #1
 800f2d6:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	7d5a      	ldrb	r2, [r3, #21]
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	7a5a      	ldrb	r2, [r3, #9]
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	7ada      	ldrb	r2, [r3, #11]
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	7a9a      	ldrb	r2, [r3, #10]
 800f2fa:	69fb      	ldr	r3, [r7, #28]
 800f2fc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	69fb      	ldr	r3, [r7, #28]
 800f304:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	8adb      	ldrh	r3, [r3, #22]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d021      	beq.n	800f352 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f30e:	4b23      	ldr	r3, [pc, #140]	; (800f39c <tcp_listen_with_backlog_and_err+0x148>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	68fa      	ldr	r2, [r7, #12]
 800f314:	429a      	cmp	r2, r3
 800f316:	d105      	bne.n	800f324 <tcp_listen_with_backlog_and_err+0xd0>
 800f318:	4b20      	ldr	r3, [pc, #128]	; (800f39c <tcp_listen_with_backlog_and_err+0x148>)
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	68db      	ldr	r3, [r3, #12]
 800f31e:	4a1f      	ldr	r2, [pc, #124]	; (800f39c <tcp_listen_with_backlog_and_err+0x148>)
 800f320:	6013      	str	r3, [r2, #0]
 800f322:	e013      	b.n	800f34c <tcp_listen_with_backlog_and_err+0xf8>
 800f324:	4b1d      	ldr	r3, [pc, #116]	; (800f39c <tcp_listen_with_backlog_and_err+0x148>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	617b      	str	r3, [r7, #20]
 800f32a:	e00c      	b.n	800f346 <tcp_listen_with_backlog_and_err+0xf2>
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	68db      	ldr	r3, [r3, #12]
 800f330:	68fa      	ldr	r2, [r7, #12]
 800f332:	429a      	cmp	r2, r3
 800f334:	d104      	bne.n	800f340 <tcp_listen_with_backlog_and_err+0xec>
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	68da      	ldr	r2, [r3, #12]
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	60da      	str	r2, [r3, #12]
 800f33e:	e005      	b.n	800f34c <tcp_listen_with_backlog_and_err+0xf8>
 800f340:	697b      	ldr	r3, [r7, #20]
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	617b      	str	r3, [r7, #20]
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d1ef      	bne.n	800f32c <tcp_listen_with_backlog_and_err+0xd8>
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2200      	movs	r2, #0
 800f350:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f352:	68f8      	ldr	r0, [r7, #12]
 800f354:	f7ff fb6e 	bl	800ea34 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	4a11      	ldr	r2, [pc, #68]	; (800f3a0 <tcp_listen_with_backlog_and_err+0x14c>)
 800f35c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f35e:	4b11      	ldr	r3, [pc, #68]	; (800f3a4 <tcp_listen_with_backlog_and_err+0x150>)
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	69fb      	ldr	r3, [r7, #28]
 800f364:	60da      	str	r2, [r3, #12]
 800f366:	4a0f      	ldr	r2, [pc, #60]	; (800f3a4 <tcp_listen_with_backlog_and_err+0x150>)
 800f368:	69fb      	ldr	r3, [r7, #28]
 800f36a:	6013      	str	r3, [r2, #0]
 800f36c:	f005 fc04 	bl	8014b78 <tcp_timer_needed>
  res = ERR_OK;
 800f370:	2300      	movs	r3, #0
 800f372:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d002      	beq.n	800f380 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	7efa      	ldrb	r2, [r7, #27]
 800f37e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f380:	69fb      	ldr	r3, [r7, #28]
}
 800f382:	4618      	mov	r0, r3
 800f384:	3720      	adds	r7, #32
 800f386:	46bd      	mov	sp, r7
 800f388:	bd80      	pop	{r7, pc}
 800f38a:	bf00      	nop
 800f38c:	0801cc00 	.word	0x0801cc00
 800f390:	0801cdf4 	.word	0x0801cdf4
 800f394:	0801cc44 	.word	0x0801cc44
 800f398:	0801ce24 	.word	0x0801ce24
 800f39c:	20016eb0 	.word	0x20016eb0
 800f3a0:	0800f1f1 	.word	0x0800f1f1
 800f3a4:	20016eac 	.word	0x20016eac

0800f3a8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b084      	sub	sp, #16
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d106      	bne.n	800f3c4 <tcp_update_rcv_ann_wnd+0x1c>
 800f3b6:	4b25      	ldr	r3, [pc, #148]	; (800f44c <tcp_update_rcv_ann_wnd+0xa4>)
 800f3b8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f3bc:	4924      	ldr	r1, [pc, #144]	; (800f450 <tcp_update_rcv_ann_wnd+0xa8>)
 800f3be:	4825      	ldr	r0, [pc, #148]	; (800f454 <tcp_update_rcv_ann_wnd+0xac>)
 800f3c0:	f00a fdba 	bl	8019f38 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f3cc:	4413      	add	r3, r2
 800f3ce:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f3d8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f3dc:	bf28      	it	cs
 800f3de:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f3e2:	b292      	uxth	r2, r2
 800f3e4:	4413      	add	r3, r2
 800f3e6:	68fa      	ldr	r2, [r7, #12]
 800f3e8:	1ad3      	subs	r3, r2, r3
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	db08      	blt.n	800f400 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3fa:	68fa      	ldr	r2, [r7, #12]
 800f3fc:	1ad3      	subs	r3, r2, r3
 800f3fe:	e020      	b.n	800f442 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f408:	1ad3      	subs	r3, r2, r3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	dd03      	ble.n	800f416 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2200      	movs	r2, #0
 800f412:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f414:	e014      	b.n	800f440 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f41e:	1ad3      	subs	r3, r2, r3
 800f420:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f428:	d306      	bcc.n	800f438 <tcp_update_rcv_ann_wnd+0x90>
 800f42a:	4b08      	ldr	r3, [pc, #32]	; (800f44c <tcp_update_rcv_ann_wnd+0xa4>)
 800f42c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f430:	4909      	ldr	r1, [pc, #36]	; (800f458 <tcp_update_rcv_ann_wnd+0xb0>)
 800f432:	4808      	ldr	r0, [pc, #32]	; (800f454 <tcp_update_rcv_ann_wnd+0xac>)
 800f434:	f00a fd80 	bl	8019f38 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	b29a      	uxth	r2, r3
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f440:	2300      	movs	r3, #0
  }
}
 800f442:	4618      	mov	r0, r3
 800f444:	3710      	adds	r7, #16
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	0801cc00 	.word	0x0801cc00
 800f450:	0801ce5c 	.word	0x0801ce5c
 800f454:	0801cc44 	.word	0x0801cc44
 800f458:	0801ce80 	.word	0x0801ce80

0800f45c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	460b      	mov	r3, r1
 800f466:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d107      	bne.n	800f47e <tcp_recved+0x22>
 800f46e:	4b1f      	ldr	r3, [pc, #124]	; (800f4ec <tcp_recved+0x90>)
 800f470:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f474:	491e      	ldr	r1, [pc, #120]	; (800f4f0 <tcp_recved+0x94>)
 800f476:	481f      	ldr	r0, [pc, #124]	; (800f4f4 <tcp_recved+0x98>)
 800f478:	f00a fd5e 	bl	8019f38 <iprintf>
 800f47c:	e032      	b.n	800f4e4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	7d1b      	ldrb	r3, [r3, #20]
 800f482:	2b01      	cmp	r3, #1
 800f484:	d106      	bne.n	800f494 <tcp_recved+0x38>
 800f486:	4b19      	ldr	r3, [pc, #100]	; (800f4ec <tcp_recved+0x90>)
 800f488:	f240 32d3 	movw	r2, #979	; 0x3d3
 800f48c:	491a      	ldr	r1, [pc, #104]	; (800f4f8 <tcp_recved+0x9c>)
 800f48e:	4819      	ldr	r0, [pc, #100]	; (800f4f4 <tcp_recved+0x98>)
 800f490:	f00a fd52 	bl	8019f38 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f498:	887b      	ldrh	r3, [r7, #2]
 800f49a:	4413      	add	r3, r2
 800f49c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f49e:	89fb      	ldrh	r3, [r7, #14]
 800f4a0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f4a4:	d804      	bhi.n	800f4b0 <tcp_recved+0x54>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f4aa:	89fa      	ldrh	r2, [r7, #14]
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d204      	bcs.n	800f4ba <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f4b6:	851a      	strh	r2, [r3, #40]	; 0x28
 800f4b8:	e002      	b.n	800f4c0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	89fa      	ldrh	r2, [r7, #14]
 800f4be:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f7ff ff71 	bl	800f3a8 <tcp_update_rcv_ann_wnd>
 800f4c6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f4ce:	d309      	bcc.n	800f4e4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	8b5b      	ldrh	r3, [r3, #26]
 800f4d4:	f043 0302 	orr.w	r3, r3, #2
 800f4d8:	b29a      	uxth	r2, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f004 fbc4 	bl	8013c6c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	0801cc00 	.word	0x0801cc00
 800f4f0:	0801ce9c 	.word	0x0801ce9c
 800f4f4:	0801cc44 	.word	0x0801cc44
 800f4f8:	0801ceb4 	.word	0x0801ceb4

0800f4fc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b083      	sub	sp, #12
 800f500:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f502:	2300      	movs	r3, #0
 800f504:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f506:	4b1e      	ldr	r3, [pc, #120]	; (800f580 <tcp_new_port+0x84>)
 800f508:	881b      	ldrh	r3, [r3, #0]
 800f50a:	3301      	adds	r3, #1
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	4b1c      	ldr	r3, [pc, #112]	; (800f580 <tcp_new_port+0x84>)
 800f510:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f512:	4b1b      	ldr	r3, [pc, #108]	; (800f580 <tcp_new_port+0x84>)
 800f514:	881b      	ldrh	r3, [r3, #0]
 800f516:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d103      	bne.n	800f526 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f51e:	4b18      	ldr	r3, [pc, #96]	; (800f580 <tcp_new_port+0x84>)
 800f520:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f524:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f526:	2300      	movs	r3, #0
 800f528:	71fb      	strb	r3, [r7, #7]
 800f52a:	e01e      	b.n	800f56a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f52c:	79fb      	ldrb	r3, [r7, #7]
 800f52e:	4a15      	ldr	r2, [pc, #84]	; (800f584 <tcp_new_port+0x88>)
 800f530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	603b      	str	r3, [r7, #0]
 800f538:	e011      	b.n	800f55e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	8ada      	ldrh	r2, [r3, #22]
 800f53e:	4b10      	ldr	r3, [pc, #64]	; (800f580 <tcp_new_port+0x84>)
 800f540:	881b      	ldrh	r3, [r3, #0]
 800f542:	429a      	cmp	r2, r3
 800f544:	d108      	bne.n	800f558 <tcp_new_port+0x5c>
        n++;
 800f546:	88bb      	ldrh	r3, [r7, #4]
 800f548:	3301      	adds	r3, #1
 800f54a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f54c:	88bb      	ldrh	r3, [r7, #4]
 800f54e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f552:	d3d8      	bcc.n	800f506 <tcp_new_port+0xa>
          return 0;
 800f554:	2300      	movs	r3, #0
 800f556:	e00d      	b.n	800f574 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	603b      	str	r3, [r7, #0]
 800f55e:	683b      	ldr	r3, [r7, #0]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d1ea      	bne.n	800f53a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f564:	79fb      	ldrb	r3, [r7, #7]
 800f566:	3301      	adds	r3, #1
 800f568:	71fb      	strb	r3, [r7, #7]
 800f56a:	79fb      	ldrb	r3, [r7, #7]
 800f56c:	2b03      	cmp	r3, #3
 800f56e:	d9dd      	bls.n	800f52c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f570:	4b03      	ldr	r3, [pc, #12]	; (800f580 <tcp_new_port+0x84>)
 800f572:	881b      	ldrh	r3, [r3, #0]
}
 800f574:	4618      	mov	r0, r3
 800f576:	370c      	adds	r7, #12
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr
 800f580:	20000096 	.word	0x20000096
 800f584:	0804023c 	.word	0x0804023c

0800f588 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f588:	b5b0      	push	{r4, r5, r7, lr}
 800f58a:	b090      	sub	sp, #64	; 0x40
 800f58c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f58e:	2300      	movs	r3, #0
 800f590:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f594:	4b94      	ldr	r3, [pc, #592]	; (800f7e8 <tcp_slowtmr+0x260>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	3301      	adds	r3, #1
 800f59a:	4a93      	ldr	r2, [pc, #588]	; (800f7e8 <tcp_slowtmr+0x260>)
 800f59c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f59e:	4b93      	ldr	r3, [pc, #588]	; (800f7ec <tcp_slowtmr+0x264>)
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	b2da      	uxtb	r2, r3
 800f5a6:	4b91      	ldr	r3, [pc, #580]	; (800f7ec <tcp_slowtmr+0x264>)
 800f5a8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f5ae:	4b90      	ldr	r3, [pc, #576]	; (800f7f0 <tcp_slowtmr+0x268>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f5b4:	e29f      	b.n	800faf6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5b8:	7d1b      	ldrb	r3, [r3, #20]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d106      	bne.n	800f5cc <tcp_slowtmr+0x44>
 800f5be:	4b8d      	ldr	r3, [pc, #564]	; (800f7f4 <tcp_slowtmr+0x26c>)
 800f5c0:	f240 42be 	movw	r2, #1214	; 0x4be
 800f5c4:	498c      	ldr	r1, [pc, #560]	; (800f7f8 <tcp_slowtmr+0x270>)
 800f5c6:	488d      	ldr	r0, [pc, #564]	; (800f7fc <tcp_slowtmr+0x274>)
 800f5c8:	f00a fcb6 	bl	8019f38 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5ce:	7d1b      	ldrb	r3, [r3, #20]
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d106      	bne.n	800f5e2 <tcp_slowtmr+0x5a>
 800f5d4:	4b87      	ldr	r3, [pc, #540]	; (800f7f4 <tcp_slowtmr+0x26c>)
 800f5d6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f5da:	4989      	ldr	r1, [pc, #548]	; (800f800 <tcp_slowtmr+0x278>)
 800f5dc:	4887      	ldr	r0, [pc, #540]	; (800f7fc <tcp_slowtmr+0x274>)
 800f5de:	f00a fcab 	bl	8019f38 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5e4:	7d1b      	ldrb	r3, [r3, #20]
 800f5e6:	2b0a      	cmp	r3, #10
 800f5e8:	d106      	bne.n	800f5f8 <tcp_slowtmr+0x70>
 800f5ea:	4b82      	ldr	r3, [pc, #520]	; (800f7f4 <tcp_slowtmr+0x26c>)
 800f5ec:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f5f0:	4984      	ldr	r1, [pc, #528]	; (800f804 <tcp_slowtmr+0x27c>)
 800f5f2:	4882      	ldr	r0, [pc, #520]	; (800f7fc <tcp_slowtmr+0x274>)
 800f5f4:	f00a fca0 	bl	8019f38 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5fa:	7f9a      	ldrb	r2, [r3, #30]
 800f5fc:	4b7b      	ldr	r3, [pc, #492]	; (800f7ec <tcp_slowtmr+0x264>)
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	429a      	cmp	r2, r3
 800f602:	d105      	bne.n	800f610 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f606:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f60e:	e272      	b.n	800faf6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f610:	4b76      	ldr	r3, [pc, #472]	; (800f7ec <tcp_slowtmr+0x264>)
 800f612:	781a      	ldrb	r2, [r3, #0]
 800f614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f616:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f618:	2300      	movs	r3, #0
 800f61a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f61e:	2300      	movs	r3, #0
 800f620:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f626:	7d1b      	ldrb	r3, [r3, #20]
 800f628:	2b02      	cmp	r3, #2
 800f62a:	d10a      	bne.n	800f642 <tcp_slowtmr+0xba>
 800f62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f632:	2b05      	cmp	r3, #5
 800f634:	d905      	bls.n	800f642 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f63a:	3301      	adds	r3, #1
 800f63c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f640:	e11e      	b.n	800f880 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f644:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f648:	2b0b      	cmp	r3, #11
 800f64a:	d905      	bls.n	800f658 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f650:	3301      	adds	r3, #1
 800f652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f656:	e113      	b.n	800f880 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f65a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d075      	beq.n	800f74e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f666:	2b00      	cmp	r3, #0
 800f668:	d006      	beq.n	800f678 <tcp_slowtmr+0xf0>
 800f66a:	4b62      	ldr	r3, [pc, #392]	; (800f7f4 <tcp_slowtmr+0x26c>)
 800f66c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f670:	4965      	ldr	r1, [pc, #404]	; (800f808 <tcp_slowtmr+0x280>)
 800f672:	4862      	ldr	r0, [pc, #392]	; (800f7fc <tcp_slowtmr+0x274>)
 800f674:	f00a fc60 	bl	8019f38 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d106      	bne.n	800f68e <tcp_slowtmr+0x106>
 800f680:	4b5c      	ldr	r3, [pc, #368]	; (800f7f4 <tcp_slowtmr+0x26c>)
 800f682:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f686:	4961      	ldr	r1, [pc, #388]	; (800f80c <tcp_slowtmr+0x284>)
 800f688:	485c      	ldr	r0, [pc, #368]	; (800f7fc <tcp_slowtmr+0x274>)
 800f68a:	f00a fc55 	bl	8019f38 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f690:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f694:	2b0b      	cmp	r3, #11
 800f696:	d905      	bls.n	800f6a4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f69c:	3301      	adds	r3, #1
 800f69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6a2:	e0ed      	b.n	800f880 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f6aa:	3b01      	subs	r3, #1
 800f6ac:	4a58      	ldr	r2, [pc, #352]	; (800f810 <tcp_slowtmr+0x288>)
 800f6ae:	5cd3      	ldrb	r3, [r2, r3]
 800f6b0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f6b8:	7c7a      	ldrb	r2, [r7, #17]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d907      	bls.n	800f6ce <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	b2da      	uxtb	r2, r3
 800f6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f6d4:	7c7a      	ldrb	r2, [r7, #17]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	f200 80d2 	bhi.w	800f880 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f6dc:	2301      	movs	r3, #1
 800f6de:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d108      	bne.n	800f6fc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f6ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f6ec:	f005 f976 	bl	80149dc <tcp_zero_window_probe>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d014      	beq.n	800f720 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	623b      	str	r3, [r7, #32]
 800f6fa:	e011      	b.n	800f720 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f702:	4619      	mov	r1, r3
 800f704:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f706:	f004 f82b 	bl	8013760 <tcp_split_unsent_seg>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d107      	bne.n	800f720 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f710:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f712:	f004 faab 	bl	8013c6c <tcp_output>
 800f716:	4603      	mov	r3, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d101      	bne.n	800f720 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f71c:	2300      	movs	r3, #0
 800f71e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f720:	6a3b      	ldr	r3, [r7, #32]
 800f722:	2b00      	cmp	r3, #0
 800f724:	f000 80ac 	beq.w	800f880 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72a:	2200      	movs	r2, #0
 800f72c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f732:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f736:	2b06      	cmp	r3, #6
 800f738:	f200 80a2 	bhi.w	800f880 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f742:	3301      	adds	r3, #1
 800f744:	b2da      	uxtb	r2, r3
 800f746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f748:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f74c:	e098      	b.n	800f880 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f750:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f754:	2b00      	cmp	r3, #0
 800f756:	db0f      	blt.n	800f778 <tcp_slowtmr+0x1f0>
 800f758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f75a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f75e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f762:	4293      	cmp	r3, r2
 800f764:	d008      	beq.n	800f778 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f768:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	3301      	adds	r3, #1
 800f770:	b29b      	uxth	r3, r3
 800f772:	b21a      	sxth	r2, r3
 800f774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f776:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f780:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f784:	429a      	cmp	r2, r3
 800f786:	db7b      	blt.n	800f880 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f788:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f78a:	f004 fd67 	bl	801425c <tcp_rexmit_rto_prepare>
 800f78e:	4603      	mov	r3, r0
 800f790:	2b00      	cmp	r3, #0
 800f792:	d007      	beq.n	800f7a4 <tcp_slowtmr+0x21c>
 800f794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d171      	bne.n	800f880 <tcp_slowtmr+0x2f8>
 800f79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d06d      	beq.n	800f880 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7a6:	7d1b      	ldrb	r3, [r3, #20]
 800f7a8:	2b02      	cmp	r3, #2
 800f7aa:	d03a      	beq.n	800f822 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f7b2:	2b0c      	cmp	r3, #12
 800f7b4:	bf28      	it	cs
 800f7b6:	230c      	movcs	r3, #12
 800f7b8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7c0:	10db      	asrs	r3, r3, #3
 800f7c2:	b21b      	sxth	r3, r3
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7cc:	4413      	add	r3, r2
 800f7ce:	7efa      	ldrb	r2, [r7, #27]
 800f7d0:	4910      	ldr	r1, [pc, #64]	; (800f814 <tcp_slowtmr+0x28c>)
 800f7d2:	5c8a      	ldrb	r2, [r1, r2]
 800f7d4:	4093      	lsls	r3, r2
 800f7d6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	dc1a      	bgt.n	800f818 <tcp_slowtmr+0x290>
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	b21a      	sxth	r2, r3
 800f7e6:	e019      	b.n	800f81c <tcp_slowtmr+0x294>
 800f7e8:	20016ea8 	.word	0x20016ea8
 800f7ec:	200102e6 	.word	0x200102e6
 800f7f0:	20016ea4 	.word	0x20016ea4
 800f7f4:	0801cc00 	.word	0x0801cc00
 800f7f8:	0801cf44 	.word	0x0801cf44
 800f7fc:	0801cc44 	.word	0x0801cc44
 800f800:	0801cf70 	.word	0x0801cf70
 800f804:	0801cf9c 	.word	0x0801cf9c
 800f808:	0801cfcc 	.word	0x0801cfcc
 800f80c:	0801d000 	.word	0x0801d000
 800f810:	08040234 	.word	0x08040234
 800f814:	08040224 	.word	0x08040224
 800f818:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f81c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f81e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f824:	2200      	movs	r2, #0
 800f826:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f82e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f830:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f834:	4293      	cmp	r3, r2
 800f836:	bf28      	it	cs
 800f838:	4613      	movcs	r3, r2
 800f83a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f83c:	8a7b      	ldrh	r3, [r7, #18]
 800f83e:	085b      	lsrs	r3, r3, #1
 800f840:	b29a      	uxth	r2, r3
 800f842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f844:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f84a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f850:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f852:	005b      	lsls	r3, r3, #1
 800f854:	b29b      	uxth	r3, r3
 800f856:	429a      	cmp	r2, r3
 800f858:	d206      	bcs.n	800f868 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f85c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f85e:	005b      	lsls	r3, r3, #1
 800f860:	b29a      	uxth	r2, r3
 800f862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f864:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f874:	2200      	movs	r2, #0
 800f876:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f87a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f87c:	f004 fd5e 	bl	801433c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f882:	7d1b      	ldrb	r3, [r3, #20]
 800f884:	2b06      	cmp	r3, #6
 800f886:	d111      	bne.n	800f8ac <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f88a:	8b5b      	ldrh	r3, [r3, #26]
 800f88c:	f003 0310 	and.w	r3, r3, #16
 800f890:	2b00      	cmp	r3, #0
 800f892:	d00b      	beq.n	800f8ac <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f894:	4b9d      	ldr	r3, [pc, #628]	; (800fb0c <tcp_slowtmr+0x584>)
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89a:	6a1b      	ldr	r3, [r3, #32]
 800f89c:	1ad3      	subs	r3, r2, r3
 800f89e:	2b28      	cmp	r3, #40	; 0x28
 800f8a0:	d904      	bls.n	800f8ac <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f8a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ae:	7a5b      	ldrb	r3, [r3, #9]
 800f8b0:	f003 0308 	and.w	r3, r3, #8
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d04c      	beq.n	800f952 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ba:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f8bc:	2b04      	cmp	r3, #4
 800f8be:	d003      	beq.n	800f8c8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f8c4:	2b07      	cmp	r3, #7
 800f8c6:	d144      	bne.n	800f952 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f8c8:	4b90      	ldr	r3, [pc, #576]	; (800fb0c <tcp_slowtmr+0x584>)
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ce:	6a1b      	ldr	r3, [r3, #32]
 800f8d0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8d8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f8dc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f8e0:	498b      	ldr	r1, [pc, #556]	; (800fb10 <tcp_slowtmr+0x588>)
 800f8e2:	fba1 1303 	umull	r1, r3, r1, r3
 800f8e6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d90a      	bls.n	800f902 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f8f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f900:	e027      	b.n	800f952 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f902:	4b82      	ldr	r3, [pc, #520]	; (800fb0c <tcp_slowtmr+0x584>)
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f908:	6a1b      	ldr	r3, [r3, #32]
 800f90a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f914:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f918:	4618      	mov	r0, r3
 800f91a:	4b7e      	ldr	r3, [pc, #504]	; (800fb14 <tcp_slowtmr+0x58c>)
 800f91c:	fb03 f300 	mul.w	r3, r3, r0
 800f920:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f922:	497b      	ldr	r1, [pc, #492]	; (800fb10 <tcp_slowtmr+0x588>)
 800f924:	fba1 1303 	umull	r1, r3, r1, r3
 800f928:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d911      	bls.n	800f952 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f92e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f930:	f005 f814 	bl	801495c <tcp_keepalive>
 800f934:	4603      	mov	r3, r0
 800f936:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f93a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d107      	bne.n	800f952 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f944:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f948:	3301      	adds	r3, #1
 800f94a:	b2da      	uxtb	r2, r3
 800f94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f956:	2b00      	cmp	r3, #0
 800f958:	d011      	beq.n	800f97e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f95a:	4b6c      	ldr	r3, [pc, #432]	; (800fb0c <tcp_slowtmr+0x584>)
 800f95c:	681a      	ldr	r2, [r3, #0]
 800f95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f960:	6a1b      	ldr	r3, [r3, #32]
 800f962:	1ad2      	subs	r2, r2, r3
 800f964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f966:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f96a:	4619      	mov	r1, r3
 800f96c:	460b      	mov	r3, r1
 800f96e:	005b      	lsls	r3, r3, #1
 800f970:	440b      	add	r3, r1
 800f972:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f974:	429a      	cmp	r2, r3
 800f976:	d302      	bcc.n	800f97e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f97a:	f000 fec3 	bl	8010704 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f980:	7d1b      	ldrb	r3, [r3, #20]
 800f982:	2b03      	cmp	r3, #3
 800f984:	d10b      	bne.n	800f99e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f986:	4b61      	ldr	r3, [pc, #388]	; (800fb0c <tcp_slowtmr+0x584>)
 800f988:	681a      	ldr	r2, [r3, #0]
 800f98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98c:	6a1b      	ldr	r3, [r3, #32]
 800f98e:	1ad3      	subs	r3, r2, r3
 800f990:	2b28      	cmp	r3, #40	; 0x28
 800f992:	d904      	bls.n	800f99e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f998:	3301      	adds	r3, #1
 800f99a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a0:	7d1b      	ldrb	r3, [r3, #20]
 800f9a2:	2b09      	cmp	r3, #9
 800f9a4:	d10b      	bne.n	800f9be <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f9a6:	4b59      	ldr	r3, [pc, #356]	; (800fb0c <tcp_slowtmr+0x584>)
 800f9a8:	681a      	ldr	r2, [r3, #0]
 800f9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ac:	6a1b      	ldr	r3, [r3, #32]
 800f9ae:	1ad3      	subs	r3, r2, r3
 800f9b0:	2bf0      	cmp	r3, #240	; 0xf0
 800f9b2:	d904      	bls.n	800f9be <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f9b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f9be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d060      	beq.n	800fa88 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9cc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f9ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9d0:	f000 fce4 	bl	801039c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d010      	beq.n	800f9fc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f9da:	4b4f      	ldr	r3, [pc, #316]	; (800fb18 <tcp_slowtmr+0x590>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	d106      	bne.n	800f9f2 <tcp_slowtmr+0x46a>
 800f9e4:	4b4d      	ldr	r3, [pc, #308]	; (800fb1c <tcp_slowtmr+0x594>)
 800f9e6:	f240 526d 	movw	r2, #1389	; 0x56d
 800f9ea:	494d      	ldr	r1, [pc, #308]	; (800fb20 <tcp_slowtmr+0x598>)
 800f9ec:	484d      	ldr	r0, [pc, #308]	; (800fb24 <tcp_slowtmr+0x59c>)
 800f9ee:	f00a faa3 	bl	8019f38 <iprintf>
        prev->next = pcb->next;
 800f9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f4:	68da      	ldr	r2, [r3, #12]
 800f9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f8:	60da      	str	r2, [r3, #12]
 800f9fa:	e00f      	b.n	800fa1c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f9fc:	4b46      	ldr	r3, [pc, #280]	; (800fb18 <tcp_slowtmr+0x590>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa02:	429a      	cmp	r2, r3
 800fa04:	d006      	beq.n	800fa14 <tcp_slowtmr+0x48c>
 800fa06:	4b45      	ldr	r3, [pc, #276]	; (800fb1c <tcp_slowtmr+0x594>)
 800fa08:	f240 5271 	movw	r2, #1393	; 0x571
 800fa0c:	4946      	ldr	r1, [pc, #280]	; (800fb28 <tcp_slowtmr+0x5a0>)
 800fa0e:	4845      	ldr	r0, [pc, #276]	; (800fb24 <tcp_slowtmr+0x59c>)
 800fa10:	f00a fa92 	bl	8019f38 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	4a3f      	ldr	r2, [pc, #252]	; (800fb18 <tcp_slowtmr+0x590>)
 800fa1a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fa1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d013      	beq.n	800fa4c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa26:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fa28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fa2c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa30:	3304      	adds	r3, #4
 800fa32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa34:	8ad2      	ldrh	r2, [r2, #22]
 800fa36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa38:	8b09      	ldrh	r1, [r1, #24]
 800fa3a:	9102      	str	r1, [sp, #8]
 800fa3c:	9201      	str	r2, [sp, #4]
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	462b      	mov	r3, r5
 800fa42:	4622      	mov	r2, r4
 800fa44:	4601      	mov	r1, r0
 800fa46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa48:	f004 fed4 	bl	80147f4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fa4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4e:	691b      	ldr	r3, [r3, #16]
 800fa50:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fa52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa54:	7d1b      	ldrb	r3, [r3, #20]
 800fa56:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fa62:	6838      	ldr	r0, [r7, #0]
 800fa64:	f7fe ffe6 	bl	800ea34 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fa68:	4b30      	ldr	r3, [pc, #192]	; (800fb2c <tcp_slowtmr+0x5a4>)
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d004      	beq.n	800fa7e <tcp_slowtmr+0x4f6>
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	f06f 010c 	mvn.w	r1, #12
 800fa7a:	68b8      	ldr	r0, [r7, #8]
 800fa7c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fa7e:	4b2b      	ldr	r3, [pc, #172]	; (800fb2c <tcp_slowtmr+0x5a4>)
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d037      	beq.n	800faf6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800fa86:	e590      	b.n	800f5aa <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8e:	68db      	ldr	r3, [r3, #12]
 800fa90:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa94:	7f1b      	ldrb	r3, [r3, #28]
 800fa96:	3301      	adds	r3, #1
 800fa98:	b2da      	uxtb	r2, r3
 800fa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fa9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa0:	7f1a      	ldrb	r2, [r3, #28]
 800faa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa4:	7f5b      	ldrb	r3, [r3, #29]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d325      	bcc.n	800faf6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800faaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faac:	2200      	movs	r2, #0
 800faae:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fab0:	4b1e      	ldr	r3, [pc, #120]	; (800fb2c <tcp_slowtmr+0x5a4>)
 800fab2:	2200      	movs	r2, #0
 800fab4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d00b      	beq.n	800fad8 <tcp_slowtmr+0x550>
 800fac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fac8:	6912      	ldr	r2, [r2, #16]
 800faca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800facc:	4610      	mov	r0, r2
 800face:	4798      	blx	r3
 800fad0:	4603      	mov	r3, r0
 800fad2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fad6:	e002      	b.n	800fade <tcp_slowtmr+0x556>
 800fad8:	2300      	movs	r3, #0
 800fada:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fade:	4b13      	ldr	r3, [pc, #76]	; (800fb2c <tcp_slowtmr+0x5a4>)
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d000      	beq.n	800fae8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800fae6:	e560      	b.n	800f5aa <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fae8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800faec:	2b00      	cmp	r3, #0
 800faee:	d102      	bne.n	800faf6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800faf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800faf2:	f004 f8bb 	bl	8013c6c <tcp_output>
  while (pcb != NULL) {
 800faf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	f47f ad5c 	bne.w	800f5b6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fafe:	2300      	movs	r3, #0
 800fb00:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fb02:	4b0b      	ldr	r3, [pc, #44]	; (800fb30 <tcp_slowtmr+0x5a8>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fb08:	e067      	b.n	800fbda <tcp_slowtmr+0x652>
 800fb0a:	bf00      	nop
 800fb0c:	20016ea8 	.word	0x20016ea8
 800fb10:	10624dd3 	.word	0x10624dd3
 800fb14:	000124f8 	.word	0x000124f8
 800fb18:	20016ea4 	.word	0x20016ea4
 800fb1c:	0801cc00 	.word	0x0801cc00
 800fb20:	0801d038 	.word	0x0801d038
 800fb24:	0801cc44 	.word	0x0801cc44
 800fb28:	0801d064 	.word	0x0801d064
 800fb2c:	20016ea0 	.word	0x20016ea0
 800fb30:	20016eb4 	.word	0x20016eb4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb36:	7d1b      	ldrb	r3, [r3, #20]
 800fb38:	2b0a      	cmp	r3, #10
 800fb3a:	d006      	beq.n	800fb4a <tcp_slowtmr+0x5c2>
 800fb3c:	4b2a      	ldr	r3, [pc, #168]	; (800fbe8 <tcp_slowtmr+0x660>)
 800fb3e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fb42:	492a      	ldr	r1, [pc, #168]	; (800fbec <tcp_slowtmr+0x664>)
 800fb44:	482a      	ldr	r0, [pc, #168]	; (800fbf0 <tcp_slowtmr+0x668>)
 800fb46:	f00a f9f7 	bl	8019f38 <iprintf>
    pcb_remove = 0;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fb50:	4b28      	ldr	r3, [pc, #160]	; (800fbf4 <tcp_slowtmr+0x66c>)
 800fb52:	681a      	ldr	r2, [r3, #0]
 800fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb56:	6a1b      	ldr	r3, [r3, #32]
 800fb58:	1ad3      	subs	r3, r2, r3
 800fb5a:	2bf0      	cmp	r3, #240	; 0xf0
 800fb5c:	d904      	bls.n	800fb68 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fb5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb62:	3301      	adds	r3, #1
 800fb64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fb68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d02f      	beq.n	800fbd0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fb70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb72:	f000 fc13 	bl	801039c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fb76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d010      	beq.n	800fb9e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fb7c:	4b1e      	ldr	r3, [pc, #120]	; (800fbf8 <tcp_slowtmr+0x670>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d106      	bne.n	800fb94 <tcp_slowtmr+0x60c>
 800fb86:	4b18      	ldr	r3, [pc, #96]	; (800fbe8 <tcp_slowtmr+0x660>)
 800fb88:	f240 52af 	movw	r2, #1455	; 0x5af
 800fb8c:	491b      	ldr	r1, [pc, #108]	; (800fbfc <tcp_slowtmr+0x674>)
 800fb8e:	4818      	ldr	r0, [pc, #96]	; (800fbf0 <tcp_slowtmr+0x668>)
 800fb90:	f00a f9d2 	bl	8019f38 <iprintf>
        prev->next = pcb->next;
 800fb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb96:	68da      	ldr	r2, [r3, #12]
 800fb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb9a:	60da      	str	r2, [r3, #12]
 800fb9c:	e00f      	b.n	800fbbe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fb9e:	4b16      	ldr	r3, [pc, #88]	; (800fbf8 <tcp_slowtmr+0x670>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d006      	beq.n	800fbb6 <tcp_slowtmr+0x62e>
 800fba8:	4b0f      	ldr	r3, [pc, #60]	; (800fbe8 <tcp_slowtmr+0x660>)
 800fbaa:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fbae:	4914      	ldr	r1, [pc, #80]	; (800fc00 <tcp_slowtmr+0x678>)
 800fbb0:	480f      	ldr	r0, [pc, #60]	; (800fbf0 <tcp_slowtmr+0x668>)
 800fbb2:	f00a f9c1 	bl	8019f38 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb8:	68db      	ldr	r3, [r3, #12]
 800fbba:	4a0f      	ldr	r2, [pc, #60]	; (800fbf8 <tcp_slowtmr+0x670>)
 800fbbc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc4:	68db      	ldr	r3, [r3, #12]
 800fbc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fbc8:	69f8      	ldr	r0, [r7, #28]
 800fbca:	f7fe ff33 	bl	800ea34 <tcp_free>
 800fbce:	e004      	b.n	800fbda <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd6:	68db      	ldr	r3, [r3, #12]
 800fbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fbda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d1a9      	bne.n	800fb34 <tcp_slowtmr+0x5ac>
    }
  }
}
 800fbe0:	bf00      	nop
 800fbe2:	3730      	adds	r7, #48	; 0x30
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bdb0      	pop	{r4, r5, r7, pc}
 800fbe8:	0801cc00 	.word	0x0801cc00
 800fbec:	0801d090 	.word	0x0801d090
 800fbf0:	0801cc44 	.word	0x0801cc44
 800fbf4:	20016ea8 	.word	0x20016ea8
 800fbf8:	20016eb4 	.word	0x20016eb4
 800fbfc:	0801d0c0 	.word	0x0801d0c0
 800fc00:	0801d0e8 	.word	0x0801d0e8

0800fc04 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fc0a:	4b2d      	ldr	r3, [pc, #180]	; (800fcc0 <tcp_fasttmr+0xbc>)
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	b2da      	uxtb	r2, r3
 800fc12:	4b2b      	ldr	r3, [pc, #172]	; (800fcc0 <tcp_fasttmr+0xbc>)
 800fc14:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fc16:	4b2b      	ldr	r3, [pc, #172]	; (800fcc4 <tcp_fasttmr+0xc0>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fc1c:	e048      	b.n	800fcb0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	7f9a      	ldrb	r2, [r3, #30]
 800fc22:	4b27      	ldr	r3, [pc, #156]	; (800fcc0 <tcp_fasttmr+0xbc>)
 800fc24:	781b      	ldrb	r3, [r3, #0]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d03f      	beq.n	800fcaa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fc2a:	4b25      	ldr	r3, [pc, #148]	; (800fcc0 <tcp_fasttmr+0xbc>)
 800fc2c:	781a      	ldrb	r2, [r3, #0]
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	8b5b      	ldrh	r3, [r3, #26]
 800fc36:	f003 0301 	and.w	r3, r3, #1
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d010      	beq.n	800fc60 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	8b5b      	ldrh	r3, [r3, #26]
 800fc42:	f043 0302 	orr.w	r3, r3, #2
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	f004 f80d 	bl	8013c6c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	8b5b      	ldrh	r3, [r3, #26]
 800fc56:	f023 0303 	bic.w	r3, r3, #3
 800fc5a:	b29a      	uxth	r2, r3
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	8b5b      	ldrh	r3, [r3, #26]
 800fc64:	f003 0308 	and.w	r3, r3, #8
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d009      	beq.n	800fc80 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	8b5b      	ldrh	r3, [r3, #26]
 800fc70:	f023 0308 	bic.w	r3, r3, #8
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f7ff f86a 	bl	800ed54 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	68db      	ldr	r3, [r3, #12]
 800fc84:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d00a      	beq.n	800fca4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fc8e:	4b0e      	ldr	r3, [pc, #56]	; (800fcc8 <tcp_fasttmr+0xc4>)
 800fc90:	2200      	movs	r2, #0
 800fc92:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 f819 	bl	800fccc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fc9a:	4b0b      	ldr	r3, [pc, #44]	; (800fcc8 <tcp_fasttmr+0xc4>)
 800fc9c:	781b      	ldrb	r3, [r3, #0]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d000      	beq.n	800fca4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fca2:	e7b8      	b.n	800fc16 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	607b      	str	r3, [r7, #4]
 800fca8:	e002      	b.n	800fcb0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	68db      	ldr	r3, [r3, #12]
 800fcae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d1b3      	bne.n	800fc1e <tcp_fasttmr+0x1a>
    }
  }
}
 800fcb6:	bf00      	nop
 800fcb8:	3708      	adds	r7, #8
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	200102e6 	.word	0x200102e6
 800fcc4:	20016ea4 	.word	0x20016ea4
 800fcc8:	20016ea0 	.word	0x20016ea0

0800fccc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fccc:	b590      	push	{r4, r7, lr}
 800fcce:	b085      	sub	sp, #20
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d109      	bne.n	800fcee <tcp_process_refused_data+0x22>
 800fcda:	4b37      	ldr	r3, [pc, #220]	; (800fdb8 <tcp_process_refused_data+0xec>)
 800fcdc:	f240 6209 	movw	r2, #1545	; 0x609
 800fce0:	4936      	ldr	r1, [pc, #216]	; (800fdbc <tcp_process_refused_data+0xf0>)
 800fce2:	4837      	ldr	r0, [pc, #220]	; (800fdc0 <tcp_process_refused_data+0xf4>)
 800fce4:	f00a f928 	bl	8019f38 <iprintf>
 800fce8:	f06f 030f 	mvn.w	r3, #15
 800fcec:	e060      	b.n	800fdb0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcf2:	7b5b      	ldrb	r3, [r3, #13]
 800fcf4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcfa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d00b      	beq.n	800fd24 <tcp_process_refused_data+0x58>
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6918      	ldr	r0, [r3, #16]
 800fd16:	2300      	movs	r3, #0
 800fd18:	68ba      	ldr	r2, [r7, #8]
 800fd1a:	6879      	ldr	r1, [r7, #4]
 800fd1c:	47a0      	blx	r4
 800fd1e:	4603      	mov	r3, r0
 800fd20:	73fb      	strb	r3, [r7, #15]
 800fd22:	e007      	b.n	800fd34 <tcp_process_refused_data+0x68>
 800fd24:	2300      	movs	r3, #0
 800fd26:	68ba      	ldr	r2, [r7, #8]
 800fd28:	6879      	ldr	r1, [r7, #4]
 800fd2a:	2000      	movs	r0, #0
 800fd2c:	f000 f8c0 	bl	800feb0 <tcp_recv_null>
 800fd30:	4603      	mov	r3, r0
 800fd32:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fd34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d12a      	bne.n	800fd92 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fd3c:	7bbb      	ldrb	r3, [r7, #14]
 800fd3e:	f003 0320 	and.w	r3, r3, #32
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d033      	beq.n	800fdae <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fd4e:	d005      	beq.n	800fd5c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd54:	3301      	adds	r3, #1
 800fd56:	b29a      	uxth	r2, r3
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d00b      	beq.n	800fd7e <tcp_process_refused_data+0xb2>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6918      	ldr	r0, [r3, #16]
 800fd70:	2300      	movs	r3, #0
 800fd72:	2200      	movs	r2, #0
 800fd74:	6879      	ldr	r1, [r7, #4]
 800fd76:	47a0      	blx	r4
 800fd78:	4603      	mov	r3, r0
 800fd7a:	73fb      	strb	r3, [r7, #15]
 800fd7c:	e001      	b.n	800fd82 <tcp_process_refused_data+0xb6>
 800fd7e:	2300      	movs	r3, #0
 800fd80:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fd82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd86:	f113 0f0d 	cmn.w	r3, #13
 800fd8a:	d110      	bne.n	800fdae <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fd8c:	f06f 030c 	mvn.w	r3, #12
 800fd90:	e00e      	b.n	800fdb0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fd92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd96:	f113 0f0d 	cmn.w	r3, #13
 800fd9a:	d102      	bne.n	800fda2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fd9c:	f06f 030c 	mvn.w	r3, #12
 800fda0:	e006      	b.n	800fdb0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	68ba      	ldr	r2, [r7, #8]
 800fda6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800fda8:	f06f 0304 	mvn.w	r3, #4
 800fdac:	e000      	b.n	800fdb0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fdae:	2300      	movs	r3, #0
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3714      	adds	r7, #20
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd90      	pop	{r4, r7, pc}
 800fdb8:	0801cc00 	.word	0x0801cc00
 800fdbc:	0801d110 	.word	0x0801d110
 800fdc0:	0801cc44 	.word	0x0801cc44

0800fdc4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fdcc:	e007      	b.n	800fdde <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f000 f809 	bl	800fdec <tcp_seg_free>
    seg = next;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d1f4      	bne.n	800fdce <tcp_segs_free+0xa>
  }
}
 800fde4:	bf00      	nop
 800fde6:	3710      	adds	r7, #16
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d00c      	beq.n	800fe14 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	685b      	ldr	r3, [r3, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d004      	beq.n	800fe0c <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7fe fb58 	bl	800e4bc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800fe0c:	6879      	ldr	r1, [r7, #4]
 800fe0e:	2003      	movs	r0, #3
 800fe10:	f7fd fca8 	bl	800d764 <memp_free>
  }
}
 800fe14:	bf00      	nop
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	460b      	mov	r3, r1
 800fe26:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d107      	bne.n	800fe3e <tcp_setprio+0x22>
 800fe2e:	4b07      	ldr	r3, [pc, #28]	; (800fe4c <tcp_setprio+0x30>)
 800fe30:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800fe34:	4906      	ldr	r1, [pc, #24]	; (800fe50 <tcp_setprio+0x34>)
 800fe36:	4807      	ldr	r0, [pc, #28]	; (800fe54 <tcp_setprio+0x38>)
 800fe38:	f00a f87e 	bl	8019f38 <iprintf>
 800fe3c:	e002      	b.n	800fe44 <tcp_setprio+0x28>

  pcb->prio = prio;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	78fa      	ldrb	r2, [r7, #3]
 800fe42:	755a      	strb	r2, [r3, #21]
}
 800fe44:	3708      	adds	r7, #8
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
 800fe4a:	bf00      	nop
 800fe4c:	0801cc00 	.word	0x0801cc00
 800fe50:	0801d138 	.word	0x0801d138
 800fe54:	0801cc44 	.word	0x0801cc44

0800fe58 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d106      	bne.n	800fe74 <tcp_seg_copy+0x1c>
 800fe66:	4b0f      	ldr	r3, [pc, #60]	; (800fea4 <tcp_seg_copy+0x4c>)
 800fe68:	f240 6282 	movw	r2, #1666	; 0x682
 800fe6c:	490e      	ldr	r1, [pc, #56]	; (800fea8 <tcp_seg_copy+0x50>)
 800fe6e:	480f      	ldr	r0, [pc, #60]	; (800feac <tcp_seg_copy+0x54>)
 800fe70:	f00a f862 	bl	8019f38 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800fe74:	2003      	movs	r0, #3
 800fe76:	f7fd fc23 	bl	800d6c0 <memp_malloc>
 800fe7a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d101      	bne.n	800fe86 <tcp_seg_copy+0x2e>
    return NULL;
 800fe82:	2300      	movs	r3, #0
 800fe84:	e00a      	b.n	800fe9c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800fe86:	2210      	movs	r2, #16
 800fe88:	6879      	ldr	r1, [r7, #4]
 800fe8a:	68f8      	ldr	r0, [r7, #12]
 800fe8c:	f00a f827 	bl	8019ede <memcpy>
  pbuf_ref(cseg->p);
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f7fe fbb7 	bl	800e608 <pbuf_ref>
  return cseg;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3710      	adds	r7, #16
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	0801cc00 	.word	0x0801cc00
 800fea8:	0801d154 	.word	0x0801d154
 800feac:	0801cc44 	.word	0x0801cc44

0800feb0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	60f8      	str	r0, [r7, #12]
 800feb8:	60b9      	str	r1, [r7, #8]
 800feba:	607a      	str	r2, [r7, #4]
 800febc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d109      	bne.n	800fed8 <tcp_recv_null+0x28>
 800fec4:	4b12      	ldr	r3, [pc, #72]	; (800ff10 <tcp_recv_null+0x60>)
 800fec6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800feca:	4912      	ldr	r1, [pc, #72]	; (800ff14 <tcp_recv_null+0x64>)
 800fecc:	4812      	ldr	r0, [pc, #72]	; (800ff18 <tcp_recv_null+0x68>)
 800fece:	f00a f833 	bl	8019f38 <iprintf>
 800fed2:	f06f 030f 	mvn.w	r3, #15
 800fed6:	e016      	b.n	800ff06 <tcp_recv_null+0x56>

  if (p != NULL) {
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d009      	beq.n	800fef2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	891b      	ldrh	r3, [r3, #8]
 800fee2:	4619      	mov	r1, r3
 800fee4:	68b8      	ldr	r0, [r7, #8]
 800fee6:	f7ff fab9 	bl	800f45c <tcp_recved>
    pbuf_free(p);
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f7fe fae6 	bl	800e4bc <pbuf_free>
 800fef0:	e008      	b.n	800ff04 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800fef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d104      	bne.n	800ff04 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800fefa:	68b8      	ldr	r0, [r7, #8]
 800fefc:	f7fe ff90 	bl	800ee20 <tcp_close>
 800ff00:	4603      	mov	r3, r0
 800ff02:	e000      	b.n	800ff06 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ff04:	2300      	movs	r3, #0
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3710      	adds	r7, #16
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	0801cc00 	.word	0x0801cc00
 800ff14:	0801d170 	.word	0x0801d170
 800ff18:	0801cc44 	.word	0x0801cc44

0800ff1c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b086      	sub	sp, #24
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	4603      	mov	r3, r0
 800ff24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ff26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	db01      	blt.n	800ff32 <tcp_kill_prio+0x16>
 800ff2e:	79fb      	ldrb	r3, [r7, #7]
 800ff30:	e000      	b.n	800ff34 <tcp_kill_prio+0x18>
 800ff32:	237f      	movs	r3, #127	; 0x7f
 800ff34:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ff36:	7afb      	ldrb	r3, [r7, #11]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d034      	beq.n	800ffa6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ff3c:	7afb      	ldrb	r3, [r7, #11]
 800ff3e:	3b01      	subs	r3, #1
 800ff40:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ff42:	2300      	movs	r3, #0
 800ff44:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ff46:	2300      	movs	r3, #0
 800ff48:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff4a:	4b19      	ldr	r3, [pc, #100]	; (800ffb0 <tcp_kill_prio+0x94>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	617b      	str	r3, [r7, #20]
 800ff50:	e01f      	b.n	800ff92 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ff52:	697b      	ldr	r3, [r7, #20]
 800ff54:	7d5b      	ldrb	r3, [r3, #21]
 800ff56:	7afa      	ldrb	r2, [r7, #11]
 800ff58:	429a      	cmp	r2, r3
 800ff5a:	d80c      	bhi.n	800ff76 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ff60:	7afa      	ldrb	r2, [r7, #11]
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d112      	bne.n	800ff8c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ff66:	4b13      	ldr	r3, [pc, #76]	; (800ffb4 <tcp_kill_prio+0x98>)
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	6a1b      	ldr	r3, [r3, #32]
 800ff6e:	1ad3      	subs	r3, r2, r3
 800ff70:	68fa      	ldr	r2, [r7, #12]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d80a      	bhi.n	800ff8c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ff76:	4b0f      	ldr	r3, [pc, #60]	; (800ffb4 <tcp_kill_prio+0x98>)
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	6a1b      	ldr	r3, [r3, #32]
 800ff7e:	1ad3      	subs	r3, r2, r3
 800ff80:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ff86:	697b      	ldr	r3, [r7, #20]
 800ff88:	7d5b      	ldrb	r3, [r3, #21]
 800ff8a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	68db      	ldr	r3, [r3, #12]
 800ff90:	617b      	str	r3, [r7, #20]
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d1dc      	bne.n	800ff52 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d004      	beq.n	800ffa8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ff9e:	6938      	ldr	r0, [r7, #16]
 800ffa0:	f7ff f882 	bl	800f0a8 <tcp_abort>
 800ffa4:	e000      	b.n	800ffa8 <tcp_kill_prio+0x8c>
    return;
 800ffa6:	bf00      	nop
  }
}
 800ffa8:	3718      	adds	r7, #24
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	20016ea4 	.word	0x20016ea4
 800ffb4:	20016ea8 	.word	0x20016ea8

0800ffb8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b086      	sub	sp, #24
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ffc2:	79fb      	ldrb	r3, [r7, #7]
 800ffc4:	2b08      	cmp	r3, #8
 800ffc6:	d009      	beq.n	800ffdc <tcp_kill_state+0x24>
 800ffc8:	79fb      	ldrb	r3, [r7, #7]
 800ffca:	2b09      	cmp	r3, #9
 800ffcc:	d006      	beq.n	800ffdc <tcp_kill_state+0x24>
 800ffce:	4b1a      	ldr	r3, [pc, #104]	; (8010038 <tcp_kill_state+0x80>)
 800ffd0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ffd4:	4919      	ldr	r1, [pc, #100]	; (801003c <tcp_kill_state+0x84>)
 800ffd6:	481a      	ldr	r0, [pc, #104]	; (8010040 <tcp_kill_state+0x88>)
 800ffd8:	f009 ffae 	bl	8019f38 <iprintf>

  inactivity = 0;
 800ffdc:	2300      	movs	r3, #0
 800ffde:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffe4:	4b17      	ldr	r3, [pc, #92]	; (8010044 <tcp_kill_state+0x8c>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	617b      	str	r3, [r7, #20]
 800ffea:	e017      	b.n	801001c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	7d1b      	ldrb	r3, [r3, #20]
 800fff0:	79fa      	ldrb	r2, [r7, #7]
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d10f      	bne.n	8010016 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800fff6:	4b14      	ldr	r3, [pc, #80]	; (8010048 <tcp_kill_state+0x90>)
 800fff8:	681a      	ldr	r2, [r3, #0]
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	6a1b      	ldr	r3, [r3, #32]
 800fffe:	1ad3      	subs	r3, r2, r3
 8010000:	68fa      	ldr	r2, [r7, #12]
 8010002:	429a      	cmp	r2, r3
 8010004:	d807      	bhi.n	8010016 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010006:	4b10      	ldr	r3, [pc, #64]	; (8010048 <tcp_kill_state+0x90>)
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	6a1b      	ldr	r3, [r3, #32]
 801000e:	1ad3      	subs	r3, r2, r3
 8010010:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010012:	697b      	ldr	r3, [r7, #20]
 8010014:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	617b      	str	r3, [r7, #20]
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d1e4      	bne.n	800ffec <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010022:	693b      	ldr	r3, [r7, #16]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d003      	beq.n	8010030 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010028:	2100      	movs	r1, #0
 801002a:	6938      	ldr	r0, [r7, #16]
 801002c:	f7fe ff7e 	bl	800ef2c <tcp_abandon>
  }
}
 8010030:	bf00      	nop
 8010032:	3718      	adds	r7, #24
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	0801cc00 	.word	0x0801cc00
 801003c:	0801d18c 	.word	0x0801d18c
 8010040:	0801cc44 	.word	0x0801cc44
 8010044:	20016ea4 	.word	0x20016ea4
 8010048:	20016ea8 	.word	0x20016ea8

0801004c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010052:	2300      	movs	r3, #0
 8010054:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010056:	2300      	movs	r3, #0
 8010058:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801005a:	4b12      	ldr	r3, [pc, #72]	; (80100a4 <tcp_kill_timewait+0x58>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	60fb      	str	r3, [r7, #12]
 8010060:	e012      	b.n	8010088 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010062:	4b11      	ldr	r3, [pc, #68]	; (80100a8 <tcp_kill_timewait+0x5c>)
 8010064:	681a      	ldr	r2, [r3, #0]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	6a1b      	ldr	r3, [r3, #32]
 801006a:	1ad3      	subs	r3, r2, r3
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	429a      	cmp	r2, r3
 8010070:	d807      	bhi.n	8010082 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010072:	4b0d      	ldr	r3, [pc, #52]	; (80100a8 <tcp_kill_timewait+0x5c>)
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	6a1b      	ldr	r3, [r3, #32]
 801007a:	1ad3      	subs	r3, r2, r3
 801007c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	68db      	ldr	r3, [r3, #12]
 8010086:	60fb      	str	r3, [r7, #12]
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d1e9      	bne.n	8010062 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d002      	beq.n	801009a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010094:	68b8      	ldr	r0, [r7, #8]
 8010096:	f7ff f807 	bl	800f0a8 <tcp_abort>
  }
}
 801009a:	bf00      	nop
 801009c:	3710      	adds	r7, #16
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	20016eb4 	.word	0x20016eb4
 80100a8:	20016ea8 	.word	0x20016ea8

080100ac <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b082      	sub	sp, #8
 80100b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80100b2:	4b10      	ldr	r3, [pc, #64]	; (80100f4 <tcp_handle_closepend+0x48>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80100b8:	e014      	b.n	80100e4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	68db      	ldr	r3, [r3, #12]
 80100be:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	8b5b      	ldrh	r3, [r3, #26]
 80100c4:	f003 0308 	and.w	r3, r3, #8
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d009      	beq.n	80100e0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	8b5b      	ldrh	r3, [r3, #26]
 80100d0:	f023 0308 	bic.w	r3, r3, #8
 80100d4:	b29a      	uxth	r2, r3
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80100da:	6878      	ldr	r0, [r7, #4]
 80100dc:	f7fe fe3a 	bl	800ed54 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d1e7      	bne.n	80100ba <tcp_handle_closepend+0xe>
  }
}
 80100ea:	bf00      	nop
 80100ec:	3708      	adds	r7, #8
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
 80100f2:	bf00      	nop
 80100f4:	20016ea4 	.word	0x20016ea4

080100f8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b084      	sub	sp, #16
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	4603      	mov	r3, r0
 8010100:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010102:	2001      	movs	r0, #1
 8010104:	f7fd fadc 	bl	800d6c0 <memp_malloc>
 8010108:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d126      	bne.n	801015e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010110:	f7ff ffcc 	bl	80100ac <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010114:	f7ff ff9a 	bl	801004c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010118:	2001      	movs	r0, #1
 801011a:	f7fd fad1 	bl	800d6c0 <memp_malloc>
 801011e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d11b      	bne.n	801015e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010126:	2009      	movs	r0, #9
 8010128:	f7ff ff46 	bl	800ffb8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801012c:	2001      	movs	r0, #1
 801012e:	f7fd fac7 	bl	800d6c0 <memp_malloc>
 8010132:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d111      	bne.n	801015e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801013a:	2008      	movs	r0, #8
 801013c:	f7ff ff3c 	bl	800ffb8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010140:	2001      	movs	r0, #1
 8010142:	f7fd fabd 	bl	800d6c0 <memp_malloc>
 8010146:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d107      	bne.n	801015e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801014e:	79fb      	ldrb	r3, [r7, #7]
 8010150:	4618      	mov	r0, r3
 8010152:	f7ff fee3 	bl	800ff1c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010156:	2001      	movs	r0, #1
 8010158:	f7fd fab2 	bl	800d6c0 <memp_malloc>
 801015c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d03f      	beq.n	80101e4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010164:	229c      	movs	r2, #156	; 0x9c
 8010166:	2100      	movs	r1, #0
 8010168:	68f8      	ldr	r0, [r7, #12]
 801016a:	f009 fedc 	bl	8019f26 <memset>
    pcb->prio = prio;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	79fa      	ldrb	r2, [r7, #7]
 8010172:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801017a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010184:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	22ff      	movs	r2, #255	; 0xff
 8010192:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	f44f 7206 	mov.w	r2, #536	; 0x218
 801019a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	2206      	movs	r2, #6
 80101a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	2206      	movs	r2, #6
 80101a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101b0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2201      	movs	r2, #1
 80101b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80101ba:	4b0d      	ldr	r3, [pc, #52]	; (80101f0 <tcp_alloc+0xf8>)
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80101c2:	4b0c      	ldr	r3, [pc, #48]	; (80101f4 <tcp_alloc+0xfc>)
 80101c4:	781a      	ldrb	r2, [r3, #0]
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80101d0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	4a08      	ldr	r2, [pc, #32]	; (80101f8 <tcp_alloc+0x100>)
 80101d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	4a07      	ldr	r2, [pc, #28]	; (80101fc <tcp_alloc+0x104>)
 80101e0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80101e4:	68fb      	ldr	r3, [r7, #12]
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3710      	adds	r7, #16
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	20016ea8 	.word	0x20016ea8
 80101f4:	200102e6 	.word	0x200102e6
 80101f8:	0800feb1 	.word	0x0800feb1
 80101fc:	006ddd00 	.word	0x006ddd00

08010200 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b084      	sub	sp, #16
 8010204:	af00      	add	r7, sp, #0
 8010206:	4603      	mov	r3, r0
 8010208:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801020a:	2040      	movs	r0, #64	; 0x40
 801020c:	f7ff ff74 	bl	80100f8 <tcp_alloc>
 8010210:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010212:	68fb      	ldr	r3, [r7, #12]
}
 8010214:	4618      	mov	r0, r3
 8010216:	3710      	adds	r7, #16
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d002      	beq.n	8010232 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	683a      	ldr	r2, [r7, #0]
 8010230:	611a      	str	r2, [r3, #16]
  }
}
 8010232:	bf00      	nop
 8010234:	370c      	adds	r7, #12
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr
	...

08010240 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d00e      	beq.n	801026e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	7d1b      	ldrb	r3, [r3, #20]
 8010254:	2b01      	cmp	r3, #1
 8010256:	d106      	bne.n	8010266 <tcp_recv+0x26>
 8010258:	4b07      	ldr	r3, [pc, #28]	; (8010278 <tcp_recv+0x38>)
 801025a:	f240 72df 	movw	r2, #2015	; 0x7df
 801025e:	4907      	ldr	r1, [pc, #28]	; (801027c <tcp_recv+0x3c>)
 8010260:	4807      	ldr	r0, [pc, #28]	; (8010280 <tcp_recv+0x40>)
 8010262:	f009 fe69 	bl	8019f38 <iprintf>
    pcb->recv = recv;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	683a      	ldr	r2, [r7, #0]
 801026a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801026e:	bf00      	nop
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	0801cc00 	.word	0x0801cc00
 801027c:	0801d19c 	.word	0x0801d19c
 8010280:	0801cc44 	.word	0x0801cc44

08010284 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b082      	sub	sp, #8
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d00e      	beq.n	80102b2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	7d1b      	ldrb	r3, [r3, #20]
 8010298:	2b01      	cmp	r3, #1
 801029a:	d106      	bne.n	80102aa <tcp_sent+0x26>
 801029c:	4b07      	ldr	r3, [pc, #28]	; (80102bc <tcp_sent+0x38>)
 801029e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80102a2:	4907      	ldr	r1, [pc, #28]	; (80102c0 <tcp_sent+0x3c>)
 80102a4:	4807      	ldr	r0, [pc, #28]	; (80102c4 <tcp_sent+0x40>)
 80102a6:	f009 fe47 	bl	8019f38 <iprintf>
    pcb->sent = sent;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	683a      	ldr	r2, [r7, #0]
 80102ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80102b2:	bf00      	nop
 80102b4:	3708      	adds	r7, #8
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	0801cc00 	.word	0x0801cc00
 80102c0:	0801d1c4 	.word	0x0801d1c4
 80102c4:	0801cc44 	.word	0x0801cc44

080102c8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b082      	sub	sp, #8
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
 80102d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d00e      	beq.n	80102f6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	7d1b      	ldrb	r3, [r3, #20]
 80102dc:	2b01      	cmp	r3, #1
 80102de:	d106      	bne.n	80102ee <tcp_err+0x26>
 80102e0:	4b07      	ldr	r3, [pc, #28]	; (8010300 <tcp_err+0x38>)
 80102e2:	f640 020d 	movw	r2, #2061	; 0x80d
 80102e6:	4907      	ldr	r1, [pc, #28]	; (8010304 <tcp_err+0x3c>)
 80102e8:	4807      	ldr	r0, [pc, #28]	; (8010308 <tcp_err+0x40>)
 80102ea:	f009 fe25 	bl	8019f38 <iprintf>
    pcb->errf = err;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	683a      	ldr	r2, [r7, #0]
 80102f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80102f6:	bf00      	nop
 80102f8:	3708      	adds	r7, #8
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	0801cc00 	.word	0x0801cc00
 8010304:	0801d1ec 	.word	0x0801d1ec
 8010308:	0801cc44 	.word	0x0801cc44

0801030c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801030c:	b480      	push	{r7}
 801030e:	b085      	sub	sp, #20
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
 8010314:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d008      	beq.n	801032e <tcp_accept+0x22>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	7d1b      	ldrb	r3, [r3, #20]
 8010320:	2b01      	cmp	r3, #1
 8010322:	d104      	bne.n	801032e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	683a      	ldr	r2, [r7, #0]
 801032c:	619a      	str	r2, [r3, #24]
  }
}
 801032e:	bf00      	nop
 8010330:	3714      	adds	r7, #20
 8010332:	46bd      	mov	sp, r7
 8010334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010338:	4770      	bx	lr
	...

0801033c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b084      	sub	sp, #16
 8010340:	af00      	add	r7, sp, #0
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	4613      	mov	r3, r2
 8010348:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d107      	bne.n	8010360 <tcp_poll+0x24>
 8010350:	4b0e      	ldr	r3, [pc, #56]	; (801038c <tcp_poll+0x50>)
 8010352:	f640 023d 	movw	r2, #2109	; 0x83d
 8010356:	490e      	ldr	r1, [pc, #56]	; (8010390 <tcp_poll+0x54>)
 8010358:	480e      	ldr	r0, [pc, #56]	; (8010394 <tcp_poll+0x58>)
 801035a:	f009 fded 	bl	8019f38 <iprintf>
 801035e:	e011      	b.n	8010384 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	7d1b      	ldrb	r3, [r3, #20]
 8010364:	2b01      	cmp	r3, #1
 8010366:	d106      	bne.n	8010376 <tcp_poll+0x3a>
 8010368:	4b08      	ldr	r3, [pc, #32]	; (801038c <tcp_poll+0x50>)
 801036a:	f640 023e 	movw	r2, #2110	; 0x83e
 801036e:	490a      	ldr	r1, [pc, #40]	; (8010398 <tcp_poll+0x5c>)
 8010370:	4808      	ldr	r0, [pc, #32]	; (8010394 <tcp_poll+0x58>)
 8010372:	f009 fde1 	bl	8019f38 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	68ba      	ldr	r2, [r7, #8]
 801037a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	79fa      	ldrb	r2, [r7, #7]
 8010382:	775a      	strb	r2, [r3, #29]
}
 8010384:	3710      	adds	r7, #16
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
 801038a:	bf00      	nop
 801038c:	0801cc00 	.word	0x0801cc00
 8010390:	0801d214 	.word	0x0801d214
 8010394:	0801cc44 	.word	0x0801cc44
 8010398:	0801d22c 	.word	0x0801d22c

0801039c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801039c:	b580      	push	{r7, lr}
 801039e:	b082      	sub	sp, #8
 80103a0:	af00      	add	r7, sp, #0
 80103a2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d107      	bne.n	80103ba <tcp_pcb_purge+0x1e>
 80103aa:	4b21      	ldr	r3, [pc, #132]	; (8010430 <tcp_pcb_purge+0x94>)
 80103ac:	f640 0251 	movw	r2, #2129	; 0x851
 80103b0:	4920      	ldr	r1, [pc, #128]	; (8010434 <tcp_pcb_purge+0x98>)
 80103b2:	4821      	ldr	r0, [pc, #132]	; (8010438 <tcp_pcb_purge+0x9c>)
 80103b4:	f009 fdc0 	bl	8019f38 <iprintf>
 80103b8:	e037      	b.n	801042a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	7d1b      	ldrb	r3, [r3, #20]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d033      	beq.n	801042a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80103c6:	2b0a      	cmp	r3, #10
 80103c8:	d02f      	beq.n	801042a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80103ce:	2b01      	cmp	r3, #1
 80103d0:	d02b      	beq.n	801042a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d007      	beq.n	80103ea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fe f86c 	bl	800e4bc <pbuf_free>
      pcb->refused_data = NULL;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2200      	movs	r2, #0
 80103e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d002      	beq.n	80103f8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f000 f986 	bl	8010704 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80103fe:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010404:	4618      	mov	r0, r3
 8010406:	f7ff fcdd 	bl	800fdc4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801040e:	4618      	mov	r0, r3
 8010410:	f7ff fcd8 	bl	800fdc4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2200      	movs	r2, #0
 8010418:	66da      	str	r2, [r3, #108]	; 0x6c
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	2200      	movs	r2, #0
 8010426:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801042a:	3708      	adds	r7, #8
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	0801cc00 	.word	0x0801cc00
 8010434:	0801d24c 	.word	0x0801d24c
 8010438:	0801cc44 	.word	0x0801cc44

0801043c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b084      	sub	sp, #16
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010446:	683b      	ldr	r3, [r7, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d106      	bne.n	801045a <tcp_pcb_remove+0x1e>
 801044c:	4b3e      	ldr	r3, [pc, #248]	; (8010548 <tcp_pcb_remove+0x10c>)
 801044e:	f640 0283 	movw	r2, #2179	; 0x883
 8010452:	493e      	ldr	r1, [pc, #248]	; (801054c <tcp_pcb_remove+0x110>)
 8010454:	483e      	ldr	r0, [pc, #248]	; (8010550 <tcp_pcb_remove+0x114>)
 8010456:	f009 fd6f 	bl	8019f38 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d106      	bne.n	801046e <tcp_pcb_remove+0x32>
 8010460:	4b39      	ldr	r3, [pc, #228]	; (8010548 <tcp_pcb_remove+0x10c>)
 8010462:	f640 0284 	movw	r2, #2180	; 0x884
 8010466:	493b      	ldr	r1, [pc, #236]	; (8010554 <tcp_pcb_remove+0x118>)
 8010468:	4839      	ldr	r0, [pc, #228]	; (8010550 <tcp_pcb_remove+0x114>)
 801046a:	f009 fd65 	bl	8019f38 <iprintf>

  TCP_RMV(pcblist, pcb);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	683a      	ldr	r2, [r7, #0]
 8010474:	429a      	cmp	r2, r3
 8010476:	d105      	bne.n	8010484 <tcp_pcb_remove+0x48>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	68da      	ldr	r2, [r3, #12]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	601a      	str	r2, [r3, #0]
 8010482:	e013      	b.n	80104ac <tcp_pcb_remove+0x70>
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	60fb      	str	r3, [r7, #12]
 801048a:	e00c      	b.n	80104a6 <tcp_pcb_remove+0x6a>
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	683a      	ldr	r2, [r7, #0]
 8010492:	429a      	cmp	r2, r3
 8010494:	d104      	bne.n	80104a0 <tcp_pcb_remove+0x64>
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	68da      	ldr	r2, [r3, #12]
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	60da      	str	r2, [r3, #12]
 801049e:	e005      	b.n	80104ac <tcp_pcb_remove+0x70>
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	68db      	ldr	r3, [r3, #12]
 80104a4:	60fb      	str	r3, [r7, #12]
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d1ef      	bne.n	801048c <tcp_pcb_remove+0x50>
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	2200      	movs	r2, #0
 80104b0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80104b2:	6838      	ldr	r0, [r7, #0]
 80104b4:	f7ff ff72 	bl	801039c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	7d1b      	ldrb	r3, [r3, #20]
 80104bc:	2b0a      	cmp	r3, #10
 80104be:	d013      	beq.n	80104e8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	d00f      	beq.n	80104e8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	8b5b      	ldrh	r3, [r3, #26]
 80104cc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d009      	beq.n	80104e8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	8b5b      	ldrh	r3, [r3, #26]
 80104d8:	f043 0302 	orr.w	r3, r3, #2
 80104dc:	b29a      	uxth	r2, r3
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80104e2:	6838      	ldr	r0, [r7, #0]
 80104e4:	f003 fbc2 	bl	8013c6c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	7d1b      	ldrb	r3, [r3, #20]
 80104ec:	2b01      	cmp	r3, #1
 80104ee:	d020      	beq.n	8010532 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d006      	beq.n	8010506 <tcp_pcb_remove+0xca>
 80104f8:	4b13      	ldr	r3, [pc, #76]	; (8010548 <tcp_pcb_remove+0x10c>)
 80104fa:	f640 0293 	movw	r2, #2195	; 0x893
 80104fe:	4916      	ldr	r1, [pc, #88]	; (8010558 <tcp_pcb_remove+0x11c>)
 8010500:	4813      	ldr	r0, [pc, #76]	; (8010550 <tcp_pcb_remove+0x114>)
 8010502:	f009 fd19 	bl	8019f38 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801050a:	2b00      	cmp	r3, #0
 801050c:	d006      	beq.n	801051c <tcp_pcb_remove+0xe0>
 801050e:	4b0e      	ldr	r3, [pc, #56]	; (8010548 <tcp_pcb_remove+0x10c>)
 8010510:	f640 0294 	movw	r2, #2196	; 0x894
 8010514:	4911      	ldr	r1, [pc, #68]	; (801055c <tcp_pcb_remove+0x120>)
 8010516:	480e      	ldr	r0, [pc, #56]	; (8010550 <tcp_pcb_remove+0x114>)
 8010518:	f009 fd0e 	bl	8019f38 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010520:	2b00      	cmp	r3, #0
 8010522:	d006      	beq.n	8010532 <tcp_pcb_remove+0xf6>
 8010524:	4b08      	ldr	r3, [pc, #32]	; (8010548 <tcp_pcb_remove+0x10c>)
 8010526:	f640 0296 	movw	r2, #2198	; 0x896
 801052a:	490d      	ldr	r1, [pc, #52]	; (8010560 <tcp_pcb_remove+0x124>)
 801052c:	4808      	ldr	r0, [pc, #32]	; (8010550 <tcp_pcb_remove+0x114>)
 801052e:	f009 fd03 	bl	8019f38 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	2200      	movs	r2, #0
 8010536:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010538:	683b      	ldr	r3, [r7, #0]
 801053a:	2200      	movs	r2, #0
 801053c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801053e:	bf00      	nop
 8010540:	3710      	adds	r7, #16
 8010542:	46bd      	mov	sp, r7
 8010544:	bd80      	pop	{r7, pc}
 8010546:	bf00      	nop
 8010548:	0801cc00 	.word	0x0801cc00
 801054c:	0801d268 	.word	0x0801d268
 8010550:	0801cc44 	.word	0x0801cc44
 8010554:	0801d284 	.word	0x0801d284
 8010558:	0801d2a4 	.word	0x0801d2a4
 801055c:	0801d2bc 	.word	0x0801d2bc
 8010560:	0801d2d8 	.word	0x0801d2d8

08010564 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d106      	bne.n	8010580 <tcp_next_iss+0x1c>
 8010572:	4b0a      	ldr	r3, [pc, #40]	; (801059c <tcp_next_iss+0x38>)
 8010574:	f640 02af 	movw	r2, #2223	; 0x8af
 8010578:	4909      	ldr	r1, [pc, #36]	; (80105a0 <tcp_next_iss+0x3c>)
 801057a:	480a      	ldr	r0, [pc, #40]	; (80105a4 <tcp_next_iss+0x40>)
 801057c:	f009 fcdc 	bl	8019f38 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010580:	4b09      	ldr	r3, [pc, #36]	; (80105a8 <tcp_next_iss+0x44>)
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	4b09      	ldr	r3, [pc, #36]	; (80105ac <tcp_next_iss+0x48>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	4413      	add	r3, r2
 801058a:	4a07      	ldr	r2, [pc, #28]	; (80105a8 <tcp_next_iss+0x44>)
 801058c:	6013      	str	r3, [r2, #0]
  return iss;
 801058e:	4b06      	ldr	r3, [pc, #24]	; (80105a8 <tcp_next_iss+0x44>)
 8010590:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010592:	4618      	mov	r0, r3
 8010594:	3708      	adds	r7, #8
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	0801cc00 	.word	0x0801cc00
 80105a0:	0801d2f0 	.word	0x0801d2f0
 80105a4:	0801cc44 	.word	0x0801cc44
 80105a8:	20000098 	.word	0x20000098
 80105ac:	20016ea8 	.word	0x20016ea8

080105b0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b086      	sub	sp, #24
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	4603      	mov	r3, r0
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	607a      	str	r2, [r7, #4]
 80105bc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d106      	bne.n	80105d2 <tcp_eff_send_mss_netif+0x22>
 80105c4:	4b14      	ldr	r3, [pc, #80]	; (8010618 <tcp_eff_send_mss_netif+0x68>)
 80105c6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80105ca:	4914      	ldr	r1, [pc, #80]	; (801061c <tcp_eff_send_mss_netif+0x6c>)
 80105cc:	4814      	ldr	r0, [pc, #80]	; (8010620 <tcp_eff_send_mss_netif+0x70>)
 80105ce:	f009 fcb3 	bl	8019f38 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d101      	bne.n	80105dc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80105d8:	89fb      	ldrh	r3, [r7, #14]
 80105da:	e019      	b.n	8010610 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80105e0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80105e2:	8afb      	ldrh	r3, [r7, #22]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d012      	beq.n	801060e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80105e8:	2328      	movs	r3, #40	; 0x28
 80105ea:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80105ec:	8afa      	ldrh	r2, [r7, #22]
 80105ee:	8abb      	ldrh	r3, [r7, #20]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d904      	bls.n	80105fe <tcp_eff_send_mss_netif+0x4e>
 80105f4:	8afa      	ldrh	r2, [r7, #22]
 80105f6:	8abb      	ldrh	r3, [r7, #20]
 80105f8:	1ad3      	subs	r3, r2, r3
 80105fa:	b29b      	uxth	r3, r3
 80105fc:	e000      	b.n	8010600 <tcp_eff_send_mss_netif+0x50>
 80105fe:	2300      	movs	r3, #0
 8010600:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010602:	8a7a      	ldrh	r2, [r7, #18]
 8010604:	89fb      	ldrh	r3, [r7, #14]
 8010606:	4293      	cmp	r3, r2
 8010608:	bf28      	it	cs
 801060a:	4613      	movcs	r3, r2
 801060c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801060e:	89fb      	ldrh	r3, [r7, #14]
}
 8010610:	4618      	mov	r0, r3
 8010612:	3718      	adds	r7, #24
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	0801cc00 	.word	0x0801cc00
 801061c:	0801d30c 	.word	0x0801d30c
 8010620:	0801cc44 	.word	0x0801cc44

08010624 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d119      	bne.n	801066c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010638:	4b10      	ldr	r3, [pc, #64]	; (801067c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801063a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801063e:	4910      	ldr	r1, [pc, #64]	; (8010680 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010640:	4810      	ldr	r0, [pc, #64]	; (8010684 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010642:	f009 fc79 	bl	8019f38 <iprintf>

  while (pcb != NULL) {
 8010646:	e011      	b.n	801066c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	681a      	ldr	r2, [r3, #0]
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	429a      	cmp	r2, r3
 8010652:	d108      	bne.n	8010666 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	68db      	ldr	r3, [r3, #12]
 8010658:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801065a:	68f8      	ldr	r0, [r7, #12]
 801065c:	f7fe fd24 	bl	800f0a8 <tcp_abort>
      pcb = next;
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	60fb      	str	r3, [r7, #12]
 8010664:	e002      	b.n	801066c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d1ea      	bne.n	8010648 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010672:	bf00      	nop
 8010674:	3710      	adds	r7, #16
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	0801cc00 	.word	0x0801cc00
 8010680:	0801d334 	.word	0x0801d334
 8010684:	0801cc44 	.word	0x0801cc44

08010688 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d02a      	beq.n	80106ee <tcp_netif_ip_addr_changed+0x66>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d026      	beq.n	80106ee <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80106a0:	4b15      	ldr	r3, [pc, #84]	; (80106f8 <tcp_netif_ip_addr_changed+0x70>)
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	4619      	mov	r1, r3
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f7ff ffbc 	bl	8010624 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80106ac:	4b13      	ldr	r3, [pc, #76]	; (80106fc <tcp_netif_ip_addr_changed+0x74>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4619      	mov	r1, r3
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f7ff ffb6 	bl	8010624 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d017      	beq.n	80106ee <tcp_netif_ip_addr_changed+0x66>
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d013      	beq.n	80106ee <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80106c6:	4b0e      	ldr	r3, [pc, #56]	; (8010700 <tcp_netif_ip_addr_changed+0x78>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	60fb      	str	r3, [r7, #12]
 80106cc:	e00c      	b.n	80106e8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d103      	bne.n	80106e2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	681a      	ldr	r2, [r3, #0]
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	68db      	ldr	r3, [r3, #12]
 80106e6:	60fb      	str	r3, [r7, #12]
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d1ef      	bne.n	80106ce <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80106ee:	bf00      	nop
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
 80106f6:	bf00      	nop
 80106f8:	20016ea4 	.word	0x20016ea4
 80106fc:	20016eb0 	.word	0x20016eb0
 8010700:	20016eac 	.word	0x20016eac

08010704 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010710:	2b00      	cmp	r3, #0
 8010712:	d007      	beq.n	8010724 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010718:	4618      	mov	r0, r3
 801071a:	f7ff fb53 	bl	800fdc4 <tcp_segs_free>
    pcb->ooseq = NULL;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2200      	movs	r2, #0
 8010722:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010724:	bf00      	nop
 8010726:	3708      	adds	r7, #8
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}

0801072c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801072c:	b590      	push	{r4, r7, lr}
 801072e:	b08d      	sub	sp, #52	; 0x34
 8010730:	af04      	add	r7, sp, #16
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d105      	bne.n	8010748 <tcp_input+0x1c>
 801073c:	4b9b      	ldr	r3, [pc, #620]	; (80109ac <tcp_input+0x280>)
 801073e:	2283      	movs	r2, #131	; 0x83
 8010740:	499b      	ldr	r1, [pc, #620]	; (80109b0 <tcp_input+0x284>)
 8010742:	489c      	ldr	r0, [pc, #624]	; (80109b4 <tcp_input+0x288>)
 8010744:	f009 fbf8 	bl	8019f38 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	4a9a      	ldr	r2, [pc, #616]	; (80109b8 <tcp_input+0x28c>)
 801074e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	895b      	ldrh	r3, [r3, #10]
 8010754:	2b13      	cmp	r3, #19
 8010756:	f240 83c4 	bls.w	8010ee2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801075a:	4b98      	ldr	r3, [pc, #608]	; (80109bc <tcp_input+0x290>)
 801075c:	695a      	ldr	r2, [r3, #20]
 801075e:	4b97      	ldr	r3, [pc, #604]	; (80109bc <tcp_input+0x290>)
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	4619      	mov	r1, r3
 8010764:	4610      	mov	r0, r2
 8010766:	f008 fa85 	bl	8018c74 <ip4_addr_isbroadcast_u32>
 801076a:	4603      	mov	r3, r0
 801076c:	2b00      	cmp	r3, #0
 801076e:	f040 83ba 	bne.w	8010ee6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010772:	4b92      	ldr	r3, [pc, #584]	; (80109bc <tcp_input+0x290>)
 8010774:	695b      	ldr	r3, [r3, #20]
 8010776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801077a:	2be0      	cmp	r3, #224	; 0xe0
 801077c:	f000 83b3 	beq.w	8010ee6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010780:	4b8d      	ldr	r3, [pc, #564]	; (80109b8 <tcp_input+0x28c>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	899b      	ldrh	r3, [r3, #12]
 8010786:	b29b      	uxth	r3, r3
 8010788:	4618      	mov	r0, r3
 801078a:	f7fc fa79 	bl	800cc80 <lwip_htons>
 801078e:	4603      	mov	r3, r0
 8010790:	0b1b      	lsrs	r3, r3, #12
 8010792:	b29b      	uxth	r3, r3
 8010794:	b2db      	uxtb	r3, r3
 8010796:	009b      	lsls	r3, r3, #2
 8010798:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801079a:	7cbb      	ldrb	r3, [r7, #18]
 801079c:	2b13      	cmp	r3, #19
 801079e:	f240 83a2 	bls.w	8010ee6 <tcp_input+0x7ba>
 80107a2:	7cbb      	ldrb	r3, [r7, #18]
 80107a4:	b29a      	uxth	r2, r3
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	891b      	ldrh	r3, [r3, #8]
 80107aa:	429a      	cmp	r2, r3
 80107ac:	f200 839b 	bhi.w	8010ee6 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80107b0:	7cbb      	ldrb	r3, [r7, #18]
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	3b14      	subs	r3, #20
 80107b6:	b29a      	uxth	r2, r3
 80107b8:	4b81      	ldr	r3, [pc, #516]	; (80109c0 <tcp_input+0x294>)
 80107ba:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80107bc:	4b81      	ldr	r3, [pc, #516]	; (80109c4 <tcp_input+0x298>)
 80107be:	2200      	movs	r2, #0
 80107c0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	895a      	ldrh	r2, [r3, #10]
 80107c6:	7cbb      	ldrb	r3, [r7, #18]
 80107c8:	b29b      	uxth	r3, r3
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d309      	bcc.n	80107e2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80107ce:	4b7c      	ldr	r3, [pc, #496]	; (80109c0 <tcp_input+0x294>)
 80107d0:	881a      	ldrh	r2, [r3, #0]
 80107d2:	4b7d      	ldr	r3, [pc, #500]	; (80109c8 <tcp_input+0x29c>)
 80107d4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80107d6:	7cbb      	ldrb	r3, [r7, #18]
 80107d8:	4619      	mov	r1, r3
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f7fd fde8 	bl	800e3b0 <pbuf_remove_header>
 80107e0:	e04e      	b.n	8010880 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d105      	bne.n	80107f6 <tcp_input+0xca>
 80107ea:	4b70      	ldr	r3, [pc, #448]	; (80109ac <tcp_input+0x280>)
 80107ec:	22c2      	movs	r2, #194	; 0xc2
 80107ee:	4977      	ldr	r1, [pc, #476]	; (80109cc <tcp_input+0x2a0>)
 80107f0:	4870      	ldr	r0, [pc, #448]	; (80109b4 <tcp_input+0x288>)
 80107f2:	f009 fba1 	bl	8019f38 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80107f6:	2114      	movs	r1, #20
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f7fd fdd9 	bl	800e3b0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	895a      	ldrh	r2, [r3, #10]
 8010802:	4b71      	ldr	r3, [pc, #452]	; (80109c8 <tcp_input+0x29c>)
 8010804:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010806:	4b6e      	ldr	r3, [pc, #440]	; (80109c0 <tcp_input+0x294>)
 8010808:	881a      	ldrh	r2, [r3, #0]
 801080a:	4b6f      	ldr	r3, [pc, #444]	; (80109c8 <tcp_input+0x29c>)
 801080c:	881b      	ldrh	r3, [r3, #0]
 801080e:	1ad3      	subs	r3, r2, r3
 8010810:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010812:	4b6d      	ldr	r3, [pc, #436]	; (80109c8 <tcp_input+0x29c>)
 8010814:	881b      	ldrh	r3, [r3, #0]
 8010816:	4619      	mov	r1, r3
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f7fd fdc9 	bl	800e3b0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	895b      	ldrh	r3, [r3, #10]
 8010824:	8a3a      	ldrh	r2, [r7, #16]
 8010826:	429a      	cmp	r2, r3
 8010828:	f200 835f 	bhi.w	8010eea <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	685b      	ldr	r3, [r3, #4]
 8010832:	4a64      	ldr	r2, [pc, #400]	; (80109c4 <tcp_input+0x298>)
 8010834:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	8a3a      	ldrh	r2, [r7, #16]
 801083c:	4611      	mov	r1, r2
 801083e:	4618      	mov	r0, r3
 8010840:	f7fd fdb6 	bl	800e3b0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	891a      	ldrh	r2, [r3, #8]
 8010848:	8a3b      	ldrh	r3, [r7, #16]
 801084a:	1ad3      	subs	r3, r2, r3
 801084c:	b29a      	uxth	r2, r3
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	895b      	ldrh	r3, [r3, #10]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d005      	beq.n	8010866 <tcp_input+0x13a>
 801085a:	4b54      	ldr	r3, [pc, #336]	; (80109ac <tcp_input+0x280>)
 801085c:	22df      	movs	r2, #223	; 0xdf
 801085e:	495c      	ldr	r1, [pc, #368]	; (80109d0 <tcp_input+0x2a4>)
 8010860:	4854      	ldr	r0, [pc, #336]	; (80109b4 <tcp_input+0x288>)
 8010862:	f009 fb69 	bl	8019f38 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	891a      	ldrh	r2, [r3, #8]
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	891b      	ldrh	r3, [r3, #8]
 8010870:	429a      	cmp	r2, r3
 8010872:	d005      	beq.n	8010880 <tcp_input+0x154>
 8010874:	4b4d      	ldr	r3, [pc, #308]	; (80109ac <tcp_input+0x280>)
 8010876:	22e0      	movs	r2, #224	; 0xe0
 8010878:	4956      	ldr	r1, [pc, #344]	; (80109d4 <tcp_input+0x2a8>)
 801087a:	484e      	ldr	r0, [pc, #312]	; (80109b4 <tcp_input+0x288>)
 801087c:	f009 fb5c 	bl	8019f38 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010880:	4b4d      	ldr	r3, [pc, #308]	; (80109b8 <tcp_input+0x28c>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	881b      	ldrh	r3, [r3, #0]
 8010886:	b29a      	uxth	r2, r3
 8010888:	4b4b      	ldr	r3, [pc, #300]	; (80109b8 <tcp_input+0x28c>)
 801088a:	681c      	ldr	r4, [r3, #0]
 801088c:	4610      	mov	r0, r2
 801088e:	f7fc f9f7 	bl	800cc80 <lwip_htons>
 8010892:	4603      	mov	r3, r0
 8010894:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010896:	4b48      	ldr	r3, [pc, #288]	; (80109b8 <tcp_input+0x28c>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	885b      	ldrh	r3, [r3, #2]
 801089c:	b29a      	uxth	r2, r3
 801089e:	4b46      	ldr	r3, [pc, #280]	; (80109b8 <tcp_input+0x28c>)
 80108a0:	681c      	ldr	r4, [r3, #0]
 80108a2:	4610      	mov	r0, r2
 80108a4:	f7fc f9ec 	bl	800cc80 <lwip_htons>
 80108a8:	4603      	mov	r3, r0
 80108aa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80108ac:	4b42      	ldr	r3, [pc, #264]	; (80109b8 <tcp_input+0x28c>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	685a      	ldr	r2, [r3, #4]
 80108b2:	4b41      	ldr	r3, [pc, #260]	; (80109b8 <tcp_input+0x28c>)
 80108b4:	681c      	ldr	r4, [r3, #0]
 80108b6:	4610      	mov	r0, r2
 80108b8:	f7fc f9f7 	bl	800ccaa <lwip_htonl>
 80108bc:	4603      	mov	r3, r0
 80108be:	6063      	str	r3, [r4, #4]
 80108c0:	6863      	ldr	r3, [r4, #4]
 80108c2:	4a45      	ldr	r2, [pc, #276]	; (80109d8 <tcp_input+0x2ac>)
 80108c4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80108c6:	4b3c      	ldr	r3, [pc, #240]	; (80109b8 <tcp_input+0x28c>)
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	689a      	ldr	r2, [r3, #8]
 80108cc:	4b3a      	ldr	r3, [pc, #232]	; (80109b8 <tcp_input+0x28c>)
 80108ce:	681c      	ldr	r4, [r3, #0]
 80108d0:	4610      	mov	r0, r2
 80108d2:	f7fc f9ea 	bl	800ccaa <lwip_htonl>
 80108d6:	4603      	mov	r3, r0
 80108d8:	60a3      	str	r3, [r4, #8]
 80108da:	68a3      	ldr	r3, [r4, #8]
 80108dc:	4a3f      	ldr	r2, [pc, #252]	; (80109dc <tcp_input+0x2b0>)
 80108de:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80108e0:	4b35      	ldr	r3, [pc, #212]	; (80109b8 <tcp_input+0x28c>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	89db      	ldrh	r3, [r3, #14]
 80108e6:	b29a      	uxth	r2, r3
 80108e8:	4b33      	ldr	r3, [pc, #204]	; (80109b8 <tcp_input+0x28c>)
 80108ea:	681c      	ldr	r4, [r3, #0]
 80108ec:	4610      	mov	r0, r2
 80108ee:	f7fc f9c7 	bl	800cc80 <lwip_htons>
 80108f2:	4603      	mov	r3, r0
 80108f4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80108f6:	4b30      	ldr	r3, [pc, #192]	; (80109b8 <tcp_input+0x28c>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	899b      	ldrh	r3, [r3, #12]
 80108fc:	b29b      	uxth	r3, r3
 80108fe:	4618      	mov	r0, r3
 8010900:	f7fc f9be 	bl	800cc80 <lwip_htons>
 8010904:	4603      	mov	r3, r0
 8010906:	b2db      	uxtb	r3, r3
 8010908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801090c:	b2da      	uxtb	r2, r3
 801090e:	4b34      	ldr	r3, [pc, #208]	; (80109e0 <tcp_input+0x2b4>)
 8010910:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	891a      	ldrh	r2, [r3, #8]
 8010916:	4b33      	ldr	r3, [pc, #204]	; (80109e4 <tcp_input+0x2b8>)
 8010918:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801091a:	4b31      	ldr	r3, [pc, #196]	; (80109e0 <tcp_input+0x2b4>)
 801091c:	781b      	ldrb	r3, [r3, #0]
 801091e:	f003 0303 	and.w	r3, r3, #3
 8010922:	2b00      	cmp	r3, #0
 8010924:	d00c      	beq.n	8010940 <tcp_input+0x214>
    tcplen++;
 8010926:	4b2f      	ldr	r3, [pc, #188]	; (80109e4 <tcp_input+0x2b8>)
 8010928:	881b      	ldrh	r3, [r3, #0]
 801092a:	3301      	adds	r3, #1
 801092c:	b29a      	uxth	r2, r3
 801092e:	4b2d      	ldr	r3, [pc, #180]	; (80109e4 <tcp_input+0x2b8>)
 8010930:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	891a      	ldrh	r2, [r3, #8]
 8010936:	4b2b      	ldr	r3, [pc, #172]	; (80109e4 <tcp_input+0x2b8>)
 8010938:	881b      	ldrh	r3, [r3, #0]
 801093a:	429a      	cmp	r2, r3
 801093c:	f200 82d7 	bhi.w	8010eee <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010940:	2300      	movs	r3, #0
 8010942:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010944:	4b28      	ldr	r3, [pc, #160]	; (80109e8 <tcp_input+0x2bc>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	61fb      	str	r3, [r7, #28]
 801094a:	e09d      	b.n	8010a88 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	7d1b      	ldrb	r3, [r3, #20]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d105      	bne.n	8010960 <tcp_input+0x234>
 8010954:	4b15      	ldr	r3, [pc, #84]	; (80109ac <tcp_input+0x280>)
 8010956:	22fb      	movs	r2, #251	; 0xfb
 8010958:	4924      	ldr	r1, [pc, #144]	; (80109ec <tcp_input+0x2c0>)
 801095a:	4816      	ldr	r0, [pc, #88]	; (80109b4 <tcp_input+0x288>)
 801095c:	f009 faec 	bl	8019f38 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	7d1b      	ldrb	r3, [r3, #20]
 8010964:	2b0a      	cmp	r3, #10
 8010966:	d105      	bne.n	8010974 <tcp_input+0x248>
 8010968:	4b10      	ldr	r3, [pc, #64]	; (80109ac <tcp_input+0x280>)
 801096a:	22fc      	movs	r2, #252	; 0xfc
 801096c:	4920      	ldr	r1, [pc, #128]	; (80109f0 <tcp_input+0x2c4>)
 801096e:	4811      	ldr	r0, [pc, #68]	; (80109b4 <tcp_input+0x288>)
 8010970:	f009 fae2 	bl	8019f38 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	7d1b      	ldrb	r3, [r3, #20]
 8010978:	2b01      	cmp	r3, #1
 801097a:	d105      	bne.n	8010988 <tcp_input+0x25c>
 801097c:	4b0b      	ldr	r3, [pc, #44]	; (80109ac <tcp_input+0x280>)
 801097e:	22fd      	movs	r2, #253	; 0xfd
 8010980:	491c      	ldr	r1, [pc, #112]	; (80109f4 <tcp_input+0x2c8>)
 8010982:	480c      	ldr	r0, [pc, #48]	; (80109b4 <tcp_input+0x288>)
 8010984:	f009 fad8 	bl	8019f38 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010988:	69fb      	ldr	r3, [r7, #28]
 801098a:	7a1b      	ldrb	r3, [r3, #8]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d033      	beq.n	80109f8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010990:	69fb      	ldr	r3, [r7, #28]
 8010992:	7a1a      	ldrb	r2, [r3, #8]
 8010994:	4b09      	ldr	r3, [pc, #36]	; (80109bc <tcp_input+0x290>)
 8010996:	685b      	ldr	r3, [r3, #4]
 8010998:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801099c:	3301      	adds	r3, #1
 801099e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d029      	beq.n	80109f8 <tcp_input+0x2cc>
      prev = pcb;
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	61bb      	str	r3, [r7, #24]
      continue;
 80109a8:	e06b      	b.n	8010a82 <tcp_input+0x356>
 80109aa:	bf00      	nop
 80109ac:	0801d368 	.word	0x0801d368
 80109b0:	0801d39c 	.word	0x0801d39c
 80109b4:	0801d3b4 	.word	0x0801d3b4
 80109b8:	200102f8 	.word	0x200102f8
 80109bc:	20013770 	.word	0x20013770
 80109c0:	200102fc 	.word	0x200102fc
 80109c4:	20010300 	.word	0x20010300
 80109c8:	200102fe 	.word	0x200102fe
 80109cc:	0801d3dc 	.word	0x0801d3dc
 80109d0:	0801d3ec 	.word	0x0801d3ec
 80109d4:	0801d3f8 	.word	0x0801d3f8
 80109d8:	20010308 	.word	0x20010308
 80109dc:	2001030c 	.word	0x2001030c
 80109e0:	20010314 	.word	0x20010314
 80109e4:	20010312 	.word	0x20010312
 80109e8:	20016ea4 	.word	0x20016ea4
 80109ec:	0801d418 	.word	0x0801d418
 80109f0:	0801d440 	.word	0x0801d440
 80109f4:	0801d46c 	.word	0x0801d46c
    }

    if (pcb->remote_port == tcphdr->src &&
 80109f8:	69fb      	ldr	r3, [r7, #28]
 80109fa:	8b1a      	ldrh	r2, [r3, #24]
 80109fc:	4b94      	ldr	r3, [pc, #592]	; (8010c50 <tcp_input+0x524>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	881b      	ldrh	r3, [r3, #0]
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d13a      	bne.n	8010a7e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010a08:	69fb      	ldr	r3, [r7, #28]
 8010a0a:	8ada      	ldrh	r2, [r3, #22]
 8010a0c:	4b90      	ldr	r3, [pc, #576]	; (8010c50 <tcp_input+0x524>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	885b      	ldrh	r3, [r3, #2]
 8010a12:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d132      	bne.n	8010a7e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010a18:	69fb      	ldr	r3, [r7, #28]
 8010a1a:	685a      	ldr	r2, [r3, #4]
 8010a1c:	4b8d      	ldr	r3, [pc, #564]	; (8010c54 <tcp_input+0x528>)
 8010a1e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d12c      	bne.n	8010a7e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010a24:	69fb      	ldr	r3, [r7, #28]
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	4b8a      	ldr	r3, [pc, #552]	; (8010c54 <tcp_input+0x528>)
 8010a2a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010a2c:	429a      	cmp	r2, r3
 8010a2e:	d126      	bne.n	8010a7e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	68db      	ldr	r3, [r3, #12]
 8010a34:	69fa      	ldr	r2, [r7, #28]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d106      	bne.n	8010a48 <tcp_input+0x31c>
 8010a3a:	4b87      	ldr	r3, [pc, #540]	; (8010c58 <tcp_input+0x52c>)
 8010a3c:	f240 120d 	movw	r2, #269	; 0x10d
 8010a40:	4986      	ldr	r1, [pc, #536]	; (8010c5c <tcp_input+0x530>)
 8010a42:	4887      	ldr	r0, [pc, #540]	; (8010c60 <tcp_input+0x534>)
 8010a44:	f009 fa78 	bl	8019f38 <iprintf>
      if (prev != NULL) {
 8010a48:	69bb      	ldr	r3, [r7, #24]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d00a      	beq.n	8010a64 <tcp_input+0x338>
        prev->next = pcb->next;
 8010a4e:	69fb      	ldr	r3, [r7, #28]
 8010a50:	68da      	ldr	r2, [r3, #12]
 8010a52:	69bb      	ldr	r3, [r7, #24]
 8010a54:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010a56:	4b83      	ldr	r3, [pc, #524]	; (8010c64 <tcp_input+0x538>)
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	69fb      	ldr	r3, [r7, #28]
 8010a5c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010a5e:	4a81      	ldr	r2, [pc, #516]	; (8010c64 <tcp_input+0x538>)
 8010a60:	69fb      	ldr	r3, [r7, #28]
 8010a62:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010a64:	69fb      	ldr	r3, [r7, #28]
 8010a66:	68db      	ldr	r3, [r3, #12]
 8010a68:	69fa      	ldr	r2, [r7, #28]
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d111      	bne.n	8010a92 <tcp_input+0x366>
 8010a6e:	4b7a      	ldr	r3, [pc, #488]	; (8010c58 <tcp_input+0x52c>)
 8010a70:	f240 1215 	movw	r2, #277	; 0x115
 8010a74:	497c      	ldr	r1, [pc, #496]	; (8010c68 <tcp_input+0x53c>)
 8010a76:	487a      	ldr	r0, [pc, #488]	; (8010c60 <tcp_input+0x534>)
 8010a78:	f009 fa5e 	bl	8019f38 <iprintf>
      break;
 8010a7c:	e009      	b.n	8010a92 <tcp_input+0x366>
    }
    prev = pcb;
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a82:	69fb      	ldr	r3, [r7, #28]
 8010a84:	68db      	ldr	r3, [r3, #12]
 8010a86:	61fb      	str	r3, [r7, #28]
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	f47f af5e 	bne.w	801094c <tcp_input+0x220>
 8010a90:	e000      	b.n	8010a94 <tcp_input+0x368>
      break;
 8010a92:	bf00      	nop
  }

  if (pcb == NULL) {
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	f040 8095 	bne.w	8010bc6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a9c:	4b73      	ldr	r3, [pc, #460]	; (8010c6c <tcp_input+0x540>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	61fb      	str	r3, [r7, #28]
 8010aa2:	e03f      	b.n	8010b24 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010aa4:	69fb      	ldr	r3, [r7, #28]
 8010aa6:	7d1b      	ldrb	r3, [r3, #20]
 8010aa8:	2b0a      	cmp	r3, #10
 8010aaa:	d006      	beq.n	8010aba <tcp_input+0x38e>
 8010aac:	4b6a      	ldr	r3, [pc, #424]	; (8010c58 <tcp_input+0x52c>)
 8010aae:	f240 121f 	movw	r2, #287	; 0x11f
 8010ab2:	496f      	ldr	r1, [pc, #444]	; (8010c70 <tcp_input+0x544>)
 8010ab4:	486a      	ldr	r0, [pc, #424]	; (8010c60 <tcp_input+0x534>)
 8010ab6:	f009 fa3f 	bl	8019f38 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010aba:	69fb      	ldr	r3, [r7, #28]
 8010abc:	7a1b      	ldrb	r3, [r3, #8]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d009      	beq.n	8010ad6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010ac2:	69fb      	ldr	r3, [r7, #28]
 8010ac4:	7a1a      	ldrb	r2, [r3, #8]
 8010ac6:	4b63      	ldr	r3, [pc, #396]	; (8010c54 <tcp_input+0x528>)
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010ace:	3301      	adds	r3, #1
 8010ad0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d122      	bne.n	8010b1c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010ad6:	69fb      	ldr	r3, [r7, #28]
 8010ad8:	8b1a      	ldrh	r2, [r3, #24]
 8010ada:	4b5d      	ldr	r3, [pc, #372]	; (8010c50 <tcp_input+0x524>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	881b      	ldrh	r3, [r3, #0]
 8010ae0:	b29b      	uxth	r3, r3
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d11b      	bne.n	8010b1e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	8ada      	ldrh	r2, [r3, #22]
 8010aea:	4b59      	ldr	r3, [pc, #356]	; (8010c50 <tcp_input+0x524>)
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	885b      	ldrh	r3, [r3, #2]
 8010af0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d113      	bne.n	8010b1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010af6:	69fb      	ldr	r3, [r7, #28]
 8010af8:	685a      	ldr	r2, [r3, #4]
 8010afa:	4b56      	ldr	r3, [pc, #344]	; (8010c54 <tcp_input+0x528>)
 8010afc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d10d      	bne.n	8010b1e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010b02:	69fb      	ldr	r3, [r7, #28]
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	4b53      	ldr	r3, [pc, #332]	; (8010c54 <tcp_input+0x528>)
 8010b08:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d107      	bne.n	8010b1e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010b0e:	69f8      	ldr	r0, [r7, #28]
 8010b10:	f000 fb52 	bl	80111b8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f7fd fcd1 	bl	800e4bc <pbuf_free>
        return;
 8010b1a:	e1ee      	b.n	8010efa <tcp_input+0x7ce>
        continue;
 8010b1c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b1e:	69fb      	ldr	r3, [r7, #28]
 8010b20:	68db      	ldr	r3, [r3, #12]
 8010b22:	61fb      	str	r3, [r7, #28]
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d1bc      	bne.n	8010aa4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010b2e:	4b51      	ldr	r3, [pc, #324]	; (8010c74 <tcp_input+0x548>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	617b      	str	r3, [r7, #20]
 8010b34:	e02a      	b.n	8010b8c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	7a1b      	ldrb	r3, [r3, #8]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d00c      	beq.n	8010b58 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010b3e:	697b      	ldr	r3, [r7, #20]
 8010b40:	7a1a      	ldrb	r2, [r3, #8]
 8010b42:	4b44      	ldr	r3, [pc, #272]	; (8010c54 <tcp_input+0x528>)
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010b4a:	3301      	adds	r3, #1
 8010b4c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d002      	beq.n	8010b58 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	61bb      	str	r3, [r7, #24]
        continue;
 8010b56:	e016      	b.n	8010b86 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	8ada      	ldrh	r2, [r3, #22]
 8010b5c:	4b3c      	ldr	r3, [pc, #240]	; (8010c50 <tcp_input+0x524>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	885b      	ldrh	r3, [r3, #2]
 8010b62:	b29b      	uxth	r3, r3
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d10c      	bne.n	8010b82 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010b68:	697b      	ldr	r3, [r7, #20]
 8010b6a:	681a      	ldr	r2, [r3, #0]
 8010b6c:	4b39      	ldr	r3, [pc, #228]	; (8010c54 <tcp_input+0x528>)
 8010b6e:	695b      	ldr	r3, [r3, #20]
 8010b70:	429a      	cmp	r2, r3
 8010b72:	d00f      	beq.n	8010b94 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d00d      	beq.n	8010b96 <tcp_input+0x46a>
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d009      	beq.n	8010b96 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	68db      	ldr	r3, [r3, #12]
 8010b8a:	617b      	str	r3, [r7, #20]
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1d1      	bne.n	8010b36 <tcp_input+0x40a>
 8010b92:	e000      	b.n	8010b96 <tcp_input+0x46a>
            break;
 8010b94:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d014      	beq.n	8010bc6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010b9c:	69bb      	ldr	r3, [r7, #24]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d00a      	beq.n	8010bb8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	68da      	ldr	r2, [r3, #12]
 8010ba6:	69bb      	ldr	r3, [r7, #24]
 8010ba8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010baa:	4b32      	ldr	r3, [pc, #200]	; (8010c74 <tcp_input+0x548>)
 8010bac:	681a      	ldr	r2, [r3, #0]
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010bb2:	4a30      	ldr	r2, [pc, #192]	; (8010c74 <tcp_input+0x548>)
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010bb8:	6978      	ldr	r0, [r7, #20]
 8010bba:	f000 f9ff 	bl	8010fbc <tcp_listen_input>
      }
      pbuf_free(p);
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f7fd fc7c 	bl	800e4bc <pbuf_free>
      return;
 8010bc4:	e199      	b.n	8010efa <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010bc6:	69fb      	ldr	r3, [r7, #28]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	f000 8160 	beq.w	8010e8e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010bce:	4b2a      	ldr	r3, [pc, #168]	; (8010c78 <tcp_input+0x54c>)
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	891a      	ldrh	r2, [r3, #8]
 8010bd8:	4b27      	ldr	r3, [pc, #156]	; (8010c78 <tcp_input+0x54c>)
 8010bda:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010bdc:	4a26      	ldr	r2, [pc, #152]	; (8010c78 <tcp_input+0x54c>)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010be2:	4b1b      	ldr	r3, [pc, #108]	; (8010c50 <tcp_input+0x524>)
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4a24      	ldr	r2, [pc, #144]	; (8010c78 <tcp_input+0x54c>)
 8010be8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010bea:	4b24      	ldr	r3, [pc, #144]	; (8010c7c <tcp_input+0x550>)
 8010bec:	2200      	movs	r2, #0
 8010bee:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010bf0:	4b23      	ldr	r3, [pc, #140]	; (8010c80 <tcp_input+0x554>)
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010bf6:	4b23      	ldr	r3, [pc, #140]	; (8010c84 <tcp_input+0x558>)
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010bfc:	4b22      	ldr	r3, [pc, #136]	; (8010c88 <tcp_input+0x55c>)
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	f003 0308 	and.w	r3, r3, #8
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d006      	beq.n	8010c16 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	7b5b      	ldrb	r3, [r3, #13]
 8010c0c:	f043 0301 	orr.w	r3, r3, #1
 8010c10:	b2da      	uxtb	r2, r3
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010c16:	69fb      	ldr	r3, [r7, #28]
 8010c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d038      	beq.n	8010c90 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010c1e:	69f8      	ldr	r0, [r7, #28]
 8010c20:	f7ff f854 	bl	800fccc <tcp_process_refused_data>
 8010c24:	4603      	mov	r3, r0
 8010c26:	f113 0f0d 	cmn.w	r3, #13
 8010c2a:	d007      	beq.n	8010c3c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010c2c:	69fb      	ldr	r3, [r7, #28]
 8010c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d02d      	beq.n	8010c90 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010c34:	4b15      	ldr	r3, [pc, #84]	; (8010c8c <tcp_input+0x560>)
 8010c36:	881b      	ldrh	r3, [r3, #0]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d029      	beq.n	8010c90 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010c3c:	69fb      	ldr	r3, [r7, #28]
 8010c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	f040 8104 	bne.w	8010e4e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010c46:	69f8      	ldr	r0, [r7, #28]
 8010c48:	f003 fe26 	bl	8014898 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010c4c:	e0ff      	b.n	8010e4e <tcp_input+0x722>
 8010c4e:	bf00      	nop
 8010c50:	200102f8 	.word	0x200102f8
 8010c54:	20013770 	.word	0x20013770
 8010c58:	0801d368 	.word	0x0801d368
 8010c5c:	0801d494 	.word	0x0801d494
 8010c60:	0801d3b4 	.word	0x0801d3b4
 8010c64:	20016ea4 	.word	0x20016ea4
 8010c68:	0801d4c0 	.word	0x0801d4c0
 8010c6c:	20016eb4 	.word	0x20016eb4
 8010c70:	0801d4ec 	.word	0x0801d4ec
 8010c74:	20016eac 	.word	0x20016eac
 8010c78:	200102e8 	.word	0x200102e8
 8010c7c:	20010318 	.word	0x20010318
 8010c80:	20010315 	.word	0x20010315
 8010c84:	20010310 	.word	0x20010310
 8010c88:	20010314 	.word	0x20010314
 8010c8c:	20010312 	.word	0x20010312
      }
    }
    tcp_input_pcb = pcb;
 8010c90:	4a9b      	ldr	r2, [pc, #620]	; (8010f00 <tcp_input+0x7d4>)
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010c96:	69f8      	ldr	r0, [r7, #28]
 8010c98:	f000 fb0a 	bl	80112b0 <tcp_process>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010ca0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ca4:	f113 0f0d 	cmn.w	r3, #13
 8010ca8:	f000 80d3 	beq.w	8010e52 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010cac:	4b95      	ldr	r3, [pc, #596]	; (8010f04 <tcp_input+0x7d8>)
 8010cae:	781b      	ldrb	r3, [r3, #0]
 8010cb0:	f003 0308 	and.w	r3, r3, #8
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d015      	beq.n	8010ce4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010cb8:	69fb      	ldr	r3, [r7, #28]
 8010cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d008      	beq.n	8010cd4 <tcp_input+0x5a8>
 8010cc2:	69fb      	ldr	r3, [r7, #28]
 8010cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cc8:	69fa      	ldr	r2, [r7, #28]
 8010cca:	6912      	ldr	r2, [r2, #16]
 8010ccc:	f06f 010d 	mvn.w	r1, #13
 8010cd0:	4610      	mov	r0, r2
 8010cd2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010cd4:	69f9      	ldr	r1, [r7, #28]
 8010cd6:	488c      	ldr	r0, [pc, #560]	; (8010f08 <tcp_input+0x7dc>)
 8010cd8:	f7ff fbb0 	bl	801043c <tcp_pcb_remove>
        tcp_free(pcb);
 8010cdc:	69f8      	ldr	r0, [r7, #28]
 8010cde:	f7fd fea9 	bl	800ea34 <tcp_free>
 8010ce2:	e0c1      	b.n	8010e68 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010ce8:	4b88      	ldr	r3, [pc, #544]	; (8010f0c <tcp_input+0x7e0>)
 8010cea:	881b      	ldrh	r3, [r3, #0]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d01d      	beq.n	8010d2c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010cf0:	4b86      	ldr	r3, [pc, #536]	; (8010f0c <tcp_input+0x7e0>)
 8010cf2:	881b      	ldrh	r3, [r3, #0]
 8010cf4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010cf6:	69fb      	ldr	r3, [r7, #28]
 8010cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d00a      	beq.n	8010d16 <tcp_input+0x5ea>
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d06:	69fa      	ldr	r2, [r7, #28]
 8010d08:	6910      	ldr	r0, [r2, #16]
 8010d0a:	89fa      	ldrh	r2, [r7, #14]
 8010d0c:	69f9      	ldr	r1, [r7, #28]
 8010d0e:	4798      	blx	r3
 8010d10:	4603      	mov	r3, r0
 8010d12:	74fb      	strb	r3, [r7, #19]
 8010d14:	e001      	b.n	8010d1a <tcp_input+0x5ee>
 8010d16:	2300      	movs	r3, #0
 8010d18:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010d1a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d1e:	f113 0f0d 	cmn.w	r3, #13
 8010d22:	f000 8098 	beq.w	8010e56 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010d26:	4b79      	ldr	r3, [pc, #484]	; (8010f0c <tcp_input+0x7e0>)
 8010d28:	2200      	movs	r2, #0
 8010d2a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010d2c:	69f8      	ldr	r0, [r7, #28]
 8010d2e:	f000 f905 	bl	8010f3c <tcp_input_delayed_close>
 8010d32:	4603      	mov	r3, r0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	f040 8090 	bne.w	8010e5a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010d3a:	4b75      	ldr	r3, [pc, #468]	; (8010f10 <tcp_input+0x7e4>)
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d041      	beq.n	8010dc6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010d42:	69fb      	ldr	r3, [r7, #28]
 8010d44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d006      	beq.n	8010d58 <tcp_input+0x62c>
 8010d4a:	4b72      	ldr	r3, [pc, #456]	; (8010f14 <tcp_input+0x7e8>)
 8010d4c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010d50:	4971      	ldr	r1, [pc, #452]	; (8010f18 <tcp_input+0x7ec>)
 8010d52:	4872      	ldr	r0, [pc, #456]	; (8010f1c <tcp_input+0x7f0>)
 8010d54:	f009 f8f0 	bl	8019f38 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	8b5b      	ldrh	r3, [r3, #26]
 8010d5c:	f003 0310 	and.w	r3, r3, #16
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d008      	beq.n	8010d76 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010d64:	4b6a      	ldr	r3, [pc, #424]	; (8010f10 <tcp_input+0x7e4>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7fd fba7 	bl	800e4bc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010d6e:	69f8      	ldr	r0, [r7, #28]
 8010d70:	f7fe f99a 	bl	800f0a8 <tcp_abort>
            goto aborted;
 8010d74:	e078      	b.n	8010e68 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d00c      	beq.n	8010d9a <tcp_input+0x66e>
 8010d80:	69fb      	ldr	r3, [r7, #28]
 8010d82:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010d86:	69fb      	ldr	r3, [r7, #28]
 8010d88:	6918      	ldr	r0, [r3, #16]
 8010d8a:	4b61      	ldr	r3, [pc, #388]	; (8010f10 <tcp_input+0x7e4>)
 8010d8c:	681a      	ldr	r2, [r3, #0]
 8010d8e:	2300      	movs	r3, #0
 8010d90:	69f9      	ldr	r1, [r7, #28]
 8010d92:	47a0      	blx	r4
 8010d94:	4603      	mov	r3, r0
 8010d96:	74fb      	strb	r3, [r7, #19]
 8010d98:	e008      	b.n	8010dac <tcp_input+0x680>
 8010d9a:	4b5d      	ldr	r3, [pc, #372]	; (8010f10 <tcp_input+0x7e4>)
 8010d9c:	681a      	ldr	r2, [r3, #0]
 8010d9e:	2300      	movs	r3, #0
 8010da0:	69f9      	ldr	r1, [r7, #28]
 8010da2:	2000      	movs	r0, #0
 8010da4:	f7ff f884 	bl	800feb0 <tcp_recv_null>
 8010da8:	4603      	mov	r3, r0
 8010daa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010dac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010db0:	f113 0f0d 	cmn.w	r3, #13
 8010db4:	d053      	beq.n	8010e5e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010db6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d003      	beq.n	8010dc6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010dbe:	4b54      	ldr	r3, [pc, #336]	; (8010f10 <tcp_input+0x7e4>)
 8010dc0:	681a      	ldr	r2, [r3, #0]
 8010dc2:	69fb      	ldr	r3, [r7, #28]
 8010dc4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010dc6:	4b4f      	ldr	r3, [pc, #316]	; (8010f04 <tcp_input+0x7d8>)
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	f003 0320 	and.w	r3, r3, #32
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d030      	beq.n	8010e34 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010dd2:	69fb      	ldr	r3, [r7, #28]
 8010dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d009      	beq.n	8010dee <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010dde:	7b5a      	ldrb	r2, [r3, #13]
 8010de0:	69fb      	ldr	r3, [r7, #28]
 8010de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010de4:	f042 0220 	orr.w	r2, r2, #32
 8010de8:	b2d2      	uxtb	r2, r2
 8010dea:	735a      	strb	r2, [r3, #13]
 8010dec:	e022      	b.n	8010e34 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010df2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010df6:	d005      	beq.n	8010e04 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010dfc:	3301      	adds	r3, #1
 8010dfe:	b29a      	uxth	r2, r3
 8010e00:	69fb      	ldr	r3, [r7, #28]
 8010e02:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010e04:	69fb      	ldr	r3, [r7, #28]
 8010e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d00b      	beq.n	8010e26 <tcp_input+0x6fa>
 8010e0e:	69fb      	ldr	r3, [r7, #28]
 8010e10:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	6918      	ldr	r0, [r3, #16]
 8010e18:	2300      	movs	r3, #0
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	69f9      	ldr	r1, [r7, #28]
 8010e1e:	47a0      	blx	r4
 8010e20:	4603      	mov	r3, r0
 8010e22:	74fb      	strb	r3, [r7, #19]
 8010e24:	e001      	b.n	8010e2a <tcp_input+0x6fe>
 8010e26:	2300      	movs	r3, #0
 8010e28:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010e2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e2e:	f113 0f0d 	cmn.w	r3, #13
 8010e32:	d016      	beq.n	8010e62 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010e34:	4b32      	ldr	r3, [pc, #200]	; (8010f00 <tcp_input+0x7d4>)
 8010e36:	2200      	movs	r2, #0
 8010e38:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010e3a:	69f8      	ldr	r0, [r7, #28]
 8010e3c:	f000 f87e 	bl	8010f3c <tcp_input_delayed_close>
 8010e40:	4603      	mov	r3, r0
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d10f      	bne.n	8010e66 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010e46:	69f8      	ldr	r0, [r7, #28]
 8010e48:	f002 ff10 	bl	8013c6c <tcp_output>
 8010e4c:	e00c      	b.n	8010e68 <tcp_input+0x73c>
        goto aborted;
 8010e4e:	bf00      	nop
 8010e50:	e00a      	b.n	8010e68 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010e52:	bf00      	nop
 8010e54:	e008      	b.n	8010e68 <tcp_input+0x73c>
              goto aborted;
 8010e56:	bf00      	nop
 8010e58:	e006      	b.n	8010e68 <tcp_input+0x73c>
          goto aborted;
 8010e5a:	bf00      	nop
 8010e5c:	e004      	b.n	8010e68 <tcp_input+0x73c>
            goto aborted;
 8010e5e:	bf00      	nop
 8010e60:	e002      	b.n	8010e68 <tcp_input+0x73c>
              goto aborted;
 8010e62:	bf00      	nop
 8010e64:	e000      	b.n	8010e68 <tcp_input+0x73c>
          goto aborted;
 8010e66:	bf00      	nop
    tcp_input_pcb = NULL;
 8010e68:	4b25      	ldr	r3, [pc, #148]	; (8010f00 <tcp_input+0x7d4>)
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010e6e:	4b28      	ldr	r3, [pc, #160]	; (8010f10 <tcp_input+0x7e4>)
 8010e70:	2200      	movs	r2, #0
 8010e72:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010e74:	4b2a      	ldr	r3, [pc, #168]	; (8010f20 <tcp_input+0x7f4>)
 8010e76:	685b      	ldr	r3, [r3, #4]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d03d      	beq.n	8010ef8 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8010e7c:	4b28      	ldr	r3, [pc, #160]	; (8010f20 <tcp_input+0x7f4>)
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7fd fb1b 	bl	800e4bc <pbuf_free>
      inseg.p = NULL;
 8010e86:	4b26      	ldr	r3, [pc, #152]	; (8010f20 <tcp_input+0x7f4>)
 8010e88:	2200      	movs	r2, #0
 8010e8a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010e8c:	e034      	b.n	8010ef8 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010e8e:	4b25      	ldr	r3, [pc, #148]	; (8010f24 <tcp_input+0x7f8>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	899b      	ldrh	r3, [r3, #12]
 8010e94:	b29b      	uxth	r3, r3
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7fb fef2 	bl	800cc80 <lwip_htons>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	b2db      	uxtb	r3, r3
 8010ea0:	f003 0304 	and.w	r3, r3, #4
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d118      	bne.n	8010eda <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ea8:	4b1f      	ldr	r3, [pc, #124]	; (8010f28 <tcp_input+0x7fc>)
 8010eaa:	6819      	ldr	r1, [r3, #0]
 8010eac:	4b1f      	ldr	r3, [pc, #124]	; (8010f2c <tcp_input+0x800>)
 8010eae:	881b      	ldrh	r3, [r3, #0]
 8010eb0:	461a      	mov	r2, r3
 8010eb2:	4b1f      	ldr	r3, [pc, #124]	; (8010f30 <tcp_input+0x804>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010eb8:	4b1a      	ldr	r3, [pc, #104]	; (8010f24 <tcp_input+0x7f8>)
 8010eba:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ebc:	885b      	ldrh	r3, [r3, #2]
 8010ebe:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010ec0:	4a18      	ldr	r2, [pc, #96]	; (8010f24 <tcp_input+0x7f8>)
 8010ec2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ec4:	8812      	ldrh	r2, [r2, #0]
 8010ec6:	b292      	uxth	r2, r2
 8010ec8:	9202      	str	r2, [sp, #8]
 8010eca:	9301      	str	r3, [sp, #4]
 8010ecc:	4b19      	ldr	r3, [pc, #100]	; (8010f34 <tcp_input+0x808>)
 8010ece:	9300      	str	r3, [sp, #0]
 8010ed0:	4b19      	ldr	r3, [pc, #100]	; (8010f38 <tcp_input+0x80c>)
 8010ed2:	4602      	mov	r2, r0
 8010ed4:	2000      	movs	r0, #0
 8010ed6:	f003 fc8d 	bl	80147f4 <tcp_rst>
    pbuf_free(p);
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7fd faee 	bl	800e4bc <pbuf_free>
  return;
 8010ee0:	e00a      	b.n	8010ef8 <tcp_input+0x7cc>
    goto dropped;
 8010ee2:	bf00      	nop
 8010ee4:	e004      	b.n	8010ef0 <tcp_input+0x7c4>
dropped:
 8010ee6:	bf00      	nop
 8010ee8:	e002      	b.n	8010ef0 <tcp_input+0x7c4>
      goto dropped;
 8010eea:	bf00      	nop
 8010eec:	e000      	b.n	8010ef0 <tcp_input+0x7c4>
      goto dropped;
 8010eee:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010ef0:	6878      	ldr	r0, [r7, #4]
 8010ef2:	f7fd fae3 	bl	800e4bc <pbuf_free>
 8010ef6:	e000      	b.n	8010efa <tcp_input+0x7ce>
  return;
 8010ef8:	bf00      	nop
}
 8010efa:	3724      	adds	r7, #36	; 0x24
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd90      	pop	{r4, r7, pc}
 8010f00:	20016eb8 	.word	0x20016eb8
 8010f04:	20010315 	.word	0x20010315
 8010f08:	20016ea4 	.word	0x20016ea4
 8010f0c:	20010310 	.word	0x20010310
 8010f10:	20010318 	.word	0x20010318
 8010f14:	0801d368 	.word	0x0801d368
 8010f18:	0801d51c 	.word	0x0801d51c
 8010f1c:	0801d3b4 	.word	0x0801d3b4
 8010f20:	200102e8 	.word	0x200102e8
 8010f24:	200102f8 	.word	0x200102f8
 8010f28:	2001030c 	.word	0x2001030c
 8010f2c:	20010312 	.word	0x20010312
 8010f30:	20010308 	.word	0x20010308
 8010f34:	20013780 	.word	0x20013780
 8010f38:	20013784 	.word	0x20013784

08010f3c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b082      	sub	sp, #8
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d106      	bne.n	8010f58 <tcp_input_delayed_close+0x1c>
 8010f4a:	4b17      	ldr	r3, [pc, #92]	; (8010fa8 <tcp_input_delayed_close+0x6c>)
 8010f4c:	f240 225a 	movw	r2, #602	; 0x25a
 8010f50:	4916      	ldr	r1, [pc, #88]	; (8010fac <tcp_input_delayed_close+0x70>)
 8010f52:	4817      	ldr	r0, [pc, #92]	; (8010fb0 <tcp_input_delayed_close+0x74>)
 8010f54:	f008 fff0 	bl	8019f38 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010f58:	4b16      	ldr	r3, [pc, #88]	; (8010fb4 <tcp_input_delayed_close+0x78>)
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	f003 0310 	and.w	r3, r3, #16
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d01c      	beq.n	8010f9e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	8b5b      	ldrh	r3, [r3, #26]
 8010f68:	f003 0310 	and.w	r3, r3, #16
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d10d      	bne.n	8010f8c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d008      	beq.n	8010f8c <tcp_input_delayed_close+0x50>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	6912      	ldr	r2, [r2, #16]
 8010f84:	f06f 010e 	mvn.w	r1, #14
 8010f88:	4610      	mov	r0, r2
 8010f8a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010f8c:	6879      	ldr	r1, [r7, #4]
 8010f8e:	480a      	ldr	r0, [pc, #40]	; (8010fb8 <tcp_input_delayed_close+0x7c>)
 8010f90:	f7ff fa54 	bl	801043c <tcp_pcb_remove>
    tcp_free(pcb);
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7fd fd4d 	bl	800ea34 <tcp_free>
    return 1;
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	e000      	b.n	8010fa0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010f9e:	2300      	movs	r3, #0
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3708      	adds	r7, #8
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}
 8010fa8:	0801d368 	.word	0x0801d368
 8010fac:	0801d538 	.word	0x0801d538
 8010fb0:	0801d3b4 	.word	0x0801d3b4
 8010fb4:	20010315 	.word	0x20010315
 8010fb8:	20016ea4 	.word	0x20016ea4

08010fbc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010fbc:	b590      	push	{r4, r7, lr}
 8010fbe:	b08b      	sub	sp, #44	; 0x2c
 8010fc0:	af04      	add	r7, sp, #16
 8010fc2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010fc4:	4b6f      	ldr	r3, [pc, #444]	; (8011184 <tcp_listen_input+0x1c8>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	f003 0304 	and.w	r3, r3, #4
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	f040 80d3 	bne.w	8011178 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d106      	bne.n	8010fe6 <tcp_listen_input+0x2a>
 8010fd8:	4b6b      	ldr	r3, [pc, #428]	; (8011188 <tcp_listen_input+0x1cc>)
 8010fda:	f240 2281 	movw	r2, #641	; 0x281
 8010fde:	496b      	ldr	r1, [pc, #428]	; (801118c <tcp_listen_input+0x1d0>)
 8010fe0:	486b      	ldr	r0, [pc, #428]	; (8011190 <tcp_listen_input+0x1d4>)
 8010fe2:	f008 ffa9 	bl	8019f38 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8010fe6:	4b67      	ldr	r3, [pc, #412]	; (8011184 <tcp_listen_input+0x1c8>)
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	f003 0310 	and.w	r3, r3, #16
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d019      	beq.n	8011026 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010ff2:	4b68      	ldr	r3, [pc, #416]	; (8011194 <tcp_listen_input+0x1d8>)
 8010ff4:	6819      	ldr	r1, [r3, #0]
 8010ff6:	4b68      	ldr	r3, [pc, #416]	; (8011198 <tcp_listen_input+0x1dc>)
 8010ff8:	881b      	ldrh	r3, [r3, #0]
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	4b67      	ldr	r3, [pc, #412]	; (801119c <tcp_listen_input+0x1e0>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011002:	4b67      	ldr	r3, [pc, #412]	; (80111a0 <tcp_listen_input+0x1e4>)
 8011004:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011006:	885b      	ldrh	r3, [r3, #2]
 8011008:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801100a:	4a65      	ldr	r2, [pc, #404]	; (80111a0 <tcp_listen_input+0x1e4>)
 801100c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801100e:	8812      	ldrh	r2, [r2, #0]
 8011010:	b292      	uxth	r2, r2
 8011012:	9202      	str	r2, [sp, #8]
 8011014:	9301      	str	r3, [sp, #4]
 8011016:	4b63      	ldr	r3, [pc, #396]	; (80111a4 <tcp_listen_input+0x1e8>)
 8011018:	9300      	str	r3, [sp, #0]
 801101a:	4b63      	ldr	r3, [pc, #396]	; (80111a8 <tcp_listen_input+0x1ec>)
 801101c:	4602      	mov	r2, r0
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f003 fbe8 	bl	80147f4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011024:	e0aa      	b.n	801117c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8011026:	4b57      	ldr	r3, [pc, #348]	; (8011184 <tcp_listen_input+0x1c8>)
 8011028:	781b      	ldrb	r3, [r3, #0]
 801102a:	f003 0302 	and.w	r3, r3, #2
 801102e:	2b00      	cmp	r3, #0
 8011030:	f000 80a4 	beq.w	801117c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	7d5b      	ldrb	r3, [r3, #21]
 8011038:	4618      	mov	r0, r3
 801103a:	f7ff f85d 	bl	80100f8 <tcp_alloc>
 801103e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011040:	697b      	ldr	r3, [r7, #20]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d111      	bne.n	801106a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	699b      	ldr	r3, [r3, #24]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d00a      	beq.n	8011064 <tcp_listen_input+0xa8>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	699b      	ldr	r3, [r3, #24]
 8011052:	687a      	ldr	r2, [r7, #4]
 8011054:	6910      	ldr	r0, [r2, #16]
 8011056:	f04f 32ff 	mov.w	r2, #4294967295
 801105a:	2100      	movs	r1, #0
 801105c:	4798      	blx	r3
 801105e:	4603      	mov	r3, r0
 8011060:	73bb      	strb	r3, [r7, #14]
      return;
 8011062:	e08c      	b.n	801117e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011064:	23f0      	movs	r3, #240	; 0xf0
 8011066:	73bb      	strb	r3, [r7, #14]
      return;
 8011068:	e089      	b.n	801117e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801106a:	4b50      	ldr	r3, [pc, #320]	; (80111ac <tcp_listen_input+0x1f0>)
 801106c:	695a      	ldr	r2, [r3, #20]
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011072:	4b4e      	ldr	r3, [pc, #312]	; (80111ac <tcp_listen_input+0x1f0>)
 8011074:	691a      	ldr	r2, [r3, #16]
 8011076:	697b      	ldr	r3, [r7, #20]
 8011078:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	8ada      	ldrh	r2, [r3, #22]
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011082:	4b47      	ldr	r3, [pc, #284]	; (80111a0 <tcp_listen_input+0x1e4>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	881b      	ldrh	r3, [r3, #0]
 8011088:	b29a      	uxth	r2, r3
 801108a:	697b      	ldr	r3, [r7, #20]
 801108c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	2203      	movs	r2, #3
 8011092:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011094:	4b41      	ldr	r3, [pc, #260]	; (801119c <tcp_listen_input+0x1e0>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	1c5a      	adds	r2, r3, #1
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801109e:	697b      	ldr	r3, [r7, #20]
 80110a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80110a2:	697b      	ldr	r3, [r7, #20]
 80110a4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80110a6:	6978      	ldr	r0, [r7, #20]
 80110a8:	f7ff fa5c 	bl	8010564 <tcp_next_iss>
 80110ac:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	693a      	ldr	r2, [r7, #16]
 80110b2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	693a      	ldr	r2, [r7, #16]
 80110b8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	693a      	ldr	r2, [r7, #16]
 80110be:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80110c0:	697b      	ldr	r3, [r7, #20]
 80110c2:	693a      	ldr	r2, [r7, #16]
 80110c4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80110c6:	4b35      	ldr	r3, [pc, #212]	; (801119c <tcp_listen_input+0x1e0>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	1e5a      	subs	r2, r3, #1
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	691a      	ldr	r2, [r3, #16]
 80110d4:	697b      	ldr	r3, [r7, #20]
 80110d6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	7a5b      	ldrb	r3, [r3, #9]
 80110e2:	f003 030c 	and.w	r3, r3, #12
 80110e6:	b2da      	uxtb	r2, r3
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	7a1a      	ldrb	r2, [r3, #8]
 80110f0:	697b      	ldr	r3, [r7, #20]
 80110f2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80110f4:	4b2e      	ldr	r3, [pc, #184]	; (80111b0 <tcp_listen_input+0x1f4>)
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	60da      	str	r2, [r3, #12]
 80110fc:	4a2c      	ldr	r2, [pc, #176]	; (80111b0 <tcp_listen_input+0x1f4>)
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	6013      	str	r3, [r2, #0]
 8011102:	f003 fd39 	bl	8014b78 <tcp_timer_needed>
 8011106:	4b2b      	ldr	r3, [pc, #172]	; (80111b4 <tcp_listen_input+0x1f8>)
 8011108:	2201      	movs	r2, #1
 801110a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801110c:	6978      	ldr	r0, [r7, #20]
 801110e:	f001 fd8f 	bl	8012c30 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011112:	4b23      	ldr	r3, [pc, #140]	; (80111a0 <tcp_listen_input+0x1e4>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	89db      	ldrh	r3, [r3, #14]
 8011118:	b29a      	uxth	r2, r3
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011130:	697b      	ldr	r3, [r7, #20]
 8011132:	3304      	adds	r3, #4
 8011134:	4618      	mov	r0, r3
 8011136:	f007 faeb 	bl	8018710 <ip4_route>
 801113a:	4601      	mov	r1, r0
 801113c:	697b      	ldr	r3, [r7, #20]
 801113e:	3304      	adds	r3, #4
 8011140:	461a      	mov	r2, r3
 8011142:	4620      	mov	r0, r4
 8011144:	f7ff fa34 	bl	80105b0 <tcp_eff_send_mss_netif>
 8011148:	4603      	mov	r3, r0
 801114a:	461a      	mov	r2, r3
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011150:	2112      	movs	r1, #18
 8011152:	6978      	ldr	r0, [r7, #20]
 8011154:	f002 fc9c 	bl	8013a90 <tcp_enqueue_flags>
 8011158:	4603      	mov	r3, r0
 801115a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801115c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d004      	beq.n	801116e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011164:	2100      	movs	r1, #0
 8011166:	6978      	ldr	r0, [r7, #20]
 8011168:	f7fd fee0 	bl	800ef2c <tcp_abandon>
      return;
 801116c:	e007      	b.n	801117e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 801116e:	6978      	ldr	r0, [r7, #20]
 8011170:	f002 fd7c 	bl	8013c6c <tcp_output>
  return;
 8011174:	bf00      	nop
 8011176:	e001      	b.n	801117c <tcp_listen_input+0x1c0>
    return;
 8011178:	bf00      	nop
 801117a:	e000      	b.n	801117e <tcp_listen_input+0x1c2>
  return;
 801117c:	bf00      	nop
}
 801117e:	371c      	adds	r7, #28
 8011180:	46bd      	mov	sp, r7
 8011182:	bd90      	pop	{r4, r7, pc}
 8011184:	20010314 	.word	0x20010314
 8011188:	0801d368 	.word	0x0801d368
 801118c:	0801d560 	.word	0x0801d560
 8011190:	0801d3b4 	.word	0x0801d3b4
 8011194:	2001030c 	.word	0x2001030c
 8011198:	20010312 	.word	0x20010312
 801119c:	20010308 	.word	0x20010308
 80111a0:	200102f8 	.word	0x200102f8
 80111a4:	20013780 	.word	0x20013780
 80111a8:	20013784 	.word	0x20013784
 80111ac:	20013770 	.word	0x20013770
 80111b0:	20016ea4 	.word	0x20016ea4
 80111b4:	20016ea0 	.word	0x20016ea0

080111b8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b086      	sub	sp, #24
 80111bc:	af04      	add	r7, sp, #16
 80111be:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80111c0:	4b30      	ldr	r3, [pc, #192]	; (8011284 <tcp_timewait_input+0xcc>)
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	f003 0304 	and.w	r3, r3, #4
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d154      	bne.n	8011276 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d106      	bne.n	80111e0 <tcp_timewait_input+0x28>
 80111d2:	4b2d      	ldr	r3, [pc, #180]	; (8011288 <tcp_timewait_input+0xd0>)
 80111d4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80111d8:	492c      	ldr	r1, [pc, #176]	; (801128c <tcp_timewait_input+0xd4>)
 80111da:	482d      	ldr	r0, [pc, #180]	; (8011290 <tcp_timewait_input+0xd8>)
 80111dc:	f008 feac 	bl	8019f38 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80111e0:	4b28      	ldr	r3, [pc, #160]	; (8011284 <tcp_timewait_input+0xcc>)
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	f003 0302 	and.w	r3, r3, #2
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d02a      	beq.n	8011242 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80111ec:	4b29      	ldr	r3, [pc, #164]	; (8011294 <tcp_timewait_input+0xdc>)
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111f4:	1ad3      	subs	r3, r2, r3
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	db2d      	blt.n	8011256 <tcp_timewait_input+0x9e>
 80111fa:	4b26      	ldr	r3, [pc, #152]	; (8011294 <tcp_timewait_input+0xdc>)
 80111fc:	681a      	ldr	r2, [r3, #0]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011202:	6879      	ldr	r1, [r7, #4]
 8011204:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011206:	440b      	add	r3, r1
 8011208:	1ad3      	subs	r3, r2, r3
 801120a:	2b00      	cmp	r3, #0
 801120c:	dc23      	bgt.n	8011256 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801120e:	4b22      	ldr	r3, [pc, #136]	; (8011298 <tcp_timewait_input+0xe0>)
 8011210:	6819      	ldr	r1, [r3, #0]
 8011212:	4b22      	ldr	r3, [pc, #136]	; (801129c <tcp_timewait_input+0xe4>)
 8011214:	881b      	ldrh	r3, [r3, #0]
 8011216:	461a      	mov	r2, r3
 8011218:	4b1e      	ldr	r3, [pc, #120]	; (8011294 <tcp_timewait_input+0xdc>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801121e:	4b20      	ldr	r3, [pc, #128]	; (80112a0 <tcp_timewait_input+0xe8>)
 8011220:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011222:	885b      	ldrh	r3, [r3, #2]
 8011224:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011226:	4a1e      	ldr	r2, [pc, #120]	; (80112a0 <tcp_timewait_input+0xe8>)
 8011228:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801122a:	8812      	ldrh	r2, [r2, #0]
 801122c:	b292      	uxth	r2, r2
 801122e:	9202      	str	r2, [sp, #8]
 8011230:	9301      	str	r3, [sp, #4]
 8011232:	4b1c      	ldr	r3, [pc, #112]	; (80112a4 <tcp_timewait_input+0xec>)
 8011234:	9300      	str	r3, [sp, #0]
 8011236:	4b1c      	ldr	r3, [pc, #112]	; (80112a8 <tcp_timewait_input+0xf0>)
 8011238:	4602      	mov	r2, r0
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f003 fada 	bl	80147f4 <tcp_rst>
      return;
 8011240:	e01c      	b.n	801127c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8011242:	4b10      	ldr	r3, [pc, #64]	; (8011284 <tcp_timewait_input+0xcc>)
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	f003 0301 	and.w	r3, r3, #1
 801124a:	2b00      	cmp	r3, #0
 801124c:	d003      	beq.n	8011256 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801124e:	4b17      	ldr	r3, [pc, #92]	; (80112ac <tcp_timewait_input+0xf4>)
 8011250:	681a      	ldr	r2, [r3, #0]
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011256:	4b11      	ldr	r3, [pc, #68]	; (801129c <tcp_timewait_input+0xe4>)
 8011258:	881b      	ldrh	r3, [r3, #0]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00d      	beq.n	801127a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	8b5b      	ldrh	r3, [r3, #26]
 8011262:	f043 0302 	orr.w	r3, r3, #2
 8011266:	b29a      	uxth	r2, r3
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f002 fcfd 	bl	8013c6c <tcp_output>
  }
  return;
 8011272:	bf00      	nop
 8011274:	e001      	b.n	801127a <tcp_timewait_input+0xc2>
    return;
 8011276:	bf00      	nop
 8011278:	e000      	b.n	801127c <tcp_timewait_input+0xc4>
  return;
 801127a:	bf00      	nop
}
 801127c:	3708      	adds	r7, #8
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}
 8011282:	bf00      	nop
 8011284:	20010314 	.word	0x20010314
 8011288:	0801d368 	.word	0x0801d368
 801128c:	0801d580 	.word	0x0801d580
 8011290:	0801d3b4 	.word	0x0801d3b4
 8011294:	20010308 	.word	0x20010308
 8011298:	2001030c 	.word	0x2001030c
 801129c:	20010312 	.word	0x20010312
 80112a0:	200102f8 	.word	0x200102f8
 80112a4:	20013780 	.word	0x20013780
 80112a8:	20013784 	.word	0x20013784
 80112ac:	20016ea8 	.word	0x20016ea8

080112b0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80112b0:	b590      	push	{r4, r7, lr}
 80112b2:	b08d      	sub	sp, #52	; 0x34
 80112b4:	af04      	add	r7, sp, #16
 80112b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80112b8:	2300      	movs	r3, #0
 80112ba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80112bc:	2300      	movs	r3, #0
 80112be:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d106      	bne.n	80112d4 <tcp_process+0x24>
 80112c6:	4ba5      	ldr	r3, [pc, #660]	; (801155c <tcp_process+0x2ac>)
 80112c8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80112cc:	49a4      	ldr	r1, [pc, #656]	; (8011560 <tcp_process+0x2b0>)
 80112ce:	48a5      	ldr	r0, [pc, #660]	; (8011564 <tcp_process+0x2b4>)
 80112d0:	f008 fe32 	bl	8019f38 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80112d4:	4ba4      	ldr	r3, [pc, #656]	; (8011568 <tcp_process+0x2b8>)
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	f003 0304 	and.w	r3, r3, #4
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d04e      	beq.n	801137e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	7d1b      	ldrb	r3, [r3, #20]
 80112e4:	2b02      	cmp	r3, #2
 80112e6:	d108      	bne.n	80112fa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112ec:	4b9f      	ldr	r3, [pc, #636]	; (801156c <tcp_process+0x2bc>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d123      	bne.n	801133c <tcp_process+0x8c>
        acceptable = 1;
 80112f4:	2301      	movs	r3, #1
 80112f6:	76fb      	strb	r3, [r7, #27]
 80112f8:	e020      	b.n	801133c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80112fe:	4b9c      	ldr	r3, [pc, #624]	; (8011570 <tcp_process+0x2c0>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	429a      	cmp	r2, r3
 8011304:	d102      	bne.n	801130c <tcp_process+0x5c>
        acceptable = 1;
 8011306:	2301      	movs	r3, #1
 8011308:	76fb      	strb	r3, [r7, #27]
 801130a:	e017      	b.n	801133c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801130c:	4b98      	ldr	r3, [pc, #608]	; (8011570 <tcp_process+0x2c0>)
 801130e:	681a      	ldr	r2, [r3, #0]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011314:	1ad3      	subs	r3, r2, r3
 8011316:	2b00      	cmp	r3, #0
 8011318:	db10      	blt.n	801133c <tcp_process+0x8c>
 801131a:	4b95      	ldr	r3, [pc, #596]	; (8011570 <tcp_process+0x2c0>)
 801131c:	681a      	ldr	r2, [r3, #0]
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011322:	6879      	ldr	r1, [r7, #4]
 8011324:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011326:	440b      	add	r3, r1
 8011328:	1ad3      	subs	r3, r2, r3
 801132a:	2b00      	cmp	r3, #0
 801132c:	dc06      	bgt.n	801133c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	8b5b      	ldrh	r3, [r3, #26]
 8011332:	f043 0302 	orr.w	r3, r3, #2
 8011336:	b29a      	uxth	r2, r3
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801133c:	7efb      	ldrb	r3, [r7, #27]
 801133e:	2b00      	cmp	r3, #0
 8011340:	d01b      	beq.n	801137a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	7d1b      	ldrb	r3, [r3, #20]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d106      	bne.n	8011358 <tcp_process+0xa8>
 801134a:	4b84      	ldr	r3, [pc, #528]	; (801155c <tcp_process+0x2ac>)
 801134c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011350:	4988      	ldr	r1, [pc, #544]	; (8011574 <tcp_process+0x2c4>)
 8011352:	4884      	ldr	r0, [pc, #528]	; (8011564 <tcp_process+0x2b4>)
 8011354:	f008 fdf0 	bl	8019f38 <iprintf>
      recv_flags |= TF_RESET;
 8011358:	4b87      	ldr	r3, [pc, #540]	; (8011578 <tcp_process+0x2c8>)
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	f043 0308 	orr.w	r3, r3, #8
 8011360:	b2da      	uxtb	r2, r3
 8011362:	4b85      	ldr	r3, [pc, #532]	; (8011578 <tcp_process+0x2c8>)
 8011364:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	8b5b      	ldrh	r3, [r3, #26]
 801136a:	f023 0301 	bic.w	r3, r3, #1
 801136e:	b29a      	uxth	r2, r3
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011374:	f06f 030d 	mvn.w	r3, #13
 8011378:	e37a      	b.n	8011a70 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801137a:	2300      	movs	r3, #0
 801137c:	e378      	b.n	8011a70 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801137e:	4b7a      	ldr	r3, [pc, #488]	; (8011568 <tcp_process+0x2b8>)
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	f003 0302 	and.w	r3, r3, #2
 8011386:	2b00      	cmp	r3, #0
 8011388:	d010      	beq.n	80113ac <tcp_process+0xfc>
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	7d1b      	ldrb	r3, [r3, #20]
 801138e:	2b02      	cmp	r3, #2
 8011390:	d00c      	beq.n	80113ac <tcp_process+0xfc>
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	7d1b      	ldrb	r3, [r3, #20]
 8011396:	2b03      	cmp	r3, #3
 8011398:	d008      	beq.n	80113ac <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	8b5b      	ldrh	r3, [r3, #26]
 801139e:	f043 0302 	orr.w	r3, r3, #2
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80113a8:	2300      	movs	r3, #0
 80113aa:	e361      	b.n	8011a70 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	8b5b      	ldrh	r3, [r3, #26]
 80113b0:	f003 0310 	and.w	r3, r3, #16
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d103      	bne.n	80113c0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80113b8:	4b70      	ldr	r3, [pc, #448]	; (801157c <tcp_process+0x2cc>)
 80113ba:	681a      	ldr	r2, [r3, #0]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2200      	movs	r2, #0
 80113c4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2200      	movs	r2, #0
 80113cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f001 fc2d 	bl	8012c30 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	7d1b      	ldrb	r3, [r3, #20]
 80113da:	3b02      	subs	r3, #2
 80113dc:	2b07      	cmp	r3, #7
 80113de:	f200 8337 	bhi.w	8011a50 <tcp_process+0x7a0>
 80113e2:	a201      	add	r2, pc, #4	; (adr r2, 80113e8 <tcp_process+0x138>)
 80113e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113e8:	08011409 	.word	0x08011409
 80113ec:	08011639 	.word	0x08011639
 80113f0:	080117b1 	.word	0x080117b1
 80113f4:	080117db 	.word	0x080117db
 80113f8:	080118ff 	.word	0x080118ff
 80113fc:	080117b1 	.word	0x080117b1
 8011400:	0801198b 	.word	0x0801198b
 8011404:	08011a1b 	.word	0x08011a1b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011408:	4b57      	ldr	r3, [pc, #348]	; (8011568 <tcp_process+0x2b8>)
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	f003 0310 	and.w	r3, r3, #16
 8011410:	2b00      	cmp	r3, #0
 8011412:	f000 80e4 	beq.w	80115de <tcp_process+0x32e>
 8011416:	4b54      	ldr	r3, [pc, #336]	; (8011568 <tcp_process+0x2b8>)
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	f003 0302 	and.w	r3, r3, #2
 801141e:	2b00      	cmp	r3, #0
 8011420:	f000 80dd 	beq.w	80115de <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011428:	1c5a      	adds	r2, r3, #1
 801142a:	4b50      	ldr	r3, [pc, #320]	; (801156c <tcp_process+0x2bc>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	429a      	cmp	r2, r3
 8011430:	f040 80d5 	bne.w	80115de <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011434:	4b4e      	ldr	r3, [pc, #312]	; (8011570 <tcp_process+0x2c0>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	1c5a      	adds	r2, r3, #1
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011446:	4b49      	ldr	r3, [pc, #292]	; (801156c <tcp_process+0x2bc>)
 8011448:	681a      	ldr	r2, [r3, #0]
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801144e:	4b4c      	ldr	r3, [pc, #304]	; (8011580 <tcp_process+0x2d0>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	89db      	ldrh	r3, [r3, #14]
 8011454:	b29a      	uxth	r2, r3
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011468:	4b41      	ldr	r3, [pc, #260]	; (8011570 <tcp_process+0x2c0>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	1e5a      	subs	r2, r3, #1
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2204      	movs	r2, #4
 8011476:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	3304      	adds	r3, #4
 8011480:	4618      	mov	r0, r3
 8011482:	f007 f945 	bl	8018710 <ip4_route>
 8011486:	4601      	mov	r1, r0
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	3304      	adds	r3, #4
 801148c:	461a      	mov	r2, r3
 801148e:	4620      	mov	r0, r4
 8011490:	f7ff f88e 	bl	80105b0 <tcp_eff_send_mss_netif>
 8011494:	4603      	mov	r3, r0
 8011496:	461a      	mov	r2, r3
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114a0:	009a      	lsls	r2, r3, #2
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114a6:	005b      	lsls	r3, r3, #1
 80114a8:	f241 111c 	movw	r1, #4380	; 0x111c
 80114ac:	428b      	cmp	r3, r1
 80114ae:	bf38      	it	cc
 80114b0:	460b      	movcc	r3, r1
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d204      	bcs.n	80114c0 <tcp_process+0x210>
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114ba:	009b      	lsls	r3, r3, #2
 80114bc:	b29b      	uxth	r3, r3
 80114be:	e00d      	b.n	80114dc <tcp_process+0x22c>
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114c4:	005b      	lsls	r3, r3, #1
 80114c6:	f241 121c 	movw	r2, #4380	; 0x111c
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d904      	bls.n	80114d8 <tcp_process+0x228>
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114d2:	005b      	lsls	r3, r3, #1
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	e001      	b.n	80114dc <tcp_process+0x22c>
 80114d8:	f241 131c 	movw	r3, #4380	; 0x111c
 80114dc:	687a      	ldr	r2, [r7, #4]
 80114de:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d106      	bne.n	80114fa <tcp_process+0x24a>
 80114ec:	4b1b      	ldr	r3, [pc, #108]	; (801155c <tcp_process+0x2ac>)
 80114ee:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80114f2:	4924      	ldr	r1, [pc, #144]	; (8011584 <tcp_process+0x2d4>)
 80114f4:	481b      	ldr	r0, [pc, #108]	; (8011564 <tcp_process+0x2b4>)
 80114f6:	f008 fd1f 	bl	8019f38 <iprintf>
        --pcb->snd_queuelen;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011500:	3b01      	subs	r3, #1
 8011502:	b29a      	uxth	r2, r3
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801150e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011510:	69fb      	ldr	r3, [r7, #28]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d111      	bne.n	801153a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801151a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801151c:	69fb      	ldr	r3, [r7, #28]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d106      	bne.n	8011530 <tcp_process+0x280>
 8011522:	4b0e      	ldr	r3, [pc, #56]	; (801155c <tcp_process+0x2ac>)
 8011524:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011528:	4917      	ldr	r1, [pc, #92]	; (8011588 <tcp_process+0x2d8>)
 801152a:	480e      	ldr	r0, [pc, #56]	; (8011564 <tcp_process+0x2b4>)
 801152c:	f008 fd04 	bl	8019f38 <iprintf>
          pcb->unsent = rseg->next;
 8011530:	69fb      	ldr	r3, [r7, #28]
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	66da      	str	r2, [r3, #108]	; 0x6c
 8011538:	e003      	b.n	8011542 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801153a:	69fb      	ldr	r3, [r7, #28]
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011542:	69f8      	ldr	r0, [r7, #28]
 8011544:	f7fe fc52 	bl	800fdec <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801154c:	2b00      	cmp	r3, #0
 801154e:	d11d      	bne.n	801158c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011556:	861a      	strh	r2, [r3, #48]	; 0x30
 8011558:	e01f      	b.n	801159a <tcp_process+0x2ea>
 801155a:	bf00      	nop
 801155c:	0801d368 	.word	0x0801d368
 8011560:	0801d5a0 	.word	0x0801d5a0
 8011564:	0801d3b4 	.word	0x0801d3b4
 8011568:	20010314 	.word	0x20010314
 801156c:	2001030c 	.word	0x2001030c
 8011570:	20010308 	.word	0x20010308
 8011574:	0801d5bc 	.word	0x0801d5bc
 8011578:	20010315 	.word	0x20010315
 801157c:	20016ea8 	.word	0x20016ea8
 8011580:	200102f8 	.word	0x200102f8
 8011584:	0801d5dc 	.word	0x0801d5dc
 8011588:	0801d5f4 	.word	0x0801d5f4
        } else {
          pcb->rtime = 0;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2200      	movs	r2, #0
 8011590:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2200      	movs	r2, #0
 8011596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d00a      	beq.n	80115ba <tcp_process+0x30a>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115aa:	687a      	ldr	r2, [r7, #4]
 80115ac:	6910      	ldr	r0, [r2, #16]
 80115ae:	2200      	movs	r2, #0
 80115b0:	6879      	ldr	r1, [r7, #4]
 80115b2:	4798      	blx	r3
 80115b4:	4603      	mov	r3, r0
 80115b6:	76bb      	strb	r3, [r7, #26]
 80115b8:	e001      	b.n	80115be <tcp_process+0x30e>
 80115ba:	2300      	movs	r3, #0
 80115bc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80115be:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80115c2:	f113 0f0d 	cmn.w	r3, #13
 80115c6:	d102      	bne.n	80115ce <tcp_process+0x31e>
          return ERR_ABRT;
 80115c8:	f06f 030c 	mvn.w	r3, #12
 80115cc:	e250      	b.n	8011a70 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	8b5b      	ldrh	r3, [r3, #26]
 80115d2:	f043 0302 	orr.w	r3, r3, #2
 80115d6:	b29a      	uxth	r2, r3
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80115dc:	e23a      	b.n	8011a54 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80115de:	4b9d      	ldr	r3, [pc, #628]	; (8011854 <tcp_process+0x5a4>)
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	f003 0310 	and.w	r3, r3, #16
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	f000 8234 	beq.w	8011a54 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115ec:	4b9a      	ldr	r3, [pc, #616]	; (8011858 <tcp_process+0x5a8>)
 80115ee:	6819      	ldr	r1, [r3, #0]
 80115f0:	4b9a      	ldr	r3, [pc, #616]	; (801185c <tcp_process+0x5ac>)
 80115f2:	881b      	ldrh	r3, [r3, #0]
 80115f4:	461a      	mov	r2, r3
 80115f6:	4b9a      	ldr	r3, [pc, #616]	; (8011860 <tcp_process+0x5b0>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115fc:	4b99      	ldr	r3, [pc, #612]	; (8011864 <tcp_process+0x5b4>)
 80115fe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011600:	885b      	ldrh	r3, [r3, #2]
 8011602:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011604:	4a97      	ldr	r2, [pc, #604]	; (8011864 <tcp_process+0x5b4>)
 8011606:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011608:	8812      	ldrh	r2, [r2, #0]
 801160a:	b292      	uxth	r2, r2
 801160c:	9202      	str	r2, [sp, #8]
 801160e:	9301      	str	r3, [sp, #4]
 8011610:	4b95      	ldr	r3, [pc, #596]	; (8011868 <tcp_process+0x5b8>)
 8011612:	9300      	str	r3, [sp, #0]
 8011614:	4b95      	ldr	r3, [pc, #596]	; (801186c <tcp_process+0x5bc>)
 8011616:	4602      	mov	r2, r0
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f003 f8eb 	bl	80147f4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011624:	2b05      	cmp	r3, #5
 8011626:	f200 8215 	bhi.w	8011a54 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2200      	movs	r2, #0
 801162e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f002 feab 	bl	801438c <tcp_rexmit_rto>
      break;
 8011636:	e20d      	b.n	8011a54 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011638:	4b86      	ldr	r3, [pc, #536]	; (8011854 <tcp_process+0x5a4>)
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	f003 0310 	and.w	r3, r3, #16
 8011640:	2b00      	cmp	r3, #0
 8011642:	f000 80a1 	beq.w	8011788 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011646:	4b84      	ldr	r3, [pc, #528]	; (8011858 <tcp_process+0x5a8>)
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	3b01      	subs	r3, #1
 8011652:	2b00      	cmp	r3, #0
 8011654:	db7e      	blt.n	8011754 <tcp_process+0x4a4>
 8011656:	4b80      	ldr	r3, [pc, #512]	; (8011858 <tcp_process+0x5a8>)
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801165e:	1ad3      	subs	r3, r2, r3
 8011660:	2b00      	cmp	r3, #0
 8011662:	dc77      	bgt.n	8011754 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2204      	movs	r2, #4
 8011668:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801166e:	2b00      	cmp	r3, #0
 8011670:	d102      	bne.n	8011678 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011672:	23fa      	movs	r3, #250	; 0xfa
 8011674:	76bb      	strb	r3, [r7, #26]
 8011676:	e01d      	b.n	80116b4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801167c:	699b      	ldr	r3, [r3, #24]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d106      	bne.n	8011690 <tcp_process+0x3e0>
 8011682:	4b7b      	ldr	r3, [pc, #492]	; (8011870 <tcp_process+0x5c0>)
 8011684:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011688:	497a      	ldr	r1, [pc, #488]	; (8011874 <tcp_process+0x5c4>)
 801168a:	487b      	ldr	r0, [pc, #492]	; (8011878 <tcp_process+0x5c8>)
 801168c:	f008 fc54 	bl	8019f38 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011694:	699b      	ldr	r3, [r3, #24]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d00a      	beq.n	80116b0 <tcp_process+0x400>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801169e:	699b      	ldr	r3, [r3, #24]
 80116a0:	687a      	ldr	r2, [r7, #4]
 80116a2:	6910      	ldr	r0, [r2, #16]
 80116a4:	2200      	movs	r2, #0
 80116a6:	6879      	ldr	r1, [r7, #4]
 80116a8:	4798      	blx	r3
 80116aa:	4603      	mov	r3, r0
 80116ac:	76bb      	strb	r3, [r7, #26]
 80116ae:	e001      	b.n	80116b4 <tcp_process+0x404>
 80116b0:	23f0      	movs	r3, #240	; 0xf0
 80116b2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80116b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d00a      	beq.n	80116d2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80116bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80116c0:	f113 0f0d 	cmn.w	r3, #13
 80116c4:	d002      	beq.n	80116cc <tcp_process+0x41c>
              tcp_abort(pcb);
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f7fd fcee 	bl	800f0a8 <tcp_abort>
            }
            return ERR_ABRT;
 80116cc:	f06f 030c 	mvn.w	r3, #12
 80116d0:	e1ce      	b.n	8011a70 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80116d2:	6878      	ldr	r0, [r7, #4]
 80116d4:	f000 fae0 	bl	8011c98 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80116d8:	4b68      	ldr	r3, [pc, #416]	; (801187c <tcp_process+0x5cc>)
 80116da:	881b      	ldrh	r3, [r3, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d005      	beq.n	80116ec <tcp_process+0x43c>
            recv_acked--;
 80116e0:	4b66      	ldr	r3, [pc, #408]	; (801187c <tcp_process+0x5cc>)
 80116e2:	881b      	ldrh	r3, [r3, #0]
 80116e4:	3b01      	subs	r3, #1
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	4b64      	ldr	r3, [pc, #400]	; (801187c <tcp_process+0x5cc>)
 80116ea:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116f0:	009a      	lsls	r2, r3, #2
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116f6:	005b      	lsls	r3, r3, #1
 80116f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80116fc:	428b      	cmp	r3, r1
 80116fe:	bf38      	it	cc
 8011700:	460b      	movcc	r3, r1
 8011702:	429a      	cmp	r2, r3
 8011704:	d204      	bcs.n	8011710 <tcp_process+0x460>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801170a:	009b      	lsls	r3, r3, #2
 801170c:	b29b      	uxth	r3, r3
 801170e:	e00d      	b.n	801172c <tcp_process+0x47c>
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011714:	005b      	lsls	r3, r3, #1
 8011716:	f241 121c 	movw	r2, #4380	; 0x111c
 801171a:	4293      	cmp	r3, r2
 801171c:	d904      	bls.n	8011728 <tcp_process+0x478>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011722:	005b      	lsls	r3, r3, #1
 8011724:	b29b      	uxth	r3, r3
 8011726:	e001      	b.n	801172c <tcp_process+0x47c>
 8011728:	f241 131c 	movw	r3, #4380	; 0x111c
 801172c:	687a      	ldr	r2, [r7, #4]
 801172e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011732:	4b53      	ldr	r3, [pc, #332]	; (8011880 <tcp_process+0x5d0>)
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	f003 0320 	and.w	r3, r3, #32
 801173a:	2b00      	cmp	r3, #0
 801173c:	d037      	beq.n	80117ae <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	8b5b      	ldrh	r3, [r3, #26]
 8011742:	f043 0302 	orr.w	r3, r3, #2
 8011746:	b29a      	uxth	r2, r3
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2207      	movs	r2, #7
 8011750:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011752:	e02c      	b.n	80117ae <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011754:	4b40      	ldr	r3, [pc, #256]	; (8011858 <tcp_process+0x5a8>)
 8011756:	6819      	ldr	r1, [r3, #0]
 8011758:	4b40      	ldr	r3, [pc, #256]	; (801185c <tcp_process+0x5ac>)
 801175a:	881b      	ldrh	r3, [r3, #0]
 801175c:	461a      	mov	r2, r3
 801175e:	4b40      	ldr	r3, [pc, #256]	; (8011860 <tcp_process+0x5b0>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011764:	4b3f      	ldr	r3, [pc, #252]	; (8011864 <tcp_process+0x5b4>)
 8011766:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011768:	885b      	ldrh	r3, [r3, #2]
 801176a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801176c:	4a3d      	ldr	r2, [pc, #244]	; (8011864 <tcp_process+0x5b4>)
 801176e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011770:	8812      	ldrh	r2, [r2, #0]
 8011772:	b292      	uxth	r2, r2
 8011774:	9202      	str	r2, [sp, #8]
 8011776:	9301      	str	r3, [sp, #4]
 8011778:	4b3b      	ldr	r3, [pc, #236]	; (8011868 <tcp_process+0x5b8>)
 801177a:	9300      	str	r3, [sp, #0]
 801177c:	4b3b      	ldr	r3, [pc, #236]	; (801186c <tcp_process+0x5bc>)
 801177e:	4602      	mov	r2, r0
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f003 f837 	bl	80147f4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011786:	e167      	b.n	8011a58 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011788:	4b32      	ldr	r3, [pc, #200]	; (8011854 <tcp_process+0x5a4>)
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	f003 0302 	and.w	r3, r3, #2
 8011790:	2b00      	cmp	r3, #0
 8011792:	f000 8161 	beq.w	8011a58 <tcp_process+0x7a8>
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801179a:	1e5a      	subs	r2, r3, #1
 801179c:	4b30      	ldr	r3, [pc, #192]	; (8011860 <tcp_process+0x5b0>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	429a      	cmp	r2, r3
 80117a2:	f040 8159 	bne.w	8011a58 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80117a6:	6878      	ldr	r0, [r7, #4]
 80117a8:	f002 fe12 	bl	80143d0 <tcp_rexmit>
      break;
 80117ac:	e154      	b.n	8011a58 <tcp_process+0x7a8>
 80117ae:	e153      	b.n	8011a58 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80117b0:	6878      	ldr	r0, [r7, #4]
 80117b2:	f000 fa71 	bl	8011c98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80117b6:	4b32      	ldr	r3, [pc, #200]	; (8011880 <tcp_process+0x5d0>)
 80117b8:	781b      	ldrb	r3, [r3, #0]
 80117ba:	f003 0320 	and.w	r3, r3, #32
 80117be:	2b00      	cmp	r3, #0
 80117c0:	f000 814c 	beq.w	8011a5c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	8b5b      	ldrh	r3, [r3, #26]
 80117c8:	f043 0302 	orr.w	r3, r3, #2
 80117cc:	b29a      	uxth	r2, r3
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2207      	movs	r2, #7
 80117d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80117d8:	e140      	b.n	8011a5c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80117da:	6878      	ldr	r0, [r7, #4]
 80117dc:	f000 fa5c 	bl	8011c98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80117e0:	4b27      	ldr	r3, [pc, #156]	; (8011880 <tcp_process+0x5d0>)
 80117e2:	781b      	ldrb	r3, [r3, #0]
 80117e4:	f003 0320 	and.w	r3, r3, #32
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d071      	beq.n	80118d0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80117ec:	4b19      	ldr	r3, [pc, #100]	; (8011854 <tcp_process+0x5a4>)
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	f003 0310 	and.w	r3, r3, #16
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d060      	beq.n	80118ba <tcp_process+0x60a>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80117fc:	4b16      	ldr	r3, [pc, #88]	; (8011858 <tcp_process+0x5a8>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	429a      	cmp	r2, r3
 8011802:	d15a      	bne.n	80118ba <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011808:	2b00      	cmp	r3, #0
 801180a:	d156      	bne.n	80118ba <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	8b5b      	ldrh	r3, [r3, #26]
 8011810:	f043 0302 	orr.w	r3, r3, #2
 8011814:	b29a      	uxth	r2, r3
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f7fe fdbe 	bl	801039c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011820:	4b18      	ldr	r3, [pc, #96]	; (8011884 <tcp_process+0x5d4>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	429a      	cmp	r2, r3
 8011828:	d105      	bne.n	8011836 <tcp_process+0x586>
 801182a:	4b16      	ldr	r3, [pc, #88]	; (8011884 <tcp_process+0x5d4>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	4a14      	ldr	r2, [pc, #80]	; (8011884 <tcp_process+0x5d4>)
 8011832:	6013      	str	r3, [r2, #0]
 8011834:	e02e      	b.n	8011894 <tcp_process+0x5e4>
 8011836:	4b13      	ldr	r3, [pc, #76]	; (8011884 <tcp_process+0x5d4>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	617b      	str	r3, [r7, #20]
 801183c:	e027      	b.n	801188e <tcp_process+0x5de>
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	429a      	cmp	r2, r3
 8011846:	d11f      	bne.n	8011888 <tcp_process+0x5d8>
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	68da      	ldr	r2, [r3, #12]
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	60da      	str	r2, [r3, #12]
 8011850:	e020      	b.n	8011894 <tcp_process+0x5e4>
 8011852:	bf00      	nop
 8011854:	20010314 	.word	0x20010314
 8011858:	2001030c 	.word	0x2001030c
 801185c:	20010312 	.word	0x20010312
 8011860:	20010308 	.word	0x20010308
 8011864:	200102f8 	.word	0x200102f8
 8011868:	20013780 	.word	0x20013780
 801186c:	20013784 	.word	0x20013784
 8011870:	0801d368 	.word	0x0801d368
 8011874:	0801d608 	.word	0x0801d608
 8011878:	0801d3b4 	.word	0x0801d3b4
 801187c:	20010310 	.word	0x20010310
 8011880:	20010315 	.word	0x20010315
 8011884:	20016ea4 	.word	0x20016ea4
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	68db      	ldr	r3, [r3, #12]
 801188c:	617b      	str	r3, [r7, #20]
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d1d4      	bne.n	801183e <tcp_process+0x58e>
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2200      	movs	r2, #0
 8011898:	60da      	str	r2, [r3, #12]
 801189a:	4b77      	ldr	r3, [pc, #476]	; (8011a78 <tcp_process+0x7c8>)
 801189c:	2201      	movs	r2, #1
 801189e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	220a      	movs	r2, #10
 80118a4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80118a6:	4b75      	ldr	r3, [pc, #468]	; (8011a7c <tcp_process+0x7cc>)
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	60da      	str	r2, [r3, #12]
 80118ae:	4a73      	ldr	r2, [pc, #460]	; (8011a7c <tcp_process+0x7cc>)
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	6013      	str	r3, [r2, #0]
 80118b4:	f003 f960 	bl	8014b78 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80118b8:	e0d2      	b.n	8011a60 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	8b5b      	ldrh	r3, [r3, #26]
 80118be:	f043 0302 	orr.w	r3, r3, #2
 80118c2:	b29a      	uxth	r2, r3
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2208      	movs	r2, #8
 80118cc:	751a      	strb	r2, [r3, #20]
      break;
 80118ce:	e0c7      	b.n	8011a60 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80118d0:	4b6b      	ldr	r3, [pc, #428]	; (8011a80 <tcp_process+0x7d0>)
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	f003 0310 	and.w	r3, r3, #16
 80118d8:	2b00      	cmp	r3, #0
 80118da:	f000 80c1 	beq.w	8011a60 <tcp_process+0x7b0>
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80118e2:	4b68      	ldr	r3, [pc, #416]	; (8011a84 <tcp_process+0x7d4>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	f040 80ba 	bne.w	8011a60 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	f040 80b5 	bne.w	8011a60 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	2206      	movs	r2, #6
 80118fa:	751a      	strb	r2, [r3, #20]
      break;
 80118fc:	e0b0      	b.n	8011a60 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f000 f9ca 	bl	8011c98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011904:	4b60      	ldr	r3, [pc, #384]	; (8011a88 <tcp_process+0x7d8>)
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	f003 0320 	and.w	r3, r3, #32
 801190c:	2b00      	cmp	r3, #0
 801190e:	f000 80a9 	beq.w	8011a64 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	8b5b      	ldrh	r3, [r3, #26]
 8011916:	f043 0302 	orr.w	r3, r3, #2
 801191a:	b29a      	uxth	r2, r3
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f7fe fd3b 	bl	801039c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011926:	4b59      	ldr	r3, [pc, #356]	; (8011a8c <tcp_process+0x7dc>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	687a      	ldr	r2, [r7, #4]
 801192c:	429a      	cmp	r2, r3
 801192e:	d105      	bne.n	801193c <tcp_process+0x68c>
 8011930:	4b56      	ldr	r3, [pc, #344]	; (8011a8c <tcp_process+0x7dc>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	68db      	ldr	r3, [r3, #12]
 8011936:	4a55      	ldr	r2, [pc, #340]	; (8011a8c <tcp_process+0x7dc>)
 8011938:	6013      	str	r3, [r2, #0]
 801193a:	e013      	b.n	8011964 <tcp_process+0x6b4>
 801193c:	4b53      	ldr	r3, [pc, #332]	; (8011a8c <tcp_process+0x7dc>)
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	613b      	str	r3, [r7, #16]
 8011942:	e00c      	b.n	801195e <tcp_process+0x6ae>
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	68db      	ldr	r3, [r3, #12]
 8011948:	687a      	ldr	r2, [r7, #4]
 801194a:	429a      	cmp	r2, r3
 801194c:	d104      	bne.n	8011958 <tcp_process+0x6a8>
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	68da      	ldr	r2, [r3, #12]
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	60da      	str	r2, [r3, #12]
 8011956:	e005      	b.n	8011964 <tcp_process+0x6b4>
 8011958:	693b      	ldr	r3, [r7, #16]
 801195a:	68db      	ldr	r3, [r3, #12]
 801195c:	613b      	str	r3, [r7, #16]
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d1ef      	bne.n	8011944 <tcp_process+0x694>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2200      	movs	r2, #0
 8011968:	60da      	str	r2, [r3, #12]
 801196a:	4b43      	ldr	r3, [pc, #268]	; (8011a78 <tcp_process+0x7c8>)
 801196c:	2201      	movs	r2, #1
 801196e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	220a      	movs	r2, #10
 8011974:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011976:	4b41      	ldr	r3, [pc, #260]	; (8011a7c <tcp_process+0x7cc>)
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	60da      	str	r2, [r3, #12]
 801197e:	4a3f      	ldr	r2, [pc, #252]	; (8011a7c <tcp_process+0x7cc>)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	6013      	str	r3, [r2, #0]
 8011984:	f003 f8f8 	bl	8014b78 <tcp_timer_needed>
      }
      break;
 8011988:	e06c      	b.n	8011a64 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f000 f984 	bl	8011c98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011990:	4b3b      	ldr	r3, [pc, #236]	; (8011a80 <tcp_process+0x7d0>)
 8011992:	781b      	ldrb	r3, [r3, #0]
 8011994:	f003 0310 	and.w	r3, r3, #16
 8011998:	2b00      	cmp	r3, #0
 801199a:	d065      	beq.n	8011a68 <tcp_process+0x7b8>
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119a0:	4b38      	ldr	r3, [pc, #224]	; (8011a84 <tcp_process+0x7d4>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d15f      	bne.n	8011a68 <tcp_process+0x7b8>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d15b      	bne.n	8011a68 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f7fe fcf3 	bl	801039c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80119b6:	4b35      	ldr	r3, [pc, #212]	; (8011a8c <tcp_process+0x7dc>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	429a      	cmp	r2, r3
 80119be:	d105      	bne.n	80119cc <tcp_process+0x71c>
 80119c0:	4b32      	ldr	r3, [pc, #200]	; (8011a8c <tcp_process+0x7dc>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	68db      	ldr	r3, [r3, #12]
 80119c6:	4a31      	ldr	r2, [pc, #196]	; (8011a8c <tcp_process+0x7dc>)
 80119c8:	6013      	str	r3, [r2, #0]
 80119ca:	e013      	b.n	80119f4 <tcp_process+0x744>
 80119cc:	4b2f      	ldr	r3, [pc, #188]	; (8011a8c <tcp_process+0x7dc>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	60fb      	str	r3, [r7, #12]
 80119d2:	e00c      	b.n	80119ee <tcp_process+0x73e>
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	68db      	ldr	r3, [r3, #12]
 80119d8:	687a      	ldr	r2, [r7, #4]
 80119da:	429a      	cmp	r2, r3
 80119dc:	d104      	bne.n	80119e8 <tcp_process+0x738>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	68da      	ldr	r2, [r3, #12]
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	60da      	str	r2, [r3, #12]
 80119e6:	e005      	b.n	80119f4 <tcp_process+0x744>
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	68db      	ldr	r3, [r3, #12]
 80119ec:	60fb      	str	r3, [r7, #12]
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d1ef      	bne.n	80119d4 <tcp_process+0x724>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2200      	movs	r2, #0
 80119f8:	60da      	str	r2, [r3, #12]
 80119fa:	4b1f      	ldr	r3, [pc, #124]	; (8011a78 <tcp_process+0x7c8>)
 80119fc:	2201      	movs	r2, #1
 80119fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	220a      	movs	r2, #10
 8011a04:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011a06:	4b1d      	ldr	r3, [pc, #116]	; (8011a7c <tcp_process+0x7cc>)
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	60da      	str	r2, [r3, #12]
 8011a0e:	4a1b      	ldr	r2, [pc, #108]	; (8011a7c <tcp_process+0x7cc>)
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6013      	str	r3, [r2, #0]
 8011a14:	f003 f8b0 	bl	8014b78 <tcp_timer_needed>
      }
      break;
 8011a18:	e026      	b.n	8011a68 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f000 f93c 	bl	8011c98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011a20:	4b17      	ldr	r3, [pc, #92]	; (8011a80 <tcp_process+0x7d0>)
 8011a22:	781b      	ldrb	r3, [r3, #0]
 8011a24:	f003 0310 	and.w	r3, r3, #16
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d01f      	beq.n	8011a6c <tcp_process+0x7bc>
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a30:	4b14      	ldr	r3, [pc, #80]	; (8011a84 <tcp_process+0x7d4>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d119      	bne.n	8011a6c <tcp_process+0x7bc>
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d115      	bne.n	8011a6c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011a40:	4b11      	ldr	r3, [pc, #68]	; (8011a88 <tcp_process+0x7d8>)
 8011a42:	781b      	ldrb	r3, [r3, #0]
 8011a44:	f043 0310 	orr.w	r3, r3, #16
 8011a48:	b2da      	uxtb	r2, r3
 8011a4a:	4b0f      	ldr	r3, [pc, #60]	; (8011a88 <tcp_process+0x7d8>)
 8011a4c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011a4e:	e00d      	b.n	8011a6c <tcp_process+0x7bc>
    default:
      break;
 8011a50:	bf00      	nop
 8011a52:	e00c      	b.n	8011a6e <tcp_process+0x7be>
      break;
 8011a54:	bf00      	nop
 8011a56:	e00a      	b.n	8011a6e <tcp_process+0x7be>
      break;
 8011a58:	bf00      	nop
 8011a5a:	e008      	b.n	8011a6e <tcp_process+0x7be>
      break;
 8011a5c:	bf00      	nop
 8011a5e:	e006      	b.n	8011a6e <tcp_process+0x7be>
      break;
 8011a60:	bf00      	nop
 8011a62:	e004      	b.n	8011a6e <tcp_process+0x7be>
      break;
 8011a64:	bf00      	nop
 8011a66:	e002      	b.n	8011a6e <tcp_process+0x7be>
      break;
 8011a68:	bf00      	nop
 8011a6a:	e000      	b.n	8011a6e <tcp_process+0x7be>
      break;
 8011a6c:	bf00      	nop
  }
  return ERR_OK;
 8011a6e:	2300      	movs	r3, #0
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3724      	adds	r7, #36	; 0x24
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd90      	pop	{r4, r7, pc}
 8011a78:	20016ea0 	.word	0x20016ea0
 8011a7c:	20016eb4 	.word	0x20016eb4
 8011a80:	20010314 	.word	0x20010314
 8011a84:	2001030c 	.word	0x2001030c
 8011a88:	20010315 	.word	0x20010315
 8011a8c:	20016ea4 	.word	0x20016ea4

08011a90 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011a90:	b590      	push	{r4, r7, lr}
 8011a92:	b085      	sub	sp, #20
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d106      	bne.n	8011aae <tcp_oos_insert_segment+0x1e>
 8011aa0:	4b3b      	ldr	r3, [pc, #236]	; (8011b90 <tcp_oos_insert_segment+0x100>)
 8011aa2:	f240 421f 	movw	r2, #1055	; 0x41f
 8011aa6:	493b      	ldr	r1, [pc, #236]	; (8011b94 <tcp_oos_insert_segment+0x104>)
 8011aa8:	483b      	ldr	r0, [pc, #236]	; (8011b98 <tcp_oos_insert_segment+0x108>)
 8011aaa:	f008 fa45 	bl	8019f38 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	68db      	ldr	r3, [r3, #12]
 8011ab2:	899b      	ldrh	r3, [r3, #12]
 8011ab4:	b29b      	uxth	r3, r3
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7fb f8e2 	bl	800cc80 <lwip_htons>
 8011abc:	4603      	mov	r3, r0
 8011abe:	b2db      	uxtb	r3, r3
 8011ac0:	f003 0301 	and.w	r3, r3, #1
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d028      	beq.n	8011b1a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011ac8:	6838      	ldr	r0, [r7, #0]
 8011aca:	f7fe f97b 	bl	800fdc4 <tcp_segs_free>
    next = NULL;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	603b      	str	r3, [r7, #0]
 8011ad2:	e056      	b.n	8011b82 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	68db      	ldr	r3, [r3, #12]
 8011ad8:	899b      	ldrh	r3, [r3, #12]
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	4618      	mov	r0, r3
 8011ade:	f7fb f8cf 	bl	800cc80 <lwip_htons>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	f003 0301 	and.w	r3, r3, #1
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d00d      	beq.n	8011b0a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	68db      	ldr	r3, [r3, #12]
 8011af2:	899b      	ldrh	r3, [r3, #12]
 8011af4:	b29c      	uxth	r4, r3
 8011af6:	2001      	movs	r0, #1
 8011af8:	f7fb f8c2 	bl	800cc80 <lwip_htons>
 8011afc:	4603      	mov	r3, r0
 8011afe:	461a      	mov	r2, r3
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	4322      	orrs	r2, r4
 8011b06:	b292      	uxth	r2, r2
 8011b08:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011b14:	68f8      	ldr	r0, [r7, #12]
 8011b16:	f7fe f969 	bl	800fdec <tcp_seg_free>
    while (next &&
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d00e      	beq.n	8011b3e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	891b      	ldrh	r3, [r3, #8]
 8011b24:	461a      	mov	r2, r3
 8011b26:	4b1d      	ldr	r3, [pc, #116]	; (8011b9c <tcp_oos_insert_segment+0x10c>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	441a      	add	r2, r3
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	68db      	ldr	r3, [r3, #12]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	6839      	ldr	r1, [r7, #0]
 8011b34:	8909      	ldrh	r1, [r1, #8]
 8011b36:	440b      	add	r3, r1
 8011b38:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	daca      	bge.n	8011ad4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d01e      	beq.n	8011b82 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	891b      	ldrh	r3, [r3, #8]
 8011b48:	461a      	mov	r2, r3
 8011b4a:	4b14      	ldr	r3, [pc, #80]	; (8011b9c <tcp_oos_insert_segment+0x10c>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	441a      	add	r2, r3
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	68db      	ldr	r3, [r3, #12]
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	dd12      	ble.n	8011b82 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	68db      	ldr	r3, [r3, #12]
 8011b60:	685b      	ldr	r3, [r3, #4]
 8011b62:	b29a      	uxth	r2, r3
 8011b64:	4b0d      	ldr	r3, [pc, #52]	; (8011b9c <tcp_oos_insert_segment+0x10c>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	1ad3      	subs	r3, r2, r3
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	685a      	ldr	r2, [r3, #4]
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	891b      	ldrh	r3, [r3, #8]
 8011b7a:	4619      	mov	r1, r3
 8011b7c:	4610      	mov	r0, r2
 8011b7e:	f7fc fb17 	bl	800e1b0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	683a      	ldr	r2, [r7, #0]
 8011b86:	601a      	str	r2, [r3, #0]
}
 8011b88:	bf00      	nop
 8011b8a:	3714      	adds	r7, #20
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd90      	pop	{r4, r7, pc}
 8011b90:	0801d368 	.word	0x0801d368
 8011b94:	0801d628 	.word	0x0801d628
 8011b98:	0801d3b4 	.word	0x0801d3b4
 8011b9c:	20010308 	.word	0x20010308

08011ba0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011ba0:	b5b0      	push	{r4, r5, r7, lr}
 8011ba2:	b086      	sub	sp, #24
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	60b9      	str	r1, [r7, #8]
 8011baa:	607a      	str	r2, [r7, #4]
 8011bac:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011bae:	e03e      	b.n	8011c2e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	685b      	ldr	r3, [r3, #4]
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7fc fd0a 	bl	800e5d8 <pbuf_clen>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bce:	8a7a      	ldrh	r2, [r7, #18]
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d906      	bls.n	8011be2 <tcp_free_acked_segments+0x42>
 8011bd4:	4b2a      	ldr	r3, [pc, #168]	; (8011c80 <tcp_free_acked_segments+0xe0>)
 8011bd6:	f240 4257 	movw	r2, #1111	; 0x457
 8011bda:	492a      	ldr	r1, [pc, #168]	; (8011c84 <tcp_free_acked_segments+0xe4>)
 8011bdc:	482a      	ldr	r0, [pc, #168]	; (8011c88 <tcp_free_acked_segments+0xe8>)
 8011bde:	f008 f9ab 	bl	8019f38 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011be8:	8a7b      	ldrh	r3, [r7, #18]
 8011bea:	1ad3      	subs	r3, r2, r3
 8011bec:	b29a      	uxth	r2, r3
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	891a      	ldrh	r2, [r3, #8]
 8011bf8:	4b24      	ldr	r3, [pc, #144]	; (8011c8c <tcp_free_acked_segments+0xec>)
 8011bfa:	881b      	ldrh	r3, [r3, #0]
 8011bfc:	4413      	add	r3, r2
 8011bfe:	b29a      	uxth	r2, r3
 8011c00:	4b22      	ldr	r3, [pc, #136]	; (8011c8c <tcp_free_acked_segments+0xec>)
 8011c02:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011c04:	6978      	ldr	r0, [r7, #20]
 8011c06:	f7fe f8f1 	bl	800fdec <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d00c      	beq.n	8011c2e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d109      	bne.n	8011c2e <tcp_free_acked_segments+0x8e>
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d106      	bne.n	8011c2e <tcp_free_acked_segments+0x8e>
 8011c20:	4b17      	ldr	r3, [pc, #92]	; (8011c80 <tcp_free_acked_segments+0xe0>)
 8011c22:	f240 4262 	movw	r2, #1122	; 0x462
 8011c26:	491a      	ldr	r1, [pc, #104]	; (8011c90 <tcp_free_acked_segments+0xf0>)
 8011c28:	4817      	ldr	r0, [pc, #92]	; (8011c88 <tcp_free_acked_segments+0xe8>)
 8011c2a:	f008 f985 	bl	8019f38 <iprintf>
  while (seg_list != NULL &&
 8011c2e:	68bb      	ldr	r3, [r7, #8]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d020      	beq.n	8011c76 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f7fb f835 	bl	800ccaa <lwip_htonl>
 8011c40:	4604      	mov	r4, r0
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	891b      	ldrh	r3, [r3, #8]
 8011c46:	461d      	mov	r5, r3
 8011c48:	68bb      	ldr	r3, [r7, #8]
 8011c4a:	68db      	ldr	r3, [r3, #12]
 8011c4c:	899b      	ldrh	r3, [r3, #12]
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7fb f815 	bl	800cc80 <lwip_htons>
 8011c56:	4603      	mov	r3, r0
 8011c58:	b2db      	uxtb	r3, r3
 8011c5a:	f003 0303 	and.w	r3, r3, #3
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d001      	beq.n	8011c66 <tcp_free_acked_segments+0xc6>
 8011c62:	2301      	movs	r3, #1
 8011c64:	e000      	b.n	8011c68 <tcp_free_acked_segments+0xc8>
 8011c66:	2300      	movs	r3, #0
 8011c68:	442b      	add	r3, r5
 8011c6a:	18e2      	adds	r2, r4, r3
 8011c6c:	4b09      	ldr	r3, [pc, #36]	; (8011c94 <tcp_free_acked_segments+0xf4>)
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	dd9c      	ble.n	8011bb0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011c76:	68bb      	ldr	r3, [r7, #8]
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3718      	adds	r7, #24
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8011c80:	0801d368 	.word	0x0801d368
 8011c84:	0801d650 	.word	0x0801d650
 8011c88:	0801d3b4 	.word	0x0801d3b4
 8011c8c:	20010310 	.word	0x20010310
 8011c90:	0801d678 	.word	0x0801d678
 8011c94:	2001030c 	.word	0x2001030c

08011c98 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011c98:	b5b0      	push	{r4, r5, r7, lr}
 8011c9a:	b094      	sub	sp, #80	; 0x50
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d106      	bne.n	8011cb8 <tcp_receive+0x20>
 8011caa:	4ba6      	ldr	r3, [pc, #664]	; (8011f44 <tcp_receive+0x2ac>)
 8011cac:	f240 427b 	movw	r2, #1147	; 0x47b
 8011cb0:	49a5      	ldr	r1, [pc, #660]	; (8011f48 <tcp_receive+0x2b0>)
 8011cb2:	48a6      	ldr	r0, [pc, #664]	; (8011f4c <tcp_receive+0x2b4>)
 8011cb4:	f008 f940 	bl	8019f38 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	7d1b      	ldrb	r3, [r3, #20]
 8011cbc:	2b03      	cmp	r3, #3
 8011cbe:	d806      	bhi.n	8011cce <tcp_receive+0x36>
 8011cc0:	4ba0      	ldr	r3, [pc, #640]	; (8011f44 <tcp_receive+0x2ac>)
 8011cc2:	f240 427c 	movw	r2, #1148	; 0x47c
 8011cc6:	49a2      	ldr	r1, [pc, #648]	; (8011f50 <tcp_receive+0x2b8>)
 8011cc8:	48a0      	ldr	r0, [pc, #640]	; (8011f4c <tcp_receive+0x2b4>)
 8011cca:	f008 f935 	bl	8019f38 <iprintf>

  if (flags & TCP_ACK) {
 8011cce:	4ba1      	ldr	r3, [pc, #644]	; (8011f54 <tcp_receive+0x2bc>)
 8011cd0:	781b      	ldrb	r3, [r3, #0]
 8011cd2:	f003 0310 	and.w	r3, r3, #16
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	f000 8263 	beq.w	80121a2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ce2:	461a      	mov	r2, r3
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ce8:	4413      	add	r3, r2
 8011cea:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011cf0:	4b99      	ldr	r3, [pc, #612]	; (8011f58 <tcp_receive+0x2c0>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	1ad3      	subs	r3, r2, r3
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	db1b      	blt.n	8011d32 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011cfe:	4b96      	ldr	r3, [pc, #600]	; (8011f58 <tcp_receive+0x2c0>)
 8011d00:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d106      	bne.n	8011d14 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011d0a:	4b94      	ldr	r3, [pc, #592]	; (8011f5c <tcp_receive+0x2c4>)
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	1ad3      	subs	r3, r2, r3
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	db0e      	blt.n	8011d32 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011d18:	4b90      	ldr	r3, [pc, #576]	; (8011f5c <tcp_receive+0x2c4>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d125      	bne.n	8011d6c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011d20:	4b8f      	ldr	r3, [pc, #572]	; (8011f60 <tcp_receive+0x2c8>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	89db      	ldrh	r3, [r3, #14]
 8011d26:	b29a      	uxth	r2, r3
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d91c      	bls.n	8011d6c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011d32:	4b8b      	ldr	r3, [pc, #556]	; (8011f60 <tcp_receive+0x2c8>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	89db      	ldrh	r3, [r3, #14]
 8011d38:	b29a      	uxth	r2, r3
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d4c:	429a      	cmp	r2, r3
 8011d4e:	d205      	bcs.n	8011d5c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011d5c:	4b7e      	ldr	r3, [pc, #504]	; (8011f58 <tcp_receive+0x2c0>)
 8011d5e:	681a      	ldr	r2, [r3, #0]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011d64:	4b7d      	ldr	r3, [pc, #500]	; (8011f5c <tcp_receive+0x2c4>)
 8011d66:	681a      	ldr	r2, [r3, #0]
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011d6c:	4b7b      	ldr	r3, [pc, #492]	; (8011f5c <tcp_receive+0x2c4>)
 8011d6e:	681a      	ldr	r2, [r3, #0]
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d74:	1ad3      	subs	r3, r2, r3
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	dc58      	bgt.n	8011e2c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011d7a:	4b7a      	ldr	r3, [pc, #488]	; (8011f64 <tcp_receive+0x2cc>)
 8011d7c:	881b      	ldrh	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d14b      	bne.n	8011e1a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d86:	687a      	ldr	r2, [r7, #4]
 8011d88:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011d8c:	4413      	add	r3, r2
 8011d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d90:	429a      	cmp	r2, r3
 8011d92:	d142      	bne.n	8011e1a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	db3d      	blt.n	8011e1a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011da2:	4b6e      	ldr	r3, [pc, #440]	; (8011f5c <tcp_receive+0x2c4>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d137      	bne.n	8011e1a <tcp_receive+0x182>
              found_dupack = 1;
 8011daa:	2301      	movs	r3, #1
 8011dac:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011db4:	2bff      	cmp	r3, #255	; 0xff
 8011db6:	d007      	beq.n	8011dc8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011dbe:	3301      	adds	r3, #1
 8011dc0:	b2da      	uxtb	r2, r3
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011dce:	2b03      	cmp	r3, #3
 8011dd0:	d91b      	bls.n	8011e0a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ddc:	4413      	add	r3, r2
 8011dde:	b29a      	uxth	r2, r3
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d30a      	bcc.n	8011e00 <tcp_receive+0x168>
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011df4:	4413      	add	r3, r2
 8011df6:	b29a      	uxth	r2, r3
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011dfe:	e004      	b.n	8011e0a <tcp_receive+0x172>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011e06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011e10:	2b02      	cmp	r3, #2
 8011e12:	d902      	bls.n	8011e1a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f002 fb47 	bl	80144a8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	f040 8160 	bne.w	80120e2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2200      	movs	r2, #0
 8011e26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011e2a:	e15a      	b.n	80120e2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011e2c:	4b4b      	ldr	r3, [pc, #300]	; (8011f5c <tcp_receive+0x2c4>)
 8011e2e:	681a      	ldr	r2, [r3, #0]
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e34:	1ad3      	subs	r3, r2, r3
 8011e36:	3b01      	subs	r3, #1
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	f2c0 814d 	blt.w	80120d8 <tcp_receive+0x440>
 8011e3e:	4b47      	ldr	r3, [pc, #284]	; (8011f5c <tcp_receive+0x2c4>)
 8011e40:	681a      	ldr	r2, [r3, #0]
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e46:	1ad3      	subs	r3, r2, r3
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	f300 8145 	bgt.w	80120d8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	8b5b      	ldrh	r3, [r3, #26]
 8011e52:	f003 0304 	and.w	r3, r3, #4
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d010      	beq.n	8011e7c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	8b5b      	ldrh	r3, [r3, #26]
 8011e5e:	f023 0304 	bic.w	r3, r3, #4
 8011e62:	b29a      	uxth	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	2200      	movs	r2, #0
 8011e78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011e8a:	10db      	asrs	r3, r3, #3
 8011e8c:	b21b      	sxth	r3, r3
 8011e8e:	b29a      	uxth	r2, r3
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	4413      	add	r3, r2
 8011e9a:	b29b      	uxth	r3, r3
 8011e9c:	b21a      	sxth	r2, r3
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011ea4:	4b2d      	ldr	r3, [pc, #180]	; (8011f5c <tcp_receive+0x2c4>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	b29a      	uxth	r2, r3
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011eae:	b29b      	uxth	r3, r3
 8011eb0:	1ad3      	subs	r3, r2, r3
 8011eb2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011ebc:	4b27      	ldr	r3, [pc, #156]	; (8011f5c <tcp_receive+0x2c4>)
 8011ebe:	681a      	ldr	r2, [r3, #0]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	7d1b      	ldrb	r3, [r3, #20]
 8011ec8:	2b03      	cmp	r3, #3
 8011eca:	f240 8096 	bls.w	8011ffa <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d244      	bcs.n	8011f68 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	8b5b      	ldrh	r3, [r3, #26]
 8011ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d001      	beq.n	8011eee <tcp_receive+0x256>
 8011eea:	2301      	movs	r3, #1
 8011eec:	e000      	b.n	8011ef0 <tcp_receive+0x258>
 8011eee:	2302      	movs	r3, #2
 8011ef0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011ef4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011ef8:	b29a      	uxth	r2, r3
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011efe:	fb12 f303 	smulbb	r3, r2, r3
 8011f02:	b29b      	uxth	r3, r3
 8011f04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f06:	4293      	cmp	r3, r2
 8011f08:	bf28      	it	cs
 8011f0a:	4613      	movcs	r3, r2
 8011f0c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011f16:	4413      	add	r3, r2
 8011f18:	b29a      	uxth	r2, r3
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011f20:	429a      	cmp	r2, r3
 8011f22:	d309      	bcc.n	8011f38 <tcp_receive+0x2a0>
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011f2c:	4413      	add	r3, r2
 8011f2e:	b29a      	uxth	r2, r3
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011f36:	e060      	b.n	8011ffa <tcp_receive+0x362>
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011f42:	e05a      	b.n	8011ffa <tcp_receive+0x362>
 8011f44:	0801d368 	.word	0x0801d368
 8011f48:	0801d698 	.word	0x0801d698
 8011f4c:	0801d3b4 	.word	0x0801d3b4
 8011f50:	0801d6b4 	.word	0x0801d6b4
 8011f54:	20010314 	.word	0x20010314
 8011f58:	20010308 	.word	0x20010308
 8011f5c:	2001030c 	.word	0x2001030c
 8011f60:	200102f8 	.word	0x200102f8
 8011f64:	20010312 	.word	0x20010312
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011f6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011f70:	4413      	add	r3, r2
 8011f72:	b29a      	uxth	r2, r3
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	d309      	bcc.n	8011f92 <tcp_receive+0x2fa>
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011f84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011f86:	4413      	add	r3, r2
 8011f88:	b29a      	uxth	r2, r3
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011f90:	e004      	b.n	8011f9c <tcp_receive+0x304>
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011fa8:	429a      	cmp	r2, r3
 8011faa:	d326      	bcc.n	8011ffa <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011fb8:	1ad3      	subs	r3, r2, r3
 8011fba:	b29a      	uxth	r2, r3
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fcc:	4413      	add	r3, r2
 8011fce:	b29a      	uxth	r2, r3
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d30a      	bcc.n	8011ff0 <tcp_receive+0x358>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fe4:	4413      	add	r3, r2
 8011fe6:	b29a      	uxth	r2, r3
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011fee:	e004      	b.n	8011ffa <tcp_receive+0x362>
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ff6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012002:	4a98      	ldr	r2, [pc, #608]	; (8012264 <tcp_receive+0x5cc>)
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f7ff fdcb 	bl	8011ba0 <tcp_free_acked_segments>
 801200a:	4602      	mov	r2, r0
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012018:	4a93      	ldr	r2, [pc, #588]	; (8012268 <tcp_receive+0x5d0>)
 801201a:	6878      	ldr	r0, [r7, #4]
 801201c:	f7ff fdc0 	bl	8011ba0 <tcp_free_acked_segments>
 8012020:	4602      	mov	r2, r0
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801202a:	2b00      	cmp	r3, #0
 801202c:	d104      	bne.n	8012038 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012034:	861a      	strh	r2, [r3, #48]	; 0x30
 8012036:	e002      	b.n	801203e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2200      	movs	r2, #0
 801203c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2200      	movs	r2, #0
 8012042:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012048:	2b00      	cmp	r3, #0
 801204a:	d103      	bne.n	8012054 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2200      	movs	r2, #0
 8012050:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801205a:	4b84      	ldr	r3, [pc, #528]	; (801226c <tcp_receive+0x5d4>)
 801205c:	881b      	ldrh	r3, [r3, #0]
 801205e:	4413      	add	r3, r2
 8012060:	b29a      	uxth	r2, r3
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	8b5b      	ldrh	r3, [r3, #26]
 801206c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012070:	2b00      	cmp	r3, #0
 8012072:	d035      	beq.n	80120e0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012078:	2b00      	cmp	r3, #0
 801207a:	d118      	bne.n	80120ae <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012080:	2b00      	cmp	r3, #0
 8012082:	d00c      	beq.n	801209e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801208c:	68db      	ldr	r3, [r3, #12]
 801208e:	685b      	ldr	r3, [r3, #4]
 8012090:	4618      	mov	r0, r3
 8012092:	f7fa fe0a 	bl	800ccaa <lwip_htonl>
 8012096:	4603      	mov	r3, r0
 8012098:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801209a:	2b00      	cmp	r3, #0
 801209c:	dc20      	bgt.n	80120e0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	8b5b      	ldrh	r3, [r3, #26]
 80120a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80120a6:	b29a      	uxth	r2, r3
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80120ac:	e018      	b.n	80120e0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120b6:	68db      	ldr	r3, [r3, #12]
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	4618      	mov	r0, r3
 80120bc:	f7fa fdf5 	bl	800ccaa <lwip_htonl>
 80120c0:	4603      	mov	r3, r0
 80120c2:	1ae3      	subs	r3, r4, r3
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	dc0b      	bgt.n	80120e0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	8b5b      	ldrh	r3, [r3, #26]
 80120cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80120d0:	b29a      	uxth	r2, r3
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80120d6:	e003      	b.n	80120e0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80120d8:	6878      	ldr	r0, [r7, #4]
 80120da:	f002 fbdd 	bl	8014898 <tcp_send_empty_ack>
 80120de:	e000      	b.n	80120e2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80120e0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d05b      	beq.n	80121a2 <tcp_receive+0x50a>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80120ee:	4b60      	ldr	r3, [pc, #384]	; (8012270 <tcp_receive+0x5d8>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	1ad3      	subs	r3, r2, r3
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	da54      	bge.n	80121a2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80120f8:	4b5e      	ldr	r3, [pc, #376]	; (8012274 <tcp_receive+0x5dc>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	b29a      	uxth	r2, r3
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012102:	b29b      	uxth	r3, r3
 8012104:	1ad3      	subs	r3, r2, r3
 8012106:	b29b      	uxth	r3, r3
 8012108:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801210c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012116:	10db      	asrs	r3, r3, #3
 8012118:	b21b      	sxth	r3, r3
 801211a:	b29b      	uxth	r3, r3
 801211c:	1ad3      	subs	r3, r2, r3
 801211e:	b29b      	uxth	r3, r3
 8012120:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801212a:	b29a      	uxth	r2, r3
 801212c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012130:	4413      	add	r3, r2
 8012132:	b29b      	uxth	r3, r3
 8012134:	b21a      	sxth	r2, r3
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801213a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801213e:	2b00      	cmp	r3, #0
 8012140:	da05      	bge.n	801214e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8012142:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012146:	425b      	negs	r3, r3
 8012148:	b29b      	uxth	r3, r3
 801214a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801214e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012158:	109b      	asrs	r3, r3, #2
 801215a:	b21b      	sxth	r3, r3
 801215c:	b29b      	uxth	r3, r3
 801215e:	1ad3      	subs	r3, r2, r3
 8012160:	b29b      	uxth	r3, r3
 8012162:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801216c:	b29a      	uxth	r2, r3
 801216e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012172:	4413      	add	r3, r2
 8012174:	b29b      	uxth	r3, r3
 8012176:	b21a      	sxth	r2, r3
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012182:	10db      	asrs	r3, r3, #3
 8012184:	b21b      	sxth	r3, r3
 8012186:	b29a      	uxth	r2, r3
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801218e:	b29b      	uxth	r3, r3
 8012190:	4413      	add	r3, r2
 8012192:	b29b      	uxth	r3, r3
 8012194:	b21a      	sxth	r2, r3
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2200      	movs	r2, #0
 80121a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80121a2:	4b35      	ldr	r3, [pc, #212]	; (8012278 <tcp_receive+0x5e0>)
 80121a4:	881b      	ldrh	r3, [r3, #0]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	f000 84e1 	beq.w	8012b6e <tcp_receive+0xed6>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	7d1b      	ldrb	r3, [r3, #20]
 80121b0:	2b06      	cmp	r3, #6
 80121b2:	f200 84dc 	bhi.w	8012b6e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121ba:	4b30      	ldr	r3, [pc, #192]	; (801227c <tcp_receive+0x5e4>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	1ad3      	subs	r3, r2, r3
 80121c0:	3b01      	subs	r3, #1
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	f2c0 808e 	blt.w	80122e4 <tcp_receive+0x64c>
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121cc:	4b2a      	ldr	r3, [pc, #168]	; (8012278 <tcp_receive+0x5e0>)
 80121ce:	881b      	ldrh	r3, [r3, #0]
 80121d0:	4619      	mov	r1, r3
 80121d2:	4b2a      	ldr	r3, [pc, #168]	; (801227c <tcp_receive+0x5e4>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	440b      	add	r3, r1
 80121d8:	1ad3      	subs	r3, r2, r3
 80121da:	3301      	adds	r3, #1
 80121dc:	2b00      	cmp	r3, #0
 80121de:	f300 8081 	bgt.w	80122e4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80121e2:	4b27      	ldr	r3, [pc, #156]	; (8012280 <tcp_receive+0x5e8>)
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80121ec:	4b23      	ldr	r3, [pc, #140]	; (801227c <tcp_receive+0x5e4>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	1ad3      	subs	r3, r2, r3
 80121f2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80121f4:	4b22      	ldr	r3, [pc, #136]	; (8012280 <tcp_receive+0x5e8>)
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d106      	bne.n	801220a <tcp_receive+0x572>
 80121fc:	4b21      	ldr	r3, [pc, #132]	; (8012284 <tcp_receive+0x5ec>)
 80121fe:	f240 5294 	movw	r2, #1428	; 0x594
 8012202:	4921      	ldr	r1, [pc, #132]	; (8012288 <tcp_receive+0x5f0>)
 8012204:	4821      	ldr	r0, [pc, #132]	; (801228c <tcp_receive+0x5f4>)
 8012206:	f007 fe97 	bl	8019f38 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012210:	4293      	cmp	r3, r2
 8012212:	d906      	bls.n	8012222 <tcp_receive+0x58a>
 8012214:	4b1b      	ldr	r3, [pc, #108]	; (8012284 <tcp_receive+0x5ec>)
 8012216:	f240 5295 	movw	r2, #1429	; 0x595
 801221a:	491d      	ldr	r1, [pc, #116]	; (8012290 <tcp_receive+0x5f8>)
 801221c:	481b      	ldr	r0, [pc, #108]	; (801228c <tcp_receive+0x5f4>)
 801221e:	f007 fe8b 	bl	8019f38 <iprintf>
      off = (u16_t)off32;
 8012222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012224:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012228:	4b15      	ldr	r3, [pc, #84]	; (8012280 <tcp_receive+0x5e8>)
 801222a:	685b      	ldr	r3, [r3, #4]
 801222c:	891b      	ldrh	r3, [r3, #8]
 801222e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012232:	429a      	cmp	r2, r3
 8012234:	d906      	bls.n	8012244 <tcp_receive+0x5ac>
 8012236:	4b13      	ldr	r3, [pc, #76]	; (8012284 <tcp_receive+0x5ec>)
 8012238:	f240 5297 	movw	r2, #1431	; 0x597
 801223c:	4915      	ldr	r1, [pc, #84]	; (8012294 <tcp_receive+0x5fc>)
 801223e:	4813      	ldr	r0, [pc, #76]	; (801228c <tcp_receive+0x5f4>)
 8012240:	f007 fe7a 	bl	8019f38 <iprintf>
      inseg.len -= off;
 8012244:	4b0e      	ldr	r3, [pc, #56]	; (8012280 <tcp_receive+0x5e8>)
 8012246:	891a      	ldrh	r2, [r3, #8]
 8012248:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801224c:	1ad3      	subs	r3, r2, r3
 801224e:	b29a      	uxth	r2, r3
 8012250:	4b0b      	ldr	r3, [pc, #44]	; (8012280 <tcp_receive+0x5e8>)
 8012252:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012254:	4b0a      	ldr	r3, [pc, #40]	; (8012280 <tcp_receive+0x5e8>)
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	891a      	ldrh	r2, [r3, #8]
 801225a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801225e:	1ad3      	subs	r3, r2, r3
 8012260:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012262:	e029      	b.n	80122b8 <tcp_receive+0x620>
 8012264:	0801d6d0 	.word	0x0801d6d0
 8012268:	0801d6d8 	.word	0x0801d6d8
 801226c:	20010310 	.word	0x20010310
 8012270:	2001030c 	.word	0x2001030c
 8012274:	20016ea8 	.word	0x20016ea8
 8012278:	20010312 	.word	0x20010312
 801227c:	20010308 	.word	0x20010308
 8012280:	200102e8 	.word	0x200102e8
 8012284:	0801d368 	.word	0x0801d368
 8012288:	0801d6e0 	.word	0x0801d6e0
 801228c:	0801d3b4 	.word	0x0801d3b4
 8012290:	0801d6f0 	.word	0x0801d6f0
 8012294:	0801d700 	.word	0x0801d700
        off -= p->len;
 8012298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801229a:	895b      	ldrh	r3, [r3, #10]
 801229c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122a0:	1ad3      	subs	r3, r2, r3
 80122a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80122a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80122aa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80122ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122ae:	2200      	movs	r2, #0
 80122b0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80122b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80122b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122ba:	895b      	ldrh	r3, [r3, #10]
 80122bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122c0:	429a      	cmp	r2, r3
 80122c2:	d8e9      	bhi.n	8012298 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80122c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122c8:	4619      	mov	r1, r3
 80122ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80122cc:	f7fc f870 	bl	800e3b0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122d4:	4a91      	ldr	r2, [pc, #580]	; (801251c <tcp_receive+0x884>)
 80122d6:	6013      	str	r3, [r2, #0]
 80122d8:	4b91      	ldr	r3, [pc, #580]	; (8012520 <tcp_receive+0x888>)
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	4a8f      	ldr	r2, [pc, #572]	; (801251c <tcp_receive+0x884>)
 80122de:	6812      	ldr	r2, [r2, #0]
 80122e0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80122e2:	e00d      	b.n	8012300 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80122e4:	4b8d      	ldr	r3, [pc, #564]	; (801251c <tcp_receive+0x884>)
 80122e6:	681a      	ldr	r2, [r3, #0]
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ec:	1ad3      	subs	r3, r2, r3
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	da06      	bge.n	8012300 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	8b5b      	ldrh	r3, [r3, #26]
 80122f6:	f043 0302 	orr.w	r3, r3, #2
 80122fa:	b29a      	uxth	r2, r3
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012300:	4b86      	ldr	r3, [pc, #536]	; (801251c <tcp_receive+0x884>)
 8012302:	681a      	ldr	r2, [r3, #0]
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012308:	1ad3      	subs	r3, r2, r3
 801230a:	2b00      	cmp	r3, #0
 801230c:	f2c0 842a 	blt.w	8012b64 <tcp_receive+0xecc>
 8012310:	4b82      	ldr	r3, [pc, #520]	; (801251c <tcp_receive+0x884>)
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012318:	6879      	ldr	r1, [r7, #4]
 801231a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801231c:	440b      	add	r3, r1
 801231e:	1ad3      	subs	r3, r2, r3
 8012320:	3301      	adds	r3, #1
 8012322:	2b00      	cmp	r3, #0
 8012324:	f300 841e 	bgt.w	8012b64 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801232c:	4b7b      	ldr	r3, [pc, #492]	; (801251c <tcp_receive+0x884>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	429a      	cmp	r2, r3
 8012332:	f040 829a 	bne.w	801286a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012336:	4b7a      	ldr	r3, [pc, #488]	; (8012520 <tcp_receive+0x888>)
 8012338:	891c      	ldrh	r4, [r3, #8]
 801233a:	4b79      	ldr	r3, [pc, #484]	; (8012520 <tcp_receive+0x888>)
 801233c:	68db      	ldr	r3, [r3, #12]
 801233e:	899b      	ldrh	r3, [r3, #12]
 8012340:	b29b      	uxth	r3, r3
 8012342:	4618      	mov	r0, r3
 8012344:	f7fa fc9c 	bl	800cc80 <lwip_htons>
 8012348:	4603      	mov	r3, r0
 801234a:	b2db      	uxtb	r3, r3
 801234c:	f003 0303 	and.w	r3, r3, #3
 8012350:	2b00      	cmp	r3, #0
 8012352:	d001      	beq.n	8012358 <tcp_receive+0x6c0>
 8012354:	2301      	movs	r3, #1
 8012356:	e000      	b.n	801235a <tcp_receive+0x6c2>
 8012358:	2300      	movs	r3, #0
 801235a:	4423      	add	r3, r4
 801235c:	b29a      	uxth	r2, r3
 801235e:	4b71      	ldr	r3, [pc, #452]	; (8012524 <tcp_receive+0x88c>)
 8012360:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012366:	4b6f      	ldr	r3, [pc, #444]	; (8012524 <tcp_receive+0x88c>)
 8012368:	881b      	ldrh	r3, [r3, #0]
 801236a:	429a      	cmp	r2, r3
 801236c:	d275      	bcs.n	801245a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801236e:	4b6c      	ldr	r3, [pc, #432]	; (8012520 <tcp_receive+0x888>)
 8012370:	68db      	ldr	r3, [r3, #12]
 8012372:	899b      	ldrh	r3, [r3, #12]
 8012374:	b29b      	uxth	r3, r3
 8012376:	4618      	mov	r0, r3
 8012378:	f7fa fc82 	bl	800cc80 <lwip_htons>
 801237c:	4603      	mov	r3, r0
 801237e:	b2db      	uxtb	r3, r3
 8012380:	f003 0301 	and.w	r3, r3, #1
 8012384:	2b00      	cmp	r3, #0
 8012386:	d01f      	beq.n	80123c8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012388:	4b65      	ldr	r3, [pc, #404]	; (8012520 <tcp_receive+0x888>)
 801238a:	68db      	ldr	r3, [r3, #12]
 801238c:	899b      	ldrh	r3, [r3, #12]
 801238e:	b29b      	uxth	r3, r3
 8012390:	b21b      	sxth	r3, r3
 8012392:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012396:	b21c      	sxth	r4, r3
 8012398:	4b61      	ldr	r3, [pc, #388]	; (8012520 <tcp_receive+0x888>)
 801239a:	68db      	ldr	r3, [r3, #12]
 801239c:	899b      	ldrh	r3, [r3, #12]
 801239e:	b29b      	uxth	r3, r3
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7fa fc6d 	bl	800cc80 <lwip_htons>
 80123a6:	4603      	mov	r3, r0
 80123a8:	b2db      	uxtb	r3, r3
 80123aa:	b29b      	uxth	r3, r3
 80123ac:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80123b0:	b29b      	uxth	r3, r3
 80123b2:	4618      	mov	r0, r3
 80123b4:	f7fa fc64 	bl	800cc80 <lwip_htons>
 80123b8:	4603      	mov	r3, r0
 80123ba:	b21b      	sxth	r3, r3
 80123bc:	4323      	orrs	r3, r4
 80123be:	b21a      	sxth	r2, r3
 80123c0:	4b57      	ldr	r3, [pc, #348]	; (8012520 <tcp_receive+0x888>)
 80123c2:	68db      	ldr	r3, [r3, #12]
 80123c4:	b292      	uxth	r2, r2
 80123c6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80123cc:	4b54      	ldr	r3, [pc, #336]	; (8012520 <tcp_receive+0x888>)
 80123ce:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80123d0:	4b53      	ldr	r3, [pc, #332]	; (8012520 <tcp_receive+0x888>)
 80123d2:	68db      	ldr	r3, [r3, #12]
 80123d4:	899b      	ldrh	r3, [r3, #12]
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	4618      	mov	r0, r3
 80123da:	f7fa fc51 	bl	800cc80 <lwip_htons>
 80123de:	4603      	mov	r3, r0
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	f003 0302 	and.w	r3, r3, #2
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d005      	beq.n	80123f6 <tcp_receive+0x75e>
            inseg.len -= 1;
 80123ea:	4b4d      	ldr	r3, [pc, #308]	; (8012520 <tcp_receive+0x888>)
 80123ec:	891b      	ldrh	r3, [r3, #8]
 80123ee:	3b01      	subs	r3, #1
 80123f0:	b29a      	uxth	r2, r3
 80123f2:	4b4b      	ldr	r3, [pc, #300]	; (8012520 <tcp_receive+0x888>)
 80123f4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80123f6:	4b4a      	ldr	r3, [pc, #296]	; (8012520 <tcp_receive+0x888>)
 80123f8:	685a      	ldr	r2, [r3, #4]
 80123fa:	4b49      	ldr	r3, [pc, #292]	; (8012520 <tcp_receive+0x888>)
 80123fc:	891b      	ldrh	r3, [r3, #8]
 80123fe:	4619      	mov	r1, r3
 8012400:	4610      	mov	r0, r2
 8012402:	f7fb fed5 	bl	800e1b0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012406:	4b46      	ldr	r3, [pc, #280]	; (8012520 <tcp_receive+0x888>)
 8012408:	891c      	ldrh	r4, [r3, #8]
 801240a:	4b45      	ldr	r3, [pc, #276]	; (8012520 <tcp_receive+0x888>)
 801240c:	68db      	ldr	r3, [r3, #12]
 801240e:	899b      	ldrh	r3, [r3, #12]
 8012410:	b29b      	uxth	r3, r3
 8012412:	4618      	mov	r0, r3
 8012414:	f7fa fc34 	bl	800cc80 <lwip_htons>
 8012418:	4603      	mov	r3, r0
 801241a:	b2db      	uxtb	r3, r3
 801241c:	f003 0303 	and.w	r3, r3, #3
 8012420:	2b00      	cmp	r3, #0
 8012422:	d001      	beq.n	8012428 <tcp_receive+0x790>
 8012424:	2301      	movs	r3, #1
 8012426:	e000      	b.n	801242a <tcp_receive+0x792>
 8012428:	2300      	movs	r3, #0
 801242a:	4423      	add	r3, r4
 801242c:	b29a      	uxth	r2, r3
 801242e:	4b3d      	ldr	r3, [pc, #244]	; (8012524 <tcp_receive+0x88c>)
 8012430:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012432:	4b3c      	ldr	r3, [pc, #240]	; (8012524 <tcp_receive+0x88c>)
 8012434:	881b      	ldrh	r3, [r3, #0]
 8012436:	461a      	mov	r2, r3
 8012438:	4b38      	ldr	r3, [pc, #224]	; (801251c <tcp_receive+0x884>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	441a      	add	r2, r3
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012442:	6879      	ldr	r1, [r7, #4]
 8012444:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012446:	440b      	add	r3, r1
 8012448:	429a      	cmp	r2, r3
 801244a:	d006      	beq.n	801245a <tcp_receive+0x7c2>
 801244c:	4b36      	ldr	r3, [pc, #216]	; (8012528 <tcp_receive+0x890>)
 801244e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8012452:	4936      	ldr	r1, [pc, #216]	; (801252c <tcp_receive+0x894>)
 8012454:	4836      	ldr	r0, [pc, #216]	; (8012530 <tcp_receive+0x898>)
 8012456:	f007 fd6f 	bl	8019f38 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801245e:	2b00      	cmp	r3, #0
 8012460:	f000 80e7 	beq.w	8012632 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012464:	4b2e      	ldr	r3, [pc, #184]	; (8012520 <tcp_receive+0x888>)
 8012466:	68db      	ldr	r3, [r3, #12]
 8012468:	899b      	ldrh	r3, [r3, #12]
 801246a:	b29b      	uxth	r3, r3
 801246c:	4618      	mov	r0, r3
 801246e:	f7fa fc07 	bl	800cc80 <lwip_htons>
 8012472:	4603      	mov	r3, r0
 8012474:	b2db      	uxtb	r3, r3
 8012476:	f003 0301 	and.w	r3, r3, #1
 801247a:	2b00      	cmp	r3, #0
 801247c:	d010      	beq.n	80124a0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801247e:	e00a      	b.n	8012496 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012484:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801248a:	681a      	ldr	r2, [r3, #0]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012490:	68f8      	ldr	r0, [r7, #12]
 8012492:	f7fd fcab 	bl	800fdec <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801249a:	2b00      	cmp	r3, #0
 801249c:	d1f0      	bne.n	8012480 <tcp_receive+0x7e8>
 801249e:	e0c8      	b.n	8012632 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124a4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80124a6:	e052      	b.n	801254e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80124a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80124aa:	68db      	ldr	r3, [r3, #12]
 80124ac:	899b      	ldrh	r3, [r3, #12]
 80124ae:	b29b      	uxth	r3, r3
 80124b0:	4618      	mov	r0, r3
 80124b2:	f7fa fbe5 	bl	800cc80 <lwip_htons>
 80124b6:	4603      	mov	r3, r0
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	f003 0301 	and.w	r3, r3, #1
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d03d      	beq.n	801253e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80124c2:	4b17      	ldr	r3, [pc, #92]	; (8012520 <tcp_receive+0x888>)
 80124c4:	68db      	ldr	r3, [r3, #12]
 80124c6:	899b      	ldrh	r3, [r3, #12]
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7fa fbd8 	bl	800cc80 <lwip_htons>
 80124d0:	4603      	mov	r3, r0
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d130      	bne.n	801253e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80124dc:	4b10      	ldr	r3, [pc, #64]	; (8012520 <tcp_receive+0x888>)
 80124de:	68db      	ldr	r3, [r3, #12]
 80124e0:	899b      	ldrh	r3, [r3, #12]
 80124e2:	b29c      	uxth	r4, r3
 80124e4:	2001      	movs	r0, #1
 80124e6:	f7fa fbcb 	bl	800cc80 <lwip_htons>
 80124ea:	4603      	mov	r3, r0
 80124ec:	461a      	mov	r2, r3
 80124ee:	4b0c      	ldr	r3, [pc, #48]	; (8012520 <tcp_receive+0x888>)
 80124f0:	68db      	ldr	r3, [r3, #12]
 80124f2:	4322      	orrs	r2, r4
 80124f4:	b292      	uxth	r2, r2
 80124f6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80124f8:	4b09      	ldr	r3, [pc, #36]	; (8012520 <tcp_receive+0x888>)
 80124fa:	891c      	ldrh	r4, [r3, #8]
 80124fc:	4b08      	ldr	r3, [pc, #32]	; (8012520 <tcp_receive+0x888>)
 80124fe:	68db      	ldr	r3, [r3, #12]
 8012500:	899b      	ldrh	r3, [r3, #12]
 8012502:	b29b      	uxth	r3, r3
 8012504:	4618      	mov	r0, r3
 8012506:	f7fa fbbb 	bl	800cc80 <lwip_htons>
 801250a:	4603      	mov	r3, r0
 801250c:	b2db      	uxtb	r3, r3
 801250e:	f003 0303 	and.w	r3, r3, #3
 8012512:	2b00      	cmp	r3, #0
 8012514:	d00e      	beq.n	8012534 <tcp_receive+0x89c>
 8012516:	2301      	movs	r3, #1
 8012518:	e00d      	b.n	8012536 <tcp_receive+0x89e>
 801251a:	bf00      	nop
 801251c:	20010308 	.word	0x20010308
 8012520:	200102e8 	.word	0x200102e8
 8012524:	20010312 	.word	0x20010312
 8012528:	0801d368 	.word	0x0801d368
 801252c:	0801d710 	.word	0x0801d710
 8012530:	0801d3b4 	.word	0x0801d3b4
 8012534:	2300      	movs	r3, #0
 8012536:	4423      	add	r3, r4
 8012538:	b29a      	uxth	r2, r3
 801253a:	4b98      	ldr	r3, [pc, #608]	; (801279c <tcp_receive+0xb04>)
 801253c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801253e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012540:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012548:	6938      	ldr	r0, [r7, #16]
 801254a:	f7fd fc4f 	bl	800fdec <tcp_seg_free>
            while (next &&
 801254e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012550:	2b00      	cmp	r3, #0
 8012552:	d00e      	beq.n	8012572 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012554:	4b91      	ldr	r3, [pc, #580]	; (801279c <tcp_receive+0xb04>)
 8012556:	881b      	ldrh	r3, [r3, #0]
 8012558:	461a      	mov	r2, r3
 801255a:	4b91      	ldr	r3, [pc, #580]	; (80127a0 <tcp_receive+0xb08>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	441a      	add	r2, r3
 8012560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012562:	68db      	ldr	r3, [r3, #12]
 8012564:	685b      	ldr	r3, [r3, #4]
 8012566:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012568:	8909      	ldrh	r1, [r1, #8]
 801256a:	440b      	add	r3, r1
 801256c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801256e:	2b00      	cmp	r3, #0
 8012570:	da9a      	bge.n	80124a8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012574:	2b00      	cmp	r3, #0
 8012576:	d059      	beq.n	801262c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012578:	4b88      	ldr	r3, [pc, #544]	; (801279c <tcp_receive+0xb04>)
 801257a:	881b      	ldrh	r3, [r3, #0]
 801257c:	461a      	mov	r2, r3
 801257e:	4b88      	ldr	r3, [pc, #544]	; (80127a0 <tcp_receive+0xb08>)
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	441a      	add	r2, r3
 8012584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012586:	68db      	ldr	r3, [r3, #12]
 8012588:	685b      	ldr	r3, [r3, #4]
 801258a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801258c:	2b00      	cmp	r3, #0
 801258e:	dd4d      	ble.n	801262c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012592:	68db      	ldr	r3, [r3, #12]
 8012594:	685b      	ldr	r3, [r3, #4]
 8012596:	b29a      	uxth	r2, r3
 8012598:	4b81      	ldr	r3, [pc, #516]	; (80127a0 <tcp_receive+0xb08>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	b29b      	uxth	r3, r3
 801259e:	1ad3      	subs	r3, r2, r3
 80125a0:	b29a      	uxth	r2, r3
 80125a2:	4b80      	ldr	r3, [pc, #512]	; (80127a4 <tcp_receive+0xb0c>)
 80125a4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80125a6:	4b7f      	ldr	r3, [pc, #508]	; (80127a4 <tcp_receive+0xb0c>)
 80125a8:	68db      	ldr	r3, [r3, #12]
 80125aa:	899b      	ldrh	r3, [r3, #12]
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	4618      	mov	r0, r3
 80125b0:	f7fa fb66 	bl	800cc80 <lwip_htons>
 80125b4:	4603      	mov	r3, r0
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	f003 0302 	and.w	r3, r3, #2
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d005      	beq.n	80125cc <tcp_receive+0x934>
                inseg.len -= 1;
 80125c0:	4b78      	ldr	r3, [pc, #480]	; (80127a4 <tcp_receive+0xb0c>)
 80125c2:	891b      	ldrh	r3, [r3, #8]
 80125c4:	3b01      	subs	r3, #1
 80125c6:	b29a      	uxth	r2, r3
 80125c8:	4b76      	ldr	r3, [pc, #472]	; (80127a4 <tcp_receive+0xb0c>)
 80125ca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80125cc:	4b75      	ldr	r3, [pc, #468]	; (80127a4 <tcp_receive+0xb0c>)
 80125ce:	685a      	ldr	r2, [r3, #4]
 80125d0:	4b74      	ldr	r3, [pc, #464]	; (80127a4 <tcp_receive+0xb0c>)
 80125d2:	891b      	ldrh	r3, [r3, #8]
 80125d4:	4619      	mov	r1, r3
 80125d6:	4610      	mov	r0, r2
 80125d8:	f7fb fdea 	bl	800e1b0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80125dc:	4b71      	ldr	r3, [pc, #452]	; (80127a4 <tcp_receive+0xb0c>)
 80125de:	891c      	ldrh	r4, [r3, #8]
 80125e0:	4b70      	ldr	r3, [pc, #448]	; (80127a4 <tcp_receive+0xb0c>)
 80125e2:	68db      	ldr	r3, [r3, #12]
 80125e4:	899b      	ldrh	r3, [r3, #12]
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7fa fb49 	bl	800cc80 <lwip_htons>
 80125ee:	4603      	mov	r3, r0
 80125f0:	b2db      	uxtb	r3, r3
 80125f2:	f003 0303 	and.w	r3, r3, #3
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d001      	beq.n	80125fe <tcp_receive+0x966>
 80125fa:	2301      	movs	r3, #1
 80125fc:	e000      	b.n	8012600 <tcp_receive+0x968>
 80125fe:	2300      	movs	r3, #0
 8012600:	4423      	add	r3, r4
 8012602:	b29a      	uxth	r2, r3
 8012604:	4b65      	ldr	r3, [pc, #404]	; (801279c <tcp_receive+0xb04>)
 8012606:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012608:	4b64      	ldr	r3, [pc, #400]	; (801279c <tcp_receive+0xb04>)
 801260a:	881b      	ldrh	r3, [r3, #0]
 801260c:	461a      	mov	r2, r3
 801260e:	4b64      	ldr	r3, [pc, #400]	; (80127a0 <tcp_receive+0xb08>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	441a      	add	r2, r3
 8012614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012616:	68db      	ldr	r3, [r3, #12]
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	429a      	cmp	r2, r3
 801261c:	d006      	beq.n	801262c <tcp_receive+0x994>
 801261e:	4b62      	ldr	r3, [pc, #392]	; (80127a8 <tcp_receive+0xb10>)
 8012620:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8012624:	4961      	ldr	r1, [pc, #388]	; (80127ac <tcp_receive+0xb14>)
 8012626:	4862      	ldr	r0, [pc, #392]	; (80127b0 <tcp_receive+0xb18>)
 8012628:	f007 fc86 	bl	8019f38 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012630:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012632:	4b5a      	ldr	r3, [pc, #360]	; (801279c <tcp_receive+0xb04>)
 8012634:	881b      	ldrh	r3, [r3, #0]
 8012636:	461a      	mov	r2, r3
 8012638:	4b59      	ldr	r3, [pc, #356]	; (80127a0 <tcp_receive+0xb08>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	441a      	add	r2, r3
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012646:	4b55      	ldr	r3, [pc, #340]	; (801279c <tcp_receive+0xb04>)
 8012648:	881b      	ldrh	r3, [r3, #0]
 801264a:	429a      	cmp	r2, r3
 801264c:	d206      	bcs.n	801265c <tcp_receive+0x9c4>
 801264e:	4b56      	ldr	r3, [pc, #344]	; (80127a8 <tcp_receive+0xb10>)
 8012650:	f240 6207 	movw	r2, #1543	; 0x607
 8012654:	4957      	ldr	r1, [pc, #348]	; (80127b4 <tcp_receive+0xb1c>)
 8012656:	4856      	ldr	r0, [pc, #344]	; (80127b0 <tcp_receive+0xb18>)
 8012658:	f007 fc6e 	bl	8019f38 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012660:	4b4e      	ldr	r3, [pc, #312]	; (801279c <tcp_receive+0xb04>)
 8012662:	881b      	ldrh	r3, [r3, #0]
 8012664:	1ad3      	subs	r3, r2, r3
 8012666:	b29a      	uxth	r2, r3
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f7fc fe9b 	bl	800f3a8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012672:	4b4c      	ldr	r3, [pc, #304]	; (80127a4 <tcp_receive+0xb0c>)
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	891b      	ldrh	r3, [r3, #8]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d006      	beq.n	801268a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801267c:	4b49      	ldr	r3, [pc, #292]	; (80127a4 <tcp_receive+0xb0c>)
 801267e:	685b      	ldr	r3, [r3, #4]
 8012680:	4a4d      	ldr	r2, [pc, #308]	; (80127b8 <tcp_receive+0xb20>)
 8012682:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012684:	4b47      	ldr	r3, [pc, #284]	; (80127a4 <tcp_receive+0xb0c>)
 8012686:	2200      	movs	r2, #0
 8012688:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801268a:	4b46      	ldr	r3, [pc, #280]	; (80127a4 <tcp_receive+0xb0c>)
 801268c:	68db      	ldr	r3, [r3, #12]
 801268e:	899b      	ldrh	r3, [r3, #12]
 8012690:	b29b      	uxth	r3, r3
 8012692:	4618      	mov	r0, r3
 8012694:	f7fa faf4 	bl	800cc80 <lwip_htons>
 8012698:	4603      	mov	r3, r0
 801269a:	b2db      	uxtb	r3, r3
 801269c:	f003 0301 	and.w	r3, r3, #1
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	f000 80b8 	beq.w	8012816 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80126a6:	4b45      	ldr	r3, [pc, #276]	; (80127bc <tcp_receive+0xb24>)
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	f043 0320 	orr.w	r3, r3, #32
 80126ae:	b2da      	uxtb	r2, r3
 80126b0:	4b42      	ldr	r3, [pc, #264]	; (80127bc <tcp_receive+0xb24>)
 80126b2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80126b4:	e0af      	b.n	8012816 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126ba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	685b      	ldr	r3, [r3, #4]
 80126c4:	4a36      	ldr	r2, [pc, #216]	; (80127a0 <tcp_receive+0xb08>)
 80126c6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	891b      	ldrh	r3, [r3, #8]
 80126cc:	461c      	mov	r4, r3
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	68db      	ldr	r3, [r3, #12]
 80126d2:	899b      	ldrh	r3, [r3, #12]
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7fa fad2 	bl	800cc80 <lwip_htons>
 80126dc:	4603      	mov	r3, r0
 80126de:	b2db      	uxtb	r3, r3
 80126e0:	f003 0303 	and.w	r3, r3, #3
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d001      	beq.n	80126ec <tcp_receive+0xa54>
 80126e8:	2301      	movs	r3, #1
 80126ea:	e000      	b.n	80126ee <tcp_receive+0xa56>
 80126ec:	2300      	movs	r3, #0
 80126ee:	191a      	adds	r2, r3, r4
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126f4:	441a      	add	r2, r3
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80126fe:	461c      	mov	r4, r3
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	891b      	ldrh	r3, [r3, #8]
 8012704:	461d      	mov	r5, r3
 8012706:	68bb      	ldr	r3, [r7, #8]
 8012708:	68db      	ldr	r3, [r3, #12]
 801270a:	899b      	ldrh	r3, [r3, #12]
 801270c:	b29b      	uxth	r3, r3
 801270e:	4618      	mov	r0, r3
 8012710:	f7fa fab6 	bl	800cc80 <lwip_htons>
 8012714:	4603      	mov	r3, r0
 8012716:	b2db      	uxtb	r3, r3
 8012718:	f003 0303 	and.w	r3, r3, #3
 801271c:	2b00      	cmp	r3, #0
 801271e:	d001      	beq.n	8012724 <tcp_receive+0xa8c>
 8012720:	2301      	movs	r3, #1
 8012722:	e000      	b.n	8012726 <tcp_receive+0xa8e>
 8012724:	2300      	movs	r3, #0
 8012726:	442b      	add	r3, r5
 8012728:	429c      	cmp	r4, r3
 801272a:	d206      	bcs.n	801273a <tcp_receive+0xaa2>
 801272c:	4b1e      	ldr	r3, [pc, #120]	; (80127a8 <tcp_receive+0xb10>)
 801272e:	f240 622c 	movw	r2, #1580	; 0x62c
 8012732:	4923      	ldr	r1, [pc, #140]	; (80127c0 <tcp_receive+0xb28>)
 8012734:	481e      	ldr	r0, [pc, #120]	; (80127b0 <tcp_receive+0xb18>)
 8012736:	f007 fbff 	bl	8019f38 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801273a:	68bb      	ldr	r3, [r7, #8]
 801273c:	891b      	ldrh	r3, [r3, #8]
 801273e:	461c      	mov	r4, r3
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	68db      	ldr	r3, [r3, #12]
 8012744:	899b      	ldrh	r3, [r3, #12]
 8012746:	b29b      	uxth	r3, r3
 8012748:	4618      	mov	r0, r3
 801274a:	f7fa fa99 	bl	800cc80 <lwip_htons>
 801274e:	4603      	mov	r3, r0
 8012750:	b2db      	uxtb	r3, r3
 8012752:	f003 0303 	and.w	r3, r3, #3
 8012756:	2b00      	cmp	r3, #0
 8012758:	d001      	beq.n	801275e <tcp_receive+0xac6>
 801275a:	2301      	movs	r3, #1
 801275c:	e000      	b.n	8012760 <tcp_receive+0xac8>
 801275e:	2300      	movs	r3, #0
 8012760:	1919      	adds	r1, r3, r4
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012766:	b28b      	uxth	r3, r1
 8012768:	1ad3      	subs	r3, r2, r3
 801276a:	b29a      	uxth	r2, r3
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f7fc fe19 	bl	800f3a8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	685b      	ldr	r3, [r3, #4]
 801277a:	891b      	ldrh	r3, [r3, #8]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d028      	beq.n	80127d2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012780:	4b0d      	ldr	r3, [pc, #52]	; (80127b8 <tcp_receive+0xb20>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d01d      	beq.n	80127c4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012788:	4b0b      	ldr	r3, [pc, #44]	; (80127b8 <tcp_receive+0xb20>)
 801278a:	681a      	ldr	r2, [r3, #0]
 801278c:	68bb      	ldr	r3, [r7, #8]
 801278e:	685b      	ldr	r3, [r3, #4]
 8012790:	4619      	mov	r1, r3
 8012792:	4610      	mov	r0, r2
 8012794:	f7fb ff60 	bl	800e658 <pbuf_cat>
 8012798:	e018      	b.n	80127cc <tcp_receive+0xb34>
 801279a:	bf00      	nop
 801279c:	20010312 	.word	0x20010312
 80127a0:	20010308 	.word	0x20010308
 80127a4:	200102e8 	.word	0x200102e8
 80127a8:	0801d368 	.word	0x0801d368
 80127ac:	0801d748 	.word	0x0801d748
 80127b0:	0801d3b4 	.word	0x0801d3b4
 80127b4:	0801d784 	.word	0x0801d784
 80127b8:	20010318 	.word	0x20010318
 80127bc:	20010315 	.word	0x20010315
 80127c0:	0801d7a4 	.word	0x0801d7a4
            } else {
              recv_data = cseg->p;
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	685b      	ldr	r3, [r3, #4]
 80127c8:	4a70      	ldr	r2, [pc, #448]	; (801298c <tcp_receive+0xcf4>)
 80127ca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	2200      	movs	r2, #0
 80127d0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	68db      	ldr	r3, [r3, #12]
 80127d6:	899b      	ldrh	r3, [r3, #12]
 80127d8:	b29b      	uxth	r3, r3
 80127da:	4618      	mov	r0, r3
 80127dc:	f7fa fa50 	bl	800cc80 <lwip_htons>
 80127e0:	4603      	mov	r3, r0
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	f003 0301 	and.w	r3, r3, #1
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d00d      	beq.n	8012808 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80127ec:	4b68      	ldr	r3, [pc, #416]	; (8012990 <tcp_receive+0xcf8>)
 80127ee:	781b      	ldrb	r3, [r3, #0]
 80127f0:	f043 0320 	orr.w	r3, r3, #32
 80127f4:	b2da      	uxtb	r2, r3
 80127f6:	4b66      	ldr	r3, [pc, #408]	; (8012990 <tcp_receive+0xcf8>)
 80127f8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	7d1b      	ldrb	r3, [r3, #20]
 80127fe:	2b04      	cmp	r3, #4
 8012800:	d102      	bne.n	8012808 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	2207      	movs	r2, #7
 8012806:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012810:	68b8      	ldr	r0, [r7, #8]
 8012812:	f7fd faeb 	bl	800fdec <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801281a:	2b00      	cmp	r3, #0
 801281c:	d008      	beq.n	8012830 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012822:	68db      	ldr	r3, [r3, #12]
 8012824:	685a      	ldr	r2, [r3, #4]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801282a:	429a      	cmp	r2, r3
 801282c:	f43f af43 	beq.w	80126b6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	8b5b      	ldrh	r3, [r3, #26]
 8012834:	f003 0301 	and.w	r3, r3, #1
 8012838:	2b00      	cmp	r3, #0
 801283a:	d00e      	beq.n	801285a <tcp_receive+0xbc2>
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	8b5b      	ldrh	r3, [r3, #26]
 8012840:	f023 0301 	bic.w	r3, r3, #1
 8012844:	b29a      	uxth	r2, r3
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	835a      	strh	r2, [r3, #26]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	8b5b      	ldrh	r3, [r3, #26]
 801284e:	f043 0302 	orr.w	r3, r3, #2
 8012852:	b29a      	uxth	r2, r3
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012858:	e188      	b.n	8012b6c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	8b5b      	ldrh	r3, [r3, #26]
 801285e:	f043 0301 	orr.w	r3, r3, #1
 8012862:	b29a      	uxth	r2, r3
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012868:	e180      	b.n	8012b6c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801286e:	2b00      	cmp	r3, #0
 8012870:	d106      	bne.n	8012880 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012872:	4848      	ldr	r0, [pc, #288]	; (8012994 <tcp_receive+0xcfc>)
 8012874:	f7fd faf0 	bl	800fe58 <tcp_seg_copy>
 8012878:	4602      	mov	r2, r0
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	675a      	str	r2, [r3, #116]	; 0x74
 801287e:	e16d      	b.n	8012b5c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012880:	2300      	movs	r3, #0
 8012882:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012888:	63bb      	str	r3, [r7, #56]	; 0x38
 801288a:	e157      	b.n	8012b3c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	685a      	ldr	r2, [r3, #4]
 8012892:	4b41      	ldr	r3, [pc, #260]	; (8012998 <tcp_receive+0xd00>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	429a      	cmp	r2, r3
 8012898:	d11d      	bne.n	80128d6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801289a:	4b3e      	ldr	r3, [pc, #248]	; (8012994 <tcp_receive+0xcfc>)
 801289c:	891a      	ldrh	r2, [r3, #8]
 801289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a0:	891b      	ldrh	r3, [r3, #8]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	f240 814f 	bls.w	8012b46 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80128a8:	483a      	ldr	r0, [pc, #232]	; (8012994 <tcp_receive+0xcfc>)
 80128aa:	f7fd fad5 	bl	800fe58 <tcp_seg_copy>
 80128ae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	f000 8149 	beq.w	8012b4a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80128b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d003      	beq.n	80128c6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80128be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128c0:	697a      	ldr	r2, [r7, #20]
 80128c2:	601a      	str	r2, [r3, #0]
 80128c4:	e002      	b.n	80128cc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	697a      	ldr	r2, [r7, #20]
 80128ca:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80128cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80128ce:	6978      	ldr	r0, [r7, #20]
 80128d0:	f7ff f8de 	bl	8011a90 <tcp_oos_insert_segment>
                }
                break;
 80128d4:	e139      	b.n	8012b4a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80128d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d117      	bne.n	801290c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80128dc:	4b2e      	ldr	r3, [pc, #184]	; (8012998 <tcp_receive+0xd00>)
 80128de:	681a      	ldr	r2, [r3, #0]
 80128e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e2:	68db      	ldr	r3, [r3, #12]
 80128e4:	685b      	ldr	r3, [r3, #4]
 80128e6:	1ad3      	subs	r3, r2, r3
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	da57      	bge.n	801299c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80128ec:	4829      	ldr	r0, [pc, #164]	; (8012994 <tcp_receive+0xcfc>)
 80128ee:	f7fd fab3 	bl	800fe58 <tcp_seg_copy>
 80128f2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80128f4:	69bb      	ldr	r3, [r7, #24]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	f000 8129 	beq.w	8012b4e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	69ba      	ldr	r2, [r7, #24]
 8012900:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012902:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012904:	69b8      	ldr	r0, [r7, #24]
 8012906:	f7ff f8c3 	bl	8011a90 <tcp_oos_insert_segment>
                  }
                  break;
 801290a:	e120      	b.n	8012b4e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801290c:	4b22      	ldr	r3, [pc, #136]	; (8012998 <tcp_receive+0xd00>)
 801290e:	681a      	ldr	r2, [r3, #0]
 8012910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	1ad3      	subs	r3, r2, r3
 8012918:	3b01      	subs	r3, #1
 801291a:	2b00      	cmp	r3, #0
 801291c:	db3e      	blt.n	801299c <tcp_receive+0xd04>
 801291e:	4b1e      	ldr	r3, [pc, #120]	; (8012998 <tcp_receive+0xd00>)
 8012920:	681a      	ldr	r2, [r3, #0]
 8012922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012924:	68db      	ldr	r3, [r3, #12]
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	1ad3      	subs	r3, r2, r3
 801292a:	3301      	adds	r3, #1
 801292c:	2b00      	cmp	r3, #0
 801292e:	dc35      	bgt.n	801299c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012930:	4818      	ldr	r0, [pc, #96]	; (8012994 <tcp_receive+0xcfc>)
 8012932:	f7fd fa91 	bl	800fe58 <tcp_seg_copy>
 8012936:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012938:	69fb      	ldr	r3, [r7, #28]
 801293a:	2b00      	cmp	r3, #0
 801293c:	f000 8109 	beq.w	8012b52 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012948:	8912      	ldrh	r2, [r2, #8]
 801294a:	441a      	add	r2, r3
 801294c:	4b12      	ldr	r3, [pc, #72]	; (8012998 <tcp_receive+0xd00>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	1ad3      	subs	r3, r2, r3
 8012952:	2b00      	cmp	r3, #0
 8012954:	dd12      	ble.n	801297c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012956:	4b10      	ldr	r3, [pc, #64]	; (8012998 <tcp_receive+0xd00>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	b29a      	uxth	r2, r3
 801295c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801295e:	68db      	ldr	r3, [r3, #12]
 8012960:	685b      	ldr	r3, [r3, #4]
 8012962:	b29b      	uxth	r3, r3
 8012964:	1ad3      	subs	r3, r2, r3
 8012966:	b29a      	uxth	r2, r3
 8012968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801296a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801296c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801296e:	685a      	ldr	r2, [r3, #4]
 8012970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012972:	891b      	ldrh	r3, [r3, #8]
 8012974:	4619      	mov	r1, r3
 8012976:	4610      	mov	r0, r2
 8012978:	f7fb fc1a 	bl	800e1b0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801297c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801297e:	69fa      	ldr	r2, [r7, #28]
 8012980:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012982:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012984:	69f8      	ldr	r0, [r7, #28]
 8012986:	f7ff f883 	bl	8011a90 <tcp_oos_insert_segment>
                  }
                  break;
 801298a:	e0e2      	b.n	8012b52 <tcp_receive+0xeba>
 801298c:	20010318 	.word	0x20010318
 8012990:	20010315 	.word	0x20010315
 8012994:	200102e8 	.word	0x200102e8
 8012998:	20010308 	.word	0x20010308
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801299c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801299e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80129a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	f040 80c6 	bne.w	8012b36 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80129aa:	4b80      	ldr	r3, [pc, #512]	; (8012bac <tcp_receive+0xf14>)
 80129ac:	681a      	ldr	r2, [r3, #0]
 80129ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b0:	68db      	ldr	r3, [r3, #12]
 80129b2:	685b      	ldr	r3, [r3, #4]
 80129b4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	f340 80bd 	ble.w	8012b36 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80129bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	899b      	ldrh	r3, [r3, #12]
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7fa f95b 	bl	800cc80 <lwip_htons>
 80129ca:	4603      	mov	r3, r0
 80129cc:	b2db      	uxtb	r3, r3
 80129ce:	f003 0301 	and.w	r3, r3, #1
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	f040 80bf 	bne.w	8012b56 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80129d8:	4875      	ldr	r0, [pc, #468]	; (8012bb0 <tcp_receive+0xf18>)
 80129da:	f7fd fa3d 	bl	800fe58 <tcp_seg_copy>
 80129de:	4602      	mov	r2, r0
 80129e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80129e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	f000 80b6 	beq.w	8012b5a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80129ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f0:	68db      	ldr	r3, [r3, #12]
 80129f2:	685b      	ldr	r3, [r3, #4]
 80129f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129f6:	8912      	ldrh	r2, [r2, #8]
 80129f8:	441a      	add	r2, r3
 80129fa:	4b6c      	ldr	r3, [pc, #432]	; (8012bac <tcp_receive+0xf14>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	1ad3      	subs	r3, r2, r3
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	dd12      	ble.n	8012a2a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012a04:	4b69      	ldr	r3, [pc, #420]	; (8012bac <tcp_receive+0xf14>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	b29a      	uxth	r2, r3
 8012a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a0c:	68db      	ldr	r3, [r3, #12]
 8012a0e:	685b      	ldr	r3, [r3, #4]
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	1ad3      	subs	r3, r2, r3
 8012a14:	b29a      	uxth	r2, r3
 8012a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a18:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a1c:	685a      	ldr	r2, [r3, #4]
 8012a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a20:	891b      	ldrh	r3, [r3, #8]
 8012a22:	4619      	mov	r1, r3
 8012a24:	4610      	mov	r0, r2
 8012a26:	f7fb fbc3 	bl	800e1b0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012a2a:	4b62      	ldr	r3, [pc, #392]	; (8012bb4 <tcp_receive+0xf1c>)
 8012a2c:	881b      	ldrh	r3, [r3, #0]
 8012a2e:	461a      	mov	r2, r3
 8012a30:	4b5e      	ldr	r3, [pc, #376]	; (8012bac <tcp_receive+0xf14>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	441a      	add	r2, r3
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a3a:	6879      	ldr	r1, [r7, #4]
 8012a3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012a3e:	440b      	add	r3, r1
 8012a40:	1ad3      	subs	r3, r2, r3
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	f340 8089 	ble.w	8012b5a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	899b      	ldrh	r3, [r3, #12]
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	4618      	mov	r0, r3
 8012a54:	f7fa f914 	bl	800cc80 <lwip_htons>
 8012a58:	4603      	mov	r3, r0
 8012a5a:	b2db      	uxtb	r3, r3
 8012a5c:	f003 0301 	and.w	r3, r3, #1
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d022      	beq.n	8012aaa <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	68db      	ldr	r3, [r3, #12]
 8012a6a:	899b      	ldrh	r3, [r3, #12]
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	b21b      	sxth	r3, r3
 8012a70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012a74:	b21c      	sxth	r4, r3
 8012a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	68db      	ldr	r3, [r3, #12]
 8012a7c:	899b      	ldrh	r3, [r3, #12]
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	4618      	mov	r0, r3
 8012a82:	f7fa f8fd 	bl	800cc80 <lwip_htons>
 8012a86:	4603      	mov	r3, r0
 8012a88:	b2db      	uxtb	r3, r3
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012a90:	b29b      	uxth	r3, r3
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7fa f8f4 	bl	800cc80 <lwip_htons>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	b21b      	sxth	r3, r3
 8012a9c:	4323      	orrs	r3, r4
 8012a9e:	b21a      	sxth	r2, r3
 8012aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	68db      	ldr	r3, [r3, #12]
 8012aa6:	b292      	uxth	r2, r2
 8012aa8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aae:	b29a      	uxth	r2, r3
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ab4:	4413      	add	r3, r2
 8012ab6:	b299      	uxth	r1, r3
 8012ab8:	4b3c      	ldr	r3, [pc, #240]	; (8012bac <tcp_receive+0xf14>)
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	b29a      	uxth	r2, r3
 8012abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	1a8a      	subs	r2, r1, r2
 8012ac4:	b292      	uxth	r2, r2
 8012ac6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	685a      	ldr	r2, [r3, #4]
 8012ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	891b      	ldrh	r3, [r3, #8]
 8012ad4:	4619      	mov	r1, r3
 8012ad6:	4610      	mov	r0, r2
 8012ad8:	f7fb fb6a 	bl	800e1b0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	891c      	ldrh	r4, [r3, #8]
 8012ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	68db      	ldr	r3, [r3, #12]
 8012ae8:	899b      	ldrh	r3, [r3, #12]
 8012aea:	b29b      	uxth	r3, r3
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7fa f8c7 	bl	800cc80 <lwip_htons>
 8012af2:	4603      	mov	r3, r0
 8012af4:	b2db      	uxtb	r3, r3
 8012af6:	f003 0303 	and.w	r3, r3, #3
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d001      	beq.n	8012b02 <tcp_receive+0xe6a>
 8012afe:	2301      	movs	r3, #1
 8012b00:	e000      	b.n	8012b04 <tcp_receive+0xe6c>
 8012b02:	2300      	movs	r3, #0
 8012b04:	4423      	add	r3, r4
 8012b06:	b29a      	uxth	r2, r3
 8012b08:	4b2a      	ldr	r3, [pc, #168]	; (8012bb4 <tcp_receive+0xf1c>)
 8012b0a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012b0c:	4b29      	ldr	r3, [pc, #164]	; (8012bb4 <tcp_receive+0xf1c>)
 8012b0e:	881b      	ldrh	r3, [r3, #0]
 8012b10:	461a      	mov	r2, r3
 8012b12:	4b26      	ldr	r3, [pc, #152]	; (8012bac <tcp_receive+0xf14>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	441a      	add	r2, r3
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b1c:	6879      	ldr	r1, [r7, #4]
 8012b1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b20:	440b      	add	r3, r1
 8012b22:	429a      	cmp	r2, r3
 8012b24:	d019      	beq.n	8012b5a <tcp_receive+0xec2>
 8012b26:	4b24      	ldr	r3, [pc, #144]	; (8012bb8 <tcp_receive+0xf20>)
 8012b28:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012b2c:	4923      	ldr	r1, [pc, #140]	; (8012bbc <tcp_receive+0xf24>)
 8012b2e:	4824      	ldr	r0, [pc, #144]	; (8012bc0 <tcp_receive+0xf28>)
 8012b30:	f007 fa02 	bl	8019f38 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012b34:	e011      	b.n	8012b5a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	f47f aea4 	bne.w	801288c <tcp_receive+0xbf4>
 8012b44:	e00a      	b.n	8012b5c <tcp_receive+0xec4>
                break;
 8012b46:	bf00      	nop
 8012b48:	e008      	b.n	8012b5c <tcp_receive+0xec4>
                break;
 8012b4a:	bf00      	nop
 8012b4c:	e006      	b.n	8012b5c <tcp_receive+0xec4>
                  break;
 8012b4e:	bf00      	nop
 8012b50:	e004      	b.n	8012b5c <tcp_receive+0xec4>
                  break;
 8012b52:	bf00      	nop
 8012b54:	e002      	b.n	8012b5c <tcp_receive+0xec4>
                  break;
 8012b56:	bf00      	nop
 8012b58:	e000      	b.n	8012b5c <tcp_receive+0xec4>
                break;
 8012b5a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012b5c:	6878      	ldr	r0, [r7, #4]
 8012b5e:	f001 fe9b 	bl	8014898 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012b62:	e003      	b.n	8012b6c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012b64:	6878      	ldr	r0, [r7, #4]
 8012b66:	f001 fe97 	bl	8014898 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012b6a:	e01a      	b.n	8012ba2 <tcp_receive+0xf0a>
 8012b6c:	e019      	b.n	8012ba2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012b6e:	4b0f      	ldr	r3, [pc, #60]	; (8012bac <tcp_receive+0xf14>)
 8012b70:	681a      	ldr	r2, [r3, #0]
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b76:	1ad3      	subs	r3, r2, r3
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	db0a      	blt.n	8012b92 <tcp_receive+0xefa>
 8012b7c:	4b0b      	ldr	r3, [pc, #44]	; (8012bac <tcp_receive+0xf14>)
 8012b7e:	681a      	ldr	r2, [r3, #0]
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b84:	6879      	ldr	r1, [r7, #4]
 8012b86:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b88:	440b      	add	r3, r1
 8012b8a:	1ad3      	subs	r3, r2, r3
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	dd07      	ble.n	8012ba2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	8b5b      	ldrh	r3, [r3, #26]
 8012b96:	f043 0302 	orr.w	r3, r3, #2
 8012b9a:	b29a      	uxth	r2, r3
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012ba0:	e7ff      	b.n	8012ba2 <tcp_receive+0xf0a>
 8012ba2:	bf00      	nop
 8012ba4:	3750      	adds	r7, #80	; 0x50
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8012baa:	bf00      	nop
 8012bac:	20010308 	.word	0x20010308
 8012bb0:	200102e8 	.word	0x200102e8
 8012bb4:	20010312 	.word	0x20010312
 8012bb8:	0801d368 	.word	0x0801d368
 8012bbc:	0801d710 	.word	0x0801d710
 8012bc0:	0801d3b4 	.word	0x0801d3b4

08012bc4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012bc4:	b480      	push	{r7}
 8012bc6:	b083      	sub	sp, #12
 8012bc8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012bca:	4b15      	ldr	r3, [pc, #84]	; (8012c20 <tcp_get_next_optbyte+0x5c>)
 8012bcc:	881b      	ldrh	r3, [r3, #0]
 8012bce:	1c5a      	adds	r2, r3, #1
 8012bd0:	b291      	uxth	r1, r2
 8012bd2:	4a13      	ldr	r2, [pc, #76]	; (8012c20 <tcp_get_next_optbyte+0x5c>)
 8012bd4:	8011      	strh	r1, [r2, #0]
 8012bd6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012bd8:	4b12      	ldr	r3, [pc, #72]	; (8012c24 <tcp_get_next_optbyte+0x60>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d004      	beq.n	8012bea <tcp_get_next_optbyte+0x26>
 8012be0:	4b11      	ldr	r3, [pc, #68]	; (8012c28 <tcp_get_next_optbyte+0x64>)
 8012be2:	881b      	ldrh	r3, [r3, #0]
 8012be4:	88fa      	ldrh	r2, [r7, #6]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d208      	bcs.n	8012bfc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012bea:	4b10      	ldr	r3, [pc, #64]	; (8012c2c <tcp_get_next_optbyte+0x68>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	3314      	adds	r3, #20
 8012bf0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012bf2:	88fb      	ldrh	r3, [r7, #6]
 8012bf4:	683a      	ldr	r2, [r7, #0]
 8012bf6:	4413      	add	r3, r2
 8012bf8:	781b      	ldrb	r3, [r3, #0]
 8012bfa:	e00b      	b.n	8012c14 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012bfc:	88fb      	ldrh	r3, [r7, #6]
 8012bfe:	b2da      	uxtb	r2, r3
 8012c00:	4b09      	ldr	r3, [pc, #36]	; (8012c28 <tcp_get_next_optbyte+0x64>)
 8012c02:	881b      	ldrh	r3, [r3, #0]
 8012c04:	b2db      	uxtb	r3, r3
 8012c06:	1ad3      	subs	r3, r2, r3
 8012c08:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012c0a:	4b06      	ldr	r3, [pc, #24]	; (8012c24 <tcp_get_next_optbyte+0x60>)
 8012c0c:	681a      	ldr	r2, [r3, #0]
 8012c0e:	797b      	ldrb	r3, [r7, #5]
 8012c10:	4413      	add	r3, r2
 8012c12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	370c      	adds	r7, #12
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1e:	4770      	bx	lr
 8012c20:	20010304 	.word	0x20010304
 8012c24:	20010300 	.word	0x20010300
 8012c28:	200102fe 	.word	0x200102fe
 8012c2c:	200102f8 	.word	0x200102f8

08012c30 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	b084      	sub	sp, #16
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d106      	bne.n	8012c4c <tcp_parseopt+0x1c>
 8012c3e:	4b31      	ldr	r3, [pc, #196]	; (8012d04 <tcp_parseopt+0xd4>)
 8012c40:	f240 727d 	movw	r2, #1917	; 0x77d
 8012c44:	4930      	ldr	r1, [pc, #192]	; (8012d08 <tcp_parseopt+0xd8>)
 8012c46:	4831      	ldr	r0, [pc, #196]	; (8012d0c <tcp_parseopt+0xdc>)
 8012c48:	f007 f976 	bl	8019f38 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012c4c:	4b30      	ldr	r3, [pc, #192]	; (8012d10 <tcp_parseopt+0xe0>)
 8012c4e:	881b      	ldrh	r3, [r3, #0]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d053      	beq.n	8012cfc <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012c54:	4b2f      	ldr	r3, [pc, #188]	; (8012d14 <tcp_parseopt+0xe4>)
 8012c56:	2200      	movs	r2, #0
 8012c58:	801a      	strh	r2, [r3, #0]
 8012c5a:	e043      	b.n	8012ce4 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8012c5c:	f7ff ffb2 	bl	8012bc4 <tcp_get_next_optbyte>
 8012c60:	4603      	mov	r3, r0
 8012c62:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012c64:	7bfb      	ldrb	r3, [r7, #15]
 8012c66:	2b01      	cmp	r3, #1
 8012c68:	d03c      	beq.n	8012ce4 <tcp_parseopt+0xb4>
 8012c6a:	2b02      	cmp	r3, #2
 8012c6c:	d002      	beq.n	8012c74 <tcp_parseopt+0x44>
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d03f      	beq.n	8012cf2 <tcp_parseopt+0xc2>
 8012c72:	e026      	b.n	8012cc2 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012c74:	f7ff ffa6 	bl	8012bc4 <tcp_get_next_optbyte>
 8012c78:	4603      	mov	r3, r0
 8012c7a:	2b04      	cmp	r3, #4
 8012c7c:	d13b      	bne.n	8012cf6 <tcp_parseopt+0xc6>
 8012c7e:	4b25      	ldr	r3, [pc, #148]	; (8012d14 <tcp_parseopt+0xe4>)
 8012c80:	881b      	ldrh	r3, [r3, #0]
 8012c82:	3302      	adds	r3, #2
 8012c84:	4a22      	ldr	r2, [pc, #136]	; (8012d10 <tcp_parseopt+0xe0>)
 8012c86:	8812      	ldrh	r2, [r2, #0]
 8012c88:	4293      	cmp	r3, r2
 8012c8a:	dc34      	bgt.n	8012cf6 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012c8c:	f7ff ff9a 	bl	8012bc4 <tcp_get_next_optbyte>
 8012c90:	4603      	mov	r3, r0
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	021b      	lsls	r3, r3, #8
 8012c96:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012c98:	f7ff ff94 	bl	8012bc4 <tcp_get_next_optbyte>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	b29a      	uxth	r2, r3
 8012ca0:	89bb      	ldrh	r3, [r7, #12]
 8012ca2:	4313      	orrs	r3, r2
 8012ca4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012ca6:	89bb      	ldrh	r3, [r7, #12]
 8012ca8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012cac:	d804      	bhi.n	8012cb8 <tcp_parseopt+0x88>
 8012cae:	89bb      	ldrh	r3, [r7, #12]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d001      	beq.n	8012cb8 <tcp_parseopt+0x88>
 8012cb4:	89ba      	ldrh	r2, [r7, #12]
 8012cb6:	e001      	b.n	8012cbc <tcp_parseopt+0x8c>
 8012cb8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012cc0:	e010      	b.n	8012ce4 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012cc2:	f7ff ff7f 	bl	8012bc4 <tcp_get_next_optbyte>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012cca:	7afb      	ldrb	r3, [r7, #11]
 8012ccc:	2b01      	cmp	r3, #1
 8012cce:	d914      	bls.n	8012cfa <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012cd0:	7afb      	ldrb	r3, [r7, #11]
 8012cd2:	b29a      	uxth	r2, r3
 8012cd4:	4b0f      	ldr	r3, [pc, #60]	; (8012d14 <tcp_parseopt+0xe4>)
 8012cd6:	881b      	ldrh	r3, [r3, #0]
 8012cd8:	4413      	add	r3, r2
 8012cda:	b29b      	uxth	r3, r3
 8012cdc:	3b02      	subs	r3, #2
 8012cde:	b29a      	uxth	r2, r3
 8012ce0:	4b0c      	ldr	r3, [pc, #48]	; (8012d14 <tcp_parseopt+0xe4>)
 8012ce2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012ce4:	4b0b      	ldr	r3, [pc, #44]	; (8012d14 <tcp_parseopt+0xe4>)
 8012ce6:	881a      	ldrh	r2, [r3, #0]
 8012ce8:	4b09      	ldr	r3, [pc, #36]	; (8012d10 <tcp_parseopt+0xe0>)
 8012cea:	881b      	ldrh	r3, [r3, #0]
 8012cec:	429a      	cmp	r2, r3
 8012cee:	d3b5      	bcc.n	8012c5c <tcp_parseopt+0x2c>
 8012cf0:	e004      	b.n	8012cfc <tcp_parseopt+0xcc>
          return;
 8012cf2:	bf00      	nop
 8012cf4:	e002      	b.n	8012cfc <tcp_parseopt+0xcc>
            return;
 8012cf6:	bf00      	nop
 8012cf8:	e000      	b.n	8012cfc <tcp_parseopt+0xcc>
            return;
 8012cfa:	bf00      	nop
      }
    }
  }
}
 8012cfc:	3710      	adds	r7, #16
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}
 8012d02:	bf00      	nop
 8012d04:	0801d368 	.word	0x0801d368
 8012d08:	0801d7cc 	.word	0x0801d7cc
 8012d0c:	0801d3b4 	.word	0x0801d3b4
 8012d10:	200102fc 	.word	0x200102fc
 8012d14:	20010304 	.word	0x20010304

08012d18 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012d18:	b480      	push	{r7}
 8012d1a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012d1c:	4b05      	ldr	r3, [pc, #20]	; (8012d34 <tcp_trigger_input_pcb_close+0x1c>)
 8012d1e:	781b      	ldrb	r3, [r3, #0]
 8012d20:	f043 0310 	orr.w	r3, r3, #16
 8012d24:	b2da      	uxtb	r2, r3
 8012d26:	4b03      	ldr	r3, [pc, #12]	; (8012d34 <tcp_trigger_input_pcb_close+0x1c>)
 8012d28:	701a      	strb	r2, [r3, #0]
}
 8012d2a:	bf00      	nop
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d32:	4770      	bx	lr
 8012d34:	20010315 	.word	0x20010315

08012d38 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b084      	sub	sp, #16
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	60f8      	str	r0, [r7, #12]
 8012d40:	60b9      	str	r1, [r7, #8]
 8012d42:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d00a      	beq.n	8012d60 <tcp_route+0x28>
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	7a1b      	ldrb	r3, [r3, #8]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d006      	beq.n	8012d60 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	7a1b      	ldrb	r3, [r3, #8]
 8012d56:	4618      	mov	r0, r3
 8012d58:	f7fb f826 	bl	800dda8 <netif_get_by_index>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	e003      	b.n	8012d68 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f005 fcd5 	bl	8018710 <ip4_route>
 8012d66:	4603      	mov	r3, r0
  }
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3710      	adds	r7, #16
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}

08012d70 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012d70:	b590      	push	{r4, r7, lr}
 8012d72:	b087      	sub	sp, #28
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	60f8      	str	r0, [r7, #12]
 8012d78:	60b9      	str	r1, [r7, #8]
 8012d7a:	603b      	str	r3, [r7, #0]
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d105      	bne.n	8012d92 <tcp_create_segment+0x22>
 8012d86:	4b44      	ldr	r3, [pc, #272]	; (8012e98 <tcp_create_segment+0x128>)
 8012d88:	22a3      	movs	r2, #163	; 0xa3
 8012d8a:	4944      	ldr	r1, [pc, #272]	; (8012e9c <tcp_create_segment+0x12c>)
 8012d8c:	4844      	ldr	r0, [pc, #272]	; (8012ea0 <tcp_create_segment+0x130>)
 8012d8e:	f007 f8d3 	bl	8019f38 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d105      	bne.n	8012da4 <tcp_create_segment+0x34>
 8012d98:	4b3f      	ldr	r3, [pc, #252]	; (8012e98 <tcp_create_segment+0x128>)
 8012d9a:	22a4      	movs	r2, #164	; 0xa4
 8012d9c:	4941      	ldr	r1, [pc, #260]	; (8012ea4 <tcp_create_segment+0x134>)
 8012d9e:	4840      	ldr	r0, [pc, #256]	; (8012ea0 <tcp_create_segment+0x130>)
 8012da0:	f007 f8ca 	bl	8019f38 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012da4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012da8:	009b      	lsls	r3, r3, #2
 8012daa:	b2db      	uxtb	r3, r3
 8012dac:	f003 0304 	and.w	r3, r3, #4
 8012db0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012db2:	2003      	movs	r0, #3
 8012db4:	f7fa fc84 	bl	800d6c0 <memp_malloc>
 8012db8:	6138      	str	r0, [r7, #16]
 8012dba:	693b      	ldr	r3, [r7, #16]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d104      	bne.n	8012dca <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012dc0:	68b8      	ldr	r0, [r7, #8]
 8012dc2:	f7fb fb7b 	bl	800e4bc <pbuf_free>
    return NULL;
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	e061      	b.n	8012e8e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012dd0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012dd2:	693b      	ldr	r3, [r7, #16]
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	68ba      	ldr	r2, [r7, #8]
 8012ddc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	891a      	ldrh	r2, [r3, #8]
 8012de2:	7dfb      	ldrb	r3, [r7, #23]
 8012de4:	b29b      	uxth	r3, r3
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d205      	bcs.n	8012df6 <tcp_create_segment+0x86>
 8012dea:	4b2b      	ldr	r3, [pc, #172]	; (8012e98 <tcp_create_segment+0x128>)
 8012dec:	22b0      	movs	r2, #176	; 0xb0
 8012dee:	492e      	ldr	r1, [pc, #184]	; (8012ea8 <tcp_create_segment+0x138>)
 8012df0:	482b      	ldr	r0, [pc, #172]	; (8012ea0 <tcp_create_segment+0x130>)
 8012df2:	f007 f8a1 	bl	8019f38 <iprintf>
  seg->len = p->tot_len - optlen;
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	891a      	ldrh	r2, [r3, #8]
 8012dfa:	7dfb      	ldrb	r3, [r7, #23]
 8012dfc:	b29b      	uxth	r3, r3
 8012dfe:	1ad3      	subs	r3, r2, r3
 8012e00:	b29a      	uxth	r2, r3
 8012e02:	693b      	ldr	r3, [r7, #16]
 8012e04:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012e06:	2114      	movs	r1, #20
 8012e08:	68b8      	ldr	r0, [r7, #8]
 8012e0a:	f7fb fac1 	bl	800e390 <pbuf_add_header>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d004      	beq.n	8012e1e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012e14:	6938      	ldr	r0, [r7, #16]
 8012e16:	f7fc ffe9 	bl	800fdec <tcp_seg_free>
    return NULL;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	e037      	b.n	8012e8e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	685b      	ldr	r3, [r3, #4]
 8012e22:	685a      	ldr	r2, [r3, #4]
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	8ada      	ldrh	r2, [r3, #22]
 8012e2c:	693b      	ldr	r3, [r7, #16]
 8012e2e:	68dc      	ldr	r4, [r3, #12]
 8012e30:	4610      	mov	r0, r2
 8012e32:	f7f9 ff25 	bl	800cc80 <lwip_htons>
 8012e36:	4603      	mov	r3, r0
 8012e38:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	8b1a      	ldrh	r2, [r3, #24]
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	68dc      	ldr	r4, [r3, #12]
 8012e42:	4610      	mov	r0, r2
 8012e44:	f7f9 ff1c 	bl	800cc80 <lwip_htons>
 8012e48:	4603      	mov	r3, r0
 8012e4a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012e4c:	693b      	ldr	r3, [r7, #16]
 8012e4e:	68dc      	ldr	r4, [r3, #12]
 8012e50:	6838      	ldr	r0, [r7, #0]
 8012e52:	f7f9 ff2a 	bl	800ccaa <lwip_htonl>
 8012e56:	4603      	mov	r3, r0
 8012e58:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012e5a:	7dfb      	ldrb	r3, [r7, #23]
 8012e5c:	089b      	lsrs	r3, r3, #2
 8012e5e:	b2db      	uxtb	r3, r3
 8012e60:	b29b      	uxth	r3, r3
 8012e62:	3305      	adds	r3, #5
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	031b      	lsls	r3, r3, #12
 8012e68:	b29a      	uxth	r2, r3
 8012e6a:	79fb      	ldrb	r3, [r7, #7]
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	4313      	orrs	r3, r2
 8012e70:	b29a      	uxth	r2, r3
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	68dc      	ldr	r4, [r3, #12]
 8012e76:	4610      	mov	r0, r2
 8012e78:	f7f9 ff02 	bl	800cc80 <lwip_htons>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	68db      	ldr	r3, [r3, #12]
 8012e84:	2200      	movs	r2, #0
 8012e86:	749a      	strb	r2, [r3, #18]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	74da      	strb	r2, [r3, #19]
  return seg;
 8012e8c:	693b      	ldr	r3, [r7, #16]
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	371c      	adds	r7, #28
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd90      	pop	{r4, r7, pc}
 8012e96:	bf00      	nop
 8012e98:	0801d7e8 	.word	0x0801d7e8
 8012e9c:	0801d81c 	.word	0x0801d81c
 8012ea0:	0801d83c 	.word	0x0801d83c
 8012ea4:	0801d864 	.word	0x0801d864
 8012ea8:	0801d888 	.word	0x0801d888

08012eac <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b086      	sub	sp, #24
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	607b      	str	r3, [r7, #4]
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	73fb      	strb	r3, [r7, #15]
 8012eb8:	460b      	mov	r3, r1
 8012eba:	81bb      	strh	r3, [r7, #12]
 8012ebc:	4613      	mov	r3, r2
 8012ebe:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012ec0:	89bb      	ldrh	r3, [r7, #12]
 8012ec2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d105      	bne.n	8012ed6 <tcp_pbuf_prealloc+0x2a>
 8012eca:	4b30      	ldr	r3, [pc, #192]	; (8012f8c <tcp_pbuf_prealloc+0xe0>)
 8012ecc:	22e8      	movs	r2, #232	; 0xe8
 8012ece:	4930      	ldr	r1, [pc, #192]	; (8012f90 <tcp_pbuf_prealloc+0xe4>)
 8012ed0:	4830      	ldr	r0, [pc, #192]	; (8012f94 <tcp_pbuf_prealloc+0xe8>)
 8012ed2:	f007 f831 	bl	8019f38 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012ed6:	6a3b      	ldr	r3, [r7, #32]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d105      	bne.n	8012ee8 <tcp_pbuf_prealloc+0x3c>
 8012edc:	4b2b      	ldr	r3, [pc, #172]	; (8012f8c <tcp_pbuf_prealloc+0xe0>)
 8012ede:	22e9      	movs	r2, #233	; 0xe9
 8012ee0:	492d      	ldr	r1, [pc, #180]	; (8012f98 <tcp_pbuf_prealloc+0xec>)
 8012ee2:	482c      	ldr	r0, [pc, #176]	; (8012f94 <tcp_pbuf_prealloc+0xe8>)
 8012ee4:	f007 f828 	bl	8019f38 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012ee8:	89ba      	ldrh	r2, [r7, #12]
 8012eea:	897b      	ldrh	r3, [r7, #10]
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d221      	bcs.n	8012f34 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012ef0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012ef4:	f003 0302 	and.w	r3, r3, #2
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d111      	bne.n	8012f20 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012efc:	6a3b      	ldr	r3, [r7, #32]
 8012efe:	8b5b      	ldrh	r3, [r3, #26]
 8012f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d115      	bne.n	8012f34 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012f08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d007      	beq.n	8012f20 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012f10:	6a3b      	ldr	r3, [r7, #32]
 8012f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d103      	bne.n	8012f20 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012f18:	6a3b      	ldr	r3, [r7, #32]
 8012f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d009      	beq.n	8012f34 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012f20:	89bb      	ldrh	r3, [r7, #12]
 8012f22:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012f26:	f023 0203 	bic.w	r2, r3, #3
 8012f2a:	897b      	ldrh	r3, [r7, #10]
 8012f2c:	4293      	cmp	r3, r2
 8012f2e:	bf28      	it	cs
 8012f30:	4613      	movcs	r3, r2
 8012f32:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012f34:	8af9      	ldrh	r1, [r7, #22]
 8012f36:	7bfb      	ldrb	r3, [r7, #15]
 8012f38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7fa ffdd 	bl	800defc <pbuf_alloc>
 8012f42:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d101      	bne.n	8012f4e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	e019      	b.n	8012f82 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d006      	beq.n	8012f64 <tcp_pbuf_prealloc+0xb8>
 8012f56:	4b0d      	ldr	r3, [pc, #52]	; (8012f8c <tcp_pbuf_prealloc+0xe0>)
 8012f58:	f240 120b 	movw	r2, #267	; 0x10b
 8012f5c:	490f      	ldr	r1, [pc, #60]	; (8012f9c <tcp_pbuf_prealloc+0xf0>)
 8012f5e:	480d      	ldr	r0, [pc, #52]	; (8012f94 <tcp_pbuf_prealloc+0xe8>)
 8012f60:	f006 ffea 	bl	8019f38 <iprintf>
  *oversize = p->len - length;
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	895a      	ldrh	r2, [r3, #10]
 8012f68:	89bb      	ldrh	r3, [r7, #12]
 8012f6a:	1ad3      	subs	r3, r2, r3
 8012f6c:	b29a      	uxth	r2, r3
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8012f72:	693b      	ldr	r3, [r7, #16]
 8012f74:	89ba      	ldrh	r2, [r7, #12]
 8012f76:	811a      	strh	r2, [r3, #8]
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	891a      	ldrh	r2, [r3, #8]
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	815a      	strh	r2, [r3, #10]
  return p;
 8012f80:	693b      	ldr	r3, [r7, #16]
}
 8012f82:	4618      	mov	r0, r3
 8012f84:	3718      	adds	r7, #24
 8012f86:	46bd      	mov	sp, r7
 8012f88:	bd80      	pop	{r7, pc}
 8012f8a:	bf00      	nop
 8012f8c:	0801d7e8 	.word	0x0801d7e8
 8012f90:	0801d8a0 	.word	0x0801d8a0
 8012f94:	0801d83c 	.word	0x0801d83c
 8012f98:	0801d8c4 	.word	0x0801d8c4
 8012f9c:	0801d8e4 	.word	0x0801d8e4

08012fa0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	460b      	mov	r3, r1
 8012faa:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d106      	bne.n	8012fc0 <tcp_write_checks+0x20>
 8012fb2:	4b33      	ldr	r3, [pc, #204]	; (8013080 <tcp_write_checks+0xe0>)
 8012fb4:	f240 1233 	movw	r2, #307	; 0x133
 8012fb8:	4932      	ldr	r1, [pc, #200]	; (8013084 <tcp_write_checks+0xe4>)
 8012fba:	4833      	ldr	r0, [pc, #204]	; (8013088 <tcp_write_checks+0xe8>)
 8012fbc:	f006 ffbc 	bl	8019f38 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	7d1b      	ldrb	r3, [r3, #20]
 8012fc4:	2b04      	cmp	r3, #4
 8012fc6:	d00e      	beq.n	8012fe6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012fcc:	2b07      	cmp	r3, #7
 8012fce:	d00a      	beq.n	8012fe6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8012fd4:	2b02      	cmp	r3, #2
 8012fd6:	d006      	beq.n	8012fe6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012fdc:	2b03      	cmp	r3, #3
 8012fde:	d002      	beq.n	8012fe6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8012fe0:	f06f 030a 	mvn.w	r3, #10
 8012fe4:	e048      	b.n	8013078 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8012fe6:	887b      	ldrh	r3, [r7, #2]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d101      	bne.n	8012ff0 <tcp_write_checks+0x50>
    return ERR_OK;
 8012fec:	2300      	movs	r3, #0
 8012fee:	e043      	b.n	8013078 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012ff6:	887a      	ldrh	r2, [r7, #2]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d909      	bls.n	8013010 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	8b5b      	ldrh	r3, [r3, #26]
 8013000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013004:	b29a      	uxth	r2, r3
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801300a:	f04f 33ff 	mov.w	r3, #4294967295
 801300e:	e033      	b.n	8013078 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013016:	2b08      	cmp	r3, #8
 8013018:	d909      	bls.n	801302e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	8b5b      	ldrh	r3, [r3, #26]
 801301e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013022:	b29a      	uxth	r2, r3
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013028:	f04f 33ff 	mov.w	r3, #4294967295
 801302c:	e024      	b.n	8013078 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013034:	2b00      	cmp	r3, #0
 8013036:	d00f      	beq.n	8013058 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801303c:	2b00      	cmp	r3, #0
 801303e:	d11a      	bne.n	8013076 <tcp_write_checks+0xd6>
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013044:	2b00      	cmp	r3, #0
 8013046:	d116      	bne.n	8013076 <tcp_write_checks+0xd6>
 8013048:	4b0d      	ldr	r3, [pc, #52]	; (8013080 <tcp_write_checks+0xe0>)
 801304a:	f44f 72ab 	mov.w	r2, #342	; 0x156
 801304e:	490f      	ldr	r1, [pc, #60]	; (801308c <tcp_write_checks+0xec>)
 8013050:	480d      	ldr	r0, [pc, #52]	; (8013088 <tcp_write_checks+0xe8>)
 8013052:	f006 ff71 	bl	8019f38 <iprintf>
 8013056:	e00e      	b.n	8013076 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801305c:	2b00      	cmp	r3, #0
 801305e:	d103      	bne.n	8013068 <tcp_write_checks+0xc8>
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013064:	2b00      	cmp	r3, #0
 8013066:	d006      	beq.n	8013076 <tcp_write_checks+0xd6>
 8013068:	4b05      	ldr	r3, [pc, #20]	; (8013080 <tcp_write_checks+0xe0>)
 801306a:	f240 1259 	movw	r2, #345	; 0x159
 801306e:	4908      	ldr	r1, [pc, #32]	; (8013090 <tcp_write_checks+0xf0>)
 8013070:	4805      	ldr	r0, [pc, #20]	; (8013088 <tcp_write_checks+0xe8>)
 8013072:	f006 ff61 	bl	8019f38 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013076:	2300      	movs	r3, #0
}
 8013078:	4618      	mov	r0, r3
 801307a:	3708      	adds	r7, #8
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}
 8013080:	0801d7e8 	.word	0x0801d7e8
 8013084:	0801d8f8 	.word	0x0801d8f8
 8013088:	0801d83c 	.word	0x0801d83c
 801308c:	0801d918 	.word	0x0801d918
 8013090:	0801d954 	.word	0x0801d954

08013094 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013094:	b590      	push	{r4, r7, lr}
 8013096:	b09b      	sub	sp, #108	; 0x6c
 8013098:	af04      	add	r7, sp, #16
 801309a:	60f8      	str	r0, [r7, #12]
 801309c:	60b9      	str	r1, [r7, #8]
 801309e:	4611      	mov	r1, r2
 80130a0:	461a      	mov	r2, r3
 80130a2:	460b      	mov	r3, r1
 80130a4:	80fb      	strh	r3, [r7, #6]
 80130a6:	4613      	mov	r3, r2
 80130a8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80130aa:	2300      	movs	r3, #0
 80130ac:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80130ae:	2300      	movs	r3, #0
 80130b0:	653b      	str	r3, [r7, #80]	; 0x50
 80130b2:	2300      	movs	r3, #0
 80130b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80130b6:	2300      	movs	r3, #0
 80130b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80130ba:	2300      	movs	r3, #0
 80130bc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80130be:	2300      	movs	r3, #0
 80130c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80130c4:	2300      	movs	r3, #0
 80130c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80130ca:	2300      	movs	r3, #0
 80130cc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80130ce:	2300      	movs	r3, #0
 80130d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80130d2:	2300      	movs	r3, #0
 80130d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d109      	bne.n	80130f0 <tcp_write+0x5c>
 80130dc:	4ba5      	ldr	r3, [pc, #660]	; (8013374 <tcp_write+0x2e0>)
 80130de:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80130e2:	49a5      	ldr	r1, [pc, #660]	; (8013378 <tcp_write+0x2e4>)
 80130e4:	48a5      	ldr	r0, [pc, #660]	; (801337c <tcp_write+0x2e8>)
 80130e6:	f006 ff27 	bl	8019f38 <iprintf>
 80130ea:	f06f 030f 	mvn.w	r3, #15
 80130ee:	e32c      	b.n	801374a <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80130f6:	085b      	lsrs	r3, r3, #1
 80130f8:	b29a      	uxth	r2, r3
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130fe:	4293      	cmp	r3, r2
 8013100:	bf28      	it	cs
 8013102:	4613      	movcs	r3, r2
 8013104:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013108:	2b00      	cmp	r3, #0
 801310a:	d102      	bne.n	8013112 <tcp_write+0x7e>
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013110:	e000      	b.n	8013114 <tcp_write+0x80>
 8013112:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013114:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d109      	bne.n	8013130 <tcp_write+0x9c>
 801311c:	4b95      	ldr	r3, [pc, #596]	; (8013374 <tcp_write+0x2e0>)
 801311e:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8013122:	4997      	ldr	r1, [pc, #604]	; (8013380 <tcp_write+0x2ec>)
 8013124:	4895      	ldr	r0, [pc, #596]	; (801337c <tcp_write+0x2e8>)
 8013126:	f006 ff07 	bl	8019f38 <iprintf>
 801312a:	f06f 030f 	mvn.w	r3, #15
 801312e:	e30c      	b.n	801374a <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013130:	88fb      	ldrh	r3, [r7, #6]
 8013132:	4619      	mov	r1, r3
 8013134:	68f8      	ldr	r0, [r7, #12]
 8013136:	f7ff ff33 	bl	8012fa0 <tcp_write_checks>
 801313a:	4603      	mov	r3, r0
 801313c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013140:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013144:	2b00      	cmp	r3, #0
 8013146:	d002      	beq.n	801314e <tcp_write+0xba>
    return err;
 8013148:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801314c:	e2fd      	b.n	801374a <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013154:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013158:	2300      	movs	r3, #0
 801315a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013162:	2b00      	cmp	r3, #0
 8013164:	f000 80f7 	beq.w	8013356 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801316c:	653b      	str	r3, [r7, #80]	; 0x50
 801316e:	e002      	b.n	8013176 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d1f8      	bne.n	8013170 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801317e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013180:	7a9b      	ldrb	r3, [r3, #10]
 8013182:	009b      	lsls	r3, r3, #2
 8013184:	b29b      	uxth	r3, r3
 8013186:	f003 0304 	and.w	r3, r3, #4
 801318a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801318c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801318e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013190:	891b      	ldrh	r3, [r3, #8]
 8013192:	4619      	mov	r1, r3
 8013194:	8c3b      	ldrh	r3, [r7, #32]
 8013196:	440b      	add	r3, r1
 8013198:	429a      	cmp	r2, r3
 801319a:	da06      	bge.n	80131aa <tcp_write+0x116>
 801319c:	4b75      	ldr	r3, [pc, #468]	; (8013374 <tcp_write+0x2e0>)
 801319e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80131a2:	4978      	ldr	r1, [pc, #480]	; (8013384 <tcp_write+0x2f0>)
 80131a4:	4875      	ldr	r0, [pc, #468]	; (801337c <tcp_write+0x2e8>)
 80131a6:	f006 fec7 	bl	8019f38 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80131aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131ac:	891a      	ldrh	r2, [r3, #8]
 80131ae:	8c3b      	ldrh	r3, [r7, #32]
 80131b0:	4413      	add	r3, r2
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80131b6:	1ad3      	subs	r3, r2, r3
 80131b8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80131c0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80131c2:	8a7b      	ldrh	r3, [r7, #18]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d027      	beq.n	8013218 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80131c8:	8a7b      	ldrh	r3, [r7, #18]
 80131ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d206      	bcs.n	80131de <tcp_write+0x14a>
 80131d0:	4b68      	ldr	r3, [pc, #416]	; (8013374 <tcp_write+0x2e0>)
 80131d2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80131d6:	496c      	ldr	r1, [pc, #432]	; (8013388 <tcp_write+0x2f4>)
 80131d8:	4868      	ldr	r0, [pc, #416]	; (801337c <tcp_write+0x2e8>)
 80131da:	f006 fead 	bl	8019f38 <iprintf>
      seg = last_unsent;
 80131de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131e0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80131e2:	8a7b      	ldrh	r3, [r7, #18]
 80131e4:	88fa      	ldrh	r2, [r7, #6]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d901      	bls.n	80131ee <tcp_write+0x15a>
 80131ea:	8a7b      	ldrh	r3, [r7, #18]
 80131ec:	e000      	b.n	80131f0 <tcp_write+0x15c>
 80131ee:	88fb      	ldrh	r3, [r7, #6]
 80131f0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80131f2:	4293      	cmp	r3, r2
 80131f4:	bfa8      	it	ge
 80131f6:	4613      	movge	r3, r2
 80131f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80131fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80131fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013200:	4413      	add	r3, r2
 8013202:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013206:	8a7a      	ldrh	r2, [r7, #18]
 8013208:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801320a:	1ad3      	subs	r3, r2, r3
 801320c:	b29b      	uxth	r3, r3
 801320e:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013210:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013212:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013214:	1ad3      	subs	r3, r2, r3
 8013216:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013218:	8a7b      	ldrh	r3, [r7, #18]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d00b      	beq.n	8013236 <tcp_write+0x1a2>
 801321e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013222:	88fb      	ldrh	r3, [r7, #6]
 8013224:	429a      	cmp	r2, r3
 8013226:	d006      	beq.n	8013236 <tcp_write+0x1a2>
 8013228:	4b52      	ldr	r3, [pc, #328]	; (8013374 <tcp_write+0x2e0>)
 801322a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801322e:	4957      	ldr	r1, [pc, #348]	; (801338c <tcp_write+0x2f8>)
 8013230:	4852      	ldr	r0, [pc, #328]	; (801337c <tcp_write+0x2e8>)
 8013232:	f006 fe81 	bl	8019f38 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013236:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801323a:	88fb      	ldrh	r3, [r7, #6]
 801323c:	429a      	cmp	r2, r3
 801323e:	f080 8168 	bcs.w	8013512 <tcp_write+0x47e>
 8013242:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013244:	2b00      	cmp	r3, #0
 8013246:	f000 8164 	beq.w	8013512 <tcp_write+0x47e>
 801324a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801324c:	891b      	ldrh	r3, [r3, #8]
 801324e:	2b00      	cmp	r3, #0
 8013250:	f000 815f 	beq.w	8013512 <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013254:	88fa      	ldrh	r2, [r7, #6]
 8013256:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801325a:	1ad2      	subs	r2, r2, r3
 801325c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801325e:	4293      	cmp	r3, r2
 8013260:	bfa8      	it	ge
 8013262:	4613      	movge	r3, r2
 8013264:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013268:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801326a:	797b      	ldrb	r3, [r7, #5]
 801326c:	f003 0301 	and.w	r3, r3, #1
 8013270:	2b00      	cmp	r3, #0
 8013272:	d027      	beq.n	80132c4 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013274:	f107 0012 	add.w	r0, r7, #18
 8013278:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801327a:	8bf9      	ldrh	r1, [r7, #30]
 801327c:	2301      	movs	r3, #1
 801327e:	9302      	str	r3, [sp, #8]
 8013280:	797b      	ldrb	r3, [r7, #5]
 8013282:	9301      	str	r3, [sp, #4]
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	9300      	str	r3, [sp, #0]
 8013288:	4603      	mov	r3, r0
 801328a:	2000      	movs	r0, #0
 801328c:	f7ff fe0e 	bl	8012eac <tcp_pbuf_prealloc>
 8013290:	6578      	str	r0, [r7, #84]	; 0x54
 8013292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013294:	2b00      	cmp	r3, #0
 8013296:	f000 8226 	beq.w	80136e6 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801329a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801329c:	6858      	ldr	r0, [r3, #4]
 801329e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80132a2:	68ba      	ldr	r2, [r7, #8]
 80132a4:	4413      	add	r3, r2
 80132a6:	8bfa      	ldrh	r2, [r7, #30]
 80132a8:	4619      	mov	r1, r3
 80132aa:	f006 fe18 	bl	8019ede <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80132ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80132b0:	f7fb f992 	bl	800e5d8 <pbuf_clen>
 80132b4:	4603      	mov	r3, r0
 80132b6:	461a      	mov	r2, r3
 80132b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80132bc:	4413      	add	r3, r2
 80132be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80132c2:	e041      	b.n	8013348 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80132c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132c6:	685b      	ldr	r3, [r3, #4]
 80132c8:	637b      	str	r3, [r7, #52]	; 0x34
 80132ca:	e002      	b.n	80132d2 <tcp_write+0x23e>
 80132cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	637b      	str	r3, [r7, #52]	; 0x34
 80132d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d1f8      	bne.n	80132cc <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80132da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132dc:	7b1b      	ldrb	r3, [r3, #12]
 80132de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d115      	bne.n	8013312 <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80132e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132e8:	685b      	ldr	r3, [r3, #4]
 80132ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80132ec:	8952      	ldrh	r2, [r2, #10]
 80132ee:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80132f0:	68ba      	ldr	r2, [r7, #8]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d10d      	bne.n	8013312 <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80132f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d006      	beq.n	801330c <tcp_write+0x278>
 80132fe:	4b1d      	ldr	r3, [pc, #116]	; (8013374 <tcp_write+0x2e0>)
 8013300:	f240 2231 	movw	r2, #561	; 0x231
 8013304:	4922      	ldr	r1, [pc, #136]	; (8013390 <tcp_write+0x2fc>)
 8013306:	481d      	ldr	r0, [pc, #116]	; (801337c <tcp_write+0x2e8>)
 8013308:	f006 fe16 	bl	8019f38 <iprintf>
          extendlen = seglen;
 801330c:	8bfb      	ldrh	r3, [r7, #30]
 801330e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013310:	e01a      	b.n	8013348 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013312:	8bfb      	ldrh	r3, [r7, #30]
 8013314:	2201      	movs	r2, #1
 8013316:	4619      	mov	r1, r3
 8013318:	2000      	movs	r0, #0
 801331a:	f7fa fdef 	bl	800defc <pbuf_alloc>
 801331e:	6578      	str	r0, [r7, #84]	; 0x54
 8013320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013322:	2b00      	cmp	r3, #0
 8013324:	f000 81e1 	beq.w	80136ea <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801332c:	68ba      	ldr	r2, [r7, #8]
 801332e:	441a      	add	r2, r3
 8013330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013332:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013334:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013336:	f7fb f94f 	bl	800e5d8 <pbuf_clen>
 801333a:	4603      	mov	r3, r0
 801333c:	461a      	mov	r2, r3
 801333e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013342:	4413      	add	r3, r2
 8013344:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013348:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801334c:	8bfb      	ldrh	r3, [r7, #30]
 801334e:	4413      	add	r3, r2
 8013350:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013354:	e0dd      	b.n	8013512 <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801335c:	2b00      	cmp	r3, #0
 801335e:	f000 80d8 	beq.w	8013512 <tcp_write+0x47e>
 8013362:	4b04      	ldr	r3, [pc, #16]	; (8013374 <tcp_write+0x2e0>)
 8013364:	f240 224b 	movw	r2, #587	; 0x24b
 8013368:	490a      	ldr	r1, [pc, #40]	; (8013394 <tcp_write+0x300>)
 801336a:	4804      	ldr	r0, [pc, #16]	; (801337c <tcp_write+0x2e8>)
 801336c:	f006 fde4 	bl	8019f38 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013370:	e0cf      	b.n	8013512 <tcp_write+0x47e>
 8013372:	bf00      	nop
 8013374:	0801d7e8 	.word	0x0801d7e8
 8013378:	0801d988 	.word	0x0801d988
 801337c:	0801d83c 	.word	0x0801d83c
 8013380:	0801d9a0 	.word	0x0801d9a0
 8013384:	0801d9d4 	.word	0x0801d9d4
 8013388:	0801d9ec 	.word	0x0801d9ec
 801338c:	0801da0c 	.word	0x0801da0c
 8013390:	0801da2c 	.word	0x0801da2c
 8013394:	0801da58 	.word	0x0801da58
    struct pbuf *p;
    u16_t left = len - pos;
 8013398:	88fa      	ldrh	r2, [r7, #6]
 801339a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801339e:	1ad3      	subs	r3, r2, r3
 80133a0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80133a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80133aa:	1ad3      	subs	r3, r2, r3
 80133ac:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80133ae:	8b7a      	ldrh	r2, [r7, #26]
 80133b0:	8bbb      	ldrh	r3, [r7, #28]
 80133b2:	4293      	cmp	r3, r2
 80133b4:	bf28      	it	cs
 80133b6:	4613      	movcs	r3, r2
 80133b8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80133ba:	797b      	ldrb	r3, [r7, #5]
 80133bc:	f003 0301 	and.w	r3, r3, #1
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d036      	beq.n	8013432 <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80133c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80133c8:	b29a      	uxth	r2, r3
 80133ca:	8b3b      	ldrh	r3, [r7, #24]
 80133cc:	4413      	add	r3, r2
 80133ce:	b299      	uxth	r1, r3
 80133d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	bf0c      	ite	eq
 80133d6:	2301      	moveq	r3, #1
 80133d8:	2300      	movne	r3, #0
 80133da:	b2db      	uxtb	r3, r3
 80133dc:	f107 0012 	add.w	r0, r7, #18
 80133e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80133e2:	9302      	str	r3, [sp, #8]
 80133e4:	797b      	ldrb	r3, [r7, #5]
 80133e6:	9301      	str	r3, [sp, #4]
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	9300      	str	r3, [sp, #0]
 80133ec:	4603      	mov	r3, r0
 80133ee:	2036      	movs	r0, #54	; 0x36
 80133f0:	f7ff fd5c 	bl	8012eac <tcp_pbuf_prealloc>
 80133f4:	6338      	str	r0, [r7, #48]	; 0x30
 80133f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	f000 8178 	beq.w	80136ee <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80133fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013400:	895b      	ldrh	r3, [r3, #10]
 8013402:	8b3a      	ldrh	r2, [r7, #24]
 8013404:	429a      	cmp	r2, r3
 8013406:	d906      	bls.n	8013416 <tcp_write+0x382>
 8013408:	4b8c      	ldr	r3, [pc, #560]	; (801363c <tcp_write+0x5a8>)
 801340a:	f240 2267 	movw	r2, #615	; 0x267
 801340e:	498c      	ldr	r1, [pc, #560]	; (8013640 <tcp_write+0x5ac>)
 8013410:	488c      	ldr	r0, [pc, #560]	; (8013644 <tcp_write+0x5b0>)
 8013412:	f006 fd91 	bl	8019f38 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013418:	685a      	ldr	r2, [r3, #4]
 801341a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801341e:	18d0      	adds	r0, r2, r3
 8013420:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013424:	68ba      	ldr	r2, [r7, #8]
 8013426:	4413      	add	r3, r2
 8013428:	8b3a      	ldrh	r2, [r7, #24]
 801342a:	4619      	mov	r1, r3
 801342c:	f006 fd57 	bl	8019ede <memcpy>
 8013430:	e02f      	b.n	8013492 <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013432:	8a7b      	ldrh	r3, [r7, #18]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d006      	beq.n	8013446 <tcp_write+0x3b2>
 8013438:	4b80      	ldr	r3, [pc, #512]	; (801363c <tcp_write+0x5a8>)
 801343a:	f240 2271 	movw	r2, #625	; 0x271
 801343e:	4982      	ldr	r1, [pc, #520]	; (8013648 <tcp_write+0x5b4>)
 8013440:	4880      	ldr	r0, [pc, #512]	; (8013644 <tcp_write+0x5b0>)
 8013442:	f006 fd79 	bl	8019f38 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013446:	8b3b      	ldrh	r3, [r7, #24]
 8013448:	2201      	movs	r2, #1
 801344a:	4619      	mov	r1, r3
 801344c:	2036      	movs	r0, #54	; 0x36
 801344e:	f7fa fd55 	bl	800defc <pbuf_alloc>
 8013452:	6178      	str	r0, [r7, #20]
 8013454:	697b      	ldr	r3, [r7, #20]
 8013456:	2b00      	cmp	r3, #0
 8013458:	f000 814b 	beq.w	80136f2 <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801345c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013460:	68ba      	ldr	r2, [r7, #8]
 8013462:	441a      	add	r2, r3
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013468:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801346c:	b29b      	uxth	r3, r3
 801346e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013472:	4619      	mov	r1, r3
 8013474:	2036      	movs	r0, #54	; 0x36
 8013476:	f7fa fd41 	bl	800defc <pbuf_alloc>
 801347a:	6338      	str	r0, [r7, #48]	; 0x30
 801347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801347e:	2b00      	cmp	r3, #0
 8013480:	d103      	bne.n	801348a <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013482:	6978      	ldr	r0, [r7, #20]
 8013484:	f7fb f81a 	bl	800e4bc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013488:	e136      	b.n	80136f8 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801348a:	6979      	ldr	r1, [r7, #20]
 801348c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801348e:	f7fb f8e3 	bl	800e658 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013494:	f7fb f8a0 	bl	800e5d8 <pbuf_clen>
 8013498:	4603      	mov	r3, r0
 801349a:	461a      	mov	r2, r3
 801349c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80134a0:	4413      	add	r3, r2
 80134a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80134a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80134aa:	2b09      	cmp	r3, #9
 80134ac:	d903      	bls.n	80134b6 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80134ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134b0:	f7fb f804 	bl	800e4bc <pbuf_free>
      goto memerr;
 80134b4:	e120      	b.n	80136f8 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80134ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134be:	441a      	add	r2, r3
 80134c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134c4:	9300      	str	r3, [sp, #0]
 80134c6:	4613      	mov	r3, r2
 80134c8:	2200      	movs	r2, #0
 80134ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80134cc:	68f8      	ldr	r0, [r7, #12]
 80134ce:	f7ff fc4f 	bl	8012d70 <tcp_create_segment>
 80134d2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80134d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	f000 810d 	beq.w	80136f6 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80134dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d102      	bne.n	80134e8 <tcp_write+0x454>
      queue = seg;
 80134e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134e4:	647b      	str	r3, [r7, #68]	; 0x44
 80134e6:	e00c      	b.n	8013502 <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80134e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d106      	bne.n	80134fc <tcp_write+0x468>
 80134ee:	4b53      	ldr	r3, [pc, #332]	; (801363c <tcp_write+0x5a8>)
 80134f0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80134f4:	4955      	ldr	r1, [pc, #340]	; (801364c <tcp_write+0x5b8>)
 80134f6:	4853      	ldr	r0, [pc, #332]	; (8013644 <tcp_write+0x5b0>)
 80134f8:	f006 fd1e 	bl	8019f38 <iprintf>
      prev_seg->next = seg;
 80134fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013500:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013504:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013506:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801350a:	8b3b      	ldrh	r3, [r7, #24]
 801350c:	4413      	add	r3, r2
 801350e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013512:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013516:	88fb      	ldrh	r3, [r7, #6]
 8013518:	429a      	cmp	r2, r3
 801351a:	f4ff af3d 	bcc.w	8013398 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801351e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013520:	2b00      	cmp	r3, #0
 8013522:	d02c      	beq.n	801357e <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013526:	685b      	ldr	r3, [r3, #4]
 8013528:	62fb      	str	r3, [r7, #44]	; 0x2c
 801352a:	e01e      	b.n	801356a <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 801352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801352e:	891a      	ldrh	r2, [r3, #8]
 8013530:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013532:	4413      	add	r3, r2
 8013534:	b29a      	uxth	r2, r3
 8013536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013538:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	2b00      	cmp	r3, #0
 8013540:	d110      	bne.n	8013564 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013544:	685b      	ldr	r3, [r3, #4]
 8013546:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013548:	8952      	ldrh	r2, [r2, #10]
 801354a:	4413      	add	r3, r2
 801354c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801354e:	68b9      	ldr	r1, [r7, #8]
 8013550:	4618      	mov	r0, r3
 8013552:	f006 fcc4 	bl	8019ede <memcpy>
        p->len += oversize_used;
 8013556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013558:	895a      	ldrh	r2, [r3, #10]
 801355a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801355c:	4413      	add	r3, r2
 801355e:	b29a      	uxth	r2, r3
 8013560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013562:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	62fb      	str	r3, [r7, #44]	; 0x2c
 801356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801356c:	2b00      	cmp	r3, #0
 801356e:	d1dd      	bne.n	801352c <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8013570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013572:	891a      	ldrh	r2, [r3, #8]
 8013574:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013576:	4413      	add	r3, r2
 8013578:	b29a      	uxth	r2, r3
 801357a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801357c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801357e:	8a7a      	ldrh	r2, [r7, #18]
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013588:	2b00      	cmp	r3, #0
 801358a:	d018      	beq.n	80135be <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801358c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801358e:	2b00      	cmp	r3, #0
 8013590:	d106      	bne.n	80135a0 <tcp_write+0x50c>
 8013592:	4b2a      	ldr	r3, [pc, #168]	; (801363c <tcp_write+0x5a8>)
 8013594:	f240 22e1 	movw	r2, #737	; 0x2e1
 8013598:	492d      	ldr	r1, [pc, #180]	; (8013650 <tcp_write+0x5bc>)
 801359a:	482a      	ldr	r0, [pc, #168]	; (8013644 <tcp_write+0x5b0>)
 801359c:	f006 fccc 	bl	8019f38 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80135a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7fb f856 	bl	800e658 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80135ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135ae:	891a      	ldrh	r2, [r3, #8]
 80135b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135b2:	891b      	ldrh	r3, [r3, #8]
 80135b4:	4413      	add	r3, r2
 80135b6:	b29a      	uxth	r2, r3
 80135b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135ba:	811a      	strh	r2, [r3, #8]
 80135bc:	e037      	b.n	801362e <tcp_write+0x59a>
  } else if (extendlen > 0) {
 80135be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d034      	beq.n	801362e <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80135c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d003      	beq.n	80135d2 <tcp_write+0x53e>
 80135ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135cc:	685b      	ldr	r3, [r3, #4]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d106      	bne.n	80135e0 <tcp_write+0x54c>
 80135d2:	4b1a      	ldr	r3, [pc, #104]	; (801363c <tcp_write+0x5a8>)
 80135d4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80135d8:	491e      	ldr	r1, [pc, #120]	; (8013654 <tcp_write+0x5c0>)
 80135da:	481a      	ldr	r0, [pc, #104]	; (8013644 <tcp_write+0x5b0>)
 80135dc:	f006 fcac 	bl	8019f38 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80135e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80135e6:	e009      	b.n	80135fc <tcp_write+0x568>
      p->tot_len += extendlen;
 80135e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ea:	891a      	ldrh	r2, [r3, #8]
 80135ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80135ee:	4413      	add	r3, r2
 80135f0:	b29a      	uxth	r2, r3
 80135f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80135f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80135fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d1f1      	bne.n	80135e8 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8013604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013606:	891a      	ldrh	r2, [r3, #8]
 8013608:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801360a:	4413      	add	r3, r2
 801360c:	b29a      	uxth	r2, r3
 801360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013610:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013614:	895a      	ldrh	r2, [r3, #10]
 8013616:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013618:	4413      	add	r3, r2
 801361a:	b29a      	uxth	r2, r3
 801361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801361e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013622:	891a      	ldrh	r2, [r3, #8]
 8013624:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013626:	4413      	add	r3, r2
 8013628:	b29a      	uxth	r2, r3
 801362a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801362c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801362e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013630:	2b00      	cmp	r3, #0
 8013632:	d111      	bne.n	8013658 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013638:	66da      	str	r2, [r3, #108]	; 0x6c
 801363a:	e010      	b.n	801365e <tcp_write+0x5ca>
 801363c:	0801d7e8 	.word	0x0801d7e8
 8013640:	0801da88 	.word	0x0801da88
 8013644:	0801d83c 	.word	0x0801d83c
 8013648:	0801dac8 	.word	0x0801dac8
 801364c:	0801dad8 	.word	0x0801dad8
 8013650:	0801daec 	.word	0x0801daec
 8013654:	0801db24 	.word	0x0801db24
  } else {
    last_unsent->next = queue;
 8013658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801365a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801365c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013662:	88fb      	ldrh	r3, [r7, #6]
 8013664:	441a      	add	r2, r3
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013670:	88fb      	ldrh	r3, [r7, #6]
 8013672:	1ad3      	subs	r3, r2, r3
 8013674:	b29a      	uxth	r2, r3
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013682:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801368c:	2b00      	cmp	r3, #0
 801368e:	d00e      	beq.n	80136ae <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013694:	2b00      	cmp	r3, #0
 8013696:	d10a      	bne.n	80136ae <tcp_write+0x61a>
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801369c:	2b00      	cmp	r3, #0
 801369e:	d106      	bne.n	80136ae <tcp_write+0x61a>
 80136a0:	4b2c      	ldr	r3, [pc, #176]	; (8013754 <tcp_write+0x6c0>)
 80136a2:	f240 3213 	movw	r2, #787	; 0x313
 80136a6:	492c      	ldr	r1, [pc, #176]	; (8013758 <tcp_write+0x6c4>)
 80136a8:	482c      	ldr	r0, [pc, #176]	; (801375c <tcp_write+0x6c8>)
 80136aa:	f006 fc45 	bl	8019f38 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80136ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d016      	beq.n	80136e2 <tcp_write+0x64e>
 80136b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136b6:	68db      	ldr	r3, [r3, #12]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d012      	beq.n	80136e2 <tcp_write+0x64e>
 80136bc:	797b      	ldrb	r3, [r7, #5]
 80136be:	f003 0302 	and.w	r3, r3, #2
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d10d      	bne.n	80136e2 <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80136c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136c8:	68db      	ldr	r3, [r3, #12]
 80136ca:	899b      	ldrh	r3, [r3, #12]
 80136cc:	b29c      	uxth	r4, r3
 80136ce:	2008      	movs	r0, #8
 80136d0:	f7f9 fad6 	bl	800cc80 <lwip_htons>
 80136d4:	4603      	mov	r3, r0
 80136d6:	461a      	mov	r2, r3
 80136d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	4322      	orrs	r2, r4
 80136de:	b292      	uxth	r2, r2
 80136e0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80136e2:	2300      	movs	r3, #0
 80136e4:	e031      	b.n	801374a <tcp_write+0x6b6>
          goto memerr;
 80136e6:	bf00      	nop
 80136e8:	e006      	b.n	80136f8 <tcp_write+0x664>
            goto memerr;
 80136ea:	bf00      	nop
 80136ec:	e004      	b.n	80136f8 <tcp_write+0x664>
        goto memerr;
 80136ee:	bf00      	nop
 80136f0:	e002      	b.n	80136f8 <tcp_write+0x664>
        goto memerr;
 80136f2:	bf00      	nop
 80136f4:	e000      	b.n	80136f8 <tcp_write+0x664>
      goto memerr;
 80136f6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	8b5b      	ldrh	r3, [r3, #26]
 80136fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013700:	b29a      	uxth	r2, r3
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013708:	2b00      	cmp	r3, #0
 801370a:	d002      	beq.n	8013712 <tcp_write+0x67e>
    pbuf_free(concat_p);
 801370c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801370e:	f7fa fed5 	bl	800e4bc <pbuf_free>
  }
  if (queue != NULL) {
 8013712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013714:	2b00      	cmp	r3, #0
 8013716:	d002      	beq.n	801371e <tcp_write+0x68a>
    tcp_segs_free(queue);
 8013718:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801371a:	f7fc fb53 	bl	800fdc4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013724:	2b00      	cmp	r3, #0
 8013726:	d00e      	beq.n	8013746 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801372c:	2b00      	cmp	r3, #0
 801372e:	d10a      	bne.n	8013746 <tcp_write+0x6b2>
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013734:	2b00      	cmp	r3, #0
 8013736:	d106      	bne.n	8013746 <tcp_write+0x6b2>
 8013738:	4b06      	ldr	r3, [pc, #24]	; (8013754 <tcp_write+0x6c0>)
 801373a:	f44f 724a 	mov.w	r2, #808	; 0x328
 801373e:	4906      	ldr	r1, [pc, #24]	; (8013758 <tcp_write+0x6c4>)
 8013740:	4806      	ldr	r0, [pc, #24]	; (801375c <tcp_write+0x6c8>)
 8013742:	f006 fbf9 	bl	8019f38 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013746:	f04f 33ff 	mov.w	r3, #4294967295
}
 801374a:	4618      	mov	r0, r3
 801374c:	375c      	adds	r7, #92	; 0x5c
 801374e:	46bd      	mov	sp, r7
 8013750:	bd90      	pop	{r4, r7, pc}
 8013752:	bf00      	nop
 8013754:	0801d7e8 	.word	0x0801d7e8
 8013758:	0801db5c 	.word	0x0801db5c
 801375c:	0801d83c 	.word	0x0801d83c

08013760 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013760:	b590      	push	{r4, r7, lr}
 8013762:	b08b      	sub	sp, #44	; 0x2c
 8013764:	af02      	add	r7, sp, #8
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	460b      	mov	r3, r1
 801376a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801376c:	2300      	movs	r3, #0
 801376e:	61fb      	str	r3, [r7, #28]
 8013770:	2300      	movs	r3, #0
 8013772:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013774:	2300      	movs	r3, #0
 8013776:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	2b00      	cmp	r3, #0
 801377c:	d106      	bne.n	801378c <tcp_split_unsent_seg+0x2c>
 801377e:	4b95      	ldr	r3, [pc, #596]	; (80139d4 <tcp_split_unsent_seg+0x274>)
 8013780:	f240 324b 	movw	r2, #843	; 0x34b
 8013784:	4994      	ldr	r1, [pc, #592]	; (80139d8 <tcp_split_unsent_seg+0x278>)
 8013786:	4895      	ldr	r0, [pc, #596]	; (80139dc <tcp_split_unsent_seg+0x27c>)
 8013788:	f006 fbd6 	bl	8019f38 <iprintf>

  useg = pcb->unsent;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013790:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	2b00      	cmp	r3, #0
 8013796:	d102      	bne.n	801379e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013798:	f04f 33ff 	mov.w	r3, #4294967295
 801379c:	e116      	b.n	80139cc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801379e:	887b      	ldrh	r3, [r7, #2]
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d109      	bne.n	80137b8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80137a4:	4b8b      	ldr	r3, [pc, #556]	; (80139d4 <tcp_split_unsent_seg+0x274>)
 80137a6:	f240 3253 	movw	r2, #851	; 0x353
 80137aa:	498d      	ldr	r1, [pc, #564]	; (80139e0 <tcp_split_unsent_seg+0x280>)
 80137ac:	488b      	ldr	r0, [pc, #556]	; (80139dc <tcp_split_unsent_seg+0x27c>)
 80137ae:	f006 fbc3 	bl	8019f38 <iprintf>
    return ERR_VAL;
 80137b2:	f06f 0305 	mvn.w	r3, #5
 80137b6:	e109      	b.n	80139cc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	891b      	ldrh	r3, [r3, #8]
 80137bc:	887a      	ldrh	r2, [r7, #2]
 80137be:	429a      	cmp	r2, r3
 80137c0:	d301      	bcc.n	80137c6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80137c2:	2300      	movs	r3, #0
 80137c4:	e102      	b.n	80139cc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80137ca:	887a      	ldrh	r2, [r7, #2]
 80137cc:	429a      	cmp	r2, r3
 80137ce:	d906      	bls.n	80137de <tcp_split_unsent_seg+0x7e>
 80137d0:	4b80      	ldr	r3, [pc, #512]	; (80139d4 <tcp_split_unsent_seg+0x274>)
 80137d2:	f240 325b 	movw	r2, #859	; 0x35b
 80137d6:	4983      	ldr	r1, [pc, #524]	; (80139e4 <tcp_split_unsent_seg+0x284>)
 80137d8:	4880      	ldr	r0, [pc, #512]	; (80139dc <tcp_split_unsent_seg+0x27c>)
 80137da:	f006 fbad 	bl	8019f38 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	891b      	ldrh	r3, [r3, #8]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d106      	bne.n	80137f4 <tcp_split_unsent_seg+0x94>
 80137e6:	4b7b      	ldr	r3, [pc, #492]	; (80139d4 <tcp_split_unsent_seg+0x274>)
 80137e8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80137ec:	497e      	ldr	r1, [pc, #504]	; (80139e8 <tcp_split_unsent_seg+0x288>)
 80137ee:	487b      	ldr	r0, [pc, #492]	; (80139dc <tcp_split_unsent_seg+0x27c>)
 80137f0:	f006 fba2 	bl	8019f38 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80137f4:	697b      	ldr	r3, [r7, #20]
 80137f6:	7a9b      	ldrb	r3, [r3, #10]
 80137f8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80137fa:	7bfb      	ldrb	r3, [r7, #15]
 80137fc:	009b      	lsls	r3, r3, #2
 80137fe:	b2db      	uxtb	r3, r3
 8013800:	f003 0304 	and.w	r3, r3, #4
 8013804:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013806:	697b      	ldr	r3, [r7, #20]
 8013808:	891a      	ldrh	r2, [r3, #8]
 801380a:	887b      	ldrh	r3, [r7, #2]
 801380c:	1ad3      	subs	r3, r2, r3
 801380e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013810:	7bbb      	ldrb	r3, [r7, #14]
 8013812:	b29a      	uxth	r2, r3
 8013814:	89bb      	ldrh	r3, [r7, #12]
 8013816:	4413      	add	r3, r2
 8013818:	b29b      	uxth	r3, r3
 801381a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801381e:	4619      	mov	r1, r3
 8013820:	2036      	movs	r0, #54	; 0x36
 8013822:	f7fa fb6b 	bl	800defc <pbuf_alloc>
 8013826:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013828:	693b      	ldr	r3, [r7, #16]
 801382a:	2b00      	cmp	r3, #0
 801382c:	f000 80b7 	beq.w	801399e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	685b      	ldr	r3, [r3, #4]
 8013834:	891a      	ldrh	r2, [r3, #8]
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	891b      	ldrh	r3, [r3, #8]
 801383a:	1ad3      	subs	r3, r2, r3
 801383c:	b29a      	uxth	r2, r3
 801383e:	887b      	ldrh	r3, [r7, #2]
 8013840:	4413      	add	r3, r2
 8013842:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013844:	697b      	ldr	r3, [r7, #20]
 8013846:	6858      	ldr	r0, [r3, #4]
 8013848:	693b      	ldr	r3, [r7, #16]
 801384a:	685a      	ldr	r2, [r3, #4]
 801384c:	7bbb      	ldrb	r3, [r7, #14]
 801384e:	18d1      	adds	r1, r2, r3
 8013850:	897b      	ldrh	r3, [r7, #10]
 8013852:	89ba      	ldrh	r2, [r7, #12]
 8013854:	f7fb f838 	bl	800e8c8 <pbuf_copy_partial>
 8013858:	4603      	mov	r3, r0
 801385a:	461a      	mov	r2, r3
 801385c:	89bb      	ldrh	r3, [r7, #12]
 801385e:	4293      	cmp	r3, r2
 8013860:	f040 809f 	bne.w	80139a2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	68db      	ldr	r3, [r3, #12]
 8013868:	899b      	ldrh	r3, [r3, #12]
 801386a:	b29b      	uxth	r3, r3
 801386c:	4618      	mov	r0, r3
 801386e:	f7f9 fa07 	bl	800cc80 <lwip_htons>
 8013872:	4603      	mov	r3, r0
 8013874:	b2db      	uxtb	r3, r3
 8013876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801387a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801387c:	2300      	movs	r3, #0
 801387e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013880:	7efb      	ldrb	r3, [r7, #27]
 8013882:	f003 0308 	and.w	r3, r3, #8
 8013886:	2b00      	cmp	r3, #0
 8013888:	d007      	beq.n	801389a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801388a:	7efb      	ldrb	r3, [r7, #27]
 801388c:	f023 0308 	bic.w	r3, r3, #8
 8013890:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013892:	7ebb      	ldrb	r3, [r7, #26]
 8013894:	f043 0308 	orr.w	r3, r3, #8
 8013898:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801389a:	7efb      	ldrb	r3, [r7, #27]
 801389c:	f003 0301 	and.w	r3, r3, #1
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d007      	beq.n	80138b4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80138a4:	7efb      	ldrb	r3, [r7, #27]
 80138a6:	f023 0301 	bic.w	r3, r3, #1
 80138aa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80138ac:	7ebb      	ldrb	r3, [r7, #26]
 80138ae:	f043 0301 	orr.w	r3, r3, #1
 80138b2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	68db      	ldr	r3, [r3, #12]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7f9 f9f5 	bl	800ccaa <lwip_htonl>
 80138c0:	4602      	mov	r2, r0
 80138c2:	887b      	ldrh	r3, [r7, #2]
 80138c4:	18d1      	adds	r1, r2, r3
 80138c6:	7eba      	ldrb	r2, [r7, #26]
 80138c8:	7bfb      	ldrb	r3, [r7, #15]
 80138ca:	9300      	str	r3, [sp, #0]
 80138cc:	460b      	mov	r3, r1
 80138ce:	6939      	ldr	r1, [r7, #16]
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f7ff fa4d 	bl	8012d70 <tcp_create_segment>
 80138d6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80138d8:	69fb      	ldr	r3, [r7, #28]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d063      	beq.n	80139a6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80138de:	697b      	ldr	r3, [r7, #20]
 80138e0:	685b      	ldr	r3, [r3, #4]
 80138e2:	4618      	mov	r0, r3
 80138e4:	f7fa fe78 	bl	800e5d8 <pbuf_clen>
 80138e8:	4603      	mov	r3, r0
 80138ea:	461a      	mov	r2, r3
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80138f2:	1a9b      	subs	r3, r3, r2
 80138f4:	b29a      	uxth	r2, r3
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	6858      	ldr	r0, [r3, #4]
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	685b      	ldr	r3, [r3, #4]
 8013904:	891a      	ldrh	r2, [r3, #8]
 8013906:	89bb      	ldrh	r3, [r7, #12]
 8013908:	1ad3      	subs	r3, r2, r3
 801390a:	b29b      	uxth	r3, r3
 801390c:	4619      	mov	r1, r3
 801390e:	f7fa fc4f 	bl	800e1b0 <pbuf_realloc>
  useg->len -= remainder;
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	891a      	ldrh	r2, [r3, #8]
 8013916:	89bb      	ldrh	r3, [r7, #12]
 8013918:	1ad3      	subs	r3, r2, r3
 801391a:	b29a      	uxth	r2, r3
 801391c:	697b      	ldr	r3, [r7, #20]
 801391e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	68db      	ldr	r3, [r3, #12]
 8013924:	899b      	ldrh	r3, [r3, #12]
 8013926:	b29c      	uxth	r4, r3
 8013928:	7efb      	ldrb	r3, [r7, #27]
 801392a:	b29b      	uxth	r3, r3
 801392c:	4618      	mov	r0, r3
 801392e:	f7f9 f9a7 	bl	800cc80 <lwip_htons>
 8013932:	4603      	mov	r3, r0
 8013934:	461a      	mov	r2, r3
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	68db      	ldr	r3, [r3, #12]
 801393a:	4322      	orrs	r2, r4
 801393c:	b292      	uxth	r2, r2
 801393e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	685b      	ldr	r3, [r3, #4]
 8013944:	4618      	mov	r0, r3
 8013946:	f7fa fe47 	bl	800e5d8 <pbuf_clen>
 801394a:	4603      	mov	r3, r0
 801394c:	461a      	mov	r2, r3
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013954:	4413      	add	r3, r2
 8013956:	b29a      	uxth	r2, r3
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801395e:	69fb      	ldr	r3, [r7, #28]
 8013960:	685b      	ldr	r3, [r3, #4]
 8013962:	4618      	mov	r0, r3
 8013964:	f7fa fe38 	bl	800e5d8 <pbuf_clen>
 8013968:	4603      	mov	r3, r0
 801396a:	461a      	mov	r2, r3
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013972:	4413      	add	r3, r2
 8013974:	b29a      	uxth	r2, r3
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801397c:	697b      	ldr	r3, [r7, #20]
 801397e:	681a      	ldr	r2, [r3, #0]
 8013980:	69fb      	ldr	r3, [r7, #28]
 8013982:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	69fa      	ldr	r2, [r7, #28]
 8013988:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801398a:	69fb      	ldr	r3, [r7, #28]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d103      	bne.n	801399a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	2200      	movs	r2, #0
 8013996:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801399a:	2300      	movs	r3, #0
 801399c:	e016      	b.n	80139cc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801399e:	bf00      	nop
 80139a0:	e002      	b.n	80139a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80139a2:	bf00      	nop
 80139a4:	e000      	b.n	80139a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80139a6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80139a8:	69fb      	ldr	r3, [r7, #28]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d006      	beq.n	80139bc <tcp_split_unsent_seg+0x25c>
 80139ae:	4b09      	ldr	r3, [pc, #36]	; (80139d4 <tcp_split_unsent_seg+0x274>)
 80139b0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80139b4:	490d      	ldr	r1, [pc, #52]	; (80139ec <tcp_split_unsent_seg+0x28c>)
 80139b6:	4809      	ldr	r0, [pc, #36]	; (80139dc <tcp_split_unsent_seg+0x27c>)
 80139b8:	f006 fabe 	bl	8019f38 <iprintf>
  if (p != NULL) {
 80139bc:	693b      	ldr	r3, [r7, #16]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d002      	beq.n	80139c8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80139c2:	6938      	ldr	r0, [r7, #16]
 80139c4:	f7fa fd7a 	bl	800e4bc <pbuf_free>
  }

  return ERR_MEM;
 80139c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80139cc:	4618      	mov	r0, r3
 80139ce:	3724      	adds	r7, #36	; 0x24
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd90      	pop	{r4, r7, pc}
 80139d4:	0801d7e8 	.word	0x0801d7e8
 80139d8:	0801db7c 	.word	0x0801db7c
 80139dc:	0801d83c 	.word	0x0801d83c
 80139e0:	0801dba0 	.word	0x0801dba0
 80139e4:	0801dbc4 	.word	0x0801dbc4
 80139e8:	0801dbd4 	.word	0x0801dbd4
 80139ec:	0801dbe4 	.word	0x0801dbe4

080139f0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80139f0:	b590      	push	{r4, r7, lr}
 80139f2:	b085      	sub	sp, #20
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d106      	bne.n	8013a0c <tcp_send_fin+0x1c>
 80139fe:	4b21      	ldr	r3, [pc, #132]	; (8013a84 <tcp_send_fin+0x94>)
 8013a00:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013a04:	4920      	ldr	r1, [pc, #128]	; (8013a88 <tcp_send_fin+0x98>)
 8013a06:	4821      	ldr	r0, [pc, #132]	; (8013a8c <tcp_send_fin+0x9c>)
 8013a08:	f006 fa96 	bl	8019f38 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d02e      	beq.n	8013a72 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a18:	60fb      	str	r3, [r7, #12]
 8013a1a:	e002      	b.n	8013a22 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d1f8      	bne.n	8013a1c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	68db      	ldr	r3, [r3, #12]
 8013a2e:	899b      	ldrh	r3, [r3, #12]
 8013a30:	b29b      	uxth	r3, r3
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7f9 f924 	bl	800cc80 <lwip_htons>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	b2db      	uxtb	r3, r3
 8013a3c:	f003 0307 	and.w	r3, r3, #7
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d116      	bne.n	8013a72 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	68db      	ldr	r3, [r3, #12]
 8013a48:	899b      	ldrh	r3, [r3, #12]
 8013a4a:	b29c      	uxth	r4, r3
 8013a4c:	2001      	movs	r0, #1
 8013a4e:	f7f9 f917 	bl	800cc80 <lwip_htons>
 8013a52:	4603      	mov	r3, r0
 8013a54:	461a      	mov	r2, r3
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	68db      	ldr	r3, [r3, #12]
 8013a5a:	4322      	orrs	r2, r4
 8013a5c:	b292      	uxth	r2, r2
 8013a5e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	8b5b      	ldrh	r3, [r3, #26]
 8013a64:	f043 0320 	orr.w	r3, r3, #32
 8013a68:	b29a      	uxth	r2, r3
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	e004      	b.n	8013a7c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013a72:	2101      	movs	r1, #1
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f000 f80b 	bl	8013a90 <tcp_enqueue_flags>
 8013a7a:	4603      	mov	r3, r0
}
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3714      	adds	r7, #20
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd90      	pop	{r4, r7, pc}
 8013a84:	0801d7e8 	.word	0x0801d7e8
 8013a88:	0801dbf0 	.word	0x0801dbf0
 8013a8c:	0801d83c 	.word	0x0801d83c

08013a90 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b08a      	sub	sp, #40	; 0x28
 8013a94:	af02      	add	r7, sp, #8
 8013a96:	6078      	str	r0, [r7, #4]
 8013a98:	460b      	mov	r3, r1
 8013a9a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013aa0:	2300      	movs	r3, #0
 8013aa2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013aa4:	78fb      	ldrb	r3, [r7, #3]
 8013aa6:	f003 0303 	and.w	r3, r3, #3
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d106      	bne.n	8013abc <tcp_enqueue_flags+0x2c>
 8013aae:	4b67      	ldr	r3, [pc, #412]	; (8013c4c <tcp_enqueue_flags+0x1bc>)
 8013ab0:	f240 4212 	movw	r2, #1042	; 0x412
 8013ab4:	4966      	ldr	r1, [pc, #408]	; (8013c50 <tcp_enqueue_flags+0x1c0>)
 8013ab6:	4867      	ldr	r0, [pc, #412]	; (8013c54 <tcp_enqueue_flags+0x1c4>)
 8013ab8:	f006 fa3e 	bl	8019f38 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d106      	bne.n	8013ad0 <tcp_enqueue_flags+0x40>
 8013ac2:	4b62      	ldr	r3, [pc, #392]	; (8013c4c <tcp_enqueue_flags+0x1bc>)
 8013ac4:	f240 4213 	movw	r2, #1043	; 0x413
 8013ac8:	4963      	ldr	r1, [pc, #396]	; (8013c58 <tcp_enqueue_flags+0x1c8>)
 8013aca:	4862      	ldr	r0, [pc, #392]	; (8013c54 <tcp_enqueue_flags+0x1c4>)
 8013acc:	f006 fa34 	bl	8019f38 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013ad0:	78fb      	ldrb	r3, [r7, #3]
 8013ad2:	f003 0302 	and.w	r3, r3, #2
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d001      	beq.n	8013ade <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013ada:	2301      	movs	r3, #1
 8013adc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013ade:	7ffb      	ldrb	r3, [r7, #31]
 8013ae0:	009b      	lsls	r3, r3, #2
 8013ae2:	b2db      	uxtb	r3, r3
 8013ae4:	f003 0304 	and.w	r3, r3, #4
 8013ae8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013aea:	7dfb      	ldrb	r3, [r7, #23]
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013af2:	4619      	mov	r1, r3
 8013af4:	2036      	movs	r0, #54	; 0x36
 8013af6:	f7fa fa01 	bl	800defc <pbuf_alloc>
 8013afa:	6138      	str	r0, [r7, #16]
 8013afc:	693b      	ldr	r3, [r7, #16]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d109      	bne.n	8013b16 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	8b5b      	ldrh	r3, [r3, #26]
 8013b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b0a:	b29a      	uxth	r2, r3
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013b10:	f04f 33ff 	mov.w	r3, #4294967295
 8013b14:	e095      	b.n	8013c42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	895a      	ldrh	r2, [r3, #10]
 8013b1a:	7dfb      	ldrb	r3, [r7, #23]
 8013b1c:	b29b      	uxth	r3, r3
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d206      	bcs.n	8013b30 <tcp_enqueue_flags+0xa0>
 8013b22:	4b4a      	ldr	r3, [pc, #296]	; (8013c4c <tcp_enqueue_flags+0x1bc>)
 8013b24:	f240 423a 	movw	r2, #1082	; 0x43a
 8013b28:	494c      	ldr	r1, [pc, #304]	; (8013c5c <tcp_enqueue_flags+0x1cc>)
 8013b2a:	484a      	ldr	r0, [pc, #296]	; (8013c54 <tcp_enqueue_flags+0x1c4>)
 8013b2c:	f006 fa04 	bl	8019f38 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013b34:	78fa      	ldrb	r2, [r7, #3]
 8013b36:	7ffb      	ldrb	r3, [r7, #31]
 8013b38:	9300      	str	r3, [sp, #0]
 8013b3a:	460b      	mov	r3, r1
 8013b3c:	6939      	ldr	r1, [r7, #16]
 8013b3e:	6878      	ldr	r0, [r7, #4]
 8013b40:	f7ff f916 	bl	8012d70 <tcp_create_segment>
 8013b44:	60f8      	str	r0, [r7, #12]
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d109      	bne.n	8013b60 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	8b5b      	ldrh	r3, [r3, #26]
 8013b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b54:	b29a      	uxth	r2, r3
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8013b5e:	e070      	b.n	8013c42 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	68db      	ldr	r3, [r3, #12]
 8013b64:	f003 0303 	and.w	r3, r3, #3
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d006      	beq.n	8013b7a <tcp_enqueue_flags+0xea>
 8013b6c:	4b37      	ldr	r3, [pc, #220]	; (8013c4c <tcp_enqueue_flags+0x1bc>)
 8013b6e:	f240 4242 	movw	r2, #1090	; 0x442
 8013b72:	493b      	ldr	r1, [pc, #236]	; (8013c60 <tcp_enqueue_flags+0x1d0>)
 8013b74:	4837      	ldr	r0, [pc, #220]	; (8013c54 <tcp_enqueue_flags+0x1c4>)
 8013b76:	f006 f9df 	bl	8019f38 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	891b      	ldrh	r3, [r3, #8]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d006      	beq.n	8013b90 <tcp_enqueue_flags+0x100>
 8013b82:	4b32      	ldr	r3, [pc, #200]	; (8013c4c <tcp_enqueue_flags+0x1bc>)
 8013b84:	f240 4243 	movw	r2, #1091	; 0x443
 8013b88:	4936      	ldr	r1, [pc, #216]	; (8013c64 <tcp_enqueue_flags+0x1d4>)
 8013b8a:	4832      	ldr	r0, [pc, #200]	; (8013c54 <tcp_enqueue_flags+0x1c4>)
 8013b8c:	f006 f9d4 	bl	8019f38 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d103      	bne.n	8013ba0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	68fa      	ldr	r2, [r7, #12]
 8013b9c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013b9e:	e00d      	b.n	8013bbc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ba4:	61bb      	str	r3, [r7, #24]
 8013ba6:	e002      	b.n	8013bae <tcp_enqueue_flags+0x11e>
 8013ba8:	69bb      	ldr	r3, [r7, #24]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	61bb      	str	r3, [r7, #24]
 8013bae:	69bb      	ldr	r3, [r7, #24]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d1f8      	bne.n	8013ba8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013bb6:	69bb      	ldr	r3, [r7, #24]
 8013bb8:	68fa      	ldr	r2, [r7, #12]
 8013bba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013bc4:	78fb      	ldrb	r3, [r7, #3]
 8013bc6:	f003 0302 	and.w	r3, r3, #2
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d104      	bne.n	8013bd8 <tcp_enqueue_flags+0x148>
 8013bce:	78fb      	ldrb	r3, [r7, #3]
 8013bd0:	f003 0301 	and.w	r3, r3, #1
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d004      	beq.n	8013be2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013bdc:	1c5a      	adds	r2, r3, #1
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013be2:	78fb      	ldrb	r3, [r7, #3]
 8013be4:	f003 0301 	and.w	r3, r3, #1
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d006      	beq.n	8013bfa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	8b5b      	ldrh	r3, [r3, #26]
 8013bf0:	f043 0320 	orr.w	r3, r3, #32
 8013bf4:	b29a      	uxth	r2, r3
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	685b      	ldr	r3, [r3, #4]
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f7fa fcea 	bl	800e5d8 <pbuf_clen>
 8013c04:	4603      	mov	r3, r0
 8013c06:	461a      	mov	r2, r3
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c0e:	4413      	add	r3, r2
 8013c10:	b29a      	uxth	r2, r3
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d00e      	beq.n	8013c40 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d10a      	bne.n	8013c40 <tcp_enqueue_flags+0x1b0>
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d106      	bne.n	8013c40 <tcp_enqueue_flags+0x1b0>
 8013c32:	4b06      	ldr	r3, [pc, #24]	; (8013c4c <tcp_enqueue_flags+0x1bc>)
 8013c34:	f240 4266 	movw	r2, #1126	; 0x466
 8013c38:	490b      	ldr	r1, [pc, #44]	; (8013c68 <tcp_enqueue_flags+0x1d8>)
 8013c3a:	4806      	ldr	r0, [pc, #24]	; (8013c54 <tcp_enqueue_flags+0x1c4>)
 8013c3c:	f006 f97c 	bl	8019f38 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013c40:	2300      	movs	r3, #0
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	3720      	adds	r7, #32
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}
 8013c4a:	bf00      	nop
 8013c4c:	0801d7e8 	.word	0x0801d7e8
 8013c50:	0801dc0c 	.word	0x0801dc0c
 8013c54:	0801d83c 	.word	0x0801d83c
 8013c58:	0801dc64 	.word	0x0801dc64
 8013c5c:	0801dc84 	.word	0x0801dc84
 8013c60:	0801dcc0 	.word	0x0801dcc0
 8013c64:	0801dcd8 	.word	0x0801dcd8
 8013c68:	0801dd04 	.word	0x0801dd04

08013c6c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013c6c:	b5b0      	push	{r4, r5, r7, lr}
 8013c6e:	b08a      	sub	sp, #40	; 0x28
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d106      	bne.n	8013c88 <tcp_output+0x1c>
 8013c7a:	4ba0      	ldr	r3, [pc, #640]	; (8013efc <tcp_output+0x290>)
 8013c7c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013c80:	499f      	ldr	r1, [pc, #636]	; (8013f00 <tcp_output+0x294>)
 8013c82:	48a0      	ldr	r0, [pc, #640]	; (8013f04 <tcp_output+0x298>)
 8013c84:	f006 f958 	bl	8019f38 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	7d1b      	ldrb	r3, [r3, #20]
 8013c8c:	2b01      	cmp	r3, #1
 8013c8e:	d106      	bne.n	8013c9e <tcp_output+0x32>
 8013c90:	4b9a      	ldr	r3, [pc, #616]	; (8013efc <tcp_output+0x290>)
 8013c92:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8013c96:	499c      	ldr	r1, [pc, #624]	; (8013f08 <tcp_output+0x29c>)
 8013c98:	489a      	ldr	r0, [pc, #616]	; (8013f04 <tcp_output+0x298>)
 8013c9a:	f006 f94d 	bl	8019f38 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013c9e:	4b9b      	ldr	r3, [pc, #620]	; (8013f0c <tcp_output+0x2a0>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	687a      	ldr	r2, [r7, #4]
 8013ca4:	429a      	cmp	r2, r3
 8013ca6:	d101      	bne.n	8013cac <tcp_output+0x40>
    return ERR_OK;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	e1d2      	b.n	8014052 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d203      	bcs.n	8013cc4 <tcp_output+0x58>
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013cc2:	e002      	b.n	8013cca <tcp_output+0x5e>
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013cca:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cd0:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d10b      	bne.n	8013cf0 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	8b5b      	ldrh	r3, [r3, #26]
 8013cdc:	f003 0302 	and.w	r3, r3, #2
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	f000 81a9 	beq.w	8014038 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f000 fdd6 	bl	8014898 <tcp_send_empty_ack>
 8013cec:	4603      	mov	r3, r0
 8013cee:	e1b0      	b.n	8014052 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013cf0:	6879      	ldr	r1, [r7, #4]
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	3304      	adds	r3, #4
 8013cf6:	461a      	mov	r2, r3
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f7ff f81d 	bl	8012d38 <tcp_route>
 8013cfe:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d102      	bne.n	8013d0c <tcp_output+0xa0>
    return ERR_RTE;
 8013d06:	f06f 0303 	mvn.w	r3, #3
 8013d0a:	e1a2      	b.n	8014052 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d003      	beq.n	8013d1a <tcp_output+0xae>
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d111      	bne.n	8013d3e <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013d1a:	697b      	ldr	r3, [r7, #20]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d002      	beq.n	8013d26 <tcp_output+0xba>
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	3304      	adds	r3, #4
 8013d24:	e000      	b.n	8013d28 <tcp_output+0xbc>
 8013d26:	2300      	movs	r3, #0
 8013d28:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013d2a:	693b      	ldr	r3, [r7, #16]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d102      	bne.n	8013d36 <tcp_output+0xca>
      return ERR_RTE;
 8013d30:	f06f 0303 	mvn.w	r3, #3
 8013d34:	e18d      	b.n	8014052 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	681a      	ldr	r2, [r3, #0]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d40:	68db      	ldr	r3, [r3, #12]
 8013d42:	685b      	ldr	r3, [r3, #4]
 8013d44:	4618      	mov	r0, r3
 8013d46:	f7f8 ffb0 	bl	800ccaa <lwip_htonl>
 8013d4a:	4602      	mov	r2, r0
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d50:	1ad3      	subs	r3, r2, r3
 8013d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d54:	8912      	ldrh	r2, [r2, #8]
 8013d56:	4413      	add	r3, r2
 8013d58:	69ba      	ldr	r2, [r7, #24]
 8013d5a:	429a      	cmp	r2, r3
 8013d5c:	d227      	bcs.n	8013dae <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013d64:	461a      	mov	r2, r3
 8013d66:	69bb      	ldr	r3, [r7, #24]
 8013d68:	4293      	cmp	r3, r2
 8013d6a:	d114      	bne.n	8013d96 <tcp_output+0x12a>
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d110      	bne.n	8013d96 <tcp_output+0x12a>
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d10b      	bne.n	8013d96 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	2200      	movs	r2, #0
 8013d82:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2201      	movs	r2, #1
 8013d8a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	2200      	movs	r2, #0
 8013d92:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	8b5b      	ldrh	r3, [r3, #26]
 8013d9a:	f003 0302 	and.w	r3, r3, #2
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	f000 814c 	beq.w	801403c <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f000 fd77 	bl	8014898 <tcp_send_empty_ack>
 8013daa:	4603      	mov	r3, r0
 8013dac:	e151      	b.n	8014052 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2200      	movs	r2, #0
 8013db2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013dba:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013dbc:	6a3b      	ldr	r3, [r7, #32]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	f000 811b 	beq.w	8013ffa <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8013dc4:	e002      	b.n	8013dcc <tcp_output+0x160>
 8013dc6:	6a3b      	ldr	r3, [r7, #32]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	623b      	str	r3, [r7, #32]
 8013dcc:	6a3b      	ldr	r3, [r7, #32]
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d1f8      	bne.n	8013dc6 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013dd4:	e111      	b.n	8013ffa <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	899b      	ldrh	r3, [r3, #12]
 8013ddc:	b29b      	uxth	r3, r3
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7f8 ff4e 	bl	800cc80 <lwip_htons>
 8013de4:	4603      	mov	r3, r0
 8013de6:	b2db      	uxtb	r3, r3
 8013de8:	f003 0304 	and.w	r3, r3, #4
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d006      	beq.n	8013dfe <tcp_output+0x192>
 8013df0:	4b42      	ldr	r3, [pc, #264]	; (8013efc <tcp_output+0x290>)
 8013df2:	f240 5237 	movw	r2, #1335	; 0x537
 8013df6:	4946      	ldr	r1, [pc, #280]	; (8013f10 <tcp_output+0x2a4>)
 8013df8:	4842      	ldr	r0, [pc, #264]	; (8013f04 <tcp_output+0x298>)
 8013dfa:	f006 f89d 	bl	8019f38 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d01f      	beq.n	8013e46 <tcp_output+0x1da>
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	8b5b      	ldrh	r3, [r3, #26]
 8013e0a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d119      	bne.n	8013e46 <tcp_output+0x1da>
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d00b      	beq.n	8013e32 <tcp_output+0x1c6>
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d110      	bne.n	8013e46 <tcp_output+0x1da>
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e28:	891a      	ldrh	r2, [r3, #8]
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e2e:	429a      	cmp	r2, r3
 8013e30:	d209      	bcs.n	8013e46 <tcp_output+0x1da>
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d004      	beq.n	8013e46 <tcp_output+0x1da>
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e42:	2b08      	cmp	r3, #8
 8013e44:	d901      	bls.n	8013e4a <tcp_output+0x1de>
 8013e46:	2301      	movs	r3, #1
 8013e48:	e000      	b.n	8013e4c <tcp_output+0x1e0>
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d106      	bne.n	8013e5e <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	8b5b      	ldrh	r3, [r3, #26]
 8013e54:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	f000 80e3 	beq.w	8014024 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	7d1b      	ldrb	r3, [r3, #20]
 8013e62:	2b02      	cmp	r3, #2
 8013e64:	d00d      	beq.n	8013e82 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e68:	68db      	ldr	r3, [r3, #12]
 8013e6a:	899b      	ldrh	r3, [r3, #12]
 8013e6c:	b29c      	uxth	r4, r3
 8013e6e:	2010      	movs	r0, #16
 8013e70:	f7f8 ff06 	bl	800cc80 <lwip_htons>
 8013e74:	4603      	mov	r3, r0
 8013e76:	461a      	mov	r2, r3
 8013e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e7a:	68db      	ldr	r3, [r3, #12]
 8013e7c:	4322      	orrs	r2, r4
 8013e7e:	b292      	uxth	r2, r2
 8013e80:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013e82:	697a      	ldr	r2, [r7, #20]
 8013e84:	6879      	ldr	r1, [r7, #4]
 8013e86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e88:	f000 f908 	bl	801409c <tcp_output_segment>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d009      	beq.n	8013eac <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	8b5b      	ldrh	r3, [r3, #26]
 8013e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ea0:	b29a      	uxth	r2, r3
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	835a      	strh	r2, [r3, #26]
      return err;
 8013ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013eaa:	e0d2      	b.n	8014052 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eae:	681a      	ldr	r2, [r3, #0]
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	7d1b      	ldrb	r3, [r3, #20]
 8013eb8:	2b02      	cmp	r3, #2
 8013eba:	d006      	beq.n	8013eca <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	8b5b      	ldrh	r3, [r3, #26]
 8013ec0:	f023 0303 	bic.w	r3, r3, #3
 8013ec4:	b29a      	uxth	r2, r3
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ecc:	68db      	ldr	r3, [r3, #12]
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	4618      	mov	r0, r3
 8013ed2:	f7f8 feea 	bl	800ccaa <lwip_htonl>
 8013ed6:	4604      	mov	r4, r0
 8013ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eda:	891b      	ldrh	r3, [r3, #8]
 8013edc:	461d      	mov	r5, r3
 8013ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee0:	68db      	ldr	r3, [r3, #12]
 8013ee2:	899b      	ldrh	r3, [r3, #12]
 8013ee4:	b29b      	uxth	r3, r3
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7f8 feca 	bl	800cc80 <lwip_htons>
 8013eec:	4603      	mov	r3, r0
 8013eee:	b2db      	uxtb	r3, r3
 8013ef0:	f003 0303 	and.w	r3, r3, #3
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d00d      	beq.n	8013f14 <tcp_output+0x2a8>
 8013ef8:	2301      	movs	r3, #1
 8013efa:	e00c      	b.n	8013f16 <tcp_output+0x2aa>
 8013efc:	0801d7e8 	.word	0x0801d7e8
 8013f00:	0801dd2c 	.word	0x0801dd2c
 8013f04:	0801d83c 	.word	0x0801d83c
 8013f08:	0801dd44 	.word	0x0801dd44
 8013f0c:	20016eb8 	.word	0x20016eb8
 8013f10:	0801dd6c 	.word	0x0801dd6c
 8013f14:	2300      	movs	r3, #0
 8013f16:	442b      	add	r3, r5
 8013f18:	4423      	add	r3, r4
 8013f1a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	1ad3      	subs	r3, r2, r3
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	da02      	bge.n	8013f2e <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	68ba      	ldr	r2, [r7, #8]
 8013f2c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f30:	891b      	ldrh	r3, [r3, #8]
 8013f32:	461c      	mov	r4, r3
 8013f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f36:	68db      	ldr	r3, [r3, #12]
 8013f38:	899b      	ldrh	r3, [r3, #12]
 8013f3a:	b29b      	uxth	r3, r3
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7f8 fe9f 	bl	800cc80 <lwip_htons>
 8013f42:	4603      	mov	r3, r0
 8013f44:	b2db      	uxtb	r3, r3
 8013f46:	f003 0303 	and.w	r3, r3, #3
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d001      	beq.n	8013f52 <tcp_output+0x2e6>
 8013f4e:	2301      	movs	r3, #1
 8013f50:	e000      	b.n	8013f54 <tcp_output+0x2e8>
 8013f52:	2300      	movs	r3, #0
 8013f54:	4423      	add	r3, r4
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d049      	beq.n	8013fee <tcp_output+0x382>
      seg->next = NULL;
 8013f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d105      	bne.n	8013f74 <tcp_output+0x308>
        pcb->unacked = seg;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f6c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8013f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f70:	623b      	str	r3, [r7, #32]
 8013f72:	e03f      	b.n	8013ff4 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f76:	68db      	ldr	r3, [r3, #12]
 8013f78:	685b      	ldr	r3, [r3, #4]
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7f8 fe95 	bl	800ccaa <lwip_htonl>
 8013f80:	4604      	mov	r4, r0
 8013f82:	6a3b      	ldr	r3, [r7, #32]
 8013f84:	68db      	ldr	r3, [r3, #12]
 8013f86:	685b      	ldr	r3, [r3, #4]
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f7f8 fe8e 	bl	800ccaa <lwip_htonl>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	1ae3      	subs	r3, r4, r3
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	da24      	bge.n	8013fe0 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	3370      	adds	r3, #112	; 0x70
 8013f9a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013f9c:	e002      	b.n	8013fa4 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8013f9e:	69fb      	ldr	r3, [r7, #28]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013fa4:	69fb      	ldr	r3, [r7, #28]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d011      	beq.n	8013fd0 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013fac:	69fb      	ldr	r3, [r7, #28]
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	68db      	ldr	r3, [r3, #12]
 8013fb2:	685b      	ldr	r3, [r3, #4]
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	f7f8 fe78 	bl	800ccaa <lwip_htonl>
 8013fba:	4604      	mov	r4, r0
 8013fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fbe:	68db      	ldr	r3, [r3, #12]
 8013fc0:	685b      	ldr	r3, [r3, #4]
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	f7f8 fe71 	bl	800ccaa <lwip_htonl>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	dbe6      	blt.n	8013f9e <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8013fd0:	69fb      	ldr	r3, [r7, #28]
 8013fd2:	681a      	ldr	r2, [r3, #0]
 8013fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8013fd8:	69fb      	ldr	r3, [r7, #28]
 8013fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fdc:	601a      	str	r2, [r3, #0]
 8013fde:	e009      	b.n	8013ff4 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8013fe0:	6a3b      	ldr	r3, [r7, #32]
 8013fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fe4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8013fe6:	6a3b      	ldr	r3, [r7, #32]
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	623b      	str	r3, [r7, #32]
 8013fec:	e002      	b.n	8013ff4 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8013fee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ff0:	f7fb fefc 	bl	800fdec <tcp_seg_free>
    }
    seg = pcb->unsent;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ff8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8013ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d012      	beq.n	8014026 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014002:	68db      	ldr	r3, [r3, #12]
 8014004:	685b      	ldr	r3, [r3, #4]
 8014006:	4618      	mov	r0, r3
 8014008:	f7f8 fe4f 	bl	800ccaa <lwip_htonl>
 801400c:	4602      	mov	r2, r0
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014012:	1ad3      	subs	r3, r2, r3
 8014014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014016:	8912      	ldrh	r2, [r2, #8]
 8014018:	4413      	add	r3, r2
  while (seg != NULL &&
 801401a:	69ba      	ldr	r2, [r7, #24]
 801401c:	429a      	cmp	r2, r3
 801401e:	f4bf aeda 	bcs.w	8013dd6 <tcp_output+0x16a>
 8014022:	e000      	b.n	8014026 <tcp_output+0x3ba>
      break;
 8014024:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801402a:	2b00      	cmp	r3, #0
 801402c:	d108      	bne.n	8014040 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2200      	movs	r2, #0
 8014032:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014036:	e004      	b.n	8014042 <tcp_output+0x3d6>
    goto output_done;
 8014038:	bf00      	nop
 801403a:	e002      	b.n	8014042 <tcp_output+0x3d6>
    goto output_done;
 801403c:	bf00      	nop
 801403e:	e000      	b.n	8014042 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014040:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	8b5b      	ldrh	r3, [r3, #26]
 8014046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801404a:	b29a      	uxth	r2, r3
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014050:	2300      	movs	r3, #0
}
 8014052:	4618      	mov	r0, r3
 8014054:	3728      	adds	r7, #40	; 0x28
 8014056:	46bd      	mov	sp, r7
 8014058:	bdb0      	pop	{r4, r5, r7, pc}
 801405a:	bf00      	nop

0801405c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b082      	sub	sp, #8
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d106      	bne.n	8014078 <tcp_output_segment_busy+0x1c>
 801406a:	4b09      	ldr	r3, [pc, #36]	; (8014090 <tcp_output_segment_busy+0x34>)
 801406c:	f240 529a 	movw	r2, #1434	; 0x59a
 8014070:	4908      	ldr	r1, [pc, #32]	; (8014094 <tcp_output_segment_busy+0x38>)
 8014072:	4809      	ldr	r0, [pc, #36]	; (8014098 <tcp_output_segment_busy+0x3c>)
 8014074:	f005 ff60 	bl	8019f38 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	685b      	ldr	r3, [r3, #4]
 801407c:	7b9b      	ldrb	r3, [r3, #14]
 801407e:	2b01      	cmp	r3, #1
 8014080:	d001      	beq.n	8014086 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014082:	2301      	movs	r3, #1
 8014084:	e000      	b.n	8014088 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014086:	2300      	movs	r3, #0
}
 8014088:	4618      	mov	r0, r3
 801408a:	3708      	adds	r7, #8
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}
 8014090:	0801d7e8 	.word	0x0801d7e8
 8014094:	0801dd84 	.word	0x0801dd84
 8014098:	0801d83c 	.word	0x0801d83c

0801409c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801409c:	b5b0      	push	{r4, r5, r7, lr}
 801409e:	b08c      	sub	sp, #48	; 0x30
 80140a0:	af04      	add	r7, sp, #16
 80140a2:	60f8      	str	r0, [r7, #12]
 80140a4:	60b9      	str	r1, [r7, #8]
 80140a6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d106      	bne.n	80140bc <tcp_output_segment+0x20>
 80140ae:	4b64      	ldr	r3, [pc, #400]	; (8014240 <tcp_output_segment+0x1a4>)
 80140b0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80140b4:	4963      	ldr	r1, [pc, #396]	; (8014244 <tcp_output_segment+0x1a8>)
 80140b6:	4864      	ldr	r0, [pc, #400]	; (8014248 <tcp_output_segment+0x1ac>)
 80140b8:	f005 ff3e 	bl	8019f38 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d106      	bne.n	80140d0 <tcp_output_segment+0x34>
 80140c2:	4b5f      	ldr	r3, [pc, #380]	; (8014240 <tcp_output_segment+0x1a4>)
 80140c4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80140c8:	4960      	ldr	r1, [pc, #384]	; (801424c <tcp_output_segment+0x1b0>)
 80140ca:	485f      	ldr	r0, [pc, #380]	; (8014248 <tcp_output_segment+0x1ac>)
 80140cc:	f005 ff34 	bl	8019f38 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d106      	bne.n	80140e4 <tcp_output_segment+0x48>
 80140d6:	4b5a      	ldr	r3, [pc, #360]	; (8014240 <tcp_output_segment+0x1a4>)
 80140d8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80140dc:	495c      	ldr	r1, [pc, #368]	; (8014250 <tcp_output_segment+0x1b4>)
 80140de:	485a      	ldr	r0, [pc, #360]	; (8014248 <tcp_output_segment+0x1ac>)
 80140e0:	f005 ff2a 	bl	8019f38 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80140e4:	68f8      	ldr	r0, [r7, #12]
 80140e6:	f7ff ffb9 	bl	801405c <tcp_output_segment_busy>
 80140ea:	4603      	mov	r3, r0
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d001      	beq.n	80140f4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80140f0:	2300      	movs	r3, #0
 80140f2:	e0a0      	b.n	8014236 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	68dc      	ldr	r4, [r3, #12]
 80140fc:	4610      	mov	r0, r2
 80140fe:	f7f8 fdd4 	bl	800ccaa <lwip_htonl>
 8014102:	4603      	mov	r3, r0
 8014104:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	68dc      	ldr	r4, [r3, #12]
 801410e:	4610      	mov	r0, r2
 8014110:	f7f8 fdb6 	bl	800cc80 <lwip_htons>
 8014114:	4603      	mov	r3, r0
 8014116:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801411c:	68ba      	ldr	r2, [r7, #8]
 801411e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014120:	441a      	add	r2, r3
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	68db      	ldr	r3, [r3, #12]
 801412a:	3314      	adds	r3, #20
 801412c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	7a9b      	ldrb	r3, [r3, #10]
 8014132:	f003 0301 	and.w	r3, r3, #1
 8014136:	2b00      	cmp	r3, #0
 8014138:	d015      	beq.n	8014166 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	3304      	adds	r3, #4
 801413e:	461a      	mov	r2, r3
 8014140:	6879      	ldr	r1, [r7, #4]
 8014142:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014146:	f7fc fa33 	bl	80105b0 <tcp_eff_send_mss_netif>
 801414a:	4603      	mov	r3, r0
 801414c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801414e:	8b7b      	ldrh	r3, [r7, #26]
 8014150:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014154:	4618      	mov	r0, r3
 8014156:	f7f8 fda8 	bl	800ccaa <lwip_htonl>
 801415a:	4602      	mov	r2, r0
 801415c:	69fb      	ldr	r3, [r7, #28]
 801415e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	3304      	adds	r3, #4
 8014164:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801416c:	2b00      	cmp	r3, #0
 801416e:	da02      	bge.n	8014176 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	2200      	movs	r2, #0
 8014174:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801417a:	2b00      	cmp	r3, #0
 801417c:	d10c      	bne.n	8014198 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801417e:	4b35      	ldr	r3, [pc, #212]	; (8014254 <tcp_output_segment+0x1b8>)
 8014180:	681a      	ldr	r2, [r3, #0]
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	68db      	ldr	r3, [r3, #12]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	4618      	mov	r0, r3
 801418e:	f7f8 fd8c 	bl	800ccaa <lwip_htonl>
 8014192:	4602      	mov	r2, r0
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	68db      	ldr	r3, [r3, #12]
 801419c:	461a      	mov	r2, r3
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	685b      	ldr	r3, [r3, #4]
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	1ad3      	subs	r3, r2, r3
 80141a6:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	685b      	ldr	r3, [r3, #4]
 80141ac:	8959      	ldrh	r1, [r3, #10]
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	8b3a      	ldrh	r2, [r7, #24]
 80141b4:	1a8a      	subs	r2, r1, r2
 80141b6:	b292      	uxth	r2, r2
 80141b8:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	685b      	ldr	r3, [r3, #4]
 80141be:	8919      	ldrh	r1, [r3, #8]
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	685b      	ldr	r3, [r3, #4]
 80141c4:	8b3a      	ldrh	r2, [r7, #24]
 80141c6:	1a8a      	subs	r2, r1, r2
 80141c8:	b292      	uxth	r2, r2
 80141ca:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	685b      	ldr	r3, [r3, #4]
 80141d0:	68fa      	ldr	r2, [r7, #12]
 80141d2:	68d2      	ldr	r2, [r2, #12]
 80141d4:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	68db      	ldr	r3, [r3, #12]
 80141da:	2200      	movs	r2, #0
 80141dc:	741a      	strb	r2, [r3, #16]
 80141de:	2200      	movs	r2, #0
 80141e0:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	68db      	ldr	r3, [r3, #12]
 80141e6:	f103 0214 	add.w	r2, r3, #20
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	7a9b      	ldrb	r3, [r3, #10]
 80141ee:	009b      	lsls	r3, r3, #2
 80141f0:	f003 0304 	and.w	r3, r3, #4
 80141f4:	4413      	add	r3, r2
 80141f6:	69fa      	ldr	r2, [r7, #28]
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d006      	beq.n	801420a <tcp_output_segment+0x16e>
 80141fc:	4b10      	ldr	r3, [pc, #64]	; (8014240 <tcp_output_segment+0x1a4>)
 80141fe:	f240 621c 	movw	r2, #1564	; 0x61c
 8014202:	4915      	ldr	r1, [pc, #84]	; (8014258 <tcp_output_segment+0x1bc>)
 8014204:	4810      	ldr	r0, [pc, #64]	; (8014248 <tcp_output_segment+0x1ac>)
 8014206:	f005 fe97 	bl	8019f38 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	6858      	ldr	r0, [r3, #4]
 801420e:	68b9      	ldr	r1, [r7, #8]
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	1d1c      	adds	r4, r3, #4
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	7add      	ldrb	r5, [r3, #11]
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	7a9b      	ldrb	r3, [r3, #10]
 801421c:	687a      	ldr	r2, [r7, #4]
 801421e:	9202      	str	r2, [sp, #8]
 8014220:	2206      	movs	r2, #6
 8014222:	9201      	str	r2, [sp, #4]
 8014224:	9300      	str	r3, [sp, #0]
 8014226:	462b      	mov	r3, r5
 8014228:	4622      	mov	r2, r4
 801422a:	f004 fc4b 	bl	8018ac4 <ip4_output_if>
 801422e:	4603      	mov	r3, r0
 8014230:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014232:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014236:	4618      	mov	r0, r3
 8014238:	3720      	adds	r7, #32
 801423a:	46bd      	mov	sp, r7
 801423c:	bdb0      	pop	{r4, r5, r7, pc}
 801423e:	bf00      	nop
 8014240:	0801d7e8 	.word	0x0801d7e8
 8014244:	0801ddac 	.word	0x0801ddac
 8014248:	0801d83c 	.word	0x0801d83c
 801424c:	0801ddcc 	.word	0x0801ddcc
 8014250:	0801ddec 	.word	0x0801ddec
 8014254:	20016ea8 	.word	0x20016ea8
 8014258:	0801de10 	.word	0x0801de10

0801425c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801425c:	b5b0      	push	{r4, r5, r7, lr}
 801425e:	b084      	sub	sp, #16
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d106      	bne.n	8014278 <tcp_rexmit_rto_prepare+0x1c>
 801426a:	4b31      	ldr	r3, [pc, #196]	; (8014330 <tcp_rexmit_rto_prepare+0xd4>)
 801426c:	f240 6263 	movw	r2, #1635	; 0x663
 8014270:	4930      	ldr	r1, [pc, #192]	; (8014334 <tcp_rexmit_rto_prepare+0xd8>)
 8014272:	4831      	ldr	r0, [pc, #196]	; (8014338 <tcp_rexmit_rto_prepare+0xdc>)
 8014274:	f005 fe60 	bl	8019f38 <iprintf>

  if (pcb->unacked == NULL) {
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801427c:	2b00      	cmp	r3, #0
 801427e:	d102      	bne.n	8014286 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014280:	f06f 0305 	mvn.w	r3, #5
 8014284:	e050      	b.n	8014328 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801428a:	60fb      	str	r3, [r7, #12]
 801428c:	e00b      	b.n	80142a6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801428e:	68f8      	ldr	r0, [r7, #12]
 8014290:	f7ff fee4 	bl	801405c <tcp_output_segment_busy>
 8014294:	4603      	mov	r3, r0
 8014296:	2b00      	cmp	r3, #0
 8014298:	d002      	beq.n	80142a0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801429a:	f06f 0305 	mvn.w	r3, #5
 801429e:	e043      	b.n	8014328 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	60fb      	str	r3, [r7, #12]
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d1ef      	bne.n	801428e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80142ae:	68f8      	ldr	r0, [r7, #12]
 80142b0:	f7ff fed4 	bl	801405c <tcp_output_segment_busy>
 80142b4:	4603      	mov	r3, r0
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d002      	beq.n	80142c0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80142ba:	f06f 0305 	mvn.w	r3, #5
 80142be:	e033      	b.n	8014328 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2200      	movs	r2, #0
 80142d4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	8b5b      	ldrh	r3, [r3, #26]
 80142da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80142de:	b29a      	uxth	r2, r3
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	68db      	ldr	r3, [r3, #12]
 80142e8:	685b      	ldr	r3, [r3, #4]
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7f8 fcdd 	bl	800ccaa <lwip_htonl>
 80142f0:	4604      	mov	r4, r0
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	891b      	ldrh	r3, [r3, #8]
 80142f6:	461d      	mov	r5, r3
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	68db      	ldr	r3, [r3, #12]
 80142fc:	899b      	ldrh	r3, [r3, #12]
 80142fe:	b29b      	uxth	r3, r3
 8014300:	4618      	mov	r0, r3
 8014302:	f7f8 fcbd 	bl	800cc80 <lwip_htons>
 8014306:	4603      	mov	r3, r0
 8014308:	b2db      	uxtb	r3, r3
 801430a:	f003 0303 	and.w	r3, r3, #3
 801430e:	2b00      	cmp	r3, #0
 8014310:	d001      	beq.n	8014316 <tcp_rexmit_rto_prepare+0xba>
 8014312:	2301      	movs	r3, #1
 8014314:	e000      	b.n	8014318 <tcp_rexmit_rto_prepare+0xbc>
 8014316:	2300      	movs	r3, #0
 8014318:	442b      	add	r3, r5
 801431a:	18e2      	adds	r2, r4, r3
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2200      	movs	r2, #0
 8014324:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014326:	2300      	movs	r3, #0
}
 8014328:	4618      	mov	r0, r3
 801432a:	3710      	adds	r7, #16
 801432c:	46bd      	mov	sp, r7
 801432e:	bdb0      	pop	{r4, r5, r7, pc}
 8014330:	0801d7e8 	.word	0x0801d7e8
 8014334:	0801de24 	.word	0x0801de24
 8014338:	0801d83c 	.word	0x0801d83c

0801433c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b082      	sub	sp, #8
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d106      	bne.n	8014358 <tcp_rexmit_rto_commit+0x1c>
 801434a:	4b0d      	ldr	r3, [pc, #52]	; (8014380 <tcp_rexmit_rto_commit+0x44>)
 801434c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014350:	490c      	ldr	r1, [pc, #48]	; (8014384 <tcp_rexmit_rto_commit+0x48>)
 8014352:	480d      	ldr	r0, [pc, #52]	; (8014388 <tcp_rexmit_rto_commit+0x4c>)
 8014354:	f005 fdf0 	bl	8019f38 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801435e:	2bff      	cmp	r3, #255	; 0xff
 8014360:	d007      	beq.n	8014372 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014368:	3301      	adds	r3, #1
 801436a:	b2da      	uxtb	r2, r3
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014372:	6878      	ldr	r0, [r7, #4]
 8014374:	f7ff fc7a 	bl	8013c6c <tcp_output>
}
 8014378:	bf00      	nop
 801437a:	3708      	adds	r7, #8
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}
 8014380:	0801d7e8 	.word	0x0801d7e8
 8014384:	0801de48 	.word	0x0801de48
 8014388:	0801d83c 	.word	0x0801d83c

0801438c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b082      	sub	sp, #8
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d106      	bne.n	80143a8 <tcp_rexmit_rto+0x1c>
 801439a:	4b0a      	ldr	r3, [pc, #40]	; (80143c4 <tcp_rexmit_rto+0x38>)
 801439c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80143a0:	4909      	ldr	r1, [pc, #36]	; (80143c8 <tcp_rexmit_rto+0x3c>)
 80143a2:	480a      	ldr	r0, [pc, #40]	; (80143cc <tcp_rexmit_rto+0x40>)
 80143a4:	f005 fdc8 	bl	8019f38 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f7ff ff57 	bl	801425c <tcp_rexmit_rto_prepare>
 80143ae:	4603      	mov	r3, r0
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d102      	bne.n	80143ba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f7ff ffc1 	bl	801433c <tcp_rexmit_rto_commit>
  }
}
 80143ba:	bf00      	nop
 80143bc:	3708      	adds	r7, #8
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}
 80143c2:	bf00      	nop
 80143c4:	0801d7e8 	.word	0x0801d7e8
 80143c8:	0801de6c 	.word	0x0801de6c
 80143cc:	0801d83c 	.word	0x0801d83c

080143d0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80143d0:	b590      	push	{r4, r7, lr}
 80143d2:	b085      	sub	sp, #20
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d106      	bne.n	80143ec <tcp_rexmit+0x1c>
 80143de:	4b2f      	ldr	r3, [pc, #188]	; (801449c <tcp_rexmit+0xcc>)
 80143e0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80143e4:	492e      	ldr	r1, [pc, #184]	; (80144a0 <tcp_rexmit+0xd0>)
 80143e6:	482f      	ldr	r0, [pc, #188]	; (80144a4 <tcp_rexmit+0xd4>)
 80143e8:	f005 fda6 	bl	8019f38 <iprintf>

  if (pcb->unacked == NULL) {
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d102      	bne.n	80143fa <tcp_rexmit+0x2a>
    return ERR_VAL;
 80143f4:	f06f 0305 	mvn.w	r3, #5
 80143f8:	e04c      	b.n	8014494 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143fe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014400:	68b8      	ldr	r0, [r7, #8]
 8014402:	f7ff fe2b 	bl	801405c <tcp_output_segment_busy>
 8014406:	4603      	mov	r3, r0
 8014408:	2b00      	cmp	r3, #0
 801440a:	d002      	beq.n	8014412 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801440c:	f06f 0305 	mvn.w	r3, #5
 8014410:	e040      	b.n	8014494 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	681a      	ldr	r2, [r3, #0]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	336c      	adds	r3, #108	; 0x6c
 801441e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014420:	e002      	b.n	8014428 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d011      	beq.n	8014454 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	68db      	ldr	r3, [r3, #12]
 8014436:	685b      	ldr	r3, [r3, #4]
 8014438:	4618      	mov	r0, r3
 801443a:	f7f8 fc36 	bl	800ccaa <lwip_htonl>
 801443e:	4604      	mov	r4, r0
 8014440:	68bb      	ldr	r3, [r7, #8]
 8014442:	68db      	ldr	r3, [r3, #12]
 8014444:	685b      	ldr	r3, [r3, #4]
 8014446:	4618      	mov	r0, r3
 8014448:	f7f8 fc2f 	bl	800ccaa <lwip_htonl>
 801444c:	4603      	mov	r3, r0
 801444e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014450:	2b00      	cmp	r3, #0
 8014452:	dbe6      	blt.n	8014422 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	681a      	ldr	r2, [r3, #0]
 8014458:	68bb      	ldr	r3, [r7, #8]
 801445a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	68ba      	ldr	r2, [r7, #8]
 8014460:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d103      	bne.n	8014472 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	2200      	movs	r2, #0
 801446e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014478:	2bff      	cmp	r3, #255	; 0xff
 801447a:	d007      	beq.n	801448c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014482:	3301      	adds	r3, #1
 8014484:	b2da      	uxtb	r2, r3
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2200      	movs	r2, #0
 8014490:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014492:	2300      	movs	r3, #0
}
 8014494:	4618      	mov	r0, r3
 8014496:	3714      	adds	r7, #20
 8014498:	46bd      	mov	sp, r7
 801449a:	bd90      	pop	{r4, r7, pc}
 801449c:	0801d7e8 	.word	0x0801d7e8
 80144a0:	0801de88 	.word	0x0801de88
 80144a4:	0801d83c 	.word	0x0801d83c

080144a8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b082      	sub	sp, #8
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d106      	bne.n	80144c4 <tcp_rexmit_fast+0x1c>
 80144b6:	4b2e      	ldr	r3, [pc, #184]	; (8014570 <tcp_rexmit_fast+0xc8>)
 80144b8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80144bc:	492d      	ldr	r1, [pc, #180]	; (8014574 <tcp_rexmit_fast+0xcc>)
 80144be:	482e      	ldr	r0, [pc, #184]	; (8014578 <tcp_rexmit_fast+0xd0>)
 80144c0:	f005 fd3a 	bl	8019f38 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d04d      	beq.n	8014568 <tcp_rexmit_fast+0xc0>
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	8b5b      	ldrh	r3, [r3, #26]
 80144d0:	f003 0304 	and.w	r3, r3, #4
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d147      	bne.n	8014568 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f7ff ff79 	bl	80143d0 <tcp_rexmit>
 80144de:	4603      	mov	r3, r0
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d141      	bne.n	8014568 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80144f0:	429a      	cmp	r2, r3
 80144f2:	d207      	bcs.n	8014504 <tcp_rexmit_fast+0x5c>
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80144fa:	0fda      	lsrs	r2, r3, #31
 80144fc:	4413      	add	r3, r2
 80144fe:	105b      	asrs	r3, r3, #1
 8014500:	b29b      	uxth	r3, r3
 8014502:	e006      	b.n	8014512 <tcp_rexmit_fast+0x6a>
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801450a:	0fda      	lsrs	r2, r3, #31
 801450c:	4413      	add	r3, r2
 801450e:	105b      	asrs	r3, r3, #1
 8014510:	b29b      	uxth	r3, r3
 8014512:	687a      	ldr	r2, [r7, #4]
 8014514:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801451e:	461a      	mov	r2, r3
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014524:	005b      	lsls	r3, r3, #1
 8014526:	429a      	cmp	r2, r3
 8014528:	d206      	bcs.n	8014538 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801452e:	005b      	lsls	r3, r3, #1
 8014530:	b29a      	uxth	r2, r3
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014542:	4619      	mov	r1, r3
 8014544:	0049      	lsls	r1, r1, #1
 8014546:	440b      	add	r3, r1
 8014548:	b29b      	uxth	r3, r3
 801454a:	4413      	add	r3, r2
 801454c:	b29a      	uxth	r2, r3
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	8b5b      	ldrh	r3, [r3, #26]
 8014558:	f043 0304 	orr.w	r3, r3, #4
 801455c:	b29a      	uxth	r2, r3
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	2200      	movs	r2, #0
 8014566:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014568:	bf00      	nop
 801456a:	3708      	adds	r7, #8
 801456c:	46bd      	mov	sp, r7
 801456e:	bd80      	pop	{r7, pc}
 8014570:	0801d7e8 	.word	0x0801d7e8
 8014574:	0801dea0 	.word	0x0801dea0
 8014578:	0801d83c 	.word	0x0801d83c

0801457c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b086      	sub	sp, #24
 8014580:	af00      	add	r7, sp, #0
 8014582:	60f8      	str	r0, [r7, #12]
 8014584:	607b      	str	r3, [r7, #4]
 8014586:	460b      	mov	r3, r1
 8014588:	817b      	strh	r3, [r7, #10]
 801458a:	4613      	mov	r3, r2
 801458c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801458e:	897a      	ldrh	r2, [r7, #10]
 8014590:	893b      	ldrh	r3, [r7, #8]
 8014592:	4413      	add	r3, r2
 8014594:	b29b      	uxth	r3, r3
 8014596:	3314      	adds	r3, #20
 8014598:	b29b      	uxth	r3, r3
 801459a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801459e:	4619      	mov	r1, r3
 80145a0:	2022      	movs	r0, #34	; 0x22
 80145a2:	f7f9 fcab 	bl	800defc <pbuf_alloc>
 80145a6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80145a8:	697b      	ldr	r3, [r7, #20]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d04e      	beq.n	801464c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80145ae:	697b      	ldr	r3, [r7, #20]
 80145b0:	895b      	ldrh	r3, [r3, #10]
 80145b2:	461a      	mov	r2, r3
 80145b4:	897b      	ldrh	r3, [r7, #10]
 80145b6:	3314      	adds	r3, #20
 80145b8:	429a      	cmp	r2, r3
 80145ba:	da06      	bge.n	80145ca <tcp_output_alloc_header_common+0x4e>
 80145bc:	4b26      	ldr	r3, [pc, #152]	; (8014658 <tcp_output_alloc_header_common+0xdc>)
 80145be:	f240 7224 	movw	r2, #1828	; 0x724
 80145c2:	4926      	ldr	r1, [pc, #152]	; (801465c <tcp_output_alloc_header_common+0xe0>)
 80145c4:	4826      	ldr	r0, [pc, #152]	; (8014660 <tcp_output_alloc_header_common+0xe4>)
 80145c6:	f005 fcb7 	bl	8019f38 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	685b      	ldr	r3, [r3, #4]
 80145ce:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80145d0:	8c3b      	ldrh	r3, [r7, #32]
 80145d2:	4618      	mov	r0, r3
 80145d4:	f7f8 fb54 	bl	800cc80 <lwip_htons>
 80145d8:	4603      	mov	r3, r0
 80145da:	461a      	mov	r2, r3
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80145e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7f8 fb4c 	bl	800cc80 <lwip_htons>
 80145e8:	4603      	mov	r3, r0
 80145ea:	461a      	mov	r2, r3
 80145ec:	693b      	ldr	r3, [r7, #16]
 80145ee:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	687a      	ldr	r2, [r7, #4]
 80145f4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80145f6:	68f8      	ldr	r0, [r7, #12]
 80145f8:	f7f8 fb57 	bl	800ccaa <lwip_htonl>
 80145fc:	4602      	mov	r2, r0
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014602:	897b      	ldrh	r3, [r7, #10]
 8014604:	089b      	lsrs	r3, r3, #2
 8014606:	b29b      	uxth	r3, r3
 8014608:	3305      	adds	r3, #5
 801460a:	b29b      	uxth	r3, r3
 801460c:	031b      	lsls	r3, r3, #12
 801460e:	b29a      	uxth	r2, r3
 8014610:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014614:	b29b      	uxth	r3, r3
 8014616:	4313      	orrs	r3, r2
 8014618:	b29b      	uxth	r3, r3
 801461a:	4618      	mov	r0, r3
 801461c:	f7f8 fb30 	bl	800cc80 <lwip_htons>
 8014620:	4603      	mov	r3, r0
 8014622:	461a      	mov	r2, r3
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014628:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801462a:	4618      	mov	r0, r3
 801462c:	f7f8 fb28 	bl	800cc80 <lwip_htons>
 8014630:	4603      	mov	r3, r0
 8014632:	461a      	mov	r2, r3
 8014634:	693b      	ldr	r3, [r7, #16]
 8014636:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014638:	693b      	ldr	r3, [r7, #16]
 801463a:	2200      	movs	r2, #0
 801463c:	741a      	strb	r2, [r3, #16]
 801463e:	2200      	movs	r2, #0
 8014640:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014642:	693b      	ldr	r3, [r7, #16]
 8014644:	2200      	movs	r2, #0
 8014646:	749a      	strb	r2, [r3, #18]
 8014648:	2200      	movs	r2, #0
 801464a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801464c:	697b      	ldr	r3, [r7, #20]
}
 801464e:	4618      	mov	r0, r3
 8014650:	3718      	adds	r7, #24
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}
 8014656:	bf00      	nop
 8014658:	0801d7e8 	.word	0x0801d7e8
 801465c:	0801dec0 	.word	0x0801dec0
 8014660:	0801d83c 	.word	0x0801d83c

08014664 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014664:	b5b0      	push	{r4, r5, r7, lr}
 8014666:	b08a      	sub	sp, #40	; 0x28
 8014668:	af04      	add	r7, sp, #16
 801466a:	60f8      	str	r0, [r7, #12]
 801466c:	607b      	str	r3, [r7, #4]
 801466e:	460b      	mov	r3, r1
 8014670:	817b      	strh	r3, [r7, #10]
 8014672:	4613      	mov	r3, r2
 8014674:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d106      	bne.n	801468a <tcp_output_alloc_header+0x26>
 801467c:	4b15      	ldr	r3, [pc, #84]	; (80146d4 <tcp_output_alloc_header+0x70>)
 801467e:	f240 7242 	movw	r2, #1858	; 0x742
 8014682:	4915      	ldr	r1, [pc, #84]	; (80146d8 <tcp_output_alloc_header+0x74>)
 8014684:	4815      	ldr	r0, [pc, #84]	; (80146dc <tcp_output_alloc_header+0x78>)
 8014686:	f005 fc57 	bl	8019f38 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	8adb      	ldrh	r3, [r3, #22]
 8014692:	68fa      	ldr	r2, [r7, #12]
 8014694:	8b12      	ldrh	r2, [r2, #24]
 8014696:	68f9      	ldr	r1, [r7, #12]
 8014698:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801469a:	893d      	ldrh	r5, [r7, #8]
 801469c:	897c      	ldrh	r4, [r7, #10]
 801469e:	9103      	str	r1, [sp, #12]
 80146a0:	2110      	movs	r1, #16
 80146a2:	9102      	str	r1, [sp, #8]
 80146a4:	9201      	str	r2, [sp, #4]
 80146a6:	9300      	str	r3, [sp, #0]
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	462a      	mov	r2, r5
 80146ac:	4621      	mov	r1, r4
 80146ae:	f7ff ff65 	bl	801457c <tcp_output_alloc_header_common>
 80146b2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d006      	beq.n	80146c8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80146ba:	68fb      	ldr	r3, [r7, #12]
 80146bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146be:	68fa      	ldr	r2, [r7, #12]
 80146c0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80146c2:	441a      	add	r2, r3
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80146c8:	697b      	ldr	r3, [r7, #20]
}
 80146ca:	4618      	mov	r0, r3
 80146cc:	3718      	adds	r7, #24
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bdb0      	pop	{r4, r5, r7, pc}
 80146d2:	bf00      	nop
 80146d4:	0801d7e8 	.word	0x0801d7e8
 80146d8:	0801def0 	.word	0x0801def0
 80146dc:	0801d83c 	.word	0x0801d83c

080146e0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b088      	sub	sp, #32
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	60f8      	str	r0, [r7, #12]
 80146e8:	60b9      	str	r1, [r7, #8]
 80146ea:	4611      	mov	r1, r2
 80146ec:	461a      	mov	r2, r3
 80146ee:	460b      	mov	r3, r1
 80146f0:	71fb      	strb	r3, [r7, #7]
 80146f2:	4613      	mov	r3, r2
 80146f4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80146f6:	2300      	movs	r3, #0
 80146f8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d106      	bne.n	801470e <tcp_output_fill_options+0x2e>
 8014700:	4b13      	ldr	r3, [pc, #76]	; (8014750 <tcp_output_fill_options+0x70>)
 8014702:	f240 7256 	movw	r2, #1878	; 0x756
 8014706:	4913      	ldr	r1, [pc, #76]	; (8014754 <tcp_output_fill_options+0x74>)
 8014708:	4813      	ldr	r0, [pc, #76]	; (8014758 <tcp_output_fill_options+0x78>)
 801470a:	f005 fc15 	bl	8019f38 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801470e:	68bb      	ldr	r3, [r7, #8]
 8014710:	685b      	ldr	r3, [r3, #4]
 8014712:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014714:	69bb      	ldr	r3, [r7, #24]
 8014716:	3314      	adds	r3, #20
 8014718:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801471a:	69bb      	ldr	r3, [r7, #24]
 801471c:	f103 0214 	add.w	r2, r3, #20
 8014720:	8bfb      	ldrh	r3, [r7, #30]
 8014722:	009b      	lsls	r3, r3, #2
 8014724:	4619      	mov	r1, r3
 8014726:	79fb      	ldrb	r3, [r7, #7]
 8014728:	009b      	lsls	r3, r3, #2
 801472a:	f003 0304 	and.w	r3, r3, #4
 801472e:	440b      	add	r3, r1
 8014730:	4413      	add	r3, r2
 8014732:	697a      	ldr	r2, [r7, #20]
 8014734:	429a      	cmp	r2, r3
 8014736:	d006      	beq.n	8014746 <tcp_output_fill_options+0x66>
 8014738:	4b05      	ldr	r3, [pc, #20]	; (8014750 <tcp_output_fill_options+0x70>)
 801473a:	f240 7275 	movw	r2, #1909	; 0x775
 801473e:	4907      	ldr	r1, [pc, #28]	; (801475c <tcp_output_fill_options+0x7c>)
 8014740:	4805      	ldr	r0, [pc, #20]	; (8014758 <tcp_output_fill_options+0x78>)
 8014742:	f005 fbf9 	bl	8019f38 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014746:	bf00      	nop
 8014748:	3720      	adds	r7, #32
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}
 801474e:	bf00      	nop
 8014750:	0801d7e8 	.word	0x0801d7e8
 8014754:	0801df18 	.word	0x0801df18
 8014758:	0801d83c 	.word	0x0801d83c
 801475c:	0801de10 	.word	0x0801de10

08014760 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b08a      	sub	sp, #40	; 0x28
 8014764:	af04      	add	r7, sp, #16
 8014766:	60f8      	str	r0, [r7, #12]
 8014768:	60b9      	str	r1, [r7, #8]
 801476a:	607a      	str	r2, [r7, #4]
 801476c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d106      	bne.n	8014782 <tcp_output_control_segment+0x22>
 8014774:	4b1c      	ldr	r3, [pc, #112]	; (80147e8 <tcp_output_control_segment+0x88>)
 8014776:	f240 7287 	movw	r2, #1927	; 0x787
 801477a:	491c      	ldr	r1, [pc, #112]	; (80147ec <tcp_output_control_segment+0x8c>)
 801477c:	481c      	ldr	r0, [pc, #112]	; (80147f0 <tcp_output_control_segment+0x90>)
 801477e:	f005 fbdb 	bl	8019f38 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014782:	683a      	ldr	r2, [r7, #0]
 8014784:	6879      	ldr	r1, [r7, #4]
 8014786:	68f8      	ldr	r0, [r7, #12]
 8014788:	f7fe fad6 	bl	8012d38 <tcp_route>
 801478c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801478e:	693b      	ldr	r3, [r7, #16]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d102      	bne.n	801479a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014794:	23fc      	movs	r3, #252	; 0xfc
 8014796:	75fb      	strb	r3, [r7, #23]
 8014798:	e01c      	b.n	80147d4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	2b00      	cmp	r3, #0
 801479e:	d006      	beq.n	80147ae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	7adb      	ldrb	r3, [r3, #11]
 80147a4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	7a9b      	ldrb	r3, [r3, #10]
 80147aa:	757b      	strb	r3, [r7, #21]
 80147ac:	e003      	b.n	80147b6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80147ae:	23ff      	movs	r3, #255	; 0xff
 80147b0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80147b2:	2300      	movs	r3, #0
 80147b4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80147b6:	7dba      	ldrb	r2, [r7, #22]
 80147b8:	693b      	ldr	r3, [r7, #16]
 80147ba:	9302      	str	r3, [sp, #8]
 80147bc:	2306      	movs	r3, #6
 80147be:	9301      	str	r3, [sp, #4]
 80147c0:	7d7b      	ldrb	r3, [r7, #21]
 80147c2:	9300      	str	r3, [sp, #0]
 80147c4:	4613      	mov	r3, r2
 80147c6:	683a      	ldr	r2, [r7, #0]
 80147c8:	6879      	ldr	r1, [r7, #4]
 80147ca:	68b8      	ldr	r0, [r7, #8]
 80147cc:	f004 f97a 	bl	8018ac4 <ip4_output_if>
 80147d0:	4603      	mov	r3, r0
 80147d2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80147d4:	68b8      	ldr	r0, [r7, #8]
 80147d6:	f7f9 fe71 	bl	800e4bc <pbuf_free>
  return err;
 80147da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80147de:	4618      	mov	r0, r3
 80147e0:	3718      	adds	r7, #24
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}
 80147e6:	bf00      	nop
 80147e8:	0801d7e8 	.word	0x0801d7e8
 80147ec:	0801df40 	.word	0x0801df40
 80147f0:	0801d83c 	.word	0x0801d83c

080147f4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80147f4:	b590      	push	{r4, r7, lr}
 80147f6:	b08b      	sub	sp, #44	; 0x2c
 80147f8:	af04      	add	r7, sp, #16
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	607a      	str	r2, [r7, #4]
 8014800:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014802:	683b      	ldr	r3, [r7, #0]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d106      	bne.n	8014816 <tcp_rst+0x22>
 8014808:	4b1f      	ldr	r3, [pc, #124]	; (8014888 <tcp_rst+0x94>)
 801480a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801480e:	491f      	ldr	r1, [pc, #124]	; (801488c <tcp_rst+0x98>)
 8014810:	481f      	ldr	r0, [pc, #124]	; (8014890 <tcp_rst+0x9c>)
 8014812:	f005 fb91 	bl	8019f38 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014818:	2b00      	cmp	r3, #0
 801481a:	d106      	bne.n	801482a <tcp_rst+0x36>
 801481c:	4b1a      	ldr	r3, [pc, #104]	; (8014888 <tcp_rst+0x94>)
 801481e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014822:	491c      	ldr	r1, [pc, #112]	; (8014894 <tcp_rst+0xa0>)
 8014824:	481a      	ldr	r0, [pc, #104]	; (8014890 <tcp_rst+0x9c>)
 8014826:	f005 fb87 	bl	8019f38 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801482a:	2300      	movs	r3, #0
 801482c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801482e:	f246 0308 	movw	r3, #24584	; 0x6008
 8014832:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014834:	7dfb      	ldrb	r3, [r7, #23]
 8014836:	b29c      	uxth	r4, r3
 8014838:	68b8      	ldr	r0, [r7, #8]
 801483a:	f7f8 fa36 	bl	800ccaa <lwip_htonl>
 801483e:	4602      	mov	r2, r0
 8014840:	8abb      	ldrh	r3, [r7, #20]
 8014842:	9303      	str	r3, [sp, #12]
 8014844:	2314      	movs	r3, #20
 8014846:	9302      	str	r3, [sp, #8]
 8014848:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801484a:	9301      	str	r3, [sp, #4]
 801484c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801484e:	9300      	str	r3, [sp, #0]
 8014850:	4613      	mov	r3, r2
 8014852:	2200      	movs	r2, #0
 8014854:	4621      	mov	r1, r4
 8014856:	6878      	ldr	r0, [r7, #4]
 8014858:	f7ff fe90 	bl	801457c <tcp_output_alloc_header_common>
 801485c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d00c      	beq.n	801487e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014864:	7dfb      	ldrb	r3, [r7, #23]
 8014866:	2200      	movs	r2, #0
 8014868:	6939      	ldr	r1, [r7, #16]
 801486a:	68f8      	ldr	r0, [r7, #12]
 801486c:	f7ff ff38 	bl	80146e0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014872:	683a      	ldr	r2, [r7, #0]
 8014874:	6939      	ldr	r1, [r7, #16]
 8014876:	68f8      	ldr	r0, [r7, #12]
 8014878:	f7ff ff72 	bl	8014760 <tcp_output_control_segment>
 801487c:	e000      	b.n	8014880 <tcp_rst+0x8c>
    return;
 801487e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014880:	371c      	adds	r7, #28
 8014882:	46bd      	mov	sp, r7
 8014884:	bd90      	pop	{r4, r7, pc}
 8014886:	bf00      	nop
 8014888:	0801d7e8 	.word	0x0801d7e8
 801488c:	0801df6c 	.word	0x0801df6c
 8014890:	0801d83c 	.word	0x0801d83c
 8014894:	0801df88 	.word	0x0801df88

08014898 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014898:	b590      	push	{r4, r7, lr}
 801489a:	b087      	sub	sp, #28
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80148a0:	2300      	movs	r3, #0
 80148a2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80148a4:	2300      	movs	r3, #0
 80148a6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d106      	bne.n	80148bc <tcp_send_empty_ack+0x24>
 80148ae:	4b28      	ldr	r3, [pc, #160]	; (8014950 <tcp_send_empty_ack+0xb8>)
 80148b0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80148b4:	4927      	ldr	r1, [pc, #156]	; (8014954 <tcp_send_empty_ack+0xbc>)
 80148b6:	4828      	ldr	r0, [pc, #160]	; (8014958 <tcp_send_empty_ack+0xc0>)
 80148b8:	f005 fb3e 	bl	8019f38 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80148bc:	7dfb      	ldrb	r3, [r7, #23]
 80148be:	009b      	lsls	r3, r3, #2
 80148c0:	b2db      	uxtb	r3, r3
 80148c2:	f003 0304 	and.w	r3, r3, #4
 80148c6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80148c8:	7d7b      	ldrb	r3, [r7, #21]
 80148ca:	b29c      	uxth	r4, r3
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148d0:	4618      	mov	r0, r3
 80148d2:	f7f8 f9ea 	bl	800ccaa <lwip_htonl>
 80148d6:	4603      	mov	r3, r0
 80148d8:	2200      	movs	r2, #0
 80148da:	4621      	mov	r1, r4
 80148dc:	6878      	ldr	r0, [r7, #4]
 80148de:	f7ff fec1 	bl	8014664 <tcp_output_alloc_header>
 80148e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80148e4:	693b      	ldr	r3, [r7, #16]
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d109      	bne.n	80148fe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	8b5b      	ldrh	r3, [r3, #26]
 80148ee:	f043 0303 	orr.w	r3, r3, #3
 80148f2:	b29a      	uxth	r2, r3
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80148f8:	f06f 0301 	mvn.w	r3, #1
 80148fc:	e023      	b.n	8014946 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80148fe:	7dbb      	ldrb	r3, [r7, #22]
 8014900:	7dfa      	ldrb	r2, [r7, #23]
 8014902:	6939      	ldr	r1, [r7, #16]
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7ff feeb 	bl	80146e0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801490a:	687a      	ldr	r2, [r7, #4]
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	3304      	adds	r3, #4
 8014910:	6939      	ldr	r1, [r7, #16]
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	f7ff ff24 	bl	8014760 <tcp_output_control_segment>
 8014918:	4603      	mov	r3, r0
 801491a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801491c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d007      	beq.n	8014934 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	8b5b      	ldrh	r3, [r3, #26]
 8014928:	f043 0303 	orr.w	r3, r3, #3
 801492c:	b29a      	uxth	r2, r3
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	835a      	strh	r2, [r3, #26]
 8014932:	e006      	b.n	8014942 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	8b5b      	ldrh	r3, [r3, #26]
 8014938:	f023 0303 	bic.w	r3, r3, #3
 801493c:	b29a      	uxth	r2, r3
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014942:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014946:	4618      	mov	r0, r3
 8014948:	371c      	adds	r7, #28
 801494a:	46bd      	mov	sp, r7
 801494c:	bd90      	pop	{r4, r7, pc}
 801494e:	bf00      	nop
 8014950:	0801d7e8 	.word	0x0801d7e8
 8014954:	0801dfa4 	.word	0x0801dfa4
 8014958:	0801d83c 	.word	0x0801d83c

0801495c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801495c:	b590      	push	{r4, r7, lr}
 801495e:	b087      	sub	sp, #28
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014964:	2300      	movs	r3, #0
 8014966:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d106      	bne.n	801497c <tcp_keepalive+0x20>
 801496e:	4b18      	ldr	r3, [pc, #96]	; (80149d0 <tcp_keepalive+0x74>)
 8014970:	f640 0224 	movw	r2, #2084	; 0x824
 8014974:	4917      	ldr	r1, [pc, #92]	; (80149d4 <tcp_keepalive+0x78>)
 8014976:	4818      	ldr	r0, [pc, #96]	; (80149d8 <tcp_keepalive+0x7c>)
 8014978:	f005 fade 	bl	8019f38 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801497c:	7dfb      	ldrb	r3, [r7, #23]
 801497e:	b29c      	uxth	r4, r3
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014984:	3b01      	subs	r3, #1
 8014986:	4618      	mov	r0, r3
 8014988:	f7f8 f98f 	bl	800ccaa <lwip_htonl>
 801498c:	4603      	mov	r3, r0
 801498e:	2200      	movs	r2, #0
 8014990:	4621      	mov	r1, r4
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f7ff fe66 	bl	8014664 <tcp_output_alloc_header>
 8014998:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801499a:	693b      	ldr	r3, [r7, #16]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d102      	bne.n	80149a6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80149a0:	f04f 33ff 	mov.w	r3, #4294967295
 80149a4:	e010      	b.n	80149c8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80149a6:	7dfb      	ldrb	r3, [r7, #23]
 80149a8:	2200      	movs	r2, #0
 80149aa:	6939      	ldr	r1, [r7, #16]
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f7ff fe97 	bl	80146e0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	3304      	adds	r3, #4
 80149b8:	6939      	ldr	r1, [r7, #16]
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f7ff fed0 	bl	8014760 <tcp_output_control_segment>
 80149c0:	4603      	mov	r3, r0
 80149c2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80149c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	371c      	adds	r7, #28
 80149cc:	46bd      	mov	sp, r7
 80149ce:	bd90      	pop	{r4, r7, pc}
 80149d0:	0801d7e8 	.word	0x0801d7e8
 80149d4:	0801dfc4 	.word	0x0801dfc4
 80149d8:	0801d83c 	.word	0x0801d83c

080149dc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80149dc:	b590      	push	{r4, r7, lr}
 80149de:	b08b      	sub	sp, #44	; 0x2c
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80149e4:	2300      	movs	r3, #0
 80149e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d106      	bne.n	80149fe <tcp_zero_window_probe+0x22>
 80149f0:	4b4c      	ldr	r3, [pc, #304]	; (8014b24 <tcp_zero_window_probe+0x148>)
 80149f2:	f640 024f 	movw	r2, #2127	; 0x84f
 80149f6:	494c      	ldr	r1, [pc, #304]	; (8014b28 <tcp_zero_window_probe+0x14c>)
 80149f8:	484c      	ldr	r0, [pc, #304]	; (8014b2c <tcp_zero_window_probe+0x150>)
 80149fa:	f005 fa9d 	bl	8019f38 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a02:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014a04:	6a3b      	ldr	r3, [r7, #32]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d101      	bne.n	8014a0e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	e086      	b.n	8014b1c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014a14:	2bff      	cmp	r3, #255	; 0xff
 8014a16:	d007      	beq.n	8014a28 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014a1e:	3301      	adds	r3, #1
 8014a20:	b2da      	uxtb	r2, r3
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014a28:	6a3b      	ldr	r3, [r7, #32]
 8014a2a:	68db      	ldr	r3, [r3, #12]
 8014a2c:	899b      	ldrh	r3, [r3, #12]
 8014a2e:	b29b      	uxth	r3, r3
 8014a30:	4618      	mov	r0, r3
 8014a32:	f7f8 f925 	bl	800cc80 <lwip_htons>
 8014a36:	4603      	mov	r3, r0
 8014a38:	b2db      	uxtb	r3, r3
 8014a3a:	f003 0301 	and.w	r3, r3, #1
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d005      	beq.n	8014a4e <tcp_zero_window_probe+0x72>
 8014a42:	6a3b      	ldr	r3, [r7, #32]
 8014a44:	891b      	ldrh	r3, [r3, #8]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d101      	bne.n	8014a4e <tcp_zero_window_probe+0x72>
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	e000      	b.n	8014a50 <tcp_zero_window_probe+0x74>
 8014a4e:	2300      	movs	r3, #0
 8014a50:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014a52:	7ffb      	ldrb	r3, [r7, #31]
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	bf0c      	ite	eq
 8014a58:	2301      	moveq	r3, #1
 8014a5a:	2300      	movne	r3, #0
 8014a5c:	b2db      	uxtb	r3, r3
 8014a5e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014a60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a64:	b299      	uxth	r1, r3
 8014a66:	6a3b      	ldr	r3, [r7, #32]
 8014a68:	68db      	ldr	r3, [r3, #12]
 8014a6a:	685b      	ldr	r3, [r3, #4]
 8014a6c:	8bba      	ldrh	r2, [r7, #28]
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f7ff fdf8 	bl	8014664 <tcp_output_alloc_header>
 8014a74:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014a76:	69bb      	ldr	r3, [r7, #24]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d102      	bne.n	8014a82 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8014a80:	e04c      	b.n	8014b1c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014a82:	69bb      	ldr	r3, [r7, #24]
 8014a84:	685b      	ldr	r3, [r3, #4]
 8014a86:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014a88:	7ffb      	ldrb	r3, [r7, #31]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d011      	beq.n	8014ab2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	899b      	ldrh	r3, [r3, #12]
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	b21b      	sxth	r3, r3
 8014a96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014a9a:	b21c      	sxth	r4, r3
 8014a9c:	2011      	movs	r0, #17
 8014a9e:	f7f8 f8ef 	bl	800cc80 <lwip_htons>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	b21b      	sxth	r3, r3
 8014aa6:	4323      	orrs	r3, r4
 8014aa8:	b21b      	sxth	r3, r3
 8014aaa:	b29a      	uxth	r2, r3
 8014aac:	697b      	ldr	r3, [r7, #20]
 8014aae:	819a      	strh	r2, [r3, #12]
 8014ab0:	e010      	b.n	8014ad4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014ab2:	69bb      	ldr	r3, [r7, #24]
 8014ab4:	685b      	ldr	r3, [r3, #4]
 8014ab6:	3314      	adds	r3, #20
 8014ab8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014aba:	6a3b      	ldr	r3, [r7, #32]
 8014abc:	6858      	ldr	r0, [r3, #4]
 8014abe:	6a3b      	ldr	r3, [r7, #32]
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	891a      	ldrh	r2, [r3, #8]
 8014ac4:	6a3b      	ldr	r3, [r7, #32]
 8014ac6:	891b      	ldrh	r3, [r3, #8]
 8014ac8:	1ad3      	subs	r3, r2, r3
 8014aca:	b29b      	uxth	r3, r3
 8014acc:	2201      	movs	r2, #1
 8014ace:	6939      	ldr	r1, [r7, #16]
 8014ad0:	f7f9 fefa 	bl	800e8c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014ad4:	6a3b      	ldr	r3, [r7, #32]
 8014ad6:	68db      	ldr	r3, [r3, #12]
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	4618      	mov	r0, r3
 8014adc:	f7f8 f8e5 	bl	800ccaa <lwip_htonl>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	3301      	adds	r3, #1
 8014ae4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	1ad3      	subs	r3, r2, r3
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	da02      	bge.n	8014af8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	68fa      	ldr	r2, [r7, #12]
 8014af6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014afc:	2200      	movs	r2, #0
 8014afe:	69b9      	ldr	r1, [r7, #24]
 8014b00:	6878      	ldr	r0, [r7, #4]
 8014b02:	f7ff fded 	bl	80146e0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b06:	687a      	ldr	r2, [r7, #4]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	3304      	adds	r3, #4
 8014b0c:	69b9      	ldr	r1, [r7, #24]
 8014b0e:	6878      	ldr	r0, [r7, #4]
 8014b10:	f7ff fe26 	bl	8014760 <tcp_output_control_segment>
 8014b14:	4603      	mov	r3, r0
 8014b16:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014b18:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	372c      	adds	r7, #44	; 0x2c
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd90      	pop	{r4, r7, pc}
 8014b24:	0801d7e8 	.word	0x0801d7e8
 8014b28:	0801dfe0 	.word	0x0801dfe0
 8014b2c:	0801d83c 	.word	0x0801d83c

08014b30 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b082      	sub	sp, #8
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014b38:	f7f9 ffb4 	bl	800eaa4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014b3c:	4b0a      	ldr	r3, [pc, #40]	; (8014b68 <tcpip_tcp_timer+0x38>)
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d103      	bne.n	8014b4c <tcpip_tcp_timer+0x1c>
 8014b44:	4b09      	ldr	r3, [pc, #36]	; (8014b6c <tcpip_tcp_timer+0x3c>)
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d005      	beq.n	8014b58 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	4908      	ldr	r1, [pc, #32]	; (8014b70 <tcpip_tcp_timer+0x40>)
 8014b50:	20fa      	movs	r0, #250	; 0xfa
 8014b52:	f000 f8f1 	bl	8014d38 <sys_timeout>
 8014b56:	e002      	b.n	8014b5e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014b58:	4b06      	ldr	r3, [pc, #24]	; (8014b74 <tcpip_tcp_timer+0x44>)
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	601a      	str	r2, [r3, #0]
  }
}
 8014b5e:	bf00      	nop
 8014b60:	3708      	adds	r7, #8
 8014b62:	46bd      	mov	sp, r7
 8014b64:	bd80      	pop	{r7, pc}
 8014b66:	bf00      	nop
 8014b68:	20016ea4 	.word	0x20016ea4
 8014b6c:	20016eb4 	.word	0x20016eb4
 8014b70:	08014b31 	.word	0x08014b31
 8014b74:	20010324 	.word	0x20010324

08014b78 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014b7c:	4b0a      	ldr	r3, [pc, #40]	; (8014ba8 <tcp_timer_needed+0x30>)
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d10f      	bne.n	8014ba4 <tcp_timer_needed+0x2c>
 8014b84:	4b09      	ldr	r3, [pc, #36]	; (8014bac <tcp_timer_needed+0x34>)
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d103      	bne.n	8014b94 <tcp_timer_needed+0x1c>
 8014b8c:	4b08      	ldr	r3, [pc, #32]	; (8014bb0 <tcp_timer_needed+0x38>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d007      	beq.n	8014ba4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014b94:	4b04      	ldr	r3, [pc, #16]	; (8014ba8 <tcp_timer_needed+0x30>)
 8014b96:	2201      	movs	r2, #1
 8014b98:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	4905      	ldr	r1, [pc, #20]	; (8014bb4 <tcp_timer_needed+0x3c>)
 8014b9e:	20fa      	movs	r0, #250	; 0xfa
 8014ba0:	f000 f8ca 	bl	8014d38 <sys_timeout>
  }
}
 8014ba4:	bf00      	nop
 8014ba6:	bd80      	pop	{r7, pc}
 8014ba8:	20010324 	.word	0x20010324
 8014bac:	20016ea4 	.word	0x20016ea4
 8014bb0:	20016eb4 	.word	0x20016eb4
 8014bb4:	08014b31 	.word	0x08014b31

08014bb8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014bb8:	b580      	push	{r7, lr}
 8014bba:	b086      	sub	sp, #24
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	60f8      	str	r0, [r7, #12]
 8014bc0:	60b9      	str	r1, [r7, #8]
 8014bc2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014bc4:	200a      	movs	r0, #10
 8014bc6:	f7f8 fd7b 	bl	800d6c0 <memp_malloc>
 8014bca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014bcc:	693b      	ldr	r3, [r7, #16]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d109      	bne.n	8014be6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014bd2:	693b      	ldr	r3, [r7, #16]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d151      	bne.n	8014c7c <sys_timeout_abs+0xc4>
 8014bd8:	4b2a      	ldr	r3, [pc, #168]	; (8014c84 <sys_timeout_abs+0xcc>)
 8014bda:	22be      	movs	r2, #190	; 0xbe
 8014bdc:	492a      	ldr	r1, [pc, #168]	; (8014c88 <sys_timeout_abs+0xd0>)
 8014bde:	482b      	ldr	r0, [pc, #172]	; (8014c8c <sys_timeout_abs+0xd4>)
 8014be0:	f005 f9aa 	bl	8019f38 <iprintf>
    return;
 8014be4:	e04a      	b.n	8014c7c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014be6:	693b      	ldr	r3, [r7, #16]
 8014be8:	2200      	movs	r2, #0
 8014bea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014bec:	693b      	ldr	r3, [r7, #16]
 8014bee:	68ba      	ldr	r2, [r7, #8]
 8014bf0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014bf2:	693b      	ldr	r3, [r7, #16]
 8014bf4:	687a      	ldr	r2, [r7, #4]
 8014bf6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014bf8:	693b      	ldr	r3, [r7, #16]
 8014bfa:	68fa      	ldr	r2, [r7, #12]
 8014bfc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014bfe:	4b24      	ldr	r3, [pc, #144]	; (8014c90 <sys_timeout_abs+0xd8>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d103      	bne.n	8014c0e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014c06:	4a22      	ldr	r2, [pc, #136]	; (8014c90 <sys_timeout_abs+0xd8>)
 8014c08:	693b      	ldr	r3, [r7, #16]
 8014c0a:	6013      	str	r3, [r2, #0]
    return;
 8014c0c:	e037      	b.n	8014c7e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014c0e:	693b      	ldr	r3, [r7, #16]
 8014c10:	685a      	ldr	r2, [r3, #4]
 8014c12:	4b1f      	ldr	r3, [pc, #124]	; (8014c90 <sys_timeout_abs+0xd8>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	685b      	ldr	r3, [r3, #4]
 8014c18:	1ad3      	subs	r3, r2, r3
 8014c1a:	0fdb      	lsrs	r3, r3, #31
 8014c1c:	f003 0301 	and.w	r3, r3, #1
 8014c20:	b2db      	uxtb	r3, r3
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d007      	beq.n	8014c36 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014c26:	4b1a      	ldr	r3, [pc, #104]	; (8014c90 <sys_timeout_abs+0xd8>)
 8014c28:	681a      	ldr	r2, [r3, #0]
 8014c2a:	693b      	ldr	r3, [r7, #16]
 8014c2c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014c2e:	4a18      	ldr	r2, [pc, #96]	; (8014c90 <sys_timeout_abs+0xd8>)
 8014c30:	693b      	ldr	r3, [r7, #16]
 8014c32:	6013      	str	r3, [r2, #0]
 8014c34:	e023      	b.n	8014c7e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014c36:	4b16      	ldr	r3, [pc, #88]	; (8014c90 <sys_timeout_abs+0xd8>)
 8014c38:	681b      	ldr	r3, [r3, #0]
 8014c3a:	617b      	str	r3, [r7, #20]
 8014c3c:	e01a      	b.n	8014c74 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d00b      	beq.n	8014c5e <sys_timeout_abs+0xa6>
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	685a      	ldr	r2, [r3, #4]
 8014c4a:	697b      	ldr	r3, [r7, #20]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	685b      	ldr	r3, [r3, #4]
 8014c50:	1ad3      	subs	r3, r2, r3
 8014c52:	0fdb      	lsrs	r3, r3, #31
 8014c54:	f003 0301 	and.w	r3, r3, #1
 8014c58:	b2db      	uxtb	r3, r3
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d007      	beq.n	8014c6e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014c5e:	697b      	ldr	r3, [r7, #20]
 8014c60:	681a      	ldr	r2, [r3, #0]
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014c66:	697b      	ldr	r3, [r7, #20]
 8014c68:	693a      	ldr	r2, [r7, #16]
 8014c6a:	601a      	str	r2, [r3, #0]
        break;
 8014c6c:	e007      	b.n	8014c7e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014c6e:	697b      	ldr	r3, [r7, #20]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	617b      	str	r3, [r7, #20]
 8014c74:	697b      	ldr	r3, [r7, #20]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d1e1      	bne.n	8014c3e <sys_timeout_abs+0x86>
 8014c7a:	e000      	b.n	8014c7e <sys_timeout_abs+0xc6>
    return;
 8014c7c:	bf00      	nop
      }
    }
  }
}
 8014c7e:	3718      	adds	r7, #24
 8014c80:	46bd      	mov	sp, r7
 8014c82:	bd80      	pop	{r7, pc}
 8014c84:	0801e004 	.word	0x0801e004
 8014c88:	0801e038 	.word	0x0801e038
 8014c8c:	0801e078 	.word	0x0801e078
 8014c90:	2001031c 	.word	0x2001031c

08014c94 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b086      	sub	sp, #24
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014ca0:	697b      	ldr	r3, [r7, #20]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	4798      	blx	r3

  now = sys_now();
 8014ca6:	f7ef fe57 	bl	8004958 <sys_now>
 8014caa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014cac:	697b      	ldr	r3, [r7, #20]
 8014cae:	681a      	ldr	r2, [r3, #0]
 8014cb0:	4b0f      	ldr	r3, [pc, #60]	; (8014cf0 <lwip_cyclic_timer+0x5c>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	4413      	add	r3, r2
 8014cb6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014cb8:	68fa      	ldr	r2, [r7, #12]
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	1ad3      	subs	r3, r2, r3
 8014cbe:	0fdb      	lsrs	r3, r3, #31
 8014cc0:	f003 0301 	and.w	r3, r3, #1
 8014cc4:	b2db      	uxtb	r3, r3
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d009      	beq.n	8014cde <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014cca:	697b      	ldr	r3, [r7, #20]
 8014ccc:	681a      	ldr	r2, [r3, #0]
 8014cce:	693b      	ldr	r3, [r7, #16]
 8014cd0:	4413      	add	r3, r2
 8014cd2:	687a      	ldr	r2, [r7, #4]
 8014cd4:	4907      	ldr	r1, [pc, #28]	; (8014cf4 <lwip_cyclic_timer+0x60>)
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	f7ff ff6e 	bl	8014bb8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014cdc:	e004      	b.n	8014ce8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014cde:	687a      	ldr	r2, [r7, #4]
 8014ce0:	4904      	ldr	r1, [pc, #16]	; (8014cf4 <lwip_cyclic_timer+0x60>)
 8014ce2:	68f8      	ldr	r0, [r7, #12]
 8014ce4:	f7ff ff68 	bl	8014bb8 <sys_timeout_abs>
}
 8014ce8:	bf00      	nop
 8014cea:	3718      	adds	r7, #24
 8014cec:	46bd      	mov	sp, r7
 8014cee:	bd80      	pop	{r7, pc}
 8014cf0:	20010320 	.word	0x20010320
 8014cf4:	08014c95 	.word	0x08014c95

08014cf8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b082      	sub	sp, #8
 8014cfc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014cfe:	2301      	movs	r3, #1
 8014d00:	607b      	str	r3, [r7, #4]
 8014d02:	e00e      	b.n	8014d22 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014d04:	4a0a      	ldr	r2, [pc, #40]	; (8014d30 <sys_timeouts_init+0x38>)
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	00db      	lsls	r3, r3, #3
 8014d10:	4a07      	ldr	r2, [pc, #28]	; (8014d30 <sys_timeouts_init+0x38>)
 8014d12:	4413      	add	r3, r2
 8014d14:	461a      	mov	r2, r3
 8014d16:	4907      	ldr	r1, [pc, #28]	; (8014d34 <sys_timeouts_init+0x3c>)
 8014d18:	f000 f80e 	bl	8014d38 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	3301      	adds	r3, #1
 8014d20:	607b      	str	r3, [r7, #4]
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	2b04      	cmp	r3, #4
 8014d26:	d9ed      	bls.n	8014d04 <sys_timeouts_init+0xc>
  }
}
 8014d28:	bf00      	nop
 8014d2a:	3708      	adds	r7, #8
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd80      	pop	{r7, pc}
 8014d30:	0804024c 	.word	0x0804024c
 8014d34:	08014c95 	.word	0x08014c95

08014d38 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b086      	sub	sp, #24
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	60f8      	str	r0, [r7, #12]
 8014d40:	60b9      	str	r1, [r7, #8]
 8014d42:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d4a:	d306      	bcc.n	8014d5a <sys_timeout+0x22>
 8014d4c:	4b0a      	ldr	r3, [pc, #40]	; (8014d78 <sys_timeout+0x40>)
 8014d4e:	f240 1229 	movw	r2, #297	; 0x129
 8014d52:	490a      	ldr	r1, [pc, #40]	; (8014d7c <sys_timeout+0x44>)
 8014d54:	480a      	ldr	r0, [pc, #40]	; (8014d80 <sys_timeout+0x48>)
 8014d56:	f005 f8ef 	bl	8019f38 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014d5a:	f7ef fdfd 	bl	8004958 <sys_now>
 8014d5e:	4602      	mov	r2, r0
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	4413      	add	r3, r2
 8014d64:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	68b9      	ldr	r1, [r7, #8]
 8014d6a:	6978      	ldr	r0, [r7, #20]
 8014d6c:	f7ff ff24 	bl	8014bb8 <sys_timeout_abs>
#endif
}
 8014d70:	bf00      	nop
 8014d72:	3718      	adds	r7, #24
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}
 8014d78:	0801e004 	.word	0x0801e004
 8014d7c:	0801e0a0 	.word	0x0801e0a0
 8014d80:	0801e078 	.word	0x0801e078

08014d84 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b084      	sub	sp, #16
 8014d88:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014d8a:	f7ef fde5 	bl	8004958 <sys_now>
 8014d8e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014d90:	4b17      	ldr	r3, [pc, #92]	; (8014df0 <sys_check_timeouts+0x6c>)
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d022      	beq.n	8014de2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	68fa      	ldr	r2, [r7, #12]
 8014da2:	1ad3      	subs	r3, r2, r3
 8014da4:	0fdb      	lsrs	r3, r3, #31
 8014da6:	f003 0301 	and.w	r3, r3, #1
 8014daa:	b2db      	uxtb	r3, r3
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d11a      	bne.n	8014de6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014db0:	68bb      	ldr	r3, [r7, #8]
 8014db2:	681b      	ldr	r3, [r3, #0]
 8014db4:	4a0e      	ldr	r2, [pc, #56]	; (8014df0 <sys_check_timeouts+0x6c>)
 8014db6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	689b      	ldr	r3, [r3, #8]
 8014dbc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	68db      	ldr	r3, [r3, #12]
 8014dc2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014dc4:	68bb      	ldr	r3, [r7, #8]
 8014dc6:	685b      	ldr	r3, [r3, #4]
 8014dc8:	4a0a      	ldr	r2, [pc, #40]	; (8014df4 <sys_check_timeouts+0x70>)
 8014dca:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014dcc:	68b9      	ldr	r1, [r7, #8]
 8014dce:	200a      	movs	r0, #10
 8014dd0:	f7f8 fcc8 	bl	800d764 <memp_free>
    if (handler != NULL) {
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d0da      	beq.n	8014d90 <sys_check_timeouts+0xc>
      handler(arg);
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6838      	ldr	r0, [r7, #0]
 8014dde:	4798      	blx	r3
  do {
 8014de0:	e7d6      	b.n	8014d90 <sys_check_timeouts+0xc>
      return;
 8014de2:	bf00      	nop
 8014de4:	e000      	b.n	8014de8 <sys_check_timeouts+0x64>
      return;
 8014de6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014de8:	3710      	adds	r7, #16
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}
 8014dee:	bf00      	nop
 8014df0:	2001031c 	.word	0x2001031c
 8014df4:	20010320 	.word	0x20010320

08014df8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b082      	sub	sp, #8
 8014dfc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014dfe:	4b16      	ldr	r3, [pc, #88]	; (8014e58 <sys_timeouts_sleeptime+0x60>)
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d102      	bne.n	8014e0c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014e06:	f04f 33ff 	mov.w	r3, #4294967295
 8014e0a:	e020      	b.n	8014e4e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014e0c:	f7ef fda4 	bl	8004958 <sys_now>
 8014e10:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014e12:	4b11      	ldr	r3, [pc, #68]	; (8014e58 <sys_timeouts_sleeptime+0x60>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	685a      	ldr	r2, [r3, #4]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	1ad3      	subs	r3, r2, r3
 8014e1c:	0fdb      	lsrs	r3, r3, #31
 8014e1e:	f003 0301 	and.w	r3, r3, #1
 8014e22:	b2db      	uxtb	r3, r3
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d001      	beq.n	8014e2c <sys_timeouts_sleeptime+0x34>
    return 0;
 8014e28:	2300      	movs	r3, #0
 8014e2a:	e010      	b.n	8014e4e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014e2c:	4b0a      	ldr	r3, [pc, #40]	; (8014e58 <sys_timeouts_sleeptime+0x60>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	685a      	ldr	r2, [r3, #4]
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	1ad3      	subs	r3, r2, r3
 8014e36:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014e38:	683b      	ldr	r3, [r7, #0]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	da06      	bge.n	8014e4c <sys_timeouts_sleeptime+0x54>
 8014e3e:	4b07      	ldr	r3, [pc, #28]	; (8014e5c <sys_timeouts_sleeptime+0x64>)
 8014e40:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014e44:	4906      	ldr	r1, [pc, #24]	; (8014e60 <sys_timeouts_sleeptime+0x68>)
 8014e46:	4807      	ldr	r0, [pc, #28]	; (8014e64 <sys_timeouts_sleeptime+0x6c>)
 8014e48:	f005 f876 	bl	8019f38 <iprintf>
    return ret;
 8014e4c:	683b      	ldr	r3, [r7, #0]
  }
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3708      	adds	r7, #8
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}
 8014e56:	bf00      	nop
 8014e58:	2001031c 	.word	0x2001031c
 8014e5c:	0801e004 	.word	0x0801e004
 8014e60:	0801e0d8 	.word	0x0801e0d8
 8014e64:	0801e078 	.word	0x0801e078

08014e68 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014e6c:	f005 f87c 	bl	8019f68 <rand>
 8014e70:	4603      	mov	r3, r0
 8014e72:	b29b      	uxth	r3, r3
 8014e74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014e78:	b29b      	uxth	r3, r3
 8014e7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014e7e:	b29a      	uxth	r2, r3
 8014e80:	4b01      	ldr	r3, [pc, #4]	; (8014e88 <udp_init+0x20>)
 8014e82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014e84:	bf00      	nop
 8014e86:	bd80      	pop	{r7, pc}
 8014e88:	2000009c 	.word	0x2000009c

08014e8c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014e8c:	b480      	push	{r7}
 8014e8e:	b083      	sub	sp, #12
 8014e90:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014e92:	2300      	movs	r3, #0
 8014e94:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014e96:	4b17      	ldr	r3, [pc, #92]	; (8014ef4 <udp_new_port+0x68>)
 8014e98:	881b      	ldrh	r3, [r3, #0]
 8014e9a:	1c5a      	adds	r2, r3, #1
 8014e9c:	b291      	uxth	r1, r2
 8014e9e:	4a15      	ldr	r2, [pc, #84]	; (8014ef4 <udp_new_port+0x68>)
 8014ea0:	8011      	strh	r1, [r2, #0]
 8014ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ea6:	4293      	cmp	r3, r2
 8014ea8:	d103      	bne.n	8014eb2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014eaa:	4b12      	ldr	r3, [pc, #72]	; (8014ef4 <udp_new_port+0x68>)
 8014eac:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014eb0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014eb2:	4b11      	ldr	r3, [pc, #68]	; (8014ef8 <udp_new_port+0x6c>)
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	603b      	str	r3, [r7, #0]
 8014eb8:	e011      	b.n	8014ede <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	8a5a      	ldrh	r2, [r3, #18]
 8014ebe:	4b0d      	ldr	r3, [pc, #52]	; (8014ef4 <udp_new_port+0x68>)
 8014ec0:	881b      	ldrh	r3, [r3, #0]
 8014ec2:	429a      	cmp	r2, r3
 8014ec4:	d108      	bne.n	8014ed8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014ec6:	88fb      	ldrh	r3, [r7, #6]
 8014ec8:	3301      	adds	r3, #1
 8014eca:	80fb      	strh	r3, [r7, #6]
 8014ecc:	88fb      	ldrh	r3, [r7, #6]
 8014ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014ed2:	d3e0      	bcc.n	8014e96 <udp_new_port+0xa>
        return 0;
 8014ed4:	2300      	movs	r3, #0
 8014ed6:	e007      	b.n	8014ee8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	68db      	ldr	r3, [r3, #12]
 8014edc:	603b      	str	r3, [r7, #0]
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d1ea      	bne.n	8014eba <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014ee4:	4b03      	ldr	r3, [pc, #12]	; (8014ef4 <udp_new_port+0x68>)
 8014ee6:	881b      	ldrh	r3, [r3, #0]
}
 8014ee8:	4618      	mov	r0, r3
 8014eea:	370c      	adds	r7, #12
 8014eec:	46bd      	mov	sp, r7
 8014eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef2:	4770      	bx	lr
 8014ef4:	2000009c 	.word	0x2000009c
 8014ef8:	20016ebc 	.word	0x20016ebc

08014efc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b084      	sub	sp, #16
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	60f8      	str	r0, [r7, #12]
 8014f04:	60b9      	str	r1, [r7, #8]
 8014f06:	4613      	mov	r3, r2
 8014f08:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d105      	bne.n	8014f1c <udp_input_local_match+0x20>
 8014f10:	4b27      	ldr	r3, [pc, #156]	; (8014fb0 <udp_input_local_match+0xb4>)
 8014f12:	2287      	movs	r2, #135	; 0x87
 8014f14:	4927      	ldr	r1, [pc, #156]	; (8014fb4 <udp_input_local_match+0xb8>)
 8014f16:	4828      	ldr	r0, [pc, #160]	; (8014fb8 <udp_input_local_match+0xbc>)
 8014f18:	f005 f80e 	bl	8019f38 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d105      	bne.n	8014f2e <udp_input_local_match+0x32>
 8014f22:	4b23      	ldr	r3, [pc, #140]	; (8014fb0 <udp_input_local_match+0xb4>)
 8014f24:	2288      	movs	r2, #136	; 0x88
 8014f26:	4925      	ldr	r1, [pc, #148]	; (8014fbc <udp_input_local_match+0xc0>)
 8014f28:	4823      	ldr	r0, [pc, #140]	; (8014fb8 <udp_input_local_match+0xbc>)
 8014f2a:	f005 f805 	bl	8019f38 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	7a1b      	ldrb	r3, [r3, #8]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d00b      	beq.n	8014f4e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	7a1a      	ldrb	r2, [r3, #8]
 8014f3a:	4b21      	ldr	r3, [pc, #132]	; (8014fc0 <udp_input_local_match+0xc4>)
 8014f3c:	685b      	ldr	r3, [r3, #4]
 8014f3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014f42:	3301      	adds	r3, #1
 8014f44:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d001      	beq.n	8014f4e <udp_input_local_match+0x52>
    return 0;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	e02b      	b.n	8014fa6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014f4e:	79fb      	ldrb	r3, [r7, #7]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d018      	beq.n	8014f86 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d013      	beq.n	8014f82 <udp_input_local_match+0x86>
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d00f      	beq.n	8014f82 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014f62:	4b17      	ldr	r3, [pc, #92]	; (8014fc0 <udp_input_local_match+0xc4>)
 8014f64:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f6a:	d00a      	beq.n	8014f82 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	681a      	ldr	r2, [r3, #0]
 8014f70:	4b13      	ldr	r3, [pc, #76]	; (8014fc0 <udp_input_local_match+0xc4>)
 8014f72:	695b      	ldr	r3, [r3, #20]
 8014f74:	405a      	eors	r2, r3
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	3308      	adds	r3, #8
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d110      	bne.n	8014fa4 <udp_input_local_match+0xa8>
          return 1;
 8014f82:	2301      	movs	r3, #1
 8014f84:	e00f      	b.n	8014fa6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d009      	beq.n	8014fa0 <udp_input_local_match+0xa4>
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d005      	beq.n	8014fa0 <udp_input_local_match+0xa4>
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	681a      	ldr	r2, [r3, #0]
 8014f98:	4b09      	ldr	r3, [pc, #36]	; (8014fc0 <udp_input_local_match+0xc4>)
 8014f9a:	695b      	ldr	r3, [r3, #20]
 8014f9c:	429a      	cmp	r2, r3
 8014f9e:	d101      	bne.n	8014fa4 <udp_input_local_match+0xa8>
        return 1;
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	e000      	b.n	8014fa6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014fa4:	2300      	movs	r3, #0
}
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	3710      	adds	r7, #16
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bd80      	pop	{r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	0801e0ec 	.word	0x0801e0ec
 8014fb4:	0801e11c 	.word	0x0801e11c
 8014fb8:	0801e140 	.word	0x0801e140
 8014fbc:	0801e168 	.word	0x0801e168
 8014fc0:	20013770 	.word	0x20013770

08014fc4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014fc4:	b590      	push	{r4, r7, lr}
 8014fc6:	b08d      	sub	sp, #52	; 0x34
 8014fc8:	af02      	add	r7, sp, #8
 8014fca:	6078      	str	r0, [r7, #4]
 8014fcc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014fce:	2300      	movs	r3, #0
 8014fd0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d105      	bne.n	8014fe4 <udp_input+0x20>
 8014fd8:	4b7c      	ldr	r3, [pc, #496]	; (80151cc <udp_input+0x208>)
 8014fda:	22cf      	movs	r2, #207	; 0xcf
 8014fdc:	497c      	ldr	r1, [pc, #496]	; (80151d0 <udp_input+0x20c>)
 8014fde:	487d      	ldr	r0, [pc, #500]	; (80151d4 <udp_input+0x210>)
 8014fe0:	f004 ffaa 	bl	8019f38 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d105      	bne.n	8014ff6 <udp_input+0x32>
 8014fea:	4b78      	ldr	r3, [pc, #480]	; (80151cc <udp_input+0x208>)
 8014fec:	22d0      	movs	r2, #208	; 0xd0
 8014fee:	497a      	ldr	r1, [pc, #488]	; (80151d8 <udp_input+0x214>)
 8014ff0:	4878      	ldr	r0, [pc, #480]	; (80151d4 <udp_input+0x210>)
 8014ff2:	f004 ffa1 	bl	8019f38 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	895b      	ldrh	r3, [r3, #10]
 8014ffa:	2b07      	cmp	r3, #7
 8014ffc:	d803      	bhi.n	8015006 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014ffe:	6878      	ldr	r0, [r7, #4]
 8015000:	f7f9 fa5c 	bl	800e4bc <pbuf_free>
    goto end;
 8015004:	e0de      	b.n	80151c4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	685b      	ldr	r3, [r3, #4]
 801500a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801500c:	4b73      	ldr	r3, [pc, #460]	; (80151dc <udp_input+0x218>)
 801500e:	695a      	ldr	r2, [r3, #20]
 8015010:	4b72      	ldr	r3, [pc, #456]	; (80151dc <udp_input+0x218>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	4619      	mov	r1, r3
 8015016:	4610      	mov	r0, r2
 8015018:	f003 fe2c 	bl	8018c74 <ip4_addr_isbroadcast_u32>
 801501c:	4603      	mov	r3, r0
 801501e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015020:	697b      	ldr	r3, [r7, #20]
 8015022:	881b      	ldrh	r3, [r3, #0]
 8015024:	b29b      	uxth	r3, r3
 8015026:	4618      	mov	r0, r3
 8015028:	f7f7 fe2a 	bl	800cc80 <lwip_htons>
 801502c:	4603      	mov	r3, r0
 801502e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	885b      	ldrh	r3, [r3, #2]
 8015034:	b29b      	uxth	r3, r3
 8015036:	4618      	mov	r0, r3
 8015038:	f7f7 fe22 	bl	800cc80 <lwip_htons>
 801503c:	4603      	mov	r3, r0
 801503e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015040:	2300      	movs	r3, #0
 8015042:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015044:	2300      	movs	r3, #0
 8015046:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015048:	2300      	movs	r3, #0
 801504a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801504c:	4b64      	ldr	r3, [pc, #400]	; (80151e0 <udp_input+0x21c>)
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	627b      	str	r3, [r7, #36]	; 0x24
 8015052:	e054      	b.n	80150fe <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015056:	8a5b      	ldrh	r3, [r3, #18]
 8015058:	89fa      	ldrh	r2, [r7, #14]
 801505a:	429a      	cmp	r2, r3
 801505c:	d14a      	bne.n	80150f4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801505e:	7cfb      	ldrb	r3, [r7, #19]
 8015060:	461a      	mov	r2, r3
 8015062:	6839      	ldr	r1, [r7, #0]
 8015064:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015066:	f7ff ff49 	bl	8014efc <udp_input_local_match>
 801506a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801506c:	2b00      	cmp	r3, #0
 801506e:	d041      	beq.n	80150f4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015072:	7c1b      	ldrb	r3, [r3, #16]
 8015074:	f003 0304 	and.w	r3, r3, #4
 8015078:	2b00      	cmp	r3, #0
 801507a:	d11d      	bne.n	80150b8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801507c:	69fb      	ldr	r3, [r7, #28]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d102      	bne.n	8015088 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015084:	61fb      	str	r3, [r7, #28]
 8015086:	e017      	b.n	80150b8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015088:	7cfb      	ldrb	r3, [r7, #19]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d014      	beq.n	80150b8 <udp_input+0xf4>
 801508e:	4b53      	ldr	r3, [pc, #332]	; (80151dc <udp_input+0x218>)
 8015090:	695b      	ldr	r3, [r3, #20]
 8015092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015096:	d10f      	bne.n	80150b8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015098:	69fb      	ldr	r3, [r7, #28]
 801509a:	681a      	ldr	r2, [r3, #0]
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	3304      	adds	r3, #4
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	429a      	cmp	r2, r3
 80150a4:	d008      	beq.n	80150b8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80150a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150a8:	681a      	ldr	r2, [r3, #0]
 80150aa:	683b      	ldr	r3, [r7, #0]
 80150ac:	3304      	adds	r3, #4
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d101      	bne.n	80150b8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80150b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80150b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ba:	8a9b      	ldrh	r3, [r3, #20]
 80150bc:	8a3a      	ldrh	r2, [r7, #16]
 80150be:	429a      	cmp	r2, r3
 80150c0:	d118      	bne.n	80150f4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80150c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150c4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d005      	beq.n	80150d6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80150ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150cc:	685a      	ldr	r2, [r3, #4]
 80150ce:	4b43      	ldr	r3, [pc, #268]	; (80151dc <udp_input+0x218>)
 80150d0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80150d2:	429a      	cmp	r2, r3
 80150d4:	d10e      	bne.n	80150f4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80150d6:	6a3b      	ldr	r3, [r7, #32]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d014      	beq.n	8015106 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80150dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150de:	68da      	ldr	r2, [r3, #12]
 80150e0:	6a3b      	ldr	r3, [r7, #32]
 80150e2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80150e4:	4b3e      	ldr	r3, [pc, #248]	; (80151e0 <udp_input+0x21c>)
 80150e6:	681a      	ldr	r2, [r3, #0]
 80150e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ea:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80150ec:	4a3c      	ldr	r2, [pc, #240]	; (80151e0 <udp_input+0x21c>)
 80150ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80150f2:	e008      	b.n	8015106 <udp_input+0x142>
      }
    }

    prev = pcb;
 80150f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80150f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150fa:	68db      	ldr	r3, [r3, #12]
 80150fc:	627b      	str	r3, [r7, #36]	; 0x24
 80150fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015100:	2b00      	cmp	r3, #0
 8015102:	d1a7      	bne.n	8015054 <udp_input+0x90>
 8015104:	e000      	b.n	8015108 <udp_input+0x144>
        break;
 8015106:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510a:	2b00      	cmp	r3, #0
 801510c:	d101      	bne.n	8015112 <udp_input+0x14e>
    pcb = uncon_pcb;
 801510e:	69fb      	ldr	r3, [r7, #28]
 8015110:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015114:	2b00      	cmp	r3, #0
 8015116:	d002      	beq.n	801511e <udp_input+0x15a>
    for_us = 1;
 8015118:	2301      	movs	r3, #1
 801511a:	76fb      	strb	r3, [r7, #27]
 801511c:	e00a      	b.n	8015134 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	3304      	adds	r3, #4
 8015122:	681a      	ldr	r2, [r3, #0]
 8015124:	4b2d      	ldr	r3, [pc, #180]	; (80151dc <udp_input+0x218>)
 8015126:	695b      	ldr	r3, [r3, #20]
 8015128:	429a      	cmp	r2, r3
 801512a:	bf0c      	ite	eq
 801512c:	2301      	moveq	r3, #1
 801512e:	2300      	movne	r3, #0
 8015130:	b2db      	uxtb	r3, r3
 8015132:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015134:	7efb      	ldrb	r3, [r7, #27]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d041      	beq.n	80151be <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801513a:	2108      	movs	r1, #8
 801513c:	6878      	ldr	r0, [r7, #4]
 801513e:	f7f9 f937 	bl	800e3b0 <pbuf_remove_header>
 8015142:	4603      	mov	r3, r0
 8015144:	2b00      	cmp	r3, #0
 8015146:	d00a      	beq.n	801515e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015148:	4b20      	ldr	r3, [pc, #128]	; (80151cc <udp_input+0x208>)
 801514a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801514e:	4925      	ldr	r1, [pc, #148]	; (80151e4 <udp_input+0x220>)
 8015150:	4820      	ldr	r0, [pc, #128]	; (80151d4 <udp_input+0x210>)
 8015152:	f004 fef1 	bl	8019f38 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f7f9 f9b0 	bl	800e4bc <pbuf_free>
      goto end;
 801515c:	e032      	b.n	80151c4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015160:	2b00      	cmp	r3, #0
 8015162:	d012      	beq.n	801518a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015166:	699b      	ldr	r3, [r3, #24]
 8015168:	2b00      	cmp	r3, #0
 801516a:	d00a      	beq.n	8015182 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801516e:	699c      	ldr	r4, [r3, #24]
 8015170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015172:	69d8      	ldr	r0, [r3, #28]
 8015174:	8a3b      	ldrh	r3, [r7, #16]
 8015176:	9300      	str	r3, [sp, #0]
 8015178:	4b1b      	ldr	r3, [pc, #108]	; (80151e8 <udp_input+0x224>)
 801517a:	687a      	ldr	r2, [r7, #4]
 801517c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801517e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015180:	e021      	b.n	80151c6 <udp_input+0x202>
        pbuf_free(p);
 8015182:	6878      	ldr	r0, [r7, #4]
 8015184:	f7f9 f99a 	bl	800e4bc <pbuf_free>
        goto end;
 8015188:	e01c      	b.n	80151c4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801518a:	7cfb      	ldrb	r3, [r7, #19]
 801518c:	2b00      	cmp	r3, #0
 801518e:	d112      	bne.n	80151b6 <udp_input+0x1f2>
 8015190:	4b12      	ldr	r3, [pc, #72]	; (80151dc <udp_input+0x218>)
 8015192:	695b      	ldr	r3, [r3, #20]
 8015194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015198:	2be0      	cmp	r3, #224	; 0xe0
 801519a:	d00c      	beq.n	80151b6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801519c:	4b0f      	ldr	r3, [pc, #60]	; (80151dc <udp_input+0x218>)
 801519e:	899b      	ldrh	r3, [r3, #12]
 80151a0:	3308      	adds	r3, #8
 80151a2:	b29b      	uxth	r3, r3
 80151a4:	b21b      	sxth	r3, r3
 80151a6:	4619      	mov	r1, r3
 80151a8:	6878      	ldr	r0, [r7, #4]
 80151aa:	f7f9 f974 	bl	800e496 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80151ae:	2103      	movs	r1, #3
 80151b0:	6878      	ldr	r0, [r7, #4]
 80151b2:	f003 fa23 	bl	80185fc <icmp_dest_unreach>
      pbuf_free(p);
 80151b6:	6878      	ldr	r0, [r7, #4]
 80151b8:	f7f9 f980 	bl	800e4bc <pbuf_free>
  return;
 80151bc:	e003      	b.n	80151c6 <udp_input+0x202>
    pbuf_free(p);
 80151be:	6878      	ldr	r0, [r7, #4]
 80151c0:	f7f9 f97c 	bl	800e4bc <pbuf_free>
  return;
 80151c4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80151c6:	372c      	adds	r7, #44	; 0x2c
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd90      	pop	{r4, r7, pc}
 80151cc:	0801e0ec 	.word	0x0801e0ec
 80151d0:	0801e190 	.word	0x0801e190
 80151d4:	0801e140 	.word	0x0801e140
 80151d8:	0801e1a8 	.word	0x0801e1a8
 80151dc:	20013770 	.word	0x20013770
 80151e0:	20016ebc 	.word	0x20016ebc
 80151e4:	0801e1c4 	.word	0x0801e1c4
 80151e8:	20013780 	.word	0x20013780

080151ec <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b088      	sub	sp, #32
 80151f0:	af02      	add	r7, sp, #8
 80151f2:	60f8      	str	r0, [r7, #12]
 80151f4:	60b9      	str	r1, [r7, #8]
 80151f6:	607a      	str	r2, [r7, #4]
 80151f8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d109      	bne.n	8015214 <udp_sendto_if+0x28>
 8015200:	4b2e      	ldr	r3, [pc, #184]	; (80152bc <udp_sendto_if+0xd0>)
 8015202:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015206:	492e      	ldr	r1, [pc, #184]	; (80152c0 <udp_sendto_if+0xd4>)
 8015208:	482e      	ldr	r0, [pc, #184]	; (80152c4 <udp_sendto_if+0xd8>)
 801520a:	f004 fe95 	bl	8019f38 <iprintf>
 801520e:	f06f 030f 	mvn.w	r3, #15
 8015212:	e04f      	b.n	80152b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d109      	bne.n	801522e <udp_sendto_if+0x42>
 801521a:	4b28      	ldr	r3, [pc, #160]	; (80152bc <udp_sendto_if+0xd0>)
 801521c:	f240 2281 	movw	r2, #641	; 0x281
 8015220:	4929      	ldr	r1, [pc, #164]	; (80152c8 <udp_sendto_if+0xdc>)
 8015222:	4828      	ldr	r0, [pc, #160]	; (80152c4 <udp_sendto_if+0xd8>)
 8015224:	f004 fe88 	bl	8019f38 <iprintf>
 8015228:	f06f 030f 	mvn.w	r3, #15
 801522c:	e042      	b.n	80152b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d109      	bne.n	8015248 <udp_sendto_if+0x5c>
 8015234:	4b21      	ldr	r3, [pc, #132]	; (80152bc <udp_sendto_if+0xd0>)
 8015236:	f240 2282 	movw	r2, #642	; 0x282
 801523a:	4924      	ldr	r1, [pc, #144]	; (80152cc <udp_sendto_if+0xe0>)
 801523c:	4821      	ldr	r0, [pc, #132]	; (80152c4 <udp_sendto_if+0xd8>)
 801523e:	f004 fe7b 	bl	8019f38 <iprintf>
 8015242:	f06f 030f 	mvn.w	r3, #15
 8015246:	e035      	b.n	80152b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015248:	6a3b      	ldr	r3, [r7, #32]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d109      	bne.n	8015262 <udp_sendto_if+0x76>
 801524e:	4b1b      	ldr	r3, [pc, #108]	; (80152bc <udp_sendto_if+0xd0>)
 8015250:	f240 2283 	movw	r2, #643	; 0x283
 8015254:	491e      	ldr	r1, [pc, #120]	; (80152d0 <udp_sendto_if+0xe4>)
 8015256:	481b      	ldr	r0, [pc, #108]	; (80152c4 <udp_sendto_if+0xd8>)
 8015258:	f004 fe6e 	bl	8019f38 <iprintf>
 801525c:	f06f 030f 	mvn.w	r3, #15
 8015260:	e028      	b.n	80152b4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d009      	beq.n	801527c <udp_sendto_if+0x90>
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d005      	beq.n	801527c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015278:	2be0      	cmp	r3, #224	; 0xe0
 801527a:	d103      	bne.n	8015284 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801527c:	6a3b      	ldr	r3, [r7, #32]
 801527e:	3304      	adds	r3, #4
 8015280:	617b      	str	r3, [r7, #20]
 8015282:	e00b      	b.n	801529c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	681a      	ldr	r2, [r3, #0]
 8015288:	6a3b      	ldr	r3, [r7, #32]
 801528a:	3304      	adds	r3, #4
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	429a      	cmp	r2, r3
 8015290:	d002      	beq.n	8015298 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015292:	f06f 0303 	mvn.w	r3, #3
 8015296:	e00d      	b.n	80152b4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801529c:	887a      	ldrh	r2, [r7, #2]
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	9301      	str	r3, [sp, #4]
 80152a2:	6a3b      	ldr	r3, [r7, #32]
 80152a4:	9300      	str	r3, [sp, #0]
 80152a6:	4613      	mov	r3, r2
 80152a8:	687a      	ldr	r2, [r7, #4]
 80152aa:	68b9      	ldr	r1, [r7, #8]
 80152ac:	68f8      	ldr	r0, [r7, #12]
 80152ae:	f000 f811 	bl	80152d4 <udp_sendto_if_src>
 80152b2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80152b4:	4618      	mov	r0, r3
 80152b6:	3718      	adds	r7, #24
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	0801e0ec 	.word	0x0801e0ec
 80152c0:	0801e260 	.word	0x0801e260
 80152c4:	0801e140 	.word	0x0801e140
 80152c8:	0801e27c 	.word	0x0801e27c
 80152cc:	0801e298 	.word	0x0801e298
 80152d0:	0801e2b8 	.word	0x0801e2b8

080152d4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b08c      	sub	sp, #48	; 0x30
 80152d8:	af04      	add	r7, sp, #16
 80152da:	60f8      	str	r0, [r7, #12]
 80152dc:	60b9      	str	r1, [r7, #8]
 80152de:	607a      	str	r2, [r7, #4]
 80152e0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d109      	bne.n	80152fc <udp_sendto_if_src+0x28>
 80152e8:	4b65      	ldr	r3, [pc, #404]	; (8015480 <udp_sendto_if_src+0x1ac>)
 80152ea:	f240 22d1 	movw	r2, #721	; 0x2d1
 80152ee:	4965      	ldr	r1, [pc, #404]	; (8015484 <udp_sendto_if_src+0x1b0>)
 80152f0:	4865      	ldr	r0, [pc, #404]	; (8015488 <udp_sendto_if_src+0x1b4>)
 80152f2:	f004 fe21 	bl	8019f38 <iprintf>
 80152f6:	f06f 030f 	mvn.w	r3, #15
 80152fa:	e0bc      	b.n	8015476 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d109      	bne.n	8015316 <udp_sendto_if_src+0x42>
 8015302:	4b5f      	ldr	r3, [pc, #380]	; (8015480 <udp_sendto_if_src+0x1ac>)
 8015304:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015308:	4960      	ldr	r1, [pc, #384]	; (801548c <udp_sendto_if_src+0x1b8>)
 801530a:	485f      	ldr	r0, [pc, #380]	; (8015488 <udp_sendto_if_src+0x1b4>)
 801530c:	f004 fe14 	bl	8019f38 <iprintf>
 8015310:	f06f 030f 	mvn.w	r3, #15
 8015314:	e0af      	b.n	8015476 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d109      	bne.n	8015330 <udp_sendto_if_src+0x5c>
 801531c:	4b58      	ldr	r3, [pc, #352]	; (8015480 <udp_sendto_if_src+0x1ac>)
 801531e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015322:	495b      	ldr	r1, [pc, #364]	; (8015490 <udp_sendto_if_src+0x1bc>)
 8015324:	4858      	ldr	r0, [pc, #352]	; (8015488 <udp_sendto_if_src+0x1b4>)
 8015326:	f004 fe07 	bl	8019f38 <iprintf>
 801532a:	f06f 030f 	mvn.w	r3, #15
 801532e:	e0a2      	b.n	8015476 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015332:	2b00      	cmp	r3, #0
 8015334:	d109      	bne.n	801534a <udp_sendto_if_src+0x76>
 8015336:	4b52      	ldr	r3, [pc, #328]	; (8015480 <udp_sendto_if_src+0x1ac>)
 8015338:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801533c:	4955      	ldr	r1, [pc, #340]	; (8015494 <udp_sendto_if_src+0x1c0>)
 801533e:	4852      	ldr	r0, [pc, #328]	; (8015488 <udp_sendto_if_src+0x1b4>)
 8015340:	f004 fdfa 	bl	8019f38 <iprintf>
 8015344:	f06f 030f 	mvn.w	r3, #15
 8015348:	e095      	b.n	8015476 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801534c:	2b00      	cmp	r3, #0
 801534e:	d109      	bne.n	8015364 <udp_sendto_if_src+0x90>
 8015350:	4b4b      	ldr	r3, [pc, #300]	; (8015480 <udp_sendto_if_src+0x1ac>)
 8015352:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015356:	4950      	ldr	r1, [pc, #320]	; (8015498 <udp_sendto_if_src+0x1c4>)
 8015358:	484b      	ldr	r0, [pc, #300]	; (8015488 <udp_sendto_if_src+0x1b4>)
 801535a:	f004 fded 	bl	8019f38 <iprintf>
 801535e:	f06f 030f 	mvn.w	r3, #15
 8015362:	e088      	b.n	8015476 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	8a5b      	ldrh	r3, [r3, #18]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d10f      	bne.n	801538c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801536c:	68f9      	ldr	r1, [r7, #12]
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	8a5b      	ldrh	r3, [r3, #18]
 8015372:	461a      	mov	r2, r3
 8015374:	68f8      	ldr	r0, [r7, #12]
 8015376:	f000 f893 	bl	80154a0 <udp_bind>
 801537a:	4603      	mov	r3, r0
 801537c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801537e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d002      	beq.n	801538c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015386:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801538a:	e074      	b.n	8015476 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	891b      	ldrh	r3, [r3, #8]
 8015390:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015394:	4293      	cmp	r3, r2
 8015396:	d902      	bls.n	801539e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015398:	f04f 33ff 	mov.w	r3, #4294967295
 801539c:	e06b      	b.n	8015476 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801539e:	2108      	movs	r1, #8
 80153a0:	68b8      	ldr	r0, [r7, #8]
 80153a2:	f7f8 fff5 	bl	800e390 <pbuf_add_header>
 80153a6:	4603      	mov	r3, r0
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d015      	beq.n	80153d8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80153ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80153b0:	2108      	movs	r1, #8
 80153b2:	2022      	movs	r0, #34	; 0x22
 80153b4:	f7f8 fda2 	bl	800defc <pbuf_alloc>
 80153b8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80153ba:	69fb      	ldr	r3, [r7, #28]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d102      	bne.n	80153c6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80153c0:	f04f 33ff 	mov.w	r3, #4294967295
 80153c4:	e057      	b.n	8015476 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	891b      	ldrh	r3, [r3, #8]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d006      	beq.n	80153dc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80153ce:	68b9      	ldr	r1, [r7, #8]
 80153d0:	69f8      	ldr	r0, [r7, #28]
 80153d2:	f7f9 f997 	bl	800e704 <pbuf_chain>
 80153d6:	e001      	b.n	80153dc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80153dc:	69fb      	ldr	r3, [r7, #28]
 80153de:	895b      	ldrh	r3, [r3, #10]
 80153e0:	2b07      	cmp	r3, #7
 80153e2:	d806      	bhi.n	80153f2 <udp_sendto_if_src+0x11e>
 80153e4:	4b26      	ldr	r3, [pc, #152]	; (8015480 <udp_sendto_if_src+0x1ac>)
 80153e6:	f240 320e 	movw	r2, #782	; 0x30e
 80153ea:	492c      	ldr	r1, [pc, #176]	; (801549c <udp_sendto_if_src+0x1c8>)
 80153ec:	4826      	ldr	r0, [pc, #152]	; (8015488 <udp_sendto_if_src+0x1b4>)
 80153ee:	f004 fda3 	bl	8019f38 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80153f2:	69fb      	ldr	r3, [r7, #28]
 80153f4:	685b      	ldr	r3, [r3, #4]
 80153f6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	8a5b      	ldrh	r3, [r3, #18]
 80153fc:	4618      	mov	r0, r3
 80153fe:	f7f7 fc3f 	bl	800cc80 <lwip_htons>
 8015402:	4603      	mov	r3, r0
 8015404:	461a      	mov	r2, r3
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801540a:	887b      	ldrh	r3, [r7, #2]
 801540c:	4618      	mov	r0, r3
 801540e:	f7f7 fc37 	bl	800cc80 <lwip_htons>
 8015412:	4603      	mov	r3, r0
 8015414:	461a      	mov	r2, r3
 8015416:	697b      	ldr	r3, [r7, #20]
 8015418:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801541a:	697b      	ldr	r3, [r7, #20]
 801541c:	2200      	movs	r2, #0
 801541e:	719a      	strb	r2, [r3, #6]
 8015420:	2200      	movs	r2, #0
 8015422:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015424:	69fb      	ldr	r3, [r7, #28]
 8015426:	891b      	ldrh	r3, [r3, #8]
 8015428:	4618      	mov	r0, r3
 801542a:	f7f7 fc29 	bl	800cc80 <lwip_htons>
 801542e:	4603      	mov	r3, r0
 8015430:	461a      	mov	r2, r3
 8015432:	697b      	ldr	r3, [r7, #20]
 8015434:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015436:	2311      	movs	r3, #17
 8015438:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	7adb      	ldrb	r3, [r3, #11]
 801543e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	7a9b      	ldrb	r3, [r3, #10]
 8015444:	7cb9      	ldrb	r1, [r7, #18]
 8015446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015448:	9202      	str	r2, [sp, #8]
 801544a:	7cfa      	ldrb	r2, [r7, #19]
 801544c:	9201      	str	r2, [sp, #4]
 801544e:	9300      	str	r3, [sp, #0]
 8015450:	460b      	mov	r3, r1
 8015452:	687a      	ldr	r2, [r7, #4]
 8015454:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015456:	69f8      	ldr	r0, [r7, #28]
 8015458:	f003 fb5e 	bl	8018b18 <ip4_output_if_src>
 801545c:	4603      	mov	r3, r0
 801545e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015460:	69fa      	ldr	r2, [r7, #28]
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	429a      	cmp	r2, r3
 8015466:	d004      	beq.n	8015472 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015468:	69f8      	ldr	r0, [r7, #28]
 801546a:	f7f9 f827 	bl	800e4bc <pbuf_free>
    q = NULL;
 801546e:	2300      	movs	r3, #0
 8015470:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015472:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015476:	4618      	mov	r0, r3
 8015478:	3720      	adds	r7, #32
 801547a:	46bd      	mov	sp, r7
 801547c:	bd80      	pop	{r7, pc}
 801547e:	bf00      	nop
 8015480:	0801e0ec 	.word	0x0801e0ec
 8015484:	0801e2d8 	.word	0x0801e2d8
 8015488:	0801e140 	.word	0x0801e140
 801548c:	0801e2f8 	.word	0x0801e2f8
 8015490:	0801e318 	.word	0x0801e318
 8015494:	0801e33c 	.word	0x0801e33c
 8015498:	0801e360 	.word	0x0801e360
 801549c:	0801e384 	.word	0x0801e384

080154a0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b086      	sub	sp, #24
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	60f8      	str	r0, [r7, #12]
 80154a8:	60b9      	str	r1, [r7, #8]
 80154aa:	4613      	mov	r3, r2
 80154ac:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80154ae:	68bb      	ldr	r3, [r7, #8]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d101      	bne.n	80154b8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80154b4:	4b39      	ldr	r3, [pc, #228]	; (801559c <udp_bind+0xfc>)
 80154b6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d109      	bne.n	80154d2 <udp_bind+0x32>
 80154be:	4b38      	ldr	r3, [pc, #224]	; (80155a0 <udp_bind+0x100>)
 80154c0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80154c4:	4937      	ldr	r1, [pc, #220]	; (80155a4 <udp_bind+0x104>)
 80154c6:	4838      	ldr	r0, [pc, #224]	; (80155a8 <udp_bind+0x108>)
 80154c8:	f004 fd36 	bl	8019f38 <iprintf>
 80154cc:	f06f 030f 	mvn.w	r3, #15
 80154d0:	e060      	b.n	8015594 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80154d2:	2300      	movs	r3, #0
 80154d4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80154d6:	4b35      	ldr	r3, [pc, #212]	; (80155ac <udp_bind+0x10c>)
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	617b      	str	r3, [r7, #20]
 80154dc:	e009      	b.n	80154f2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80154de:	68fa      	ldr	r2, [r7, #12]
 80154e0:	697b      	ldr	r3, [r7, #20]
 80154e2:	429a      	cmp	r2, r3
 80154e4:	d102      	bne.n	80154ec <udp_bind+0x4c>
      rebind = 1;
 80154e6:	2301      	movs	r3, #1
 80154e8:	74fb      	strb	r3, [r7, #19]
      break;
 80154ea:	e005      	b.n	80154f8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	68db      	ldr	r3, [r3, #12]
 80154f0:	617b      	str	r3, [r7, #20]
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d1f2      	bne.n	80154de <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80154f8:	88fb      	ldrh	r3, [r7, #6]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d109      	bne.n	8015512 <udp_bind+0x72>
    port = udp_new_port();
 80154fe:	f7ff fcc5 	bl	8014e8c <udp_new_port>
 8015502:	4603      	mov	r3, r0
 8015504:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015506:	88fb      	ldrh	r3, [r7, #6]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d12c      	bne.n	8015566 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801550c:	f06f 0307 	mvn.w	r3, #7
 8015510:	e040      	b.n	8015594 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015512:	4b26      	ldr	r3, [pc, #152]	; (80155ac <udp_bind+0x10c>)
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	617b      	str	r3, [r7, #20]
 8015518:	e022      	b.n	8015560 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801551a:	68fa      	ldr	r2, [r7, #12]
 801551c:	697b      	ldr	r3, [r7, #20]
 801551e:	429a      	cmp	r2, r3
 8015520:	d01b      	beq.n	801555a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	8a5b      	ldrh	r3, [r3, #18]
 8015526:	88fa      	ldrh	r2, [r7, #6]
 8015528:	429a      	cmp	r2, r3
 801552a:	d116      	bne.n	801555a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	681a      	ldr	r2, [r3, #0]
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015534:	429a      	cmp	r2, r3
 8015536:	d00d      	beq.n	8015554 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	2b00      	cmp	r3, #0
 801553c:	d00a      	beq.n	8015554 <udp_bind+0xb4>
 801553e:	68bb      	ldr	r3, [r7, #8]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d006      	beq.n	8015554 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015546:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015548:	2b00      	cmp	r3, #0
 801554a:	d003      	beq.n	8015554 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801554c:	697b      	ldr	r3, [r7, #20]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d102      	bne.n	801555a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015554:	f06f 0307 	mvn.w	r3, #7
 8015558:	e01c      	b.n	8015594 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	68db      	ldr	r3, [r3, #12]
 801555e:	617b      	str	r3, [r7, #20]
 8015560:	697b      	ldr	r3, [r7, #20]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d1d9      	bne.n	801551a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d002      	beq.n	8015572 <udp_bind+0xd2>
 801556c:	68bb      	ldr	r3, [r7, #8]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	e000      	b.n	8015574 <udp_bind+0xd4>
 8015572:	2300      	movs	r3, #0
 8015574:	68fa      	ldr	r2, [r7, #12]
 8015576:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	88fa      	ldrh	r2, [r7, #6]
 801557c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801557e:	7cfb      	ldrb	r3, [r7, #19]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d106      	bne.n	8015592 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015584:	4b09      	ldr	r3, [pc, #36]	; (80155ac <udp_bind+0x10c>)
 8015586:	681a      	ldr	r2, [r3, #0]
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801558c:	4a07      	ldr	r2, [pc, #28]	; (80155ac <udp_bind+0x10c>)
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015592:	2300      	movs	r3, #0
}
 8015594:	4618      	mov	r0, r3
 8015596:	3718      	adds	r7, #24
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}
 801559c:	08040274 	.word	0x08040274
 80155a0:	0801e0ec 	.word	0x0801e0ec
 80155a4:	0801e3b4 	.word	0x0801e3b4
 80155a8:	0801e140 	.word	0x0801e140
 80155ac:	20016ebc 	.word	0x20016ebc

080155b0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b086      	sub	sp, #24
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	4613      	mov	r3, r2
 80155bc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d109      	bne.n	80155d8 <udp_connect+0x28>
 80155c4:	4b2c      	ldr	r3, [pc, #176]	; (8015678 <udp_connect+0xc8>)
 80155c6:	f240 4235 	movw	r2, #1077	; 0x435
 80155ca:	492c      	ldr	r1, [pc, #176]	; (801567c <udp_connect+0xcc>)
 80155cc:	482c      	ldr	r0, [pc, #176]	; (8015680 <udp_connect+0xd0>)
 80155ce:	f004 fcb3 	bl	8019f38 <iprintf>
 80155d2:	f06f 030f 	mvn.w	r3, #15
 80155d6:	e04b      	b.n	8015670 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d109      	bne.n	80155f2 <udp_connect+0x42>
 80155de:	4b26      	ldr	r3, [pc, #152]	; (8015678 <udp_connect+0xc8>)
 80155e0:	f240 4236 	movw	r2, #1078	; 0x436
 80155e4:	4927      	ldr	r1, [pc, #156]	; (8015684 <udp_connect+0xd4>)
 80155e6:	4826      	ldr	r0, [pc, #152]	; (8015680 <udp_connect+0xd0>)
 80155e8:	f004 fca6 	bl	8019f38 <iprintf>
 80155ec:	f06f 030f 	mvn.w	r3, #15
 80155f0:	e03e      	b.n	8015670 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	8a5b      	ldrh	r3, [r3, #18]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d10f      	bne.n	801561a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80155fa:	68f9      	ldr	r1, [r7, #12]
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	8a5b      	ldrh	r3, [r3, #18]
 8015600:	461a      	mov	r2, r3
 8015602:	68f8      	ldr	r0, [r7, #12]
 8015604:	f7ff ff4c 	bl	80154a0 <udp_bind>
 8015608:	4603      	mov	r3, r0
 801560a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801560c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d002      	beq.n	801561a <udp_connect+0x6a>
      return err;
 8015614:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015618:	e02a      	b.n	8015670 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801561a:	68bb      	ldr	r3, [r7, #8]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d002      	beq.n	8015626 <udp_connect+0x76>
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	e000      	b.n	8015628 <udp_connect+0x78>
 8015626:	2300      	movs	r3, #0
 8015628:	68fa      	ldr	r2, [r7, #12]
 801562a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	88fa      	ldrh	r2, [r7, #6]
 8015630:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	7c1b      	ldrb	r3, [r3, #16]
 8015636:	f043 0304 	orr.w	r3, r3, #4
 801563a:	b2da      	uxtb	r2, r3
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015640:	4b11      	ldr	r3, [pc, #68]	; (8015688 <udp_connect+0xd8>)
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	617b      	str	r3, [r7, #20]
 8015646:	e008      	b.n	801565a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015648:	68fa      	ldr	r2, [r7, #12]
 801564a:	697b      	ldr	r3, [r7, #20]
 801564c:	429a      	cmp	r2, r3
 801564e:	d101      	bne.n	8015654 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015650:	2300      	movs	r3, #0
 8015652:	e00d      	b.n	8015670 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015654:	697b      	ldr	r3, [r7, #20]
 8015656:	68db      	ldr	r3, [r3, #12]
 8015658:	617b      	str	r3, [r7, #20]
 801565a:	697b      	ldr	r3, [r7, #20]
 801565c:	2b00      	cmp	r3, #0
 801565e:	d1f3      	bne.n	8015648 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015660:	4b09      	ldr	r3, [pc, #36]	; (8015688 <udp_connect+0xd8>)
 8015662:	681a      	ldr	r2, [r3, #0]
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015668:	4a07      	ldr	r2, [pc, #28]	; (8015688 <udp_connect+0xd8>)
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801566e:	2300      	movs	r3, #0
}
 8015670:	4618      	mov	r0, r3
 8015672:	3718      	adds	r7, #24
 8015674:	46bd      	mov	sp, r7
 8015676:	bd80      	pop	{r7, pc}
 8015678:	0801e0ec 	.word	0x0801e0ec
 801567c:	0801e3cc 	.word	0x0801e3cc
 8015680:	0801e140 	.word	0x0801e140
 8015684:	0801e3e8 	.word	0x0801e3e8
 8015688:	20016ebc 	.word	0x20016ebc

0801568c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b084      	sub	sp, #16
 8015690:	af00      	add	r7, sp, #0
 8015692:	60f8      	str	r0, [r7, #12]
 8015694:	60b9      	str	r1, [r7, #8]
 8015696:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d107      	bne.n	80156ae <udp_recv+0x22>
 801569e:	4b08      	ldr	r3, [pc, #32]	; (80156c0 <udp_recv+0x34>)
 80156a0:	f240 428a 	movw	r2, #1162	; 0x48a
 80156a4:	4907      	ldr	r1, [pc, #28]	; (80156c4 <udp_recv+0x38>)
 80156a6:	4808      	ldr	r0, [pc, #32]	; (80156c8 <udp_recv+0x3c>)
 80156a8:	f004 fc46 	bl	8019f38 <iprintf>
 80156ac:	e005      	b.n	80156ba <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	68ba      	ldr	r2, [r7, #8]
 80156b2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	687a      	ldr	r2, [r7, #4]
 80156b8:	61da      	str	r2, [r3, #28]
}
 80156ba:	3710      	adds	r7, #16
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}
 80156c0:	0801e0ec 	.word	0x0801e0ec
 80156c4:	0801e420 	.word	0x0801e420
 80156c8:	0801e140 	.word	0x0801e140

080156cc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b084      	sub	sp, #16
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d107      	bne.n	80156ea <udp_remove+0x1e>
 80156da:	4b19      	ldr	r3, [pc, #100]	; (8015740 <udp_remove+0x74>)
 80156dc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80156e0:	4918      	ldr	r1, [pc, #96]	; (8015744 <udp_remove+0x78>)
 80156e2:	4819      	ldr	r0, [pc, #100]	; (8015748 <udp_remove+0x7c>)
 80156e4:	f004 fc28 	bl	8019f38 <iprintf>
 80156e8:	e026      	b.n	8015738 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80156ea:	4b18      	ldr	r3, [pc, #96]	; (801574c <udp_remove+0x80>)
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	687a      	ldr	r2, [r7, #4]
 80156f0:	429a      	cmp	r2, r3
 80156f2:	d105      	bne.n	8015700 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80156f4:	4b15      	ldr	r3, [pc, #84]	; (801574c <udp_remove+0x80>)
 80156f6:	681b      	ldr	r3, [r3, #0]
 80156f8:	68db      	ldr	r3, [r3, #12]
 80156fa:	4a14      	ldr	r2, [pc, #80]	; (801574c <udp_remove+0x80>)
 80156fc:	6013      	str	r3, [r2, #0]
 80156fe:	e017      	b.n	8015730 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015700:	4b12      	ldr	r3, [pc, #72]	; (801574c <udp_remove+0x80>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	60fb      	str	r3, [r7, #12]
 8015706:	e010      	b.n	801572a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	68db      	ldr	r3, [r3, #12]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d009      	beq.n	8015724 <udp_remove+0x58>
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	68db      	ldr	r3, [r3, #12]
 8015714:	687a      	ldr	r2, [r7, #4]
 8015716:	429a      	cmp	r2, r3
 8015718:	d104      	bne.n	8015724 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	68da      	ldr	r2, [r3, #12]
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	60da      	str	r2, [r3, #12]
        break;
 8015722:	e005      	b.n	8015730 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	68db      	ldr	r3, [r3, #12]
 8015728:	60fb      	str	r3, [r7, #12]
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d1eb      	bne.n	8015708 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015730:	6879      	ldr	r1, [r7, #4]
 8015732:	2000      	movs	r0, #0
 8015734:	f7f8 f816 	bl	800d764 <memp_free>
}
 8015738:	3710      	adds	r7, #16
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}
 801573e:	bf00      	nop
 8015740:	0801e0ec 	.word	0x0801e0ec
 8015744:	0801e438 	.word	0x0801e438
 8015748:	0801e140 	.word	0x0801e140
 801574c:	20016ebc 	.word	0x20016ebc

08015750 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015750:	b580      	push	{r7, lr}
 8015752:	b082      	sub	sp, #8
 8015754:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015756:	2000      	movs	r0, #0
 8015758:	f7f7 ffb2 	bl	800d6c0 <memp_malloc>
 801575c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d007      	beq.n	8015774 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015764:	2220      	movs	r2, #32
 8015766:	2100      	movs	r1, #0
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	f004 fbdc 	bl	8019f26 <memset>
    pcb->ttl = UDP_TTL;
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	22ff      	movs	r2, #255	; 0xff
 8015772:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015774:	687b      	ldr	r3, [r7, #4]
}
 8015776:	4618      	mov	r0, r3
 8015778:	3708      	adds	r7, #8
 801577a:	46bd      	mov	sp, r7
 801577c:	bd80      	pop	{r7, pc}

0801577e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801577e:	b580      	push	{r7, lr}
 8015780:	b084      	sub	sp, #16
 8015782:	af00      	add	r7, sp, #0
 8015784:	4603      	mov	r3, r0
 8015786:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015788:	f7ff ffe2 	bl	8015750 <udp_new>
 801578c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801578e:	68fb      	ldr	r3, [r7, #12]
}
 8015790:	4618      	mov	r0, r3
 8015792:	3710      	adds	r7, #16
 8015794:	46bd      	mov	sp, r7
 8015796:	bd80      	pop	{r7, pc}

08015798 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015798:	b480      	push	{r7}
 801579a:	b085      	sub	sp, #20
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
 80157a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80157a2:	687b      	ldr	r3, [r7, #4]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d01e      	beq.n	80157e6 <udp_netif_ip_addr_changed+0x4e>
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d01a      	beq.n	80157e6 <udp_netif_ip_addr_changed+0x4e>
 80157b0:	683b      	ldr	r3, [r7, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d017      	beq.n	80157e6 <udp_netif_ip_addr_changed+0x4e>
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d013      	beq.n	80157e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80157be:	4b0d      	ldr	r3, [pc, #52]	; (80157f4 <udp_netif_ip_addr_changed+0x5c>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	60fb      	str	r3, [r7, #12]
 80157c4:	e00c      	b.n	80157e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	681a      	ldr	r2, [r3, #0]
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d103      	bne.n	80157da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	681a      	ldr	r2, [r3, #0]
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	68db      	ldr	r3, [r3, #12]
 80157de:	60fb      	str	r3, [r7, #12]
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d1ef      	bne.n	80157c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80157e6:	bf00      	nop
 80157e8:	3714      	adds	r7, #20
 80157ea:	46bd      	mov	sp, r7
 80157ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f0:	4770      	bx	lr
 80157f2:	bf00      	nop
 80157f4:	20016ebc 	.word	0x20016ebc

080157f8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80157f8:	b580      	push	{r7, lr}
 80157fa:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80157fc:	4b20      	ldr	r3, [pc, #128]	; (8015880 <dhcp_inc_pcb_refcount+0x88>)
 80157fe:	781b      	ldrb	r3, [r3, #0]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d133      	bne.n	801586c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015804:	4b1f      	ldr	r3, [pc, #124]	; (8015884 <dhcp_inc_pcb_refcount+0x8c>)
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d005      	beq.n	8015818 <dhcp_inc_pcb_refcount+0x20>
 801580c:	4b1e      	ldr	r3, [pc, #120]	; (8015888 <dhcp_inc_pcb_refcount+0x90>)
 801580e:	22e5      	movs	r2, #229	; 0xe5
 8015810:	491e      	ldr	r1, [pc, #120]	; (801588c <dhcp_inc_pcb_refcount+0x94>)
 8015812:	481f      	ldr	r0, [pc, #124]	; (8015890 <dhcp_inc_pcb_refcount+0x98>)
 8015814:	f004 fb90 	bl	8019f38 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015818:	f7ff ff9a 	bl	8015750 <udp_new>
 801581c:	4602      	mov	r2, r0
 801581e:	4b19      	ldr	r3, [pc, #100]	; (8015884 <dhcp_inc_pcb_refcount+0x8c>)
 8015820:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8015822:	4b18      	ldr	r3, [pc, #96]	; (8015884 <dhcp_inc_pcb_refcount+0x8c>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	2b00      	cmp	r3, #0
 8015828:	d102      	bne.n	8015830 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801582a:	f04f 33ff 	mov.w	r3, #4294967295
 801582e:	e024      	b.n	801587a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8015830:	4b14      	ldr	r3, [pc, #80]	; (8015884 <dhcp_inc_pcb_refcount+0x8c>)
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	7a5a      	ldrb	r2, [r3, #9]
 8015836:	4b13      	ldr	r3, [pc, #76]	; (8015884 <dhcp_inc_pcb_refcount+0x8c>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	f042 0220 	orr.w	r2, r2, #32
 801583e:	b2d2      	uxtb	r2, r2
 8015840:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8015842:	4b10      	ldr	r3, [pc, #64]	; (8015884 <dhcp_inc_pcb_refcount+0x8c>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	2244      	movs	r2, #68	; 0x44
 8015848:	4912      	ldr	r1, [pc, #72]	; (8015894 <dhcp_inc_pcb_refcount+0x9c>)
 801584a:	4618      	mov	r0, r3
 801584c:	f7ff fe28 	bl	80154a0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8015850:	4b0c      	ldr	r3, [pc, #48]	; (8015884 <dhcp_inc_pcb_refcount+0x8c>)
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	2243      	movs	r2, #67	; 0x43
 8015856:	490f      	ldr	r1, [pc, #60]	; (8015894 <dhcp_inc_pcb_refcount+0x9c>)
 8015858:	4618      	mov	r0, r3
 801585a:	f7ff fea9 	bl	80155b0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801585e:	4b09      	ldr	r3, [pc, #36]	; (8015884 <dhcp_inc_pcb_refcount+0x8c>)
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	2200      	movs	r2, #0
 8015864:	490c      	ldr	r1, [pc, #48]	; (8015898 <dhcp_inc_pcb_refcount+0xa0>)
 8015866:	4618      	mov	r0, r3
 8015868:	f7ff ff10 	bl	801568c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801586c:	4b04      	ldr	r3, [pc, #16]	; (8015880 <dhcp_inc_pcb_refcount+0x88>)
 801586e:	781b      	ldrb	r3, [r3, #0]
 8015870:	3301      	adds	r3, #1
 8015872:	b2da      	uxtb	r2, r3
 8015874:	4b02      	ldr	r3, [pc, #8]	; (8015880 <dhcp_inc_pcb_refcount+0x88>)
 8015876:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8015878:	2300      	movs	r3, #0
}
 801587a:	4618      	mov	r0, r3
 801587c:	bd80      	pop	{r7, pc}
 801587e:	bf00      	nop
 8015880:	2001032c 	.word	0x2001032c
 8015884:	20010328 	.word	0x20010328
 8015888:	0801e450 	.word	0x0801e450
 801588c:	0801e488 	.word	0x0801e488
 8015890:	0801e4b0 	.word	0x0801e4b0
 8015894:	08040274 	.word	0x08040274
 8015898:	08017169 	.word	0x08017169

0801589c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801589c:	b580      	push	{r7, lr}
 801589e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80158a0:	4b0e      	ldr	r3, [pc, #56]	; (80158dc <dhcp_dec_pcb_refcount+0x40>)
 80158a2:	781b      	ldrb	r3, [r3, #0]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d105      	bne.n	80158b4 <dhcp_dec_pcb_refcount+0x18>
 80158a8:	4b0d      	ldr	r3, [pc, #52]	; (80158e0 <dhcp_dec_pcb_refcount+0x44>)
 80158aa:	22ff      	movs	r2, #255	; 0xff
 80158ac:	490d      	ldr	r1, [pc, #52]	; (80158e4 <dhcp_dec_pcb_refcount+0x48>)
 80158ae:	480e      	ldr	r0, [pc, #56]	; (80158e8 <dhcp_dec_pcb_refcount+0x4c>)
 80158b0:	f004 fb42 	bl	8019f38 <iprintf>
  dhcp_pcb_refcount--;
 80158b4:	4b09      	ldr	r3, [pc, #36]	; (80158dc <dhcp_dec_pcb_refcount+0x40>)
 80158b6:	781b      	ldrb	r3, [r3, #0]
 80158b8:	3b01      	subs	r3, #1
 80158ba:	b2da      	uxtb	r2, r3
 80158bc:	4b07      	ldr	r3, [pc, #28]	; (80158dc <dhcp_dec_pcb_refcount+0x40>)
 80158be:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80158c0:	4b06      	ldr	r3, [pc, #24]	; (80158dc <dhcp_dec_pcb_refcount+0x40>)
 80158c2:	781b      	ldrb	r3, [r3, #0]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d107      	bne.n	80158d8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80158c8:	4b08      	ldr	r3, [pc, #32]	; (80158ec <dhcp_dec_pcb_refcount+0x50>)
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	4618      	mov	r0, r3
 80158ce:	f7ff fefd 	bl	80156cc <udp_remove>
    dhcp_pcb = NULL;
 80158d2:	4b06      	ldr	r3, [pc, #24]	; (80158ec <dhcp_dec_pcb_refcount+0x50>)
 80158d4:	2200      	movs	r2, #0
 80158d6:	601a      	str	r2, [r3, #0]
  }
}
 80158d8:	bf00      	nop
 80158da:	bd80      	pop	{r7, pc}
 80158dc:	2001032c 	.word	0x2001032c
 80158e0:	0801e450 	.word	0x0801e450
 80158e4:	0801e4d8 	.word	0x0801e4d8
 80158e8:	0801e4b0 	.word	0x0801e4b0
 80158ec:	20010328 	.word	0x20010328

080158f0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b084      	sub	sp, #16
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158fc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80158fe:	210c      	movs	r1, #12
 8015900:	68f8      	ldr	r0, [r7, #12]
 8015902:	f001 f872 	bl	80169ea <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015906:	4b06      	ldr	r3, [pc, #24]	; (8015920 <dhcp_handle_nak+0x30>)
 8015908:	4a05      	ldr	r2, [pc, #20]	; (8015920 <dhcp_handle_nak+0x30>)
 801590a:	4905      	ldr	r1, [pc, #20]	; (8015920 <dhcp_handle_nak+0x30>)
 801590c:	6878      	ldr	r0, [r7, #4]
 801590e:	f7f8 f8cb 	bl	800daa8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8015912:	6878      	ldr	r0, [r7, #4]
 8015914:	f000 fc5a 	bl	80161cc <dhcp_discover>
}
 8015918:	bf00      	nop
 801591a:	3710      	adds	r7, #16
 801591c:	46bd      	mov	sp, r7
 801591e:	bd80      	pop	{r7, pc}
 8015920:	08040274 	.word	0x08040274

08015924 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b084      	sub	sp, #16
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015930:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015932:	2108      	movs	r1, #8
 8015934:	68f8      	ldr	r0, [r7, #12]
 8015936:	f001 f858 	bl	80169ea <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	331c      	adds	r3, #28
 801593e:	2200      	movs	r2, #0
 8015940:	4619      	mov	r1, r3
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f002 fb58 	bl	8017ff8 <etharp_query>
 8015948:	4603      	mov	r3, r0
 801594a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	799b      	ldrb	r3, [r3, #6]
 8015950:	2bff      	cmp	r3, #255	; 0xff
 8015952:	d005      	beq.n	8015960 <dhcp_check+0x3c>
    dhcp->tries++;
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	799b      	ldrb	r3, [r3, #6]
 8015958:	3301      	adds	r3, #1
 801595a:	b2da      	uxtb	r2, r3
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015960:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8015964:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015966:	893b      	ldrh	r3, [r7, #8]
 8015968:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801596c:	4a06      	ldr	r2, [pc, #24]	; (8015988 <dhcp_check+0x64>)
 801596e:	fb82 1203 	smull	r1, r2, r2, r3
 8015972:	1152      	asrs	r2, r2, #5
 8015974:	17db      	asrs	r3, r3, #31
 8015976:	1ad3      	subs	r3, r2, r3
 8015978:	b29a      	uxth	r2, r3
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801597e:	bf00      	nop
 8015980:	3710      	adds	r7, #16
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}
 8015986:	bf00      	nop
 8015988:	10624dd3 	.word	0x10624dd3

0801598c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b084      	sub	sp, #16
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801599a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801599c:	4b0c      	ldr	r3, [pc, #48]	; (80159d0 <dhcp_handle_offer+0x44>)
 801599e:	789b      	ldrb	r3, [r3, #2]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d011      	beq.n	80159c8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2200      	movs	r2, #0
 80159a8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80159aa:	4b0a      	ldr	r3, [pc, #40]	; (80159d4 <dhcp_handle_offer+0x48>)
 80159ac:	689b      	ldr	r3, [r3, #8]
 80159ae:	4618      	mov	r0, r3
 80159b0:	f7f7 f97b 	bl	800ccaa <lwip_htonl>
 80159b4:	4602      	mov	r2, r0
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80159ba:	683b      	ldr	r3, [r7, #0]
 80159bc:	691a      	ldr	r2, [r3, #16]
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80159c2:	6878      	ldr	r0, [r7, #4]
 80159c4:	f000 f808 	bl	80159d8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80159c8:	bf00      	nop
 80159ca:	3710      	adds	r7, #16
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}
 80159d0:	20016ec0 	.word	0x20016ec0
 80159d4:	20016ec8 	.word	0x20016ec8

080159d8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80159d8:	b5b0      	push	{r4, r5, r7, lr}
 80159da:	b08a      	sub	sp, #40	; 0x28
 80159dc:	af02      	add	r7, sp, #8
 80159de:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d109      	bne.n	80159fa <dhcp_select+0x22>
 80159e6:	4b71      	ldr	r3, [pc, #452]	; (8015bac <dhcp_select+0x1d4>)
 80159e8:	f240 1277 	movw	r2, #375	; 0x177
 80159ec:	4970      	ldr	r1, [pc, #448]	; (8015bb0 <dhcp_select+0x1d8>)
 80159ee:	4871      	ldr	r0, [pc, #452]	; (8015bb4 <dhcp_select+0x1dc>)
 80159f0:	f004 faa2 	bl	8019f38 <iprintf>
 80159f4:	f06f 030f 	mvn.w	r3, #15
 80159f8:	e0d3      	b.n	8015ba2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159fe:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015a00:	69bb      	ldr	r3, [r7, #24]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d109      	bne.n	8015a1a <dhcp_select+0x42>
 8015a06:	4b69      	ldr	r3, [pc, #420]	; (8015bac <dhcp_select+0x1d4>)
 8015a08:	f240 1279 	movw	r2, #377	; 0x179
 8015a0c:	496a      	ldr	r1, [pc, #424]	; (8015bb8 <dhcp_select+0x1e0>)
 8015a0e:	4869      	ldr	r0, [pc, #420]	; (8015bb4 <dhcp_select+0x1dc>)
 8015a10:	f004 fa92 	bl	8019f38 <iprintf>
 8015a14:	f06f 0305 	mvn.w	r3, #5
 8015a18:	e0c3      	b.n	8015ba2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015a1a:	2101      	movs	r1, #1
 8015a1c:	69b8      	ldr	r0, [r7, #24]
 8015a1e:	f000 ffe4 	bl	80169ea <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015a22:	f107 030c 	add.w	r3, r7, #12
 8015a26:	2203      	movs	r2, #3
 8015a28:	69b9      	ldr	r1, [r7, #24]
 8015a2a:	6878      	ldr	r0, [r7, #4]
 8015a2c:	f001 fc68 	bl	8017300 <dhcp_create_msg>
 8015a30:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015a32:	697b      	ldr	r3, [r7, #20]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	f000 8085 	beq.w	8015b44 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015a3a:	697b      	ldr	r3, [r7, #20]
 8015a3c:	685b      	ldr	r3, [r3, #4]
 8015a3e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015a40:	89b8      	ldrh	r0, [r7, #12]
 8015a42:	693b      	ldr	r3, [r7, #16]
 8015a44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a48:	2302      	movs	r3, #2
 8015a4a:	2239      	movs	r2, #57	; 0x39
 8015a4c:	f000 ffe8 	bl	8016a20 <dhcp_option>
 8015a50:	4603      	mov	r3, r0
 8015a52:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015a54:	89b8      	ldrh	r0, [r7, #12]
 8015a56:	693b      	ldr	r3, [r7, #16]
 8015a58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a60:	461a      	mov	r2, r3
 8015a62:	f001 f837 	bl	8016ad4 <dhcp_option_short>
 8015a66:	4603      	mov	r3, r0
 8015a68:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015a6a:	89b8      	ldrh	r0, [r7, #12]
 8015a6c:	693b      	ldr	r3, [r7, #16]
 8015a6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a72:	2304      	movs	r3, #4
 8015a74:	2232      	movs	r2, #50	; 0x32
 8015a76:	f000 ffd3 	bl	8016a20 <dhcp_option>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015a7e:	89bc      	ldrh	r4, [r7, #12]
 8015a80:	693b      	ldr	r3, [r7, #16]
 8015a82:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015a86:	69bb      	ldr	r3, [r7, #24]
 8015a88:	69db      	ldr	r3, [r3, #28]
 8015a8a:	4618      	mov	r0, r3
 8015a8c:	f7f7 f90d 	bl	800ccaa <lwip_htonl>
 8015a90:	4603      	mov	r3, r0
 8015a92:	461a      	mov	r2, r3
 8015a94:	4629      	mov	r1, r5
 8015a96:	4620      	mov	r0, r4
 8015a98:	f001 f84e 	bl	8016b38 <dhcp_option_long>
 8015a9c:	4603      	mov	r3, r0
 8015a9e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015aa0:	89b8      	ldrh	r0, [r7, #12]
 8015aa2:	693b      	ldr	r3, [r7, #16]
 8015aa4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015aa8:	2304      	movs	r3, #4
 8015aaa:	2236      	movs	r2, #54	; 0x36
 8015aac:	f000 ffb8 	bl	8016a20 <dhcp_option>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015ab4:	89bc      	ldrh	r4, [r7, #12]
 8015ab6:	693b      	ldr	r3, [r7, #16]
 8015ab8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015abc:	69bb      	ldr	r3, [r7, #24]
 8015abe:	699b      	ldr	r3, [r3, #24]
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f7f7 f8f2 	bl	800ccaa <lwip_htonl>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	461a      	mov	r2, r3
 8015aca:	4629      	mov	r1, r5
 8015acc:	4620      	mov	r0, r4
 8015ace:	f001 f833 	bl	8016b38 <dhcp_option_long>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015ad6:	89b8      	ldrh	r0, [r7, #12]
 8015ad8:	693b      	ldr	r3, [r7, #16]
 8015ada:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ade:	2303      	movs	r3, #3
 8015ae0:	2237      	movs	r2, #55	; 0x37
 8015ae2:	f000 ff9d 	bl	8016a20 <dhcp_option>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015aea:	2300      	movs	r3, #0
 8015aec:	77bb      	strb	r3, [r7, #30]
 8015aee:	e00e      	b.n	8015b0e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015af0:	89b8      	ldrh	r0, [r7, #12]
 8015af2:	693b      	ldr	r3, [r7, #16]
 8015af4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015af8:	7fbb      	ldrb	r3, [r7, #30]
 8015afa:	4a30      	ldr	r2, [pc, #192]	; (8015bbc <dhcp_select+0x1e4>)
 8015afc:	5cd3      	ldrb	r3, [r2, r3]
 8015afe:	461a      	mov	r2, r3
 8015b00:	f000 ffc2 	bl	8016a88 <dhcp_option_byte>
 8015b04:	4603      	mov	r3, r0
 8015b06:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015b08:	7fbb      	ldrb	r3, [r7, #30]
 8015b0a:	3301      	adds	r3, #1
 8015b0c:	77bb      	strb	r3, [r7, #30]
 8015b0e:	7fbb      	ldrb	r3, [r7, #30]
 8015b10:	2b02      	cmp	r3, #2
 8015b12:	d9ed      	bls.n	8015af0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015b14:	89b8      	ldrh	r0, [r7, #12]
 8015b16:	693b      	ldr	r3, [r7, #16]
 8015b18:	33f0      	adds	r3, #240	; 0xf0
 8015b1a:	697a      	ldr	r2, [r7, #20]
 8015b1c:	4619      	mov	r1, r3
 8015b1e:	f001 fcc5 	bl	80174ac <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015b22:	4b27      	ldr	r3, [pc, #156]	; (8015bc0 <dhcp_select+0x1e8>)
 8015b24:	6818      	ldr	r0, [r3, #0]
 8015b26:	4b27      	ldr	r3, [pc, #156]	; (8015bc4 <dhcp_select+0x1ec>)
 8015b28:	9301      	str	r3, [sp, #4]
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	9300      	str	r3, [sp, #0]
 8015b2e:	2343      	movs	r3, #67	; 0x43
 8015b30:	4a25      	ldr	r2, [pc, #148]	; (8015bc8 <dhcp_select+0x1f0>)
 8015b32:	6979      	ldr	r1, [r7, #20]
 8015b34:	f7ff fbce 	bl	80152d4 <udp_sendto_if_src>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015b3c:	6978      	ldr	r0, [r7, #20]
 8015b3e:	f7f8 fcbd 	bl	800e4bc <pbuf_free>
 8015b42:	e001      	b.n	8015b48 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015b44:	23ff      	movs	r3, #255	; 0xff
 8015b46:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015b48:	69bb      	ldr	r3, [r7, #24]
 8015b4a:	799b      	ldrb	r3, [r3, #6]
 8015b4c:	2bff      	cmp	r3, #255	; 0xff
 8015b4e:	d005      	beq.n	8015b5c <dhcp_select+0x184>
    dhcp->tries++;
 8015b50:	69bb      	ldr	r3, [r7, #24]
 8015b52:	799b      	ldrb	r3, [r3, #6]
 8015b54:	3301      	adds	r3, #1
 8015b56:	b2da      	uxtb	r2, r3
 8015b58:	69bb      	ldr	r3, [r7, #24]
 8015b5a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015b5c:	69bb      	ldr	r3, [r7, #24]
 8015b5e:	799b      	ldrb	r3, [r3, #6]
 8015b60:	2b05      	cmp	r3, #5
 8015b62:	d80d      	bhi.n	8015b80 <dhcp_select+0x1a8>
 8015b64:	69bb      	ldr	r3, [r7, #24]
 8015b66:	799b      	ldrb	r3, [r3, #6]
 8015b68:	461a      	mov	r2, r3
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	4093      	lsls	r3, r2
 8015b6e:	b29b      	uxth	r3, r3
 8015b70:	461a      	mov	r2, r3
 8015b72:	0152      	lsls	r2, r2, #5
 8015b74:	1ad2      	subs	r2, r2, r3
 8015b76:	0092      	lsls	r2, r2, #2
 8015b78:	4413      	add	r3, r2
 8015b7a:	00db      	lsls	r3, r3, #3
 8015b7c:	b29b      	uxth	r3, r3
 8015b7e:	e001      	b.n	8015b84 <dhcp_select+0x1ac>
 8015b80:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015b84:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015b86:	89fb      	ldrh	r3, [r7, #14]
 8015b88:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015b8c:	4a0f      	ldr	r2, [pc, #60]	; (8015bcc <dhcp_select+0x1f4>)
 8015b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8015b92:	1152      	asrs	r2, r2, #5
 8015b94:	17db      	asrs	r3, r3, #31
 8015b96:	1ad3      	subs	r3, r2, r3
 8015b98:	b29a      	uxth	r2, r3
 8015b9a:	69bb      	ldr	r3, [r7, #24]
 8015b9c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015b9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	3720      	adds	r7, #32
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8015baa:	bf00      	nop
 8015bac:	0801e450 	.word	0x0801e450
 8015bb0:	0801e4fc 	.word	0x0801e4fc
 8015bb4:	0801e4b0 	.word	0x0801e4b0
 8015bb8:	0801e518 	.word	0x0801e518
 8015bbc:	200000a0 	.word	0x200000a0
 8015bc0:	20010328 	.word	0x20010328
 8015bc4:	08040274 	.word	0x08040274
 8015bc8:	08040278 	.word	0x08040278
 8015bcc:	10624dd3 	.word	0x10624dd3

08015bd0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b082      	sub	sp, #8
 8015bd4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8015bd6:	4b27      	ldr	r3, [pc, #156]	; (8015c74 <dhcp_coarse_tmr+0xa4>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	607b      	str	r3, [r7, #4]
 8015bdc:	e042      	b.n	8015c64 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015be2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d039      	beq.n	8015c5e <dhcp_coarse_tmr+0x8e>
 8015bea:	683b      	ldr	r3, [r7, #0]
 8015bec:	795b      	ldrb	r3, [r3, #5]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d035      	beq.n	8015c5e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8015bf2:	683b      	ldr	r3, [r7, #0]
 8015bf4:	8a9b      	ldrh	r3, [r3, #20]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d012      	beq.n	8015c20 <dhcp_coarse_tmr+0x50>
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	8a5b      	ldrh	r3, [r3, #18]
 8015bfe:	3301      	adds	r3, #1
 8015c00:	b29a      	uxth	r2, r3
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	825a      	strh	r2, [r3, #18]
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	8a5a      	ldrh	r2, [r3, #18]
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	8a9b      	ldrh	r3, [r3, #20]
 8015c0e:	429a      	cmp	r2, r3
 8015c10:	d106      	bne.n	8015c20 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8015c12:	6878      	ldr	r0, [r7, #4]
 8015c14:	f000 fe44 	bl	80168a0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8015c18:	6878      	ldr	r0, [r7, #4]
 8015c1a:	f000 f969 	bl	8015ef0 <dhcp_start>
 8015c1e:	e01e      	b.n	8015c5e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015c20:	683b      	ldr	r3, [r7, #0]
 8015c22:	8a1b      	ldrh	r3, [r3, #16]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d00b      	beq.n	8015c40 <dhcp_coarse_tmr+0x70>
 8015c28:	683b      	ldr	r3, [r7, #0]
 8015c2a:	8a1b      	ldrh	r3, [r3, #16]
 8015c2c:	1e5a      	subs	r2, r3, #1
 8015c2e:	b291      	uxth	r1, r2
 8015c30:	683a      	ldr	r2, [r7, #0]
 8015c32:	8211      	strh	r1, [r2, #16]
 8015c34:	2b01      	cmp	r3, #1
 8015c36:	d103      	bne.n	8015c40 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015c38:	6878      	ldr	r0, [r7, #4]
 8015c3a:	f000 f8c6 	bl	8015dca <dhcp_t2_timeout>
 8015c3e:	e00e      	b.n	8015c5e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	89db      	ldrh	r3, [r3, #14]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d00a      	beq.n	8015c5e <dhcp_coarse_tmr+0x8e>
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	89db      	ldrh	r3, [r3, #14]
 8015c4c:	1e5a      	subs	r2, r3, #1
 8015c4e:	b291      	uxth	r1, r2
 8015c50:	683a      	ldr	r2, [r7, #0]
 8015c52:	81d1      	strh	r1, [r2, #14]
 8015c54:	2b01      	cmp	r3, #1
 8015c56:	d102      	bne.n	8015c5e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015c58:	6878      	ldr	r0, [r7, #4]
 8015c5a:	f000 f888 	bl	8015d6e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	607b      	str	r3, [r7, #4]
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d1b9      	bne.n	8015bde <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8015c6a:	bf00      	nop
 8015c6c:	3708      	adds	r7, #8
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bd80      	pop	{r7, pc}
 8015c72:	bf00      	nop
 8015c74:	20016e94 	.word	0x20016e94

08015c78 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b082      	sub	sp, #8
 8015c7c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015c7e:	4b16      	ldr	r3, [pc, #88]	; (8015cd8 <dhcp_fine_tmr+0x60>)
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	607b      	str	r3, [r7, #4]
 8015c84:	e020      	b.n	8015cc8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c8a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015c8c:	683b      	ldr	r3, [r7, #0]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d017      	beq.n	8015cc2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8015c92:	683b      	ldr	r3, [r7, #0]
 8015c94:	891b      	ldrh	r3, [r3, #8]
 8015c96:	2b01      	cmp	r3, #1
 8015c98:	d906      	bls.n	8015ca8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8015c9a:	683b      	ldr	r3, [r7, #0]
 8015c9c:	891b      	ldrh	r3, [r3, #8]
 8015c9e:	3b01      	subs	r3, #1
 8015ca0:	b29a      	uxth	r2, r3
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	811a      	strh	r2, [r3, #8]
 8015ca6:	e00c      	b.n	8015cc2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	891b      	ldrh	r3, [r3, #8]
 8015cac:	2b01      	cmp	r3, #1
 8015cae:	d108      	bne.n	8015cc2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8015cb0:	683b      	ldr	r3, [r7, #0]
 8015cb2:	891b      	ldrh	r3, [r3, #8]
 8015cb4:	3b01      	subs	r3, #1
 8015cb6:	b29a      	uxth	r2, r3
 8015cb8:	683b      	ldr	r3, [r7, #0]
 8015cba:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015cbc:	6878      	ldr	r0, [r7, #4]
 8015cbe:	f000 f80d 	bl	8015cdc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	607b      	str	r3, [r7, #4]
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d1db      	bne.n	8015c86 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8015cce:	bf00      	nop
 8015cd0:	3708      	adds	r7, #8
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bd80      	pop	{r7, pc}
 8015cd6:	bf00      	nop
 8015cd8:	20016e94 	.word	0x20016e94

08015cdc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b084      	sub	sp, #16
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ce8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	795b      	ldrb	r3, [r3, #5]
 8015cee:	2b0c      	cmp	r3, #12
 8015cf0:	d003      	beq.n	8015cfa <dhcp_timeout+0x1e>
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	795b      	ldrb	r3, [r3, #5]
 8015cf6:	2b06      	cmp	r3, #6
 8015cf8:	d103      	bne.n	8015d02 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8015cfa:	6878      	ldr	r0, [r7, #4]
 8015cfc:	f000 fa66 	bl	80161cc <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8015d00:	e031      	b.n	8015d66 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	795b      	ldrb	r3, [r3, #5]
 8015d06:	2b01      	cmp	r3, #1
 8015d08:	d10e      	bne.n	8015d28 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	799b      	ldrb	r3, [r3, #6]
 8015d0e:	2b05      	cmp	r3, #5
 8015d10:	d803      	bhi.n	8015d1a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8015d12:	6878      	ldr	r0, [r7, #4]
 8015d14:	f7ff fe60 	bl	80159d8 <dhcp_select>
}
 8015d18:	e025      	b.n	8015d66 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8015d1a:	6878      	ldr	r0, [r7, #4]
 8015d1c:	f000 fdc0 	bl	80168a0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8015d20:	6878      	ldr	r0, [r7, #4]
 8015d22:	f000 f8e5 	bl	8015ef0 <dhcp_start>
}
 8015d26:	e01e      	b.n	8015d66 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	795b      	ldrb	r3, [r3, #5]
 8015d2c:	2b08      	cmp	r3, #8
 8015d2e:	d10b      	bne.n	8015d48 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	799b      	ldrb	r3, [r3, #6]
 8015d34:	2b01      	cmp	r3, #1
 8015d36:	d803      	bhi.n	8015d40 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8015d38:	6878      	ldr	r0, [r7, #4]
 8015d3a:	f7ff fdf3 	bl	8015924 <dhcp_check>
}
 8015d3e:	e012      	b.n	8015d66 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8015d40:	6878      	ldr	r0, [r7, #4]
 8015d42:	f000 fae5 	bl	8016310 <dhcp_bind>
}
 8015d46:	e00e      	b.n	8015d66 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	795b      	ldrb	r3, [r3, #5]
 8015d4c:	2b03      	cmp	r3, #3
 8015d4e:	d10a      	bne.n	8015d66 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	799b      	ldrb	r3, [r3, #6]
 8015d54:	2b01      	cmp	r3, #1
 8015d56:	d803      	bhi.n	8015d60 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8015d58:	6878      	ldr	r0, [r7, #4]
 8015d5a:	f000 fceb 	bl	8016734 <dhcp_reboot>
}
 8015d5e:	e002      	b.n	8015d66 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015d60:	6878      	ldr	r0, [r7, #4]
 8015d62:	f000 fa33 	bl	80161cc <dhcp_discover>
}
 8015d66:	bf00      	nop
 8015d68:	3710      	adds	r7, #16
 8015d6a:	46bd      	mov	sp, r7
 8015d6c:	bd80      	pop	{r7, pc}

08015d6e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015d6e:	b580      	push	{r7, lr}
 8015d70:	b084      	sub	sp, #16
 8015d72:	af00      	add	r7, sp, #0
 8015d74:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d7a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	795b      	ldrb	r3, [r3, #5]
 8015d80:	2b01      	cmp	r3, #1
 8015d82:	d007      	beq.n	8015d94 <dhcp_t1_timeout+0x26>
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	795b      	ldrb	r3, [r3, #5]
 8015d88:	2b0a      	cmp	r3, #10
 8015d8a:	d003      	beq.n	8015d94 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015d90:	2b05      	cmp	r3, #5
 8015d92:	d116      	bne.n	8015dc2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8015d94:	6878      	ldr	r0, [r7, #4]
 8015d96:	f000 fb95 	bl	80164c4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	899b      	ldrh	r3, [r3, #12]
 8015d9e:	461a      	mov	r2, r3
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	8a5b      	ldrh	r3, [r3, #18]
 8015da4:	1ad3      	subs	r3, r2, r3
 8015da6:	2b01      	cmp	r3, #1
 8015da8:	dd0b      	ble.n	8015dc2 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	899b      	ldrh	r3, [r3, #12]
 8015dae:	461a      	mov	r2, r3
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	8a5b      	ldrh	r3, [r3, #18]
 8015db4:	1ad3      	subs	r3, r2, r3
 8015db6:	0fda      	lsrs	r2, r3, #31
 8015db8:	4413      	add	r3, r2
 8015dba:	105b      	asrs	r3, r3, #1
 8015dbc:	b29a      	uxth	r2, r3
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8015dc2:	bf00      	nop
 8015dc4:	3710      	adds	r7, #16
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	bd80      	pop	{r7, pc}

08015dca <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015dca:	b580      	push	{r7, lr}
 8015dcc:	b084      	sub	sp, #16
 8015dce:	af00      	add	r7, sp, #0
 8015dd0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	795b      	ldrb	r3, [r3, #5]
 8015ddc:	2b01      	cmp	r3, #1
 8015dde:	d00b      	beq.n	8015df8 <dhcp_t2_timeout+0x2e>
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	795b      	ldrb	r3, [r3, #5]
 8015de4:	2b0a      	cmp	r3, #10
 8015de6:	d007      	beq.n	8015df8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015dec:	2b05      	cmp	r3, #5
 8015dee:	d003      	beq.n	8015df8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	795b      	ldrb	r3, [r3, #5]
 8015df4:	2b04      	cmp	r3, #4
 8015df6:	d116      	bne.n	8015e26 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8015df8:	6878      	ldr	r0, [r7, #4]
 8015dfa:	f000 fbff 	bl	80165fc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	8a9b      	ldrh	r3, [r3, #20]
 8015e02:	461a      	mov	r2, r3
 8015e04:	68fb      	ldr	r3, [r7, #12]
 8015e06:	8a5b      	ldrh	r3, [r3, #18]
 8015e08:	1ad3      	subs	r3, r2, r3
 8015e0a:	2b01      	cmp	r3, #1
 8015e0c:	dd0b      	ble.n	8015e26 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	8a9b      	ldrh	r3, [r3, #20]
 8015e12:	461a      	mov	r2, r3
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	8a5b      	ldrh	r3, [r3, #18]
 8015e18:	1ad3      	subs	r3, r2, r3
 8015e1a:	0fda      	lsrs	r2, r3, #31
 8015e1c:	4413      	add	r3, r2
 8015e1e:	105b      	asrs	r3, r3, #1
 8015e20:	b29a      	uxth	r2, r3
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8015e26:	bf00      	nop
 8015e28:	3710      	adds	r7, #16
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	bd80      	pop	{r7, pc}
	...

08015e30 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b084      	sub	sp, #16
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e3e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	2200      	movs	r2, #0
 8015e44:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	2200      	movs	r2, #0
 8015e4a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015e4c:	4b26      	ldr	r3, [pc, #152]	; (8015ee8 <dhcp_handle_ack+0xb8>)
 8015e4e:	78db      	ldrb	r3, [r3, #3]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d003      	beq.n	8015e5c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8015e54:	4b25      	ldr	r3, [pc, #148]	; (8015eec <dhcp_handle_ack+0xbc>)
 8015e56:	68da      	ldr	r2, [r3, #12]
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015e5c:	4b22      	ldr	r3, [pc, #136]	; (8015ee8 <dhcp_handle_ack+0xb8>)
 8015e5e:	791b      	ldrb	r3, [r3, #4]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d004      	beq.n	8015e6e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8015e64:	4b21      	ldr	r3, [pc, #132]	; (8015eec <dhcp_handle_ack+0xbc>)
 8015e66:	691a      	ldr	r2, [r3, #16]
 8015e68:	68fb      	ldr	r3, [r7, #12]
 8015e6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8015e6c:	e004      	b.n	8015e78 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e72:	085a      	lsrs	r2, r3, #1
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8015e78:	4b1b      	ldr	r3, [pc, #108]	; (8015ee8 <dhcp_handle_ack+0xb8>)
 8015e7a:	795b      	ldrb	r3, [r3, #5]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d004      	beq.n	8015e8a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8015e80:	4b1a      	ldr	r3, [pc, #104]	; (8015eec <dhcp_handle_ack+0xbc>)
 8015e82:	695a      	ldr	r2, [r3, #20]
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	631a      	str	r2, [r3, #48]	; 0x30
 8015e88:	e007      	b.n	8015e9a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015e8e:	4613      	mov	r3, r2
 8015e90:	00db      	lsls	r3, r3, #3
 8015e92:	1a9b      	subs	r3, r3, r2
 8015e94:	08da      	lsrs	r2, r3, #3
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015e9a:	683b      	ldr	r3, [r7, #0]
 8015e9c:	691a      	ldr	r2, [r3, #16]
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8015ea2:	4b11      	ldr	r3, [pc, #68]	; (8015ee8 <dhcp_handle_ack+0xb8>)
 8015ea4:	799b      	ldrb	r3, [r3, #6]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d00b      	beq.n	8015ec2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8015eaa:	4b10      	ldr	r3, [pc, #64]	; (8015eec <dhcp_handle_ack+0xbc>)
 8015eac:	699b      	ldr	r3, [r3, #24]
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f7f6 fefb 	bl	800ccaa <lwip_htonl>
 8015eb4:	4602      	mov	r2, r0
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	2201      	movs	r2, #1
 8015ebe:	71da      	strb	r2, [r3, #7]
 8015ec0:	e002      	b.n	8015ec8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	2200      	movs	r2, #0
 8015ec6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8015ec8:	4b07      	ldr	r3, [pc, #28]	; (8015ee8 <dhcp_handle_ack+0xb8>)
 8015eca:	79db      	ldrb	r3, [r3, #7]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d007      	beq.n	8015ee0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8015ed0:	4b06      	ldr	r3, [pc, #24]	; (8015eec <dhcp_handle_ack+0xbc>)
 8015ed2:	69db      	ldr	r3, [r3, #28]
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f7f6 fee8 	bl	800ccaa <lwip_htonl>
 8015eda:	4602      	mov	r2, r0
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8015ee0:	bf00      	nop
 8015ee2:	3710      	adds	r7, #16
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}
 8015ee8:	20016ec0 	.word	0x20016ec0
 8015eec:	20016ec8 	.word	0x20016ec8

08015ef0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b084      	sub	sp, #16
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d109      	bne.n	8015f12 <dhcp_start+0x22>
 8015efe:	4b37      	ldr	r3, [pc, #220]	; (8015fdc <dhcp_start+0xec>)
 8015f00:	f240 22e7 	movw	r2, #743	; 0x2e7
 8015f04:	4936      	ldr	r1, [pc, #216]	; (8015fe0 <dhcp_start+0xf0>)
 8015f06:	4837      	ldr	r0, [pc, #220]	; (8015fe4 <dhcp_start+0xf4>)
 8015f08:	f004 f816 	bl	8019f38 <iprintf>
 8015f0c:	f06f 030f 	mvn.w	r3, #15
 8015f10:	e060      	b.n	8015fd4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015f18:	f003 0301 	and.w	r3, r3, #1
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d109      	bne.n	8015f34 <dhcp_start+0x44>
 8015f20:	4b2e      	ldr	r3, [pc, #184]	; (8015fdc <dhcp_start+0xec>)
 8015f22:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8015f26:	4930      	ldr	r1, [pc, #192]	; (8015fe8 <dhcp_start+0xf8>)
 8015f28:	482e      	ldr	r0, [pc, #184]	; (8015fe4 <dhcp_start+0xf4>)
 8015f2a:	f004 f805 	bl	8019f38 <iprintf>
 8015f2e:	f06f 030f 	mvn.w	r3, #15
 8015f32:	e04f      	b.n	8015fd4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f38:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015f3e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8015f42:	d202      	bcs.n	8015f4a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8015f44:	f04f 33ff 	mov.w	r3, #4294967295
 8015f48:	e044      	b.n	8015fd4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	d10d      	bne.n	8015f6c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8015f50:	2034      	movs	r0, #52	; 0x34
 8015f52:	f7f7 fa33 	bl	800d3bc <mem_malloc>
 8015f56:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d102      	bne.n	8015f64 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8015f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8015f62:	e037      	b.n	8015fd4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	68fa      	ldr	r2, [r7, #12]
 8015f68:	625a      	str	r2, [r3, #36]	; 0x24
 8015f6a:	e005      	b.n	8015f78 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	791b      	ldrb	r3, [r3, #4]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d001      	beq.n	8015f78 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015f74:	f7ff fc92 	bl	801589c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015f78:	2234      	movs	r2, #52	; 0x34
 8015f7a:	2100      	movs	r1, #0
 8015f7c:	68f8      	ldr	r0, [r7, #12]
 8015f7e:	f003 ffd2 	bl	8019f26 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8015f82:	f7ff fc39 	bl	80157f8 <dhcp_inc_pcb_refcount>
 8015f86:	4603      	mov	r3, r0
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d002      	beq.n	8015f92 <dhcp_start+0xa2>
    return ERR_MEM;
 8015f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8015f90:	e020      	b.n	8015fd4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	2201      	movs	r2, #1
 8015f96:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015f9e:	f003 0304 	and.w	r3, r3, #4
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d105      	bne.n	8015fb2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8015fa6:	2102      	movs	r1, #2
 8015fa8:	68f8      	ldr	r0, [r7, #12]
 8015faa:	f000 fd1e 	bl	80169ea <dhcp_set_state>
    return ERR_OK;
 8015fae:	2300      	movs	r3, #0
 8015fb0:	e010      	b.n	8015fd4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	f000 f90a 	bl	80161cc <dhcp_discover>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015fbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d005      	beq.n	8015fd0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f000 fc6b 	bl	80168a0 <dhcp_release_and_stop>
    return ERR_MEM;
 8015fca:	f04f 33ff 	mov.w	r3, #4294967295
 8015fce:	e001      	b.n	8015fd4 <dhcp_start+0xe4>
  }
  return result;
 8015fd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	3710      	adds	r7, #16
 8015fd8:	46bd      	mov	sp, r7
 8015fda:	bd80      	pop	{r7, pc}
 8015fdc:	0801e450 	.word	0x0801e450
 8015fe0:	0801e534 	.word	0x0801e534
 8015fe4:	0801e4b0 	.word	0x0801e4b0
 8015fe8:	0801e578 	.word	0x0801e578

08015fec <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b084      	sub	sp, #16
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ff8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d037      	beq.n	8016070 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	795b      	ldrb	r3, [r3, #5]
 8016004:	2b0a      	cmp	r3, #10
 8016006:	d820      	bhi.n	801604a <dhcp_network_changed+0x5e>
 8016008:	a201      	add	r2, pc, #4	; (adr r2, 8016010 <dhcp_network_changed+0x24>)
 801600a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801600e:	bf00      	nop
 8016010:	08016075 	.word	0x08016075
 8016014:	0801604b 	.word	0x0801604b
 8016018:	0801604b 	.word	0x0801604b
 801601c:	0801603d 	.word	0x0801603d
 8016020:	0801603d 	.word	0x0801603d
 8016024:	0801603d 	.word	0x0801603d
 8016028:	0801604b 	.word	0x0801604b
 801602c:	0801604b 	.word	0x0801604b
 8016030:	0801604b 	.word	0x0801604b
 8016034:	0801604b 	.word	0x0801604b
 8016038:	0801603d 	.word	0x0801603d
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	2200      	movs	r2, #0
 8016040:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8016042:	6878      	ldr	r0, [r7, #4]
 8016044:	f000 fb76 	bl	8016734 <dhcp_reboot>
      break;
 8016048:	e015      	b.n	8016076 <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	795b      	ldrb	r3, [r3, #5]
 801604e:	2b0c      	cmp	r3, #12
 8016050:	d906      	bls.n	8016060 <dhcp_network_changed+0x74>
 8016052:	4b0a      	ldr	r3, [pc, #40]	; (801607c <dhcp_network_changed+0x90>)
 8016054:	f240 326d 	movw	r2, #877	; 0x36d
 8016058:	4909      	ldr	r1, [pc, #36]	; (8016080 <dhcp_network_changed+0x94>)
 801605a:	480a      	ldr	r0, [pc, #40]	; (8016084 <dhcp_network_changed+0x98>)
 801605c:	f003 ff6c 	bl	8019f38 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	2200      	movs	r2, #0
 8016064:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8016066:	6878      	ldr	r0, [r7, #4]
 8016068:	f000 f8b0 	bl	80161cc <dhcp_discover>
      break;
 801606c:	bf00      	nop
 801606e:	e002      	b.n	8016076 <dhcp_network_changed+0x8a>
    return;
 8016070:	bf00      	nop
 8016072:	e000      	b.n	8016076 <dhcp_network_changed+0x8a>
      break;
 8016074:	bf00      	nop
  }
}
 8016076:	3710      	adds	r7, #16
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}
 801607c:	0801e450 	.word	0x0801e450
 8016080:	0801e59c 	.word	0x0801e59c
 8016084:	0801e4b0 	.word	0x0801e4b0

08016088 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b084      	sub	sp, #16
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
 8016090:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d107      	bne.n	80160a8 <dhcp_arp_reply+0x20>
 8016098:	4b0e      	ldr	r3, [pc, #56]	; (80160d4 <dhcp_arp_reply+0x4c>)
 801609a:	f240 328b 	movw	r2, #907	; 0x38b
 801609e:	490e      	ldr	r1, [pc, #56]	; (80160d8 <dhcp_arp_reply+0x50>)
 80160a0:	480e      	ldr	r0, [pc, #56]	; (80160dc <dhcp_arp_reply+0x54>)
 80160a2:	f003 ff49 	bl	8019f38 <iprintf>
 80160a6:	e012      	b.n	80160ce <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160ac:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d00c      	beq.n	80160ce <dhcp_arp_reply+0x46>
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	795b      	ldrb	r3, [r3, #5]
 80160b8:	2b08      	cmp	r3, #8
 80160ba:	d108      	bne.n	80160ce <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	681a      	ldr	r2, [r3, #0]
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	69db      	ldr	r3, [r3, #28]
 80160c4:	429a      	cmp	r2, r3
 80160c6:	d102      	bne.n	80160ce <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80160c8:	6878      	ldr	r0, [r7, #4]
 80160ca:	f000 f809 	bl	80160e0 <dhcp_decline>
    }
  }
}
 80160ce:	3710      	adds	r7, #16
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}
 80160d4:	0801e450 	.word	0x0801e450
 80160d8:	0801e534 	.word	0x0801e534
 80160dc:	0801e4b0 	.word	0x0801e4b0

080160e0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80160e0:	b5b0      	push	{r4, r5, r7, lr}
 80160e2:	b08a      	sub	sp, #40	; 0x28
 80160e4:	af02      	add	r7, sp, #8
 80160e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160ec:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80160ee:	210c      	movs	r1, #12
 80160f0:	69b8      	ldr	r0, [r7, #24]
 80160f2:	f000 fc7a 	bl	80169ea <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80160f6:	f107 030c 	add.w	r3, r7, #12
 80160fa:	2204      	movs	r2, #4
 80160fc:	69b9      	ldr	r1, [r7, #24]
 80160fe:	6878      	ldr	r0, [r7, #4]
 8016100:	f001 f8fe 	bl	8017300 <dhcp_create_msg>
 8016104:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016106:	697b      	ldr	r3, [r7, #20]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d035      	beq.n	8016178 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801610c:	697b      	ldr	r3, [r7, #20]
 801610e:	685b      	ldr	r3, [r3, #4]
 8016110:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016112:	89b8      	ldrh	r0, [r7, #12]
 8016114:	693b      	ldr	r3, [r7, #16]
 8016116:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801611a:	2304      	movs	r3, #4
 801611c:	2232      	movs	r2, #50	; 0x32
 801611e:	f000 fc7f 	bl	8016a20 <dhcp_option>
 8016122:	4603      	mov	r3, r0
 8016124:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016126:	89bc      	ldrh	r4, [r7, #12]
 8016128:	693b      	ldr	r3, [r7, #16]
 801612a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801612e:	69bb      	ldr	r3, [r7, #24]
 8016130:	69db      	ldr	r3, [r3, #28]
 8016132:	4618      	mov	r0, r3
 8016134:	f7f6 fdb9 	bl	800ccaa <lwip_htonl>
 8016138:	4603      	mov	r3, r0
 801613a:	461a      	mov	r2, r3
 801613c:	4629      	mov	r1, r5
 801613e:	4620      	mov	r0, r4
 8016140:	f000 fcfa 	bl	8016b38 <dhcp_option_long>
 8016144:	4603      	mov	r3, r0
 8016146:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016148:	89b8      	ldrh	r0, [r7, #12]
 801614a:	693b      	ldr	r3, [r7, #16]
 801614c:	33f0      	adds	r3, #240	; 0xf0
 801614e:	697a      	ldr	r2, [r7, #20]
 8016150:	4619      	mov	r1, r3
 8016152:	f001 f9ab 	bl	80174ac <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8016156:	4b19      	ldr	r3, [pc, #100]	; (80161bc <dhcp_decline+0xdc>)
 8016158:	6818      	ldr	r0, [r3, #0]
 801615a:	4b19      	ldr	r3, [pc, #100]	; (80161c0 <dhcp_decline+0xe0>)
 801615c:	9301      	str	r3, [sp, #4]
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	9300      	str	r3, [sp, #0]
 8016162:	2343      	movs	r3, #67	; 0x43
 8016164:	4a17      	ldr	r2, [pc, #92]	; (80161c4 <dhcp_decline+0xe4>)
 8016166:	6979      	ldr	r1, [r7, #20]
 8016168:	f7ff f8b4 	bl	80152d4 <udp_sendto_if_src>
 801616c:	4603      	mov	r3, r0
 801616e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016170:	6978      	ldr	r0, [r7, #20]
 8016172:	f7f8 f9a3 	bl	800e4bc <pbuf_free>
 8016176:	e001      	b.n	801617c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016178:	23ff      	movs	r3, #255	; 0xff
 801617a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801617c:	69bb      	ldr	r3, [r7, #24]
 801617e:	799b      	ldrb	r3, [r3, #6]
 8016180:	2bff      	cmp	r3, #255	; 0xff
 8016182:	d005      	beq.n	8016190 <dhcp_decline+0xb0>
    dhcp->tries++;
 8016184:	69bb      	ldr	r3, [r7, #24]
 8016186:	799b      	ldrb	r3, [r3, #6]
 8016188:	3301      	adds	r3, #1
 801618a:	b2da      	uxtb	r2, r3
 801618c:	69bb      	ldr	r3, [r7, #24]
 801618e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8016190:	f242 7310 	movw	r3, #10000	; 0x2710
 8016194:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016196:	89fb      	ldrh	r3, [r7, #14]
 8016198:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801619c:	4a0a      	ldr	r2, [pc, #40]	; (80161c8 <dhcp_decline+0xe8>)
 801619e:	fb82 1203 	smull	r1, r2, r2, r3
 80161a2:	1152      	asrs	r2, r2, #5
 80161a4:	17db      	asrs	r3, r3, #31
 80161a6:	1ad3      	subs	r3, r2, r3
 80161a8:	b29a      	uxth	r2, r3
 80161aa:	69bb      	ldr	r3, [r7, #24]
 80161ac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80161ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80161b2:	4618      	mov	r0, r3
 80161b4:	3720      	adds	r7, #32
 80161b6:	46bd      	mov	sp, r7
 80161b8:	bdb0      	pop	{r4, r5, r7, pc}
 80161ba:	bf00      	nop
 80161bc:	20010328 	.word	0x20010328
 80161c0:	08040274 	.word	0x08040274
 80161c4:	08040278 	.word	0x08040278
 80161c8:	10624dd3 	.word	0x10624dd3

080161cc <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b08a      	sub	sp, #40	; 0x28
 80161d0:	af02      	add	r7, sp, #8
 80161d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161d8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80161da:	2300      	movs	r3, #0
 80161dc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80161de:	69bb      	ldr	r3, [r7, #24]
 80161e0:	2200      	movs	r2, #0
 80161e2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80161e4:	2106      	movs	r1, #6
 80161e6:	69b8      	ldr	r0, [r7, #24]
 80161e8:	f000 fbff 	bl	80169ea <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80161ec:	f107 0308 	add.w	r3, r7, #8
 80161f0:	2201      	movs	r2, #1
 80161f2:	69b9      	ldr	r1, [r7, #24]
 80161f4:	6878      	ldr	r0, [r7, #4]
 80161f6:	f001 f883 	bl	8017300 <dhcp_create_msg>
 80161fa:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80161fc:	693b      	ldr	r3, [r7, #16]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d04b      	beq.n	801629a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016202:	693b      	ldr	r3, [r7, #16]
 8016204:	685b      	ldr	r3, [r3, #4]
 8016206:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016208:	8938      	ldrh	r0, [r7, #8]
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016210:	2302      	movs	r3, #2
 8016212:	2239      	movs	r2, #57	; 0x39
 8016214:	f000 fc04 	bl	8016a20 <dhcp_option>
 8016218:	4603      	mov	r3, r0
 801621a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801621c:	8938      	ldrh	r0, [r7, #8]
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016228:	461a      	mov	r2, r3
 801622a:	f000 fc53 	bl	8016ad4 <dhcp_option_short>
 801622e:	4603      	mov	r3, r0
 8016230:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016232:	8938      	ldrh	r0, [r7, #8]
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801623a:	2303      	movs	r3, #3
 801623c:	2237      	movs	r2, #55	; 0x37
 801623e:	f000 fbef 	bl	8016a20 <dhcp_option>
 8016242:	4603      	mov	r3, r0
 8016244:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016246:	2300      	movs	r3, #0
 8016248:	77fb      	strb	r3, [r7, #31]
 801624a:	e00e      	b.n	801626a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801624c:	8938      	ldrh	r0, [r7, #8]
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016254:	7ffb      	ldrb	r3, [r7, #31]
 8016256:	4a29      	ldr	r2, [pc, #164]	; (80162fc <dhcp_discover+0x130>)
 8016258:	5cd3      	ldrb	r3, [r2, r3]
 801625a:	461a      	mov	r2, r3
 801625c:	f000 fc14 	bl	8016a88 <dhcp_option_byte>
 8016260:	4603      	mov	r3, r0
 8016262:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016264:	7ffb      	ldrb	r3, [r7, #31]
 8016266:	3301      	adds	r3, #1
 8016268:	77fb      	strb	r3, [r7, #31]
 801626a:	7ffb      	ldrb	r3, [r7, #31]
 801626c:	2b02      	cmp	r3, #2
 801626e:	d9ed      	bls.n	801624c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016270:	8938      	ldrh	r0, [r7, #8]
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	33f0      	adds	r3, #240	; 0xf0
 8016276:	693a      	ldr	r2, [r7, #16]
 8016278:	4619      	mov	r1, r3
 801627a:	f001 f917 	bl	80174ac <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801627e:	4b20      	ldr	r3, [pc, #128]	; (8016300 <dhcp_discover+0x134>)
 8016280:	6818      	ldr	r0, [r3, #0]
 8016282:	4b20      	ldr	r3, [pc, #128]	; (8016304 <dhcp_discover+0x138>)
 8016284:	9301      	str	r3, [sp, #4]
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	9300      	str	r3, [sp, #0]
 801628a:	2343      	movs	r3, #67	; 0x43
 801628c:	4a1e      	ldr	r2, [pc, #120]	; (8016308 <dhcp_discover+0x13c>)
 801628e:	6939      	ldr	r1, [r7, #16]
 8016290:	f7ff f820 	bl	80152d4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8016294:	6938      	ldr	r0, [r7, #16]
 8016296:	f7f8 f911 	bl	800e4bc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801629a:	69bb      	ldr	r3, [r7, #24]
 801629c:	799b      	ldrb	r3, [r3, #6]
 801629e:	2bff      	cmp	r3, #255	; 0xff
 80162a0:	d005      	beq.n	80162ae <dhcp_discover+0xe2>
    dhcp->tries++;
 80162a2:	69bb      	ldr	r3, [r7, #24]
 80162a4:	799b      	ldrb	r3, [r3, #6]
 80162a6:	3301      	adds	r3, #1
 80162a8:	b2da      	uxtb	r2, r3
 80162aa:	69bb      	ldr	r3, [r7, #24]
 80162ac:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80162ae:	69bb      	ldr	r3, [r7, #24]
 80162b0:	799b      	ldrb	r3, [r3, #6]
 80162b2:	2b05      	cmp	r3, #5
 80162b4:	d80d      	bhi.n	80162d2 <dhcp_discover+0x106>
 80162b6:	69bb      	ldr	r3, [r7, #24]
 80162b8:	799b      	ldrb	r3, [r3, #6]
 80162ba:	461a      	mov	r2, r3
 80162bc:	2301      	movs	r3, #1
 80162be:	4093      	lsls	r3, r2
 80162c0:	b29b      	uxth	r3, r3
 80162c2:	461a      	mov	r2, r3
 80162c4:	0152      	lsls	r2, r2, #5
 80162c6:	1ad2      	subs	r2, r2, r3
 80162c8:	0092      	lsls	r2, r2, #2
 80162ca:	4413      	add	r3, r2
 80162cc:	00db      	lsls	r3, r3, #3
 80162ce:	b29b      	uxth	r3, r3
 80162d0:	e001      	b.n	80162d6 <dhcp_discover+0x10a>
 80162d2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80162d6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80162d8:	897b      	ldrh	r3, [r7, #10]
 80162da:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80162de:	4a0b      	ldr	r2, [pc, #44]	; (801630c <dhcp_discover+0x140>)
 80162e0:	fb82 1203 	smull	r1, r2, r2, r3
 80162e4:	1152      	asrs	r2, r2, #5
 80162e6:	17db      	asrs	r3, r3, #31
 80162e8:	1ad3      	subs	r3, r2, r3
 80162ea:	b29a      	uxth	r2, r3
 80162ec:	69bb      	ldr	r3, [r7, #24]
 80162ee:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80162f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80162f4:	4618      	mov	r0, r3
 80162f6:	3720      	adds	r7, #32
 80162f8:	46bd      	mov	sp, r7
 80162fa:	bd80      	pop	{r7, pc}
 80162fc:	200000a0 	.word	0x200000a0
 8016300:	20010328 	.word	0x20010328
 8016304:	08040274 	.word	0x08040274
 8016308:	08040278 	.word	0x08040278
 801630c:	10624dd3 	.word	0x10624dd3

08016310 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b088      	sub	sp, #32
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d107      	bne.n	801632e <dhcp_bind+0x1e>
 801631e:	4b64      	ldr	r3, [pc, #400]	; (80164b0 <dhcp_bind+0x1a0>)
 8016320:	f240 4215 	movw	r2, #1045	; 0x415
 8016324:	4963      	ldr	r1, [pc, #396]	; (80164b4 <dhcp_bind+0x1a4>)
 8016326:	4864      	ldr	r0, [pc, #400]	; (80164b8 <dhcp_bind+0x1a8>)
 8016328:	f003 fe06 	bl	8019f38 <iprintf>
 801632c:	e0bc      	b.n	80164a8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016332:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8016334:	69bb      	ldr	r3, [r7, #24]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d107      	bne.n	801634a <dhcp_bind+0x3a>
 801633a:	4b5d      	ldr	r3, [pc, #372]	; (80164b0 <dhcp_bind+0x1a0>)
 801633c:	f240 4217 	movw	r2, #1047	; 0x417
 8016340:	495e      	ldr	r1, [pc, #376]	; (80164bc <dhcp_bind+0x1ac>)
 8016342:	485d      	ldr	r0, [pc, #372]	; (80164b8 <dhcp_bind+0x1a8>)
 8016344:	f003 fdf8 	bl	8019f38 <iprintf>
 8016348:	e0ae      	b.n	80164a8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801634a:	69bb      	ldr	r3, [r7, #24]
 801634c:	2200      	movs	r2, #0
 801634e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8016350:	69bb      	ldr	r3, [r7, #24]
 8016352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016358:	d019      	beq.n	801638e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801635a:	69bb      	ldr	r3, [r7, #24]
 801635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801635e:	331e      	adds	r3, #30
 8016360:	4a57      	ldr	r2, [pc, #348]	; (80164c0 <dhcp_bind+0x1b0>)
 8016362:	fba2 2303 	umull	r2, r3, r2, r3
 8016366:	095b      	lsrs	r3, r3, #5
 8016368:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801636a:	69fb      	ldr	r3, [r7, #28]
 801636c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016370:	d302      	bcc.n	8016378 <dhcp_bind+0x68>
      timeout = 0xffff;
 8016372:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016376:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8016378:	69fb      	ldr	r3, [r7, #28]
 801637a:	b29a      	uxth	r2, r3
 801637c:	69bb      	ldr	r3, [r7, #24]
 801637e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8016380:	69bb      	ldr	r3, [r7, #24]
 8016382:	8a9b      	ldrh	r3, [r3, #20]
 8016384:	2b00      	cmp	r3, #0
 8016386:	d102      	bne.n	801638e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8016388:	69bb      	ldr	r3, [r7, #24]
 801638a:	2201      	movs	r2, #1
 801638c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801638e:	69bb      	ldr	r3, [r7, #24]
 8016390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016396:	d01d      	beq.n	80163d4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8016398:	69bb      	ldr	r3, [r7, #24]
 801639a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801639c:	331e      	adds	r3, #30
 801639e:	4a48      	ldr	r2, [pc, #288]	; (80164c0 <dhcp_bind+0x1b0>)
 80163a0:	fba2 2303 	umull	r2, r3, r2, r3
 80163a4:	095b      	lsrs	r3, r3, #5
 80163a6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80163a8:	69fb      	ldr	r3, [r7, #28]
 80163aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80163ae:	d302      	bcc.n	80163b6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80163b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163b4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80163b6:	69fb      	ldr	r3, [r7, #28]
 80163b8:	b29a      	uxth	r2, r3
 80163ba:	69bb      	ldr	r3, [r7, #24]
 80163bc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80163be:	69bb      	ldr	r3, [r7, #24]
 80163c0:	895b      	ldrh	r3, [r3, #10]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d102      	bne.n	80163cc <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80163c6:	69bb      	ldr	r3, [r7, #24]
 80163c8:	2201      	movs	r2, #1
 80163ca:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80163cc:	69bb      	ldr	r3, [r7, #24]
 80163ce:	895a      	ldrh	r2, [r3, #10]
 80163d0:	69bb      	ldr	r3, [r7, #24]
 80163d2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80163d4:	69bb      	ldr	r3, [r7, #24]
 80163d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163dc:	d01d      	beq.n	801641a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80163de:	69bb      	ldr	r3, [r7, #24]
 80163e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80163e2:	331e      	adds	r3, #30
 80163e4:	4a36      	ldr	r2, [pc, #216]	; (80164c0 <dhcp_bind+0x1b0>)
 80163e6:	fba2 2303 	umull	r2, r3, r2, r3
 80163ea:	095b      	lsrs	r3, r3, #5
 80163ec:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80163ee:	69fb      	ldr	r3, [r7, #28]
 80163f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80163f4:	d302      	bcc.n	80163fc <dhcp_bind+0xec>
      timeout = 0xffff;
 80163f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80163fa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80163fc:	69fb      	ldr	r3, [r7, #28]
 80163fe:	b29a      	uxth	r2, r3
 8016400:	69bb      	ldr	r3, [r7, #24]
 8016402:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8016404:	69bb      	ldr	r3, [r7, #24]
 8016406:	899b      	ldrh	r3, [r3, #12]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d102      	bne.n	8016412 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801640c:	69bb      	ldr	r3, [r7, #24]
 801640e:	2201      	movs	r2, #1
 8016410:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8016412:	69bb      	ldr	r3, [r7, #24]
 8016414:	899a      	ldrh	r2, [r3, #12]
 8016416:	69bb      	ldr	r3, [r7, #24]
 8016418:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801641a:	69bb      	ldr	r3, [r7, #24]
 801641c:	895a      	ldrh	r2, [r3, #10]
 801641e:	69bb      	ldr	r3, [r7, #24]
 8016420:	899b      	ldrh	r3, [r3, #12]
 8016422:	429a      	cmp	r2, r3
 8016424:	d306      	bcc.n	8016434 <dhcp_bind+0x124>
 8016426:	69bb      	ldr	r3, [r7, #24]
 8016428:	899b      	ldrh	r3, [r3, #12]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d002      	beq.n	8016434 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801642e:	69bb      	ldr	r3, [r7, #24]
 8016430:	2200      	movs	r2, #0
 8016432:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8016434:	69bb      	ldr	r3, [r7, #24]
 8016436:	79db      	ldrb	r3, [r3, #7]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d003      	beq.n	8016444 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801643c:	69bb      	ldr	r3, [r7, #24]
 801643e:	6a1b      	ldr	r3, [r3, #32]
 8016440:	613b      	str	r3, [r7, #16]
 8016442:	e014      	b.n	801646e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8016444:	69bb      	ldr	r3, [r7, #24]
 8016446:	331c      	adds	r3, #28
 8016448:	781b      	ldrb	r3, [r3, #0]
 801644a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801644c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016450:	2b00      	cmp	r3, #0
 8016452:	db02      	blt.n	801645a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8016454:	23ff      	movs	r3, #255	; 0xff
 8016456:	613b      	str	r3, [r7, #16]
 8016458:	e009      	b.n	801646e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801645a:	7dfb      	ldrb	r3, [r7, #23]
 801645c:	2bbf      	cmp	r3, #191	; 0xbf
 801645e:	d903      	bls.n	8016468 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8016460:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8016464:	613b      	str	r3, [r7, #16]
 8016466:	e002      	b.n	801646e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8016468:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801646c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801646e:	69bb      	ldr	r3, [r7, #24]
 8016470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016472:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d108      	bne.n	801648c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801647a:	69bb      	ldr	r3, [r7, #24]
 801647c:	69da      	ldr	r2, [r3, #28]
 801647e:	693b      	ldr	r3, [r7, #16]
 8016480:	4013      	ands	r3, r2
 8016482:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801648a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801648c:	210a      	movs	r1, #10
 801648e:	69b8      	ldr	r0, [r7, #24]
 8016490:	f000 faab 	bl	80169ea <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8016494:	69bb      	ldr	r3, [r7, #24]
 8016496:	f103 011c 	add.w	r1, r3, #28
 801649a:	f107 030c 	add.w	r3, r7, #12
 801649e:	f107 0210 	add.w	r2, r7, #16
 80164a2:	6878      	ldr	r0, [r7, #4]
 80164a4:	f7f7 fb00 	bl	800daa8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80164a8:	3720      	adds	r7, #32
 80164aa:	46bd      	mov	sp, r7
 80164ac:	bd80      	pop	{r7, pc}
 80164ae:	bf00      	nop
 80164b0:	0801e450 	.word	0x0801e450
 80164b4:	0801e5b0 	.word	0x0801e5b0
 80164b8:	0801e4b0 	.word	0x0801e4b0
 80164bc:	0801e5cc 	.word	0x0801e5cc
 80164c0:	88888889 	.word	0x88888889

080164c4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b08a      	sub	sp, #40	; 0x28
 80164c8:	af02      	add	r7, sp, #8
 80164ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164d0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80164d2:	2105      	movs	r1, #5
 80164d4:	69b8      	ldr	r0, [r7, #24]
 80164d6:	f000 fa88 	bl	80169ea <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80164da:	f107 030c 	add.w	r3, r7, #12
 80164de:	2203      	movs	r2, #3
 80164e0:	69b9      	ldr	r1, [r7, #24]
 80164e2:	6878      	ldr	r0, [r7, #4]
 80164e4:	f000 ff0c 	bl	8017300 <dhcp_create_msg>
 80164e8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80164ea:	697b      	ldr	r3, [r7, #20]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d04e      	beq.n	801658e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	685b      	ldr	r3, [r3, #4]
 80164f4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80164f6:	89b8      	ldrh	r0, [r7, #12]
 80164f8:	693b      	ldr	r3, [r7, #16]
 80164fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80164fe:	2302      	movs	r3, #2
 8016500:	2239      	movs	r2, #57	; 0x39
 8016502:	f000 fa8d 	bl	8016a20 <dhcp_option>
 8016506:	4603      	mov	r3, r0
 8016508:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801650a:	89b8      	ldrh	r0, [r7, #12]
 801650c:	693b      	ldr	r3, [r7, #16]
 801650e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016516:	461a      	mov	r2, r3
 8016518:	f000 fadc 	bl	8016ad4 <dhcp_option_short>
 801651c:	4603      	mov	r3, r0
 801651e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016520:	89b8      	ldrh	r0, [r7, #12]
 8016522:	693b      	ldr	r3, [r7, #16]
 8016524:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016528:	2303      	movs	r3, #3
 801652a:	2237      	movs	r2, #55	; 0x37
 801652c:	f000 fa78 	bl	8016a20 <dhcp_option>
 8016530:	4603      	mov	r3, r0
 8016532:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016534:	2300      	movs	r3, #0
 8016536:	77bb      	strb	r3, [r7, #30]
 8016538:	e00e      	b.n	8016558 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801653a:	89b8      	ldrh	r0, [r7, #12]
 801653c:	693b      	ldr	r3, [r7, #16]
 801653e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016542:	7fbb      	ldrb	r3, [r7, #30]
 8016544:	4a2a      	ldr	r2, [pc, #168]	; (80165f0 <dhcp_renew+0x12c>)
 8016546:	5cd3      	ldrb	r3, [r2, r3]
 8016548:	461a      	mov	r2, r3
 801654a:	f000 fa9d 	bl	8016a88 <dhcp_option_byte>
 801654e:	4603      	mov	r3, r0
 8016550:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016552:	7fbb      	ldrb	r3, [r7, #30]
 8016554:	3301      	adds	r3, #1
 8016556:	77bb      	strb	r3, [r7, #30]
 8016558:	7fbb      	ldrb	r3, [r7, #30]
 801655a:	2b02      	cmp	r3, #2
 801655c:	d9ed      	bls.n	801653a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801655e:	89b8      	ldrh	r0, [r7, #12]
 8016560:	693b      	ldr	r3, [r7, #16]
 8016562:	33f0      	adds	r3, #240	; 0xf0
 8016564:	697a      	ldr	r2, [r7, #20]
 8016566:	4619      	mov	r1, r3
 8016568:	f000 ffa0 	bl	80174ac <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801656c:	4b21      	ldr	r3, [pc, #132]	; (80165f4 <dhcp_renew+0x130>)
 801656e:	6818      	ldr	r0, [r3, #0]
 8016570:	69bb      	ldr	r3, [r7, #24]
 8016572:	f103 0218 	add.w	r2, r3, #24
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	9300      	str	r3, [sp, #0]
 801657a:	2343      	movs	r3, #67	; 0x43
 801657c:	6979      	ldr	r1, [r7, #20]
 801657e:	f7fe fe35 	bl	80151ec <udp_sendto_if>
 8016582:	4603      	mov	r3, r0
 8016584:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016586:	6978      	ldr	r0, [r7, #20]
 8016588:	f7f7 ff98 	bl	800e4bc <pbuf_free>
 801658c:	e001      	b.n	8016592 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801658e:	23ff      	movs	r3, #255	; 0xff
 8016590:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016592:	69bb      	ldr	r3, [r7, #24]
 8016594:	799b      	ldrb	r3, [r3, #6]
 8016596:	2bff      	cmp	r3, #255	; 0xff
 8016598:	d005      	beq.n	80165a6 <dhcp_renew+0xe2>
    dhcp->tries++;
 801659a:	69bb      	ldr	r3, [r7, #24]
 801659c:	799b      	ldrb	r3, [r3, #6]
 801659e:	3301      	adds	r3, #1
 80165a0:	b2da      	uxtb	r2, r3
 80165a2:	69bb      	ldr	r3, [r7, #24]
 80165a4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80165a6:	69bb      	ldr	r3, [r7, #24]
 80165a8:	799b      	ldrb	r3, [r3, #6]
 80165aa:	2b09      	cmp	r3, #9
 80165ac:	d80a      	bhi.n	80165c4 <dhcp_renew+0x100>
 80165ae:	69bb      	ldr	r3, [r7, #24]
 80165b0:	799b      	ldrb	r3, [r3, #6]
 80165b2:	b29b      	uxth	r3, r3
 80165b4:	461a      	mov	r2, r3
 80165b6:	0152      	lsls	r2, r2, #5
 80165b8:	1ad2      	subs	r2, r2, r3
 80165ba:	0092      	lsls	r2, r2, #2
 80165bc:	4413      	add	r3, r2
 80165be:	011b      	lsls	r3, r3, #4
 80165c0:	b29b      	uxth	r3, r3
 80165c2:	e001      	b.n	80165c8 <dhcp_renew+0x104>
 80165c4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80165c8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80165ca:	89fb      	ldrh	r3, [r7, #14]
 80165cc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80165d0:	4a09      	ldr	r2, [pc, #36]	; (80165f8 <dhcp_renew+0x134>)
 80165d2:	fb82 1203 	smull	r1, r2, r2, r3
 80165d6:	1152      	asrs	r2, r2, #5
 80165d8:	17db      	asrs	r3, r3, #31
 80165da:	1ad3      	subs	r3, r2, r3
 80165dc:	b29a      	uxth	r2, r3
 80165de:	69bb      	ldr	r3, [r7, #24]
 80165e0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80165e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	3720      	adds	r7, #32
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}
 80165ee:	bf00      	nop
 80165f0:	200000a0 	.word	0x200000a0
 80165f4:	20010328 	.word	0x20010328
 80165f8:	10624dd3 	.word	0x10624dd3

080165fc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b08a      	sub	sp, #40	; 0x28
 8016600:	af02      	add	r7, sp, #8
 8016602:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016608:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801660a:	2104      	movs	r1, #4
 801660c:	69b8      	ldr	r0, [r7, #24]
 801660e:	f000 f9ec 	bl	80169ea <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016612:	f107 030c 	add.w	r3, r7, #12
 8016616:	2203      	movs	r2, #3
 8016618:	69b9      	ldr	r1, [r7, #24]
 801661a:	6878      	ldr	r0, [r7, #4]
 801661c:	f000 fe70 	bl	8017300 <dhcp_create_msg>
 8016620:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016622:	697b      	ldr	r3, [r7, #20]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d04c      	beq.n	80166c2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016628:	697b      	ldr	r3, [r7, #20]
 801662a:	685b      	ldr	r3, [r3, #4]
 801662c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801662e:	89b8      	ldrh	r0, [r7, #12]
 8016630:	693b      	ldr	r3, [r7, #16]
 8016632:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016636:	2302      	movs	r3, #2
 8016638:	2239      	movs	r2, #57	; 0x39
 801663a:	f000 f9f1 	bl	8016a20 <dhcp_option>
 801663e:	4603      	mov	r3, r0
 8016640:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016642:	89b8      	ldrh	r0, [r7, #12]
 8016644:	693b      	ldr	r3, [r7, #16]
 8016646:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801664e:	461a      	mov	r2, r3
 8016650:	f000 fa40 	bl	8016ad4 <dhcp_option_short>
 8016654:	4603      	mov	r3, r0
 8016656:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016658:	89b8      	ldrh	r0, [r7, #12]
 801665a:	693b      	ldr	r3, [r7, #16]
 801665c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016660:	2303      	movs	r3, #3
 8016662:	2237      	movs	r2, #55	; 0x37
 8016664:	f000 f9dc 	bl	8016a20 <dhcp_option>
 8016668:	4603      	mov	r3, r0
 801666a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801666c:	2300      	movs	r3, #0
 801666e:	77bb      	strb	r3, [r7, #30]
 8016670:	e00e      	b.n	8016690 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016672:	89b8      	ldrh	r0, [r7, #12]
 8016674:	693b      	ldr	r3, [r7, #16]
 8016676:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801667a:	7fbb      	ldrb	r3, [r7, #30]
 801667c:	4a29      	ldr	r2, [pc, #164]	; (8016724 <dhcp_rebind+0x128>)
 801667e:	5cd3      	ldrb	r3, [r2, r3]
 8016680:	461a      	mov	r2, r3
 8016682:	f000 fa01 	bl	8016a88 <dhcp_option_byte>
 8016686:	4603      	mov	r3, r0
 8016688:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801668a:	7fbb      	ldrb	r3, [r7, #30]
 801668c:	3301      	adds	r3, #1
 801668e:	77bb      	strb	r3, [r7, #30]
 8016690:	7fbb      	ldrb	r3, [r7, #30]
 8016692:	2b02      	cmp	r3, #2
 8016694:	d9ed      	bls.n	8016672 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016696:	89b8      	ldrh	r0, [r7, #12]
 8016698:	693b      	ldr	r3, [r7, #16]
 801669a:	33f0      	adds	r3, #240	; 0xf0
 801669c:	697a      	ldr	r2, [r7, #20]
 801669e:	4619      	mov	r1, r3
 80166a0:	f000 ff04 	bl	80174ac <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80166a4:	4b20      	ldr	r3, [pc, #128]	; (8016728 <dhcp_rebind+0x12c>)
 80166a6:	6818      	ldr	r0, [r3, #0]
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	9300      	str	r3, [sp, #0]
 80166ac:	2343      	movs	r3, #67	; 0x43
 80166ae:	4a1f      	ldr	r2, [pc, #124]	; (801672c <dhcp_rebind+0x130>)
 80166b0:	6979      	ldr	r1, [r7, #20]
 80166b2:	f7fe fd9b 	bl	80151ec <udp_sendto_if>
 80166b6:	4603      	mov	r3, r0
 80166b8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80166ba:	6978      	ldr	r0, [r7, #20]
 80166bc:	f7f7 fefe 	bl	800e4bc <pbuf_free>
 80166c0:	e001      	b.n	80166c6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80166c2:	23ff      	movs	r3, #255	; 0xff
 80166c4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80166c6:	69bb      	ldr	r3, [r7, #24]
 80166c8:	799b      	ldrb	r3, [r3, #6]
 80166ca:	2bff      	cmp	r3, #255	; 0xff
 80166cc:	d005      	beq.n	80166da <dhcp_rebind+0xde>
    dhcp->tries++;
 80166ce:	69bb      	ldr	r3, [r7, #24]
 80166d0:	799b      	ldrb	r3, [r3, #6]
 80166d2:	3301      	adds	r3, #1
 80166d4:	b2da      	uxtb	r2, r3
 80166d6:	69bb      	ldr	r3, [r7, #24]
 80166d8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80166da:	69bb      	ldr	r3, [r7, #24]
 80166dc:	799b      	ldrb	r3, [r3, #6]
 80166de:	2b09      	cmp	r3, #9
 80166e0:	d80a      	bhi.n	80166f8 <dhcp_rebind+0xfc>
 80166e2:	69bb      	ldr	r3, [r7, #24]
 80166e4:	799b      	ldrb	r3, [r3, #6]
 80166e6:	b29b      	uxth	r3, r3
 80166e8:	461a      	mov	r2, r3
 80166ea:	0152      	lsls	r2, r2, #5
 80166ec:	1ad2      	subs	r2, r2, r3
 80166ee:	0092      	lsls	r2, r2, #2
 80166f0:	4413      	add	r3, r2
 80166f2:	00db      	lsls	r3, r3, #3
 80166f4:	b29b      	uxth	r3, r3
 80166f6:	e001      	b.n	80166fc <dhcp_rebind+0x100>
 80166f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80166fc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80166fe:	89fb      	ldrh	r3, [r7, #14]
 8016700:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016704:	4a0a      	ldr	r2, [pc, #40]	; (8016730 <dhcp_rebind+0x134>)
 8016706:	fb82 1203 	smull	r1, r2, r2, r3
 801670a:	1152      	asrs	r2, r2, #5
 801670c:	17db      	asrs	r3, r3, #31
 801670e:	1ad3      	subs	r3, r2, r3
 8016710:	b29a      	uxth	r2, r3
 8016712:	69bb      	ldr	r3, [r7, #24]
 8016714:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016716:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801671a:	4618      	mov	r0, r3
 801671c:	3720      	adds	r7, #32
 801671e:	46bd      	mov	sp, r7
 8016720:	bd80      	pop	{r7, pc}
 8016722:	bf00      	nop
 8016724:	200000a0 	.word	0x200000a0
 8016728:	20010328 	.word	0x20010328
 801672c:	08040278 	.word	0x08040278
 8016730:	10624dd3 	.word	0x10624dd3

08016734 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8016734:	b5b0      	push	{r4, r5, r7, lr}
 8016736:	b08a      	sub	sp, #40	; 0x28
 8016738:	af02      	add	r7, sp, #8
 801673a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016740:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8016742:	2103      	movs	r1, #3
 8016744:	69b8      	ldr	r0, [r7, #24]
 8016746:	f000 f950 	bl	80169ea <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801674a:	f107 030c 	add.w	r3, r7, #12
 801674e:	2203      	movs	r2, #3
 8016750:	69b9      	ldr	r1, [r7, #24]
 8016752:	6878      	ldr	r0, [r7, #4]
 8016754:	f000 fdd4 	bl	8017300 <dhcp_create_msg>
 8016758:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801675a:	697b      	ldr	r3, [r7, #20]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d066      	beq.n	801682e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016760:	697b      	ldr	r3, [r7, #20]
 8016762:	685b      	ldr	r3, [r3, #4]
 8016764:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016766:	89b8      	ldrh	r0, [r7, #12]
 8016768:	693b      	ldr	r3, [r7, #16]
 801676a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801676e:	2302      	movs	r3, #2
 8016770:	2239      	movs	r2, #57	; 0x39
 8016772:	f000 f955 	bl	8016a20 <dhcp_option>
 8016776:	4603      	mov	r3, r0
 8016778:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801677a:	89b8      	ldrh	r0, [r7, #12]
 801677c:	693b      	ldr	r3, [r7, #16]
 801677e:	33f0      	adds	r3, #240	; 0xf0
 8016780:	f44f 7210 	mov.w	r2, #576	; 0x240
 8016784:	4619      	mov	r1, r3
 8016786:	f000 f9a5 	bl	8016ad4 <dhcp_option_short>
 801678a:	4603      	mov	r3, r0
 801678c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801678e:	89b8      	ldrh	r0, [r7, #12]
 8016790:	693b      	ldr	r3, [r7, #16]
 8016792:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016796:	2304      	movs	r3, #4
 8016798:	2232      	movs	r2, #50	; 0x32
 801679a:	f000 f941 	bl	8016a20 <dhcp_option>
 801679e:	4603      	mov	r3, r0
 80167a0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80167a2:	89bc      	ldrh	r4, [r7, #12]
 80167a4:	693b      	ldr	r3, [r7, #16]
 80167a6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80167aa:	69bb      	ldr	r3, [r7, #24]
 80167ac:	69db      	ldr	r3, [r3, #28]
 80167ae:	4618      	mov	r0, r3
 80167b0:	f7f6 fa7b 	bl	800ccaa <lwip_htonl>
 80167b4:	4603      	mov	r3, r0
 80167b6:	461a      	mov	r2, r3
 80167b8:	4629      	mov	r1, r5
 80167ba:	4620      	mov	r0, r4
 80167bc:	f000 f9bc 	bl	8016b38 <dhcp_option_long>
 80167c0:	4603      	mov	r3, r0
 80167c2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80167c4:	89b8      	ldrh	r0, [r7, #12]
 80167c6:	693b      	ldr	r3, [r7, #16]
 80167c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167cc:	2303      	movs	r3, #3
 80167ce:	2237      	movs	r2, #55	; 0x37
 80167d0:	f000 f926 	bl	8016a20 <dhcp_option>
 80167d4:	4603      	mov	r3, r0
 80167d6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80167d8:	2300      	movs	r3, #0
 80167da:	77bb      	strb	r3, [r7, #30]
 80167dc:	e00e      	b.n	80167fc <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80167de:	89b8      	ldrh	r0, [r7, #12]
 80167e0:	693b      	ldr	r3, [r7, #16]
 80167e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80167e6:	7fbb      	ldrb	r3, [r7, #30]
 80167e8:	4a29      	ldr	r2, [pc, #164]	; (8016890 <dhcp_reboot+0x15c>)
 80167ea:	5cd3      	ldrb	r3, [r2, r3]
 80167ec:	461a      	mov	r2, r3
 80167ee:	f000 f94b 	bl	8016a88 <dhcp_option_byte>
 80167f2:	4603      	mov	r3, r0
 80167f4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80167f6:	7fbb      	ldrb	r3, [r7, #30]
 80167f8:	3301      	adds	r3, #1
 80167fa:	77bb      	strb	r3, [r7, #30]
 80167fc:	7fbb      	ldrb	r3, [r7, #30]
 80167fe:	2b02      	cmp	r3, #2
 8016800:	d9ed      	bls.n	80167de <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016802:	89b8      	ldrh	r0, [r7, #12]
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	33f0      	adds	r3, #240	; 0xf0
 8016808:	697a      	ldr	r2, [r7, #20]
 801680a:	4619      	mov	r1, r3
 801680c:	f000 fe4e 	bl	80174ac <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016810:	4b20      	ldr	r3, [pc, #128]	; (8016894 <dhcp_reboot+0x160>)
 8016812:	6818      	ldr	r0, [r3, #0]
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	9300      	str	r3, [sp, #0]
 8016818:	2343      	movs	r3, #67	; 0x43
 801681a:	4a1f      	ldr	r2, [pc, #124]	; (8016898 <dhcp_reboot+0x164>)
 801681c:	6979      	ldr	r1, [r7, #20]
 801681e:	f7fe fce5 	bl	80151ec <udp_sendto_if>
 8016822:	4603      	mov	r3, r0
 8016824:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016826:	6978      	ldr	r0, [r7, #20]
 8016828:	f7f7 fe48 	bl	800e4bc <pbuf_free>
 801682c:	e001      	b.n	8016832 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801682e:	23ff      	movs	r3, #255	; 0xff
 8016830:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016832:	69bb      	ldr	r3, [r7, #24]
 8016834:	799b      	ldrb	r3, [r3, #6]
 8016836:	2bff      	cmp	r3, #255	; 0xff
 8016838:	d005      	beq.n	8016846 <dhcp_reboot+0x112>
    dhcp->tries++;
 801683a:	69bb      	ldr	r3, [r7, #24]
 801683c:	799b      	ldrb	r3, [r3, #6]
 801683e:	3301      	adds	r3, #1
 8016840:	b2da      	uxtb	r2, r3
 8016842:	69bb      	ldr	r3, [r7, #24]
 8016844:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016846:	69bb      	ldr	r3, [r7, #24]
 8016848:	799b      	ldrb	r3, [r3, #6]
 801684a:	2b09      	cmp	r3, #9
 801684c:	d80a      	bhi.n	8016864 <dhcp_reboot+0x130>
 801684e:	69bb      	ldr	r3, [r7, #24]
 8016850:	799b      	ldrb	r3, [r3, #6]
 8016852:	b29b      	uxth	r3, r3
 8016854:	461a      	mov	r2, r3
 8016856:	0152      	lsls	r2, r2, #5
 8016858:	1ad2      	subs	r2, r2, r3
 801685a:	0092      	lsls	r2, r2, #2
 801685c:	4413      	add	r3, r2
 801685e:	00db      	lsls	r3, r3, #3
 8016860:	b29b      	uxth	r3, r3
 8016862:	e001      	b.n	8016868 <dhcp_reboot+0x134>
 8016864:	f242 7310 	movw	r3, #10000	; 0x2710
 8016868:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801686a:	89fb      	ldrh	r3, [r7, #14]
 801686c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8016870:	4a0a      	ldr	r2, [pc, #40]	; (801689c <dhcp_reboot+0x168>)
 8016872:	fb82 1203 	smull	r1, r2, r2, r3
 8016876:	1152      	asrs	r2, r2, #5
 8016878:	17db      	asrs	r3, r3, #31
 801687a:	1ad3      	subs	r3, r2, r3
 801687c:	b29a      	uxth	r2, r3
 801687e:	69bb      	ldr	r3, [r7, #24]
 8016880:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8016882:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016886:	4618      	mov	r0, r3
 8016888:	3720      	adds	r7, #32
 801688a:	46bd      	mov	sp, r7
 801688c:	bdb0      	pop	{r4, r5, r7, pc}
 801688e:	bf00      	nop
 8016890:	200000a0 	.word	0x200000a0
 8016894:	20010328 	.word	0x20010328
 8016898:	08040278 	.word	0x08040278
 801689c:	10624dd3 	.word	0x10624dd3

080168a0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80168a0:	b5b0      	push	{r4, r5, r7, lr}
 80168a2:	b08a      	sub	sp, #40	; 0x28
 80168a4:	af02      	add	r7, sp, #8
 80168a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80168ae:	69fb      	ldr	r3, [r7, #28]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	f000 8084 	beq.w	80169be <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80168b6:	69fb      	ldr	r3, [r7, #28]
 80168b8:	795b      	ldrb	r3, [r3, #5]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	f000 8081 	beq.w	80169c2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80168c0:	69fb      	ldr	r3, [r7, #28]
 80168c2:	699b      	ldr	r3, [r3, #24]
 80168c4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80168c6:	69fb      	ldr	r3, [r7, #28]
 80168c8:	2200      	movs	r2, #0
 80168ca:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80168cc:	69fb      	ldr	r3, [r7, #28]
 80168ce:	2200      	movs	r2, #0
 80168d0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80168d2:	69fb      	ldr	r3, [r7, #28]
 80168d4:	2200      	movs	r2, #0
 80168d6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80168d8:	69fb      	ldr	r3, [r7, #28]
 80168da:	2200      	movs	r2, #0
 80168dc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80168de:	69fb      	ldr	r3, [r7, #28]
 80168e0:	2200      	movs	r2, #0
 80168e2:	631a      	str	r2, [r3, #48]	; 0x30
 80168e4:	69fb      	ldr	r3, [r7, #28]
 80168e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80168e8:	69fb      	ldr	r3, [r7, #28]
 80168ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80168ec:	69fb      	ldr	r3, [r7, #28]
 80168ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80168f0:	69fb      	ldr	r3, [r7, #28]
 80168f2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80168f4:	69fb      	ldr	r3, [r7, #28]
 80168f6:	2200      	movs	r2, #0
 80168f8:	829a      	strh	r2, [r3, #20]
 80168fa:	69fb      	ldr	r3, [r7, #28]
 80168fc:	8a9a      	ldrh	r2, [r3, #20]
 80168fe:	69fb      	ldr	r3, [r7, #28]
 8016900:	825a      	strh	r2, [r3, #18]
 8016902:	69fb      	ldr	r3, [r7, #28]
 8016904:	8a5a      	ldrh	r2, [r3, #18]
 8016906:	69fb      	ldr	r3, [r7, #28]
 8016908:	821a      	strh	r2, [r3, #16]
 801690a:	69fb      	ldr	r3, [r7, #28]
 801690c:	8a1a      	ldrh	r2, [r3, #16]
 801690e:	69fb      	ldr	r3, [r7, #28]
 8016910:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8016912:	6878      	ldr	r0, [r7, #4]
 8016914:	f000 fdf8 	bl	8017508 <dhcp_supplied_address>
 8016918:	4603      	mov	r3, r0
 801691a:	2b00      	cmp	r3, #0
 801691c:	d03b      	beq.n	8016996 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801691e:	f107 030e 	add.w	r3, r7, #14
 8016922:	2207      	movs	r2, #7
 8016924:	69f9      	ldr	r1, [r7, #28]
 8016926:	6878      	ldr	r0, [r7, #4]
 8016928:	f000 fcea 	bl	8017300 <dhcp_create_msg>
 801692c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801692e:	69bb      	ldr	r3, [r7, #24]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d030      	beq.n	8016996 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016934:	69bb      	ldr	r3, [r7, #24]
 8016936:	685b      	ldr	r3, [r3, #4]
 8016938:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801693a:	89f8      	ldrh	r0, [r7, #14]
 801693c:	697b      	ldr	r3, [r7, #20]
 801693e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016942:	2304      	movs	r3, #4
 8016944:	2236      	movs	r2, #54	; 0x36
 8016946:	f000 f86b 	bl	8016a20 <dhcp_option>
 801694a:	4603      	mov	r3, r0
 801694c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801694e:	89fc      	ldrh	r4, [r7, #14]
 8016950:	697b      	ldr	r3, [r7, #20]
 8016952:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8016956:	693b      	ldr	r3, [r7, #16]
 8016958:	4618      	mov	r0, r3
 801695a:	f7f6 f9a6 	bl	800ccaa <lwip_htonl>
 801695e:	4603      	mov	r3, r0
 8016960:	461a      	mov	r2, r3
 8016962:	4629      	mov	r1, r5
 8016964:	4620      	mov	r0, r4
 8016966:	f000 f8e7 	bl	8016b38 <dhcp_option_long>
 801696a:	4603      	mov	r3, r0
 801696c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801696e:	89f8      	ldrh	r0, [r7, #14]
 8016970:	697b      	ldr	r3, [r7, #20]
 8016972:	33f0      	adds	r3, #240	; 0xf0
 8016974:	69ba      	ldr	r2, [r7, #24]
 8016976:	4619      	mov	r1, r3
 8016978:	f000 fd98 	bl	80174ac <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801697c:	4b13      	ldr	r3, [pc, #76]	; (80169cc <dhcp_release_and_stop+0x12c>)
 801697e:	6818      	ldr	r0, [r3, #0]
 8016980:	f107 0210 	add.w	r2, r7, #16
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	9300      	str	r3, [sp, #0]
 8016988:	2343      	movs	r3, #67	; 0x43
 801698a:	69b9      	ldr	r1, [r7, #24]
 801698c:	f7fe fc2e 	bl	80151ec <udp_sendto_if>
      pbuf_free(p_out);
 8016990:	69b8      	ldr	r0, [r7, #24]
 8016992:	f7f7 fd93 	bl	800e4bc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8016996:	4b0e      	ldr	r3, [pc, #56]	; (80169d0 <dhcp_release_and_stop+0x130>)
 8016998:	4a0d      	ldr	r2, [pc, #52]	; (80169d0 <dhcp_release_and_stop+0x130>)
 801699a:	490d      	ldr	r1, [pc, #52]	; (80169d0 <dhcp_release_and_stop+0x130>)
 801699c:	6878      	ldr	r0, [r7, #4]
 801699e:	f7f7 f883 	bl	800daa8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80169a2:	2100      	movs	r1, #0
 80169a4:	69f8      	ldr	r0, [r7, #28]
 80169a6:	f000 f820 	bl	80169ea <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80169aa:	69fb      	ldr	r3, [r7, #28]
 80169ac:	791b      	ldrb	r3, [r3, #4]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d008      	beq.n	80169c4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80169b2:	f7fe ff73 	bl	801589c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80169b6:	69fb      	ldr	r3, [r7, #28]
 80169b8:	2200      	movs	r2, #0
 80169ba:	711a      	strb	r2, [r3, #4]
 80169bc:	e002      	b.n	80169c4 <dhcp_release_and_stop+0x124>
    return;
 80169be:	bf00      	nop
 80169c0:	e000      	b.n	80169c4 <dhcp_release_and_stop+0x124>
    return;
 80169c2:	bf00      	nop
  }
}
 80169c4:	3720      	adds	r7, #32
 80169c6:	46bd      	mov	sp, r7
 80169c8:	bdb0      	pop	{r4, r5, r7, pc}
 80169ca:	bf00      	nop
 80169cc:	20010328 	.word	0x20010328
 80169d0:	08040274 	.word	0x08040274

080169d4 <dhcp_stop>:
 * This function calls dhcp_release_and_stop() internally.
 * @deprecated Use dhcp_release_and_stop() instead.
 */
void
dhcp_stop(struct netif *netif)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b082      	sub	sp, #8
 80169d8:	af00      	add	r7, sp, #0
 80169da:	6078      	str	r0, [r7, #4]
  dhcp_release_and_stop(netif);
 80169dc:	6878      	ldr	r0, [r7, #4]
 80169de:	f7ff ff5f 	bl	80168a0 <dhcp_release_and_stop>
}
 80169e2:	bf00      	nop
 80169e4:	3708      	adds	r7, #8
 80169e6:	46bd      	mov	sp, r7
 80169e8:	bd80      	pop	{r7, pc}

080169ea <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80169ea:	b480      	push	{r7}
 80169ec:	b083      	sub	sp, #12
 80169ee:	af00      	add	r7, sp, #0
 80169f0:	6078      	str	r0, [r7, #4]
 80169f2:	460b      	mov	r3, r1
 80169f4:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	795b      	ldrb	r3, [r3, #5]
 80169fa:	78fa      	ldrb	r2, [r7, #3]
 80169fc:	429a      	cmp	r2, r3
 80169fe:	d008      	beq.n	8016a12 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	78fa      	ldrb	r2, [r7, #3]
 8016a04:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	2200      	movs	r2, #0
 8016a0a:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	2200      	movs	r2, #0
 8016a10:	811a      	strh	r2, [r3, #8]
  }
}
 8016a12:	bf00      	nop
 8016a14:	370c      	adds	r7, #12
 8016a16:	46bd      	mov	sp, r7
 8016a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a1c:	4770      	bx	lr
	...

08016a20 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b082      	sub	sp, #8
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6039      	str	r1, [r7, #0]
 8016a28:	4611      	mov	r1, r2
 8016a2a:	461a      	mov	r2, r3
 8016a2c:	4603      	mov	r3, r0
 8016a2e:	80fb      	strh	r3, [r7, #6]
 8016a30:	460b      	mov	r3, r1
 8016a32:	717b      	strb	r3, [r7, #5]
 8016a34:	4613      	mov	r3, r2
 8016a36:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8016a38:	88fa      	ldrh	r2, [r7, #6]
 8016a3a:	793b      	ldrb	r3, [r7, #4]
 8016a3c:	4413      	add	r3, r2
 8016a3e:	3302      	adds	r3, #2
 8016a40:	2b44      	cmp	r3, #68	; 0x44
 8016a42:	d906      	bls.n	8016a52 <dhcp_option+0x32>
 8016a44:	4b0d      	ldr	r3, [pc, #52]	; (8016a7c <dhcp_option+0x5c>)
 8016a46:	f240 529a 	movw	r2, #1434	; 0x59a
 8016a4a:	490d      	ldr	r1, [pc, #52]	; (8016a80 <dhcp_option+0x60>)
 8016a4c:	480d      	ldr	r0, [pc, #52]	; (8016a84 <dhcp_option+0x64>)
 8016a4e:	f003 fa73 	bl	8019f38 <iprintf>
  options[options_out_len++] = option_type;
 8016a52:	88fb      	ldrh	r3, [r7, #6]
 8016a54:	1c5a      	adds	r2, r3, #1
 8016a56:	80fa      	strh	r2, [r7, #6]
 8016a58:	461a      	mov	r2, r3
 8016a5a:	683b      	ldr	r3, [r7, #0]
 8016a5c:	4413      	add	r3, r2
 8016a5e:	797a      	ldrb	r2, [r7, #5]
 8016a60:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8016a62:	88fb      	ldrh	r3, [r7, #6]
 8016a64:	1c5a      	adds	r2, r3, #1
 8016a66:	80fa      	strh	r2, [r7, #6]
 8016a68:	461a      	mov	r2, r3
 8016a6a:	683b      	ldr	r3, [r7, #0]
 8016a6c:	4413      	add	r3, r2
 8016a6e:	793a      	ldrb	r2, [r7, #4]
 8016a70:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016a72:	88fb      	ldrh	r3, [r7, #6]
}
 8016a74:	4618      	mov	r0, r3
 8016a76:	3708      	adds	r7, #8
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bd80      	pop	{r7, pc}
 8016a7c:	0801e450 	.word	0x0801e450
 8016a80:	0801e5e4 	.word	0x0801e5e4
 8016a84:	0801e4b0 	.word	0x0801e4b0

08016a88 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b082      	sub	sp, #8
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	4603      	mov	r3, r0
 8016a90:	6039      	str	r1, [r7, #0]
 8016a92:	80fb      	strh	r3, [r7, #6]
 8016a94:	4613      	mov	r3, r2
 8016a96:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016a98:	88fb      	ldrh	r3, [r7, #6]
 8016a9a:	2b43      	cmp	r3, #67	; 0x43
 8016a9c:	d906      	bls.n	8016aac <dhcp_option_byte+0x24>
 8016a9e:	4b0a      	ldr	r3, [pc, #40]	; (8016ac8 <dhcp_option_byte+0x40>)
 8016aa0:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8016aa4:	4909      	ldr	r1, [pc, #36]	; (8016acc <dhcp_option_byte+0x44>)
 8016aa6:	480a      	ldr	r0, [pc, #40]	; (8016ad0 <dhcp_option_byte+0x48>)
 8016aa8:	f003 fa46 	bl	8019f38 <iprintf>
  options[options_out_len++] = value;
 8016aac:	88fb      	ldrh	r3, [r7, #6]
 8016aae:	1c5a      	adds	r2, r3, #1
 8016ab0:	80fa      	strh	r2, [r7, #6]
 8016ab2:	461a      	mov	r2, r3
 8016ab4:	683b      	ldr	r3, [r7, #0]
 8016ab6:	4413      	add	r3, r2
 8016ab8:	797a      	ldrb	r2, [r7, #5]
 8016aba:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016abc:	88fb      	ldrh	r3, [r7, #6]
}
 8016abe:	4618      	mov	r0, r3
 8016ac0:	3708      	adds	r7, #8
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}
 8016ac6:	bf00      	nop
 8016ac8:	0801e450 	.word	0x0801e450
 8016acc:	0801e628 	.word	0x0801e628
 8016ad0:	0801e4b0 	.word	0x0801e4b0

08016ad4 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b082      	sub	sp, #8
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	4603      	mov	r3, r0
 8016adc:	6039      	str	r1, [r7, #0]
 8016ade:	80fb      	strh	r3, [r7, #6]
 8016ae0:	4613      	mov	r3, r2
 8016ae2:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016ae4:	88fb      	ldrh	r3, [r7, #6]
 8016ae6:	3302      	adds	r3, #2
 8016ae8:	2b44      	cmp	r3, #68	; 0x44
 8016aea:	d906      	bls.n	8016afa <dhcp_option_short+0x26>
 8016aec:	4b0f      	ldr	r3, [pc, #60]	; (8016b2c <dhcp_option_short+0x58>)
 8016aee:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8016af2:	490f      	ldr	r1, [pc, #60]	; (8016b30 <dhcp_option_short+0x5c>)
 8016af4:	480f      	ldr	r0, [pc, #60]	; (8016b34 <dhcp_option_short+0x60>)
 8016af6:	f003 fa1f 	bl	8019f38 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016afa:	88bb      	ldrh	r3, [r7, #4]
 8016afc:	0a1b      	lsrs	r3, r3, #8
 8016afe:	b29a      	uxth	r2, r3
 8016b00:	88fb      	ldrh	r3, [r7, #6]
 8016b02:	1c59      	adds	r1, r3, #1
 8016b04:	80f9      	strh	r1, [r7, #6]
 8016b06:	4619      	mov	r1, r3
 8016b08:	683b      	ldr	r3, [r7, #0]
 8016b0a:	440b      	add	r3, r1
 8016b0c:	b2d2      	uxtb	r2, r2
 8016b0e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8016b10:	88fb      	ldrh	r3, [r7, #6]
 8016b12:	1c5a      	adds	r2, r3, #1
 8016b14:	80fa      	strh	r2, [r7, #6]
 8016b16:	461a      	mov	r2, r3
 8016b18:	683b      	ldr	r3, [r7, #0]
 8016b1a:	4413      	add	r3, r2
 8016b1c:	88ba      	ldrh	r2, [r7, #4]
 8016b1e:	b2d2      	uxtb	r2, r2
 8016b20:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016b22:	88fb      	ldrh	r3, [r7, #6]
}
 8016b24:	4618      	mov	r0, r3
 8016b26:	3708      	adds	r7, #8
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	bd80      	pop	{r7, pc}
 8016b2c:	0801e450 	.word	0x0801e450
 8016b30:	0801e660 	.word	0x0801e660
 8016b34:	0801e4b0 	.word	0x0801e4b0

08016b38 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b084      	sub	sp, #16
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	4603      	mov	r3, r0
 8016b40:	60b9      	str	r1, [r7, #8]
 8016b42:	607a      	str	r2, [r7, #4]
 8016b44:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8016b46:	89fb      	ldrh	r3, [r7, #14]
 8016b48:	3304      	adds	r3, #4
 8016b4a:	2b44      	cmp	r3, #68	; 0x44
 8016b4c:	d906      	bls.n	8016b5c <dhcp_option_long+0x24>
 8016b4e:	4b19      	ldr	r3, [pc, #100]	; (8016bb4 <dhcp_option_long+0x7c>)
 8016b50:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8016b54:	4918      	ldr	r1, [pc, #96]	; (8016bb8 <dhcp_option_long+0x80>)
 8016b56:	4819      	ldr	r0, [pc, #100]	; (8016bbc <dhcp_option_long+0x84>)
 8016b58:	f003 f9ee 	bl	8019f38 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	0e1a      	lsrs	r2, r3, #24
 8016b60:	89fb      	ldrh	r3, [r7, #14]
 8016b62:	1c59      	adds	r1, r3, #1
 8016b64:	81f9      	strh	r1, [r7, #14]
 8016b66:	4619      	mov	r1, r3
 8016b68:	68bb      	ldr	r3, [r7, #8]
 8016b6a:	440b      	add	r3, r1
 8016b6c:	b2d2      	uxtb	r2, r2
 8016b6e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	0c1a      	lsrs	r2, r3, #16
 8016b74:	89fb      	ldrh	r3, [r7, #14]
 8016b76:	1c59      	adds	r1, r3, #1
 8016b78:	81f9      	strh	r1, [r7, #14]
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	68bb      	ldr	r3, [r7, #8]
 8016b7e:	440b      	add	r3, r1
 8016b80:	b2d2      	uxtb	r2, r2
 8016b82:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	0a1a      	lsrs	r2, r3, #8
 8016b88:	89fb      	ldrh	r3, [r7, #14]
 8016b8a:	1c59      	adds	r1, r3, #1
 8016b8c:	81f9      	strh	r1, [r7, #14]
 8016b8e:	4619      	mov	r1, r3
 8016b90:	68bb      	ldr	r3, [r7, #8]
 8016b92:	440b      	add	r3, r1
 8016b94:	b2d2      	uxtb	r2, r2
 8016b96:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016b98:	89fb      	ldrh	r3, [r7, #14]
 8016b9a:	1c5a      	adds	r2, r3, #1
 8016b9c:	81fa      	strh	r2, [r7, #14]
 8016b9e:	461a      	mov	r2, r3
 8016ba0:	68bb      	ldr	r3, [r7, #8]
 8016ba2:	4413      	add	r3, r2
 8016ba4:	687a      	ldr	r2, [r7, #4]
 8016ba6:	b2d2      	uxtb	r2, r2
 8016ba8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016baa:	89fb      	ldrh	r3, [r7, #14]
}
 8016bac:	4618      	mov	r0, r3
 8016bae:	3710      	adds	r7, #16
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	bd80      	pop	{r7, pc}
 8016bb4:	0801e450 	.word	0x0801e450
 8016bb8:	0801e69c 	.word	0x0801e69c
 8016bbc:	0801e4b0 	.word	0x0801e4b0

08016bc0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b090      	sub	sp, #64	; 0x40
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
 8016bc8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016bca:	2300      	movs	r3, #0
 8016bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8016bce:	2300      	movs	r3, #0
 8016bd0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8016bd2:	2208      	movs	r2, #8
 8016bd4:	2100      	movs	r1, #0
 8016bd6:	48be      	ldr	r0, [pc, #760]	; (8016ed0 <dhcp_parse_reply+0x310>)
 8016bd8:	f003 f9a5 	bl	8019f26 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	895b      	ldrh	r3, [r3, #10]
 8016be0:	2b2b      	cmp	r3, #43	; 0x2b
 8016be2:	d802      	bhi.n	8016bea <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8016be4:	f06f 0301 	mvn.w	r3, #1
 8016be8:	e2a8      	b.n	801713c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	685b      	ldr	r3, [r3, #4]
 8016bee:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8016bf0:	23f0      	movs	r3, #240	; 0xf0
 8016bf2:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	891b      	ldrh	r3, [r3, #8]
 8016bf8:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8016bfe:	e00c      	b.n	8016c1a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8016c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c02:	895b      	ldrh	r3, [r3, #10]
 8016c04:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016c06:	1ad3      	subs	r3, r2, r3
 8016c08:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8016c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c0c:	895b      	ldrh	r3, [r3, #10]
 8016c0e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8016c10:	1ad3      	subs	r3, r2, r3
 8016c12:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8016c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8016c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d004      	beq.n	8016c2a <dhcp_parse_reply+0x6a>
 8016c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c22:	895b      	ldrh	r3, [r3, #10]
 8016c24:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016c26:	429a      	cmp	r2, r3
 8016c28:	d2ea      	bcs.n	8016c00 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8016c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d102      	bne.n	8016c36 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8016c30:	f06f 0301 	mvn.w	r3, #1
 8016c34:	e282      	b.n	801713c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8016c36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016c38:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8016c3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016c3c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8016c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c40:	685b      	ldr	r3, [r3, #4]
 8016c42:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016c44:	e23a      	b.n	80170bc <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8016c46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016c4a:	4413      	add	r3, r2
 8016c4c:	781b      	ldrb	r3, [r3, #0]
 8016c4e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8016c50:	2300      	movs	r3, #0
 8016c52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8016c56:	f04f 33ff 	mov.w	r3, #4294967295
 8016c5a:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8016c5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c5e:	3302      	adds	r3, #2
 8016c60:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8016c62:	8bfa      	ldrh	r2, [r7, #30]
 8016c64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d202      	bcs.n	8016c70 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8016c6a:	f06f 0301 	mvn.w	r3, #1
 8016c6e:	e265      	b.n	801713c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8016c70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c72:	3301      	adds	r3, #1
 8016c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c76:	8952      	ldrh	r2, [r2, #10]
 8016c78:	4293      	cmp	r3, r2
 8016c7a:	da07      	bge.n	8016c8c <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8016c7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c7e:	3301      	adds	r3, #1
 8016c80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016c82:	4413      	add	r3, r2
 8016c84:	781b      	ldrb	r3, [r3, #0]
 8016c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c8a:	e00b      	b.n	8016ca4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d004      	beq.n	8016c9e <dhcp_parse_reply+0xde>
 8016c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	685b      	ldr	r3, [r3, #4]
 8016c9a:	781b      	ldrb	r3, [r3, #0]
 8016c9c:	e000      	b.n	8016ca0 <dhcp_parse_reply+0xe0>
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8016cac:	7dfb      	ldrb	r3, [r7, #23]
 8016cae:	2b3b      	cmp	r3, #59	; 0x3b
 8016cb0:	f200 812d 	bhi.w	8016f0e <dhcp_parse_reply+0x34e>
 8016cb4:	a201      	add	r2, pc, #4	; (adr r2, 8016cbc <dhcp_parse_reply+0xfc>)
 8016cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cba:	bf00      	nop
 8016cbc:	08016dad 	.word	0x08016dad
 8016cc0:	08016dbd 	.word	0x08016dbd
 8016cc4:	08016f0f 	.word	0x08016f0f
 8016cc8:	08016ddf 	.word	0x08016ddf
 8016ccc:	08016f0f 	.word	0x08016f0f
 8016cd0:	08016f0f 	.word	0x08016f0f
 8016cd4:	08016f0f 	.word	0x08016f0f
 8016cd8:	08016f0f 	.word	0x08016f0f
 8016cdc:	08016f0f 	.word	0x08016f0f
 8016ce0:	08016f0f 	.word	0x08016f0f
 8016ce4:	08016f0f 	.word	0x08016f0f
 8016ce8:	08016f0f 	.word	0x08016f0f
 8016cec:	08016f0f 	.word	0x08016f0f
 8016cf0:	08016f0f 	.word	0x08016f0f
 8016cf4:	08016f0f 	.word	0x08016f0f
 8016cf8:	08016f0f 	.word	0x08016f0f
 8016cfc:	08016f0f 	.word	0x08016f0f
 8016d00:	08016f0f 	.word	0x08016f0f
 8016d04:	08016f0f 	.word	0x08016f0f
 8016d08:	08016f0f 	.word	0x08016f0f
 8016d0c:	08016f0f 	.word	0x08016f0f
 8016d10:	08016f0f 	.word	0x08016f0f
 8016d14:	08016f0f 	.word	0x08016f0f
 8016d18:	08016f0f 	.word	0x08016f0f
 8016d1c:	08016f0f 	.word	0x08016f0f
 8016d20:	08016f0f 	.word	0x08016f0f
 8016d24:	08016f0f 	.word	0x08016f0f
 8016d28:	08016f0f 	.word	0x08016f0f
 8016d2c:	08016f0f 	.word	0x08016f0f
 8016d30:	08016f0f 	.word	0x08016f0f
 8016d34:	08016f0f 	.word	0x08016f0f
 8016d38:	08016f0f 	.word	0x08016f0f
 8016d3c:	08016f0f 	.word	0x08016f0f
 8016d40:	08016f0f 	.word	0x08016f0f
 8016d44:	08016f0f 	.word	0x08016f0f
 8016d48:	08016f0f 	.word	0x08016f0f
 8016d4c:	08016f0f 	.word	0x08016f0f
 8016d50:	08016f0f 	.word	0x08016f0f
 8016d54:	08016f0f 	.word	0x08016f0f
 8016d58:	08016f0f 	.word	0x08016f0f
 8016d5c:	08016f0f 	.word	0x08016f0f
 8016d60:	08016f0f 	.word	0x08016f0f
 8016d64:	08016f0f 	.word	0x08016f0f
 8016d68:	08016f0f 	.word	0x08016f0f
 8016d6c:	08016f0f 	.word	0x08016f0f
 8016d70:	08016f0f 	.word	0x08016f0f
 8016d74:	08016f0f 	.word	0x08016f0f
 8016d78:	08016f0f 	.word	0x08016f0f
 8016d7c:	08016f0f 	.word	0x08016f0f
 8016d80:	08016f0f 	.word	0x08016f0f
 8016d84:	08016f0f 	.word	0x08016f0f
 8016d88:	08016e0b 	.word	0x08016e0b
 8016d8c:	08016e2d 	.word	0x08016e2d
 8016d90:	08016e69 	.word	0x08016e69
 8016d94:	08016e8b 	.word	0x08016e8b
 8016d98:	08016f0f 	.word	0x08016f0f
 8016d9c:	08016f0f 	.word	0x08016f0f
 8016da0:	08016f0f 	.word	0x08016f0f
 8016da4:	08016ead 	.word	0x08016ead
 8016da8:	08016eed 	.word	0x08016eed
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8016dac:	2300      	movs	r3, #0
 8016dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016db6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8016dba:	e0ac      	b.n	8016f16 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dc0:	2b04      	cmp	r3, #4
 8016dc2:	d009      	beq.n	8016dd8 <dhcp_parse_reply+0x218>
 8016dc4:	4b43      	ldr	r3, [pc, #268]	; (8016ed4 <dhcp_parse_reply+0x314>)
 8016dc6:	f240 622e 	movw	r2, #1582	; 0x62e
 8016dca:	4943      	ldr	r1, [pc, #268]	; (8016ed8 <dhcp_parse_reply+0x318>)
 8016dcc:	4843      	ldr	r0, [pc, #268]	; (8016edc <dhcp_parse_reply+0x31c>)
 8016dce:	f003 f8b3 	bl	8019f38 <iprintf>
 8016dd2:	f06f 0305 	mvn.w	r3, #5
 8016dd6:	e1b1      	b.n	801713c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016dd8:	2306      	movs	r3, #6
 8016dda:	623b      	str	r3, [r7, #32]
        break;
 8016ddc:	e09b      	b.n	8016f16 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8016dde:	2304      	movs	r3, #4
 8016de0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016de4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016de8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016dec:	429a      	cmp	r2, r3
 8016dee:	d209      	bcs.n	8016e04 <dhcp_parse_reply+0x244>
 8016df0:	4b38      	ldr	r3, [pc, #224]	; (8016ed4 <dhcp_parse_reply+0x314>)
 8016df2:	f240 6233 	movw	r2, #1587	; 0x633
 8016df6:	493a      	ldr	r1, [pc, #232]	; (8016ee0 <dhcp_parse_reply+0x320>)
 8016df8:	4838      	ldr	r0, [pc, #224]	; (8016edc <dhcp_parse_reply+0x31c>)
 8016dfa:	f003 f89d 	bl	8019f38 <iprintf>
 8016dfe:	f06f 0305 	mvn.w	r3, #5
 8016e02:	e19b      	b.n	801713c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8016e04:	2307      	movs	r3, #7
 8016e06:	623b      	str	r3, [r7, #32]
        break;
 8016e08:	e085      	b.n	8016f16 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e0e:	2b04      	cmp	r3, #4
 8016e10:	d009      	beq.n	8016e26 <dhcp_parse_reply+0x266>
 8016e12:	4b30      	ldr	r3, [pc, #192]	; (8016ed4 <dhcp_parse_reply+0x314>)
 8016e14:	f240 6241 	movw	r2, #1601	; 0x641
 8016e18:	492f      	ldr	r1, [pc, #188]	; (8016ed8 <dhcp_parse_reply+0x318>)
 8016e1a:	4830      	ldr	r0, [pc, #192]	; (8016edc <dhcp_parse_reply+0x31c>)
 8016e1c:	f003 f88c 	bl	8019f38 <iprintf>
 8016e20:	f06f 0305 	mvn.w	r3, #5
 8016e24:	e18a      	b.n	801713c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8016e26:	2303      	movs	r3, #3
 8016e28:	623b      	str	r3, [r7, #32]
        break;
 8016e2a:	e074      	b.n	8016f16 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e30:	2b01      	cmp	r3, #1
 8016e32:	d009      	beq.n	8016e48 <dhcp_parse_reply+0x288>
 8016e34:	4b27      	ldr	r3, [pc, #156]	; (8016ed4 <dhcp_parse_reply+0x314>)
 8016e36:	f240 624f 	movw	r2, #1615	; 0x64f
 8016e3a:	492a      	ldr	r1, [pc, #168]	; (8016ee4 <dhcp_parse_reply+0x324>)
 8016e3c:	4827      	ldr	r0, [pc, #156]	; (8016edc <dhcp_parse_reply+0x31c>)
 8016e3e:	f003 f87b 	bl	8019f38 <iprintf>
 8016e42:	f06f 0305 	mvn.w	r3, #5
 8016e46:	e179      	b.n	801713c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8016e48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016e4a:	2bf0      	cmp	r3, #240	; 0xf0
 8016e4c:	d009      	beq.n	8016e62 <dhcp_parse_reply+0x2a2>
 8016e4e:	4b21      	ldr	r3, [pc, #132]	; (8016ed4 <dhcp_parse_reply+0x314>)
 8016e50:	f240 6251 	movw	r2, #1617	; 0x651
 8016e54:	4924      	ldr	r1, [pc, #144]	; (8016ee8 <dhcp_parse_reply+0x328>)
 8016e56:	4821      	ldr	r0, [pc, #132]	; (8016edc <dhcp_parse_reply+0x31c>)
 8016e58:	f003 f86e 	bl	8019f38 <iprintf>
 8016e5c:	f06f 0305 	mvn.w	r3, #5
 8016e60:	e16c      	b.n	801713c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8016e62:	2300      	movs	r3, #0
 8016e64:	623b      	str	r3, [r7, #32]
        break;
 8016e66:	e056      	b.n	8016f16 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8016e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e6c:	2b01      	cmp	r3, #1
 8016e6e:	d009      	beq.n	8016e84 <dhcp_parse_reply+0x2c4>
 8016e70:	4b18      	ldr	r3, [pc, #96]	; (8016ed4 <dhcp_parse_reply+0x314>)
 8016e72:	f240 6255 	movw	r2, #1621	; 0x655
 8016e76:	491b      	ldr	r1, [pc, #108]	; (8016ee4 <dhcp_parse_reply+0x324>)
 8016e78:	4818      	ldr	r0, [pc, #96]	; (8016edc <dhcp_parse_reply+0x31c>)
 8016e7a:	f003 f85d 	bl	8019f38 <iprintf>
 8016e7e:	f06f 0305 	mvn.w	r3, #5
 8016e82:	e15b      	b.n	801713c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8016e84:	2301      	movs	r3, #1
 8016e86:	623b      	str	r3, [r7, #32]
        break;
 8016e88:	e045      	b.n	8016f16 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016e8e:	2b04      	cmp	r3, #4
 8016e90:	d009      	beq.n	8016ea6 <dhcp_parse_reply+0x2e6>
 8016e92:	4b10      	ldr	r3, [pc, #64]	; (8016ed4 <dhcp_parse_reply+0x314>)
 8016e94:	f240 6259 	movw	r2, #1625	; 0x659
 8016e98:	490f      	ldr	r1, [pc, #60]	; (8016ed8 <dhcp_parse_reply+0x318>)
 8016e9a:	4810      	ldr	r0, [pc, #64]	; (8016edc <dhcp_parse_reply+0x31c>)
 8016e9c:	f003 f84c 	bl	8019f38 <iprintf>
 8016ea0:	f06f 0305 	mvn.w	r3, #5
 8016ea4:	e14a      	b.n	801713c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8016ea6:	2302      	movs	r3, #2
 8016ea8:	623b      	str	r3, [r7, #32]
        break;
 8016eaa:	e034      	b.n	8016f16 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016eb0:	2b04      	cmp	r3, #4
 8016eb2:	d009      	beq.n	8016ec8 <dhcp_parse_reply+0x308>
 8016eb4:	4b07      	ldr	r3, [pc, #28]	; (8016ed4 <dhcp_parse_reply+0x314>)
 8016eb6:	f240 625d 	movw	r2, #1629	; 0x65d
 8016eba:	4907      	ldr	r1, [pc, #28]	; (8016ed8 <dhcp_parse_reply+0x318>)
 8016ebc:	4807      	ldr	r0, [pc, #28]	; (8016edc <dhcp_parse_reply+0x31c>)
 8016ebe:	f003 f83b 	bl	8019f38 <iprintf>
 8016ec2:	f06f 0305 	mvn.w	r3, #5
 8016ec6:	e139      	b.n	801713c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016ec8:	2304      	movs	r3, #4
 8016eca:	623b      	str	r3, [r7, #32]
        break;
 8016ecc:	e023      	b.n	8016f16 <dhcp_parse_reply+0x356>
 8016ece:	bf00      	nop
 8016ed0:	20016ec0 	.word	0x20016ec0
 8016ed4:	0801e450 	.word	0x0801e450
 8016ed8:	0801e6d8 	.word	0x0801e6d8
 8016edc:	0801e4b0 	.word	0x0801e4b0
 8016ee0:	0801e6e4 	.word	0x0801e6e4
 8016ee4:	0801e6f8 	.word	0x0801e6f8
 8016ee8:	0801e704 	.word	0x0801e704
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ef0:	2b04      	cmp	r3, #4
 8016ef2:	d009      	beq.n	8016f08 <dhcp_parse_reply+0x348>
 8016ef4:	4b93      	ldr	r3, [pc, #588]	; (8017144 <dhcp_parse_reply+0x584>)
 8016ef6:	f240 6261 	movw	r2, #1633	; 0x661
 8016efa:	4993      	ldr	r1, [pc, #588]	; (8017148 <dhcp_parse_reply+0x588>)
 8016efc:	4893      	ldr	r0, [pc, #588]	; (801714c <dhcp_parse_reply+0x58c>)
 8016efe:	f003 f81b 	bl	8019f38 <iprintf>
 8016f02:	f06f 0305 	mvn.w	r3, #5
 8016f06:	e119      	b.n	801713c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8016f08:	2305      	movs	r3, #5
 8016f0a:	623b      	str	r3, [r7, #32]
        break;
 8016f0c:	e003      	b.n	8016f16 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8016f0e:	2300      	movs	r3, #0
 8016f10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8016f14:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8016f16:	7dfb      	ldrb	r3, [r7, #23]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d103      	bne.n	8016f24 <dhcp_parse_reply+0x364>
      offset++;
 8016f1c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016f1e:	3301      	adds	r3, #1
 8016f20:	877b      	strh	r3, [r7, #58]	; 0x3a
 8016f22:	e0a1      	b.n	8017068 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8016f24:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f2a:	4413      	add	r3, r2
 8016f2c:	3302      	adds	r3, #2
 8016f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f32:	db02      	blt.n	8016f3a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8016f34:	f06f 0301 	mvn.w	r3, #1
 8016f38:	e100      	b.n	801713c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8016f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016f3e:	b29a      	uxth	r2, r3
 8016f40:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016f42:	4413      	add	r3, r2
 8016f44:	b29b      	uxth	r3, r3
 8016f46:	3302      	adds	r3, #2
 8016f48:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8016f4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	f000 808a 	beq.w	8017068 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8016f54:	2300      	movs	r3, #0
 8016f56:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8016f58:	6a3b      	ldr	r3, [r7, #32]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	db02      	blt.n	8016f64 <dhcp_parse_reply+0x3a4>
 8016f5e:	6a3b      	ldr	r3, [r7, #32]
 8016f60:	2b07      	cmp	r3, #7
 8016f62:	dd06      	ble.n	8016f72 <dhcp_parse_reply+0x3b2>
 8016f64:	4b77      	ldr	r3, [pc, #476]	; (8017144 <dhcp_parse_reply+0x584>)
 8016f66:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8016f6a:	4979      	ldr	r1, [pc, #484]	; (8017150 <dhcp_parse_reply+0x590>)
 8016f6c:	4877      	ldr	r0, [pc, #476]	; (801714c <dhcp_parse_reply+0x58c>)
 8016f6e:	f002 ffe3 	bl	8019f38 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8016f72:	4a78      	ldr	r2, [pc, #480]	; (8017154 <dhcp_parse_reply+0x594>)
 8016f74:	6a3b      	ldr	r3, [r7, #32]
 8016f76:	4413      	add	r3, r2
 8016f78:	781b      	ldrb	r3, [r3, #0]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d174      	bne.n	8017068 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8016f7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016f82:	2b04      	cmp	r3, #4
 8016f84:	bf28      	it	cs
 8016f86:	2304      	movcs	r3, #4
 8016f88:	b2db      	uxtb	r3, r3
 8016f8a:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8016f8c:	8bfb      	ldrh	r3, [r7, #30]
 8016f8e:	8aba      	ldrh	r2, [r7, #20]
 8016f90:	f107 0108 	add.w	r1, r7, #8
 8016f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f96:	f7f7 fc97 	bl	800e8c8 <pbuf_copy_partial>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	461a      	mov	r2, r3
 8016f9e:	8abb      	ldrh	r3, [r7, #20]
 8016fa0:	4293      	cmp	r3, r2
 8016fa2:	d002      	beq.n	8016faa <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8016fa4:	f06f 0301 	mvn.w	r3, #1
 8016fa8:	e0c8      	b.n	801713c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8016faa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016fae:	2b04      	cmp	r3, #4
 8016fb0:	d933      	bls.n	801701a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8016fb2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016fb6:	f003 0303 	and.w	r3, r3, #3
 8016fba:	b2db      	uxtb	r3, r3
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d009      	beq.n	8016fd4 <dhcp_parse_reply+0x414>
 8016fc0:	4b60      	ldr	r3, [pc, #384]	; (8017144 <dhcp_parse_reply+0x584>)
 8016fc2:	f240 6281 	movw	r2, #1665	; 0x681
 8016fc6:	4964      	ldr	r1, [pc, #400]	; (8017158 <dhcp_parse_reply+0x598>)
 8016fc8:	4860      	ldr	r0, [pc, #384]	; (801714c <dhcp_parse_reply+0x58c>)
 8016fca:	f002 ffb5 	bl	8019f38 <iprintf>
 8016fce:	f06f 0305 	mvn.w	r3, #5
 8016fd2:	e0b3      	b.n	801713c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8016fd4:	4a5f      	ldr	r2, [pc, #380]	; (8017154 <dhcp_parse_reply+0x594>)
 8016fd6:	6a3b      	ldr	r3, [r7, #32]
 8016fd8:	4413      	add	r3, r2
 8016fda:	2201      	movs	r2, #1
 8016fdc:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	4618      	mov	r0, r3
 8016fe2:	f7f5 fe62 	bl	800ccaa <lwip_htonl>
 8016fe6:	4601      	mov	r1, r0
 8016fe8:	4a5c      	ldr	r2, [pc, #368]	; (801715c <dhcp_parse_reply+0x59c>)
 8016fea:	6a3b      	ldr	r3, [r7, #32]
 8016fec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8016ff0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ff4:	3b04      	subs	r3, #4
 8016ff6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8016ffa:	8bfb      	ldrh	r3, [r7, #30]
 8016ffc:	3304      	adds	r3, #4
 8016ffe:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8017000:	8a7a      	ldrh	r2, [r7, #18]
 8017002:	8bfb      	ldrh	r3, [r7, #30]
 8017004:	429a      	cmp	r2, r3
 8017006:	d202      	bcs.n	801700e <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8017008:	f06f 0301 	mvn.w	r3, #1
 801700c:	e096      	b.n	801713c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801700e:	8a7b      	ldrh	r3, [r7, #18]
 8017010:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8017012:	6a3b      	ldr	r3, [r7, #32]
 8017014:	3301      	adds	r3, #1
 8017016:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8017018:	e79e      	b.n	8016f58 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801701a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801701e:	2b04      	cmp	r3, #4
 8017020:	d106      	bne.n	8017030 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8017022:	68bb      	ldr	r3, [r7, #8]
 8017024:	4618      	mov	r0, r3
 8017026:	f7f5 fe40 	bl	800ccaa <lwip_htonl>
 801702a:	4603      	mov	r3, r0
 801702c:	60bb      	str	r3, [r7, #8]
 801702e:	e011      	b.n	8017054 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8017030:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017034:	2b01      	cmp	r3, #1
 8017036:	d009      	beq.n	801704c <dhcp_parse_reply+0x48c>
 8017038:	4b42      	ldr	r3, [pc, #264]	; (8017144 <dhcp_parse_reply+0x584>)
 801703a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801703e:	4948      	ldr	r1, [pc, #288]	; (8017160 <dhcp_parse_reply+0x5a0>)
 8017040:	4842      	ldr	r0, [pc, #264]	; (801714c <dhcp_parse_reply+0x58c>)
 8017042:	f002 ff79 	bl	8019f38 <iprintf>
 8017046:	f06f 0305 	mvn.w	r3, #5
 801704a:	e077      	b.n	801713c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 801704c:	f107 0308 	add.w	r3, r7, #8
 8017050:	781b      	ldrb	r3, [r3, #0]
 8017052:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8017054:	4a3f      	ldr	r2, [pc, #252]	; (8017154 <dhcp_parse_reply+0x594>)
 8017056:	6a3b      	ldr	r3, [r7, #32]
 8017058:	4413      	add	r3, r2
 801705a:	2201      	movs	r2, #1
 801705c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801705e:	68ba      	ldr	r2, [r7, #8]
 8017060:	493e      	ldr	r1, [pc, #248]	; (801715c <dhcp_parse_reply+0x59c>)
 8017062:	6a3b      	ldr	r3, [r7, #32]
 8017064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8017068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801706a:	895b      	ldrh	r3, [r3, #10]
 801706c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801706e:	429a      	cmp	r2, r3
 8017070:	d324      	bcc.n	80170bc <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8017072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017074:	895b      	ldrh	r3, [r3, #10]
 8017076:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017078:	1ad3      	subs	r3, r2, r3
 801707a:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801707c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801707e:	895b      	ldrh	r3, [r3, #10]
 8017080:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8017082:	1ad3      	subs	r3, r2, r3
 8017084:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8017086:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017088:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801708a:	429a      	cmp	r2, r3
 801708c:	d213      	bcs.n	80170b6 <dhcp_parse_reply+0x4f6>
        q = q->next;
 801708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8017094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017096:	2b00      	cmp	r3, #0
 8017098:	d109      	bne.n	80170ae <dhcp_parse_reply+0x4ee>
 801709a:	4b2a      	ldr	r3, [pc, #168]	; (8017144 <dhcp_parse_reply+0x584>)
 801709c:	f240 629d 	movw	r2, #1693	; 0x69d
 80170a0:	4930      	ldr	r1, [pc, #192]	; (8017164 <dhcp_parse_reply+0x5a4>)
 80170a2:	482a      	ldr	r0, [pc, #168]	; (801714c <dhcp_parse_reply+0x58c>)
 80170a4:	f002 ff48 	bl	8019f38 <iprintf>
 80170a8:	f06f 0305 	mvn.w	r3, #5
 80170ac:	e046      	b.n	801713c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80170ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b0:	685b      	ldr	r3, [r3, #4]
 80170b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80170b4:	e002      	b.n	80170bc <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80170b6:	f06f 0301 	mvn.w	r3, #1
 80170ba:	e03f      	b.n	801713c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80170bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d00a      	beq.n	80170d8 <dhcp_parse_reply+0x518>
 80170c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80170c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80170c6:	429a      	cmp	r2, r3
 80170c8:	d206      	bcs.n	80170d8 <dhcp_parse_reply+0x518>
 80170ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80170cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80170ce:	4413      	add	r3, r2
 80170d0:	781b      	ldrb	r3, [r3, #0]
 80170d2:	2bff      	cmp	r3, #255	; 0xff
 80170d4:	f47f adb7 	bne.w	8016c46 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80170d8:	4b1e      	ldr	r3, [pc, #120]	; (8017154 <dhcp_parse_reply+0x594>)
 80170da:	781b      	ldrb	r3, [r3, #0]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d018      	beq.n	8017112 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80170e0:	4b1e      	ldr	r3, [pc, #120]	; (801715c <dhcp_parse_reply+0x59c>)
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80170e6:	4b1b      	ldr	r3, [pc, #108]	; (8017154 <dhcp_parse_reply+0x594>)
 80170e8:	2200      	movs	r2, #0
 80170ea:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	2b01      	cmp	r3, #1
 80170f0:	d102      	bne.n	80170f8 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 80170f2:	2301      	movs	r3, #1
 80170f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80170f6:	e00c      	b.n	8017112 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	2b02      	cmp	r3, #2
 80170fc:	d102      	bne.n	8017104 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 80170fe:	2301      	movs	r3, #1
 8017100:	62bb      	str	r3, [r7, #40]	; 0x28
 8017102:	e006      	b.n	8017112 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	2b03      	cmp	r3, #3
 8017108:	d103      	bne.n	8017112 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801710a:	2301      	movs	r3, #1
 801710c:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801710e:	2301      	movs	r3, #1
 8017110:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8017112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017114:	2b00      	cmp	r3, #0
 8017116:	d006      	beq.n	8017126 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8017118:	2300      	movs	r3, #0
 801711a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801711c:	236c      	movs	r3, #108	; 0x6c
 801711e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8017120:	23ec      	movs	r3, #236	; 0xec
 8017122:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8017124:	e569      	b.n	8016bfa <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8017126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017128:	2b00      	cmp	r3, #0
 801712a:	d006      	beq.n	801713a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 801712c:	2300      	movs	r3, #0
 801712e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8017130:	232c      	movs	r3, #44	; 0x2c
 8017132:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8017134:	236c      	movs	r3, #108	; 0x6c
 8017136:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8017138:	e55f      	b.n	8016bfa <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801713a:	2300      	movs	r3, #0
}
 801713c:	4618      	mov	r0, r3
 801713e:	3740      	adds	r7, #64	; 0x40
 8017140:	46bd      	mov	sp, r7
 8017142:	bd80      	pop	{r7, pc}
 8017144:	0801e450 	.word	0x0801e450
 8017148:	0801e6d8 	.word	0x0801e6d8
 801714c:	0801e4b0 	.word	0x0801e4b0
 8017150:	0801e71c 	.word	0x0801e71c
 8017154:	20016ec0 	.word	0x20016ec0
 8017158:	0801e730 	.word	0x0801e730
 801715c:	20016ec8 	.word	0x20016ec8
 8017160:	0801e748 	.word	0x0801e748
 8017164:	0801e75c 	.word	0x0801e75c

08017168 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017168:	b580      	push	{r7, lr}
 801716a:	b08a      	sub	sp, #40	; 0x28
 801716c:	af00      	add	r7, sp, #0
 801716e:	60f8      	str	r0, [r7, #12]
 8017170:	60b9      	str	r1, [r7, #8]
 8017172:	607a      	str	r2, [r7, #4]
 8017174:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8017176:	4b5f      	ldr	r3, [pc, #380]	; (80172f4 <dhcp_recv+0x18c>)
 8017178:	685b      	ldr	r3, [r3, #4]
 801717a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801717c:	6a3b      	ldr	r3, [r7, #32]
 801717e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017180:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	685b      	ldr	r3, [r3, #4]
 8017186:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017188:	69fb      	ldr	r3, [r7, #28]
 801718a:	2b00      	cmp	r3, #0
 801718c:	f000 809d 	beq.w	80172ca <dhcp_recv+0x162>
 8017190:	69fb      	ldr	r3, [r7, #28]
 8017192:	791b      	ldrb	r3, [r3, #4]
 8017194:	2b00      	cmp	r3, #0
 8017196:	f000 8098 	beq.w	80172ca <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	895b      	ldrh	r3, [r3, #10]
 801719e:	2b2b      	cmp	r3, #43	; 0x2b
 80171a0:	f240 8095 	bls.w	80172ce <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80171a4:	69bb      	ldr	r3, [r7, #24]
 80171a6:	781b      	ldrb	r3, [r3, #0]
 80171a8:	2b02      	cmp	r3, #2
 80171aa:	f040 8092 	bne.w	80172d2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80171ae:	2300      	movs	r3, #0
 80171b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80171b4:	e012      	b.n	80171dc <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80171b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171ba:	6a3a      	ldr	r2, [r7, #32]
 80171bc:	4413      	add	r3, r2
 80171be:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80171c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171c6:	69b9      	ldr	r1, [r7, #24]
 80171c8:	440b      	add	r3, r1
 80171ca:	7f1b      	ldrb	r3, [r3, #28]
 80171cc:	429a      	cmp	r2, r3
 80171ce:	f040 8082 	bne.w	80172d6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80171d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171d6:	3301      	adds	r3, #1
 80171d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80171dc:	6a3b      	ldr	r3, [r7, #32]
 80171de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80171e2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80171e6:	429a      	cmp	r2, r3
 80171e8:	d203      	bcs.n	80171f2 <dhcp_recv+0x8a>
 80171ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80171ee:	2b05      	cmp	r3, #5
 80171f0:	d9e1      	bls.n	80171b6 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80171f2:	69bb      	ldr	r3, [r7, #24]
 80171f4:	685b      	ldr	r3, [r3, #4]
 80171f6:	4618      	mov	r0, r3
 80171f8:	f7f5 fd57 	bl	800ccaa <lwip_htonl>
 80171fc:	4602      	mov	r2, r0
 80171fe:	69fb      	ldr	r3, [r7, #28]
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	429a      	cmp	r2, r3
 8017204:	d169      	bne.n	80172da <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017206:	69f9      	ldr	r1, [r7, #28]
 8017208:	6878      	ldr	r0, [r7, #4]
 801720a:	f7ff fcd9 	bl	8016bc0 <dhcp_parse_reply>
 801720e:	4603      	mov	r3, r0
 8017210:	2b00      	cmp	r3, #0
 8017212:	d164      	bne.n	80172de <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8017214:	4b38      	ldr	r3, [pc, #224]	; (80172f8 <dhcp_recv+0x190>)
 8017216:	785b      	ldrb	r3, [r3, #1]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d062      	beq.n	80172e2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	685b      	ldr	r3, [r3, #4]
 8017220:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8017222:	4b36      	ldr	r3, [pc, #216]	; (80172fc <dhcp_recv+0x194>)
 8017224:	685b      	ldr	r3, [r3, #4]
 8017226:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017228:	7cfb      	ldrb	r3, [r7, #19]
 801722a:	2b05      	cmp	r3, #5
 801722c:	d12a      	bne.n	8017284 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801722e:	69fb      	ldr	r3, [r7, #28]
 8017230:	795b      	ldrb	r3, [r3, #5]
 8017232:	2b01      	cmp	r3, #1
 8017234:	d112      	bne.n	801725c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8017236:	6979      	ldr	r1, [r7, #20]
 8017238:	6a38      	ldr	r0, [r7, #32]
 801723a:	f7fe fdf9 	bl	8015e30 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801723e:	6a3b      	ldr	r3, [r7, #32]
 8017240:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017244:	f003 0308 	and.w	r3, r3, #8
 8017248:	2b00      	cmp	r3, #0
 801724a:	d003      	beq.n	8017254 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801724c:	6a38      	ldr	r0, [r7, #32]
 801724e:	f7fe fb69 	bl	8015924 <dhcp_check>
 8017252:	e047      	b.n	80172e4 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017254:	6a38      	ldr	r0, [r7, #32]
 8017256:	f7ff f85b 	bl	8016310 <dhcp_bind>
 801725a:	e043      	b.n	80172e4 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801725c:	69fb      	ldr	r3, [r7, #28]
 801725e:	795b      	ldrb	r3, [r3, #5]
 8017260:	2b03      	cmp	r3, #3
 8017262:	d007      	beq.n	8017274 <dhcp_recv+0x10c>
 8017264:	69fb      	ldr	r3, [r7, #28]
 8017266:	795b      	ldrb	r3, [r3, #5]
 8017268:	2b04      	cmp	r3, #4
 801726a:	d003      	beq.n	8017274 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801726c:	69fb      	ldr	r3, [r7, #28]
 801726e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017270:	2b05      	cmp	r3, #5
 8017272:	d137      	bne.n	80172e4 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8017274:	6979      	ldr	r1, [r7, #20]
 8017276:	6a38      	ldr	r0, [r7, #32]
 8017278:	f7fe fdda 	bl	8015e30 <dhcp_handle_ack>
      dhcp_bind(netif);
 801727c:	6a38      	ldr	r0, [r7, #32]
 801727e:	f7ff f847 	bl	8016310 <dhcp_bind>
 8017282:	e02f      	b.n	80172e4 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017284:	7cfb      	ldrb	r3, [r7, #19]
 8017286:	2b06      	cmp	r3, #6
 8017288:	d113      	bne.n	80172b2 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801728a:	69fb      	ldr	r3, [r7, #28]
 801728c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801728e:	2b03      	cmp	r3, #3
 8017290:	d00b      	beq.n	80172aa <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017292:	69fb      	ldr	r3, [r7, #28]
 8017294:	795b      	ldrb	r3, [r3, #5]
 8017296:	2b01      	cmp	r3, #1
 8017298:	d007      	beq.n	80172aa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801729a:	69fb      	ldr	r3, [r7, #28]
 801729c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801729e:	2b04      	cmp	r3, #4
 80172a0:	d003      	beq.n	80172aa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80172a2:	69fb      	ldr	r3, [r7, #28]
 80172a4:	795b      	ldrb	r3, [r3, #5]
 80172a6:	2b05      	cmp	r3, #5
 80172a8:	d103      	bne.n	80172b2 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80172aa:	6a38      	ldr	r0, [r7, #32]
 80172ac:	f7fe fb20 	bl	80158f0 <dhcp_handle_nak>
 80172b0:	e018      	b.n	80172e4 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80172b2:	7cfb      	ldrb	r3, [r7, #19]
 80172b4:	2b02      	cmp	r3, #2
 80172b6:	d108      	bne.n	80172ca <dhcp_recv+0x162>
 80172b8:	69fb      	ldr	r3, [r7, #28]
 80172ba:	795b      	ldrb	r3, [r3, #5]
 80172bc:	2b06      	cmp	r3, #6
 80172be:	d104      	bne.n	80172ca <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80172c0:	6979      	ldr	r1, [r7, #20]
 80172c2:	6a38      	ldr	r0, [r7, #32]
 80172c4:	f7fe fb62 	bl	801598c <dhcp_handle_offer>
 80172c8:	e00c      	b.n	80172e4 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 80172ca:	bf00      	nop
 80172cc:	e00a      	b.n	80172e4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80172ce:	bf00      	nop
 80172d0:	e008      	b.n	80172e4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80172d2:	bf00      	nop
 80172d4:	e006      	b.n	80172e4 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 80172d6:	bf00      	nop
 80172d8:	e004      	b.n	80172e4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80172da:	bf00      	nop
 80172dc:	e002      	b.n	80172e4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80172de:	bf00      	nop
 80172e0:	e000      	b.n	80172e4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80172e2:	bf00      	nop
  pbuf_free(p);
 80172e4:	6878      	ldr	r0, [r7, #4]
 80172e6:	f7f7 f8e9 	bl	800e4bc <pbuf_free>
}
 80172ea:	bf00      	nop
 80172ec:	3728      	adds	r7, #40	; 0x28
 80172ee:	46bd      	mov	sp, r7
 80172f0:	bd80      	pop	{r7, pc}
 80172f2:	bf00      	nop
 80172f4:	20013770 	.word	0x20013770
 80172f8:	20016ec0 	.word	0x20016ec0
 80172fc:	20016ec8 	.word	0x20016ec8

08017300 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017300:	b580      	push	{r7, lr}
 8017302:	b088      	sub	sp, #32
 8017304:	af00      	add	r7, sp, #0
 8017306:	60f8      	str	r0, [r7, #12]
 8017308:	60b9      	str	r1, [r7, #8]
 801730a:	603b      	str	r3, [r7, #0]
 801730c:	4613      	mov	r3, r2
 801730e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d108      	bne.n	8017328 <dhcp_create_msg+0x28>
 8017316:	4b5f      	ldr	r3, [pc, #380]	; (8017494 <dhcp_create_msg+0x194>)
 8017318:	f240 7269 	movw	r2, #1897	; 0x769
 801731c:	495e      	ldr	r1, [pc, #376]	; (8017498 <dhcp_create_msg+0x198>)
 801731e:	485f      	ldr	r0, [pc, #380]	; (801749c <dhcp_create_msg+0x19c>)
 8017320:	f002 fe0a 	bl	8019f38 <iprintf>
 8017324:	2300      	movs	r3, #0
 8017326:	e0b1      	b.n	801748c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8017328:	68bb      	ldr	r3, [r7, #8]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d108      	bne.n	8017340 <dhcp_create_msg+0x40>
 801732e:	4b59      	ldr	r3, [pc, #356]	; (8017494 <dhcp_create_msg+0x194>)
 8017330:	f240 726a 	movw	r2, #1898	; 0x76a
 8017334:	495a      	ldr	r1, [pc, #360]	; (80174a0 <dhcp_create_msg+0x1a0>)
 8017336:	4859      	ldr	r0, [pc, #356]	; (801749c <dhcp_create_msg+0x19c>)
 8017338:	f002 fdfe 	bl	8019f38 <iprintf>
 801733c:	2300      	movs	r3, #0
 801733e:	e0a5      	b.n	801748c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017340:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017344:	f44f 719a 	mov.w	r1, #308	; 0x134
 8017348:	2036      	movs	r0, #54	; 0x36
 801734a:	f7f6 fdd7 	bl	800defc <pbuf_alloc>
 801734e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8017350:	69bb      	ldr	r3, [r7, #24]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d101      	bne.n	801735a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8017356:	2300      	movs	r3, #0
 8017358:	e098      	b.n	801748c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801735a:	69bb      	ldr	r3, [r7, #24]
 801735c:	895b      	ldrh	r3, [r3, #10]
 801735e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8017362:	d206      	bcs.n	8017372 <dhcp_create_msg+0x72>
 8017364:	4b4b      	ldr	r3, [pc, #300]	; (8017494 <dhcp_create_msg+0x194>)
 8017366:	f240 7272 	movw	r2, #1906	; 0x772
 801736a:	494e      	ldr	r1, [pc, #312]	; (80174a4 <dhcp_create_msg+0x1a4>)
 801736c:	484b      	ldr	r0, [pc, #300]	; (801749c <dhcp_create_msg+0x19c>)
 801736e:	f002 fde3 	bl	8019f38 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017372:	79fb      	ldrb	r3, [r7, #7]
 8017374:	2b03      	cmp	r3, #3
 8017376:	d103      	bne.n	8017380 <dhcp_create_msg+0x80>
 8017378:	68bb      	ldr	r3, [r7, #8]
 801737a:	795b      	ldrb	r3, [r3, #5]
 801737c:	2b03      	cmp	r3, #3
 801737e:	d10d      	bne.n	801739c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017380:	68bb      	ldr	r3, [r7, #8]
 8017382:	799b      	ldrb	r3, [r3, #6]
 8017384:	2b00      	cmp	r3, #0
 8017386:	d105      	bne.n	8017394 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8017388:	f002 fdee 	bl	8019f68 <rand>
 801738c:	4603      	mov	r3, r0
 801738e:	461a      	mov	r2, r3
 8017390:	4b45      	ldr	r3, [pc, #276]	; (80174a8 <dhcp_create_msg+0x1a8>)
 8017392:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017394:	4b44      	ldr	r3, [pc, #272]	; (80174a8 <dhcp_create_msg+0x1a8>)
 8017396:	681a      	ldr	r2, [r3, #0]
 8017398:	68bb      	ldr	r3, [r7, #8]
 801739a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801739c:	69bb      	ldr	r3, [r7, #24]
 801739e:	685b      	ldr	r3, [r3, #4]
 80173a0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80173a2:	f44f 729a 	mov.w	r2, #308	; 0x134
 80173a6:	2100      	movs	r1, #0
 80173a8:	6978      	ldr	r0, [r7, #20]
 80173aa:	f002 fdbc 	bl	8019f26 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80173ae:	697b      	ldr	r3, [r7, #20]
 80173b0:	2201      	movs	r2, #1
 80173b2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80173b4:	697b      	ldr	r3, [r7, #20]
 80173b6:	2201      	movs	r2, #1
 80173b8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80173c0:	697b      	ldr	r3, [r7, #20]
 80173c2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80173c4:	68bb      	ldr	r3, [r7, #8]
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	4618      	mov	r0, r3
 80173ca:	f7f5 fc6e 	bl	800ccaa <lwip_htonl>
 80173ce:	4602      	mov	r2, r0
 80173d0:	697b      	ldr	r3, [r7, #20]
 80173d2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80173d4:	79fb      	ldrb	r3, [r7, #7]
 80173d6:	2b08      	cmp	r3, #8
 80173d8:	d010      	beq.n	80173fc <dhcp_create_msg+0xfc>
 80173da:	79fb      	ldrb	r3, [r7, #7]
 80173dc:	2b04      	cmp	r3, #4
 80173de:	d00d      	beq.n	80173fc <dhcp_create_msg+0xfc>
 80173e0:	79fb      	ldrb	r3, [r7, #7]
 80173e2:	2b07      	cmp	r3, #7
 80173e4:	d00a      	beq.n	80173fc <dhcp_create_msg+0xfc>
 80173e6:	79fb      	ldrb	r3, [r7, #7]
 80173e8:	2b03      	cmp	r3, #3
 80173ea:	d10c      	bne.n	8017406 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80173ec:	68bb      	ldr	r3, [r7, #8]
 80173ee:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80173f0:	2b05      	cmp	r3, #5
 80173f2:	d003      	beq.n	80173fc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80173f4:	68bb      	ldr	r3, [r7, #8]
 80173f6:	795b      	ldrb	r3, [r3, #5]
 80173f8:	2b04      	cmp	r3, #4
 80173fa:	d104      	bne.n	8017406 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	3304      	adds	r3, #4
 8017400:	681a      	ldr	r2, [r3, #0]
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017406:	2300      	movs	r3, #0
 8017408:	83fb      	strh	r3, [r7, #30]
 801740a:	e00c      	b.n	8017426 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801740c:	8bfa      	ldrh	r2, [r7, #30]
 801740e:	8bfb      	ldrh	r3, [r7, #30]
 8017410:	68f9      	ldr	r1, [r7, #12]
 8017412:	440a      	add	r2, r1
 8017414:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8017418:	697a      	ldr	r2, [r7, #20]
 801741a:	4413      	add	r3, r2
 801741c:	460a      	mov	r2, r1
 801741e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017420:	8bfb      	ldrh	r3, [r7, #30]
 8017422:	3301      	adds	r3, #1
 8017424:	83fb      	strh	r3, [r7, #30]
 8017426:	8bfb      	ldrh	r3, [r7, #30]
 8017428:	2b05      	cmp	r3, #5
 801742a:	d9ef      	bls.n	801740c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801742c:	697b      	ldr	r3, [r7, #20]
 801742e:	2200      	movs	r2, #0
 8017430:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017434:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8017438:	2200      	movs	r2, #0
 801743a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801743e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8017442:	2200      	movs	r2, #0
 8017444:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8017448:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801744c:	2200      	movs	r2, #0
 801744e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8017452:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8017456:	697b      	ldr	r3, [r7, #20]
 8017458:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801745c:	2301      	movs	r3, #1
 801745e:	2235      	movs	r2, #53	; 0x35
 8017460:	2000      	movs	r0, #0
 8017462:	f7ff fadd 	bl	8016a20 <dhcp_option>
 8017466:	4603      	mov	r3, r0
 8017468:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801746a:	697b      	ldr	r3, [r7, #20]
 801746c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8017470:	79fa      	ldrb	r2, [r7, #7]
 8017472:	8a7b      	ldrh	r3, [r7, #18]
 8017474:	4618      	mov	r0, r3
 8017476:	f7ff fb07 	bl	8016a88 <dhcp_option_byte>
 801747a:	4603      	mov	r3, r0
 801747c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801747e:	683b      	ldr	r3, [r7, #0]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d002      	beq.n	801748a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8017484:	683b      	ldr	r3, [r7, #0]
 8017486:	8a7a      	ldrh	r2, [r7, #18]
 8017488:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801748a:	69bb      	ldr	r3, [r7, #24]
}
 801748c:	4618      	mov	r0, r3
 801748e:	3720      	adds	r7, #32
 8017490:	46bd      	mov	sp, r7
 8017492:	bd80      	pop	{r7, pc}
 8017494:	0801e450 	.word	0x0801e450
 8017498:	0801e770 	.word	0x0801e770
 801749c:	0801e4b0 	.word	0x0801e4b0
 80174a0:	0801e790 	.word	0x0801e790
 80174a4:	0801e7b0 	.word	0x0801e7b0
 80174a8:	20010330 	.word	0x20010330

080174ac <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b084      	sub	sp, #16
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	4603      	mov	r3, r0
 80174b4:	60b9      	str	r1, [r7, #8]
 80174b6:	607a      	str	r2, [r7, #4]
 80174b8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80174ba:	89fb      	ldrh	r3, [r7, #14]
 80174bc:	1c5a      	adds	r2, r3, #1
 80174be:	81fa      	strh	r2, [r7, #14]
 80174c0:	461a      	mov	r2, r3
 80174c2:	68bb      	ldr	r3, [r7, #8]
 80174c4:	4413      	add	r3, r2
 80174c6:	22ff      	movs	r2, #255	; 0xff
 80174c8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80174ca:	e007      	b.n	80174dc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80174cc:	89fb      	ldrh	r3, [r7, #14]
 80174ce:	1c5a      	adds	r2, r3, #1
 80174d0:	81fa      	strh	r2, [r7, #14]
 80174d2:	461a      	mov	r2, r3
 80174d4:	68bb      	ldr	r3, [r7, #8]
 80174d6:	4413      	add	r3, r2
 80174d8:	2200      	movs	r2, #0
 80174da:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80174dc:	89fb      	ldrh	r3, [r7, #14]
 80174de:	2b43      	cmp	r3, #67	; 0x43
 80174e0:	d904      	bls.n	80174ec <dhcp_option_trailer+0x40>
 80174e2:	89fb      	ldrh	r3, [r7, #14]
 80174e4:	f003 0303 	and.w	r3, r3, #3
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d002      	beq.n	80174f2 <dhcp_option_trailer+0x46>
 80174ec:	89fb      	ldrh	r3, [r7, #14]
 80174ee:	2b43      	cmp	r3, #67	; 0x43
 80174f0:	d9ec      	bls.n	80174cc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80174f2:	89fb      	ldrh	r3, [r7, #14]
 80174f4:	33f0      	adds	r3, #240	; 0xf0
 80174f6:	b29b      	uxth	r3, r3
 80174f8:	4619      	mov	r1, r3
 80174fa:	6878      	ldr	r0, [r7, #4]
 80174fc:	f7f6 fe58 	bl	800e1b0 <pbuf_realloc>
}
 8017500:	bf00      	nop
 8017502:	3710      	adds	r7, #16
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}

08017508 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8017508:	b480      	push	{r7}
 801750a:	b085      	sub	sp, #20
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d017      	beq.n	8017546 <dhcp_supplied_address+0x3e>
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801751a:	2b00      	cmp	r3, #0
 801751c:	d013      	beq.n	8017546 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017522:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	795b      	ldrb	r3, [r3, #5]
 8017528:	2b0a      	cmp	r3, #10
 801752a:	d007      	beq.n	801753c <dhcp_supplied_address+0x34>
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	795b      	ldrb	r3, [r3, #5]
 8017530:	2b05      	cmp	r3, #5
 8017532:	d003      	beq.n	801753c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017538:	2b04      	cmp	r3, #4
 801753a:	d101      	bne.n	8017540 <dhcp_supplied_address+0x38>
 801753c:	2301      	movs	r3, #1
 801753e:	e000      	b.n	8017542 <dhcp_supplied_address+0x3a>
 8017540:	2300      	movs	r3, #0
 8017542:	b2db      	uxtb	r3, r3
 8017544:	e000      	b.n	8017548 <dhcp_supplied_address+0x40>
  }
  return 0;
 8017546:	2300      	movs	r3, #0
}
 8017548:	4618      	mov	r0, r3
 801754a:	3714      	adds	r7, #20
 801754c:	46bd      	mov	sp, r7
 801754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017552:	4770      	bx	lr

08017554 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b082      	sub	sp, #8
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801755c:	4915      	ldr	r1, [pc, #84]	; (80175b4 <etharp_free_entry+0x60>)
 801755e:	687a      	ldr	r2, [r7, #4]
 8017560:	4613      	mov	r3, r2
 8017562:	005b      	lsls	r3, r3, #1
 8017564:	4413      	add	r3, r2
 8017566:	00db      	lsls	r3, r3, #3
 8017568:	440b      	add	r3, r1
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d013      	beq.n	8017598 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017570:	4910      	ldr	r1, [pc, #64]	; (80175b4 <etharp_free_entry+0x60>)
 8017572:	687a      	ldr	r2, [r7, #4]
 8017574:	4613      	mov	r3, r2
 8017576:	005b      	lsls	r3, r3, #1
 8017578:	4413      	add	r3, r2
 801757a:	00db      	lsls	r3, r3, #3
 801757c:	440b      	add	r3, r1
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	4618      	mov	r0, r3
 8017582:	f7f6 ff9b 	bl	800e4bc <pbuf_free>
    arp_table[i].q = NULL;
 8017586:	490b      	ldr	r1, [pc, #44]	; (80175b4 <etharp_free_entry+0x60>)
 8017588:	687a      	ldr	r2, [r7, #4]
 801758a:	4613      	mov	r3, r2
 801758c:	005b      	lsls	r3, r3, #1
 801758e:	4413      	add	r3, r2
 8017590:	00db      	lsls	r3, r3, #3
 8017592:	440b      	add	r3, r1
 8017594:	2200      	movs	r2, #0
 8017596:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017598:	4906      	ldr	r1, [pc, #24]	; (80175b4 <etharp_free_entry+0x60>)
 801759a:	687a      	ldr	r2, [r7, #4]
 801759c:	4613      	mov	r3, r2
 801759e:	005b      	lsls	r3, r3, #1
 80175a0:	4413      	add	r3, r2
 80175a2:	00db      	lsls	r3, r3, #3
 80175a4:	440b      	add	r3, r1
 80175a6:	3314      	adds	r3, #20
 80175a8:	2200      	movs	r2, #0
 80175aa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80175ac:	bf00      	nop
 80175ae:	3708      	adds	r7, #8
 80175b0:	46bd      	mov	sp, r7
 80175b2:	bd80      	pop	{r7, pc}
 80175b4:	20010334 	.word	0x20010334

080175b8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b082      	sub	sp, #8
 80175bc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80175be:	2300      	movs	r3, #0
 80175c0:	607b      	str	r3, [r7, #4]
 80175c2:	e096      	b.n	80176f2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80175c4:	494f      	ldr	r1, [pc, #316]	; (8017704 <etharp_tmr+0x14c>)
 80175c6:	687a      	ldr	r2, [r7, #4]
 80175c8:	4613      	mov	r3, r2
 80175ca:	005b      	lsls	r3, r3, #1
 80175cc:	4413      	add	r3, r2
 80175ce:	00db      	lsls	r3, r3, #3
 80175d0:	440b      	add	r3, r1
 80175d2:	3314      	adds	r3, #20
 80175d4:	781b      	ldrb	r3, [r3, #0]
 80175d6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80175d8:	78fb      	ldrb	r3, [r7, #3]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	f000 8086 	beq.w	80176ec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80175e0:	4948      	ldr	r1, [pc, #288]	; (8017704 <etharp_tmr+0x14c>)
 80175e2:	687a      	ldr	r2, [r7, #4]
 80175e4:	4613      	mov	r3, r2
 80175e6:	005b      	lsls	r3, r3, #1
 80175e8:	4413      	add	r3, r2
 80175ea:	00db      	lsls	r3, r3, #3
 80175ec:	440b      	add	r3, r1
 80175ee:	3312      	adds	r3, #18
 80175f0:	881b      	ldrh	r3, [r3, #0]
 80175f2:	3301      	adds	r3, #1
 80175f4:	b298      	uxth	r0, r3
 80175f6:	4943      	ldr	r1, [pc, #268]	; (8017704 <etharp_tmr+0x14c>)
 80175f8:	687a      	ldr	r2, [r7, #4]
 80175fa:	4613      	mov	r3, r2
 80175fc:	005b      	lsls	r3, r3, #1
 80175fe:	4413      	add	r3, r2
 8017600:	00db      	lsls	r3, r3, #3
 8017602:	440b      	add	r3, r1
 8017604:	3312      	adds	r3, #18
 8017606:	4602      	mov	r2, r0
 8017608:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801760a:	493e      	ldr	r1, [pc, #248]	; (8017704 <etharp_tmr+0x14c>)
 801760c:	687a      	ldr	r2, [r7, #4]
 801760e:	4613      	mov	r3, r2
 8017610:	005b      	lsls	r3, r3, #1
 8017612:	4413      	add	r3, r2
 8017614:	00db      	lsls	r3, r3, #3
 8017616:	440b      	add	r3, r1
 8017618:	3312      	adds	r3, #18
 801761a:	881b      	ldrh	r3, [r3, #0]
 801761c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017620:	d215      	bcs.n	801764e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017622:	4938      	ldr	r1, [pc, #224]	; (8017704 <etharp_tmr+0x14c>)
 8017624:	687a      	ldr	r2, [r7, #4]
 8017626:	4613      	mov	r3, r2
 8017628:	005b      	lsls	r3, r3, #1
 801762a:	4413      	add	r3, r2
 801762c:	00db      	lsls	r3, r3, #3
 801762e:	440b      	add	r3, r1
 8017630:	3314      	adds	r3, #20
 8017632:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017634:	2b01      	cmp	r3, #1
 8017636:	d10e      	bne.n	8017656 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017638:	4932      	ldr	r1, [pc, #200]	; (8017704 <etharp_tmr+0x14c>)
 801763a:	687a      	ldr	r2, [r7, #4]
 801763c:	4613      	mov	r3, r2
 801763e:	005b      	lsls	r3, r3, #1
 8017640:	4413      	add	r3, r2
 8017642:	00db      	lsls	r3, r3, #3
 8017644:	440b      	add	r3, r1
 8017646:	3312      	adds	r3, #18
 8017648:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801764a:	2b04      	cmp	r3, #4
 801764c:	d903      	bls.n	8017656 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801764e:	6878      	ldr	r0, [r7, #4]
 8017650:	f7ff ff80 	bl	8017554 <etharp_free_entry>
 8017654:	e04a      	b.n	80176ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017656:	492b      	ldr	r1, [pc, #172]	; (8017704 <etharp_tmr+0x14c>)
 8017658:	687a      	ldr	r2, [r7, #4]
 801765a:	4613      	mov	r3, r2
 801765c:	005b      	lsls	r3, r3, #1
 801765e:	4413      	add	r3, r2
 8017660:	00db      	lsls	r3, r3, #3
 8017662:	440b      	add	r3, r1
 8017664:	3314      	adds	r3, #20
 8017666:	781b      	ldrb	r3, [r3, #0]
 8017668:	2b03      	cmp	r3, #3
 801766a:	d10a      	bne.n	8017682 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801766c:	4925      	ldr	r1, [pc, #148]	; (8017704 <etharp_tmr+0x14c>)
 801766e:	687a      	ldr	r2, [r7, #4]
 8017670:	4613      	mov	r3, r2
 8017672:	005b      	lsls	r3, r3, #1
 8017674:	4413      	add	r3, r2
 8017676:	00db      	lsls	r3, r3, #3
 8017678:	440b      	add	r3, r1
 801767a:	3314      	adds	r3, #20
 801767c:	2204      	movs	r2, #4
 801767e:	701a      	strb	r2, [r3, #0]
 8017680:	e034      	b.n	80176ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017682:	4920      	ldr	r1, [pc, #128]	; (8017704 <etharp_tmr+0x14c>)
 8017684:	687a      	ldr	r2, [r7, #4]
 8017686:	4613      	mov	r3, r2
 8017688:	005b      	lsls	r3, r3, #1
 801768a:	4413      	add	r3, r2
 801768c:	00db      	lsls	r3, r3, #3
 801768e:	440b      	add	r3, r1
 8017690:	3314      	adds	r3, #20
 8017692:	781b      	ldrb	r3, [r3, #0]
 8017694:	2b04      	cmp	r3, #4
 8017696:	d10a      	bne.n	80176ae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017698:	491a      	ldr	r1, [pc, #104]	; (8017704 <etharp_tmr+0x14c>)
 801769a:	687a      	ldr	r2, [r7, #4]
 801769c:	4613      	mov	r3, r2
 801769e:	005b      	lsls	r3, r3, #1
 80176a0:	4413      	add	r3, r2
 80176a2:	00db      	lsls	r3, r3, #3
 80176a4:	440b      	add	r3, r1
 80176a6:	3314      	adds	r3, #20
 80176a8:	2202      	movs	r2, #2
 80176aa:	701a      	strb	r2, [r3, #0]
 80176ac:	e01e      	b.n	80176ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80176ae:	4915      	ldr	r1, [pc, #84]	; (8017704 <etharp_tmr+0x14c>)
 80176b0:	687a      	ldr	r2, [r7, #4]
 80176b2:	4613      	mov	r3, r2
 80176b4:	005b      	lsls	r3, r3, #1
 80176b6:	4413      	add	r3, r2
 80176b8:	00db      	lsls	r3, r3, #3
 80176ba:	440b      	add	r3, r1
 80176bc:	3314      	adds	r3, #20
 80176be:	781b      	ldrb	r3, [r3, #0]
 80176c0:	2b01      	cmp	r3, #1
 80176c2:	d113      	bne.n	80176ec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80176c4:	490f      	ldr	r1, [pc, #60]	; (8017704 <etharp_tmr+0x14c>)
 80176c6:	687a      	ldr	r2, [r7, #4]
 80176c8:	4613      	mov	r3, r2
 80176ca:	005b      	lsls	r3, r3, #1
 80176cc:	4413      	add	r3, r2
 80176ce:	00db      	lsls	r3, r3, #3
 80176d0:	440b      	add	r3, r1
 80176d2:	3308      	adds	r3, #8
 80176d4:	6818      	ldr	r0, [r3, #0]
 80176d6:	687a      	ldr	r2, [r7, #4]
 80176d8:	4613      	mov	r3, r2
 80176da:	005b      	lsls	r3, r3, #1
 80176dc:	4413      	add	r3, r2
 80176de:	00db      	lsls	r3, r3, #3
 80176e0:	4a08      	ldr	r2, [pc, #32]	; (8017704 <etharp_tmr+0x14c>)
 80176e2:	4413      	add	r3, r2
 80176e4:	3304      	adds	r3, #4
 80176e6:	4619      	mov	r1, r3
 80176e8:	f000 fe72 	bl	80183d0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	3301      	adds	r3, #1
 80176f0:	607b      	str	r3, [r7, #4]
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	2b09      	cmp	r3, #9
 80176f6:	f77f af65 	ble.w	80175c4 <etharp_tmr+0xc>
      }
    }
  }
}
 80176fa:	bf00      	nop
 80176fc:	3708      	adds	r7, #8
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}
 8017702:	bf00      	nop
 8017704:	20010334 	.word	0x20010334

08017708 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017708:	b580      	push	{r7, lr}
 801770a:	b08a      	sub	sp, #40	; 0x28
 801770c:	af00      	add	r7, sp, #0
 801770e:	60f8      	str	r0, [r7, #12]
 8017710:	460b      	mov	r3, r1
 8017712:	607a      	str	r2, [r7, #4]
 8017714:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017716:	230a      	movs	r3, #10
 8017718:	84fb      	strh	r3, [r7, #38]	; 0x26
 801771a:	230a      	movs	r3, #10
 801771c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801771e:	230a      	movs	r3, #10
 8017720:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8017722:	2300      	movs	r3, #0
 8017724:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8017726:	230a      	movs	r3, #10
 8017728:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801772a:	2300      	movs	r3, #0
 801772c:	83bb      	strh	r3, [r7, #28]
 801772e:	2300      	movs	r3, #0
 8017730:	837b      	strh	r3, [r7, #26]
 8017732:	2300      	movs	r3, #0
 8017734:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017736:	2300      	movs	r3, #0
 8017738:	843b      	strh	r3, [r7, #32]
 801773a:	e0ae      	b.n	801789a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801773c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017740:	49a6      	ldr	r1, [pc, #664]	; (80179dc <etharp_find_entry+0x2d4>)
 8017742:	4613      	mov	r3, r2
 8017744:	005b      	lsls	r3, r3, #1
 8017746:	4413      	add	r3, r2
 8017748:	00db      	lsls	r3, r3, #3
 801774a:	440b      	add	r3, r1
 801774c:	3314      	adds	r3, #20
 801774e:	781b      	ldrb	r3, [r3, #0]
 8017750:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017752:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017756:	2b0a      	cmp	r3, #10
 8017758:	d105      	bne.n	8017766 <etharp_find_entry+0x5e>
 801775a:	7dfb      	ldrb	r3, [r7, #23]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d102      	bne.n	8017766 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017760:	8c3b      	ldrh	r3, [r7, #32]
 8017762:	847b      	strh	r3, [r7, #34]	; 0x22
 8017764:	e095      	b.n	8017892 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017766:	7dfb      	ldrb	r3, [r7, #23]
 8017768:	2b00      	cmp	r3, #0
 801776a:	f000 8092 	beq.w	8017892 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801776e:	7dfb      	ldrb	r3, [r7, #23]
 8017770:	2b01      	cmp	r3, #1
 8017772:	d009      	beq.n	8017788 <etharp_find_entry+0x80>
 8017774:	7dfb      	ldrb	r3, [r7, #23]
 8017776:	2b01      	cmp	r3, #1
 8017778:	d806      	bhi.n	8017788 <etharp_find_entry+0x80>
 801777a:	4b99      	ldr	r3, [pc, #612]	; (80179e0 <etharp_find_entry+0x2d8>)
 801777c:	f44f 7292 	mov.w	r2, #292	; 0x124
 8017780:	4998      	ldr	r1, [pc, #608]	; (80179e4 <etharp_find_entry+0x2dc>)
 8017782:	4899      	ldr	r0, [pc, #612]	; (80179e8 <etharp_find_entry+0x2e0>)
 8017784:	f002 fbd8 	bl	8019f38 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017788:	68fb      	ldr	r3, [r7, #12]
 801778a:	2b00      	cmp	r3, #0
 801778c:	d020      	beq.n	80177d0 <etharp_find_entry+0xc8>
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	6819      	ldr	r1, [r3, #0]
 8017792:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017796:	4891      	ldr	r0, [pc, #580]	; (80179dc <etharp_find_entry+0x2d4>)
 8017798:	4613      	mov	r3, r2
 801779a:	005b      	lsls	r3, r3, #1
 801779c:	4413      	add	r3, r2
 801779e:	00db      	lsls	r3, r3, #3
 80177a0:	4403      	add	r3, r0
 80177a2:	3304      	adds	r3, #4
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	4299      	cmp	r1, r3
 80177a8:	d112      	bne.n	80177d0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d00c      	beq.n	80177ca <etharp_find_entry+0xc2>
 80177b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80177b4:	4989      	ldr	r1, [pc, #548]	; (80179dc <etharp_find_entry+0x2d4>)
 80177b6:	4613      	mov	r3, r2
 80177b8:	005b      	lsls	r3, r3, #1
 80177ba:	4413      	add	r3, r2
 80177bc:	00db      	lsls	r3, r3, #3
 80177be:	440b      	add	r3, r1
 80177c0:	3308      	adds	r3, #8
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	687a      	ldr	r2, [r7, #4]
 80177c6:	429a      	cmp	r2, r3
 80177c8:	d102      	bne.n	80177d0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80177ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80177ce:	e100      	b.n	80179d2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80177d0:	7dfb      	ldrb	r3, [r7, #23]
 80177d2:	2b01      	cmp	r3, #1
 80177d4:	d140      	bne.n	8017858 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80177d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80177da:	4980      	ldr	r1, [pc, #512]	; (80179dc <etharp_find_entry+0x2d4>)
 80177dc:	4613      	mov	r3, r2
 80177de:	005b      	lsls	r3, r3, #1
 80177e0:	4413      	add	r3, r2
 80177e2:	00db      	lsls	r3, r3, #3
 80177e4:	440b      	add	r3, r1
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d01a      	beq.n	8017822 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80177ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80177f0:	497a      	ldr	r1, [pc, #488]	; (80179dc <etharp_find_entry+0x2d4>)
 80177f2:	4613      	mov	r3, r2
 80177f4:	005b      	lsls	r3, r3, #1
 80177f6:	4413      	add	r3, r2
 80177f8:	00db      	lsls	r3, r3, #3
 80177fa:	440b      	add	r3, r1
 80177fc:	3312      	adds	r3, #18
 80177fe:	881b      	ldrh	r3, [r3, #0]
 8017800:	8bba      	ldrh	r2, [r7, #28]
 8017802:	429a      	cmp	r2, r3
 8017804:	d845      	bhi.n	8017892 <etharp_find_entry+0x18a>
            old_queue = i;
 8017806:	8c3b      	ldrh	r3, [r7, #32]
 8017808:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801780a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801780e:	4973      	ldr	r1, [pc, #460]	; (80179dc <etharp_find_entry+0x2d4>)
 8017810:	4613      	mov	r3, r2
 8017812:	005b      	lsls	r3, r3, #1
 8017814:	4413      	add	r3, r2
 8017816:	00db      	lsls	r3, r3, #3
 8017818:	440b      	add	r3, r1
 801781a:	3312      	adds	r3, #18
 801781c:	881b      	ldrh	r3, [r3, #0]
 801781e:	83bb      	strh	r3, [r7, #28]
 8017820:	e037      	b.n	8017892 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017822:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017826:	496d      	ldr	r1, [pc, #436]	; (80179dc <etharp_find_entry+0x2d4>)
 8017828:	4613      	mov	r3, r2
 801782a:	005b      	lsls	r3, r3, #1
 801782c:	4413      	add	r3, r2
 801782e:	00db      	lsls	r3, r3, #3
 8017830:	440b      	add	r3, r1
 8017832:	3312      	adds	r3, #18
 8017834:	881b      	ldrh	r3, [r3, #0]
 8017836:	8b7a      	ldrh	r2, [r7, #26]
 8017838:	429a      	cmp	r2, r3
 801783a:	d82a      	bhi.n	8017892 <etharp_find_entry+0x18a>
            old_pending = i;
 801783c:	8c3b      	ldrh	r3, [r7, #32]
 801783e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017840:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017844:	4965      	ldr	r1, [pc, #404]	; (80179dc <etharp_find_entry+0x2d4>)
 8017846:	4613      	mov	r3, r2
 8017848:	005b      	lsls	r3, r3, #1
 801784a:	4413      	add	r3, r2
 801784c:	00db      	lsls	r3, r3, #3
 801784e:	440b      	add	r3, r1
 8017850:	3312      	adds	r3, #18
 8017852:	881b      	ldrh	r3, [r3, #0]
 8017854:	837b      	strh	r3, [r7, #26]
 8017856:	e01c      	b.n	8017892 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017858:	7dfb      	ldrb	r3, [r7, #23]
 801785a:	2b01      	cmp	r3, #1
 801785c:	d919      	bls.n	8017892 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801785e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017862:	495e      	ldr	r1, [pc, #376]	; (80179dc <etharp_find_entry+0x2d4>)
 8017864:	4613      	mov	r3, r2
 8017866:	005b      	lsls	r3, r3, #1
 8017868:	4413      	add	r3, r2
 801786a:	00db      	lsls	r3, r3, #3
 801786c:	440b      	add	r3, r1
 801786e:	3312      	adds	r3, #18
 8017870:	881b      	ldrh	r3, [r3, #0]
 8017872:	8b3a      	ldrh	r2, [r7, #24]
 8017874:	429a      	cmp	r2, r3
 8017876:	d80c      	bhi.n	8017892 <etharp_find_entry+0x18a>
            old_stable = i;
 8017878:	8c3b      	ldrh	r3, [r7, #32]
 801787a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801787c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017880:	4956      	ldr	r1, [pc, #344]	; (80179dc <etharp_find_entry+0x2d4>)
 8017882:	4613      	mov	r3, r2
 8017884:	005b      	lsls	r3, r3, #1
 8017886:	4413      	add	r3, r2
 8017888:	00db      	lsls	r3, r3, #3
 801788a:	440b      	add	r3, r1
 801788c:	3312      	adds	r3, #18
 801788e:	881b      	ldrh	r3, [r3, #0]
 8017890:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017892:	8c3b      	ldrh	r3, [r7, #32]
 8017894:	3301      	adds	r3, #1
 8017896:	b29b      	uxth	r3, r3
 8017898:	843b      	strh	r3, [r7, #32]
 801789a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801789e:	2b09      	cmp	r3, #9
 80178a0:	f77f af4c 	ble.w	801773c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80178a4:	7afb      	ldrb	r3, [r7, #11]
 80178a6:	f003 0302 	and.w	r3, r3, #2
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d108      	bne.n	80178c0 <etharp_find_entry+0x1b8>
 80178ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80178b2:	2b0a      	cmp	r3, #10
 80178b4:	d107      	bne.n	80178c6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80178b6:	7afb      	ldrb	r3, [r7, #11]
 80178b8:	f003 0301 	and.w	r3, r3, #1
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d102      	bne.n	80178c6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80178c0:	f04f 33ff 	mov.w	r3, #4294967295
 80178c4:	e085      	b.n	80179d2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80178c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80178ca:	2b09      	cmp	r3, #9
 80178cc:	dc02      	bgt.n	80178d4 <etharp_find_entry+0x1cc>
    i = empty;
 80178ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80178d0:	843b      	strh	r3, [r7, #32]
 80178d2:	e039      	b.n	8017948 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80178d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80178d8:	2b09      	cmp	r3, #9
 80178da:	dc14      	bgt.n	8017906 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80178dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80178de:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80178e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80178e4:	493d      	ldr	r1, [pc, #244]	; (80179dc <etharp_find_entry+0x2d4>)
 80178e6:	4613      	mov	r3, r2
 80178e8:	005b      	lsls	r3, r3, #1
 80178ea:	4413      	add	r3, r2
 80178ec:	00db      	lsls	r3, r3, #3
 80178ee:	440b      	add	r3, r1
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d018      	beq.n	8017928 <etharp_find_entry+0x220>
 80178f6:	4b3a      	ldr	r3, [pc, #232]	; (80179e0 <etharp_find_entry+0x2d8>)
 80178f8:	f240 126d 	movw	r2, #365	; 0x16d
 80178fc:	493b      	ldr	r1, [pc, #236]	; (80179ec <etharp_find_entry+0x2e4>)
 80178fe:	483a      	ldr	r0, [pc, #232]	; (80179e8 <etharp_find_entry+0x2e0>)
 8017900:	f002 fb1a 	bl	8019f38 <iprintf>
 8017904:	e010      	b.n	8017928 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017906:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801790a:	2b09      	cmp	r3, #9
 801790c:	dc02      	bgt.n	8017914 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801790e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017910:	843b      	strh	r3, [r7, #32]
 8017912:	e009      	b.n	8017928 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017914:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017918:	2b09      	cmp	r3, #9
 801791a:	dc02      	bgt.n	8017922 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801791c:	8bfb      	ldrh	r3, [r7, #30]
 801791e:	843b      	strh	r3, [r7, #32]
 8017920:	e002      	b.n	8017928 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017922:	f04f 33ff 	mov.w	r3, #4294967295
 8017926:	e054      	b.n	80179d2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017928:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801792c:	2b09      	cmp	r3, #9
 801792e:	dd06      	ble.n	801793e <etharp_find_entry+0x236>
 8017930:	4b2b      	ldr	r3, [pc, #172]	; (80179e0 <etharp_find_entry+0x2d8>)
 8017932:	f240 127f 	movw	r2, #383	; 0x17f
 8017936:	492e      	ldr	r1, [pc, #184]	; (80179f0 <etharp_find_entry+0x2e8>)
 8017938:	482b      	ldr	r0, [pc, #172]	; (80179e8 <etharp_find_entry+0x2e0>)
 801793a:	f002 fafd 	bl	8019f38 <iprintf>
    etharp_free_entry(i);
 801793e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017942:	4618      	mov	r0, r3
 8017944:	f7ff fe06 	bl	8017554 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017948:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801794c:	2b09      	cmp	r3, #9
 801794e:	dd06      	ble.n	801795e <etharp_find_entry+0x256>
 8017950:	4b23      	ldr	r3, [pc, #140]	; (80179e0 <etharp_find_entry+0x2d8>)
 8017952:	f240 1283 	movw	r2, #387	; 0x183
 8017956:	4926      	ldr	r1, [pc, #152]	; (80179f0 <etharp_find_entry+0x2e8>)
 8017958:	4823      	ldr	r0, [pc, #140]	; (80179e8 <etharp_find_entry+0x2e0>)
 801795a:	f002 faed 	bl	8019f38 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801795e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017962:	491e      	ldr	r1, [pc, #120]	; (80179dc <etharp_find_entry+0x2d4>)
 8017964:	4613      	mov	r3, r2
 8017966:	005b      	lsls	r3, r3, #1
 8017968:	4413      	add	r3, r2
 801796a:	00db      	lsls	r3, r3, #3
 801796c:	440b      	add	r3, r1
 801796e:	3314      	adds	r3, #20
 8017970:	781b      	ldrb	r3, [r3, #0]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d006      	beq.n	8017984 <etharp_find_entry+0x27c>
 8017976:	4b1a      	ldr	r3, [pc, #104]	; (80179e0 <etharp_find_entry+0x2d8>)
 8017978:	f240 1285 	movw	r2, #389	; 0x185
 801797c:	491d      	ldr	r1, [pc, #116]	; (80179f4 <etharp_find_entry+0x2ec>)
 801797e:	481a      	ldr	r0, [pc, #104]	; (80179e8 <etharp_find_entry+0x2e0>)
 8017980:	f002 fada 	bl	8019f38 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	2b00      	cmp	r3, #0
 8017988:	d00b      	beq.n	80179a2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801798a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801798e:	68fb      	ldr	r3, [r7, #12]
 8017990:	6819      	ldr	r1, [r3, #0]
 8017992:	4812      	ldr	r0, [pc, #72]	; (80179dc <etharp_find_entry+0x2d4>)
 8017994:	4613      	mov	r3, r2
 8017996:	005b      	lsls	r3, r3, #1
 8017998:	4413      	add	r3, r2
 801799a:	00db      	lsls	r3, r3, #3
 801799c:	4403      	add	r3, r0
 801799e:	3304      	adds	r3, #4
 80179a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80179a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179a6:	490d      	ldr	r1, [pc, #52]	; (80179dc <etharp_find_entry+0x2d4>)
 80179a8:	4613      	mov	r3, r2
 80179aa:	005b      	lsls	r3, r3, #1
 80179ac:	4413      	add	r3, r2
 80179ae:	00db      	lsls	r3, r3, #3
 80179b0:	440b      	add	r3, r1
 80179b2:	3312      	adds	r3, #18
 80179b4:	2200      	movs	r2, #0
 80179b6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80179b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80179bc:	4907      	ldr	r1, [pc, #28]	; (80179dc <etharp_find_entry+0x2d4>)
 80179be:	4613      	mov	r3, r2
 80179c0:	005b      	lsls	r3, r3, #1
 80179c2:	4413      	add	r3, r2
 80179c4:	00db      	lsls	r3, r3, #3
 80179c6:	440b      	add	r3, r1
 80179c8:	3308      	adds	r3, #8
 80179ca:	687a      	ldr	r2, [r7, #4]
 80179cc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80179ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80179d2:	4618      	mov	r0, r3
 80179d4:	3728      	adds	r7, #40	; 0x28
 80179d6:	46bd      	mov	sp, r7
 80179d8:	bd80      	pop	{r7, pc}
 80179da:	bf00      	nop
 80179dc:	20010334 	.word	0x20010334
 80179e0:	0801e7f0 	.word	0x0801e7f0
 80179e4:	0801e828 	.word	0x0801e828
 80179e8:	0801e868 	.word	0x0801e868
 80179ec:	0801e890 	.word	0x0801e890
 80179f0:	0801e8a8 	.word	0x0801e8a8
 80179f4:	0801e8bc 	.word	0x0801e8bc

080179f8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b088      	sub	sp, #32
 80179fc:	af02      	add	r7, sp, #8
 80179fe:	60f8      	str	r0, [r7, #12]
 8017a00:	60b9      	str	r1, [r7, #8]
 8017a02:	607a      	str	r2, [r7, #4]
 8017a04:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017a06:	68fb      	ldr	r3, [r7, #12]
 8017a08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017a0c:	2b06      	cmp	r3, #6
 8017a0e:	d006      	beq.n	8017a1e <etharp_update_arp_entry+0x26>
 8017a10:	4b48      	ldr	r3, [pc, #288]	; (8017b34 <etharp_update_arp_entry+0x13c>)
 8017a12:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017a16:	4948      	ldr	r1, [pc, #288]	; (8017b38 <etharp_update_arp_entry+0x140>)
 8017a18:	4848      	ldr	r0, [pc, #288]	; (8017b3c <etharp_update_arp_entry+0x144>)
 8017a1a:	f002 fa8d 	bl	8019f38 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017a1e:	68bb      	ldr	r3, [r7, #8]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d012      	beq.n	8017a4a <etharp_update_arp_entry+0x52>
 8017a24:	68bb      	ldr	r3, [r7, #8]
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d00e      	beq.n	8017a4a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017a2c:	68bb      	ldr	r3, [r7, #8]
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	68f9      	ldr	r1, [r7, #12]
 8017a32:	4618      	mov	r0, r3
 8017a34:	f001 f91e 	bl	8018c74 <ip4_addr_isbroadcast_u32>
 8017a38:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d105      	bne.n	8017a4a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017a3e:	68bb      	ldr	r3, [r7, #8]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017a46:	2be0      	cmp	r3, #224	; 0xe0
 8017a48:	d102      	bne.n	8017a50 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017a4a:	f06f 030f 	mvn.w	r3, #15
 8017a4e:	e06c      	b.n	8017b2a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017a50:	78fb      	ldrb	r3, [r7, #3]
 8017a52:	68fa      	ldr	r2, [r7, #12]
 8017a54:	4619      	mov	r1, r3
 8017a56:	68b8      	ldr	r0, [r7, #8]
 8017a58:	f7ff fe56 	bl	8017708 <etharp_find_entry>
 8017a5c:	4603      	mov	r3, r0
 8017a5e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017a60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	da02      	bge.n	8017a6e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017a68:	8afb      	ldrh	r3, [r7, #22]
 8017a6a:	b25b      	sxtb	r3, r3
 8017a6c:	e05d      	b.n	8017b2a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017a6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a72:	4933      	ldr	r1, [pc, #204]	; (8017b40 <etharp_update_arp_entry+0x148>)
 8017a74:	4613      	mov	r3, r2
 8017a76:	005b      	lsls	r3, r3, #1
 8017a78:	4413      	add	r3, r2
 8017a7a:	00db      	lsls	r3, r3, #3
 8017a7c:	440b      	add	r3, r1
 8017a7e:	3314      	adds	r3, #20
 8017a80:	2202      	movs	r2, #2
 8017a82:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017a84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a88:	492d      	ldr	r1, [pc, #180]	; (8017b40 <etharp_update_arp_entry+0x148>)
 8017a8a:	4613      	mov	r3, r2
 8017a8c:	005b      	lsls	r3, r3, #1
 8017a8e:	4413      	add	r3, r2
 8017a90:	00db      	lsls	r3, r3, #3
 8017a92:	440b      	add	r3, r1
 8017a94:	3308      	adds	r3, #8
 8017a96:	68fa      	ldr	r2, [r7, #12]
 8017a98:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017a9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017a9e:	4613      	mov	r3, r2
 8017aa0:	005b      	lsls	r3, r3, #1
 8017aa2:	4413      	add	r3, r2
 8017aa4:	00db      	lsls	r3, r3, #3
 8017aa6:	3308      	adds	r3, #8
 8017aa8:	4a25      	ldr	r2, [pc, #148]	; (8017b40 <etharp_update_arp_entry+0x148>)
 8017aaa:	4413      	add	r3, r2
 8017aac:	3304      	adds	r3, #4
 8017aae:	2206      	movs	r2, #6
 8017ab0:	6879      	ldr	r1, [r7, #4]
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f002 fa13 	bl	8019ede <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017ab8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017abc:	4920      	ldr	r1, [pc, #128]	; (8017b40 <etharp_update_arp_entry+0x148>)
 8017abe:	4613      	mov	r3, r2
 8017ac0:	005b      	lsls	r3, r3, #1
 8017ac2:	4413      	add	r3, r2
 8017ac4:	00db      	lsls	r3, r3, #3
 8017ac6:	440b      	add	r3, r1
 8017ac8:	3312      	adds	r3, #18
 8017aca:	2200      	movs	r2, #0
 8017acc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017ace:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ad2:	491b      	ldr	r1, [pc, #108]	; (8017b40 <etharp_update_arp_entry+0x148>)
 8017ad4:	4613      	mov	r3, r2
 8017ad6:	005b      	lsls	r3, r3, #1
 8017ad8:	4413      	add	r3, r2
 8017ada:	00db      	lsls	r3, r3, #3
 8017adc:	440b      	add	r3, r1
 8017ade:	681b      	ldr	r3, [r3, #0]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d021      	beq.n	8017b28 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017ae4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ae8:	4915      	ldr	r1, [pc, #84]	; (8017b40 <etharp_update_arp_entry+0x148>)
 8017aea:	4613      	mov	r3, r2
 8017aec:	005b      	lsls	r3, r3, #1
 8017aee:	4413      	add	r3, r2
 8017af0:	00db      	lsls	r3, r3, #3
 8017af2:	440b      	add	r3, r1
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017af8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017afc:	4910      	ldr	r1, [pc, #64]	; (8017b40 <etharp_update_arp_entry+0x148>)
 8017afe:	4613      	mov	r3, r2
 8017b00:	005b      	lsls	r3, r3, #1
 8017b02:	4413      	add	r3, r2
 8017b04:	00db      	lsls	r3, r3, #3
 8017b06:	440b      	add	r3, r1
 8017b08:	2200      	movs	r2, #0
 8017b0a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017b12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017b16:	9300      	str	r3, [sp, #0]
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	6939      	ldr	r1, [r7, #16]
 8017b1c:	68f8      	ldr	r0, [r7, #12]
 8017b1e:	f001 ffad 	bl	8019a7c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017b22:	6938      	ldr	r0, [r7, #16]
 8017b24:	f7f6 fcca 	bl	800e4bc <pbuf_free>
  }
  return ERR_OK;
 8017b28:	2300      	movs	r3, #0
}
 8017b2a:	4618      	mov	r0, r3
 8017b2c:	3718      	adds	r7, #24
 8017b2e:	46bd      	mov	sp, r7
 8017b30:	bd80      	pop	{r7, pc}
 8017b32:	bf00      	nop
 8017b34:	0801e7f0 	.word	0x0801e7f0
 8017b38:	0801e8e8 	.word	0x0801e8e8
 8017b3c:	0801e868 	.word	0x0801e868
 8017b40:	20010334 	.word	0x20010334

08017b44 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	b084      	sub	sp, #16
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	60fb      	str	r3, [r7, #12]
 8017b50:	e01e      	b.n	8017b90 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017b52:	4913      	ldr	r1, [pc, #76]	; (8017ba0 <etharp_cleanup_netif+0x5c>)
 8017b54:	68fa      	ldr	r2, [r7, #12]
 8017b56:	4613      	mov	r3, r2
 8017b58:	005b      	lsls	r3, r3, #1
 8017b5a:	4413      	add	r3, r2
 8017b5c:	00db      	lsls	r3, r3, #3
 8017b5e:	440b      	add	r3, r1
 8017b60:	3314      	adds	r3, #20
 8017b62:	781b      	ldrb	r3, [r3, #0]
 8017b64:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017b66:	7afb      	ldrb	r3, [r7, #11]
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d00e      	beq.n	8017b8a <etharp_cleanup_netif+0x46>
 8017b6c:	490c      	ldr	r1, [pc, #48]	; (8017ba0 <etharp_cleanup_netif+0x5c>)
 8017b6e:	68fa      	ldr	r2, [r7, #12]
 8017b70:	4613      	mov	r3, r2
 8017b72:	005b      	lsls	r3, r3, #1
 8017b74:	4413      	add	r3, r2
 8017b76:	00db      	lsls	r3, r3, #3
 8017b78:	440b      	add	r3, r1
 8017b7a:	3308      	adds	r3, #8
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	687a      	ldr	r2, [r7, #4]
 8017b80:	429a      	cmp	r2, r3
 8017b82:	d102      	bne.n	8017b8a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017b84:	68f8      	ldr	r0, [r7, #12]
 8017b86:	f7ff fce5 	bl	8017554 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	3301      	adds	r3, #1
 8017b8e:	60fb      	str	r3, [r7, #12]
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	2b09      	cmp	r3, #9
 8017b94:	dddd      	ble.n	8017b52 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017b96:	bf00      	nop
 8017b98:	3710      	adds	r7, #16
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bd80      	pop	{r7, pc}
 8017b9e:	bf00      	nop
 8017ba0:	20010334 	.word	0x20010334

08017ba4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017ba4:	b5b0      	push	{r4, r5, r7, lr}
 8017ba6:	b08a      	sub	sp, #40	; 0x28
 8017ba8:	af04      	add	r7, sp, #16
 8017baa:	6078      	str	r0, [r7, #4]
 8017bac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017bae:	683b      	ldr	r3, [r7, #0]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d107      	bne.n	8017bc4 <etharp_input+0x20>
 8017bb4:	4b3f      	ldr	r3, [pc, #252]	; (8017cb4 <etharp_input+0x110>)
 8017bb6:	f240 228a 	movw	r2, #650	; 0x28a
 8017bba:	493f      	ldr	r1, [pc, #252]	; (8017cb8 <etharp_input+0x114>)
 8017bbc:	483f      	ldr	r0, [pc, #252]	; (8017cbc <etharp_input+0x118>)
 8017bbe:	f002 f9bb 	bl	8019f38 <iprintf>
 8017bc2:	e074      	b.n	8017cae <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	685b      	ldr	r3, [r3, #4]
 8017bc8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017bca:	693b      	ldr	r3, [r7, #16]
 8017bcc:	881b      	ldrh	r3, [r3, #0]
 8017bce:	b29b      	uxth	r3, r3
 8017bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017bd4:	d10c      	bne.n	8017bf0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017bd6:	693b      	ldr	r3, [r7, #16]
 8017bd8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017bda:	2b06      	cmp	r3, #6
 8017bdc:	d108      	bne.n	8017bf0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017bde:	693b      	ldr	r3, [r7, #16]
 8017be0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017be2:	2b04      	cmp	r3, #4
 8017be4:	d104      	bne.n	8017bf0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017be6:	693b      	ldr	r3, [r7, #16]
 8017be8:	885b      	ldrh	r3, [r3, #2]
 8017bea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017bec:	2b08      	cmp	r3, #8
 8017bee:	d003      	beq.n	8017bf8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017bf0:	6878      	ldr	r0, [r7, #4]
 8017bf2:	f7f6 fc63 	bl	800e4bc <pbuf_free>
    return;
 8017bf6:	e05a      	b.n	8017cae <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017bf8:	693b      	ldr	r3, [r7, #16]
 8017bfa:	330e      	adds	r3, #14
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017c00:	693b      	ldr	r3, [r7, #16]
 8017c02:	3318      	adds	r3, #24
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017c08:	683b      	ldr	r3, [r7, #0]
 8017c0a:	3304      	adds	r3, #4
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d102      	bne.n	8017c18 <etharp_input+0x74>
    for_us = 0;
 8017c12:	2300      	movs	r3, #0
 8017c14:	75fb      	strb	r3, [r7, #23]
 8017c16:	e009      	b.n	8017c2c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017c18:	68ba      	ldr	r2, [r7, #8]
 8017c1a:	683b      	ldr	r3, [r7, #0]
 8017c1c:	3304      	adds	r3, #4
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	429a      	cmp	r2, r3
 8017c22:	bf0c      	ite	eq
 8017c24:	2301      	moveq	r3, #1
 8017c26:	2300      	movne	r3, #0
 8017c28:	b2db      	uxtb	r3, r3
 8017c2a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017c2c:	693b      	ldr	r3, [r7, #16]
 8017c2e:	f103 0208 	add.w	r2, r3, #8
 8017c32:	7dfb      	ldrb	r3, [r7, #23]
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d001      	beq.n	8017c3c <etharp_input+0x98>
 8017c38:	2301      	movs	r3, #1
 8017c3a:	e000      	b.n	8017c3e <etharp_input+0x9a>
 8017c3c:	2302      	movs	r3, #2
 8017c3e:	f107 010c 	add.w	r1, r7, #12
 8017c42:	6838      	ldr	r0, [r7, #0]
 8017c44:	f7ff fed8 	bl	80179f8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017c48:	693b      	ldr	r3, [r7, #16]
 8017c4a:	88db      	ldrh	r3, [r3, #6]
 8017c4c:	b29b      	uxth	r3, r3
 8017c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017c52:	d003      	beq.n	8017c5c <etharp_input+0xb8>
 8017c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c58:	d01e      	beq.n	8017c98 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017c5a:	e025      	b.n	8017ca8 <etharp_input+0x104>
      if (for_us) {
 8017c5c:	7dfb      	ldrb	r3, [r7, #23]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d021      	beq.n	8017ca6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8017c62:	683b      	ldr	r3, [r7, #0]
 8017c64:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017c68:	693b      	ldr	r3, [r7, #16]
 8017c6a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8017c6e:	683b      	ldr	r3, [r7, #0]
 8017c70:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8017c74:	683b      	ldr	r3, [r7, #0]
 8017c76:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017c78:	693a      	ldr	r2, [r7, #16]
 8017c7a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017c7c:	2102      	movs	r1, #2
 8017c7e:	9103      	str	r1, [sp, #12]
 8017c80:	f107 010c 	add.w	r1, r7, #12
 8017c84:	9102      	str	r1, [sp, #8]
 8017c86:	9201      	str	r2, [sp, #4]
 8017c88:	9300      	str	r3, [sp, #0]
 8017c8a:	462b      	mov	r3, r5
 8017c8c:	4622      	mov	r2, r4
 8017c8e:	4601      	mov	r1, r0
 8017c90:	6838      	ldr	r0, [r7, #0]
 8017c92:	f000 faef 	bl	8018274 <etharp_raw>
      break;
 8017c96:	e006      	b.n	8017ca6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8017c98:	f107 030c 	add.w	r3, r7, #12
 8017c9c:	4619      	mov	r1, r3
 8017c9e:	6838      	ldr	r0, [r7, #0]
 8017ca0:	f7fe f9f2 	bl	8016088 <dhcp_arp_reply>
      break;
 8017ca4:	e000      	b.n	8017ca8 <etharp_input+0x104>
      break;
 8017ca6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017ca8:	6878      	ldr	r0, [r7, #4]
 8017caa:	f7f6 fc07 	bl	800e4bc <pbuf_free>
}
 8017cae:	3718      	adds	r7, #24
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8017cb4:	0801e7f0 	.word	0x0801e7f0
 8017cb8:	0801e940 	.word	0x0801e940
 8017cbc:	0801e868 	.word	0x0801e868

08017cc0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b086      	sub	sp, #24
 8017cc4:	af02      	add	r7, sp, #8
 8017cc6:	60f8      	str	r0, [r7, #12]
 8017cc8:	60b9      	str	r1, [r7, #8]
 8017cca:	4613      	mov	r3, r2
 8017ccc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017cce:	79fa      	ldrb	r2, [r7, #7]
 8017cd0:	4944      	ldr	r1, [pc, #272]	; (8017de4 <etharp_output_to_arp_index+0x124>)
 8017cd2:	4613      	mov	r3, r2
 8017cd4:	005b      	lsls	r3, r3, #1
 8017cd6:	4413      	add	r3, r2
 8017cd8:	00db      	lsls	r3, r3, #3
 8017cda:	440b      	add	r3, r1
 8017cdc:	3314      	adds	r3, #20
 8017cde:	781b      	ldrb	r3, [r3, #0]
 8017ce0:	2b01      	cmp	r3, #1
 8017ce2:	d806      	bhi.n	8017cf2 <etharp_output_to_arp_index+0x32>
 8017ce4:	4b40      	ldr	r3, [pc, #256]	; (8017de8 <etharp_output_to_arp_index+0x128>)
 8017ce6:	f240 22ef 	movw	r2, #751	; 0x2ef
 8017cea:	4940      	ldr	r1, [pc, #256]	; (8017dec <etharp_output_to_arp_index+0x12c>)
 8017cec:	4840      	ldr	r0, [pc, #256]	; (8017df0 <etharp_output_to_arp_index+0x130>)
 8017cee:	f002 f923 	bl	8019f38 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017cf2:	79fa      	ldrb	r2, [r7, #7]
 8017cf4:	493b      	ldr	r1, [pc, #236]	; (8017de4 <etharp_output_to_arp_index+0x124>)
 8017cf6:	4613      	mov	r3, r2
 8017cf8:	005b      	lsls	r3, r3, #1
 8017cfa:	4413      	add	r3, r2
 8017cfc:	00db      	lsls	r3, r3, #3
 8017cfe:	440b      	add	r3, r1
 8017d00:	3314      	adds	r3, #20
 8017d02:	781b      	ldrb	r3, [r3, #0]
 8017d04:	2b02      	cmp	r3, #2
 8017d06:	d153      	bne.n	8017db0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017d08:	79fa      	ldrb	r2, [r7, #7]
 8017d0a:	4936      	ldr	r1, [pc, #216]	; (8017de4 <etharp_output_to_arp_index+0x124>)
 8017d0c:	4613      	mov	r3, r2
 8017d0e:	005b      	lsls	r3, r3, #1
 8017d10:	4413      	add	r3, r2
 8017d12:	00db      	lsls	r3, r3, #3
 8017d14:	440b      	add	r3, r1
 8017d16:	3312      	adds	r3, #18
 8017d18:	881b      	ldrh	r3, [r3, #0]
 8017d1a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8017d1e:	d919      	bls.n	8017d54 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017d20:	79fa      	ldrb	r2, [r7, #7]
 8017d22:	4613      	mov	r3, r2
 8017d24:	005b      	lsls	r3, r3, #1
 8017d26:	4413      	add	r3, r2
 8017d28:	00db      	lsls	r3, r3, #3
 8017d2a:	4a2e      	ldr	r2, [pc, #184]	; (8017de4 <etharp_output_to_arp_index+0x124>)
 8017d2c:	4413      	add	r3, r2
 8017d2e:	3304      	adds	r3, #4
 8017d30:	4619      	mov	r1, r3
 8017d32:	68f8      	ldr	r0, [r7, #12]
 8017d34:	f000 fb4c 	bl	80183d0 <etharp_request>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d138      	bne.n	8017db0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017d3e:	79fa      	ldrb	r2, [r7, #7]
 8017d40:	4928      	ldr	r1, [pc, #160]	; (8017de4 <etharp_output_to_arp_index+0x124>)
 8017d42:	4613      	mov	r3, r2
 8017d44:	005b      	lsls	r3, r3, #1
 8017d46:	4413      	add	r3, r2
 8017d48:	00db      	lsls	r3, r3, #3
 8017d4a:	440b      	add	r3, r1
 8017d4c:	3314      	adds	r3, #20
 8017d4e:	2203      	movs	r2, #3
 8017d50:	701a      	strb	r2, [r3, #0]
 8017d52:	e02d      	b.n	8017db0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017d54:	79fa      	ldrb	r2, [r7, #7]
 8017d56:	4923      	ldr	r1, [pc, #140]	; (8017de4 <etharp_output_to_arp_index+0x124>)
 8017d58:	4613      	mov	r3, r2
 8017d5a:	005b      	lsls	r3, r3, #1
 8017d5c:	4413      	add	r3, r2
 8017d5e:	00db      	lsls	r3, r3, #3
 8017d60:	440b      	add	r3, r1
 8017d62:	3312      	adds	r3, #18
 8017d64:	881b      	ldrh	r3, [r3, #0]
 8017d66:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8017d6a:	d321      	bcc.n	8017db0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017d6c:	79fa      	ldrb	r2, [r7, #7]
 8017d6e:	4613      	mov	r3, r2
 8017d70:	005b      	lsls	r3, r3, #1
 8017d72:	4413      	add	r3, r2
 8017d74:	00db      	lsls	r3, r3, #3
 8017d76:	4a1b      	ldr	r2, [pc, #108]	; (8017de4 <etharp_output_to_arp_index+0x124>)
 8017d78:	4413      	add	r3, r2
 8017d7a:	1d19      	adds	r1, r3, #4
 8017d7c:	79fa      	ldrb	r2, [r7, #7]
 8017d7e:	4613      	mov	r3, r2
 8017d80:	005b      	lsls	r3, r3, #1
 8017d82:	4413      	add	r3, r2
 8017d84:	00db      	lsls	r3, r3, #3
 8017d86:	3308      	adds	r3, #8
 8017d88:	4a16      	ldr	r2, [pc, #88]	; (8017de4 <etharp_output_to_arp_index+0x124>)
 8017d8a:	4413      	add	r3, r2
 8017d8c:	3304      	adds	r3, #4
 8017d8e:	461a      	mov	r2, r3
 8017d90:	68f8      	ldr	r0, [r7, #12]
 8017d92:	f000 fafb 	bl	801838c <etharp_request_dst>
 8017d96:	4603      	mov	r3, r0
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d109      	bne.n	8017db0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017d9c:	79fa      	ldrb	r2, [r7, #7]
 8017d9e:	4911      	ldr	r1, [pc, #68]	; (8017de4 <etharp_output_to_arp_index+0x124>)
 8017da0:	4613      	mov	r3, r2
 8017da2:	005b      	lsls	r3, r3, #1
 8017da4:	4413      	add	r3, r2
 8017da6:	00db      	lsls	r3, r3, #3
 8017da8:	440b      	add	r3, r1
 8017daa:	3314      	adds	r3, #20
 8017dac:	2203      	movs	r2, #3
 8017dae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017db0:	68fb      	ldr	r3, [r7, #12]
 8017db2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8017db6:	79fa      	ldrb	r2, [r7, #7]
 8017db8:	4613      	mov	r3, r2
 8017dba:	005b      	lsls	r3, r3, #1
 8017dbc:	4413      	add	r3, r2
 8017dbe:	00db      	lsls	r3, r3, #3
 8017dc0:	3308      	adds	r3, #8
 8017dc2:	4a08      	ldr	r2, [pc, #32]	; (8017de4 <etharp_output_to_arp_index+0x124>)
 8017dc4:	4413      	add	r3, r2
 8017dc6:	1d1a      	adds	r2, r3, #4
 8017dc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017dcc:	9300      	str	r3, [sp, #0]
 8017dce:	4613      	mov	r3, r2
 8017dd0:	460a      	mov	r2, r1
 8017dd2:	68b9      	ldr	r1, [r7, #8]
 8017dd4:	68f8      	ldr	r0, [r7, #12]
 8017dd6:	f001 fe51 	bl	8019a7c <ethernet_output>
 8017dda:	4603      	mov	r3, r0
}
 8017ddc:	4618      	mov	r0, r3
 8017dde:	3710      	adds	r7, #16
 8017de0:	46bd      	mov	sp, r7
 8017de2:	bd80      	pop	{r7, pc}
 8017de4:	20010334 	.word	0x20010334
 8017de8:	0801e7f0 	.word	0x0801e7f0
 8017dec:	0801e960 	.word	0x0801e960
 8017df0:	0801e868 	.word	0x0801e868

08017df4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b08a      	sub	sp, #40	; 0x28
 8017df8:	af02      	add	r7, sp, #8
 8017dfa:	60f8      	str	r0, [r7, #12]
 8017dfc:	60b9      	str	r1, [r7, #8]
 8017dfe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d106      	bne.n	8017e18 <etharp_output+0x24>
 8017e0a:	4b73      	ldr	r3, [pc, #460]	; (8017fd8 <etharp_output+0x1e4>)
 8017e0c:	f240 321e 	movw	r2, #798	; 0x31e
 8017e10:	4972      	ldr	r1, [pc, #456]	; (8017fdc <etharp_output+0x1e8>)
 8017e12:	4873      	ldr	r0, [pc, #460]	; (8017fe0 <etharp_output+0x1ec>)
 8017e14:	f002 f890 	bl	8019f38 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017e18:	68bb      	ldr	r3, [r7, #8]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d106      	bne.n	8017e2c <etharp_output+0x38>
 8017e1e:	4b6e      	ldr	r3, [pc, #440]	; (8017fd8 <etharp_output+0x1e4>)
 8017e20:	f240 321f 	movw	r2, #799	; 0x31f
 8017e24:	496f      	ldr	r1, [pc, #444]	; (8017fe4 <etharp_output+0x1f0>)
 8017e26:	486e      	ldr	r0, [pc, #440]	; (8017fe0 <etharp_output+0x1ec>)
 8017e28:	f002 f886 	bl	8019f38 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d106      	bne.n	8017e40 <etharp_output+0x4c>
 8017e32:	4b69      	ldr	r3, [pc, #420]	; (8017fd8 <etharp_output+0x1e4>)
 8017e34:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017e38:	496b      	ldr	r1, [pc, #428]	; (8017fe8 <etharp_output+0x1f4>)
 8017e3a:	4869      	ldr	r0, [pc, #420]	; (8017fe0 <etharp_output+0x1ec>)
 8017e3c:	f002 f87c 	bl	8019f38 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	68f9      	ldr	r1, [r7, #12]
 8017e46:	4618      	mov	r0, r3
 8017e48:	f000 ff14 	bl	8018c74 <ip4_addr_isbroadcast_u32>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d002      	beq.n	8017e58 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017e52:	4b66      	ldr	r3, [pc, #408]	; (8017fec <etharp_output+0x1f8>)
 8017e54:	61fb      	str	r3, [r7, #28]
 8017e56:	e0af      	b.n	8017fb8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017e60:	2be0      	cmp	r3, #224	; 0xe0
 8017e62:	d118      	bne.n	8017e96 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017e64:	2301      	movs	r3, #1
 8017e66:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017e68:	2300      	movs	r3, #0
 8017e6a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017e6c:	235e      	movs	r3, #94	; 0x5e
 8017e6e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	3301      	adds	r3, #1
 8017e74:	781b      	ldrb	r3, [r3, #0]
 8017e76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017e7a:	b2db      	uxtb	r3, r3
 8017e7c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	3302      	adds	r3, #2
 8017e82:	781b      	ldrb	r3, [r3, #0]
 8017e84:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017e86:	687b      	ldr	r3, [r7, #4]
 8017e88:	3303      	adds	r3, #3
 8017e8a:	781b      	ldrb	r3, [r3, #0]
 8017e8c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017e8e:	f107 0310 	add.w	r3, r7, #16
 8017e92:	61fb      	str	r3, [r7, #28]
 8017e94:	e090      	b.n	8017fb8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	681a      	ldr	r2, [r3, #0]
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	3304      	adds	r3, #4
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	405a      	eors	r2, r3
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	3308      	adds	r3, #8
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	4013      	ands	r3, r2
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d012      	beq.n	8017ed4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017eb4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017eb8:	4293      	cmp	r3, r2
 8017eba:	d00b      	beq.n	8017ed4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	330c      	adds	r3, #12
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d003      	beq.n	8017ece <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	330c      	adds	r3, #12
 8017eca:	61bb      	str	r3, [r7, #24]
 8017ecc:	e002      	b.n	8017ed4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017ece:	f06f 0303 	mvn.w	r3, #3
 8017ed2:	e07d      	b.n	8017fd0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017ed4:	4b46      	ldr	r3, [pc, #280]	; (8017ff0 <etharp_output+0x1fc>)
 8017ed6:	781b      	ldrb	r3, [r3, #0]
 8017ed8:	4619      	mov	r1, r3
 8017eda:	4a46      	ldr	r2, [pc, #280]	; (8017ff4 <etharp_output+0x200>)
 8017edc:	460b      	mov	r3, r1
 8017ede:	005b      	lsls	r3, r3, #1
 8017ee0:	440b      	add	r3, r1
 8017ee2:	00db      	lsls	r3, r3, #3
 8017ee4:	4413      	add	r3, r2
 8017ee6:	3314      	adds	r3, #20
 8017ee8:	781b      	ldrb	r3, [r3, #0]
 8017eea:	2b01      	cmp	r3, #1
 8017eec:	d925      	bls.n	8017f3a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017eee:	4b40      	ldr	r3, [pc, #256]	; (8017ff0 <etharp_output+0x1fc>)
 8017ef0:	781b      	ldrb	r3, [r3, #0]
 8017ef2:	4619      	mov	r1, r3
 8017ef4:	4a3f      	ldr	r2, [pc, #252]	; (8017ff4 <etharp_output+0x200>)
 8017ef6:	460b      	mov	r3, r1
 8017ef8:	005b      	lsls	r3, r3, #1
 8017efa:	440b      	add	r3, r1
 8017efc:	00db      	lsls	r3, r3, #3
 8017efe:	4413      	add	r3, r2
 8017f00:	3308      	adds	r3, #8
 8017f02:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017f04:	68fa      	ldr	r2, [r7, #12]
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d117      	bne.n	8017f3a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017f0a:	69bb      	ldr	r3, [r7, #24]
 8017f0c:	681a      	ldr	r2, [r3, #0]
 8017f0e:	4b38      	ldr	r3, [pc, #224]	; (8017ff0 <etharp_output+0x1fc>)
 8017f10:	781b      	ldrb	r3, [r3, #0]
 8017f12:	4618      	mov	r0, r3
 8017f14:	4937      	ldr	r1, [pc, #220]	; (8017ff4 <etharp_output+0x200>)
 8017f16:	4603      	mov	r3, r0
 8017f18:	005b      	lsls	r3, r3, #1
 8017f1a:	4403      	add	r3, r0
 8017f1c:	00db      	lsls	r3, r3, #3
 8017f1e:	440b      	add	r3, r1
 8017f20:	3304      	adds	r3, #4
 8017f22:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017f24:	429a      	cmp	r2, r3
 8017f26:	d108      	bne.n	8017f3a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017f28:	4b31      	ldr	r3, [pc, #196]	; (8017ff0 <etharp_output+0x1fc>)
 8017f2a:	781b      	ldrb	r3, [r3, #0]
 8017f2c:	461a      	mov	r2, r3
 8017f2e:	68b9      	ldr	r1, [r7, #8]
 8017f30:	68f8      	ldr	r0, [r7, #12]
 8017f32:	f7ff fec5 	bl	8017cc0 <etharp_output_to_arp_index>
 8017f36:	4603      	mov	r3, r0
 8017f38:	e04a      	b.n	8017fd0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	75fb      	strb	r3, [r7, #23]
 8017f3e:	e031      	b.n	8017fa4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017f40:	7dfa      	ldrb	r2, [r7, #23]
 8017f42:	492c      	ldr	r1, [pc, #176]	; (8017ff4 <etharp_output+0x200>)
 8017f44:	4613      	mov	r3, r2
 8017f46:	005b      	lsls	r3, r3, #1
 8017f48:	4413      	add	r3, r2
 8017f4a:	00db      	lsls	r3, r3, #3
 8017f4c:	440b      	add	r3, r1
 8017f4e:	3314      	adds	r3, #20
 8017f50:	781b      	ldrb	r3, [r3, #0]
 8017f52:	2b01      	cmp	r3, #1
 8017f54:	d923      	bls.n	8017f9e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017f56:	7dfa      	ldrb	r2, [r7, #23]
 8017f58:	4926      	ldr	r1, [pc, #152]	; (8017ff4 <etharp_output+0x200>)
 8017f5a:	4613      	mov	r3, r2
 8017f5c:	005b      	lsls	r3, r3, #1
 8017f5e:	4413      	add	r3, r2
 8017f60:	00db      	lsls	r3, r3, #3
 8017f62:	440b      	add	r3, r1
 8017f64:	3308      	adds	r3, #8
 8017f66:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017f68:	68fa      	ldr	r2, [r7, #12]
 8017f6a:	429a      	cmp	r2, r3
 8017f6c:	d117      	bne.n	8017f9e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017f6e:	69bb      	ldr	r3, [r7, #24]
 8017f70:	6819      	ldr	r1, [r3, #0]
 8017f72:	7dfa      	ldrb	r2, [r7, #23]
 8017f74:	481f      	ldr	r0, [pc, #124]	; (8017ff4 <etharp_output+0x200>)
 8017f76:	4613      	mov	r3, r2
 8017f78:	005b      	lsls	r3, r3, #1
 8017f7a:	4413      	add	r3, r2
 8017f7c:	00db      	lsls	r3, r3, #3
 8017f7e:	4403      	add	r3, r0
 8017f80:	3304      	adds	r3, #4
 8017f82:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017f84:	4299      	cmp	r1, r3
 8017f86:	d10a      	bne.n	8017f9e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017f88:	4a19      	ldr	r2, [pc, #100]	; (8017ff0 <etharp_output+0x1fc>)
 8017f8a:	7dfb      	ldrb	r3, [r7, #23]
 8017f8c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017f8e:	7dfb      	ldrb	r3, [r7, #23]
 8017f90:	461a      	mov	r2, r3
 8017f92:	68b9      	ldr	r1, [r7, #8]
 8017f94:	68f8      	ldr	r0, [r7, #12]
 8017f96:	f7ff fe93 	bl	8017cc0 <etharp_output_to_arp_index>
 8017f9a:	4603      	mov	r3, r0
 8017f9c:	e018      	b.n	8017fd0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017f9e:	7dfb      	ldrb	r3, [r7, #23]
 8017fa0:	3301      	adds	r3, #1
 8017fa2:	75fb      	strb	r3, [r7, #23]
 8017fa4:	7dfb      	ldrb	r3, [r7, #23]
 8017fa6:	2b09      	cmp	r3, #9
 8017fa8:	d9ca      	bls.n	8017f40 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017faa:	68ba      	ldr	r2, [r7, #8]
 8017fac:	69b9      	ldr	r1, [r7, #24]
 8017fae:	68f8      	ldr	r0, [r7, #12]
 8017fb0:	f000 f822 	bl	8017ff8 <etharp_query>
 8017fb4:	4603      	mov	r3, r0
 8017fb6:	e00b      	b.n	8017fd0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017fbe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017fc2:	9300      	str	r3, [sp, #0]
 8017fc4:	69fb      	ldr	r3, [r7, #28]
 8017fc6:	68b9      	ldr	r1, [r7, #8]
 8017fc8:	68f8      	ldr	r0, [r7, #12]
 8017fca:	f001 fd57 	bl	8019a7c <ethernet_output>
 8017fce:	4603      	mov	r3, r0
}
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	3720      	adds	r7, #32
 8017fd4:	46bd      	mov	sp, r7
 8017fd6:	bd80      	pop	{r7, pc}
 8017fd8:	0801e7f0 	.word	0x0801e7f0
 8017fdc:	0801e940 	.word	0x0801e940
 8017fe0:	0801e868 	.word	0x0801e868
 8017fe4:	0801e990 	.word	0x0801e990
 8017fe8:	0801e930 	.word	0x0801e930
 8017fec:	0804027c 	.word	0x0804027c
 8017ff0:	20010424 	.word	0x20010424
 8017ff4:	20010334 	.word	0x20010334

08017ff8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017ff8:	b580      	push	{r7, lr}
 8017ffa:	b08c      	sub	sp, #48	; 0x30
 8017ffc:	af02      	add	r7, sp, #8
 8017ffe:	60f8      	str	r0, [r7, #12]
 8018000:	60b9      	str	r1, [r7, #8]
 8018002:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018004:	68fb      	ldr	r3, [r7, #12]
 8018006:	332a      	adds	r3, #42	; 0x2a
 8018008:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801800a:	23ff      	movs	r3, #255	; 0xff
 801800c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018010:	2300      	movs	r3, #0
 8018012:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018014:	68bb      	ldr	r3, [r7, #8]
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	68f9      	ldr	r1, [r7, #12]
 801801a:	4618      	mov	r0, r3
 801801c:	f000 fe2a 	bl	8018c74 <ip4_addr_isbroadcast_u32>
 8018020:	4603      	mov	r3, r0
 8018022:	2b00      	cmp	r3, #0
 8018024:	d10c      	bne.n	8018040 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018026:	68bb      	ldr	r3, [r7, #8]
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801802e:	2be0      	cmp	r3, #224	; 0xe0
 8018030:	d006      	beq.n	8018040 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018032:	68bb      	ldr	r3, [r7, #8]
 8018034:	2b00      	cmp	r3, #0
 8018036:	d003      	beq.n	8018040 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018038:	68bb      	ldr	r3, [r7, #8]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d102      	bne.n	8018046 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018040:	f06f 030f 	mvn.w	r3, #15
 8018044:	e102      	b.n	801824c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018046:	68fa      	ldr	r2, [r7, #12]
 8018048:	2101      	movs	r1, #1
 801804a:	68b8      	ldr	r0, [r7, #8]
 801804c:	f7ff fb5c 	bl	8017708 <etharp_find_entry>
 8018050:	4603      	mov	r3, r0
 8018052:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018054:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018058:	2b00      	cmp	r3, #0
 801805a:	da02      	bge.n	8018062 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801805c:	8a7b      	ldrh	r3, [r7, #18]
 801805e:	b25b      	sxtb	r3, r3
 8018060:	e0f4      	b.n	801824c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018062:	8a7b      	ldrh	r3, [r7, #18]
 8018064:	2b7e      	cmp	r3, #126	; 0x7e
 8018066:	d906      	bls.n	8018076 <etharp_query+0x7e>
 8018068:	4b7a      	ldr	r3, [pc, #488]	; (8018254 <etharp_query+0x25c>)
 801806a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801806e:	497a      	ldr	r1, [pc, #488]	; (8018258 <etharp_query+0x260>)
 8018070:	487a      	ldr	r0, [pc, #488]	; (801825c <etharp_query+0x264>)
 8018072:	f001 ff61 	bl	8019f38 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018076:	8a7b      	ldrh	r3, [r7, #18]
 8018078:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801807a:	7c7a      	ldrb	r2, [r7, #17]
 801807c:	4978      	ldr	r1, [pc, #480]	; (8018260 <etharp_query+0x268>)
 801807e:	4613      	mov	r3, r2
 8018080:	005b      	lsls	r3, r3, #1
 8018082:	4413      	add	r3, r2
 8018084:	00db      	lsls	r3, r3, #3
 8018086:	440b      	add	r3, r1
 8018088:	3314      	adds	r3, #20
 801808a:	781b      	ldrb	r3, [r3, #0]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d115      	bne.n	80180bc <etharp_query+0xc4>
    is_new_entry = 1;
 8018090:	2301      	movs	r3, #1
 8018092:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018094:	7c7a      	ldrb	r2, [r7, #17]
 8018096:	4972      	ldr	r1, [pc, #456]	; (8018260 <etharp_query+0x268>)
 8018098:	4613      	mov	r3, r2
 801809a:	005b      	lsls	r3, r3, #1
 801809c:	4413      	add	r3, r2
 801809e:	00db      	lsls	r3, r3, #3
 80180a0:	440b      	add	r3, r1
 80180a2:	3314      	adds	r3, #20
 80180a4:	2201      	movs	r2, #1
 80180a6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80180a8:	7c7a      	ldrb	r2, [r7, #17]
 80180aa:	496d      	ldr	r1, [pc, #436]	; (8018260 <etharp_query+0x268>)
 80180ac:	4613      	mov	r3, r2
 80180ae:	005b      	lsls	r3, r3, #1
 80180b0:	4413      	add	r3, r2
 80180b2:	00db      	lsls	r3, r3, #3
 80180b4:	440b      	add	r3, r1
 80180b6:	3308      	adds	r3, #8
 80180b8:	68fa      	ldr	r2, [r7, #12]
 80180ba:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80180bc:	7c7a      	ldrb	r2, [r7, #17]
 80180be:	4968      	ldr	r1, [pc, #416]	; (8018260 <etharp_query+0x268>)
 80180c0:	4613      	mov	r3, r2
 80180c2:	005b      	lsls	r3, r3, #1
 80180c4:	4413      	add	r3, r2
 80180c6:	00db      	lsls	r3, r3, #3
 80180c8:	440b      	add	r3, r1
 80180ca:	3314      	adds	r3, #20
 80180cc:	781b      	ldrb	r3, [r3, #0]
 80180ce:	2b01      	cmp	r3, #1
 80180d0:	d011      	beq.n	80180f6 <etharp_query+0xfe>
 80180d2:	7c7a      	ldrb	r2, [r7, #17]
 80180d4:	4962      	ldr	r1, [pc, #392]	; (8018260 <etharp_query+0x268>)
 80180d6:	4613      	mov	r3, r2
 80180d8:	005b      	lsls	r3, r3, #1
 80180da:	4413      	add	r3, r2
 80180dc:	00db      	lsls	r3, r3, #3
 80180de:	440b      	add	r3, r1
 80180e0:	3314      	adds	r3, #20
 80180e2:	781b      	ldrb	r3, [r3, #0]
 80180e4:	2b01      	cmp	r3, #1
 80180e6:	d806      	bhi.n	80180f6 <etharp_query+0xfe>
 80180e8:	4b5a      	ldr	r3, [pc, #360]	; (8018254 <etharp_query+0x25c>)
 80180ea:	f240 32cf 	movw	r2, #975	; 0x3cf
 80180ee:	495d      	ldr	r1, [pc, #372]	; (8018264 <etharp_query+0x26c>)
 80180f0:	485a      	ldr	r0, [pc, #360]	; (801825c <etharp_query+0x264>)
 80180f2:	f001 ff21 	bl	8019f38 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80180f6:	6a3b      	ldr	r3, [r7, #32]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d102      	bne.n	8018102 <etharp_query+0x10a>
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d10c      	bne.n	801811c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018102:	68b9      	ldr	r1, [r7, #8]
 8018104:	68f8      	ldr	r0, [r7, #12]
 8018106:	f000 f963 	bl	80183d0 <etharp_request>
 801810a:	4603      	mov	r3, r0
 801810c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d102      	bne.n	801811c <etharp_query+0x124>
      return result;
 8018116:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801811a:	e097      	b.n	801824c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	2b00      	cmp	r3, #0
 8018120:	d106      	bne.n	8018130 <etharp_query+0x138>
 8018122:	4b4c      	ldr	r3, [pc, #304]	; (8018254 <etharp_query+0x25c>)
 8018124:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018128:	494f      	ldr	r1, [pc, #316]	; (8018268 <etharp_query+0x270>)
 801812a:	484c      	ldr	r0, [pc, #304]	; (801825c <etharp_query+0x264>)
 801812c:	f001 ff04 	bl	8019f38 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018130:	7c7a      	ldrb	r2, [r7, #17]
 8018132:	494b      	ldr	r1, [pc, #300]	; (8018260 <etharp_query+0x268>)
 8018134:	4613      	mov	r3, r2
 8018136:	005b      	lsls	r3, r3, #1
 8018138:	4413      	add	r3, r2
 801813a:	00db      	lsls	r3, r3, #3
 801813c:	440b      	add	r3, r1
 801813e:	3314      	adds	r3, #20
 8018140:	781b      	ldrb	r3, [r3, #0]
 8018142:	2b01      	cmp	r3, #1
 8018144:	d918      	bls.n	8018178 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018146:	4a49      	ldr	r2, [pc, #292]	; (801826c <etharp_query+0x274>)
 8018148:	7c7b      	ldrb	r3, [r7, #17]
 801814a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801814c:	7c7a      	ldrb	r2, [r7, #17]
 801814e:	4613      	mov	r3, r2
 8018150:	005b      	lsls	r3, r3, #1
 8018152:	4413      	add	r3, r2
 8018154:	00db      	lsls	r3, r3, #3
 8018156:	3308      	adds	r3, #8
 8018158:	4a41      	ldr	r2, [pc, #260]	; (8018260 <etharp_query+0x268>)
 801815a:	4413      	add	r3, r2
 801815c:	1d1a      	adds	r2, r3, #4
 801815e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018162:	9300      	str	r3, [sp, #0]
 8018164:	4613      	mov	r3, r2
 8018166:	697a      	ldr	r2, [r7, #20]
 8018168:	6879      	ldr	r1, [r7, #4]
 801816a:	68f8      	ldr	r0, [r7, #12]
 801816c:	f001 fc86 	bl	8019a7c <ethernet_output>
 8018170:	4603      	mov	r3, r0
 8018172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018176:	e067      	b.n	8018248 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018178:	7c7a      	ldrb	r2, [r7, #17]
 801817a:	4939      	ldr	r1, [pc, #228]	; (8018260 <etharp_query+0x268>)
 801817c:	4613      	mov	r3, r2
 801817e:	005b      	lsls	r3, r3, #1
 8018180:	4413      	add	r3, r2
 8018182:	00db      	lsls	r3, r3, #3
 8018184:	440b      	add	r3, r1
 8018186:	3314      	adds	r3, #20
 8018188:	781b      	ldrb	r3, [r3, #0]
 801818a:	2b01      	cmp	r3, #1
 801818c:	d15c      	bne.n	8018248 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801818e:	2300      	movs	r3, #0
 8018190:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018196:	e01c      	b.n	80181d2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018198:	69fb      	ldr	r3, [r7, #28]
 801819a:	895a      	ldrh	r2, [r3, #10]
 801819c:	69fb      	ldr	r3, [r7, #28]
 801819e:	891b      	ldrh	r3, [r3, #8]
 80181a0:	429a      	cmp	r2, r3
 80181a2:	d10a      	bne.n	80181ba <etharp_query+0x1c2>
 80181a4:	69fb      	ldr	r3, [r7, #28]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d006      	beq.n	80181ba <etharp_query+0x1c2>
 80181ac:	4b29      	ldr	r3, [pc, #164]	; (8018254 <etharp_query+0x25c>)
 80181ae:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80181b2:	492f      	ldr	r1, [pc, #188]	; (8018270 <etharp_query+0x278>)
 80181b4:	4829      	ldr	r0, [pc, #164]	; (801825c <etharp_query+0x264>)
 80181b6:	f001 febf 	bl	8019f38 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80181ba:	69fb      	ldr	r3, [r7, #28]
 80181bc:	7b1b      	ldrb	r3, [r3, #12]
 80181be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d002      	beq.n	80181cc <etharp_query+0x1d4>
        copy_needed = 1;
 80181c6:	2301      	movs	r3, #1
 80181c8:	61bb      	str	r3, [r7, #24]
        break;
 80181ca:	e005      	b.n	80181d8 <etharp_query+0x1e0>
      }
      p = p->next;
 80181cc:	69fb      	ldr	r3, [r7, #28]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80181d2:	69fb      	ldr	r3, [r7, #28]
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d1df      	bne.n	8018198 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 80181d8:	69bb      	ldr	r3, [r7, #24]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d007      	beq.n	80181ee <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80181de:	687a      	ldr	r2, [r7, #4]
 80181e0:	f44f 7120 	mov.w	r1, #640	; 0x280
 80181e4:	200e      	movs	r0, #14
 80181e6:	f7f6 fbe1 	bl	800e9ac <pbuf_clone>
 80181ea:	61f8      	str	r0, [r7, #28]
 80181ec:	e004      	b.n	80181f8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80181f2:	69f8      	ldr	r0, [r7, #28]
 80181f4:	f7f6 fa08 	bl	800e608 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80181f8:	69fb      	ldr	r3, [r7, #28]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d021      	beq.n	8018242 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80181fe:	7c7a      	ldrb	r2, [r7, #17]
 8018200:	4917      	ldr	r1, [pc, #92]	; (8018260 <etharp_query+0x268>)
 8018202:	4613      	mov	r3, r2
 8018204:	005b      	lsls	r3, r3, #1
 8018206:	4413      	add	r3, r2
 8018208:	00db      	lsls	r3, r3, #3
 801820a:	440b      	add	r3, r1
 801820c:	681b      	ldr	r3, [r3, #0]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d00a      	beq.n	8018228 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018212:	7c7a      	ldrb	r2, [r7, #17]
 8018214:	4912      	ldr	r1, [pc, #72]	; (8018260 <etharp_query+0x268>)
 8018216:	4613      	mov	r3, r2
 8018218:	005b      	lsls	r3, r3, #1
 801821a:	4413      	add	r3, r2
 801821c:	00db      	lsls	r3, r3, #3
 801821e:	440b      	add	r3, r1
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	4618      	mov	r0, r3
 8018224:	f7f6 f94a 	bl	800e4bc <pbuf_free>
      }
      arp_table[i].q = p;
 8018228:	7c7a      	ldrb	r2, [r7, #17]
 801822a:	490d      	ldr	r1, [pc, #52]	; (8018260 <etharp_query+0x268>)
 801822c:	4613      	mov	r3, r2
 801822e:	005b      	lsls	r3, r3, #1
 8018230:	4413      	add	r3, r2
 8018232:	00db      	lsls	r3, r3, #3
 8018234:	440b      	add	r3, r1
 8018236:	69fa      	ldr	r2, [r7, #28]
 8018238:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801823a:	2300      	movs	r3, #0
 801823c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018240:	e002      	b.n	8018248 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018242:	23ff      	movs	r3, #255	; 0xff
 8018244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018248:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801824c:	4618      	mov	r0, r3
 801824e:	3728      	adds	r7, #40	; 0x28
 8018250:	46bd      	mov	sp, r7
 8018252:	bd80      	pop	{r7, pc}
 8018254:	0801e7f0 	.word	0x0801e7f0
 8018258:	0801e99c 	.word	0x0801e99c
 801825c:	0801e868 	.word	0x0801e868
 8018260:	20010334 	.word	0x20010334
 8018264:	0801e9ac 	.word	0x0801e9ac
 8018268:	0801e990 	.word	0x0801e990
 801826c:	20010424 	.word	0x20010424
 8018270:	0801e9d4 	.word	0x0801e9d4

08018274 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018274:	b580      	push	{r7, lr}
 8018276:	b08a      	sub	sp, #40	; 0x28
 8018278:	af02      	add	r7, sp, #8
 801827a:	60f8      	str	r0, [r7, #12]
 801827c:	60b9      	str	r1, [r7, #8]
 801827e:	607a      	str	r2, [r7, #4]
 8018280:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018282:	2300      	movs	r3, #0
 8018284:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d106      	bne.n	801829a <etharp_raw+0x26>
 801828c:	4b3a      	ldr	r3, [pc, #232]	; (8018378 <etharp_raw+0x104>)
 801828e:	f240 4257 	movw	r2, #1111	; 0x457
 8018292:	493a      	ldr	r1, [pc, #232]	; (801837c <etharp_raw+0x108>)
 8018294:	483a      	ldr	r0, [pc, #232]	; (8018380 <etharp_raw+0x10c>)
 8018296:	f001 fe4f 	bl	8019f38 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801829a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801829e:	211c      	movs	r1, #28
 80182a0:	200e      	movs	r0, #14
 80182a2:	f7f5 fe2b 	bl	800defc <pbuf_alloc>
 80182a6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80182a8:	69bb      	ldr	r3, [r7, #24]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d102      	bne.n	80182b4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80182ae:	f04f 33ff 	mov.w	r3, #4294967295
 80182b2:	e05d      	b.n	8018370 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80182b4:	69bb      	ldr	r3, [r7, #24]
 80182b6:	895b      	ldrh	r3, [r3, #10]
 80182b8:	2b1b      	cmp	r3, #27
 80182ba:	d806      	bhi.n	80182ca <etharp_raw+0x56>
 80182bc:	4b2e      	ldr	r3, [pc, #184]	; (8018378 <etharp_raw+0x104>)
 80182be:	f240 4263 	movw	r2, #1123	; 0x463
 80182c2:	4930      	ldr	r1, [pc, #192]	; (8018384 <etharp_raw+0x110>)
 80182c4:	482e      	ldr	r0, [pc, #184]	; (8018380 <etharp_raw+0x10c>)
 80182c6:	f001 fe37 	bl	8019f38 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80182ca:	69bb      	ldr	r3, [r7, #24]
 80182cc:	685b      	ldr	r3, [r3, #4]
 80182ce:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80182d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80182d2:	4618      	mov	r0, r3
 80182d4:	f7f4 fcd4 	bl	800cc80 <lwip_htons>
 80182d8:	4603      	mov	r3, r0
 80182da:	461a      	mov	r2, r3
 80182dc:	697b      	ldr	r3, [r7, #20]
 80182de:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80182e6:	2b06      	cmp	r3, #6
 80182e8:	d006      	beq.n	80182f8 <etharp_raw+0x84>
 80182ea:	4b23      	ldr	r3, [pc, #140]	; (8018378 <etharp_raw+0x104>)
 80182ec:	f240 426a 	movw	r2, #1130	; 0x46a
 80182f0:	4925      	ldr	r1, [pc, #148]	; (8018388 <etharp_raw+0x114>)
 80182f2:	4823      	ldr	r0, [pc, #140]	; (8018380 <etharp_raw+0x10c>)
 80182f4:	f001 fe20 	bl	8019f38 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80182f8:	697b      	ldr	r3, [r7, #20]
 80182fa:	3308      	adds	r3, #8
 80182fc:	2206      	movs	r2, #6
 80182fe:	6839      	ldr	r1, [r7, #0]
 8018300:	4618      	mov	r0, r3
 8018302:	f001 fdec 	bl	8019ede <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018306:	697b      	ldr	r3, [r7, #20]
 8018308:	3312      	adds	r3, #18
 801830a:	2206      	movs	r2, #6
 801830c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801830e:	4618      	mov	r0, r3
 8018310:	f001 fde5 	bl	8019ede <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018314:	697b      	ldr	r3, [r7, #20]
 8018316:	330e      	adds	r3, #14
 8018318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801831a:	6812      	ldr	r2, [r2, #0]
 801831c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801831e:	697b      	ldr	r3, [r7, #20]
 8018320:	3318      	adds	r3, #24
 8018322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018324:	6812      	ldr	r2, [r2, #0]
 8018326:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018328:	697b      	ldr	r3, [r7, #20]
 801832a:	2200      	movs	r2, #0
 801832c:	701a      	strb	r2, [r3, #0]
 801832e:	2200      	movs	r2, #0
 8018330:	f042 0201 	orr.w	r2, r2, #1
 8018334:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018336:	697b      	ldr	r3, [r7, #20]
 8018338:	2200      	movs	r2, #0
 801833a:	f042 0208 	orr.w	r2, r2, #8
 801833e:	709a      	strb	r2, [r3, #2]
 8018340:	2200      	movs	r2, #0
 8018342:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018344:	697b      	ldr	r3, [r7, #20]
 8018346:	2206      	movs	r2, #6
 8018348:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801834a:	697b      	ldr	r3, [r7, #20]
 801834c:	2204      	movs	r2, #4
 801834e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018350:	f640 0306 	movw	r3, #2054	; 0x806
 8018354:	9300      	str	r3, [sp, #0]
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	68ba      	ldr	r2, [r7, #8]
 801835a:	69b9      	ldr	r1, [r7, #24]
 801835c:	68f8      	ldr	r0, [r7, #12]
 801835e:	f001 fb8d 	bl	8019a7c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018362:	69b8      	ldr	r0, [r7, #24]
 8018364:	f7f6 f8aa 	bl	800e4bc <pbuf_free>
  p = NULL;
 8018368:	2300      	movs	r3, #0
 801836a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801836c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018370:	4618      	mov	r0, r3
 8018372:	3720      	adds	r7, #32
 8018374:	46bd      	mov	sp, r7
 8018376:	bd80      	pop	{r7, pc}
 8018378:	0801e7f0 	.word	0x0801e7f0
 801837c:	0801e940 	.word	0x0801e940
 8018380:	0801e868 	.word	0x0801e868
 8018384:	0801e9f0 	.word	0x0801e9f0
 8018388:	0801ea24 	.word	0x0801ea24

0801838c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b088      	sub	sp, #32
 8018390:	af04      	add	r7, sp, #16
 8018392:	60f8      	str	r0, [r7, #12]
 8018394:	60b9      	str	r1, [r7, #8]
 8018396:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018398:	68fb      	ldr	r3, [r7, #12]
 801839a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80183a8:	2201      	movs	r2, #1
 80183aa:	9203      	str	r2, [sp, #12]
 80183ac:	68ba      	ldr	r2, [r7, #8]
 80183ae:	9202      	str	r2, [sp, #8]
 80183b0:	4a06      	ldr	r2, [pc, #24]	; (80183cc <etharp_request_dst+0x40>)
 80183b2:	9201      	str	r2, [sp, #4]
 80183b4:	9300      	str	r3, [sp, #0]
 80183b6:	4603      	mov	r3, r0
 80183b8:	687a      	ldr	r2, [r7, #4]
 80183ba:	68f8      	ldr	r0, [r7, #12]
 80183bc:	f7ff ff5a 	bl	8018274 <etharp_raw>
 80183c0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80183c2:	4618      	mov	r0, r3
 80183c4:	3710      	adds	r7, #16
 80183c6:	46bd      	mov	sp, r7
 80183c8:	bd80      	pop	{r7, pc}
 80183ca:	bf00      	nop
 80183cc:	08040284 	.word	0x08040284

080183d0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b082      	sub	sp, #8
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
 80183d8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80183da:	4a05      	ldr	r2, [pc, #20]	; (80183f0 <etharp_request+0x20>)
 80183dc:	6839      	ldr	r1, [r7, #0]
 80183de:	6878      	ldr	r0, [r7, #4]
 80183e0:	f7ff ffd4 	bl	801838c <etharp_request_dst>
 80183e4:	4603      	mov	r3, r0
}
 80183e6:	4618      	mov	r0, r3
 80183e8:	3708      	adds	r7, #8
 80183ea:	46bd      	mov	sp, r7
 80183ec:	bd80      	pop	{r7, pc}
 80183ee:	bf00      	nop
 80183f0:	0804027c 	.word	0x0804027c

080183f4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	b08e      	sub	sp, #56	; 0x38
 80183f8:	af04      	add	r7, sp, #16
 80183fa:	6078      	str	r0, [r7, #4]
 80183fc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80183fe:	4b79      	ldr	r3, [pc, #484]	; (80185e4 <icmp_input+0x1f0>)
 8018400:	689b      	ldr	r3, [r3, #8]
 8018402:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018406:	781b      	ldrb	r3, [r3, #0]
 8018408:	f003 030f 	and.w	r3, r3, #15
 801840c:	b2db      	uxtb	r3, r3
 801840e:	009b      	lsls	r3, r3, #2
 8018410:	b2db      	uxtb	r3, r3
 8018412:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018414:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018416:	2b13      	cmp	r3, #19
 8018418:	f240 80cd 	bls.w	80185b6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	895b      	ldrh	r3, [r3, #10]
 8018420:	2b03      	cmp	r3, #3
 8018422:	f240 80ca 	bls.w	80185ba <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	685b      	ldr	r3, [r3, #4]
 801842a:	781b      	ldrb	r3, [r3, #0]
 801842c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018430:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018434:	2b00      	cmp	r3, #0
 8018436:	f000 80b7 	beq.w	80185a8 <icmp_input+0x1b4>
 801843a:	2b08      	cmp	r3, #8
 801843c:	f040 80b7 	bne.w	80185ae <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018440:	4b69      	ldr	r3, [pc, #420]	; (80185e8 <icmp_input+0x1f4>)
 8018442:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018444:	4b67      	ldr	r3, [pc, #412]	; (80185e4 <icmp_input+0x1f0>)
 8018446:	695b      	ldr	r3, [r3, #20]
 8018448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801844c:	2be0      	cmp	r3, #224	; 0xe0
 801844e:	f000 80bb 	beq.w	80185c8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018452:	4b64      	ldr	r3, [pc, #400]	; (80185e4 <icmp_input+0x1f0>)
 8018454:	695a      	ldr	r2, [r3, #20]
 8018456:	4b63      	ldr	r3, [pc, #396]	; (80185e4 <icmp_input+0x1f0>)
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	4619      	mov	r1, r3
 801845c:	4610      	mov	r0, r2
 801845e:	f000 fc09 	bl	8018c74 <ip4_addr_isbroadcast_u32>
 8018462:	4603      	mov	r3, r0
 8018464:	2b00      	cmp	r3, #0
 8018466:	f040 80b1 	bne.w	80185cc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	891b      	ldrh	r3, [r3, #8]
 801846e:	2b07      	cmp	r3, #7
 8018470:	f240 80a5 	bls.w	80185be <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018474:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018476:	330e      	adds	r3, #14
 8018478:	4619      	mov	r1, r3
 801847a:	6878      	ldr	r0, [r7, #4]
 801847c:	f7f5 ff88 	bl	800e390 <pbuf_add_header>
 8018480:	4603      	mov	r3, r0
 8018482:	2b00      	cmp	r3, #0
 8018484:	d04b      	beq.n	801851e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	891a      	ldrh	r2, [r3, #8]
 801848a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801848c:	4413      	add	r3, r2
 801848e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	891b      	ldrh	r3, [r3, #8]
 8018494:	8b7a      	ldrh	r2, [r7, #26]
 8018496:	429a      	cmp	r2, r3
 8018498:	f0c0 809a 	bcc.w	80185d0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801849c:	8b7b      	ldrh	r3, [r7, #26]
 801849e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80184a2:	4619      	mov	r1, r3
 80184a4:	200e      	movs	r0, #14
 80184a6:	f7f5 fd29 	bl	800defc <pbuf_alloc>
 80184aa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80184ac:	697b      	ldr	r3, [r7, #20]
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	f000 8090 	beq.w	80185d4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80184b4:	697b      	ldr	r3, [r7, #20]
 80184b6:	895b      	ldrh	r3, [r3, #10]
 80184b8:	461a      	mov	r2, r3
 80184ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80184bc:	3308      	adds	r3, #8
 80184be:	429a      	cmp	r2, r3
 80184c0:	d203      	bcs.n	80184ca <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80184c2:	6978      	ldr	r0, [r7, #20]
 80184c4:	f7f5 fffa 	bl	800e4bc <pbuf_free>
          goto icmperr;
 80184c8:	e085      	b.n	80185d6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80184ca:	697b      	ldr	r3, [r7, #20]
 80184cc:	685b      	ldr	r3, [r3, #4]
 80184ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80184d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80184d2:	4618      	mov	r0, r3
 80184d4:	f001 fd03 	bl	8019ede <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80184d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80184da:	4619      	mov	r1, r3
 80184dc:	6978      	ldr	r0, [r7, #20]
 80184de:	f7f5 ff67 	bl	800e3b0 <pbuf_remove_header>
 80184e2:	4603      	mov	r3, r0
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d009      	beq.n	80184fc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80184e8:	4b40      	ldr	r3, [pc, #256]	; (80185ec <icmp_input+0x1f8>)
 80184ea:	22b6      	movs	r2, #182	; 0xb6
 80184ec:	4940      	ldr	r1, [pc, #256]	; (80185f0 <icmp_input+0x1fc>)
 80184ee:	4841      	ldr	r0, [pc, #260]	; (80185f4 <icmp_input+0x200>)
 80184f0:	f001 fd22 	bl	8019f38 <iprintf>
          pbuf_free(r);
 80184f4:	6978      	ldr	r0, [r7, #20]
 80184f6:	f7f5 ffe1 	bl	800e4bc <pbuf_free>
          goto icmperr;
 80184fa:	e06c      	b.n	80185d6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80184fc:	6879      	ldr	r1, [r7, #4]
 80184fe:	6978      	ldr	r0, [r7, #20]
 8018500:	f7f6 f910 	bl	800e724 <pbuf_copy>
 8018504:	4603      	mov	r3, r0
 8018506:	2b00      	cmp	r3, #0
 8018508:	d003      	beq.n	8018512 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801850a:	6978      	ldr	r0, [r7, #20]
 801850c:	f7f5 ffd6 	bl	800e4bc <pbuf_free>
          goto icmperr;
 8018510:	e061      	b.n	80185d6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8018512:	6878      	ldr	r0, [r7, #4]
 8018514:	f7f5 ffd2 	bl	800e4bc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8018518:	697b      	ldr	r3, [r7, #20]
 801851a:	607b      	str	r3, [r7, #4]
 801851c:	e00f      	b.n	801853e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801851e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018520:	330e      	adds	r3, #14
 8018522:	4619      	mov	r1, r3
 8018524:	6878      	ldr	r0, [r7, #4]
 8018526:	f7f5 ff43 	bl	800e3b0 <pbuf_remove_header>
 801852a:	4603      	mov	r3, r0
 801852c:	2b00      	cmp	r3, #0
 801852e:	d006      	beq.n	801853e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018530:	4b2e      	ldr	r3, [pc, #184]	; (80185ec <icmp_input+0x1f8>)
 8018532:	22c7      	movs	r2, #199	; 0xc7
 8018534:	4930      	ldr	r1, [pc, #192]	; (80185f8 <icmp_input+0x204>)
 8018536:	482f      	ldr	r0, [pc, #188]	; (80185f4 <icmp_input+0x200>)
 8018538:	f001 fcfe 	bl	8019f38 <iprintf>
          goto icmperr;
 801853c:	e04b      	b.n	80185d6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	685b      	ldr	r3, [r3, #4]
 8018542:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018544:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018546:	4619      	mov	r1, r3
 8018548:	6878      	ldr	r0, [r7, #4]
 801854a:	f7f5 ff21 	bl	800e390 <pbuf_add_header>
 801854e:	4603      	mov	r3, r0
 8018550:	2b00      	cmp	r3, #0
 8018552:	d12b      	bne.n	80185ac <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	685b      	ldr	r3, [r3, #4]
 8018558:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801855a:	69fb      	ldr	r3, [r7, #28]
 801855c:	681a      	ldr	r2, [r3, #0]
 801855e:	68fb      	ldr	r3, [r7, #12]
 8018560:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018562:	4b20      	ldr	r3, [pc, #128]	; (80185e4 <icmp_input+0x1f0>)
 8018564:	691a      	ldr	r2, [r3, #16]
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801856a:	693b      	ldr	r3, [r7, #16]
 801856c:	2200      	movs	r2, #0
 801856e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8018570:	693b      	ldr	r3, [r7, #16]
 8018572:	2200      	movs	r2, #0
 8018574:	709a      	strb	r2, [r3, #2]
 8018576:	2200      	movs	r2, #0
 8018578:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	22ff      	movs	r2, #255	; 0xff
 801857e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	2200      	movs	r2, #0
 8018584:	729a      	strb	r2, [r3, #10]
 8018586:	2200      	movs	r2, #0
 8018588:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801858a:	683b      	ldr	r3, [r7, #0]
 801858c:	9302      	str	r3, [sp, #8]
 801858e:	2301      	movs	r3, #1
 8018590:	9301      	str	r3, [sp, #4]
 8018592:	2300      	movs	r3, #0
 8018594:	9300      	str	r3, [sp, #0]
 8018596:	23ff      	movs	r3, #255	; 0xff
 8018598:	2200      	movs	r2, #0
 801859a:	69f9      	ldr	r1, [r7, #28]
 801859c:	6878      	ldr	r0, [r7, #4]
 801859e:	f000 fa91 	bl	8018ac4 <ip4_output_if>
 80185a2:	4603      	mov	r3, r0
 80185a4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80185a6:	e001      	b.n	80185ac <icmp_input+0x1b8>
      break;
 80185a8:	bf00      	nop
 80185aa:	e000      	b.n	80185ae <icmp_input+0x1ba>
      break;
 80185ac:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80185ae:	6878      	ldr	r0, [r7, #4]
 80185b0:	f7f5 ff84 	bl	800e4bc <pbuf_free>
  return;
 80185b4:	e013      	b.n	80185de <icmp_input+0x1ea>
    goto lenerr;
 80185b6:	bf00      	nop
 80185b8:	e002      	b.n	80185c0 <icmp_input+0x1cc>
    goto lenerr;
 80185ba:	bf00      	nop
 80185bc:	e000      	b.n	80185c0 <icmp_input+0x1cc>
        goto lenerr;
 80185be:	bf00      	nop
lenerr:
  pbuf_free(p);
 80185c0:	6878      	ldr	r0, [r7, #4]
 80185c2:	f7f5 ff7b 	bl	800e4bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80185c6:	e00a      	b.n	80185de <icmp_input+0x1ea>
        goto icmperr;
 80185c8:	bf00      	nop
 80185ca:	e004      	b.n	80185d6 <icmp_input+0x1e2>
        goto icmperr;
 80185cc:	bf00      	nop
 80185ce:	e002      	b.n	80185d6 <icmp_input+0x1e2>
          goto icmperr;
 80185d0:	bf00      	nop
 80185d2:	e000      	b.n	80185d6 <icmp_input+0x1e2>
          goto icmperr;
 80185d4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80185d6:	6878      	ldr	r0, [r7, #4]
 80185d8:	f7f5 ff70 	bl	800e4bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80185dc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80185de:	3728      	adds	r7, #40	; 0x28
 80185e0:	46bd      	mov	sp, r7
 80185e2:	bd80      	pop	{r7, pc}
 80185e4:	20013770 	.word	0x20013770
 80185e8:	20013784 	.word	0x20013784
 80185ec:	0801ea68 	.word	0x0801ea68
 80185f0:	0801eaa0 	.word	0x0801eaa0
 80185f4:	0801ead8 	.word	0x0801ead8
 80185f8:	0801eb00 	.word	0x0801eb00

080185fc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b082      	sub	sp, #8
 8018600:	af00      	add	r7, sp, #0
 8018602:	6078      	str	r0, [r7, #4]
 8018604:	460b      	mov	r3, r1
 8018606:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018608:	78fb      	ldrb	r3, [r7, #3]
 801860a:	461a      	mov	r2, r3
 801860c:	2103      	movs	r1, #3
 801860e:	6878      	ldr	r0, [r7, #4]
 8018610:	f000 f814 	bl	801863c <icmp_send_response>
}
 8018614:	bf00      	nop
 8018616:	3708      	adds	r7, #8
 8018618:	46bd      	mov	sp, r7
 801861a:	bd80      	pop	{r7, pc}

0801861c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801861c:	b580      	push	{r7, lr}
 801861e:	b082      	sub	sp, #8
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
 8018624:	460b      	mov	r3, r1
 8018626:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018628:	78fb      	ldrb	r3, [r7, #3]
 801862a:	461a      	mov	r2, r3
 801862c:	210b      	movs	r1, #11
 801862e:	6878      	ldr	r0, [r7, #4]
 8018630:	f000 f804 	bl	801863c <icmp_send_response>
}
 8018634:	bf00      	nop
 8018636:	3708      	adds	r7, #8
 8018638:	46bd      	mov	sp, r7
 801863a:	bd80      	pop	{r7, pc}

0801863c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801863c:	b580      	push	{r7, lr}
 801863e:	b08c      	sub	sp, #48	; 0x30
 8018640:	af04      	add	r7, sp, #16
 8018642:	6078      	str	r0, [r7, #4]
 8018644:	460b      	mov	r3, r1
 8018646:	70fb      	strb	r3, [r7, #3]
 8018648:	4613      	mov	r3, r2
 801864a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801864c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018650:	2124      	movs	r1, #36	; 0x24
 8018652:	2022      	movs	r0, #34	; 0x22
 8018654:	f7f5 fc52 	bl	800defc <pbuf_alloc>
 8018658:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801865a:	69fb      	ldr	r3, [r7, #28]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d04c      	beq.n	80186fa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018660:	69fb      	ldr	r3, [r7, #28]
 8018662:	895b      	ldrh	r3, [r3, #10]
 8018664:	2b23      	cmp	r3, #35	; 0x23
 8018666:	d806      	bhi.n	8018676 <icmp_send_response+0x3a>
 8018668:	4b26      	ldr	r3, [pc, #152]	; (8018704 <icmp_send_response+0xc8>)
 801866a:	f240 1269 	movw	r2, #361	; 0x169
 801866e:	4926      	ldr	r1, [pc, #152]	; (8018708 <icmp_send_response+0xcc>)
 8018670:	4826      	ldr	r0, [pc, #152]	; (801870c <icmp_send_response+0xd0>)
 8018672:	f001 fc61 	bl	8019f38 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	685b      	ldr	r3, [r3, #4]
 801867a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801867c:	69fb      	ldr	r3, [r7, #28]
 801867e:	685b      	ldr	r3, [r3, #4]
 8018680:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018682:	697b      	ldr	r3, [r7, #20]
 8018684:	78fa      	ldrb	r2, [r7, #3]
 8018686:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018688:	697b      	ldr	r3, [r7, #20]
 801868a:	78ba      	ldrb	r2, [r7, #2]
 801868c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801868e:	697b      	ldr	r3, [r7, #20]
 8018690:	2200      	movs	r2, #0
 8018692:	711a      	strb	r2, [r3, #4]
 8018694:	2200      	movs	r2, #0
 8018696:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018698:	697b      	ldr	r3, [r7, #20]
 801869a:	2200      	movs	r2, #0
 801869c:	719a      	strb	r2, [r3, #6]
 801869e:	2200      	movs	r2, #0
 80186a0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80186a2:	69fb      	ldr	r3, [r7, #28]
 80186a4:	685b      	ldr	r3, [r3, #4]
 80186a6:	f103 0008 	add.w	r0, r3, #8
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	685b      	ldr	r3, [r3, #4]
 80186ae:	221c      	movs	r2, #28
 80186b0:	4619      	mov	r1, r3
 80186b2:	f001 fc14 	bl	8019ede <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80186b6:	69bb      	ldr	r3, [r7, #24]
 80186b8:	68db      	ldr	r3, [r3, #12]
 80186ba:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80186bc:	f107 030c 	add.w	r3, r7, #12
 80186c0:	4618      	mov	r0, r3
 80186c2:	f000 f825 	bl	8018710 <ip4_route>
 80186c6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80186c8:	693b      	ldr	r3, [r7, #16]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d011      	beq.n	80186f2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80186ce:	697b      	ldr	r3, [r7, #20]
 80186d0:	2200      	movs	r2, #0
 80186d2:	709a      	strb	r2, [r3, #2]
 80186d4:	2200      	movs	r2, #0
 80186d6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80186d8:	f107 020c 	add.w	r2, r7, #12
 80186dc:	693b      	ldr	r3, [r7, #16]
 80186de:	9302      	str	r3, [sp, #8]
 80186e0:	2301      	movs	r3, #1
 80186e2:	9301      	str	r3, [sp, #4]
 80186e4:	2300      	movs	r3, #0
 80186e6:	9300      	str	r3, [sp, #0]
 80186e8:	23ff      	movs	r3, #255	; 0xff
 80186ea:	2100      	movs	r1, #0
 80186ec:	69f8      	ldr	r0, [r7, #28]
 80186ee:	f000 f9e9 	bl	8018ac4 <ip4_output_if>
  }
  pbuf_free(q);
 80186f2:	69f8      	ldr	r0, [r7, #28]
 80186f4:	f7f5 fee2 	bl	800e4bc <pbuf_free>
 80186f8:	e000      	b.n	80186fc <icmp_send_response+0xc0>
    return;
 80186fa:	bf00      	nop
}
 80186fc:	3720      	adds	r7, #32
 80186fe:	46bd      	mov	sp, r7
 8018700:	bd80      	pop	{r7, pc}
 8018702:	bf00      	nop
 8018704:	0801ea68 	.word	0x0801ea68
 8018708:	0801eb34 	.word	0x0801eb34
 801870c:	0801ead8 	.word	0x0801ead8

08018710 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018710:	b480      	push	{r7}
 8018712:	b085      	sub	sp, #20
 8018714:	af00      	add	r7, sp, #0
 8018716:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018718:	4b33      	ldr	r3, [pc, #204]	; (80187e8 <ip4_route+0xd8>)
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	60fb      	str	r3, [r7, #12]
 801871e:	e036      	b.n	801878e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018720:	68fb      	ldr	r3, [r7, #12]
 8018722:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018726:	f003 0301 	and.w	r3, r3, #1
 801872a:	b2db      	uxtb	r3, r3
 801872c:	2b00      	cmp	r3, #0
 801872e:	d02b      	beq.n	8018788 <ip4_route+0x78>
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018736:	089b      	lsrs	r3, r3, #2
 8018738:	f003 0301 	and.w	r3, r3, #1
 801873c:	b2db      	uxtb	r3, r3
 801873e:	2b00      	cmp	r3, #0
 8018740:	d022      	beq.n	8018788 <ip4_route+0x78>
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	3304      	adds	r3, #4
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d01d      	beq.n	8018788 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681a      	ldr	r2, [r3, #0]
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	3304      	adds	r3, #4
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	405a      	eors	r2, r3
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	3308      	adds	r3, #8
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	4013      	ands	r3, r2
 8018760:	2b00      	cmp	r3, #0
 8018762:	d101      	bne.n	8018768 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	e038      	b.n	80187da <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018768:	68fb      	ldr	r3, [r7, #12]
 801876a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801876e:	f003 0302 	and.w	r3, r3, #2
 8018772:	2b00      	cmp	r3, #0
 8018774:	d108      	bne.n	8018788 <ip4_route+0x78>
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	681a      	ldr	r2, [r3, #0]
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	330c      	adds	r3, #12
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	429a      	cmp	r2, r3
 8018782:	d101      	bne.n	8018788 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	e028      	b.n	80187da <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018788:	68fb      	ldr	r3, [r7, #12]
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	60fb      	str	r3, [r7, #12]
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	2b00      	cmp	r3, #0
 8018792:	d1c5      	bne.n	8018720 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018794:	4b15      	ldr	r3, [pc, #84]	; (80187ec <ip4_route+0xdc>)
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d01a      	beq.n	80187d2 <ip4_route+0xc2>
 801879c:	4b13      	ldr	r3, [pc, #76]	; (80187ec <ip4_route+0xdc>)
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80187a4:	f003 0301 	and.w	r3, r3, #1
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d012      	beq.n	80187d2 <ip4_route+0xc2>
 80187ac:	4b0f      	ldr	r3, [pc, #60]	; (80187ec <ip4_route+0xdc>)
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80187b4:	f003 0304 	and.w	r3, r3, #4
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d00a      	beq.n	80187d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80187bc:	4b0b      	ldr	r3, [pc, #44]	; (80187ec <ip4_route+0xdc>)
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	3304      	adds	r3, #4
 80187c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d004      	beq.n	80187d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	b2db      	uxtb	r3, r3
 80187ce:	2b7f      	cmp	r3, #127	; 0x7f
 80187d0:	d101      	bne.n	80187d6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80187d2:	2300      	movs	r3, #0
 80187d4:	e001      	b.n	80187da <ip4_route+0xca>
  }

  return netif_default;
 80187d6:	4b05      	ldr	r3, [pc, #20]	; (80187ec <ip4_route+0xdc>)
 80187d8:	681b      	ldr	r3, [r3, #0]
}
 80187da:	4618      	mov	r0, r3
 80187dc:	3714      	adds	r7, #20
 80187de:	46bd      	mov	sp, r7
 80187e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187e4:	4770      	bx	lr
 80187e6:	bf00      	nop
 80187e8:	20016e94 	.word	0x20016e94
 80187ec:	20016e98 	.word	0x20016e98

080187f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b082      	sub	sp, #8
 80187f4:	af00      	add	r7, sp, #0
 80187f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80187fe:	f003 0301 	and.w	r3, r3, #1
 8018802:	b2db      	uxtb	r3, r3
 8018804:	2b00      	cmp	r3, #0
 8018806:	d016      	beq.n	8018836 <ip4_input_accept+0x46>
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	3304      	adds	r3, #4
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	2b00      	cmp	r3, #0
 8018810:	d011      	beq.n	8018836 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018812:	4b0b      	ldr	r3, [pc, #44]	; (8018840 <ip4_input_accept+0x50>)
 8018814:	695a      	ldr	r2, [r3, #20]
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	3304      	adds	r3, #4
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	429a      	cmp	r2, r3
 801881e:	d008      	beq.n	8018832 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018820:	4b07      	ldr	r3, [pc, #28]	; (8018840 <ip4_input_accept+0x50>)
 8018822:	695b      	ldr	r3, [r3, #20]
 8018824:	6879      	ldr	r1, [r7, #4]
 8018826:	4618      	mov	r0, r3
 8018828:	f000 fa24 	bl	8018c74 <ip4_addr_isbroadcast_u32>
 801882c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801882e:	2b00      	cmp	r3, #0
 8018830:	d001      	beq.n	8018836 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018832:	2301      	movs	r3, #1
 8018834:	e000      	b.n	8018838 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018836:	2300      	movs	r3, #0
}
 8018838:	4618      	mov	r0, r3
 801883a:	3708      	adds	r7, #8
 801883c:	46bd      	mov	sp, r7
 801883e:	bd80      	pop	{r7, pc}
 8018840:	20013770 	.word	0x20013770

08018844 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018844:	b580      	push	{r7, lr}
 8018846:	b088      	sub	sp, #32
 8018848:	af00      	add	r7, sp, #0
 801884a:	6078      	str	r0, [r7, #4]
 801884c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801884e:	2301      	movs	r3, #1
 8018850:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	685b      	ldr	r3, [r3, #4]
 8018856:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8018858:	69fb      	ldr	r3, [r7, #28]
 801885a:	781b      	ldrb	r3, [r3, #0]
 801885c:	091b      	lsrs	r3, r3, #4
 801885e:	b2db      	uxtb	r3, r3
 8018860:	2b04      	cmp	r3, #4
 8018862:	d004      	beq.n	801886e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018864:	6878      	ldr	r0, [r7, #4]
 8018866:	f7f5 fe29 	bl	800e4bc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801886a:	2300      	movs	r3, #0
 801886c:	e121      	b.n	8018ab2 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801886e:	69fb      	ldr	r3, [r7, #28]
 8018870:	781b      	ldrb	r3, [r3, #0]
 8018872:	f003 030f 	and.w	r3, r3, #15
 8018876:	b2db      	uxtb	r3, r3
 8018878:	009b      	lsls	r3, r3, #2
 801887a:	b2db      	uxtb	r3, r3
 801887c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801887e:	69fb      	ldr	r3, [r7, #28]
 8018880:	885b      	ldrh	r3, [r3, #2]
 8018882:	b29b      	uxth	r3, r3
 8018884:	4618      	mov	r0, r3
 8018886:	f7f4 f9fb 	bl	800cc80 <lwip_htons>
 801888a:	4603      	mov	r3, r0
 801888c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	891b      	ldrh	r3, [r3, #8]
 8018892:	8a3a      	ldrh	r2, [r7, #16]
 8018894:	429a      	cmp	r2, r3
 8018896:	d204      	bcs.n	80188a2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8018898:	8a3b      	ldrh	r3, [r7, #16]
 801889a:	4619      	mov	r1, r3
 801889c:	6878      	ldr	r0, [r7, #4]
 801889e:	f7f5 fc87 	bl	800e1b0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	895b      	ldrh	r3, [r3, #10]
 80188a6:	8a7a      	ldrh	r2, [r7, #18]
 80188a8:	429a      	cmp	r2, r3
 80188aa:	d807      	bhi.n	80188bc <ip4_input+0x78>
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	891b      	ldrh	r3, [r3, #8]
 80188b0:	8a3a      	ldrh	r2, [r7, #16]
 80188b2:	429a      	cmp	r2, r3
 80188b4:	d802      	bhi.n	80188bc <ip4_input+0x78>
 80188b6:	8a7b      	ldrh	r3, [r7, #18]
 80188b8:	2b13      	cmp	r3, #19
 80188ba:	d804      	bhi.n	80188c6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80188bc:	6878      	ldr	r0, [r7, #4]
 80188be:	f7f5 fdfd 	bl	800e4bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80188c2:	2300      	movs	r3, #0
 80188c4:	e0f5      	b.n	8018ab2 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80188c6:	69fb      	ldr	r3, [r7, #28]
 80188c8:	691b      	ldr	r3, [r3, #16]
 80188ca:	4a7c      	ldr	r2, [pc, #496]	; (8018abc <ip4_input+0x278>)
 80188cc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80188ce:	69fb      	ldr	r3, [r7, #28]
 80188d0:	68db      	ldr	r3, [r3, #12]
 80188d2:	4a7a      	ldr	r2, [pc, #488]	; (8018abc <ip4_input+0x278>)
 80188d4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80188d6:	4b79      	ldr	r3, [pc, #484]	; (8018abc <ip4_input+0x278>)
 80188d8:	695b      	ldr	r3, [r3, #20]
 80188da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80188de:	2be0      	cmp	r3, #224	; 0xe0
 80188e0:	d112      	bne.n	8018908 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80188e8:	f003 0301 	and.w	r3, r3, #1
 80188ec:	b2db      	uxtb	r3, r3
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d007      	beq.n	8018902 <ip4_input+0xbe>
 80188f2:	683b      	ldr	r3, [r7, #0]
 80188f4:	3304      	adds	r3, #4
 80188f6:	681b      	ldr	r3, [r3, #0]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d002      	beq.n	8018902 <ip4_input+0xbe>
      netif = inp;
 80188fc:	683b      	ldr	r3, [r7, #0]
 80188fe:	61bb      	str	r3, [r7, #24]
 8018900:	e02a      	b.n	8018958 <ip4_input+0x114>
    } else {
      netif = NULL;
 8018902:	2300      	movs	r3, #0
 8018904:	61bb      	str	r3, [r7, #24]
 8018906:	e027      	b.n	8018958 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018908:	6838      	ldr	r0, [r7, #0]
 801890a:	f7ff ff71 	bl	80187f0 <ip4_input_accept>
 801890e:	4603      	mov	r3, r0
 8018910:	2b00      	cmp	r3, #0
 8018912:	d002      	beq.n	801891a <ip4_input+0xd6>
      netif = inp;
 8018914:	683b      	ldr	r3, [r7, #0]
 8018916:	61bb      	str	r3, [r7, #24]
 8018918:	e01e      	b.n	8018958 <ip4_input+0x114>
    } else {
      netif = NULL;
 801891a:	2300      	movs	r3, #0
 801891c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801891e:	4b67      	ldr	r3, [pc, #412]	; (8018abc <ip4_input+0x278>)
 8018920:	695b      	ldr	r3, [r3, #20]
 8018922:	b2db      	uxtb	r3, r3
 8018924:	2b7f      	cmp	r3, #127	; 0x7f
 8018926:	d017      	beq.n	8018958 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018928:	4b65      	ldr	r3, [pc, #404]	; (8018ac0 <ip4_input+0x27c>)
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	61bb      	str	r3, [r7, #24]
 801892e:	e00e      	b.n	801894e <ip4_input+0x10a>
          if (netif == inp) {
 8018930:	69ba      	ldr	r2, [r7, #24]
 8018932:	683b      	ldr	r3, [r7, #0]
 8018934:	429a      	cmp	r2, r3
 8018936:	d006      	beq.n	8018946 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018938:	69b8      	ldr	r0, [r7, #24]
 801893a:	f7ff ff59 	bl	80187f0 <ip4_input_accept>
 801893e:	4603      	mov	r3, r0
 8018940:	2b00      	cmp	r3, #0
 8018942:	d108      	bne.n	8018956 <ip4_input+0x112>
 8018944:	e000      	b.n	8018948 <ip4_input+0x104>
            continue;
 8018946:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018948:	69bb      	ldr	r3, [r7, #24]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	61bb      	str	r3, [r7, #24]
 801894e:	69bb      	ldr	r3, [r7, #24]
 8018950:	2b00      	cmp	r3, #0
 8018952:	d1ed      	bne.n	8018930 <ip4_input+0xec>
 8018954:	e000      	b.n	8018958 <ip4_input+0x114>
            break;
 8018956:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8018958:	69bb      	ldr	r3, [r7, #24]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d111      	bne.n	8018982 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801895e:	69fb      	ldr	r3, [r7, #28]
 8018960:	7a5b      	ldrb	r3, [r3, #9]
 8018962:	2b11      	cmp	r3, #17
 8018964:	d10d      	bne.n	8018982 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8018966:	8a7b      	ldrh	r3, [r7, #18]
 8018968:	69fa      	ldr	r2, [r7, #28]
 801896a:	4413      	add	r3, r2
 801896c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	885b      	ldrh	r3, [r3, #2]
 8018972:	b29b      	uxth	r3, r3
 8018974:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8018978:	d103      	bne.n	8018982 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801897e:	2300      	movs	r3, #0
 8018980:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8018982:	697b      	ldr	r3, [r7, #20]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d017      	beq.n	80189b8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8018988:	4b4c      	ldr	r3, [pc, #304]	; (8018abc <ip4_input+0x278>)
 801898a:	691b      	ldr	r3, [r3, #16]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d013      	beq.n	80189b8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018990:	4b4a      	ldr	r3, [pc, #296]	; (8018abc <ip4_input+0x278>)
 8018992:	691b      	ldr	r3, [r3, #16]
 8018994:	6839      	ldr	r1, [r7, #0]
 8018996:	4618      	mov	r0, r3
 8018998:	f000 f96c 	bl	8018c74 <ip4_addr_isbroadcast_u32>
 801899c:	4603      	mov	r3, r0
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d105      	bne.n	80189ae <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80189a2:	4b46      	ldr	r3, [pc, #280]	; (8018abc <ip4_input+0x278>)
 80189a4:	691b      	ldr	r3, [r3, #16]
 80189a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80189aa:	2be0      	cmp	r3, #224	; 0xe0
 80189ac:	d104      	bne.n	80189b8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80189ae:	6878      	ldr	r0, [r7, #4]
 80189b0:	f7f5 fd84 	bl	800e4bc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80189b4:	2300      	movs	r3, #0
 80189b6:	e07c      	b.n	8018ab2 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80189b8:	69bb      	ldr	r3, [r7, #24]
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d104      	bne.n	80189c8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80189be:	6878      	ldr	r0, [r7, #4]
 80189c0:	f7f5 fd7c 	bl	800e4bc <pbuf_free>
    return ERR_OK;
 80189c4:	2300      	movs	r3, #0
 80189c6:	e074      	b.n	8018ab2 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80189c8:	69fb      	ldr	r3, [r7, #28]
 80189ca:	88db      	ldrh	r3, [r3, #6]
 80189cc:	b29b      	uxth	r3, r3
 80189ce:	461a      	mov	r2, r3
 80189d0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80189d4:	4013      	ands	r3, r2
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d00b      	beq.n	80189f2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80189da:	6878      	ldr	r0, [r7, #4]
 80189dc:	f000 fc90 	bl	8019300 <ip4_reass>
 80189e0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d101      	bne.n	80189ec <ip4_input+0x1a8>
      return ERR_OK;
 80189e8:	2300      	movs	r3, #0
 80189ea:	e062      	b.n	8018ab2 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	685b      	ldr	r3, [r3, #4]
 80189f0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80189f2:	4a32      	ldr	r2, [pc, #200]	; (8018abc <ip4_input+0x278>)
 80189f4:	69bb      	ldr	r3, [r7, #24]
 80189f6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80189f8:	4a30      	ldr	r2, [pc, #192]	; (8018abc <ip4_input+0x278>)
 80189fa:	683b      	ldr	r3, [r7, #0]
 80189fc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80189fe:	4a2f      	ldr	r2, [pc, #188]	; (8018abc <ip4_input+0x278>)
 8018a00:	69fb      	ldr	r3, [r7, #28]
 8018a02:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018a04:	69fb      	ldr	r3, [r7, #28]
 8018a06:	781b      	ldrb	r3, [r3, #0]
 8018a08:	f003 030f 	and.w	r3, r3, #15
 8018a0c:	b2db      	uxtb	r3, r3
 8018a0e:	009b      	lsls	r3, r3, #2
 8018a10:	b2db      	uxtb	r3, r3
 8018a12:	b29a      	uxth	r2, r3
 8018a14:	4b29      	ldr	r3, [pc, #164]	; (8018abc <ip4_input+0x278>)
 8018a16:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018a18:	8a7b      	ldrh	r3, [r7, #18]
 8018a1a:	4619      	mov	r1, r3
 8018a1c:	6878      	ldr	r0, [r7, #4]
 8018a1e:	f7f5 fcc7 	bl	800e3b0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018a22:	69fb      	ldr	r3, [r7, #28]
 8018a24:	7a5b      	ldrb	r3, [r3, #9]
 8018a26:	2b06      	cmp	r3, #6
 8018a28:	d009      	beq.n	8018a3e <ip4_input+0x1fa>
 8018a2a:	2b11      	cmp	r3, #17
 8018a2c:	d002      	beq.n	8018a34 <ip4_input+0x1f0>
 8018a2e:	2b01      	cmp	r3, #1
 8018a30:	d00a      	beq.n	8018a48 <ip4_input+0x204>
 8018a32:	e00e      	b.n	8018a52 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018a34:	6839      	ldr	r1, [r7, #0]
 8018a36:	6878      	ldr	r0, [r7, #4]
 8018a38:	f7fc fac4 	bl	8014fc4 <udp_input>
        break;
 8018a3c:	e026      	b.n	8018a8c <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018a3e:	6839      	ldr	r1, [r7, #0]
 8018a40:	6878      	ldr	r0, [r7, #4]
 8018a42:	f7f7 fe73 	bl	801072c <tcp_input>
        break;
 8018a46:	e021      	b.n	8018a8c <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018a48:	6839      	ldr	r1, [r7, #0]
 8018a4a:	6878      	ldr	r0, [r7, #4]
 8018a4c:	f7ff fcd2 	bl	80183f4 <icmp_input>
        break;
 8018a50:	e01c      	b.n	8018a8c <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018a52:	4b1a      	ldr	r3, [pc, #104]	; (8018abc <ip4_input+0x278>)
 8018a54:	695b      	ldr	r3, [r3, #20]
 8018a56:	69b9      	ldr	r1, [r7, #24]
 8018a58:	4618      	mov	r0, r3
 8018a5a:	f000 f90b 	bl	8018c74 <ip4_addr_isbroadcast_u32>
 8018a5e:	4603      	mov	r3, r0
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d10f      	bne.n	8018a84 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018a64:	4b15      	ldr	r3, [pc, #84]	; (8018abc <ip4_input+0x278>)
 8018a66:	695b      	ldr	r3, [r3, #20]
 8018a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018a6c:	2be0      	cmp	r3, #224	; 0xe0
 8018a6e:	d009      	beq.n	8018a84 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018a70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018a74:	4619      	mov	r1, r3
 8018a76:	6878      	ldr	r0, [r7, #4]
 8018a78:	f7f5 fd0d 	bl	800e496 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018a7c:	2102      	movs	r1, #2
 8018a7e:	6878      	ldr	r0, [r7, #4]
 8018a80:	f7ff fdbc 	bl	80185fc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018a84:	6878      	ldr	r0, [r7, #4]
 8018a86:	f7f5 fd19 	bl	800e4bc <pbuf_free>
        break;
 8018a8a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018a8c:	4b0b      	ldr	r3, [pc, #44]	; (8018abc <ip4_input+0x278>)
 8018a8e:	2200      	movs	r2, #0
 8018a90:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018a92:	4b0a      	ldr	r3, [pc, #40]	; (8018abc <ip4_input+0x278>)
 8018a94:	2200      	movs	r2, #0
 8018a96:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018a98:	4b08      	ldr	r3, [pc, #32]	; (8018abc <ip4_input+0x278>)
 8018a9a:	2200      	movs	r2, #0
 8018a9c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018a9e:	4b07      	ldr	r3, [pc, #28]	; (8018abc <ip4_input+0x278>)
 8018aa0:	2200      	movs	r2, #0
 8018aa2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018aa4:	4b05      	ldr	r3, [pc, #20]	; (8018abc <ip4_input+0x278>)
 8018aa6:	2200      	movs	r2, #0
 8018aa8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018aaa:	4b04      	ldr	r3, [pc, #16]	; (8018abc <ip4_input+0x278>)
 8018aac:	2200      	movs	r2, #0
 8018aae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018ab0:	2300      	movs	r3, #0
}
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	3720      	adds	r7, #32
 8018ab6:	46bd      	mov	sp, r7
 8018ab8:	bd80      	pop	{r7, pc}
 8018aba:	bf00      	nop
 8018abc:	20013770 	.word	0x20013770
 8018ac0:	20016e94 	.word	0x20016e94

08018ac4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018ac4:	b580      	push	{r7, lr}
 8018ac6:	b08a      	sub	sp, #40	; 0x28
 8018ac8:	af04      	add	r7, sp, #16
 8018aca:	60f8      	str	r0, [r7, #12]
 8018acc:	60b9      	str	r1, [r7, #8]
 8018ace:	607a      	str	r2, [r7, #4]
 8018ad0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018ad2:	68bb      	ldr	r3, [r7, #8]
 8018ad4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d009      	beq.n	8018af0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018adc:	68bb      	ldr	r3, [r7, #8]
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d003      	beq.n	8018aea <ip4_output_if+0x26>
 8018ae2:	68bb      	ldr	r3, [r7, #8]
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d102      	bne.n	8018af0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aec:	3304      	adds	r3, #4
 8018aee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018af0:	78fa      	ldrb	r2, [r7, #3]
 8018af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018af4:	9302      	str	r3, [sp, #8]
 8018af6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018afa:	9301      	str	r3, [sp, #4]
 8018afc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018b00:	9300      	str	r3, [sp, #0]
 8018b02:	4613      	mov	r3, r2
 8018b04:	687a      	ldr	r2, [r7, #4]
 8018b06:	6979      	ldr	r1, [r7, #20]
 8018b08:	68f8      	ldr	r0, [r7, #12]
 8018b0a:	f000 f805 	bl	8018b18 <ip4_output_if_src>
 8018b0e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018b10:	4618      	mov	r0, r3
 8018b12:	3718      	adds	r7, #24
 8018b14:	46bd      	mov	sp, r7
 8018b16:	bd80      	pop	{r7, pc}

08018b18 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b088      	sub	sp, #32
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	60f8      	str	r0, [r7, #12]
 8018b20:	60b9      	str	r1, [r7, #8]
 8018b22:	607a      	str	r2, [r7, #4]
 8018b24:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	7b9b      	ldrb	r3, [r3, #14]
 8018b2a:	2b01      	cmp	r3, #1
 8018b2c:	d006      	beq.n	8018b3c <ip4_output_if_src+0x24>
 8018b2e:	4b4b      	ldr	r3, [pc, #300]	; (8018c5c <ip4_output_if_src+0x144>)
 8018b30:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018b34:	494a      	ldr	r1, [pc, #296]	; (8018c60 <ip4_output_if_src+0x148>)
 8018b36:	484b      	ldr	r0, [pc, #300]	; (8018c64 <ip4_output_if_src+0x14c>)
 8018b38:	f001 f9fe 	bl	8019f38 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d060      	beq.n	8018c04 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018b42:	2314      	movs	r3, #20
 8018b44:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018b46:	2114      	movs	r1, #20
 8018b48:	68f8      	ldr	r0, [r7, #12]
 8018b4a:	f7f5 fc21 	bl	800e390 <pbuf_add_header>
 8018b4e:	4603      	mov	r3, r0
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d002      	beq.n	8018b5a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018b54:	f06f 0301 	mvn.w	r3, #1
 8018b58:	e07c      	b.n	8018c54 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	685b      	ldr	r3, [r3, #4]
 8018b5e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	895b      	ldrh	r3, [r3, #10]
 8018b64:	2b13      	cmp	r3, #19
 8018b66:	d806      	bhi.n	8018b76 <ip4_output_if_src+0x5e>
 8018b68:	4b3c      	ldr	r3, [pc, #240]	; (8018c5c <ip4_output_if_src+0x144>)
 8018b6a:	f240 3289 	movw	r2, #905	; 0x389
 8018b6e:	493e      	ldr	r1, [pc, #248]	; (8018c68 <ip4_output_if_src+0x150>)
 8018b70:	483c      	ldr	r0, [pc, #240]	; (8018c64 <ip4_output_if_src+0x14c>)
 8018b72:	f001 f9e1 	bl	8019f38 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018b76:	69fb      	ldr	r3, [r7, #28]
 8018b78:	78fa      	ldrb	r2, [r7, #3]
 8018b7a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018b7c:	69fb      	ldr	r3, [r7, #28]
 8018b7e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018b82:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681a      	ldr	r2, [r3, #0]
 8018b88:	69fb      	ldr	r3, [r7, #28]
 8018b8a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018b8c:	8b7b      	ldrh	r3, [r7, #26]
 8018b8e:	089b      	lsrs	r3, r3, #2
 8018b90:	b29b      	uxth	r3, r3
 8018b92:	b2db      	uxtb	r3, r3
 8018b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b98:	b2da      	uxtb	r2, r3
 8018b9a:	69fb      	ldr	r3, [r7, #28]
 8018b9c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018b9e:	69fb      	ldr	r3, [r7, #28]
 8018ba0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018ba4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	891b      	ldrh	r3, [r3, #8]
 8018baa:	4618      	mov	r0, r3
 8018bac:	f7f4 f868 	bl	800cc80 <lwip_htons>
 8018bb0:	4603      	mov	r3, r0
 8018bb2:	461a      	mov	r2, r3
 8018bb4:	69fb      	ldr	r3, [r7, #28]
 8018bb6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018bb8:	69fb      	ldr	r3, [r7, #28]
 8018bba:	2200      	movs	r2, #0
 8018bbc:	719a      	strb	r2, [r3, #6]
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018bc2:	4b2a      	ldr	r3, [pc, #168]	; (8018c6c <ip4_output_if_src+0x154>)
 8018bc4:	881b      	ldrh	r3, [r3, #0]
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	f7f4 f85a 	bl	800cc80 <lwip_htons>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	461a      	mov	r2, r3
 8018bd0:	69fb      	ldr	r3, [r7, #28]
 8018bd2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018bd4:	4b25      	ldr	r3, [pc, #148]	; (8018c6c <ip4_output_if_src+0x154>)
 8018bd6:	881b      	ldrh	r3, [r3, #0]
 8018bd8:	3301      	adds	r3, #1
 8018bda:	b29a      	uxth	r2, r3
 8018bdc:	4b23      	ldr	r3, [pc, #140]	; (8018c6c <ip4_output_if_src+0x154>)
 8018bde:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018be0:	68bb      	ldr	r3, [r7, #8]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d104      	bne.n	8018bf0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018be6:	4b22      	ldr	r3, [pc, #136]	; (8018c70 <ip4_output_if_src+0x158>)
 8018be8:	681a      	ldr	r2, [r3, #0]
 8018bea:	69fb      	ldr	r3, [r7, #28]
 8018bec:	60da      	str	r2, [r3, #12]
 8018bee:	e003      	b.n	8018bf8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018bf0:	68bb      	ldr	r3, [r7, #8]
 8018bf2:	681a      	ldr	r2, [r3, #0]
 8018bf4:	69fb      	ldr	r3, [r7, #28]
 8018bf6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018bf8:	69fb      	ldr	r3, [r7, #28]
 8018bfa:	2200      	movs	r2, #0
 8018bfc:	729a      	strb	r2, [r3, #10]
 8018bfe:	2200      	movs	r2, #0
 8018c00:	72da      	strb	r2, [r3, #11]
 8018c02:	e00f      	b.n	8018c24 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	895b      	ldrh	r3, [r3, #10]
 8018c08:	2b13      	cmp	r3, #19
 8018c0a:	d802      	bhi.n	8018c12 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018c0c:	f06f 0301 	mvn.w	r3, #1
 8018c10:	e020      	b.n	8018c54 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018c12:	68fb      	ldr	r3, [r7, #12]
 8018c14:	685b      	ldr	r3, [r3, #4]
 8018c16:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018c18:	69fb      	ldr	r3, [r7, #28]
 8018c1a:	691b      	ldr	r3, [r3, #16]
 8018c1c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018c1e:	f107 0314 	add.w	r3, r7, #20
 8018c22:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d00c      	beq.n	8018c46 <ip4_output_if_src+0x12e>
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	891a      	ldrh	r2, [r3, #8]
 8018c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c34:	429a      	cmp	r2, r3
 8018c36:	d906      	bls.n	8018c46 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018c38:	687a      	ldr	r2, [r7, #4]
 8018c3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018c3c:	68f8      	ldr	r0, [r7, #12]
 8018c3e:	f000 fd4b 	bl	80196d8 <ip4_frag>
 8018c42:	4603      	mov	r3, r0
 8018c44:	e006      	b.n	8018c54 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8018c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c48:	695b      	ldr	r3, [r3, #20]
 8018c4a:	687a      	ldr	r2, [r7, #4]
 8018c4c:	68f9      	ldr	r1, [r7, #12]
 8018c4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018c50:	4798      	blx	r3
 8018c52:	4603      	mov	r3, r0
}
 8018c54:	4618      	mov	r0, r3
 8018c56:	3720      	adds	r7, #32
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	bd80      	pop	{r7, pc}
 8018c5c:	0801eb60 	.word	0x0801eb60
 8018c60:	0801eb94 	.word	0x0801eb94
 8018c64:	0801eba0 	.word	0x0801eba0
 8018c68:	0801ebc8 	.word	0x0801ebc8
 8018c6c:	20010426 	.word	0x20010426
 8018c70:	08040274 	.word	0x08040274

08018c74 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8018c74:	b480      	push	{r7}
 8018c76:	b085      	sub	sp, #20
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
 8018c7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c88:	d002      	beq.n	8018c90 <ip4_addr_isbroadcast_u32+0x1c>
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d101      	bne.n	8018c94 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018c90:	2301      	movs	r3, #1
 8018c92:	e02a      	b.n	8018cea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018c94:	683b      	ldr	r3, [r7, #0]
 8018c96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c9a:	f003 0302 	and.w	r3, r3, #2
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d101      	bne.n	8018ca6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018ca2:	2300      	movs	r3, #0
 8018ca4:	e021      	b.n	8018cea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8018ca6:	683b      	ldr	r3, [r7, #0]
 8018ca8:	3304      	adds	r3, #4
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	687a      	ldr	r2, [r7, #4]
 8018cae:	429a      	cmp	r2, r3
 8018cb0:	d101      	bne.n	8018cb6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018cb2:	2300      	movs	r3, #0
 8018cb4:	e019      	b.n	8018cea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8018cb6:	68fa      	ldr	r2, [r7, #12]
 8018cb8:	683b      	ldr	r3, [r7, #0]
 8018cba:	3304      	adds	r3, #4
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	405a      	eors	r2, r3
 8018cc0:	683b      	ldr	r3, [r7, #0]
 8018cc2:	3308      	adds	r3, #8
 8018cc4:	681b      	ldr	r3, [r3, #0]
 8018cc6:	4013      	ands	r3, r2
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d10d      	bne.n	8018ce8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	3308      	adds	r3, #8
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	43da      	mvns	r2, r3
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8018cd8:	683b      	ldr	r3, [r7, #0]
 8018cda:	3308      	adds	r3, #8
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018ce0:	429a      	cmp	r2, r3
 8018ce2:	d101      	bne.n	8018ce8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018ce4:	2301      	movs	r3, #1
 8018ce6:	e000      	b.n	8018cea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8018ce8:	2300      	movs	r3, #0
  }
}
 8018cea:	4618      	mov	r0, r3
 8018cec:	3714      	adds	r7, #20
 8018cee:	46bd      	mov	sp, r7
 8018cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf4:	4770      	bx	lr
	...

08018cf8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	b084      	sub	sp, #16
 8018cfc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018cfe:	2300      	movs	r3, #0
 8018d00:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018d02:	4b12      	ldr	r3, [pc, #72]	; (8018d4c <ip_reass_tmr+0x54>)
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8018d08:	e018      	b.n	8018d3c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	7fdb      	ldrb	r3, [r3, #31]
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d00b      	beq.n	8018d2a <ip_reass_tmr+0x32>
      r->timer--;
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	7fdb      	ldrb	r3, [r3, #31]
 8018d16:	3b01      	subs	r3, #1
 8018d18:	b2da      	uxtb	r2, r3
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	60fb      	str	r3, [r7, #12]
 8018d28:	e008      	b.n	8018d3c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018d2a:	68fb      	ldr	r3, [r7, #12]
 8018d2c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018d34:	68b9      	ldr	r1, [r7, #8]
 8018d36:	6878      	ldr	r0, [r7, #4]
 8018d38:	f000 f80a 	bl	8018d50 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d1e3      	bne.n	8018d0a <ip_reass_tmr+0x12>
    }
  }
}
 8018d42:	bf00      	nop
 8018d44:	3710      	adds	r7, #16
 8018d46:	46bd      	mov	sp, r7
 8018d48:	bd80      	pop	{r7, pc}
 8018d4a:	bf00      	nop
 8018d4c:	20010428 	.word	0x20010428

08018d50 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018d50:	b580      	push	{r7, lr}
 8018d52:	b088      	sub	sp, #32
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
 8018d58:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018d5e:	683a      	ldr	r2, [r7, #0]
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	429a      	cmp	r2, r3
 8018d64:	d105      	bne.n	8018d72 <ip_reass_free_complete_datagram+0x22>
 8018d66:	4b45      	ldr	r3, [pc, #276]	; (8018e7c <ip_reass_free_complete_datagram+0x12c>)
 8018d68:	22ab      	movs	r2, #171	; 0xab
 8018d6a:	4945      	ldr	r1, [pc, #276]	; (8018e80 <ip_reass_free_complete_datagram+0x130>)
 8018d6c:	4845      	ldr	r0, [pc, #276]	; (8018e84 <ip_reass_free_complete_datagram+0x134>)
 8018d6e:	f001 f8e3 	bl	8019f38 <iprintf>
  if (prev != NULL) {
 8018d72:	683b      	ldr	r3, [r7, #0]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d00a      	beq.n	8018d8e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018d78:	683b      	ldr	r3, [r7, #0]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	687a      	ldr	r2, [r7, #4]
 8018d7e:	429a      	cmp	r2, r3
 8018d80:	d005      	beq.n	8018d8e <ip_reass_free_complete_datagram+0x3e>
 8018d82:	4b3e      	ldr	r3, [pc, #248]	; (8018e7c <ip_reass_free_complete_datagram+0x12c>)
 8018d84:	22ad      	movs	r2, #173	; 0xad
 8018d86:	4940      	ldr	r1, [pc, #256]	; (8018e88 <ip_reass_free_complete_datagram+0x138>)
 8018d88:	483e      	ldr	r0, [pc, #248]	; (8018e84 <ip_reass_free_complete_datagram+0x134>)
 8018d8a:	f001 f8d5 	bl	8019f38 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	685b      	ldr	r3, [r3, #4]
 8018d92:	685b      	ldr	r3, [r3, #4]
 8018d94:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018d96:	697b      	ldr	r3, [r7, #20]
 8018d98:	889b      	ldrh	r3, [r3, #4]
 8018d9a:	b29b      	uxth	r3, r3
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d12a      	bne.n	8018df6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	685b      	ldr	r3, [r3, #4]
 8018da4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018da6:	697b      	ldr	r3, [r7, #20]
 8018da8:	681a      	ldr	r2, [r3, #0]
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018dae:	69bb      	ldr	r3, [r7, #24]
 8018db0:	6858      	ldr	r0, [r3, #4]
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	3308      	adds	r3, #8
 8018db6:	2214      	movs	r2, #20
 8018db8:	4619      	mov	r1, r3
 8018dba:	f001 f890 	bl	8019ede <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018dbe:	2101      	movs	r1, #1
 8018dc0:	69b8      	ldr	r0, [r7, #24]
 8018dc2:	f7ff fc2b 	bl	801861c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018dc6:	69b8      	ldr	r0, [r7, #24]
 8018dc8:	f7f5 fc06 	bl	800e5d8 <pbuf_clen>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018dd0:	8bfa      	ldrh	r2, [r7, #30]
 8018dd2:	8a7b      	ldrh	r3, [r7, #18]
 8018dd4:	4413      	add	r3, r2
 8018dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018dda:	db05      	blt.n	8018de8 <ip_reass_free_complete_datagram+0x98>
 8018ddc:	4b27      	ldr	r3, [pc, #156]	; (8018e7c <ip_reass_free_complete_datagram+0x12c>)
 8018dde:	22bc      	movs	r2, #188	; 0xbc
 8018de0:	492a      	ldr	r1, [pc, #168]	; (8018e8c <ip_reass_free_complete_datagram+0x13c>)
 8018de2:	4828      	ldr	r0, [pc, #160]	; (8018e84 <ip_reass_free_complete_datagram+0x134>)
 8018de4:	f001 f8a8 	bl	8019f38 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018de8:	8bfa      	ldrh	r2, [r7, #30]
 8018dea:	8a7b      	ldrh	r3, [r7, #18]
 8018dec:	4413      	add	r3, r2
 8018dee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018df0:	69b8      	ldr	r0, [r7, #24]
 8018df2:	f7f5 fb63 	bl	800e4bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	685b      	ldr	r3, [r3, #4]
 8018dfa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018dfc:	e01f      	b.n	8018e3e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018dfe:	69bb      	ldr	r3, [r7, #24]
 8018e00:	685b      	ldr	r3, [r3, #4]
 8018e02:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018e04:	69bb      	ldr	r3, [r7, #24]
 8018e06:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018e08:	697b      	ldr	r3, [r7, #20]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018e0e:	68f8      	ldr	r0, [r7, #12]
 8018e10:	f7f5 fbe2 	bl	800e5d8 <pbuf_clen>
 8018e14:	4603      	mov	r3, r0
 8018e16:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018e18:	8bfa      	ldrh	r2, [r7, #30]
 8018e1a:	8a7b      	ldrh	r3, [r7, #18]
 8018e1c:	4413      	add	r3, r2
 8018e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018e22:	db05      	blt.n	8018e30 <ip_reass_free_complete_datagram+0xe0>
 8018e24:	4b15      	ldr	r3, [pc, #84]	; (8018e7c <ip_reass_free_complete_datagram+0x12c>)
 8018e26:	22cc      	movs	r2, #204	; 0xcc
 8018e28:	4918      	ldr	r1, [pc, #96]	; (8018e8c <ip_reass_free_complete_datagram+0x13c>)
 8018e2a:	4816      	ldr	r0, [pc, #88]	; (8018e84 <ip_reass_free_complete_datagram+0x134>)
 8018e2c:	f001 f884 	bl	8019f38 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018e30:	8bfa      	ldrh	r2, [r7, #30]
 8018e32:	8a7b      	ldrh	r3, [r7, #18]
 8018e34:	4413      	add	r3, r2
 8018e36:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018e38:	68f8      	ldr	r0, [r7, #12]
 8018e3a:	f7f5 fb3f 	bl	800e4bc <pbuf_free>
  while (p != NULL) {
 8018e3e:	69bb      	ldr	r3, [r7, #24]
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d1dc      	bne.n	8018dfe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018e44:	6839      	ldr	r1, [r7, #0]
 8018e46:	6878      	ldr	r0, [r7, #4]
 8018e48:	f000 f8c2 	bl	8018fd0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018e4c:	4b10      	ldr	r3, [pc, #64]	; (8018e90 <ip_reass_free_complete_datagram+0x140>)
 8018e4e:	881b      	ldrh	r3, [r3, #0]
 8018e50:	8bfa      	ldrh	r2, [r7, #30]
 8018e52:	429a      	cmp	r2, r3
 8018e54:	d905      	bls.n	8018e62 <ip_reass_free_complete_datagram+0x112>
 8018e56:	4b09      	ldr	r3, [pc, #36]	; (8018e7c <ip_reass_free_complete_datagram+0x12c>)
 8018e58:	22d2      	movs	r2, #210	; 0xd2
 8018e5a:	490e      	ldr	r1, [pc, #56]	; (8018e94 <ip_reass_free_complete_datagram+0x144>)
 8018e5c:	4809      	ldr	r0, [pc, #36]	; (8018e84 <ip_reass_free_complete_datagram+0x134>)
 8018e5e:	f001 f86b 	bl	8019f38 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018e62:	4b0b      	ldr	r3, [pc, #44]	; (8018e90 <ip_reass_free_complete_datagram+0x140>)
 8018e64:	881a      	ldrh	r2, [r3, #0]
 8018e66:	8bfb      	ldrh	r3, [r7, #30]
 8018e68:	1ad3      	subs	r3, r2, r3
 8018e6a:	b29a      	uxth	r2, r3
 8018e6c:	4b08      	ldr	r3, [pc, #32]	; (8018e90 <ip_reass_free_complete_datagram+0x140>)
 8018e6e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018e70:	8bfb      	ldrh	r3, [r7, #30]
}
 8018e72:	4618      	mov	r0, r3
 8018e74:	3720      	adds	r7, #32
 8018e76:	46bd      	mov	sp, r7
 8018e78:	bd80      	pop	{r7, pc}
 8018e7a:	bf00      	nop
 8018e7c:	0801ebf8 	.word	0x0801ebf8
 8018e80:	0801ec34 	.word	0x0801ec34
 8018e84:	0801ec40 	.word	0x0801ec40
 8018e88:	0801ec68 	.word	0x0801ec68
 8018e8c:	0801ec7c 	.word	0x0801ec7c
 8018e90:	2001042c 	.word	0x2001042c
 8018e94:	0801ec9c 	.word	0x0801ec9c

08018e98 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018e98:	b580      	push	{r7, lr}
 8018e9a:	b08a      	sub	sp, #40	; 0x28
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	6078      	str	r0, [r7, #4]
 8018ea0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018ea6:	2300      	movs	r3, #0
 8018ea8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018eaa:	2300      	movs	r3, #0
 8018eac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018eae:	2300      	movs	r3, #0
 8018eb0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018eb2:	2300      	movs	r3, #0
 8018eb4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018eb6:	4b28      	ldr	r3, [pc, #160]	; (8018f58 <ip_reass_remove_oldest_datagram+0xc0>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018ebc:	e030      	b.n	8018f20 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ec0:	695a      	ldr	r2, [r3, #20]
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	68db      	ldr	r3, [r3, #12]
 8018ec6:	429a      	cmp	r2, r3
 8018ec8:	d10c      	bne.n	8018ee4 <ip_reass_remove_oldest_datagram+0x4c>
 8018eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ecc:	699a      	ldr	r2, [r3, #24]
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	691b      	ldr	r3, [r3, #16]
 8018ed2:	429a      	cmp	r2, r3
 8018ed4:	d106      	bne.n	8018ee4 <ip_reass_remove_oldest_datagram+0x4c>
 8018ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ed8:	899a      	ldrh	r2, [r3, #12]
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	889b      	ldrh	r3, [r3, #4]
 8018ede:	b29b      	uxth	r3, r3
 8018ee0:	429a      	cmp	r2, r3
 8018ee2:	d014      	beq.n	8018f0e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018ee4:	693b      	ldr	r3, [r7, #16]
 8018ee6:	3301      	adds	r3, #1
 8018ee8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018eea:	6a3b      	ldr	r3, [r7, #32]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d104      	bne.n	8018efa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ef2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018ef4:	69fb      	ldr	r3, [r7, #28]
 8018ef6:	61bb      	str	r3, [r7, #24]
 8018ef8:	e009      	b.n	8018f0e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018efc:	7fda      	ldrb	r2, [r3, #31]
 8018efe:	6a3b      	ldr	r3, [r7, #32]
 8018f00:	7fdb      	ldrb	r3, [r3, #31]
 8018f02:	429a      	cmp	r2, r3
 8018f04:	d803      	bhi.n	8018f0e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f08:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018f0a:	69fb      	ldr	r3, [r7, #28]
 8018f0c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f10:	681b      	ldr	r3, [r3, #0]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d001      	beq.n	8018f1a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f18:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d1cb      	bne.n	8018ebe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018f26:	6a3b      	ldr	r3, [r7, #32]
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d008      	beq.n	8018f3e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018f2c:	69b9      	ldr	r1, [r7, #24]
 8018f2e:	6a38      	ldr	r0, [r7, #32]
 8018f30:	f7ff ff0e 	bl	8018d50 <ip_reass_free_complete_datagram>
 8018f34:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018f36:	697a      	ldr	r2, [r7, #20]
 8018f38:	68fb      	ldr	r3, [r7, #12]
 8018f3a:	4413      	add	r3, r2
 8018f3c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018f3e:	697a      	ldr	r2, [r7, #20]
 8018f40:	683b      	ldr	r3, [r7, #0]
 8018f42:	429a      	cmp	r2, r3
 8018f44:	da02      	bge.n	8018f4c <ip_reass_remove_oldest_datagram+0xb4>
 8018f46:	693b      	ldr	r3, [r7, #16]
 8018f48:	2b01      	cmp	r3, #1
 8018f4a:	dcac      	bgt.n	8018ea6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018f4c:	697b      	ldr	r3, [r7, #20]
}
 8018f4e:	4618      	mov	r0, r3
 8018f50:	3728      	adds	r7, #40	; 0x28
 8018f52:	46bd      	mov	sp, r7
 8018f54:	bd80      	pop	{r7, pc}
 8018f56:	bf00      	nop
 8018f58:	20010428 	.word	0x20010428

08018f5c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018f5c:	b580      	push	{r7, lr}
 8018f5e:	b084      	sub	sp, #16
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	6078      	str	r0, [r7, #4]
 8018f64:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018f66:	2004      	movs	r0, #4
 8018f68:	f7f4 fbaa 	bl	800d6c0 <memp_malloc>
 8018f6c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d110      	bne.n	8018f96 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018f74:	6839      	ldr	r1, [r7, #0]
 8018f76:	6878      	ldr	r0, [r7, #4]
 8018f78:	f7ff ff8e 	bl	8018e98 <ip_reass_remove_oldest_datagram>
 8018f7c:	4602      	mov	r2, r0
 8018f7e:	683b      	ldr	r3, [r7, #0]
 8018f80:	4293      	cmp	r3, r2
 8018f82:	dc03      	bgt.n	8018f8c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018f84:	2004      	movs	r0, #4
 8018f86:	f7f4 fb9b 	bl	800d6c0 <memp_malloc>
 8018f8a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d101      	bne.n	8018f96 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018f92:	2300      	movs	r3, #0
 8018f94:	e016      	b.n	8018fc4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018f96:	2220      	movs	r2, #32
 8018f98:	2100      	movs	r1, #0
 8018f9a:	68f8      	ldr	r0, [r7, #12]
 8018f9c:	f000 ffc3 	bl	8019f26 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	220f      	movs	r2, #15
 8018fa4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018fa6:	4b09      	ldr	r3, [pc, #36]	; (8018fcc <ip_reass_enqueue_new_datagram+0x70>)
 8018fa8:	681a      	ldr	r2, [r3, #0]
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018fae:	4a07      	ldr	r2, [pc, #28]	; (8018fcc <ip_reass_enqueue_new_datagram+0x70>)
 8018fb0:	68fb      	ldr	r3, [r7, #12]
 8018fb2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	3308      	adds	r3, #8
 8018fb8:	2214      	movs	r2, #20
 8018fba:	6879      	ldr	r1, [r7, #4]
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	f000 ff8e 	bl	8019ede <memcpy>
  return ipr;
 8018fc2:	68fb      	ldr	r3, [r7, #12]
}
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	3710      	adds	r7, #16
 8018fc8:	46bd      	mov	sp, r7
 8018fca:	bd80      	pop	{r7, pc}
 8018fcc:	20010428 	.word	0x20010428

08018fd0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018fd0:	b580      	push	{r7, lr}
 8018fd2:	b082      	sub	sp, #8
 8018fd4:	af00      	add	r7, sp, #0
 8018fd6:	6078      	str	r0, [r7, #4]
 8018fd8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018fda:	4b10      	ldr	r3, [pc, #64]	; (801901c <ip_reass_dequeue_datagram+0x4c>)
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	687a      	ldr	r2, [r7, #4]
 8018fe0:	429a      	cmp	r2, r3
 8018fe2:	d104      	bne.n	8018fee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	4a0c      	ldr	r2, [pc, #48]	; (801901c <ip_reass_dequeue_datagram+0x4c>)
 8018fea:	6013      	str	r3, [r2, #0]
 8018fec:	e00d      	b.n	801900a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018fee:	683b      	ldr	r3, [r7, #0]
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	d106      	bne.n	8019002 <ip_reass_dequeue_datagram+0x32>
 8018ff4:	4b0a      	ldr	r3, [pc, #40]	; (8019020 <ip_reass_dequeue_datagram+0x50>)
 8018ff6:	f240 1245 	movw	r2, #325	; 0x145
 8018ffa:	490a      	ldr	r1, [pc, #40]	; (8019024 <ip_reass_dequeue_datagram+0x54>)
 8018ffc:	480a      	ldr	r0, [pc, #40]	; (8019028 <ip_reass_dequeue_datagram+0x58>)
 8018ffe:	f000 ff9b 	bl	8019f38 <iprintf>
    prev->next = ipr->next;
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	681a      	ldr	r2, [r3, #0]
 8019006:	683b      	ldr	r3, [r7, #0]
 8019008:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801900a:	6879      	ldr	r1, [r7, #4]
 801900c:	2004      	movs	r0, #4
 801900e:	f7f4 fba9 	bl	800d764 <memp_free>
}
 8019012:	bf00      	nop
 8019014:	3708      	adds	r7, #8
 8019016:	46bd      	mov	sp, r7
 8019018:	bd80      	pop	{r7, pc}
 801901a:	bf00      	nop
 801901c:	20010428 	.word	0x20010428
 8019020:	0801ebf8 	.word	0x0801ebf8
 8019024:	0801ecc0 	.word	0x0801ecc0
 8019028:	0801ec40 	.word	0x0801ec40

0801902c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801902c:	b580      	push	{r7, lr}
 801902e:	b08c      	sub	sp, #48	; 0x30
 8019030:	af00      	add	r7, sp, #0
 8019032:	60f8      	str	r0, [r7, #12]
 8019034:	60b9      	str	r1, [r7, #8]
 8019036:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019038:	2300      	movs	r3, #0
 801903a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801903c:	2301      	movs	r3, #1
 801903e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019040:	68bb      	ldr	r3, [r7, #8]
 8019042:	685b      	ldr	r3, [r3, #4]
 8019044:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019046:	69fb      	ldr	r3, [r7, #28]
 8019048:	885b      	ldrh	r3, [r3, #2]
 801904a:	b29b      	uxth	r3, r3
 801904c:	4618      	mov	r0, r3
 801904e:	f7f3 fe17 	bl	800cc80 <lwip_htons>
 8019052:	4603      	mov	r3, r0
 8019054:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019056:	69fb      	ldr	r3, [r7, #28]
 8019058:	781b      	ldrb	r3, [r3, #0]
 801905a:	f003 030f 	and.w	r3, r3, #15
 801905e:	b2db      	uxtb	r3, r3
 8019060:	009b      	lsls	r3, r3, #2
 8019062:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019064:	7e7b      	ldrb	r3, [r7, #25]
 8019066:	b29b      	uxth	r3, r3
 8019068:	8b7a      	ldrh	r2, [r7, #26]
 801906a:	429a      	cmp	r2, r3
 801906c:	d202      	bcs.n	8019074 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801906e:	f04f 33ff 	mov.w	r3, #4294967295
 8019072:	e135      	b.n	80192e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019074:	7e7b      	ldrb	r3, [r7, #25]
 8019076:	b29b      	uxth	r3, r3
 8019078:	8b7a      	ldrh	r2, [r7, #26]
 801907a:	1ad3      	subs	r3, r2, r3
 801907c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801907e:	69fb      	ldr	r3, [r7, #28]
 8019080:	88db      	ldrh	r3, [r3, #6]
 8019082:	b29b      	uxth	r3, r3
 8019084:	4618      	mov	r0, r3
 8019086:	f7f3 fdfb 	bl	800cc80 <lwip_htons>
 801908a:	4603      	mov	r3, r0
 801908c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019090:	b29b      	uxth	r3, r3
 8019092:	00db      	lsls	r3, r3, #3
 8019094:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019096:	68bb      	ldr	r3, [r7, #8]
 8019098:	685b      	ldr	r3, [r3, #4]
 801909a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801909c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801909e:	2200      	movs	r2, #0
 80190a0:	701a      	strb	r2, [r3, #0]
 80190a2:	2200      	movs	r2, #0
 80190a4:	705a      	strb	r2, [r3, #1]
 80190a6:	2200      	movs	r2, #0
 80190a8:	709a      	strb	r2, [r3, #2]
 80190aa:	2200      	movs	r2, #0
 80190ac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80190ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190b0:	8afa      	ldrh	r2, [r7, #22]
 80190b2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80190b4:	8afa      	ldrh	r2, [r7, #22]
 80190b6:	8b7b      	ldrh	r3, [r7, #26]
 80190b8:	4413      	add	r3, r2
 80190ba:	b29a      	uxth	r2, r3
 80190bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190be:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80190c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190c2:	88db      	ldrh	r3, [r3, #6]
 80190c4:	b29b      	uxth	r3, r3
 80190c6:	8afa      	ldrh	r2, [r7, #22]
 80190c8:	429a      	cmp	r2, r3
 80190ca:	d902      	bls.n	80190d2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80190cc:	f04f 33ff 	mov.w	r3, #4294967295
 80190d0:	e106      	b.n	80192e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80190d2:	68fb      	ldr	r3, [r7, #12]
 80190d4:	685b      	ldr	r3, [r3, #4]
 80190d6:	627b      	str	r3, [r7, #36]	; 0x24
 80190d8:	e068      	b.n	80191ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80190da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190dc:	685b      	ldr	r3, [r3, #4]
 80190de:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80190e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190e2:	889b      	ldrh	r3, [r3, #4]
 80190e4:	b29a      	uxth	r2, r3
 80190e6:	693b      	ldr	r3, [r7, #16]
 80190e8:	889b      	ldrh	r3, [r3, #4]
 80190ea:	b29b      	uxth	r3, r3
 80190ec:	429a      	cmp	r2, r3
 80190ee:	d235      	bcs.n	801915c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80190f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80190f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80190f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d020      	beq.n	801913e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80190fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80190fe:	889b      	ldrh	r3, [r3, #4]
 8019100:	b29a      	uxth	r2, r3
 8019102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019104:	88db      	ldrh	r3, [r3, #6]
 8019106:	b29b      	uxth	r3, r3
 8019108:	429a      	cmp	r2, r3
 801910a:	d307      	bcc.n	801911c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801910c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801910e:	88db      	ldrh	r3, [r3, #6]
 8019110:	b29a      	uxth	r2, r3
 8019112:	693b      	ldr	r3, [r7, #16]
 8019114:	889b      	ldrh	r3, [r3, #4]
 8019116:	b29b      	uxth	r3, r3
 8019118:	429a      	cmp	r2, r3
 801911a:	d902      	bls.n	8019122 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801911c:	f04f 33ff 	mov.w	r3, #4294967295
 8019120:	e0de      	b.n	80192e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019124:	68ba      	ldr	r2, [r7, #8]
 8019126:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801912a:	88db      	ldrh	r3, [r3, #6]
 801912c:	b29a      	uxth	r2, r3
 801912e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019130:	889b      	ldrh	r3, [r3, #4]
 8019132:	b29b      	uxth	r3, r3
 8019134:	429a      	cmp	r2, r3
 8019136:	d03d      	beq.n	80191b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019138:	2300      	movs	r3, #0
 801913a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801913c:	e03a      	b.n	80191b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801913e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019140:	88db      	ldrh	r3, [r3, #6]
 8019142:	b29a      	uxth	r2, r3
 8019144:	693b      	ldr	r3, [r7, #16]
 8019146:	889b      	ldrh	r3, [r3, #4]
 8019148:	b29b      	uxth	r3, r3
 801914a:	429a      	cmp	r2, r3
 801914c:	d902      	bls.n	8019154 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801914e:	f04f 33ff 	mov.w	r3, #4294967295
 8019152:	e0c5      	b.n	80192e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	68ba      	ldr	r2, [r7, #8]
 8019158:	605a      	str	r2, [r3, #4]
      break;
 801915a:	e02b      	b.n	80191b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801915c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801915e:	889b      	ldrh	r3, [r3, #4]
 8019160:	b29a      	uxth	r2, r3
 8019162:	693b      	ldr	r3, [r7, #16]
 8019164:	889b      	ldrh	r3, [r3, #4]
 8019166:	b29b      	uxth	r3, r3
 8019168:	429a      	cmp	r2, r3
 801916a:	d102      	bne.n	8019172 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801916c:	f04f 33ff 	mov.w	r3, #4294967295
 8019170:	e0b6      	b.n	80192e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019174:	889b      	ldrh	r3, [r3, #4]
 8019176:	b29a      	uxth	r2, r3
 8019178:	693b      	ldr	r3, [r7, #16]
 801917a:	88db      	ldrh	r3, [r3, #6]
 801917c:	b29b      	uxth	r3, r3
 801917e:	429a      	cmp	r2, r3
 8019180:	d202      	bcs.n	8019188 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019182:	f04f 33ff 	mov.w	r3, #4294967295
 8019186:	e0ab      	b.n	80192e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801918a:	2b00      	cmp	r3, #0
 801918c:	d009      	beq.n	80191a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019190:	88db      	ldrh	r3, [r3, #6]
 8019192:	b29a      	uxth	r2, r3
 8019194:	693b      	ldr	r3, [r7, #16]
 8019196:	889b      	ldrh	r3, [r3, #4]
 8019198:	b29b      	uxth	r3, r3
 801919a:	429a      	cmp	r2, r3
 801919c:	d001      	beq.n	80191a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801919e:	2300      	movs	r3, #0
 80191a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80191a2:	693b      	ldr	r3, [r7, #16]
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80191a8:	693b      	ldr	r3, [r7, #16]
 80191aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80191ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d193      	bne.n	80190da <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80191b2:	e000      	b.n	80191b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80191b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80191b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191b8:	2b00      	cmp	r3, #0
 80191ba:	d12d      	bne.n	8019218 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80191bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d01c      	beq.n	80191fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80191c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191c4:	88db      	ldrh	r3, [r3, #6]
 80191c6:	b29a      	uxth	r2, r3
 80191c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191ca:	889b      	ldrh	r3, [r3, #4]
 80191cc:	b29b      	uxth	r3, r3
 80191ce:	429a      	cmp	r2, r3
 80191d0:	d906      	bls.n	80191e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80191d2:	4b45      	ldr	r3, [pc, #276]	; (80192e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80191d4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80191d8:	4944      	ldr	r1, [pc, #272]	; (80192ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80191da:	4845      	ldr	r0, [pc, #276]	; (80192f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80191dc:	f000 feac 	bl	8019f38 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80191e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191e2:	68ba      	ldr	r2, [r7, #8]
 80191e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80191e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191e8:	88db      	ldrh	r3, [r3, #6]
 80191ea:	b29a      	uxth	r2, r3
 80191ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80191ee:	889b      	ldrh	r3, [r3, #4]
 80191f0:	b29b      	uxth	r3, r3
 80191f2:	429a      	cmp	r2, r3
 80191f4:	d010      	beq.n	8019218 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80191f6:	2300      	movs	r3, #0
 80191f8:	623b      	str	r3, [r7, #32]
 80191fa:	e00d      	b.n	8019218 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	685b      	ldr	r3, [r3, #4]
 8019200:	2b00      	cmp	r3, #0
 8019202:	d006      	beq.n	8019212 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019204:	4b38      	ldr	r3, [pc, #224]	; (80192e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019206:	f240 12bf 	movw	r2, #447	; 0x1bf
 801920a:	493a      	ldr	r1, [pc, #232]	; (80192f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801920c:	4838      	ldr	r0, [pc, #224]	; (80192f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801920e:	f000 fe93 	bl	8019f38 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	68ba      	ldr	r2, [r7, #8]
 8019216:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	2b00      	cmp	r3, #0
 801921c:	d105      	bne.n	801922a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	7f9b      	ldrb	r3, [r3, #30]
 8019222:	f003 0301 	and.w	r3, r3, #1
 8019226:	2b00      	cmp	r3, #0
 8019228:	d059      	beq.n	80192de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801922a:	6a3b      	ldr	r3, [r7, #32]
 801922c:	2b00      	cmp	r3, #0
 801922e:	d04f      	beq.n	80192d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	685b      	ldr	r3, [r3, #4]
 8019234:	2b00      	cmp	r3, #0
 8019236:	d006      	beq.n	8019246 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019238:	68fb      	ldr	r3, [r7, #12]
 801923a:	685b      	ldr	r3, [r3, #4]
 801923c:	685b      	ldr	r3, [r3, #4]
 801923e:	889b      	ldrh	r3, [r3, #4]
 8019240:	b29b      	uxth	r3, r3
 8019242:	2b00      	cmp	r3, #0
 8019244:	d002      	beq.n	801924c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019246:	2300      	movs	r3, #0
 8019248:	623b      	str	r3, [r7, #32]
 801924a:	e041      	b.n	80192d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801924c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801924e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019256:	e012      	b.n	801927e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801925a:	685b      	ldr	r3, [r3, #4]
 801925c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801925e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019260:	88db      	ldrh	r3, [r3, #6]
 8019262:	b29a      	uxth	r2, r3
 8019264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019266:	889b      	ldrh	r3, [r3, #4]
 8019268:	b29b      	uxth	r3, r3
 801926a:	429a      	cmp	r2, r3
 801926c:	d002      	beq.n	8019274 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801926e:	2300      	movs	r3, #0
 8019270:	623b      	str	r3, [r7, #32]
            break;
 8019272:	e007      	b.n	8019284 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019276:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801927e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019280:	2b00      	cmp	r3, #0
 8019282:	d1e9      	bne.n	8019258 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019284:	6a3b      	ldr	r3, [r7, #32]
 8019286:	2b00      	cmp	r3, #0
 8019288:	d022      	beq.n	80192d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	685b      	ldr	r3, [r3, #4]
 801928e:	2b00      	cmp	r3, #0
 8019290:	d106      	bne.n	80192a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019292:	4b15      	ldr	r3, [pc, #84]	; (80192e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019294:	f240 12df 	movw	r2, #479	; 0x1df
 8019298:	4917      	ldr	r1, [pc, #92]	; (80192f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801929a:	4815      	ldr	r0, [pc, #84]	; (80192f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801929c:	f000 fe4c 	bl	8019f38 <iprintf>
          LWIP_ASSERT("sanity check",
 80192a0:	68fb      	ldr	r3, [r7, #12]
 80192a2:	685b      	ldr	r3, [r3, #4]
 80192a4:	685b      	ldr	r3, [r3, #4]
 80192a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80192a8:	429a      	cmp	r2, r3
 80192aa:	d106      	bne.n	80192ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80192ac:	4b0e      	ldr	r3, [pc, #56]	; (80192e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80192ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 80192b2:	4911      	ldr	r1, [pc, #68]	; (80192f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80192b4:	480e      	ldr	r0, [pc, #56]	; (80192f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80192b6:	f000 fe3f 	bl	8019f38 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80192ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d006      	beq.n	80192d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80192c2:	4b09      	ldr	r3, [pc, #36]	; (80192e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80192c4:	f240 12e3 	movw	r2, #483	; 0x1e3
 80192c8:	490c      	ldr	r1, [pc, #48]	; (80192fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80192ca:	4809      	ldr	r0, [pc, #36]	; (80192f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80192cc:	f000 fe34 	bl	8019f38 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80192d0:	6a3b      	ldr	r3, [r7, #32]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	bf14      	ite	ne
 80192d6:	2301      	movne	r3, #1
 80192d8:	2300      	moveq	r3, #0
 80192da:	b2db      	uxtb	r3, r3
 80192dc:	e000      	b.n	80192e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80192de:	2300      	movs	r3, #0
}
 80192e0:	4618      	mov	r0, r3
 80192e2:	3730      	adds	r7, #48	; 0x30
 80192e4:	46bd      	mov	sp, r7
 80192e6:	bd80      	pop	{r7, pc}
 80192e8:	0801ebf8 	.word	0x0801ebf8
 80192ec:	0801ecdc 	.word	0x0801ecdc
 80192f0:	0801ec40 	.word	0x0801ec40
 80192f4:	0801ecfc 	.word	0x0801ecfc
 80192f8:	0801ed34 	.word	0x0801ed34
 80192fc:	0801ed44 	.word	0x0801ed44

08019300 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019300:	b580      	push	{r7, lr}
 8019302:	b08e      	sub	sp, #56	; 0x38
 8019304:	af00      	add	r7, sp, #0
 8019306:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	685b      	ldr	r3, [r3, #4]
 801930c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801930e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019310:	781b      	ldrb	r3, [r3, #0]
 8019312:	f003 030f 	and.w	r3, r3, #15
 8019316:	b2db      	uxtb	r3, r3
 8019318:	009b      	lsls	r3, r3, #2
 801931a:	b2db      	uxtb	r3, r3
 801931c:	2b14      	cmp	r3, #20
 801931e:	f040 8167 	bne.w	80195f0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8019322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019324:	88db      	ldrh	r3, [r3, #6]
 8019326:	b29b      	uxth	r3, r3
 8019328:	4618      	mov	r0, r3
 801932a:	f7f3 fca9 	bl	800cc80 <lwip_htons>
 801932e:	4603      	mov	r3, r0
 8019330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019334:	b29b      	uxth	r3, r3
 8019336:	00db      	lsls	r3, r3, #3
 8019338:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801933c:	885b      	ldrh	r3, [r3, #2]
 801933e:	b29b      	uxth	r3, r3
 8019340:	4618      	mov	r0, r3
 8019342:	f7f3 fc9d 	bl	800cc80 <lwip_htons>
 8019346:	4603      	mov	r3, r0
 8019348:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801934c:	781b      	ldrb	r3, [r3, #0]
 801934e:	f003 030f 	and.w	r3, r3, #15
 8019352:	b2db      	uxtb	r3, r3
 8019354:	009b      	lsls	r3, r3, #2
 8019356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801935a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801935e:	b29b      	uxth	r3, r3
 8019360:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019362:	429a      	cmp	r2, r3
 8019364:	f0c0 8146 	bcc.w	80195f4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801936c:	b29b      	uxth	r3, r3
 801936e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019370:	1ad3      	subs	r3, r2, r3
 8019372:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019374:	6878      	ldr	r0, [r7, #4]
 8019376:	f7f5 f92f 	bl	800e5d8 <pbuf_clen>
 801937a:	4603      	mov	r3, r0
 801937c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801937e:	4ba3      	ldr	r3, [pc, #652]	; (801960c <ip4_reass+0x30c>)
 8019380:	881b      	ldrh	r3, [r3, #0]
 8019382:	461a      	mov	r2, r3
 8019384:	8c3b      	ldrh	r3, [r7, #32]
 8019386:	4413      	add	r3, r2
 8019388:	2b0a      	cmp	r3, #10
 801938a:	dd10      	ble.n	80193ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801938c:	8c3b      	ldrh	r3, [r7, #32]
 801938e:	4619      	mov	r1, r3
 8019390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019392:	f7ff fd81 	bl	8018e98 <ip_reass_remove_oldest_datagram>
 8019396:	4603      	mov	r3, r0
 8019398:	2b00      	cmp	r3, #0
 801939a:	f000 812d 	beq.w	80195f8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801939e:	4b9b      	ldr	r3, [pc, #620]	; (801960c <ip4_reass+0x30c>)
 80193a0:	881b      	ldrh	r3, [r3, #0]
 80193a2:	461a      	mov	r2, r3
 80193a4:	8c3b      	ldrh	r3, [r7, #32]
 80193a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80193a8:	2b0a      	cmp	r3, #10
 80193aa:	f300 8125 	bgt.w	80195f8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80193ae:	4b98      	ldr	r3, [pc, #608]	; (8019610 <ip4_reass+0x310>)
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	633b      	str	r3, [r7, #48]	; 0x30
 80193b4:	e015      	b.n	80193e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80193b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193b8:	695a      	ldr	r2, [r3, #20]
 80193ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193bc:	68db      	ldr	r3, [r3, #12]
 80193be:	429a      	cmp	r2, r3
 80193c0:	d10c      	bne.n	80193dc <ip4_reass+0xdc>
 80193c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193c4:	699a      	ldr	r2, [r3, #24]
 80193c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193c8:	691b      	ldr	r3, [r3, #16]
 80193ca:	429a      	cmp	r2, r3
 80193cc:	d106      	bne.n	80193dc <ip4_reass+0xdc>
 80193ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193d0:	899a      	ldrh	r2, [r3, #12]
 80193d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193d4:	889b      	ldrh	r3, [r3, #4]
 80193d6:	b29b      	uxth	r3, r3
 80193d8:	429a      	cmp	r2, r3
 80193da:	d006      	beq.n	80193ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80193dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	633b      	str	r3, [r7, #48]	; 0x30
 80193e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d1e6      	bne.n	80193b6 <ip4_reass+0xb6>
 80193e8:	e000      	b.n	80193ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80193ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80193ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d109      	bne.n	8019406 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80193f2:	8c3b      	ldrh	r3, [r7, #32]
 80193f4:	4619      	mov	r1, r3
 80193f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193f8:	f7ff fdb0 	bl	8018f5c <ip_reass_enqueue_new_datagram>
 80193fc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80193fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019400:	2b00      	cmp	r3, #0
 8019402:	d11c      	bne.n	801943e <ip4_reass+0x13e>
      goto nullreturn;
 8019404:	e0f9      	b.n	80195fa <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019408:	88db      	ldrh	r3, [r3, #6]
 801940a:	b29b      	uxth	r3, r3
 801940c:	4618      	mov	r0, r3
 801940e:	f7f3 fc37 	bl	800cc80 <lwip_htons>
 8019412:	4603      	mov	r3, r0
 8019414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019418:	2b00      	cmp	r3, #0
 801941a:	d110      	bne.n	801943e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801941c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801941e:	89db      	ldrh	r3, [r3, #14]
 8019420:	4618      	mov	r0, r3
 8019422:	f7f3 fc2d 	bl	800cc80 <lwip_htons>
 8019426:	4603      	mov	r3, r0
 8019428:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801942c:	2b00      	cmp	r3, #0
 801942e:	d006      	beq.n	801943e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8019430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019432:	3308      	adds	r3, #8
 8019434:	2214      	movs	r2, #20
 8019436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019438:	4618      	mov	r0, r3
 801943a:	f000 fd50 	bl	8019ede <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801943e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019440:	88db      	ldrh	r3, [r3, #6]
 8019442:	b29b      	uxth	r3, r3
 8019444:	f003 0320 	and.w	r3, r3, #32
 8019448:	2b00      	cmp	r3, #0
 801944a:	bf0c      	ite	eq
 801944c:	2301      	moveq	r3, #1
 801944e:	2300      	movne	r3, #0
 8019450:	b2db      	uxtb	r3, r3
 8019452:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019454:	69fb      	ldr	r3, [r7, #28]
 8019456:	2b00      	cmp	r3, #0
 8019458:	d00e      	beq.n	8019478 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801945a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801945c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801945e:	4413      	add	r3, r2
 8019460:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019462:	8b7a      	ldrh	r2, [r7, #26]
 8019464:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019466:	429a      	cmp	r2, r3
 8019468:	f0c0 80a0 	bcc.w	80195ac <ip4_reass+0x2ac>
 801946c:	8b7b      	ldrh	r3, [r7, #26]
 801946e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019472:	4293      	cmp	r3, r2
 8019474:	f200 809a 	bhi.w	80195ac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019478:	69fa      	ldr	r2, [r7, #28]
 801947a:	6879      	ldr	r1, [r7, #4]
 801947c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801947e:	f7ff fdd5 	bl	801902c <ip_reass_chain_frag_into_datagram_and_validate>
 8019482:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019484:	697b      	ldr	r3, [r7, #20]
 8019486:	f1b3 3fff 	cmp.w	r3, #4294967295
 801948a:	f000 8091 	beq.w	80195b0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801948e:	4b5f      	ldr	r3, [pc, #380]	; (801960c <ip4_reass+0x30c>)
 8019490:	881a      	ldrh	r2, [r3, #0]
 8019492:	8c3b      	ldrh	r3, [r7, #32]
 8019494:	4413      	add	r3, r2
 8019496:	b29a      	uxth	r2, r3
 8019498:	4b5c      	ldr	r3, [pc, #368]	; (801960c <ip4_reass+0x30c>)
 801949a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801949c:	69fb      	ldr	r3, [r7, #28]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d00d      	beq.n	80194be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80194a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80194a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80194a6:	4413      	add	r3, r2
 80194a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80194aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194ac:	8a7a      	ldrh	r2, [r7, #18]
 80194ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80194b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194b2:	7f9b      	ldrb	r3, [r3, #30]
 80194b4:	f043 0301 	orr.w	r3, r3, #1
 80194b8:	b2da      	uxtb	r2, r3
 80194ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80194be:	697b      	ldr	r3, [r7, #20]
 80194c0:	2b01      	cmp	r3, #1
 80194c2:	d171      	bne.n	80195a8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80194c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194c6:	8b9b      	ldrh	r3, [r3, #28]
 80194c8:	3314      	adds	r3, #20
 80194ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80194cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194ce:	685b      	ldr	r3, [r3, #4]
 80194d0:	685b      	ldr	r3, [r3, #4]
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80194d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194d8:	685b      	ldr	r3, [r3, #4]
 80194da:	685b      	ldr	r3, [r3, #4]
 80194dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80194de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194e0:	3308      	adds	r3, #8
 80194e2:	2214      	movs	r2, #20
 80194e4:	4619      	mov	r1, r3
 80194e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80194e8:	f000 fcf9 	bl	8019ede <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80194ec:	8a3b      	ldrh	r3, [r7, #16]
 80194ee:	4618      	mov	r0, r3
 80194f0:	f7f3 fbc6 	bl	800cc80 <lwip_htons>
 80194f4:	4603      	mov	r3, r0
 80194f6:	461a      	mov	r2, r3
 80194f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80194fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194fe:	2200      	movs	r2, #0
 8019500:	719a      	strb	r2, [r3, #6]
 8019502:	2200      	movs	r2, #0
 8019504:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8019506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019508:	2200      	movs	r2, #0
 801950a:	729a      	strb	r2, [r3, #10]
 801950c:	2200      	movs	r2, #0
 801950e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019512:	685b      	ldr	r3, [r3, #4]
 8019514:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019516:	e00d      	b.n	8019534 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801951a:	685b      	ldr	r3, [r3, #4]
 801951c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801951e:	2114      	movs	r1, #20
 8019520:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019522:	f7f4 ff45 	bl	800e3b0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8019526:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019528:	6878      	ldr	r0, [r7, #4]
 801952a:	f7f5 f895 	bl	800e658 <pbuf_cat>
      r = iprh->next_pbuf;
 801952e:	68fb      	ldr	r3, [r7, #12]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8019534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019536:	2b00      	cmp	r3, #0
 8019538:	d1ee      	bne.n	8019518 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801953a:	4b35      	ldr	r3, [pc, #212]	; (8019610 <ip4_reass+0x310>)
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019540:	429a      	cmp	r2, r3
 8019542:	d102      	bne.n	801954a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019544:	2300      	movs	r3, #0
 8019546:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019548:	e010      	b.n	801956c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801954a:	4b31      	ldr	r3, [pc, #196]	; (8019610 <ip4_reass+0x310>)
 801954c:	681b      	ldr	r3, [r3, #0]
 801954e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019550:	e007      	b.n	8019562 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8019552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019558:	429a      	cmp	r2, r3
 801955a:	d006      	beq.n	801956a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801955c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019564:	2b00      	cmp	r3, #0
 8019566:	d1f4      	bne.n	8019552 <ip4_reass+0x252>
 8019568:	e000      	b.n	801956c <ip4_reass+0x26c>
          break;
 801956a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801956c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801956e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019570:	f7ff fd2e 	bl	8018fd0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019574:	6878      	ldr	r0, [r7, #4]
 8019576:	f7f5 f82f 	bl	800e5d8 <pbuf_clen>
 801957a:	4603      	mov	r3, r0
 801957c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801957e:	4b23      	ldr	r3, [pc, #140]	; (801960c <ip4_reass+0x30c>)
 8019580:	881b      	ldrh	r3, [r3, #0]
 8019582:	8c3a      	ldrh	r2, [r7, #32]
 8019584:	429a      	cmp	r2, r3
 8019586:	d906      	bls.n	8019596 <ip4_reass+0x296>
 8019588:	4b22      	ldr	r3, [pc, #136]	; (8019614 <ip4_reass+0x314>)
 801958a:	f240 229b 	movw	r2, #667	; 0x29b
 801958e:	4922      	ldr	r1, [pc, #136]	; (8019618 <ip4_reass+0x318>)
 8019590:	4822      	ldr	r0, [pc, #136]	; (801961c <ip4_reass+0x31c>)
 8019592:	f000 fcd1 	bl	8019f38 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019596:	4b1d      	ldr	r3, [pc, #116]	; (801960c <ip4_reass+0x30c>)
 8019598:	881a      	ldrh	r2, [r3, #0]
 801959a:	8c3b      	ldrh	r3, [r7, #32]
 801959c:	1ad3      	subs	r3, r2, r3
 801959e:	b29a      	uxth	r2, r3
 80195a0:	4b1a      	ldr	r3, [pc, #104]	; (801960c <ip4_reass+0x30c>)
 80195a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	e02c      	b.n	8019602 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80195a8:	2300      	movs	r3, #0
 80195aa:	e02a      	b.n	8019602 <ip4_reass+0x302>

nullreturn_ipr:
 80195ac:	bf00      	nop
 80195ae:	e000      	b.n	80195b2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80195b0:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80195b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d106      	bne.n	80195c6 <ip4_reass+0x2c6>
 80195b8:	4b16      	ldr	r3, [pc, #88]	; (8019614 <ip4_reass+0x314>)
 80195ba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80195be:	4918      	ldr	r1, [pc, #96]	; (8019620 <ip4_reass+0x320>)
 80195c0:	4816      	ldr	r0, [pc, #88]	; (801961c <ip4_reass+0x31c>)
 80195c2:	f000 fcb9 	bl	8019f38 <iprintf>
  if (ipr->p == NULL) {
 80195c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195c8:	685b      	ldr	r3, [r3, #4]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d114      	bne.n	80195f8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80195ce:	4b10      	ldr	r3, [pc, #64]	; (8019610 <ip4_reass+0x310>)
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80195d4:	429a      	cmp	r2, r3
 80195d6:	d006      	beq.n	80195e6 <ip4_reass+0x2e6>
 80195d8:	4b0e      	ldr	r3, [pc, #56]	; (8019614 <ip4_reass+0x314>)
 80195da:	f240 22ab 	movw	r2, #683	; 0x2ab
 80195de:	4911      	ldr	r1, [pc, #68]	; (8019624 <ip4_reass+0x324>)
 80195e0:	480e      	ldr	r0, [pc, #56]	; (801961c <ip4_reass+0x31c>)
 80195e2:	f000 fca9 	bl	8019f38 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80195e6:	2100      	movs	r1, #0
 80195e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80195ea:	f7ff fcf1 	bl	8018fd0 <ip_reass_dequeue_datagram>
 80195ee:	e004      	b.n	80195fa <ip4_reass+0x2fa>
    goto nullreturn;
 80195f0:	bf00      	nop
 80195f2:	e002      	b.n	80195fa <ip4_reass+0x2fa>
    goto nullreturn;
 80195f4:	bf00      	nop
 80195f6:	e000      	b.n	80195fa <ip4_reass+0x2fa>
  }

nullreturn:
 80195f8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80195fa:	6878      	ldr	r0, [r7, #4]
 80195fc:	f7f4 ff5e 	bl	800e4bc <pbuf_free>
  return NULL;
 8019600:	2300      	movs	r3, #0
}
 8019602:	4618      	mov	r0, r3
 8019604:	3738      	adds	r7, #56	; 0x38
 8019606:	46bd      	mov	sp, r7
 8019608:	bd80      	pop	{r7, pc}
 801960a:	bf00      	nop
 801960c:	2001042c 	.word	0x2001042c
 8019610:	20010428 	.word	0x20010428
 8019614:	0801ebf8 	.word	0x0801ebf8
 8019618:	0801ed68 	.word	0x0801ed68
 801961c:	0801ec40 	.word	0x0801ec40
 8019620:	0801ed84 	.word	0x0801ed84
 8019624:	0801ed90 	.word	0x0801ed90

08019628 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019628:	b580      	push	{r7, lr}
 801962a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801962c:	2005      	movs	r0, #5
 801962e:	f7f4 f847 	bl	800d6c0 <memp_malloc>
 8019632:	4603      	mov	r3, r0
}
 8019634:	4618      	mov	r0, r3
 8019636:	bd80      	pop	{r7, pc}

08019638 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019638:	b580      	push	{r7, lr}
 801963a:	b082      	sub	sp, #8
 801963c:	af00      	add	r7, sp, #0
 801963e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	2b00      	cmp	r3, #0
 8019644:	d106      	bne.n	8019654 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019646:	4b07      	ldr	r3, [pc, #28]	; (8019664 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019648:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801964c:	4906      	ldr	r1, [pc, #24]	; (8019668 <ip_frag_free_pbuf_custom_ref+0x30>)
 801964e:	4807      	ldr	r0, [pc, #28]	; (801966c <ip_frag_free_pbuf_custom_ref+0x34>)
 8019650:	f000 fc72 	bl	8019f38 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019654:	6879      	ldr	r1, [r7, #4]
 8019656:	2005      	movs	r0, #5
 8019658:	f7f4 f884 	bl	800d764 <memp_free>
}
 801965c:	bf00      	nop
 801965e:	3708      	adds	r7, #8
 8019660:	46bd      	mov	sp, r7
 8019662:	bd80      	pop	{r7, pc}
 8019664:	0801ebf8 	.word	0x0801ebf8
 8019668:	0801edb0 	.word	0x0801edb0
 801966c:	0801ec40 	.word	0x0801ec40

08019670 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b084      	sub	sp, #16
 8019674:	af00      	add	r7, sp, #0
 8019676:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d106      	bne.n	8019690 <ipfrag_free_pbuf_custom+0x20>
 8019682:	4b11      	ldr	r3, [pc, #68]	; (80196c8 <ipfrag_free_pbuf_custom+0x58>)
 8019684:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019688:	4910      	ldr	r1, [pc, #64]	; (80196cc <ipfrag_free_pbuf_custom+0x5c>)
 801968a:	4811      	ldr	r0, [pc, #68]	; (80196d0 <ipfrag_free_pbuf_custom+0x60>)
 801968c:	f000 fc54 	bl	8019f38 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019690:	68fa      	ldr	r2, [r7, #12]
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	429a      	cmp	r2, r3
 8019696:	d006      	beq.n	80196a6 <ipfrag_free_pbuf_custom+0x36>
 8019698:	4b0b      	ldr	r3, [pc, #44]	; (80196c8 <ipfrag_free_pbuf_custom+0x58>)
 801969a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801969e:	490d      	ldr	r1, [pc, #52]	; (80196d4 <ipfrag_free_pbuf_custom+0x64>)
 80196a0:	480b      	ldr	r0, [pc, #44]	; (80196d0 <ipfrag_free_pbuf_custom+0x60>)
 80196a2:	f000 fc49 	bl	8019f38 <iprintf>
  if (pcr->original != NULL) {
 80196a6:	68fb      	ldr	r3, [r7, #12]
 80196a8:	695b      	ldr	r3, [r3, #20]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d004      	beq.n	80196b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80196ae:	68fb      	ldr	r3, [r7, #12]
 80196b0:	695b      	ldr	r3, [r3, #20]
 80196b2:	4618      	mov	r0, r3
 80196b4:	f7f4 ff02 	bl	800e4bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80196b8:	68f8      	ldr	r0, [r7, #12]
 80196ba:	f7ff ffbd 	bl	8019638 <ip_frag_free_pbuf_custom_ref>
}
 80196be:	bf00      	nop
 80196c0:	3710      	adds	r7, #16
 80196c2:	46bd      	mov	sp, r7
 80196c4:	bd80      	pop	{r7, pc}
 80196c6:	bf00      	nop
 80196c8:	0801ebf8 	.word	0x0801ebf8
 80196cc:	0801edbc 	.word	0x0801edbc
 80196d0:	0801ec40 	.word	0x0801ec40
 80196d4:	0801edc8 	.word	0x0801edc8

080196d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80196d8:	b580      	push	{r7, lr}
 80196da:	b094      	sub	sp, #80	; 0x50
 80196dc:	af02      	add	r7, sp, #8
 80196de:	60f8      	str	r0, [r7, #12]
 80196e0:	60b9      	str	r1, [r7, #8]
 80196e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80196e4:	2300      	movs	r3, #0
 80196e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80196ea:	68bb      	ldr	r3, [r7, #8]
 80196ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80196ee:	3b14      	subs	r3, #20
 80196f0:	2b00      	cmp	r3, #0
 80196f2:	da00      	bge.n	80196f6 <ip4_frag+0x1e>
 80196f4:	3307      	adds	r3, #7
 80196f6:	10db      	asrs	r3, r3, #3
 80196f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80196fa:	2314      	movs	r3, #20
 80196fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	685b      	ldr	r3, [r3, #4]
 8019702:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8019704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019706:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801970a:	781b      	ldrb	r3, [r3, #0]
 801970c:	f003 030f 	and.w	r3, r3, #15
 8019710:	b2db      	uxtb	r3, r3
 8019712:	009b      	lsls	r3, r3, #2
 8019714:	b2db      	uxtb	r3, r3
 8019716:	2b14      	cmp	r3, #20
 8019718:	d002      	beq.n	8019720 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801971a:	f06f 0305 	mvn.w	r3, #5
 801971e:	e10f      	b.n	8019940 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	895b      	ldrh	r3, [r3, #10]
 8019724:	2b13      	cmp	r3, #19
 8019726:	d809      	bhi.n	801973c <ip4_frag+0x64>
 8019728:	4b87      	ldr	r3, [pc, #540]	; (8019948 <ip4_frag+0x270>)
 801972a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801972e:	4987      	ldr	r1, [pc, #540]	; (801994c <ip4_frag+0x274>)
 8019730:	4887      	ldr	r0, [pc, #540]	; (8019950 <ip4_frag+0x278>)
 8019732:	f000 fc01 	bl	8019f38 <iprintf>
 8019736:	f06f 0305 	mvn.w	r3, #5
 801973a:	e101      	b.n	8019940 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801973c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801973e:	88db      	ldrh	r3, [r3, #6]
 8019740:	b29b      	uxth	r3, r3
 8019742:	4618      	mov	r0, r3
 8019744:	f7f3 fa9c 	bl	800cc80 <lwip_htons>
 8019748:	4603      	mov	r3, r0
 801974a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801974c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801974e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019752:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019756:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801975c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	891b      	ldrh	r3, [r3, #8]
 8019762:	3b14      	subs	r3, #20
 8019764:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019768:	e0e0      	b.n	801992c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801976a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801976c:	00db      	lsls	r3, r3, #3
 801976e:	b29b      	uxth	r3, r3
 8019770:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019774:	4293      	cmp	r3, r2
 8019776:	bf28      	it	cs
 8019778:	4613      	movcs	r3, r2
 801977a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801977c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019780:	2114      	movs	r1, #20
 8019782:	200e      	movs	r0, #14
 8019784:	f7f4 fbba 	bl	800defc <pbuf_alloc>
 8019788:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801978c:	2b00      	cmp	r3, #0
 801978e:	f000 80d4 	beq.w	801993a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019794:	895b      	ldrh	r3, [r3, #10]
 8019796:	2b13      	cmp	r3, #19
 8019798:	d806      	bhi.n	80197a8 <ip4_frag+0xd0>
 801979a:	4b6b      	ldr	r3, [pc, #428]	; (8019948 <ip4_frag+0x270>)
 801979c:	f240 3225 	movw	r2, #805	; 0x325
 80197a0:	496c      	ldr	r1, [pc, #432]	; (8019954 <ip4_frag+0x27c>)
 80197a2:	486b      	ldr	r0, [pc, #428]	; (8019950 <ip4_frag+0x278>)
 80197a4:	f000 fbc8 	bl	8019f38 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80197a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197aa:	685b      	ldr	r3, [r3, #4]
 80197ac:	2214      	movs	r2, #20
 80197ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80197b0:	4618      	mov	r0, r3
 80197b2:	f000 fb94 	bl	8019ede <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80197b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197b8:	685b      	ldr	r3, [r3, #4]
 80197ba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80197bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80197be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80197c2:	e064      	b.n	801988e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	895a      	ldrh	r2, [r3, #10]
 80197c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80197ca:	1ad3      	subs	r3, r2, r3
 80197cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	895b      	ldrh	r3, [r3, #10]
 80197d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80197d4:	429a      	cmp	r2, r3
 80197d6:	d906      	bls.n	80197e6 <ip4_frag+0x10e>
 80197d8:	4b5b      	ldr	r3, [pc, #364]	; (8019948 <ip4_frag+0x270>)
 80197da:	f240 322d 	movw	r2, #813	; 0x32d
 80197de:	495e      	ldr	r1, [pc, #376]	; (8019958 <ip4_frag+0x280>)
 80197e0:	485b      	ldr	r0, [pc, #364]	; (8019950 <ip4_frag+0x278>)
 80197e2:	f000 fba9 	bl	8019f38 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80197e6:	8bfa      	ldrh	r2, [r7, #30]
 80197e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80197ec:	4293      	cmp	r3, r2
 80197ee:	bf28      	it	cs
 80197f0:	4613      	movcs	r3, r2
 80197f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80197f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d105      	bne.n	801980a <ip4_frag+0x132>
        poff = 0;
 80197fe:	2300      	movs	r3, #0
 8019800:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	60fb      	str	r3, [r7, #12]
        continue;
 8019808:	e041      	b.n	801988e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801980a:	f7ff ff0d 	bl	8019628 <ip_frag_alloc_pbuf_custom_ref>
 801980e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019810:	69bb      	ldr	r3, [r7, #24]
 8019812:	2b00      	cmp	r3, #0
 8019814:	d103      	bne.n	801981e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019818:	f7f4 fe50 	bl	800e4bc <pbuf_free>
        goto memerr;
 801981c:	e08e      	b.n	801993c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801981e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019820:	68fb      	ldr	r3, [r7, #12]
 8019822:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019824:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019826:	4413      	add	r3, r2
 8019828:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801982c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019830:	9201      	str	r2, [sp, #4]
 8019832:	9300      	str	r3, [sp, #0]
 8019834:	4603      	mov	r3, r0
 8019836:	2241      	movs	r2, #65	; 0x41
 8019838:	2000      	movs	r0, #0
 801983a:	f7f4 fc85 	bl	800e148 <pbuf_alloced_custom>
 801983e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019840:	697b      	ldr	r3, [r7, #20]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d106      	bne.n	8019854 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019846:	69b8      	ldr	r0, [r7, #24]
 8019848:	f7ff fef6 	bl	8019638 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801984c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801984e:	f7f4 fe35 	bl	800e4bc <pbuf_free>
        goto memerr;
 8019852:	e073      	b.n	801993c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8019854:	68f8      	ldr	r0, [r7, #12]
 8019856:	f7f4 fed7 	bl	800e608 <pbuf_ref>
      pcr->original = p;
 801985a:	69bb      	ldr	r3, [r7, #24]
 801985c:	68fa      	ldr	r2, [r7, #12]
 801985e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019860:	69bb      	ldr	r3, [r7, #24]
 8019862:	4a3e      	ldr	r2, [pc, #248]	; (801995c <ip4_frag+0x284>)
 8019864:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019866:	6979      	ldr	r1, [r7, #20]
 8019868:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801986a:	f7f4 fef5 	bl	800e658 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801986e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019872:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019876:	1ad3      	subs	r3, r2, r3
 8019878:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801987c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019880:	2b00      	cmp	r3, #0
 8019882:	d004      	beq.n	801988e <ip4_frag+0x1b6>
        poff = 0;
 8019884:	2300      	movs	r3, #0
 8019886:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019888:	68fb      	ldr	r3, [r7, #12]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801988e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019892:	2b00      	cmp	r3, #0
 8019894:	d196      	bne.n	80197c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019896:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019898:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801989c:	4413      	add	r3, r2
 801989e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80198a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80198a4:	68bb      	ldr	r3, [r7, #8]
 80198a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80198a8:	3b14      	subs	r3, #20
 80198aa:	429a      	cmp	r2, r3
 80198ac:	bfd4      	ite	le
 80198ae:	2301      	movle	r3, #1
 80198b0:	2300      	movgt	r3, #0
 80198b2:	b2db      	uxtb	r3, r3
 80198b4:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80198b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80198ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80198be:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80198c0:	6a3b      	ldr	r3, [r7, #32]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d002      	beq.n	80198cc <ip4_frag+0x1f4>
 80198c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d003      	beq.n	80198d4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80198cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80198ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80198d2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80198d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80198d6:	4618      	mov	r0, r3
 80198d8:	f7f3 f9d2 	bl	800cc80 <lwip_htons>
 80198dc:	4603      	mov	r3, r0
 80198de:	461a      	mov	r2, r3
 80198e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198e2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80198e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80198e6:	3314      	adds	r3, #20
 80198e8:	b29b      	uxth	r3, r3
 80198ea:	4618      	mov	r0, r3
 80198ec:	f7f3 f9c8 	bl	800cc80 <lwip_htons>
 80198f0:	4603      	mov	r3, r0
 80198f2:	461a      	mov	r2, r3
 80198f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198f6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80198f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198fa:	2200      	movs	r2, #0
 80198fc:	729a      	strb	r2, [r3, #10]
 80198fe:	2200      	movs	r2, #0
 8019900:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019902:	68bb      	ldr	r3, [r7, #8]
 8019904:	695b      	ldr	r3, [r3, #20]
 8019906:	687a      	ldr	r2, [r7, #4]
 8019908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801990a:	68b8      	ldr	r0, [r7, #8]
 801990c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801990e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019910:	f7f4 fdd4 	bl	800e4bc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019914:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019918:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801991a:	1ad3      	subs	r3, r2, r3
 801991c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019920:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019924:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019926:	4413      	add	r3, r2
 8019928:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801992c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019930:	2b00      	cmp	r3, #0
 8019932:	f47f af1a 	bne.w	801976a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019936:	2300      	movs	r3, #0
 8019938:	e002      	b.n	8019940 <ip4_frag+0x268>
      goto memerr;
 801993a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801993c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019940:	4618      	mov	r0, r3
 8019942:	3748      	adds	r7, #72	; 0x48
 8019944:	46bd      	mov	sp, r7
 8019946:	bd80      	pop	{r7, pc}
 8019948:	0801ebf8 	.word	0x0801ebf8
 801994c:	0801edd4 	.word	0x0801edd4
 8019950:	0801ec40 	.word	0x0801ec40
 8019954:	0801edf0 	.word	0x0801edf0
 8019958:	0801ee10 	.word	0x0801ee10
 801995c:	08019671 	.word	0x08019671

08019960 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019960:	b580      	push	{r7, lr}
 8019962:	b086      	sub	sp, #24
 8019964:	af00      	add	r7, sp, #0
 8019966:	6078      	str	r0, [r7, #4]
 8019968:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801996a:	230e      	movs	r3, #14
 801996c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	895b      	ldrh	r3, [r3, #10]
 8019972:	2b0e      	cmp	r3, #14
 8019974:	d96e      	bls.n	8019a54 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	7bdb      	ldrb	r3, [r3, #15]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d106      	bne.n	801998c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801997e:	683b      	ldr	r3, [r7, #0]
 8019980:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8019984:	3301      	adds	r3, #1
 8019986:	b2da      	uxtb	r2, r3
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	685b      	ldr	r3, [r3, #4]
 8019990:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019992:	693b      	ldr	r3, [r7, #16]
 8019994:	7b1a      	ldrb	r2, [r3, #12]
 8019996:	7b5b      	ldrb	r3, [r3, #13]
 8019998:	021b      	lsls	r3, r3, #8
 801999a:	4313      	orrs	r3, r2
 801999c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801999e:	693b      	ldr	r3, [r7, #16]
 80199a0:	781b      	ldrb	r3, [r3, #0]
 80199a2:	f003 0301 	and.w	r3, r3, #1
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d023      	beq.n	80199f2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80199aa:	693b      	ldr	r3, [r7, #16]
 80199ac:	781b      	ldrb	r3, [r3, #0]
 80199ae:	2b01      	cmp	r3, #1
 80199b0:	d10f      	bne.n	80199d2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80199b2:	693b      	ldr	r3, [r7, #16]
 80199b4:	785b      	ldrb	r3, [r3, #1]
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d11b      	bne.n	80199f2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80199ba:	693b      	ldr	r3, [r7, #16]
 80199bc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80199be:	2b5e      	cmp	r3, #94	; 0x5e
 80199c0:	d117      	bne.n	80199f2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	7b5b      	ldrb	r3, [r3, #13]
 80199c6:	f043 0310 	orr.w	r3, r3, #16
 80199ca:	b2da      	uxtb	r2, r3
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	735a      	strb	r2, [r3, #13]
 80199d0:	e00f      	b.n	80199f2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80199d2:	693b      	ldr	r3, [r7, #16]
 80199d4:	2206      	movs	r2, #6
 80199d6:	4928      	ldr	r1, [pc, #160]	; (8019a78 <ethernet_input+0x118>)
 80199d8:	4618      	mov	r0, r3
 80199da:	f000 fa71 	bl	8019ec0 <memcmp>
 80199de:	4603      	mov	r3, r0
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d106      	bne.n	80199f2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	7b5b      	ldrb	r3, [r3, #13]
 80199e8:	f043 0308 	orr.w	r3, r3, #8
 80199ec:	b2da      	uxtb	r2, r3
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80199f2:	89fb      	ldrh	r3, [r7, #14]
 80199f4:	2b08      	cmp	r3, #8
 80199f6:	d003      	beq.n	8019a00 <ethernet_input+0xa0>
 80199f8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80199fc:	d014      	beq.n	8019a28 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80199fe:	e032      	b.n	8019a66 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019a00:	683b      	ldr	r3, [r7, #0]
 8019a02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019a06:	f003 0308 	and.w	r3, r3, #8
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d024      	beq.n	8019a58 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019a0e:	8afb      	ldrh	r3, [r7, #22]
 8019a10:	4619      	mov	r1, r3
 8019a12:	6878      	ldr	r0, [r7, #4]
 8019a14:	f7f4 fccc 	bl	800e3b0 <pbuf_remove_header>
 8019a18:	4603      	mov	r3, r0
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d11e      	bne.n	8019a5c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019a1e:	6839      	ldr	r1, [r7, #0]
 8019a20:	6878      	ldr	r0, [r7, #4]
 8019a22:	f7fe ff0f 	bl	8018844 <ip4_input>
      break;
 8019a26:	e013      	b.n	8019a50 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019a28:	683b      	ldr	r3, [r7, #0]
 8019a2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019a2e:	f003 0308 	and.w	r3, r3, #8
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d014      	beq.n	8019a60 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019a36:	8afb      	ldrh	r3, [r7, #22]
 8019a38:	4619      	mov	r1, r3
 8019a3a:	6878      	ldr	r0, [r7, #4]
 8019a3c:	f7f4 fcb8 	bl	800e3b0 <pbuf_remove_header>
 8019a40:	4603      	mov	r3, r0
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d10e      	bne.n	8019a64 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019a46:	6839      	ldr	r1, [r7, #0]
 8019a48:	6878      	ldr	r0, [r7, #4]
 8019a4a:	f7fe f8ab 	bl	8017ba4 <etharp_input>
      break;
 8019a4e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019a50:	2300      	movs	r3, #0
 8019a52:	e00c      	b.n	8019a6e <ethernet_input+0x10e>
    goto free_and_return;
 8019a54:	bf00      	nop
 8019a56:	e006      	b.n	8019a66 <ethernet_input+0x106>
        goto free_and_return;
 8019a58:	bf00      	nop
 8019a5a:	e004      	b.n	8019a66 <ethernet_input+0x106>
        goto free_and_return;
 8019a5c:	bf00      	nop
 8019a5e:	e002      	b.n	8019a66 <ethernet_input+0x106>
        goto free_and_return;
 8019a60:	bf00      	nop
 8019a62:	e000      	b.n	8019a66 <ethernet_input+0x106>
        goto free_and_return;
 8019a64:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019a66:	6878      	ldr	r0, [r7, #4]
 8019a68:	f7f4 fd28 	bl	800e4bc <pbuf_free>
  return ERR_OK;
 8019a6c:	2300      	movs	r3, #0
}
 8019a6e:	4618      	mov	r0, r3
 8019a70:	3718      	adds	r7, #24
 8019a72:	46bd      	mov	sp, r7
 8019a74:	bd80      	pop	{r7, pc}
 8019a76:	bf00      	nop
 8019a78:	0804027c 	.word	0x0804027c

08019a7c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019a7c:	b580      	push	{r7, lr}
 8019a7e:	b086      	sub	sp, #24
 8019a80:	af00      	add	r7, sp, #0
 8019a82:	60f8      	str	r0, [r7, #12]
 8019a84:	60b9      	str	r1, [r7, #8]
 8019a86:	607a      	str	r2, [r7, #4]
 8019a88:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019a8a:	8c3b      	ldrh	r3, [r7, #32]
 8019a8c:	4618      	mov	r0, r3
 8019a8e:	f7f3 f8f7 	bl	800cc80 <lwip_htons>
 8019a92:	4603      	mov	r3, r0
 8019a94:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019a96:	210e      	movs	r1, #14
 8019a98:	68b8      	ldr	r0, [r7, #8]
 8019a9a:	f7f4 fc79 	bl	800e390 <pbuf_add_header>
 8019a9e:	4603      	mov	r3, r0
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d125      	bne.n	8019af0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019aa4:	68bb      	ldr	r3, [r7, #8]
 8019aa6:	685b      	ldr	r3, [r3, #4]
 8019aa8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019aaa:	693b      	ldr	r3, [r7, #16]
 8019aac:	8afa      	ldrh	r2, [r7, #22]
 8019aae:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019ab0:	693b      	ldr	r3, [r7, #16]
 8019ab2:	2206      	movs	r2, #6
 8019ab4:	6839      	ldr	r1, [r7, #0]
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	f000 fa11 	bl	8019ede <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019abc:	693b      	ldr	r3, [r7, #16]
 8019abe:	3306      	adds	r3, #6
 8019ac0:	2206      	movs	r2, #6
 8019ac2:	6879      	ldr	r1, [r7, #4]
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	f000 fa0a 	bl	8019ede <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019ad0:	2b06      	cmp	r3, #6
 8019ad2:	d006      	beq.n	8019ae2 <ethernet_output+0x66>
 8019ad4:	4b0a      	ldr	r3, [pc, #40]	; (8019b00 <ethernet_output+0x84>)
 8019ad6:	f240 1233 	movw	r2, #307	; 0x133
 8019ada:	490a      	ldr	r1, [pc, #40]	; (8019b04 <ethernet_output+0x88>)
 8019adc:	480a      	ldr	r0, [pc, #40]	; (8019b08 <ethernet_output+0x8c>)
 8019ade:	f000 fa2b 	bl	8019f38 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	699b      	ldr	r3, [r3, #24]
 8019ae6:	68b9      	ldr	r1, [r7, #8]
 8019ae8:	68f8      	ldr	r0, [r7, #12]
 8019aea:	4798      	blx	r3
 8019aec:	4603      	mov	r3, r0
 8019aee:	e002      	b.n	8019af6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019af0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019af2:	f06f 0301 	mvn.w	r3, #1
}
 8019af6:	4618      	mov	r0, r3
 8019af8:	3718      	adds	r7, #24
 8019afa:	46bd      	mov	sp, r7
 8019afc:	bd80      	pop	{r7, pc}
 8019afe:	bf00      	nop
 8019b00:	0801ee20 	.word	0x0801ee20
 8019b04:	0801ee58 	.word	0x0801ee58
 8019b08:	0801ee8c 	.word	0x0801ee8c

08019b0c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019b0c:	b580      	push	{r7, lr}
 8019b0e:	b082      	sub	sp, #8
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	6078      	str	r0, [r7, #4]
 8019b14:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8019b16:	683b      	ldr	r3, [r7, #0]
 8019b18:	2200      	movs	r2, #0
 8019b1a:	2104      	movs	r1, #4
 8019b1c:	4618      	mov	r0, r3
 8019b1e:	f7eb fc2d 	bl	800537c <osMessageQueueNew>
 8019b22:	4602      	mov	r2, r0
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d102      	bne.n	8019b36 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8019b30:	f04f 33ff 	mov.w	r3, #4294967295
 8019b34:	e000      	b.n	8019b38 <sys_mbox_new+0x2c>

  return ERR_OK;
 8019b36:	2300      	movs	r3, #0
}
 8019b38:	4618      	mov	r0, r3
 8019b3a:	3708      	adds	r7, #8
 8019b3c:	46bd      	mov	sp, r7
 8019b3e:	bd80      	pop	{r7, pc}

08019b40 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8019b40:	b580      	push	{r7, lr}
 8019b42:	b082      	sub	sp, #8
 8019b44:	af00      	add	r7, sp, #0
 8019b46:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	f7eb fd81 	bl	8005654 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	4618      	mov	r0, r3
 8019b58:	f7eb fdae 	bl	80056b8 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019b5c:	bf00      	nop
 8019b5e:	3708      	adds	r7, #8
 8019b60:	46bd      	mov	sp, r7
 8019b62:	bd80      	pop	{r7, pc}

08019b64 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019b64:	b580      	push	{r7, lr}
 8019b66:	b084      	sub	sp, #16
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
 8019b6c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	6818      	ldr	r0, [r3, #0]
 8019b72:	4639      	mov	r1, r7
 8019b74:	2300      	movs	r3, #0
 8019b76:	2200      	movs	r2, #0
 8019b78:	f7eb fc86 	bl	8005488 <osMessageQueuePut>
 8019b7c:	4603      	mov	r3, r0
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d102      	bne.n	8019b88 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8019b82:	2300      	movs	r3, #0
 8019b84:	73fb      	strb	r3, [r7, #15]
 8019b86:	e001      	b.n	8019b8c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019b88:	23ff      	movs	r3, #255	; 0xff
 8019b8a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019b90:	4618      	mov	r0, r3
 8019b92:	3710      	adds	r7, #16
 8019b94:	46bd      	mov	sp, r7
 8019b96:	bd80      	pop	{r7, pc}

08019b98 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	b086      	sub	sp, #24
 8019b9c:	af00      	add	r7, sp, #0
 8019b9e:	60f8      	str	r0, [r7, #12]
 8019ba0:	60b9      	str	r1, [r7, #8]
 8019ba2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8019ba4:	f7eb f814 	bl	8004bd0 <osKernelGetTickCount>
 8019ba8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d013      	beq.n	8019bd8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	6818      	ldr	r0, [r3, #0]
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	68b9      	ldr	r1, [r7, #8]
 8019bba:	f7eb fcd9 	bl	8005570 <osMessageQueueGet>
 8019bbe:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8019bc0:	693b      	ldr	r3, [r7, #16]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	d105      	bne.n	8019bd2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8019bc6:	f7eb f803 	bl	8004bd0 <osKernelGetTickCount>
 8019bca:	4602      	mov	r2, r0
 8019bcc:	697b      	ldr	r3, [r7, #20]
 8019bce:	1ad3      	subs	r3, r2, r3
 8019bd0:	e00f      	b.n	8019bf2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8019bd6:	e00c      	b.n	8019bf2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	6818      	ldr	r0, [r3, #0]
 8019bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8019be0:	2200      	movs	r2, #0
 8019be2:	68b9      	ldr	r1, [r7, #8]
 8019be4:	f7eb fcc4 	bl	8005570 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8019be8:	f7ea fff2 	bl	8004bd0 <osKernelGetTickCount>
 8019bec:	4602      	mov	r2, r0
 8019bee:	697b      	ldr	r3, [r7, #20]
 8019bf0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	3718      	adds	r7, #24
 8019bf6:	46bd      	mov	sp, r7
 8019bf8:	bd80      	pop	{r7, pc}

08019bfa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8019bfa:	b580      	push	{r7, lr}
 8019bfc:	b082      	sub	sp, #8
 8019bfe:	af00      	add	r7, sp, #0
 8019c00:	6078      	str	r0, [r7, #4]
 8019c02:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	6818      	ldr	r0, [r3, #0]
 8019c08:	2300      	movs	r3, #0
 8019c0a:	2200      	movs	r2, #0
 8019c0c:	6839      	ldr	r1, [r7, #0]
 8019c0e:	f7eb fcaf 	bl	8005570 <osMessageQueueGet>
 8019c12:	4603      	mov	r3, r0
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d101      	bne.n	8019c1c <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8019c18:	2300      	movs	r3, #0
 8019c1a:	e001      	b.n	8019c20 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8019c1c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8019c20:	4618      	mov	r0, r3
 8019c22:	3708      	adds	r7, #8
 8019c24:	46bd      	mov	sp, r7
 8019c26:	bd80      	pop	{r7, pc}

08019c28 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019c28:	b480      	push	{r7}
 8019c2a:	b083      	sub	sp, #12
 8019c2c:	af00      	add	r7, sp, #0
 8019c2e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	2b00      	cmp	r3, #0
 8019c36:	d101      	bne.n	8019c3c <sys_mbox_valid+0x14>
    return 0;
 8019c38:	2300      	movs	r3, #0
 8019c3a:	e000      	b.n	8019c3e <sys_mbox_valid+0x16>
  else
    return 1;
 8019c3c:	2301      	movs	r3, #1
}
 8019c3e:	4618      	mov	r0, r3
 8019c40:	370c      	adds	r7, #12
 8019c42:	46bd      	mov	sp, r7
 8019c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c48:	4770      	bx	lr

08019c4a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8019c4a:	b480      	push	{r7}
 8019c4c:	b083      	sub	sp, #12
 8019c4e:	af00      	add	r7, sp, #0
 8019c50:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	2200      	movs	r2, #0
 8019c56:	601a      	str	r2, [r3, #0]
}
 8019c58:	bf00      	nop
 8019c5a:	370c      	adds	r7, #12
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c62:	4770      	bx	lr

08019c64 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b082      	sub	sp, #8
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	6078      	str	r0, [r7, #4]
 8019c6c:	460b      	mov	r3, r1
 8019c6e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8019c70:	78fb      	ldrb	r3, [r7, #3]
 8019c72:	2200      	movs	r2, #0
 8019c74:	4619      	mov	r1, r3
 8019c76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019c7a:	f7eb f9ed 	bl	8005058 <osSemaphoreNew>
 8019c7e:	4602      	mov	r2, r0
 8019c80:	687b      	ldr	r3, [r7, #4]
 8019c82:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d102      	bne.n	8019c92 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8019c90:	e009      	b.n	8019ca6 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8019c92:	78fb      	ldrb	r3, [r7, #3]
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d105      	bne.n	8019ca4 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	2100      	movs	r1, #0
 8019c9e:	4618      	mov	r0, r3
 8019ca0:	f7eb fa78 	bl	8005194 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8019ca4:	2300      	movs	r3, #0
}
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	3708      	adds	r7, #8
 8019caa:	46bd      	mov	sp, r7
 8019cac:	bd80      	pop	{r7, pc}

08019cae <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8019cae:	b580      	push	{r7, lr}
 8019cb0:	b084      	sub	sp, #16
 8019cb2:	af00      	add	r7, sp, #0
 8019cb4:	6078      	str	r0, [r7, #4]
 8019cb6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8019cb8:	f7ea ff8a 	bl	8004bd0 <osKernelGetTickCount>
 8019cbc:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8019cbe:	683b      	ldr	r3, [r7, #0]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d011      	beq.n	8019ce8 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	6839      	ldr	r1, [r7, #0]
 8019cca:	4618      	mov	r0, r3
 8019ccc:	f7eb fa62 	bl	8005194 <osSemaphoreAcquire>
 8019cd0:	4603      	mov	r3, r0
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d105      	bne.n	8019ce2 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8019cd6:	f7ea ff7b 	bl	8004bd0 <osKernelGetTickCount>
 8019cda:	4602      	mov	r2, r0
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	1ad3      	subs	r3, r2, r3
 8019ce0:	e012      	b.n	8019d08 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8019ce6:	e00f      	b.n	8019d08 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8019ce8:	bf00      	nop
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	f04f 31ff 	mov.w	r1, #4294967295
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	f7eb fa4e 	bl	8005194 <osSemaphoreAcquire>
 8019cf8:	4603      	mov	r3, r0
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d1f5      	bne.n	8019cea <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8019cfe:	f7ea ff67 	bl	8004bd0 <osKernelGetTickCount>
 8019d02:	4602      	mov	r2, r0
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8019d08:	4618      	mov	r0, r3
 8019d0a:	3710      	adds	r7, #16
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	bd80      	pop	{r7, pc}

08019d10 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8019d10:	b580      	push	{r7, lr}
 8019d12:	b082      	sub	sp, #8
 8019d14:	af00      	add	r7, sp, #0
 8019d16:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	681b      	ldr	r3, [r3, #0]
 8019d1c:	4618      	mov	r0, r3
 8019d1e:	f7eb fa9f 	bl	8005260 <osSemaphoreRelease>
}
 8019d22:	bf00      	nop
 8019d24:	3708      	adds	r7, #8
 8019d26:	46bd      	mov	sp, r7
 8019d28:	bd80      	pop	{r7, pc}

08019d2a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8019d2a:	b580      	push	{r7, lr}
 8019d2c:	b082      	sub	sp, #8
 8019d2e:	af00      	add	r7, sp, #0
 8019d30:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	4618      	mov	r0, r3
 8019d38:	f7eb faea 	bl	8005310 <osSemaphoreDelete>
}
 8019d3c:	bf00      	nop
 8019d3e:	3708      	adds	r7, #8
 8019d40:	46bd      	mov	sp, r7
 8019d42:	bd80      	pop	{r7, pc}

08019d44 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8019d44:	b480      	push	{r7}
 8019d46:	b083      	sub	sp, #12
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d101      	bne.n	8019d58 <sys_sem_valid+0x14>
    return 0;
 8019d54:	2300      	movs	r3, #0
 8019d56:	e000      	b.n	8019d5a <sys_sem_valid+0x16>
  else
    return 1;
 8019d58:	2301      	movs	r3, #1
}
 8019d5a:	4618      	mov	r0, r3
 8019d5c:	370c      	adds	r7, #12
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d64:	4770      	bx	lr

08019d66 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8019d66:	b480      	push	{r7}
 8019d68:	b083      	sub	sp, #12
 8019d6a:	af00      	add	r7, sp, #0
 8019d6c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	2200      	movs	r2, #0
 8019d72:	601a      	str	r2, [r3, #0]
}
 8019d74:	bf00      	nop
 8019d76:	370c      	adds	r7, #12
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d7e:	4770      	bx	lr

08019d80 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019d80:	b580      	push	{r7, lr}
 8019d82:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8019d84:	2000      	movs	r0, #0
 8019d86:	f7eb f81f 	bl	8004dc8 <osMutexNew>
 8019d8a:	4602      	mov	r2, r0
 8019d8c:	4b01      	ldr	r3, [pc, #4]	; (8019d94 <sys_init+0x14>)
 8019d8e:	601a      	str	r2, [r3, #0]
#endif
}
 8019d90:	bf00      	nop
 8019d92:	bd80      	pop	{r7, pc}
 8019d94:	20016eec 	.word	0x20016eec

08019d98 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b082      	sub	sp, #8
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8019da0:	2000      	movs	r0, #0
 8019da2:	f7eb f811 	bl	8004dc8 <osMutexNew>
 8019da6:	4602      	mov	r2, r0
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	681b      	ldr	r3, [r3, #0]
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d102      	bne.n	8019dba <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019db4:	f04f 33ff 	mov.w	r3, #4294967295
 8019db8:	e000      	b.n	8019dbc <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019dba:	2300      	movs	r3, #0
}
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	3708      	adds	r7, #8
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	bd80      	pop	{r7, pc}

08019dc4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b082      	sub	sp, #8
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	f7eb f891 	bl	8004efc <osMutexAcquire>
#endif
}
 8019dda:	bf00      	nop
 8019ddc:	3708      	adds	r7, #8
 8019dde:	46bd      	mov	sp, r7
 8019de0:	bd80      	pop	{r7, pc}

08019de2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8019de2:	b580      	push	{r7, lr}
 8019de4:	b082      	sub	sp, #8
 8019de6:	af00      	add	r7, sp, #0
 8019de8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	4618      	mov	r0, r3
 8019df0:	f7eb f8e2 	bl	8004fb8 <osMutexRelease>
}
 8019df4:	bf00      	nop
 8019df6:	3708      	adds	r7, #8
 8019df8:	46bd      	mov	sp, r7
 8019dfa:	bd80      	pop	{r7, pc}

08019dfc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019dfc:	b580      	push	{r7, lr}
 8019dfe:	b08e      	sub	sp, #56	; 0x38
 8019e00:	af00      	add	r7, sp, #0
 8019e02:	60f8      	str	r0, [r7, #12]
 8019e04:	60b9      	str	r1, [r7, #8]
 8019e06:	607a      	str	r2, [r7, #4]
 8019e08:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8019e0a:	f107 0314 	add.w	r3, r7, #20
 8019e0e:	2224      	movs	r2, #36	; 0x24
 8019e10:	2100      	movs	r1, #0
 8019e12:	4618      	mov	r0, r3
 8019e14:	f000 f887 	bl	8019f26 <memset>
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	617b      	str	r3, [r7, #20]
 8019e1c:	683b      	ldr	r3, [r7, #0]
 8019e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8019e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019e22:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8019e24:	f107 0314 	add.w	r3, r7, #20
 8019e28:	461a      	mov	r2, r3
 8019e2a:	6879      	ldr	r1, [r7, #4]
 8019e2c:	68b8      	ldr	r0, [r7, #8]
 8019e2e:	f7ea fef7 	bl	8004c20 <osThreadNew>
 8019e32:	4603      	mov	r3, r0
#endif
}
 8019e34:	4618      	mov	r0, r3
 8019e36:	3738      	adds	r7, #56	; 0x38
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	bd80      	pop	{r7, pc}

08019e3c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019e3c:	b580      	push	{r7, lr}
 8019e3e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8019e40:	4b04      	ldr	r3, [pc, #16]	; (8019e54 <sys_arch_protect+0x18>)
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	f04f 31ff 	mov.w	r1, #4294967295
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f7eb f857 	bl	8004efc <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8019e4e:	2301      	movs	r3, #1
}
 8019e50:	4618      	mov	r0, r3
 8019e52:	bd80      	pop	{r7, pc}
 8019e54:	20016eec 	.word	0x20016eec

08019e58 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019e58:	b580      	push	{r7, lr}
 8019e5a:	b082      	sub	sp, #8
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019e60:	4b04      	ldr	r3, [pc, #16]	; (8019e74 <sys_arch_unprotect+0x1c>)
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7eb f8a7 	bl	8004fb8 <osMutexRelease>
}
 8019e6a:	bf00      	nop
 8019e6c:	3708      	adds	r7, #8
 8019e6e:	46bd      	mov	sp, r7
 8019e70:	bd80      	pop	{r7, pc}
 8019e72:	bf00      	nop
 8019e74:	20016eec 	.word	0x20016eec

08019e78 <__libc_init_array>:
 8019e78:	b570      	push	{r4, r5, r6, lr}
 8019e7a:	4e0d      	ldr	r6, [pc, #52]	; (8019eb0 <__libc_init_array+0x38>)
 8019e7c:	4c0d      	ldr	r4, [pc, #52]	; (8019eb4 <__libc_init_array+0x3c>)
 8019e7e:	1ba4      	subs	r4, r4, r6
 8019e80:	10a4      	asrs	r4, r4, #2
 8019e82:	2500      	movs	r5, #0
 8019e84:	42a5      	cmp	r5, r4
 8019e86:	d109      	bne.n	8019e9c <__libc_init_array+0x24>
 8019e88:	4e0b      	ldr	r6, [pc, #44]	; (8019eb8 <__libc_init_array+0x40>)
 8019e8a:	4c0c      	ldr	r4, [pc, #48]	; (8019ebc <__libc_init_array+0x44>)
 8019e8c:	f001 f95c 	bl	801b148 <_init>
 8019e90:	1ba4      	subs	r4, r4, r6
 8019e92:	10a4      	asrs	r4, r4, #2
 8019e94:	2500      	movs	r5, #0
 8019e96:	42a5      	cmp	r5, r4
 8019e98:	d105      	bne.n	8019ea6 <__libc_init_array+0x2e>
 8019e9a:	bd70      	pop	{r4, r5, r6, pc}
 8019e9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019ea0:	4798      	blx	r3
 8019ea2:	3501      	adds	r5, #1
 8019ea4:	e7ee      	b.n	8019e84 <__libc_init_array+0xc>
 8019ea6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019eaa:	4798      	blx	r3
 8019eac:	3501      	adds	r5, #1
 8019eae:	e7f2      	b.n	8019e96 <__libc_init_array+0x1e>
 8019eb0:	0804032c 	.word	0x0804032c
 8019eb4:	0804032c 	.word	0x0804032c
 8019eb8:	0804032c 	.word	0x0804032c
 8019ebc:	08040330 	.word	0x08040330

08019ec0 <memcmp>:
 8019ec0:	b530      	push	{r4, r5, lr}
 8019ec2:	2400      	movs	r4, #0
 8019ec4:	42a2      	cmp	r2, r4
 8019ec6:	d101      	bne.n	8019ecc <memcmp+0xc>
 8019ec8:	2000      	movs	r0, #0
 8019eca:	e007      	b.n	8019edc <memcmp+0x1c>
 8019ecc:	5d03      	ldrb	r3, [r0, r4]
 8019ece:	3401      	adds	r4, #1
 8019ed0:	190d      	adds	r5, r1, r4
 8019ed2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8019ed6:	42ab      	cmp	r3, r5
 8019ed8:	d0f4      	beq.n	8019ec4 <memcmp+0x4>
 8019eda:	1b58      	subs	r0, r3, r5
 8019edc:	bd30      	pop	{r4, r5, pc}

08019ede <memcpy>:
 8019ede:	b510      	push	{r4, lr}
 8019ee0:	1e43      	subs	r3, r0, #1
 8019ee2:	440a      	add	r2, r1
 8019ee4:	4291      	cmp	r1, r2
 8019ee6:	d100      	bne.n	8019eea <memcpy+0xc>
 8019ee8:	bd10      	pop	{r4, pc}
 8019eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019eee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019ef2:	e7f7      	b.n	8019ee4 <memcpy+0x6>

08019ef4 <memmove>:
 8019ef4:	4288      	cmp	r0, r1
 8019ef6:	b510      	push	{r4, lr}
 8019ef8:	eb01 0302 	add.w	r3, r1, r2
 8019efc:	d807      	bhi.n	8019f0e <memmove+0x1a>
 8019efe:	1e42      	subs	r2, r0, #1
 8019f00:	4299      	cmp	r1, r3
 8019f02:	d00a      	beq.n	8019f1a <memmove+0x26>
 8019f04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019f08:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019f0c:	e7f8      	b.n	8019f00 <memmove+0xc>
 8019f0e:	4283      	cmp	r3, r0
 8019f10:	d9f5      	bls.n	8019efe <memmove+0xa>
 8019f12:	1881      	adds	r1, r0, r2
 8019f14:	1ad2      	subs	r2, r2, r3
 8019f16:	42d3      	cmn	r3, r2
 8019f18:	d100      	bne.n	8019f1c <memmove+0x28>
 8019f1a:	bd10      	pop	{r4, pc}
 8019f1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019f20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019f24:	e7f7      	b.n	8019f16 <memmove+0x22>

08019f26 <memset>:
 8019f26:	4402      	add	r2, r0
 8019f28:	4603      	mov	r3, r0
 8019f2a:	4293      	cmp	r3, r2
 8019f2c:	d100      	bne.n	8019f30 <memset+0xa>
 8019f2e:	4770      	bx	lr
 8019f30:	f803 1b01 	strb.w	r1, [r3], #1
 8019f34:	e7f9      	b.n	8019f2a <memset+0x4>
	...

08019f38 <iprintf>:
 8019f38:	b40f      	push	{r0, r1, r2, r3}
 8019f3a:	4b0a      	ldr	r3, [pc, #40]	; (8019f64 <iprintf+0x2c>)
 8019f3c:	b513      	push	{r0, r1, r4, lr}
 8019f3e:	681c      	ldr	r4, [r3, #0]
 8019f40:	b124      	cbz	r4, 8019f4c <iprintf+0x14>
 8019f42:	69a3      	ldr	r3, [r4, #24]
 8019f44:	b913      	cbnz	r3, 8019f4c <iprintf+0x14>
 8019f46:	4620      	mov	r0, r4
 8019f48:	f000 f8ea 	bl	801a120 <__sinit>
 8019f4c:	ab05      	add	r3, sp, #20
 8019f4e:	9a04      	ldr	r2, [sp, #16]
 8019f50:	68a1      	ldr	r1, [r4, #8]
 8019f52:	9301      	str	r3, [sp, #4]
 8019f54:	4620      	mov	r0, r4
 8019f56:	f000 fb99 	bl	801a68c <_vfiprintf_r>
 8019f5a:	b002      	add	sp, #8
 8019f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f60:	b004      	add	sp, #16
 8019f62:	4770      	bx	lr
 8019f64:	200000a4 	.word	0x200000a4

08019f68 <rand>:
 8019f68:	b538      	push	{r3, r4, r5, lr}
 8019f6a:	4b13      	ldr	r3, [pc, #76]	; (8019fb8 <rand+0x50>)
 8019f6c:	681c      	ldr	r4, [r3, #0]
 8019f6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019f70:	b97b      	cbnz	r3, 8019f92 <rand+0x2a>
 8019f72:	2018      	movs	r0, #24
 8019f74:	f000 f95e 	bl	801a234 <malloc>
 8019f78:	4a10      	ldr	r2, [pc, #64]	; (8019fbc <rand+0x54>)
 8019f7a:	4b11      	ldr	r3, [pc, #68]	; (8019fc0 <rand+0x58>)
 8019f7c:	63a0      	str	r0, [r4, #56]	; 0x38
 8019f7e:	e9c0 2300 	strd	r2, r3, [r0]
 8019f82:	4b10      	ldr	r3, [pc, #64]	; (8019fc4 <rand+0x5c>)
 8019f84:	6083      	str	r3, [r0, #8]
 8019f86:	230b      	movs	r3, #11
 8019f88:	8183      	strh	r3, [r0, #12]
 8019f8a:	2201      	movs	r2, #1
 8019f8c:	2300      	movs	r3, #0
 8019f8e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019f92:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019f94:	480c      	ldr	r0, [pc, #48]	; (8019fc8 <rand+0x60>)
 8019f96:	690a      	ldr	r2, [r1, #16]
 8019f98:	694b      	ldr	r3, [r1, #20]
 8019f9a:	4c0c      	ldr	r4, [pc, #48]	; (8019fcc <rand+0x64>)
 8019f9c:	4350      	muls	r0, r2
 8019f9e:	fb04 0003 	mla	r0, r4, r3, r0
 8019fa2:	fba2 2304 	umull	r2, r3, r2, r4
 8019fa6:	4403      	add	r3, r0
 8019fa8:	1c54      	adds	r4, r2, #1
 8019faa:	f143 0500 	adc.w	r5, r3, #0
 8019fae:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8019fb2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8019fb6:	bd38      	pop	{r3, r4, r5, pc}
 8019fb8:	200000a4 	.word	0x200000a4
 8019fbc:	abcd330e 	.word	0xabcd330e
 8019fc0:	e66d1234 	.word	0xe66d1234
 8019fc4:	0005deec 	.word	0x0005deec
 8019fc8:	5851f42d 	.word	0x5851f42d
 8019fcc:	4c957f2d 	.word	0x4c957f2d

08019fd0 <siprintf>:
 8019fd0:	b40e      	push	{r1, r2, r3}
 8019fd2:	b500      	push	{lr}
 8019fd4:	b09c      	sub	sp, #112	; 0x70
 8019fd6:	ab1d      	add	r3, sp, #116	; 0x74
 8019fd8:	9002      	str	r0, [sp, #8]
 8019fda:	9006      	str	r0, [sp, #24]
 8019fdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019fe0:	4809      	ldr	r0, [pc, #36]	; (801a008 <siprintf+0x38>)
 8019fe2:	9107      	str	r1, [sp, #28]
 8019fe4:	9104      	str	r1, [sp, #16]
 8019fe6:	4909      	ldr	r1, [pc, #36]	; (801a00c <siprintf+0x3c>)
 8019fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8019fec:	9105      	str	r1, [sp, #20]
 8019fee:	6800      	ldr	r0, [r0, #0]
 8019ff0:	9301      	str	r3, [sp, #4]
 8019ff2:	a902      	add	r1, sp, #8
 8019ff4:	f000 fa28 	bl	801a448 <_svfiprintf_r>
 8019ff8:	9b02      	ldr	r3, [sp, #8]
 8019ffa:	2200      	movs	r2, #0
 8019ffc:	701a      	strb	r2, [r3, #0]
 8019ffe:	b01c      	add	sp, #112	; 0x70
 801a000:	f85d eb04 	ldr.w	lr, [sp], #4
 801a004:	b003      	add	sp, #12
 801a006:	4770      	bx	lr
 801a008:	200000a4 	.word	0x200000a4
 801a00c:	ffff0208 	.word	0xffff0208

0801a010 <strchr>:
 801a010:	b2c9      	uxtb	r1, r1
 801a012:	4603      	mov	r3, r0
 801a014:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a018:	b11a      	cbz	r2, 801a022 <strchr+0x12>
 801a01a:	428a      	cmp	r2, r1
 801a01c:	d1f9      	bne.n	801a012 <strchr+0x2>
 801a01e:	4618      	mov	r0, r3
 801a020:	4770      	bx	lr
 801a022:	2900      	cmp	r1, #0
 801a024:	bf18      	it	ne
 801a026:	2300      	movne	r3, #0
 801a028:	e7f9      	b.n	801a01e <strchr+0xe>

0801a02a <strcpy>:
 801a02a:	4603      	mov	r3, r0
 801a02c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a030:	f803 2b01 	strb.w	r2, [r3], #1
 801a034:	2a00      	cmp	r2, #0
 801a036:	d1f9      	bne.n	801a02c <strcpy+0x2>
 801a038:	4770      	bx	lr

0801a03a <strncmp>:
 801a03a:	b510      	push	{r4, lr}
 801a03c:	b16a      	cbz	r2, 801a05a <strncmp+0x20>
 801a03e:	3901      	subs	r1, #1
 801a040:	1884      	adds	r4, r0, r2
 801a042:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a046:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a04a:	4293      	cmp	r3, r2
 801a04c:	d103      	bne.n	801a056 <strncmp+0x1c>
 801a04e:	42a0      	cmp	r0, r4
 801a050:	d001      	beq.n	801a056 <strncmp+0x1c>
 801a052:	2b00      	cmp	r3, #0
 801a054:	d1f5      	bne.n	801a042 <strncmp+0x8>
 801a056:	1a98      	subs	r0, r3, r2
 801a058:	bd10      	pop	{r4, pc}
 801a05a:	4610      	mov	r0, r2
 801a05c:	e7fc      	b.n	801a058 <strncmp+0x1e>
	...

0801a060 <_vsiprintf_r>:
 801a060:	b500      	push	{lr}
 801a062:	b09b      	sub	sp, #108	; 0x6c
 801a064:	9100      	str	r1, [sp, #0]
 801a066:	9104      	str	r1, [sp, #16]
 801a068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a06c:	9105      	str	r1, [sp, #20]
 801a06e:	9102      	str	r1, [sp, #8]
 801a070:	4905      	ldr	r1, [pc, #20]	; (801a088 <_vsiprintf_r+0x28>)
 801a072:	9103      	str	r1, [sp, #12]
 801a074:	4669      	mov	r1, sp
 801a076:	f000 f9e7 	bl	801a448 <_svfiprintf_r>
 801a07a:	9b00      	ldr	r3, [sp, #0]
 801a07c:	2200      	movs	r2, #0
 801a07e:	701a      	strb	r2, [r3, #0]
 801a080:	b01b      	add	sp, #108	; 0x6c
 801a082:	f85d fb04 	ldr.w	pc, [sp], #4
 801a086:	bf00      	nop
 801a088:	ffff0208 	.word	0xffff0208

0801a08c <vsiprintf>:
 801a08c:	4613      	mov	r3, r2
 801a08e:	460a      	mov	r2, r1
 801a090:	4601      	mov	r1, r0
 801a092:	4802      	ldr	r0, [pc, #8]	; (801a09c <vsiprintf+0x10>)
 801a094:	6800      	ldr	r0, [r0, #0]
 801a096:	f7ff bfe3 	b.w	801a060 <_vsiprintf_r>
 801a09a:	bf00      	nop
 801a09c:	200000a4 	.word	0x200000a4

0801a0a0 <std>:
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	b510      	push	{r4, lr}
 801a0a4:	4604      	mov	r4, r0
 801a0a6:	e9c0 3300 	strd	r3, r3, [r0]
 801a0aa:	6083      	str	r3, [r0, #8]
 801a0ac:	8181      	strh	r1, [r0, #12]
 801a0ae:	6643      	str	r3, [r0, #100]	; 0x64
 801a0b0:	81c2      	strh	r2, [r0, #14]
 801a0b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a0b6:	6183      	str	r3, [r0, #24]
 801a0b8:	4619      	mov	r1, r3
 801a0ba:	2208      	movs	r2, #8
 801a0bc:	305c      	adds	r0, #92	; 0x5c
 801a0be:	f7ff ff32 	bl	8019f26 <memset>
 801a0c2:	4b05      	ldr	r3, [pc, #20]	; (801a0d8 <std+0x38>)
 801a0c4:	6263      	str	r3, [r4, #36]	; 0x24
 801a0c6:	4b05      	ldr	r3, [pc, #20]	; (801a0dc <std+0x3c>)
 801a0c8:	62a3      	str	r3, [r4, #40]	; 0x28
 801a0ca:	4b05      	ldr	r3, [pc, #20]	; (801a0e0 <std+0x40>)
 801a0cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a0ce:	4b05      	ldr	r3, [pc, #20]	; (801a0e4 <std+0x44>)
 801a0d0:	6224      	str	r4, [r4, #32]
 801a0d2:	6323      	str	r3, [r4, #48]	; 0x30
 801a0d4:	bd10      	pop	{r4, pc}
 801a0d6:	bf00      	nop
 801a0d8:	0801abe9 	.word	0x0801abe9
 801a0dc:	0801ac0b 	.word	0x0801ac0b
 801a0e0:	0801ac43 	.word	0x0801ac43
 801a0e4:	0801ac67 	.word	0x0801ac67

0801a0e8 <_cleanup_r>:
 801a0e8:	4901      	ldr	r1, [pc, #4]	; (801a0f0 <_cleanup_r+0x8>)
 801a0ea:	f000 b885 	b.w	801a1f8 <_fwalk_reent>
 801a0ee:	bf00      	nop
 801a0f0:	0801af41 	.word	0x0801af41

0801a0f4 <__sfmoreglue>:
 801a0f4:	b570      	push	{r4, r5, r6, lr}
 801a0f6:	1e4a      	subs	r2, r1, #1
 801a0f8:	2568      	movs	r5, #104	; 0x68
 801a0fa:	4355      	muls	r5, r2
 801a0fc:	460e      	mov	r6, r1
 801a0fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a102:	f000 f8ed 	bl	801a2e0 <_malloc_r>
 801a106:	4604      	mov	r4, r0
 801a108:	b140      	cbz	r0, 801a11c <__sfmoreglue+0x28>
 801a10a:	2100      	movs	r1, #0
 801a10c:	e9c0 1600 	strd	r1, r6, [r0]
 801a110:	300c      	adds	r0, #12
 801a112:	60a0      	str	r0, [r4, #8]
 801a114:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a118:	f7ff ff05 	bl	8019f26 <memset>
 801a11c:	4620      	mov	r0, r4
 801a11e:	bd70      	pop	{r4, r5, r6, pc}

0801a120 <__sinit>:
 801a120:	6983      	ldr	r3, [r0, #24]
 801a122:	b510      	push	{r4, lr}
 801a124:	4604      	mov	r4, r0
 801a126:	bb33      	cbnz	r3, 801a176 <__sinit+0x56>
 801a128:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801a12c:	6503      	str	r3, [r0, #80]	; 0x50
 801a12e:	4b12      	ldr	r3, [pc, #72]	; (801a178 <__sinit+0x58>)
 801a130:	4a12      	ldr	r2, [pc, #72]	; (801a17c <__sinit+0x5c>)
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	6282      	str	r2, [r0, #40]	; 0x28
 801a136:	4298      	cmp	r0, r3
 801a138:	bf04      	itt	eq
 801a13a:	2301      	moveq	r3, #1
 801a13c:	6183      	streq	r3, [r0, #24]
 801a13e:	f000 f81f 	bl	801a180 <__sfp>
 801a142:	6060      	str	r0, [r4, #4]
 801a144:	4620      	mov	r0, r4
 801a146:	f000 f81b 	bl	801a180 <__sfp>
 801a14a:	60a0      	str	r0, [r4, #8]
 801a14c:	4620      	mov	r0, r4
 801a14e:	f000 f817 	bl	801a180 <__sfp>
 801a152:	2200      	movs	r2, #0
 801a154:	60e0      	str	r0, [r4, #12]
 801a156:	2104      	movs	r1, #4
 801a158:	6860      	ldr	r0, [r4, #4]
 801a15a:	f7ff ffa1 	bl	801a0a0 <std>
 801a15e:	2201      	movs	r2, #1
 801a160:	2109      	movs	r1, #9
 801a162:	68a0      	ldr	r0, [r4, #8]
 801a164:	f7ff ff9c 	bl	801a0a0 <std>
 801a168:	2202      	movs	r2, #2
 801a16a:	2112      	movs	r1, #18
 801a16c:	68e0      	ldr	r0, [r4, #12]
 801a16e:	f7ff ff97 	bl	801a0a0 <std>
 801a172:	2301      	movs	r3, #1
 801a174:	61a3      	str	r3, [r4, #24]
 801a176:	bd10      	pop	{r4, pc}
 801a178:	0804028c 	.word	0x0804028c
 801a17c:	0801a0e9 	.word	0x0801a0e9

0801a180 <__sfp>:
 801a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a182:	4b1b      	ldr	r3, [pc, #108]	; (801a1f0 <__sfp+0x70>)
 801a184:	681e      	ldr	r6, [r3, #0]
 801a186:	69b3      	ldr	r3, [r6, #24]
 801a188:	4607      	mov	r7, r0
 801a18a:	b913      	cbnz	r3, 801a192 <__sfp+0x12>
 801a18c:	4630      	mov	r0, r6
 801a18e:	f7ff ffc7 	bl	801a120 <__sinit>
 801a192:	3648      	adds	r6, #72	; 0x48
 801a194:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a198:	3b01      	subs	r3, #1
 801a19a:	d503      	bpl.n	801a1a4 <__sfp+0x24>
 801a19c:	6833      	ldr	r3, [r6, #0]
 801a19e:	b133      	cbz	r3, 801a1ae <__sfp+0x2e>
 801a1a0:	6836      	ldr	r6, [r6, #0]
 801a1a2:	e7f7      	b.n	801a194 <__sfp+0x14>
 801a1a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a1a8:	b16d      	cbz	r5, 801a1c6 <__sfp+0x46>
 801a1aa:	3468      	adds	r4, #104	; 0x68
 801a1ac:	e7f4      	b.n	801a198 <__sfp+0x18>
 801a1ae:	2104      	movs	r1, #4
 801a1b0:	4638      	mov	r0, r7
 801a1b2:	f7ff ff9f 	bl	801a0f4 <__sfmoreglue>
 801a1b6:	6030      	str	r0, [r6, #0]
 801a1b8:	2800      	cmp	r0, #0
 801a1ba:	d1f1      	bne.n	801a1a0 <__sfp+0x20>
 801a1bc:	230c      	movs	r3, #12
 801a1be:	603b      	str	r3, [r7, #0]
 801a1c0:	4604      	mov	r4, r0
 801a1c2:	4620      	mov	r0, r4
 801a1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1c6:	4b0b      	ldr	r3, [pc, #44]	; (801a1f4 <__sfp+0x74>)
 801a1c8:	6665      	str	r5, [r4, #100]	; 0x64
 801a1ca:	e9c4 5500 	strd	r5, r5, [r4]
 801a1ce:	60a5      	str	r5, [r4, #8]
 801a1d0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801a1d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801a1d8:	2208      	movs	r2, #8
 801a1da:	4629      	mov	r1, r5
 801a1dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a1e0:	f7ff fea1 	bl	8019f26 <memset>
 801a1e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a1e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a1ec:	e7e9      	b.n	801a1c2 <__sfp+0x42>
 801a1ee:	bf00      	nop
 801a1f0:	0804028c 	.word	0x0804028c
 801a1f4:	ffff0001 	.word	0xffff0001

0801a1f8 <_fwalk_reent>:
 801a1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a1fc:	4680      	mov	r8, r0
 801a1fe:	4689      	mov	r9, r1
 801a200:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a204:	2600      	movs	r6, #0
 801a206:	b914      	cbnz	r4, 801a20e <_fwalk_reent+0x16>
 801a208:	4630      	mov	r0, r6
 801a20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a20e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801a212:	3f01      	subs	r7, #1
 801a214:	d501      	bpl.n	801a21a <_fwalk_reent+0x22>
 801a216:	6824      	ldr	r4, [r4, #0]
 801a218:	e7f5      	b.n	801a206 <_fwalk_reent+0xe>
 801a21a:	89ab      	ldrh	r3, [r5, #12]
 801a21c:	2b01      	cmp	r3, #1
 801a21e:	d907      	bls.n	801a230 <_fwalk_reent+0x38>
 801a220:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a224:	3301      	adds	r3, #1
 801a226:	d003      	beq.n	801a230 <_fwalk_reent+0x38>
 801a228:	4629      	mov	r1, r5
 801a22a:	4640      	mov	r0, r8
 801a22c:	47c8      	blx	r9
 801a22e:	4306      	orrs	r6, r0
 801a230:	3568      	adds	r5, #104	; 0x68
 801a232:	e7ee      	b.n	801a212 <_fwalk_reent+0x1a>

0801a234 <malloc>:
 801a234:	4b02      	ldr	r3, [pc, #8]	; (801a240 <malloc+0xc>)
 801a236:	4601      	mov	r1, r0
 801a238:	6818      	ldr	r0, [r3, #0]
 801a23a:	f000 b851 	b.w	801a2e0 <_malloc_r>
 801a23e:	bf00      	nop
 801a240:	200000a4 	.word	0x200000a4

0801a244 <_free_r>:
 801a244:	b538      	push	{r3, r4, r5, lr}
 801a246:	4605      	mov	r5, r0
 801a248:	2900      	cmp	r1, #0
 801a24a:	d045      	beq.n	801a2d8 <_free_r+0x94>
 801a24c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a250:	1f0c      	subs	r4, r1, #4
 801a252:	2b00      	cmp	r3, #0
 801a254:	bfb8      	it	lt
 801a256:	18e4      	addlt	r4, r4, r3
 801a258:	f000 ff12 	bl	801b080 <__malloc_lock>
 801a25c:	4a1f      	ldr	r2, [pc, #124]	; (801a2dc <_free_r+0x98>)
 801a25e:	6813      	ldr	r3, [r2, #0]
 801a260:	4610      	mov	r0, r2
 801a262:	b933      	cbnz	r3, 801a272 <_free_r+0x2e>
 801a264:	6063      	str	r3, [r4, #4]
 801a266:	6014      	str	r4, [r2, #0]
 801a268:	4628      	mov	r0, r5
 801a26a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a26e:	f000 bf08 	b.w	801b082 <__malloc_unlock>
 801a272:	42a3      	cmp	r3, r4
 801a274:	d90c      	bls.n	801a290 <_free_r+0x4c>
 801a276:	6821      	ldr	r1, [r4, #0]
 801a278:	1862      	adds	r2, r4, r1
 801a27a:	4293      	cmp	r3, r2
 801a27c:	bf04      	itt	eq
 801a27e:	681a      	ldreq	r2, [r3, #0]
 801a280:	685b      	ldreq	r3, [r3, #4]
 801a282:	6063      	str	r3, [r4, #4]
 801a284:	bf04      	itt	eq
 801a286:	1852      	addeq	r2, r2, r1
 801a288:	6022      	streq	r2, [r4, #0]
 801a28a:	6004      	str	r4, [r0, #0]
 801a28c:	e7ec      	b.n	801a268 <_free_r+0x24>
 801a28e:	4613      	mov	r3, r2
 801a290:	685a      	ldr	r2, [r3, #4]
 801a292:	b10a      	cbz	r2, 801a298 <_free_r+0x54>
 801a294:	42a2      	cmp	r2, r4
 801a296:	d9fa      	bls.n	801a28e <_free_r+0x4a>
 801a298:	6819      	ldr	r1, [r3, #0]
 801a29a:	1858      	adds	r0, r3, r1
 801a29c:	42a0      	cmp	r0, r4
 801a29e:	d10b      	bne.n	801a2b8 <_free_r+0x74>
 801a2a0:	6820      	ldr	r0, [r4, #0]
 801a2a2:	4401      	add	r1, r0
 801a2a4:	1858      	adds	r0, r3, r1
 801a2a6:	4282      	cmp	r2, r0
 801a2a8:	6019      	str	r1, [r3, #0]
 801a2aa:	d1dd      	bne.n	801a268 <_free_r+0x24>
 801a2ac:	6810      	ldr	r0, [r2, #0]
 801a2ae:	6852      	ldr	r2, [r2, #4]
 801a2b0:	605a      	str	r2, [r3, #4]
 801a2b2:	4401      	add	r1, r0
 801a2b4:	6019      	str	r1, [r3, #0]
 801a2b6:	e7d7      	b.n	801a268 <_free_r+0x24>
 801a2b8:	d902      	bls.n	801a2c0 <_free_r+0x7c>
 801a2ba:	230c      	movs	r3, #12
 801a2bc:	602b      	str	r3, [r5, #0]
 801a2be:	e7d3      	b.n	801a268 <_free_r+0x24>
 801a2c0:	6820      	ldr	r0, [r4, #0]
 801a2c2:	1821      	adds	r1, r4, r0
 801a2c4:	428a      	cmp	r2, r1
 801a2c6:	bf04      	itt	eq
 801a2c8:	6811      	ldreq	r1, [r2, #0]
 801a2ca:	6852      	ldreq	r2, [r2, #4]
 801a2cc:	6062      	str	r2, [r4, #4]
 801a2ce:	bf04      	itt	eq
 801a2d0:	1809      	addeq	r1, r1, r0
 801a2d2:	6021      	streq	r1, [r4, #0]
 801a2d4:	605c      	str	r4, [r3, #4]
 801a2d6:	e7c7      	b.n	801a268 <_free_r+0x24>
 801a2d8:	bd38      	pop	{r3, r4, r5, pc}
 801a2da:	bf00      	nop
 801a2dc:	20010430 	.word	0x20010430

0801a2e0 <_malloc_r>:
 801a2e0:	b570      	push	{r4, r5, r6, lr}
 801a2e2:	1ccd      	adds	r5, r1, #3
 801a2e4:	f025 0503 	bic.w	r5, r5, #3
 801a2e8:	3508      	adds	r5, #8
 801a2ea:	2d0c      	cmp	r5, #12
 801a2ec:	bf38      	it	cc
 801a2ee:	250c      	movcc	r5, #12
 801a2f0:	2d00      	cmp	r5, #0
 801a2f2:	4606      	mov	r6, r0
 801a2f4:	db01      	blt.n	801a2fa <_malloc_r+0x1a>
 801a2f6:	42a9      	cmp	r1, r5
 801a2f8:	d903      	bls.n	801a302 <_malloc_r+0x22>
 801a2fa:	230c      	movs	r3, #12
 801a2fc:	6033      	str	r3, [r6, #0]
 801a2fe:	2000      	movs	r0, #0
 801a300:	bd70      	pop	{r4, r5, r6, pc}
 801a302:	f000 febd 	bl	801b080 <__malloc_lock>
 801a306:	4a21      	ldr	r2, [pc, #132]	; (801a38c <_malloc_r+0xac>)
 801a308:	6814      	ldr	r4, [r2, #0]
 801a30a:	4621      	mov	r1, r4
 801a30c:	b991      	cbnz	r1, 801a334 <_malloc_r+0x54>
 801a30e:	4c20      	ldr	r4, [pc, #128]	; (801a390 <_malloc_r+0xb0>)
 801a310:	6823      	ldr	r3, [r4, #0]
 801a312:	b91b      	cbnz	r3, 801a31c <_malloc_r+0x3c>
 801a314:	4630      	mov	r0, r6
 801a316:	f000 fc57 	bl	801abc8 <_sbrk_r>
 801a31a:	6020      	str	r0, [r4, #0]
 801a31c:	4629      	mov	r1, r5
 801a31e:	4630      	mov	r0, r6
 801a320:	f000 fc52 	bl	801abc8 <_sbrk_r>
 801a324:	1c43      	adds	r3, r0, #1
 801a326:	d124      	bne.n	801a372 <_malloc_r+0x92>
 801a328:	230c      	movs	r3, #12
 801a32a:	6033      	str	r3, [r6, #0]
 801a32c:	4630      	mov	r0, r6
 801a32e:	f000 fea8 	bl	801b082 <__malloc_unlock>
 801a332:	e7e4      	b.n	801a2fe <_malloc_r+0x1e>
 801a334:	680b      	ldr	r3, [r1, #0]
 801a336:	1b5b      	subs	r3, r3, r5
 801a338:	d418      	bmi.n	801a36c <_malloc_r+0x8c>
 801a33a:	2b0b      	cmp	r3, #11
 801a33c:	d90f      	bls.n	801a35e <_malloc_r+0x7e>
 801a33e:	600b      	str	r3, [r1, #0]
 801a340:	50cd      	str	r5, [r1, r3]
 801a342:	18cc      	adds	r4, r1, r3
 801a344:	4630      	mov	r0, r6
 801a346:	f000 fe9c 	bl	801b082 <__malloc_unlock>
 801a34a:	f104 000b 	add.w	r0, r4, #11
 801a34e:	1d23      	adds	r3, r4, #4
 801a350:	f020 0007 	bic.w	r0, r0, #7
 801a354:	1ac3      	subs	r3, r0, r3
 801a356:	d0d3      	beq.n	801a300 <_malloc_r+0x20>
 801a358:	425a      	negs	r2, r3
 801a35a:	50e2      	str	r2, [r4, r3]
 801a35c:	e7d0      	b.n	801a300 <_malloc_r+0x20>
 801a35e:	428c      	cmp	r4, r1
 801a360:	684b      	ldr	r3, [r1, #4]
 801a362:	bf16      	itet	ne
 801a364:	6063      	strne	r3, [r4, #4]
 801a366:	6013      	streq	r3, [r2, #0]
 801a368:	460c      	movne	r4, r1
 801a36a:	e7eb      	b.n	801a344 <_malloc_r+0x64>
 801a36c:	460c      	mov	r4, r1
 801a36e:	6849      	ldr	r1, [r1, #4]
 801a370:	e7cc      	b.n	801a30c <_malloc_r+0x2c>
 801a372:	1cc4      	adds	r4, r0, #3
 801a374:	f024 0403 	bic.w	r4, r4, #3
 801a378:	42a0      	cmp	r0, r4
 801a37a:	d005      	beq.n	801a388 <_malloc_r+0xa8>
 801a37c:	1a21      	subs	r1, r4, r0
 801a37e:	4630      	mov	r0, r6
 801a380:	f000 fc22 	bl	801abc8 <_sbrk_r>
 801a384:	3001      	adds	r0, #1
 801a386:	d0cf      	beq.n	801a328 <_malloc_r+0x48>
 801a388:	6025      	str	r5, [r4, #0]
 801a38a:	e7db      	b.n	801a344 <_malloc_r+0x64>
 801a38c:	20010430 	.word	0x20010430
 801a390:	20010434 	.word	0x20010434

0801a394 <__ssputs_r>:
 801a394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a398:	688e      	ldr	r6, [r1, #8]
 801a39a:	429e      	cmp	r6, r3
 801a39c:	4682      	mov	sl, r0
 801a39e:	460c      	mov	r4, r1
 801a3a0:	4690      	mov	r8, r2
 801a3a2:	4699      	mov	r9, r3
 801a3a4:	d837      	bhi.n	801a416 <__ssputs_r+0x82>
 801a3a6:	898a      	ldrh	r2, [r1, #12]
 801a3a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a3ac:	d031      	beq.n	801a412 <__ssputs_r+0x7e>
 801a3ae:	6825      	ldr	r5, [r4, #0]
 801a3b0:	6909      	ldr	r1, [r1, #16]
 801a3b2:	1a6f      	subs	r7, r5, r1
 801a3b4:	6965      	ldr	r5, [r4, #20]
 801a3b6:	2302      	movs	r3, #2
 801a3b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a3bc:	fb95 f5f3 	sdiv	r5, r5, r3
 801a3c0:	f109 0301 	add.w	r3, r9, #1
 801a3c4:	443b      	add	r3, r7
 801a3c6:	429d      	cmp	r5, r3
 801a3c8:	bf38      	it	cc
 801a3ca:	461d      	movcc	r5, r3
 801a3cc:	0553      	lsls	r3, r2, #21
 801a3ce:	d530      	bpl.n	801a432 <__ssputs_r+0x9e>
 801a3d0:	4629      	mov	r1, r5
 801a3d2:	f7ff ff85 	bl	801a2e0 <_malloc_r>
 801a3d6:	4606      	mov	r6, r0
 801a3d8:	b950      	cbnz	r0, 801a3f0 <__ssputs_r+0x5c>
 801a3da:	230c      	movs	r3, #12
 801a3dc:	f8ca 3000 	str.w	r3, [sl]
 801a3e0:	89a3      	ldrh	r3, [r4, #12]
 801a3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3e6:	81a3      	strh	r3, [r4, #12]
 801a3e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3f0:	463a      	mov	r2, r7
 801a3f2:	6921      	ldr	r1, [r4, #16]
 801a3f4:	f7ff fd73 	bl	8019ede <memcpy>
 801a3f8:	89a3      	ldrh	r3, [r4, #12]
 801a3fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a3fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a402:	81a3      	strh	r3, [r4, #12]
 801a404:	6126      	str	r6, [r4, #16]
 801a406:	6165      	str	r5, [r4, #20]
 801a408:	443e      	add	r6, r7
 801a40a:	1bed      	subs	r5, r5, r7
 801a40c:	6026      	str	r6, [r4, #0]
 801a40e:	60a5      	str	r5, [r4, #8]
 801a410:	464e      	mov	r6, r9
 801a412:	454e      	cmp	r6, r9
 801a414:	d900      	bls.n	801a418 <__ssputs_r+0x84>
 801a416:	464e      	mov	r6, r9
 801a418:	4632      	mov	r2, r6
 801a41a:	4641      	mov	r1, r8
 801a41c:	6820      	ldr	r0, [r4, #0]
 801a41e:	f7ff fd69 	bl	8019ef4 <memmove>
 801a422:	68a3      	ldr	r3, [r4, #8]
 801a424:	1b9b      	subs	r3, r3, r6
 801a426:	60a3      	str	r3, [r4, #8]
 801a428:	6823      	ldr	r3, [r4, #0]
 801a42a:	441e      	add	r6, r3
 801a42c:	6026      	str	r6, [r4, #0]
 801a42e:	2000      	movs	r0, #0
 801a430:	e7dc      	b.n	801a3ec <__ssputs_r+0x58>
 801a432:	462a      	mov	r2, r5
 801a434:	f000 fe26 	bl	801b084 <_realloc_r>
 801a438:	4606      	mov	r6, r0
 801a43a:	2800      	cmp	r0, #0
 801a43c:	d1e2      	bne.n	801a404 <__ssputs_r+0x70>
 801a43e:	6921      	ldr	r1, [r4, #16]
 801a440:	4650      	mov	r0, sl
 801a442:	f7ff feff 	bl	801a244 <_free_r>
 801a446:	e7c8      	b.n	801a3da <__ssputs_r+0x46>

0801a448 <_svfiprintf_r>:
 801a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a44c:	461d      	mov	r5, r3
 801a44e:	898b      	ldrh	r3, [r1, #12]
 801a450:	061f      	lsls	r7, r3, #24
 801a452:	b09d      	sub	sp, #116	; 0x74
 801a454:	4680      	mov	r8, r0
 801a456:	460c      	mov	r4, r1
 801a458:	4616      	mov	r6, r2
 801a45a:	d50f      	bpl.n	801a47c <_svfiprintf_r+0x34>
 801a45c:	690b      	ldr	r3, [r1, #16]
 801a45e:	b96b      	cbnz	r3, 801a47c <_svfiprintf_r+0x34>
 801a460:	2140      	movs	r1, #64	; 0x40
 801a462:	f7ff ff3d 	bl	801a2e0 <_malloc_r>
 801a466:	6020      	str	r0, [r4, #0]
 801a468:	6120      	str	r0, [r4, #16]
 801a46a:	b928      	cbnz	r0, 801a478 <_svfiprintf_r+0x30>
 801a46c:	230c      	movs	r3, #12
 801a46e:	f8c8 3000 	str.w	r3, [r8]
 801a472:	f04f 30ff 	mov.w	r0, #4294967295
 801a476:	e0c8      	b.n	801a60a <_svfiprintf_r+0x1c2>
 801a478:	2340      	movs	r3, #64	; 0x40
 801a47a:	6163      	str	r3, [r4, #20]
 801a47c:	2300      	movs	r3, #0
 801a47e:	9309      	str	r3, [sp, #36]	; 0x24
 801a480:	2320      	movs	r3, #32
 801a482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a486:	2330      	movs	r3, #48	; 0x30
 801a488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a48c:	9503      	str	r5, [sp, #12]
 801a48e:	f04f 0b01 	mov.w	fp, #1
 801a492:	4637      	mov	r7, r6
 801a494:	463d      	mov	r5, r7
 801a496:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a49a:	b10b      	cbz	r3, 801a4a0 <_svfiprintf_r+0x58>
 801a49c:	2b25      	cmp	r3, #37	; 0x25
 801a49e:	d13e      	bne.n	801a51e <_svfiprintf_r+0xd6>
 801a4a0:	ebb7 0a06 	subs.w	sl, r7, r6
 801a4a4:	d00b      	beq.n	801a4be <_svfiprintf_r+0x76>
 801a4a6:	4653      	mov	r3, sl
 801a4a8:	4632      	mov	r2, r6
 801a4aa:	4621      	mov	r1, r4
 801a4ac:	4640      	mov	r0, r8
 801a4ae:	f7ff ff71 	bl	801a394 <__ssputs_r>
 801a4b2:	3001      	adds	r0, #1
 801a4b4:	f000 80a4 	beq.w	801a600 <_svfiprintf_r+0x1b8>
 801a4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4ba:	4453      	add	r3, sl
 801a4bc:	9309      	str	r3, [sp, #36]	; 0x24
 801a4be:	783b      	ldrb	r3, [r7, #0]
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	f000 809d 	beq.w	801a600 <_svfiprintf_r+0x1b8>
 801a4c6:	2300      	movs	r3, #0
 801a4c8:	f04f 32ff 	mov.w	r2, #4294967295
 801a4cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a4d0:	9304      	str	r3, [sp, #16]
 801a4d2:	9307      	str	r3, [sp, #28]
 801a4d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a4d8:	931a      	str	r3, [sp, #104]	; 0x68
 801a4da:	462f      	mov	r7, r5
 801a4dc:	2205      	movs	r2, #5
 801a4de:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a4e2:	4850      	ldr	r0, [pc, #320]	; (801a624 <_svfiprintf_r+0x1dc>)
 801a4e4:	f7e5 fe9c 	bl	8000220 <memchr>
 801a4e8:	9b04      	ldr	r3, [sp, #16]
 801a4ea:	b9d0      	cbnz	r0, 801a522 <_svfiprintf_r+0xda>
 801a4ec:	06d9      	lsls	r1, r3, #27
 801a4ee:	bf44      	itt	mi
 801a4f0:	2220      	movmi	r2, #32
 801a4f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a4f6:	071a      	lsls	r2, r3, #28
 801a4f8:	bf44      	itt	mi
 801a4fa:	222b      	movmi	r2, #43	; 0x2b
 801a4fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a500:	782a      	ldrb	r2, [r5, #0]
 801a502:	2a2a      	cmp	r2, #42	; 0x2a
 801a504:	d015      	beq.n	801a532 <_svfiprintf_r+0xea>
 801a506:	9a07      	ldr	r2, [sp, #28]
 801a508:	462f      	mov	r7, r5
 801a50a:	2000      	movs	r0, #0
 801a50c:	250a      	movs	r5, #10
 801a50e:	4639      	mov	r1, r7
 801a510:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a514:	3b30      	subs	r3, #48	; 0x30
 801a516:	2b09      	cmp	r3, #9
 801a518:	d94d      	bls.n	801a5b6 <_svfiprintf_r+0x16e>
 801a51a:	b1b8      	cbz	r0, 801a54c <_svfiprintf_r+0x104>
 801a51c:	e00f      	b.n	801a53e <_svfiprintf_r+0xf6>
 801a51e:	462f      	mov	r7, r5
 801a520:	e7b8      	b.n	801a494 <_svfiprintf_r+0x4c>
 801a522:	4a40      	ldr	r2, [pc, #256]	; (801a624 <_svfiprintf_r+0x1dc>)
 801a524:	1a80      	subs	r0, r0, r2
 801a526:	fa0b f000 	lsl.w	r0, fp, r0
 801a52a:	4318      	orrs	r0, r3
 801a52c:	9004      	str	r0, [sp, #16]
 801a52e:	463d      	mov	r5, r7
 801a530:	e7d3      	b.n	801a4da <_svfiprintf_r+0x92>
 801a532:	9a03      	ldr	r2, [sp, #12]
 801a534:	1d11      	adds	r1, r2, #4
 801a536:	6812      	ldr	r2, [r2, #0]
 801a538:	9103      	str	r1, [sp, #12]
 801a53a:	2a00      	cmp	r2, #0
 801a53c:	db01      	blt.n	801a542 <_svfiprintf_r+0xfa>
 801a53e:	9207      	str	r2, [sp, #28]
 801a540:	e004      	b.n	801a54c <_svfiprintf_r+0x104>
 801a542:	4252      	negs	r2, r2
 801a544:	f043 0302 	orr.w	r3, r3, #2
 801a548:	9207      	str	r2, [sp, #28]
 801a54a:	9304      	str	r3, [sp, #16]
 801a54c:	783b      	ldrb	r3, [r7, #0]
 801a54e:	2b2e      	cmp	r3, #46	; 0x2e
 801a550:	d10c      	bne.n	801a56c <_svfiprintf_r+0x124>
 801a552:	787b      	ldrb	r3, [r7, #1]
 801a554:	2b2a      	cmp	r3, #42	; 0x2a
 801a556:	d133      	bne.n	801a5c0 <_svfiprintf_r+0x178>
 801a558:	9b03      	ldr	r3, [sp, #12]
 801a55a:	1d1a      	adds	r2, r3, #4
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	9203      	str	r2, [sp, #12]
 801a560:	2b00      	cmp	r3, #0
 801a562:	bfb8      	it	lt
 801a564:	f04f 33ff 	movlt.w	r3, #4294967295
 801a568:	3702      	adds	r7, #2
 801a56a:	9305      	str	r3, [sp, #20]
 801a56c:	4d2e      	ldr	r5, [pc, #184]	; (801a628 <_svfiprintf_r+0x1e0>)
 801a56e:	7839      	ldrb	r1, [r7, #0]
 801a570:	2203      	movs	r2, #3
 801a572:	4628      	mov	r0, r5
 801a574:	f7e5 fe54 	bl	8000220 <memchr>
 801a578:	b138      	cbz	r0, 801a58a <_svfiprintf_r+0x142>
 801a57a:	2340      	movs	r3, #64	; 0x40
 801a57c:	1b40      	subs	r0, r0, r5
 801a57e:	fa03 f000 	lsl.w	r0, r3, r0
 801a582:	9b04      	ldr	r3, [sp, #16]
 801a584:	4303      	orrs	r3, r0
 801a586:	3701      	adds	r7, #1
 801a588:	9304      	str	r3, [sp, #16]
 801a58a:	7839      	ldrb	r1, [r7, #0]
 801a58c:	4827      	ldr	r0, [pc, #156]	; (801a62c <_svfiprintf_r+0x1e4>)
 801a58e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a592:	2206      	movs	r2, #6
 801a594:	1c7e      	adds	r6, r7, #1
 801a596:	f7e5 fe43 	bl	8000220 <memchr>
 801a59a:	2800      	cmp	r0, #0
 801a59c:	d038      	beq.n	801a610 <_svfiprintf_r+0x1c8>
 801a59e:	4b24      	ldr	r3, [pc, #144]	; (801a630 <_svfiprintf_r+0x1e8>)
 801a5a0:	bb13      	cbnz	r3, 801a5e8 <_svfiprintf_r+0x1a0>
 801a5a2:	9b03      	ldr	r3, [sp, #12]
 801a5a4:	3307      	adds	r3, #7
 801a5a6:	f023 0307 	bic.w	r3, r3, #7
 801a5aa:	3308      	adds	r3, #8
 801a5ac:	9303      	str	r3, [sp, #12]
 801a5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a5b0:	444b      	add	r3, r9
 801a5b2:	9309      	str	r3, [sp, #36]	; 0x24
 801a5b4:	e76d      	b.n	801a492 <_svfiprintf_r+0x4a>
 801a5b6:	fb05 3202 	mla	r2, r5, r2, r3
 801a5ba:	2001      	movs	r0, #1
 801a5bc:	460f      	mov	r7, r1
 801a5be:	e7a6      	b.n	801a50e <_svfiprintf_r+0xc6>
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	3701      	adds	r7, #1
 801a5c4:	9305      	str	r3, [sp, #20]
 801a5c6:	4619      	mov	r1, r3
 801a5c8:	250a      	movs	r5, #10
 801a5ca:	4638      	mov	r0, r7
 801a5cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a5d0:	3a30      	subs	r2, #48	; 0x30
 801a5d2:	2a09      	cmp	r2, #9
 801a5d4:	d903      	bls.n	801a5de <_svfiprintf_r+0x196>
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d0c8      	beq.n	801a56c <_svfiprintf_r+0x124>
 801a5da:	9105      	str	r1, [sp, #20]
 801a5dc:	e7c6      	b.n	801a56c <_svfiprintf_r+0x124>
 801a5de:	fb05 2101 	mla	r1, r5, r1, r2
 801a5e2:	2301      	movs	r3, #1
 801a5e4:	4607      	mov	r7, r0
 801a5e6:	e7f0      	b.n	801a5ca <_svfiprintf_r+0x182>
 801a5e8:	ab03      	add	r3, sp, #12
 801a5ea:	9300      	str	r3, [sp, #0]
 801a5ec:	4622      	mov	r2, r4
 801a5ee:	4b11      	ldr	r3, [pc, #68]	; (801a634 <_svfiprintf_r+0x1ec>)
 801a5f0:	a904      	add	r1, sp, #16
 801a5f2:	4640      	mov	r0, r8
 801a5f4:	f3af 8000 	nop.w
 801a5f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a5fc:	4681      	mov	r9, r0
 801a5fe:	d1d6      	bne.n	801a5ae <_svfiprintf_r+0x166>
 801a600:	89a3      	ldrh	r3, [r4, #12]
 801a602:	065b      	lsls	r3, r3, #25
 801a604:	f53f af35 	bmi.w	801a472 <_svfiprintf_r+0x2a>
 801a608:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a60a:	b01d      	add	sp, #116	; 0x74
 801a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a610:	ab03      	add	r3, sp, #12
 801a612:	9300      	str	r3, [sp, #0]
 801a614:	4622      	mov	r2, r4
 801a616:	4b07      	ldr	r3, [pc, #28]	; (801a634 <_svfiprintf_r+0x1ec>)
 801a618:	a904      	add	r1, sp, #16
 801a61a:	4640      	mov	r0, r8
 801a61c:	f000 f9c2 	bl	801a9a4 <_printf_i>
 801a620:	e7ea      	b.n	801a5f8 <_svfiprintf_r+0x1b0>
 801a622:	bf00      	nop
 801a624:	080402f0 	.word	0x080402f0
 801a628:	080402f6 	.word	0x080402f6
 801a62c:	080402fa 	.word	0x080402fa
 801a630:	00000000 	.word	0x00000000
 801a634:	0801a395 	.word	0x0801a395

0801a638 <__sfputc_r>:
 801a638:	6893      	ldr	r3, [r2, #8]
 801a63a:	3b01      	subs	r3, #1
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	b410      	push	{r4}
 801a640:	6093      	str	r3, [r2, #8]
 801a642:	da08      	bge.n	801a656 <__sfputc_r+0x1e>
 801a644:	6994      	ldr	r4, [r2, #24]
 801a646:	42a3      	cmp	r3, r4
 801a648:	db01      	blt.n	801a64e <__sfputc_r+0x16>
 801a64a:	290a      	cmp	r1, #10
 801a64c:	d103      	bne.n	801a656 <__sfputc_r+0x1e>
 801a64e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a652:	f000 bb0d 	b.w	801ac70 <__swbuf_r>
 801a656:	6813      	ldr	r3, [r2, #0]
 801a658:	1c58      	adds	r0, r3, #1
 801a65a:	6010      	str	r0, [r2, #0]
 801a65c:	7019      	strb	r1, [r3, #0]
 801a65e:	4608      	mov	r0, r1
 801a660:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a664:	4770      	bx	lr

0801a666 <__sfputs_r>:
 801a666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a668:	4606      	mov	r6, r0
 801a66a:	460f      	mov	r7, r1
 801a66c:	4614      	mov	r4, r2
 801a66e:	18d5      	adds	r5, r2, r3
 801a670:	42ac      	cmp	r4, r5
 801a672:	d101      	bne.n	801a678 <__sfputs_r+0x12>
 801a674:	2000      	movs	r0, #0
 801a676:	e007      	b.n	801a688 <__sfputs_r+0x22>
 801a678:	463a      	mov	r2, r7
 801a67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a67e:	4630      	mov	r0, r6
 801a680:	f7ff ffda 	bl	801a638 <__sfputc_r>
 801a684:	1c43      	adds	r3, r0, #1
 801a686:	d1f3      	bne.n	801a670 <__sfputs_r+0xa>
 801a688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a68c <_vfiprintf_r>:
 801a68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a690:	460c      	mov	r4, r1
 801a692:	b09d      	sub	sp, #116	; 0x74
 801a694:	4617      	mov	r7, r2
 801a696:	461d      	mov	r5, r3
 801a698:	4606      	mov	r6, r0
 801a69a:	b118      	cbz	r0, 801a6a4 <_vfiprintf_r+0x18>
 801a69c:	6983      	ldr	r3, [r0, #24]
 801a69e:	b90b      	cbnz	r3, 801a6a4 <_vfiprintf_r+0x18>
 801a6a0:	f7ff fd3e 	bl	801a120 <__sinit>
 801a6a4:	4b7c      	ldr	r3, [pc, #496]	; (801a898 <_vfiprintf_r+0x20c>)
 801a6a6:	429c      	cmp	r4, r3
 801a6a8:	d158      	bne.n	801a75c <_vfiprintf_r+0xd0>
 801a6aa:	6874      	ldr	r4, [r6, #4]
 801a6ac:	89a3      	ldrh	r3, [r4, #12]
 801a6ae:	0718      	lsls	r0, r3, #28
 801a6b0:	d55e      	bpl.n	801a770 <_vfiprintf_r+0xe4>
 801a6b2:	6923      	ldr	r3, [r4, #16]
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d05b      	beq.n	801a770 <_vfiprintf_r+0xe4>
 801a6b8:	2300      	movs	r3, #0
 801a6ba:	9309      	str	r3, [sp, #36]	; 0x24
 801a6bc:	2320      	movs	r3, #32
 801a6be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a6c2:	2330      	movs	r3, #48	; 0x30
 801a6c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a6c8:	9503      	str	r5, [sp, #12]
 801a6ca:	f04f 0b01 	mov.w	fp, #1
 801a6ce:	46b8      	mov	r8, r7
 801a6d0:	4645      	mov	r5, r8
 801a6d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a6d6:	b10b      	cbz	r3, 801a6dc <_vfiprintf_r+0x50>
 801a6d8:	2b25      	cmp	r3, #37	; 0x25
 801a6da:	d154      	bne.n	801a786 <_vfiprintf_r+0xfa>
 801a6dc:	ebb8 0a07 	subs.w	sl, r8, r7
 801a6e0:	d00b      	beq.n	801a6fa <_vfiprintf_r+0x6e>
 801a6e2:	4653      	mov	r3, sl
 801a6e4:	463a      	mov	r2, r7
 801a6e6:	4621      	mov	r1, r4
 801a6e8:	4630      	mov	r0, r6
 801a6ea:	f7ff ffbc 	bl	801a666 <__sfputs_r>
 801a6ee:	3001      	adds	r0, #1
 801a6f0:	f000 80c2 	beq.w	801a878 <_vfiprintf_r+0x1ec>
 801a6f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6f6:	4453      	add	r3, sl
 801a6f8:	9309      	str	r3, [sp, #36]	; 0x24
 801a6fa:	f898 3000 	ldrb.w	r3, [r8]
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	f000 80ba 	beq.w	801a878 <_vfiprintf_r+0x1ec>
 801a704:	2300      	movs	r3, #0
 801a706:	f04f 32ff 	mov.w	r2, #4294967295
 801a70a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a70e:	9304      	str	r3, [sp, #16]
 801a710:	9307      	str	r3, [sp, #28]
 801a712:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a716:	931a      	str	r3, [sp, #104]	; 0x68
 801a718:	46a8      	mov	r8, r5
 801a71a:	2205      	movs	r2, #5
 801a71c:	f818 1b01 	ldrb.w	r1, [r8], #1
 801a720:	485e      	ldr	r0, [pc, #376]	; (801a89c <_vfiprintf_r+0x210>)
 801a722:	f7e5 fd7d 	bl	8000220 <memchr>
 801a726:	9b04      	ldr	r3, [sp, #16]
 801a728:	bb78      	cbnz	r0, 801a78a <_vfiprintf_r+0xfe>
 801a72a:	06d9      	lsls	r1, r3, #27
 801a72c:	bf44      	itt	mi
 801a72e:	2220      	movmi	r2, #32
 801a730:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a734:	071a      	lsls	r2, r3, #28
 801a736:	bf44      	itt	mi
 801a738:	222b      	movmi	r2, #43	; 0x2b
 801a73a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a73e:	782a      	ldrb	r2, [r5, #0]
 801a740:	2a2a      	cmp	r2, #42	; 0x2a
 801a742:	d02a      	beq.n	801a79a <_vfiprintf_r+0x10e>
 801a744:	9a07      	ldr	r2, [sp, #28]
 801a746:	46a8      	mov	r8, r5
 801a748:	2000      	movs	r0, #0
 801a74a:	250a      	movs	r5, #10
 801a74c:	4641      	mov	r1, r8
 801a74e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a752:	3b30      	subs	r3, #48	; 0x30
 801a754:	2b09      	cmp	r3, #9
 801a756:	d969      	bls.n	801a82c <_vfiprintf_r+0x1a0>
 801a758:	b360      	cbz	r0, 801a7b4 <_vfiprintf_r+0x128>
 801a75a:	e024      	b.n	801a7a6 <_vfiprintf_r+0x11a>
 801a75c:	4b50      	ldr	r3, [pc, #320]	; (801a8a0 <_vfiprintf_r+0x214>)
 801a75e:	429c      	cmp	r4, r3
 801a760:	d101      	bne.n	801a766 <_vfiprintf_r+0xda>
 801a762:	68b4      	ldr	r4, [r6, #8]
 801a764:	e7a2      	b.n	801a6ac <_vfiprintf_r+0x20>
 801a766:	4b4f      	ldr	r3, [pc, #316]	; (801a8a4 <_vfiprintf_r+0x218>)
 801a768:	429c      	cmp	r4, r3
 801a76a:	bf08      	it	eq
 801a76c:	68f4      	ldreq	r4, [r6, #12]
 801a76e:	e79d      	b.n	801a6ac <_vfiprintf_r+0x20>
 801a770:	4621      	mov	r1, r4
 801a772:	4630      	mov	r0, r6
 801a774:	f000 fae0 	bl	801ad38 <__swsetup_r>
 801a778:	2800      	cmp	r0, #0
 801a77a:	d09d      	beq.n	801a6b8 <_vfiprintf_r+0x2c>
 801a77c:	f04f 30ff 	mov.w	r0, #4294967295
 801a780:	b01d      	add	sp, #116	; 0x74
 801a782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a786:	46a8      	mov	r8, r5
 801a788:	e7a2      	b.n	801a6d0 <_vfiprintf_r+0x44>
 801a78a:	4a44      	ldr	r2, [pc, #272]	; (801a89c <_vfiprintf_r+0x210>)
 801a78c:	1a80      	subs	r0, r0, r2
 801a78e:	fa0b f000 	lsl.w	r0, fp, r0
 801a792:	4318      	orrs	r0, r3
 801a794:	9004      	str	r0, [sp, #16]
 801a796:	4645      	mov	r5, r8
 801a798:	e7be      	b.n	801a718 <_vfiprintf_r+0x8c>
 801a79a:	9a03      	ldr	r2, [sp, #12]
 801a79c:	1d11      	adds	r1, r2, #4
 801a79e:	6812      	ldr	r2, [r2, #0]
 801a7a0:	9103      	str	r1, [sp, #12]
 801a7a2:	2a00      	cmp	r2, #0
 801a7a4:	db01      	blt.n	801a7aa <_vfiprintf_r+0x11e>
 801a7a6:	9207      	str	r2, [sp, #28]
 801a7a8:	e004      	b.n	801a7b4 <_vfiprintf_r+0x128>
 801a7aa:	4252      	negs	r2, r2
 801a7ac:	f043 0302 	orr.w	r3, r3, #2
 801a7b0:	9207      	str	r2, [sp, #28]
 801a7b2:	9304      	str	r3, [sp, #16]
 801a7b4:	f898 3000 	ldrb.w	r3, [r8]
 801a7b8:	2b2e      	cmp	r3, #46	; 0x2e
 801a7ba:	d10e      	bne.n	801a7da <_vfiprintf_r+0x14e>
 801a7bc:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a7c0:	2b2a      	cmp	r3, #42	; 0x2a
 801a7c2:	d138      	bne.n	801a836 <_vfiprintf_r+0x1aa>
 801a7c4:	9b03      	ldr	r3, [sp, #12]
 801a7c6:	1d1a      	adds	r2, r3, #4
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	9203      	str	r2, [sp, #12]
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	bfb8      	it	lt
 801a7d0:	f04f 33ff 	movlt.w	r3, #4294967295
 801a7d4:	f108 0802 	add.w	r8, r8, #2
 801a7d8:	9305      	str	r3, [sp, #20]
 801a7da:	4d33      	ldr	r5, [pc, #204]	; (801a8a8 <_vfiprintf_r+0x21c>)
 801a7dc:	f898 1000 	ldrb.w	r1, [r8]
 801a7e0:	2203      	movs	r2, #3
 801a7e2:	4628      	mov	r0, r5
 801a7e4:	f7e5 fd1c 	bl	8000220 <memchr>
 801a7e8:	b140      	cbz	r0, 801a7fc <_vfiprintf_r+0x170>
 801a7ea:	2340      	movs	r3, #64	; 0x40
 801a7ec:	1b40      	subs	r0, r0, r5
 801a7ee:	fa03 f000 	lsl.w	r0, r3, r0
 801a7f2:	9b04      	ldr	r3, [sp, #16]
 801a7f4:	4303      	orrs	r3, r0
 801a7f6:	f108 0801 	add.w	r8, r8, #1
 801a7fa:	9304      	str	r3, [sp, #16]
 801a7fc:	f898 1000 	ldrb.w	r1, [r8]
 801a800:	482a      	ldr	r0, [pc, #168]	; (801a8ac <_vfiprintf_r+0x220>)
 801a802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a806:	2206      	movs	r2, #6
 801a808:	f108 0701 	add.w	r7, r8, #1
 801a80c:	f7e5 fd08 	bl	8000220 <memchr>
 801a810:	2800      	cmp	r0, #0
 801a812:	d037      	beq.n	801a884 <_vfiprintf_r+0x1f8>
 801a814:	4b26      	ldr	r3, [pc, #152]	; (801a8b0 <_vfiprintf_r+0x224>)
 801a816:	bb1b      	cbnz	r3, 801a860 <_vfiprintf_r+0x1d4>
 801a818:	9b03      	ldr	r3, [sp, #12]
 801a81a:	3307      	adds	r3, #7
 801a81c:	f023 0307 	bic.w	r3, r3, #7
 801a820:	3308      	adds	r3, #8
 801a822:	9303      	str	r3, [sp, #12]
 801a824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a826:	444b      	add	r3, r9
 801a828:	9309      	str	r3, [sp, #36]	; 0x24
 801a82a:	e750      	b.n	801a6ce <_vfiprintf_r+0x42>
 801a82c:	fb05 3202 	mla	r2, r5, r2, r3
 801a830:	2001      	movs	r0, #1
 801a832:	4688      	mov	r8, r1
 801a834:	e78a      	b.n	801a74c <_vfiprintf_r+0xc0>
 801a836:	2300      	movs	r3, #0
 801a838:	f108 0801 	add.w	r8, r8, #1
 801a83c:	9305      	str	r3, [sp, #20]
 801a83e:	4619      	mov	r1, r3
 801a840:	250a      	movs	r5, #10
 801a842:	4640      	mov	r0, r8
 801a844:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a848:	3a30      	subs	r2, #48	; 0x30
 801a84a:	2a09      	cmp	r2, #9
 801a84c:	d903      	bls.n	801a856 <_vfiprintf_r+0x1ca>
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d0c3      	beq.n	801a7da <_vfiprintf_r+0x14e>
 801a852:	9105      	str	r1, [sp, #20]
 801a854:	e7c1      	b.n	801a7da <_vfiprintf_r+0x14e>
 801a856:	fb05 2101 	mla	r1, r5, r1, r2
 801a85a:	2301      	movs	r3, #1
 801a85c:	4680      	mov	r8, r0
 801a85e:	e7f0      	b.n	801a842 <_vfiprintf_r+0x1b6>
 801a860:	ab03      	add	r3, sp, #12
 801a862:	9300      	str	r3, [sp, #0]
 801a864:	4622      	mov	r2, r4
 801a866:	4b13      	ldr	r3, [pc, #76]	; (801a8b4 <_vfiprintf_r+0x228>)
 801a868:	a904      	add	r1, sp, #16
 801a86a:	4630      	mov	r0, r6
 801a86c:	f3af 8000 	nop.w
 801a870:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a874:	4681      	mov	r9, r0
 801a876:	d1d5      	bne.n	801a824 <_vfiprintf_r+0x198>
 801a878:	89a3      	ldrh	r3, [r4, #12]
 801a87a:	065b      	lsls	r3, r3, #25
 801a87c:	f53f af7e 	bmi.w	801a77c <_vfiprintf_r+0xf0>
 801a880:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a882:	e77d      	b.n	801a780 <_vfiprintf_r+0xf4>
 801a884:	ab03      	add	r3, sp, #12
 801a886:	9300      	str	r3, [sp, #0]
 801a888:	4622      	mov	r2, r4
 801a88a:	4b0a      	ldr	r3, [pc, #40]	; (801a8b4 <_vfiprintf_r+0x228>)
 801a88c:	a904      	add	r1, sp, #16
 801a88e:	4630      	mov	r0, r6
 801a890:	f000 f888 	bl	801a9a4 <_printf_i>
 801a894:	e7ec      	b.n	801a870 <_vfiprintf_r+0x1e4>
 801a896:	bf00      	nop
 801a898:	080402b0 	.word	0x080402b0
 801a89c:	080402f0 	.word	0x080402f0
 801a8a0:	080402d0 	.word	0x080402d0
 801a8a4:	08040290 	.word	0x08040290
 801a8a8:	080402f6 	.word	0x080402f6
 801a8ac:	080402fa 	.word	0x080402fa
 801a8b0:	00000000 	.word	0x00000000
 801a8b4:	0801a667 	.word	0x0801a667

0801a8b8 <_printf_common>:
 801a8b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8bc:	4691      	mov	r9, r2
 801a8be:	461f      	mov	r7, r3
 801a8c0:	688a      	ldr	r2, [r1, #8]
 801a8c2:	690b      	ldr	r3, [r1, #16]
 801a8c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a8c8:	4293      	cmp	r3, r2
 801a8ca:	bfb8      	it	lt
 801a8cc:	4613      	movlt	r3, r2
 801a8ce:	f8c9 3000 	str.w	r3, [r9]
 801a8d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a8d6:	4606      	mov	r6, r0
 801a8d8:	460c      	mov	r4, r1
 801a8da:	b112      	cbz	r2, 801a8e2 <_printf_common+0x2a>
 801a8dc:	3301      	adds	r3, #1
 801a8de:	f8c9 3000 	str.w	r3, [r9]
 801a8e2:	6823      	ldr	r3, [r4, #0]
 801a8e4:	0699      	lsls	r1, r3, #26
 801a8e6:	bf42      	ittt	mi
 801a8e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a8ec:	3302      	addmi	r3, #2
 801a8ee:	f8c9 3000 	strmi.w	r3, [r9]
 801a8f2:	6825      	ldr	r5, [r4, #0]
 801a8f4:	f015 0506 	ands.w	r5, r5, #6
 801a8f8:	d107      	bne.n	801a90a <_printf_common+0x52>
 801a8fa:	f104 0a19 	add.w	sl, r4, #25
 801a8fe:	68e3      	ldr	r3, [r4, #12]
 801a900:	f8d9 2000 	ldr.w	r2, [r9]
 801a904:	1a9b      	subs	r3, r3, r2
 801a906:	42ab      	cmp	r3, r5
 801a908:	dc28      	bgt.n	801a95c <_printf_common+0xa4>
 801a90a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a90e:	6822      	ldr	r2, [r4, #0]
 801a910:	3300      	adds	r3, #0
 801a912:	bf18      	it	ne
 801a914:	2301      	movne	r3, #1
 801a916:	0692      	lsls	r2, r2, #26
 801a918:	d42d      	bmi.n	801a976 <_printf_common+0xbe>
 801a91a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a91e:	4639      	mov	r1, r7
 801a920:	4630      	mov	r0, r6
 801a922:	47c0      	blx	r8
 801a924:	3001      	adds	r0, #1
 801a926:	d020      	beq.n	801a96a <_printf_common+0xb2>
 801a928:	6823      	ldr	r3, [r4, #0]
 801a92a:	68e5      	ldr	r5, [r4, #12]
 801a92c:	f8d9 2000 	ldr.w	r2, [r9]
 801a930:	f003 0306 	and.w	r3, r3, #6
 801a934:	2b04      	cmp	r3, #4
 801a936:	bf08      	it	eq
 801a938:	1aad      	subeq	r5, r5, r2
 801a93a:	68a3      	ldr	r3, [r4, #8]
 801a93c:	6922      	ldr	r2, [r4, #16]
 801a93e:	bf0c      	ite	eq
 801a940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a944:	2500      	movne	r5, #0
 801a946:	4293      	cmp	r3, r2
 801a948:	bfc4      	itt	gt
 801a94a:	1a9b      	subgt	r3, r3, r2
 801a94c:	18ed      	addgt	r5, r5, r3
 801a94e:	f04f 0900 	mov.w	r9, #0
 801a952:	341a      	adds	r4, #26
 801a954:	454d      	cmp	r5, r9
 801a956:	d11a      	bne.n	801a98e <_printf_common+0xd6>
 801a958:	2000      	movs	r0, #0
 801a95a:	e008      	b.n	801a96e <_printf_common+0xb6>
 801a95c:	2301      	movs	r3, #1
 801a95e:	4652      	mov	r2, sl
 801a960:	4639      	mov	r1, r7
 801a962:	4630      	mov	r0, r6
 801a964:	47c0      	blx	r8
 801a966:	3001      	adds	r0, #1
 801a968:	d103      	bne.n	801a972 <_printf_common+0xba>
 801a96a:	f04f 30ff 	mov.w	r0, #4294967295
 801a96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a972:	3501      	adds	r5, #1
 801a974:	e7c3      	b.n	801a8fe <_printf_common+0x46>
 801a976:	18e1      	adds	r1, r4, r3
 801a978:	1c5a      	adds	r2, r3, #1
 801a97a:	2030      	movs	r0, #48	; 0x30
 801a97c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a980:	4422      	add	r2, r4
 801a982:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a986:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a98a:	3302      	adds	r3, #2
 801a98c:	e7c5      	b.n	801a91a <_printf_common+0x62>
 801a98e:	2301      	movs	r3, #1
 801a990:	4622      	mov	r2, r4
 801a992:	4639      	mov	r1, r7
 801a994:	4630      	mov	r0, r6
 801a996:	47c0      	blx	r8
 801a998:	3001      	adds	r0, #1
 801a99a:	d0e6      	beq.n	801a96a <_printf_common+0xb2>
 801a99c:	f109 0901 	add.w	r9, r9, #1
 801a9a0:	e7d8      	b.n	801a954 <_printf_common+0x9c>
	...

0801a9a4 <_printf_i>:
 801a9a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a9a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a9ac:	460c      	mov	r4, r1
 801a9ae:	7e09      	ldrb	r1, [r1, #24]
 801a9b0:	b085      	sub	sp, #20
 801a9b2:	296e      	cmp	r1, #110	; 0x6e
 801a9b4:	4617      	mov	r7, r2
 801a9b6:	4606      	mov	r6, r0
 801a9b8:	4698      	mov	r8, r3
 801a9ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a9bc:	f000 80b3 	beq.w	801ab26 <_printf_i+0x182>
 801a9c0:	d822      	bhi.n	801aa08 <_printf_i+0x64>
 801a9c2:	2963      	cmp	r1, #99	; 0x63
 801a9c4:	d036      	beq.n	801aa34 <_printf_i+0x90>
 801a9c6:	d80a      	bhi.n	801a9de <_printf_i+0x3a>
 801a9c8:	2900      	cmp	r1, #0
 801a9ca:	f000 80b9 	beq.w	801ab40 <_printf_i+0x19c>
 801a9ce:	2958      	cmp	r1, #88	; 0x58
 801a9d0:	f000 8083 	beq.w	801aada <_printf_i+0x136>
 801a9d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a9d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a9dc:	e032      	b.n	801aa44 <_printf_i+0xa0>
 801a9de:	2964      	cmp	r1, #100	; 0x64
 801a9e0:	d001      	beq.n	801a9e6 <_printf_i+0x42>
 801a9e2:	2969      	cmp	r1, #105	; 0x69
 801a9e4:	d1f6      	bne.n	801a9d4 <_printf_i+0x30>
 801a9e6:	6820      	ldr	r0, [r4, #0]
 801a9e8:	6813      	ldr	r3, [r2, #0]
 801a9ea:	0605      	lsls	r5, r0, #24
 801a9ec:	f103 0104 	add.w	r1, r3, #4
 801a9f0:	d52a      	bpl.n	801aa48 <_printf_i+0xa4>
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	6011      	str	r1, [r2, #0]
 801a9f6:	2b00      	cmp	r3, #0
 801a9f8:	da03      	bge.n	801aa02 <_printf_i+0x5e>
 801a9fa:	222d      	movs	r2, #45	; 0x2d
 801a9fc:	425b      	negs	r3, r3
 801a9fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801aa02:	486f      	ldr	r0, [pc, #444]	; (801abc0 <_printf_i+0x21c>)
 801aa04:	220a      	movs	r2, #10
 801aa06:	e039      	b.n	801aa7c <_printf_i+0xd8>
 801aa08:	2973      	cmp	r1, #115	; 0x73
 801aa0a:	f000 809d 	beq.w	801ab48 <_printf_i+0x1a4>
 801aa0e:	d808      	bhi.n	801aa22 <_printf_i+0x7e>
 801aa10:	296f      	cmp	r1, #111	; 0x6f
 801aa12:	d020      	beq.n	801aa56 <_printf_i+0xb2>
 801aa14:	2970      	cmp	r1, #112	; 0x70
 801aa16:	d1dd      	bne.n	801a9d4 <_printf_i+0x30>
 801aa18:	6823      	ldr	r3, [r4, #0]
 801aa1a:	f043 0320 	orr.w	r3, r3, #32
 801aa1e:	6023      	str	r3, [r4, #0]
 801aa20:	e003      	b.n	801aa2a <_printf_i+0x86>
 801aa22:	2975      	cmp	r1, #117	; 0x75
 801aa24:	d017      	beq.n	801aa56 <_printf_i+0xb2>
 801aa26:	2978      	cmp	r1, #120	; 0x78
 801aa28:	d1d4      	bne.n	801a9d4 <_printf_i+0x30>
 801aa2a:	2378      	movs	r3, #120	; 0x78
 801aa2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801aa30:	4864      	ldr	r0, [pc, #400]	; (801abc4 <_printf_i+0x220>)
 801aa32:	e055      	b.n	801aae0 <_printf_i+0x13c>
 801aa34:	6813      	ldr	r3, [r2, #0]
 801aa36:	1d19      	adds	r1, r3, #4
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	6011      	str	r1, [r2, #0]
 801aa3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801aa40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801aa44:	2301      	movs	r3, #1
 801aa46:	e08c      	b.n	801ab62 <_printf_i+0x1be>
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	6011      	str	r1, [r2, #0]
 801aa4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801aa50:	bf18      	it	ne
 801aa52:	b21b      	sxthne	r3, r3
 801aa54:	e7cf      	b.n	801a9f6 <_printf_i+0x52>
 801aa56:	6813      	ldr	r3, [r2, #0]
 801aa58:	6825      	ldr	r5, [r4, #0]
 801aa5a:	1d18      	adds	r0, r3, #4
 801aa5c:	6010      	str	r0, [r2, #0]
 801aa5e:	0628      	lsls	r0, r5, #24
 801aa60:	d501      	bpl.n	801aa66 <_printf_i+0xc2>
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	e002      	b.n	801aa6c <_printf_i+0xc8>
 801aa66:	0668      	lsls	r0, r5, #25
 801aa68:	d5fb      	bpl.n	801aa62 <_printf_i+0xbe>
 801aa6a:	881b      	ldrh	r3, [r3, #0]
 801aa6c:	4854      	ldr	r0, [pc, #336]	; (801abc0 <_printf_i+0x21c>)
 801aa6e:	296f      	cmp	r1, #111	; 0x6f
 801aa70:	bf14      	ite	ne
 801aa72:	220a      	movne	r2, #10
 801aa74:	2208      	moveq	r2, #8
 801aa76:	2100      	movs	r1, #0
 801aa78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801aa7c:	6865      	ldr	r5, [r4, #4]
 801aa7e:	60a5      	str	r5, [r4, #8]
 801aa80:	2d00      	cmp	r5, #0
 801aa82:	f2c0 8095 	blt.w	801abb0 <_printf_i+0x20c>
 801aa86:	6821      	ldr	r1, [r4, #0]
 801aa88:	f021 0104 	bic.w	r1, r1, #4
 801aa8c:	6021      	str	r1, [r4, #0]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d13d      	bne.n	801ab0e <_printf_i+0x16a>
 801aa92:	2d00      	cmp	r5, #0
 801aa94:	f040 808e 	bne.w	801abb4 <_printf_i+0x210>
 801aa98:	4665      	mov	r5, ip
 801aa9a:	2a08      	cmp	r2, #8
 801aa9c:	d10b      	bne.n	801aab6 <_printf_i+0x112>
 801aa9e:	6823      	ldr	r3, [r4, #0]
 801aaa0:	07db      	lsls	r3, r3, #31
 801aaa2:	d508      	bpl.n	801aab6 <_printf_i+0x112>
 801aaa4:	6923      	ldr	r3, [r4, #16]
 801aaa6:	6862      	ldr	r2, [r4, #4]
 801aaa8:	429a      	cmp	r2, r3
 801aaaa:	bfde      	ittt	le
 801aaac:	2330      	movle	r3, #48	; 0x30
 801aaae:	f805 3c01 	strble.w	r3, [r5, #-1]
 801aab2:	f105 35ff 	addle.w	r5, r5, #4294967295
 801aab6:	ebac 0305 	sub.w	r3, ip, r5
 801aaba:	6123      	str	r3, [r4, #16]
 801aabc:	f8cd 8000 	str.w	r8, [sp]
 801aac0:	463b      	mov	r3, r7
 801aac2:	aa03      	add	r2, sp, #12
 801aac4:	4621      	mov	r1, r4
 801aac6:	4630      	mov	r0, r6
 801aac8:	f7ff fef6 	bl	801a8b8 <_printf_common>
 801aacc:	3001      	adds	r0, #1
 801aace:	d14d      	bne.n	801ab6c <_printf_i+0x1c8>
 801aad0:	f04f 30ff 	mov.w	r0, #4294967295
 801aad4:	b005      	add	sp, #20
 801aad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aada:	4839      	ldr	r0, [pc, #228]	; (801abc0 <_printf_i+0x21c>)
 801aadc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801aae0:	6813      	ldr	r3, [r2, #0]
 801aae2:	6821      	ldr	r1, [r4, #0]
 801aae4:	1d1d      	adds	r5, r3, #4
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	6015      	str	r5, [r2, #0]
 801aaea:	060a      	lsls	r2, r1, #24
 801aaec:	d50b      	bpl.n	801ab06 <_printf_i+0x162>
 801aaee:	07ca      	lsls	r2, r1, #31
 801aaf0:	bf44      	itt	mi
 801aaf2:	f041 0120 	orrmi.w	r1, r1, #32
 801aaf6:	6021      	strmi	r1, [r4, #0]
 801aaf8:	b91b      	cbnz	r3, 801ab02 <_printf_i+0x15e>
 801aafa:	6822      	ldr	r2, [r4, #0]
 801aafc:	f022 0220 	bic.w	r2, r2, #32
 801ab00:	6022      	str	r2, [r4, #0]
 801ab02:	2210      	movs	r2, #16
 801ab04:	e7b7      	b.n	801aa76 <_printf_i+0xd2>
 801ab06:	064d      	lsls	r5, r1, #25
 801ab08:	bf48      	it	mi
 801ab0a:	b29b      	uxthmi	r3, r3
 801ab0c:	e7ef      	b.n	801aaee <_printf_i+0x14a>
 801ab0e:	4665      	mov	r5, ip
 801ab10:	fbb3 f1f2 	udiv	r1, r3, r2
 801ab14:	fb02 3311 	mls	r3, r2, r1, r3
 801ab18:	5cc3      	ldrb	r3, [r0, r3]
 801ab1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801ab1e:	460b      	mov	r3, r1
 801ab20:	2900      	cmp	r1, #0
 801ab22:	d1f5      	bne.n	801ab10 <_printf_i+0x16c>
 801ab24:	e7b9      	b.n	801aa9a <_printf_i+0xf6>
 801ab26:	6813      	ldr	r3, [r2, #0]
 801ab28:	6825      	ldr	r5, [r4, #0]
 801ab2a:	6961      	ldr	r1, [r4, #20]
 801ab2c:	1d18      	adds	r0, r3, #4
 801ab2e:	6010      	str	r0, [r2, #0]
 801ab30:	0628      	lsls	r0, r5, #24
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	d501      	bpl.n	801ab3a <_printf_i+0x196>
 801ab36:	6019      	str	r1, [r3, #0]
 801ab38:	e002      	b.n	801ab40 <_printf_i+0x19c>
 801ab3a:	066a      	lsls	r2, r5, #25
 801ab3c:	d5fb      	bpl.n	801ab36 <_printf_i+0x192>
 801ab3e:	8019      	strh	r1, [r3, #0]
 801ab40:	2300      	movs	r3, #0
 801ab42:	6123      	str	r3, [r4, #16]
 801ab44:	4665      	mov	r5, ip
 801ab46:	e7b9      	b.n	801aabc <_printf_i+0x118>
 801ab48:	6813      	ldr	r3, [r2, #0]
 801ab4a:	1d19      	adds	r1, r3, #4
 801ab4c:	6011      	str	r1, [r2, #0]
 801ab4e:	681d      	ldr	r5, [r3, #0]
 801ab50:	6862      	ldr	r2, [r4, #4]
 801ab52:	2100      	movs	r1, #0
 801ab54:	4628      	mov	r0, r5
 801ab56:	f7e5 fb63 	bl	8000220 <memchr>
 801ab5a:	b108      	cbz	r0, 801ab60 <_printf_i+0x1bc>
 801ab5c:	1b40      	subs	r0, r0, r5
 801ab5e:	6060      	str	r0, [r4, #4]
 801ab60:	6863      	ldr	r3, [r4, #4]
 801ab62:	6123      	str	r3, [r4, #16]
 801ab64:	2300      	movs	r3, #0
 801ab66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab6a:	e7a7      	b.n	801aabc <_printf_i+0x118>
 801ab6c:	6923      	ldr	r3, [r4, #16]
 801ab6e:	462a      	mov	r2, r5
 801ab70:	4639      	mov	r1, r7
 801ab72:	4630      	mov	r0, r6
 801ab74:	47c0      	blx	r8
 801ab76:	3001      	adds	r0, #1
 801ab78:	d0aa      	beq.n	801aad0 <_printf_i+0x12c>
 801ab7a:	6823      	ldr	r3, [r4, #0]
 801ab7c:	079b      	lsls	r3, r3, #30
 801ab7e:	d413      	bmi.n	801aba8 <_printf_i+0x204>
 801ab80:	68e0      	ldr	r0, [r4, #12]
 801ab82:	9b03      	ldr	r3, [sp, #12]
 801ab84:	4298      	cmp	r0, r3
 801ab86:	bfb8      	it	lt
 801ab88:	4618      	movlt	r0, r3
 801ab8a:	e7a3      	b.n	801aad4 <_printf_i+0x130>
 801ab8c:	2301      	movs	r3, #1
 801ab8e:	464a      	mov	r2, r9
 801ab90:	4639      	mov	r1, r7
 801ab92:	4630      	mov	r0, r6
 801ab94:	47c0      	blx	r8
 801ab96:	3001      	adds	r0, #1
 801ab98:	d09a      	beq.n	801aad0 <_printf_i+0x12c>
 801ab9a:	3501      	adds	r5, #1
 801ab9c:	68e3      	ldr	r3, [r4, #12]
 801ab9e:	9a03      	ldr	r2, [sp, #12]
 801aba0:	1a9b      	subs	r3, r3, r2
 801aba2:	42ab      	cmp	r3, r5
 801aba4:	dcf2      	bgt.n	801ab8c <_printf_i+0x1e8>
 801aba6:	e7eb      	b.n	801ab80 <_printf_i+0x1dc>
 801aba8:	2500      	movs	r5, #0
 801abaa:	f104 0919 	add.w	r9, r4, #25
 801abae:	e7f5      	b.n	801ab9c <_printf_i+0x1f8>
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d1ac      	bne.n	801ab0e <_printf_i+0x16a>
 801abb4:	7803      	ldrb	r3, [r0, #0]
 801abb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801abba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801abbe:	e76c      	b.n	801aa9a <_printf_i+0xf6>
 801abc0:	08040301 	.word	0x08040301
 801abc4:	08040312 	.word	0x08040312

0801abc8 <_sbrk_r>:
 801abc8:	b538      	push	{r3, r4, r5, lr}
 801abca:	4c06      	ldr	r4, [pc, #24]	; (801abe4 <_sbrk_r+0x1c>)
 801abcc:	2300      	movs	r3, #0
 801abce:	4605      	mov	r5, r0
 801abd0:	4608      	mov	r0, r1
 801abd2:	6023      	str	r3, [r4, #0]
 801abd4:	f7e6 f8b6 	bl	8000d44 <_sbrk>
 801abd8:	1c43      	adds	r3, r0, #1
 801abda:	d102      	bne.n	801abe2 <_sbrk_r+0x1a>
 801abdc:	6823      	ldr	r3, [r4, #0]
 801abde:	b103      	cbz	r3, 801abe2 <_sbrk_r+0x1a>
 801abe0:	602b      	str	r3, [r5, #0]
 801abe2:	bd38      	pop	{r3, r4, r5, pc}
 801abe4:	20016ee8 	.word	0x20016ee8

0801abe8 <__sread>:
 801abe8:	b510      	push	{r4, lr}
 801abea:	460c      	mov	r4, r1
 801abec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801abf0:	f000 fa6e 	bl	801b0d0 <_read_r>
 801abf4:	2800      	cmp	r0, #0
 801abf6:	bfab      	itete	ge
 801abf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801abfa:	89a3      	ldrhlt	r3, [r4, #12]
 801abfc:	181b      	addge	r3, r3, r0
 801abfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ac02:	bfac      	ite	ge
 801ac04:	6563      	strge	r3, [r4, #84]	; 0x54
 801ac06:	81a3      	strhlt	r3, [r4, #12]
 801ac08:	bd10      	pop	{r4, pc}

0801ac0a <__swrite>:
 801ac0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac0e:	461f      	mov	r7, r3
 801ac10:	898b      	ldrh	r3, [r1, #12]
 801ac12:	05db      	lsls	r3, r3, #23
 801ac14:	4605      	mov	r5, r0
 801ac16:	460c      	mov	r4, r1
 801ac18:	4616      	mov	r6, r2
 801ac1a:	d505      	bpl.n	801ac28 <__swrite+0x1e>
 801ac1c:	2302      	movs	r3, #2
 801ac1e:	2200      	movs	r2, #0
 801ac20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac24:	f000 f9b6 	bl	801af94 <_lseek_r>
 801ac28:	89a3      	ldrh	r3, [r4, #12]
 801ac2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ac2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ac32:	81a3      	strh	r3, [r4, #12]
 801ac34:	4632      	mov	r2, r6
 801ac36:	463b      	mov	r3, r7
 801ac38:	4628      	mov	r0, r5
 801ac3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac3e:	f000 b869 	b.w	801ad14 <_write_r>

0801ac42 <__sseek>:
 801ac42:	b510      	push	{r4, lr}
 801ac44:	460c      	mov	r4, r1
 801ac46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac4a:	f000 f9a3 	bl	801af94 <_lseek_r>
 801ac4e:	1c43      	adds	r3, r0, #1
 801ac50:	89a3      	ldrh	r3, [r4, #12]
 801ac52:	bf15      	itete	ne
 801ac54:	6560      	strne	r0, [r4, #84]	; 0x54
 801ac56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ac5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ac5e:	81a3      	strheq	r3, [r4, #12]
 801ac60:	bf18      	it	ne
 801ac62:	81a3      	strhne	r3, [r4, #12]
 801ac64:	bd10      	pop	{r4, pc}

0801ac66 <__sclose>:
 801ac66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ac6a:	f000 b8d3 	b.w	801ae14 <_close_r>
	...

0801ac70 <__swbuf_r>:
 801ac70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac72:	460e      	mov	r6, r1
 801ac74:	4614      	mov	r4, r2
 801ac76:	4605      	mov	r5, r0
 801ac78:	b118      	cbz	r0, 801ac82 <__swbuf_r+0x12>
 801ac7a:	6983      	ldr	r3, [r0, #24]
 801ac7c:	b90b      	cbnz	r3, 801ac82 <__swbuf_r+0x12>
 801ac7e:	f7ff fa4f 	bl	801a120 <__sinit>
 801ac82:	4b21      	ldr	r3, [pc, #132]	; (801ad08 <__swbuf_r+0x98>)
 801ac84:	429c      	cmp	r4, r3
 801ac86:	d12a      	bne.n	801acde <__swbuf_r+0x6e>
 801ac88:	686c      	ldr	r4, [r5, #4]
 801ac8a:	69a3      	ldr	r3, [r4, #24]
 801ac8c:	60a3      	str	r3, [r4, #8]
 801ac8e:	89a3      	ldrh	r3, [r4, #12]
 801ac90:	071a      	lsls	r2, r3, #28
 801ac92:	d52e      	bpl.n	801acf2 <__swbuf_r+0x82>
 801ac94:	6923      	ldr	r3, [r4, #16]
 801ac96:	b363      	cbz	r3, 801acf2 <__swbuf_r+0x82>
 801ac98:	6923      	ldr	r3, [r4, #16]
 801ac9a:	6820      	ldr	r0, [r4, #0]
 801ac9c:	1ac0      	subs	r0, r0, r3
 801ac9e:	6963      	ldr	r3, [r4, #20]
 801aca0:	b2f6      	uxtb	r6, r6
 801aca2:	4283      	cmp	r3, r0
 801aca4:	4637      	mov	r7, r6
 801aca6:	dc04      	bgt.n	801acb2 <__swbuf_r+0x42>
 801aca8:	4621      	mov	r1, r4
 801acaa:	4628      	mov	r0, r5
 801acac:	f000 f948 	bl	801af40 <_fflush_r>
 801acb0:	bb28      	cbnz	r0, 801acfe <__swbuf_r+0x8e>
 801acb2:	68a3      	ldr	r3, [r4, #8]
 801acb4:	3b01      	subs	r3, #1
 801acb6:	60a3      	str	r3, [r4, #8]
 801acb8:	6823      	ldr	r3, [r4, #0]
 801acba:	1c5a      	adds	r2, r3, #1
 801acbc:	6022      	str	r2, [r4, #0]
 801acbe:	701e      	strb	r6, [r3, #0]
 801acc0:	6963      	ldr	r3, [r4, #20]
 801acc2:	3001      	adds	r0, #1
 801acc4:	4283      	cmp	r3, r0
 801acc6:	d004      	beq.n	801acd2 <__swbuf_r+0x62>
 801acc8:	89a3      	ldrh	r3, [r4, #12]
 801acca:	07db      	lsls	r3, r3, #31
 801accc:	d519      	bpl.n	801ad02 <__swbuf_r+0x92>
 801acce:	2e0a      	cmp	r6, #10
 801acd0:	d117      	bne.n	801ad02 <__swbuf_r+0x92>
 801acd2:	4621      	mov	r1, r4
 801acd4:	4628      	mov	r0, r5
 801acd6:	f000 f933 	bl	801af40 <_fflush_r>
 801acda:	b190      	cbz	r0, 801ad02 <__swbuf_r+0x92>
 801acdc:	e00f      	b.n	801acfe <__swbuf_r+0x8e>
 801acde:	4b0b      	ldr	r3, [pc, #44]	; (801ad0c <__swbuf_r+0x9c>)
 801ace0:	429c      	cmp	r4, r3
 801ace2:	d101      	bne.n	801ace8 <__swbuf_r+0x78>
 801ace4:	68ac      	ldr	r4, [r5, #8]
 801ace6:	e7d0      	b.n	801ac8a <__swbuf_r+0x1a>
 801ace8:	4b09      	ldr	r3, [pc, #36]	; (801ad10 <__swbuf_r+0xa0>)
 801acea:	429c      	cmp	r4, r3
 801acec:	bf08      	it	eq
 801acee:	68ec      	ldreq	r4, [r5, #12]
 801acf0:	e7cb      	b.n	801ac8a <__swbuf_r+0x1a>
 801acf2:	4621      	mov	r1, r4
 801acf4:	4628      	mov	r0, r5
 801acf6:	f000 f81f 	bl	801ad38 <__swsetup_r>
 801acfa:	2800      	cmp	r0, #0
 801acfc:	d0cc      	beq.n	801ac98 <__swbuf_r+0x28>
 801acfe:	f04f 37ff 	mov.w	r7, #4294967295
 801ad02:	4638      	mov	r0, r7
 801ad04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad06:	bf00      	nop
 801ad08:	080402b0 	.word	0x080402b0
 801ad0c:	080402d0 	.word	0x080402d0
 801ad10:	08040290 	.word	0x08040290

0801ad14 <_write_r>:
 801ad14:	b538      	push	{r3, r4, r5, lr}
 801ad16:	4c07      	ldr	r4, [pc, #28]	; (801ad34 <_write_r+0x20>)
 801ad18:	4605      	mov	r5, r0
 801ad1a:	4608      	mov	r0, r1
 801ad1c:	4611      	mov	r1, r2
 801ad1e:	2200      	movs	r2, #0
 801ad20:	6022      	str	r2, [r4, #0]
 801ad22:	461a      	mov	r2, r3
 801ad24:	f7e5 ffbd 	bl	8000ca2 <_write>
 801ad28:	1c43      	adds	r3, r0, #1
 801ad2a:	d102      	bne.n	801ad32 <_write_r+0x1e>
 801ad2c:	6823      	ldr	r3, [r4, #0]
 801ad2e:	b103      	cbz	r3, 801ad32 <_write_r+0x1e>
 801ad30:	602b      	str	r3, [r5, #0]
 801ad32:	bd38      	pop	{r3, r4, r5, pc}
 801ad34:	20016ee8 	.word	0x20016ee8

0801ad38 <__swsetup_r>:
 801ad38:	4b32      	ldr	r3, [pc, #200]	; (801ae04 <__swsetup_r+0xcc>)
 801ad3a:	b570      	push	{r4, r5, r6, lr}
 801ad3c:	681d      	ldr	r5, [r3, #0]
 801ad3e:	4606      	mov	r6, r0
 801ad40:	460c      	mov	r4, r1
 801ad42:	b125      	cbz	r5, 801ad4e <__swsetup_r+0x16>
 801ad44:	69ab      	ldr	r3, [r5, #24]
 801ad46:	b913      	cbnz	r3, 801ad4e <__swsetup_r+0x16>
 801ad48:	4628      	mov	r0, r5
 801ad4a:	f7ff f9e9 	bl	801a120 <__sinit>
 801ad4e:	4b2e      	ldr	r3, [pc, #184]	; (801ae08 <__swsetup_r+0xd0>)
 801ad50:	429c      	cmp	r4, r3
 801ad52:	d10f      	bne.n	801ad74 <__swsetup_r+0x3c>
 801ad54:	686c      	ldr	r4, [r5, #4]
 801ad56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad5a:	b29a      	uxth	r2, r3
 801ad5c:	0715      	lsls	r5, r2, #28
 801ad5e:	d42c      	bmi.n	801adba <__swsetup_r+0x82>
 801ad60:	06d0      	lsls	r0, r2, #27
 801ad62:	d411      	bmi.n	801ad88 <__swsetup_r+0x50>
 801ad64:	2209      	movs	r2, #9
 801ad66:	6032      	str	r2, [r6, #0]
 801ad68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ad6c:	81a3      	strh	r3, [r4, #12]
 801ad6e:	f04f 30ff 	mov.w	r0, #4294967295
 801ad72:	e03e      	b.n	801adf2 <__swsetup_r+0xba>
 801ad74:	4b25      	ldr	r3, [pc, #148]	; (801ae0c <__swsetup_r+0xd4>)
 801ad76:	429c      	cmp	r4, r3
 801ad78:	d101      	bne.n	801ad7e <__swsetup_r+0x46>
 801ad7a:	68ac      	ldr	r4, [r5, #8]
 801ad7c:	e7eb      	b.n	801ad56 <__swsetup_r+0x1e>
 801ad7e:	4b24      	ldr	r3, [pc, #144]	; (801ae10 <__swsetup_r+0xd8>)
 801ad80:	429c      	cmp	r4, r3
 801ad82:	bf08      	it	eq
 801ad84:	68ec      	ldreq	r4, [r5, #12]
 801ad86:	e7e6      	b.n	801ad56 <__swsetup_r+0x1e>
 801ad88:	0751      	lsls	r1, r2, #29
 801ad8a:	d512      	bpl.n	801adb2 <__swsetup_r+0x7a>
 801ad8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ad8e:	b141      	cbz	r1, 801ada2 <__swsetup_r+0x6a>
 801ad90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ad94:	4299      	cmp	r1, r3
 801ad96:	d002      	beq.n	801ad9e <__swsetup_r+0x66>
 801ad98:	4630      	mov	r0, r6
 801ad9a:	f7ff fa53 	bl	801a244 <_free_r>
 801ad9e:	2300      	movs	r3, #0
 801ada0:	6363      	str	r3, [r4, #52]	; 0x34
 801ada2:	89a3      	ldrh	r3, [r4, #12]
 801ada4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ada8:	81a3      	strh	r3, [r4, #12]
 801adaa:	2300      	movs	r3, #0
 801adac:	6063      	str	r3, [r4, #4]
 801adae:	6923      	ldr	r3, [r4, #16]
 801adb0:	6023      	str	r3, [r4, #0]
 801adb2:	89a3      	ldrh	r3, [r4, #12]
 801adb4:	f043 0308 	orr.w	r3, r3, #8
 801adb8:	81a3      	strh	r3, [r4, #12]
 801adba:	6923      	ldr	r3, [r4, #16]
 801adbc:	b94b      	cbnz	r3, 801add2 <__swsetup_r+0x9a>
 801adbe:	89a3      	ldrh	r3, [r4, #12]
 801adc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801adc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801adc8:	d003      	beq.n	801add2 <__swsetup_r+0x9a>
 801adca:	4621      	mov	r1, r4
 801adcc:	4630      	mov	r0, r6
 801adce:	f000 f917 	bl	801b000 <__smakebuf_r>
 801add2:	89a2      	ldrh	r2, [r4, #12]
 801add4:	f012 0301 	ands.w	r3, r2, #1
 801add8:	d00c      	beq.n	801adf4 <__swsetup_r+0xbc>
 801adda:	2300      	movs	r3, #0
 801addc:	60a3      	str	r3, [r4, #8]
 801adde:	6963      	ldr	r3, [r4, #20]
 801ade0:	425b      	negs	r3, r3
 801ade2:	61a3      	str	r3, [r4, #24]
 801ade4:	6923      	ldr	r3, [r4, #16]
 801ade6:	b953      	cbnz	r3, 801adfe <__swsetup_r+0xc6>
 801ade8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801adec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801adf0:	d1ba      	bne.n	801ad68 <__swsetup_r+0x30>
 801adf2:	bd70      	pop	{r4, r5, r6, pc}
 801adf4:	0792      	lsls	r2, r2, #30
 801adf6:	bf58      	it	pl
 801adf8:	6963      	ldrpl	r3, [r4, #20]
 801adfa:	60a3      	str	r3, [r4, #8]
 801adfc:	e7f2      	b.n	801ade4 <__swsetup_r+0xac>
 801adfe:	2000      	movs	r0, #0
 801ae00:	e7f7      	b.n	801adf2 <__swsetup_r+0xba>
 801ae02:	bf00      	nop
 801ae04:	200000a4 	.word	0x200000a4
 801ae08:	080402b0 	.word	0x080402b0
 801ae0c:	080402d0 	.word	0x080402d0
 801ae10:	08040290 	.word	0x08040290

0801ae14 <_close_r>:
 801ae14:	b538      	push	{r3, r4, r5, lr}
 801ae16:	4c06      	ldr	r4, [pc, #24]	; (801ae30 <_close_r+0x1c>)
 801ae18:	2300      	movs	r3, #0
 801ae1a:	4605      	mov	r5, r0
 801ae1c:	4608      	mov	r0, r1
 801ae1e:	6023      	str	r3, [r4, #0]
 801ae20:	f7e5 ff5b 	bl	8000cda <_close>
 801ae24:	1c43      	adds	r3, r0, #1
 801ae26:	d102      	bne.n	801ae2e <_close_r+0x1a>
 801ae28:	6823      	ldr	r3, [r4, #0]
 801ae2a:	b103      	cbz	r3, 801ae2e <_close_r+0x1a>
 801ae2c:	602b      	str	r3, [r5, #0]
 801ae2e:	bd38      	pop	{r3, r4, r5, pc}
 801ae30:	20016ee8 	.word	0x20016ee8

0801ae34 <__sflush_r>:
 801ae34:	898a      	ldrh	r2, [r1, #12]
 801ae36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ae3a:	4605      	mov	r5, r0
 801ae3c:	0710      	lsls	r0, r2, #28
 801ae3e:	460c      	mov	r4, r1
 801ae40:	d458      	bmi.n	801aef4 <__sflush_r+0xc0>
 801ae42:	684b      	ldr	r3, [r1, #4]
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	dc05      	bgt.n	801ae54 <__sflush_r+0x20>
 801ae48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	dc02      	bgt.n	801ae54 <__sflush_r+0x20>
 801ae4e:	2000      	movs	r0, #0
 801ae50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ae54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ae56:	2e00      	cmp	r6, #0
 801ae58:	d0f9      	beq.n	801ae4e <__sflush_r+0x1a>
 801ae5a:	2300      	movs	r3, #0
 801ae5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ae60:	682f      	ldr	r7, [r5, #0]
 801ae62:	6a21      	ldr	r1, [r4, #32]
 801ae64:	602b      	str	r3, [r5, #0]
 801ae66:	d032      	beq.n	801aece <__sflush_r+0x9a>
 801ae68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ae6a:	89a3      	ldrh	r3, [r4, #12]
 801ae6c:	075a      	lsls	r2, r3, #29
 801ae6e:	d505      	bpl.n	801ae7c <__sflush_r+0x48>
 801ae70:	6863      	ldr	r3, [r4, #4]
 801ae72:	1ac0      	subs	r0, r0, r3
 801ae74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ae76:	b10b      	cbz	r3, 801ae7c <__sflush_r+0x48>
 801ae78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ae7a:	1ac0      	subs	r0, r0, r3
 801ae7c:	2300      	movs	r3, #0
 801ae7e:	4602      	mov	r2, r0
 801ae80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ae82:	6a21      	ldr	r1, [r4, #32]
 801ae84:	4628      	mov	r0, r5
 801ae86:	47b0      	blx	r6
 801ae88:	1c43      	adds	r3, r0, #1
 801ae8a:	89a3      	ldrh	r3, [r4, #12]
 801ae8c:	d106      	bne.n	801ae9c <__sflush_r+0x68>
 801ae8e:	6829      	ldr	r1, [r5, #0]
 801ae90:	291d      	cmp	r1, #29
 801ae92:	d848      	bhi.n	801af26 <__sflush_r+0xf2>
 801ae94:	4a29      	ldr	r2, [pc, #164]	; (801af3c <__sflush_r+0x108>)
 801ae96:	40ca      	lsrs	r2, r1
 801ae98:	07d6      	lsls	r6, r2, #31
 801ae9a:	d544      	bpl.n	801af26 <__sflush_r+0xf2>
 801ae9c:	2200      	movs	r2, #0
 801ae9e:	6062      	str	r2, [r4, #4]
 801aea0:	04d9      	lsls	r1, r3, #19
 801aea2:	6922      	ldr	r2, [r4, #16]
 801aea4:	6022      	str	r2, [r4, #0]
 801aea6:	d504      	bpl.n	801aeb2 <__sflush_r+0x7e>
 801aea8:	1c42      	adds	r2, r0, #1
 801aeaa:	d101      	bne.n	801aeb0 <__sflush_r+0x7c>
 801aeac:	682b      	ldr	r3, [r5, #0]
 801aeae:	b903      	cbnz	r3, 801aeb2 <__sflush_r+0x7e>
 801aeb0:	6560      	str	r0, [r4, #84]	; 0x54
 801aeb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aeb4:	602f      	str	r7, [r5, #0]
 801aeb6:	2900      	cmp	r1, #0
 801aeb8:	d0c9      	beq.n	801ae4e <__sflush_r+0x1a>
 801aeba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aebe:	4299      	cmp	r1, r3
 801aec0:	d002      	beq.n	801aec8 <__sflush_r+0x94>
 801aec2:	4628      	mov	r0, r5
 801aec4:	f7ff f9be 	bl	801a244 <_free_r>
 801aec8:	2000      	movs	r0, #0
 801aeca:	6360      	str	r0, [r4, #52]	; 0x34
 801aecc:	e7c0      	b.n	801ae50 <__sflush_r+0x1c>
 801aece:	2301      	movs	r3, #1
 801aed0:	4628      	mov	r0, r5
 801aed2:	47b0      	blx	r6
 801aed4:	1c41      	adds	r1, r0, #1
 801aed6:	d1c8      	bne.n	801ae6a <__sflush_r+0x36>
 801aed8:	682b      	ldr	r3, [r5, #0]
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d0c5      	beq.n	801ae6a <__sflush_r+0x36>
 801aede:	2b1d      	cmp	r3, #29
 801aee0:	d001      	beq.n	801aee6 <__sflush_r+0xb2>
 801aee2:	2b16      	cmp	r3, #22
 801aee4:	d101      	bne.n	801aeea <__sflush_r+0xb6>
 801aee6:	602f      	str	r7, [r5, #0]
 801aee8:	e7b1      	b.n	801ae4e <__sflush_r+0x1a>
 801aeea:	89a3      	ldrh	r3, [r4, #12]
 801aeec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aef0:	81a3      	strh	r3, [r4, #12]
 801aef2:	e7ad      	b.n	801ae50 <__sflush_r+0x1c>
 801aef4:	690f      	ldr	r7, [r1, #16]
 801aef6:	2f00      	cmp	r7, #0
 801aef8:	d0a9      	beq.n	801ae4e <__sflush_r+0x1a>
 801aefa:	0793      	lsls	r3, r2, #30
 801aefc:	680e      	ldr	r6, [r1, #0]
 801aefe:	bf08      	it	eq
 801af00:	694b      	ldreq	r3, [r1, #20]
 801af02:	600f      	str	r7, [r1, #0]
 801af04:	bf18      	it	ne
 801af06:	2300      	movne	r3, #0
 801af08:	eba6 0807 	sub.w	r8, r6, r7
 801af0c:	608b      	str	r3, [r1, #8]
 801af0e:	f1b8 0f00 	cmp.w	r8, #0
 801af12:	dd9c      	ble.n	801ae4e <__sflush_r+0x1a>
 801af14:	4643      	mov	r3, r8
 801af16:	463a      	mov	r2, r7
 801af18:	6a21      	ldr	r1, [r4, #32]
 801af1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801af1c:	4628      	mov	r0, r5
 801af1e:	47b0      	blx	r6
 801af20:	2800      	cmp	r0, #0
 801af22:	dc06      	bgt.n	801af32 <__sflush_r+0xfe>
 801af24:	89a3      	ldrh	r3, [r4, #12]
 801af26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af2a:	81a3      	strh	r3, [r4, #12]
 801af2c:	f04f 30ff 	mov.w	r0, #4294967295
 801af30:	e78e      	b.n	801ae50 <__sflush_r+0x1c>
 801af32:	4407      	add	r7, r0
 801af34:	eba8 0800 	sub.w	r8, r8, r0
 801af38:	e7e9      	b.n	801af0e <__sflush_r+0xda>
 801af3a:	bf00      	nop
 801af3c:	20400001 	.word	0x20400001

0801af40 <_fflush_r>:
 801af40:	b538      	push	{r3, r4, r5, lr}
 801af42:	690b      	ldr	r3, [r1, #16]
 801af44:	4605      	mov	r5, r0
 801af46:	460c      	mov	r4, r1
 801af48:	b1db      	cbz	r3, 801af82 <_fflush_r+0x42>
 801af4a:	b118      	cbz	r0, 801af54 <_fflush_r+0x14>
 801af4c:	6983      	ldr	r3, [r0, #24]
 801af4e:	b90b      	cbnz	r3, 801af54 <_fflush_r+0x14>
 801af50:	f7ff f8e6 	bl	801a120 <__sinit>
 801af54:	4b0c      	ldr	r3, [pc, #48]	; (801af88 <_fflush_r+0x48>)
 801af56:	429c      	cmp	r4, r3
 801af58:	d109      	bne.n	801af6e <_fflush_r+0x2e>
 801af5a:	686c      	ldr	r4, [r5, #4]
 801af5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801af60:	b17b      	cbz	r3, 801af82 <_fflush_r+0x42>
 801af62:	4621      	mov	r1, r4
 801af64:	4628      	mov	r0, r5
 801af66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801af6a:	f7ff bf63 	b.w	801ae34 <__sflush_r>
 801af6e:	4b07      	ldr	r3, [pc, #28]	; (801af8c <_fflush_r+0x4c>)
 801af70:	429c      	cmp	r4, r3
 801af72:	d101      	bne.n	801af78 <_fflush_r+0x38>
 801af74:	68ac      	ldr	r4, [r5, #8]
 801af76:	e7f1      	b.n	801af5c <_fflush_r+0x1c>
 801af78:	4b05      	ldr	r3, [pc, #20]	; (801af90 <_fflush_r+0x50>)
 801af7a:	429c      	cmp	r4, r3
 801af7c:	bf08      	it	eq
 801af7e:	68ec      	ldreq	r4, [r5, #12]
 801af80:	e7ec      	b.n	801af5c <_fflush_r+0x1c>
 801af82:	2000      	movs	r0, #0
 801af84:	bd38      	pop	{r3, r4, r5, pc}
 801af86:	bf00      	nop
 801af88:	080402b0 	.word	0x080402b0
 801af8c:	080402d0 	.word	0x080402d0
 801af90:	08040290 	.word	0x08040290

0801af94 <_lseek_r>:
 801af94:	b538      	push	{r3, r4, r5, lr}
 801af96:	4c07      	ldr	r4, [pc, #28]	; (801afb4 <_lseek_r+0x20>)
 801af98:	4605      	mov	r5, r0
 801af9a:	4608      	mov	r0, r1
 801af9c:	4611      	mov	r1, r2
 801af9e:	2200      	movs	r2, #0
 801afa0:	6022      	str	r2, [r4, #0]
 801afa2:	461a      	mov	r2, r3
 801afa4:	f7e5 fec0 	bl	8000d28 <_lseek>
 801afa8:	1c43      	adds	r3, r0, #1
 801afaa:	d102      	bne.n	801afb2 <_lseek_r+0x1e>
 801afac:	6823      	ldr	r3, [r4, #0]
 801afae:	b103      	cbz	r3, 801afb2 <_lseek_r+0x1e>
 801afb0:	602b      	str	r3, [r5, #0]
 801afb2:	bd38      	pop	{r3, r4, r5, pc}
 801afb4:	20016ee8 	.word	0x20016ee8

0801afb8 <__swhatbuf_r>:
 801afb8:	b570      	push	{r4, r5, r6, lr}
 801afba:	460e      	mov	r6, r1
 801afbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801afc0:	2900      	cmp	r1, #0
 801afc2:	b096      	sub	sp, #88	; 0x58
 801afc4:	4614      	mov	r4, r2
 801afc6:	461d      	mov	r5, r3
 801afc8:	da07      	bge.n	801afda <__swhatbuf_r+0x22>
 801afca:	2300      	movs	r3, #0
 801afcc:	602b      	str	r3, [r5, #0]
 801afce:	89b3      	ldrh	r3, [r6, #12]
 801afd0:	061a      	lsls	r2, r3, #24
 801afd2:	d410      	bmi.n	801aff6 <__swhatbuf_r+0x3e>
 801afd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801afd8:	e00e      	b.n	801aff8 <__swhatbuf_r+0x40>
 801afda:	466a      	mov	r2, sp
 801afdc:	f000 f88a 	bl	801b0f4 <_fstat_r>
 801afe0:	2800      	cmp	r0, #0
 801afe2:	dbf2      	blt.n	801afca <__swhatbuf_r+0x12>
 801afe4:	9a01      	ldr	r2, [sp, #4]
 801afe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801afea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801afee:	425a      	negs	r2, r3
 801aff0:	415a      	adcs	r2, r3
 801aff2:	602a      	str	r2, [r5, #0]
 801aff4:	e7ee      	b.n	801afd4 <__swhatbuf_r+0x1c>
 801aff6:	2340      	movs	r3, #64	; 0x40
 801aff8:	2000      	movs	r0, #0
 801affa:	6023      	str	r3, [r4, #0]
 801affc:	b016      	add	sp, #88	; 0x58
 801affe:	bd70      	pop	{r4, r5, r6, pc}

0801b000 <__smakebuf_r>:
 801b000:	898b      	ldrh	r3, [r1, #12]
 801b002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b004:	079d      	lsls	r5, r3, #30
 801b006:	4606      	mov	r6, r0
 801b008:	460c      	mov	r4, r1
 801b00a:	d507      	bpl.n	801b01c <__smakebuf_r+0x1c>
 801b00c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b010:	6023      	str	r3, [r4, #0]
 801b012:	6123      	str	r3, [r4, #16]
 801b014:	2301      	movs	r3, #1
 801b016:	6163      	str	r3, [r4, #20]
 801b018:	b002      	add	sp, #8
 801b01a:	bd70      	pop	{r4, r5, r6, pc}
 801b01c:	ab01      	add	r3, sp, #4
 801b01e:	466a      	mov	r2, sp
 801b020:	f7ff ffca 	bl	801afb8 <__swhatbuf_r>
 801b024:	9900      	ldr	r1, [sp, #0]
 801b026:	4605      	mov	r5, r0
 801b028:	4630      	mov	r0, r6
 801b02a:	f7ff f959 	bl	801a2e0 <_malloc_r>
 801b02e:	b948      	cbnz	r0, 801b044 <__smakebuf_r+0x44>
 801b030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b034:	059a      	lsls	r2, r3, #22
 801b036:	d4ef      	bmi.n	801b018 <__smakebuf_r+0x18>
 801b038:	f023 0303 	bic.w	r3, r3, #3
 801b03c:	f043 0302 	orr.w	r3, r3, #2
 801b040:	81a3      	strh	r3, [r4, #12]
 801b042:	e7e3      	b.n	801b00c <__smakebuf_r+0xc>
 801b044:	4b0d      	ldr	r3, [pc, #52]	; (801b07c <__smakebuf_r+0x7c>)
 801b046:	62b3      	str	r3, [r6, #40]	; 0x28
 801b048:	89a3      	ldrh	r3, [r4, #12]
 801b04a:	6020      	str	r0, [r4, #0]
 801b04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b050:	81a3      	strh	r3, [r4, #12]
 801b052:	9b00      	ldr	r3, [sp, #0]
 801b054:	6163      	str	r3, [r4, #20]
 801b056:	9b01      	ldr	r3, [sp, #4]
 801b058:	6120      	str	r0, [r4, #16]
 801b05a:	b15b      	cbz	r3, 801b074 <__smakebuf_r+0x74>
 801b05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b060:	4630      	mov	r0, r6
 801b062:	f000 f859 	bl	801b118 <_isatty_r>
 801b066:	b128      	cbz	r0, 801b074 <__smakebuf_r+0x74>
 801b068:	89a3      	ldrh	r3, [r4, #12]
 801b06a:	f023 0303 	bic.w	r3, r3, #3
 801b06e:	f043 0301 	orr.w	r3, r3, #1
 801b072:	81a3      	strh	r3, [r4, #12]
 801b074:	89a3      	ldrh	r3, [r4, #12]
 801b076:	431d      	orrs	r5, r3
 801b078:	81a5      	strh	r5, [r4, #12]
 801b07a:	e7cd      	b.n	801b018 <__smakebuf_r+0x18>
 801b07c:	0801a0e9 	.word	0x0801a0e9

0801b080 <__malloc_lock>:
 801b080:	4770      	bx	lr

0801b082 <__malloc_unlock>:
 801b082:	4770      	bx	lr

0801b084 <_realloc_r>:
 801b084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b086:	4607      	mov	r7, r0
 801b088:	4614      	mov	r4, r2
 801b08a:	460e      	mov	r6, r1
 801b08c:	b921      	cbnz	r1, 801b098 <_realloc_r+0x14>
 801b08e:	4611      	mov	r1, r2
 801b090:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b094:	f7ff b924 	b.w	801a2e0 <_malloc_r>
 801b098:	b922      	cbnz	r2, 801b0a4 <_realloc_r+0x20>
 801b09a:	f7ff f8d3 	bl	801a244 <_free_r>
 801b09e:	4625      	mov	r5, r4
 801b0a0:	4628      	mov	r0, r5
 801b0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b0a4:	f000 f848 	bl	801b138 <_malloc_usable_size_r>
 801b0a8:	42a0      	cmp	r0, r4
 801b0aa:	d20f      	bcs.n	801b0cc <_realloc_r+0x48>
 801b0ac:	4621      	mov	r1, r4
 801b0ae:	4638      	mov	r0, r7
 801b0b0:	f7ff f916 	bl	801a2e0 <_malloc_r>
 801b0b4:	4605      	mov	r5, r0
 801b0b6:	2800      	cmp	r0, #0
 801b0b8:	d0f2      	beq.n	801b0a0 <_realloc_r+0x1c>
 801b0ba:	4631      	mov	r1, r6
 801b0bc:	4622      	mov	r2, r4
 801b0be:	f7fe ff0e 	bl	8019ede <memcpy>
 801b0c2:	4631      	mov	r1, r6
 801b0c4:	4638      	mov	r0, r7
 801b0c6:	f7ff f8bd 	bl	801a244 <_free_r>
 801b0ca:	e7e9      	b.n	801b0a0 <_realloc_r+0x1c>
 801b0cc:	4635      	mov	r5, r6
 801b0ce:	e7e7      	b.n	801b0a0 <_realloc_r+0x1c>

0801b0d0 <_read_r>:
 801b0d0:	b538      	push	{r3, r4, r5, lr}
 801b0d2:	4c07      	ldr	r4, [pc, #28]	; (801b0f0 <_read_r+0x20>)
 801b0d4:	4605      	mov	r5, r0
 801b0d6:	4608      	mov	r0, r1
 801b0d8:	4611      	mov	r1, r2
 801b0da:	2200      	movs	r2, #0
 801b0dc:	6022      	str	r2, [r4, #0]
 801b0de:	461a      	mov	r2, r3
 801b0e0:	f7e5 fdc2 	bl	8000c68 <_read>
 801b0e4:	1c43      	adds	r3, r0, #1
 801b0e6:	d102      	bne.n	801b0ee <_read_r+0x1e>
 801b0e8:	6823      	ldr	r3, [r4, #0]
 801b0ea:	b103      	cbz	r3, 801b0ee <_read_r+0x1e>
 801b0ec:	602b      	str	r3, [r5, #0]
 801b0ee:	bd38      	pop	{r3, r4, r5, pc}
 801b0f0:	20016ee8 	.word	0x20016ee8

0801b0f4 <_fstat_r>:
 801b0f4:	b538      	push	{r3, r4, r5, lr}
 801b0f6:	4c07      	ldr	r4, [pc, #28]	; (801b114 <_fstat_r+0x20>)
 801b0f8:	2300      	movs	r3, #0
 801b0fa:	4605      	mov	r5, r0
 801b0fc:	4608      	mov	r0, r1
 801b0fe:	4611      	mov	r1, r2
 801b100:	6023      	str	r3, [r4, #0]
 801b102:	f7e5 fdf6 	bl	8000cf2 <_fstat>
 801b106:	1c43      	adds	r3, r0, #1
 801b108:	d102      	bne.n	801b110 <_fstat_r+0x1c>
 801b10a:	6823      	ldr	r3, [r4, #0]
 801b10c:	b103      	cbz	r3, 801b110 <_fstat_r+0x1c>
 801b10e:	602b      	str	r3, [r5, #0]
 801b110:	bd38      	pop	{r3, r4, r5, pc}
 801b112:	bf00      	nop
 801b114:	20016ee8 	.word	0x20016ee8

0801b118 <_isatty_r>:
 801b118:	b538      	push	{r3, r4, r5, lr}
 801b11a:	4c06      	ldr	r4, [pc, #24]	; (801b134 <_isatty_r+0x1c>)
 801b11c:	2300      	movs	r3, #0
 801b11e:	4605      	mov	r5, r0
 801b120:	4608      	mov	r0, r1
 801b122:	6023      	str	r3, [r4, #0]
 801b124:	f7e5 fdf5 	bl	8000d12 <_isatty>
 801b128:	1c43      	adds	r3, r0, #1
 801b12a:	d102      	bne.n	801b132 <_isatty_r+0x1a>
 801b12c:	6823      	ldr	r3, [r4, #0]
 801b12e:	b103      	cbz	r3, 801b132 <_isatty_r+0x1a>
 801b130:	602b      	str	r3, [r5, #0]
 801b132:	bd38      	pop	{r3, r4, r5, pc}
 801b134:	20016ee8 	.word	0x20016ee8

0801b138 <_malloc_usable_size_r>:
 801b138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b13c:	1f18      	subs	r0, r3, #4
 801b13e:	2b00      	cmp	r3, #0
 801b140:	bfbc      	itt	lt
 801b142:	580b      	ldrlt	r3, [r1, r0]
 801b144:	18c0      	addlt	r0, r0, r3
 801b146:	4770      	bx	lr

0801b148 <_init>:
 801b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b14a:	bf00      	nop
 801b14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b14e:	bc08      	pop	{r3}
 801b150:	469e      	mov	lr, r3
 801b152:	4770      	bx	lr

0801b154 <_fini>:
 801b154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b156:	bf00      	nop
 801b158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b15a:	bc08      	pop	{r3}
 801b15c:	469e      	mov	lr, r3
 801b15e:	4770      	bx	lr
